
101_Display_w_DMA_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003960  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009430  08003b38  08003b38  00004b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf68  0800cf68  0000e020  2**0
                  CONTENTS
  4 .ARM          00000000  0800cf68  0800cf68  0000e020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cf68  0800cf68  0000e020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf68  0800cf68  0000df68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf6c  0800cf6c  0000df6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800cf70  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000020  0800cf90  0000e020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  0800cf90  0000e10c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096e8  00000000  00000000  0000e050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b97  00000000  00000000  00017738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  000192d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000245b8  00000000  00000000  00019c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000a890  00000000  00000000  0003e1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e51a9  00000000  00000000  00048a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0012dc31  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000070f  00000000  00000000  0012dc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002510  00000000  00000000  0012e384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00130894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003b20 	.word	0x08003b20

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08003b20 	.word	0x08003b20

08000218 <demoTFT>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void demoTFT(void)
{
 8000218:	b5b0      	push	{r4, r5, r7, lr}
 800021a:	b08a      	sub	sp, #40	@ 0x28
 800021c:	af04      	add	r7, sp, #16
 ST7735_SetRotation(r);
 800021e:	4b4a      	ldr	r3, [pc, #296]	@ (8000348 <demoTFT+0x130>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	4618      	mov	r0, r3
 8000224:	f001 fa16 	bl	8001654 <ST7735_SetRotation>

 ST7735_FillScreen(ST7735_BLACK);
 8000228:	2000      	movs	r0, #0
 800022a:	f000 fe39 	bl	8000ea0 <ST7735_FillScreen>

 for(int x = 0; x < ST7735_GetWidth(); x++)
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]
 8000232:	e018      	b.n	8000266 <demoTFT+0x4e>
 {
   ST7735_DrawPixel(x, 0, ST7735_WHITE);
 8000234:	697b      	ldr	r3, [r7, #20]
 8000236:	b29b      	uxth	r3, r3
 8000238:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fcb8 	bl	8000bb4 <ST7735_DrawPixel>
   ST7735_DrawPixel(x, ST7735_GetHeight() - 1, ST7735_WHITE);
 8000244:	697b      	ldr	r3, [r7, #20]
 8000246:	b29c      	uxth	r4, r3
 8000248:	f001 fab0 	bl	80017ac <ST7735_GetHeight>
 800024c:	4603      	mov	r3, r0
 800024e:	b29b      	uxth	r3, r3
 8000250:	3b01      	subs	r3, #1
 8000252:	b29b      	uxth	r3, r3
 8000254:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000258:	4619      	mov	r1, r3
 800025a:	4620      	mov	r0, r4
 800025c:	f000 fcaa 	bl	8000bb4 <ST7735_DrawPixel>
 for(int x = 0; x < ST7735_GetWidth(); x++)
 8000260:	697b      	ldr	r3, [r7, #20]
 8000262:	3301      	adds	r3, #1
 8000264:	617b      	str	r3, [r7, #20]
 8000266:	f001 faad 	bl	80017c4 <ST7735_GetWidth>
 800026a:	4603      	mov	r3, r0
 800026c:	461a      	mov	r2, r3
 800026e:	697b      	ldr	r3, [r7, #20]
 8000270:	4293      	cmp	r3, r2
 8000272:	dbdf      	blt.n	8000234 <demoTFT+0x1c>
 }

 for(int y = 0; y < ST7735_GetHeight(); y++)
 8000274:	2300      	movs	r3, #0
 8000276:	613b      	str	r3, [r7, #16]
 8000278:	e017      	b.n	80002aa <demoTFT+0x92>
 {
   ST7735_DrawPixel(0, y, ST7735_WHITE);
 800027a:	693b      	ldr	r3, [r7, #16]
 800027c:	b29b      	uxth	r3, r3
 800027e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000282:	4619      	mov	r1, r3
 8000284:	2000      	movs	r0, #0
 8000286:	f000 fc95 	bl	8000bb4 <ST7735_DrawPixel>
   ST7735_DrawPixel(ST7735_GetWidth() - 1, y, ST7735_WHITE);
 800028a:	f001 fa9b 	bl	80017c4 <ST7735_GetWidth>
 800028e:	4603      	mov	r3, r0
 8000290:	b29b      	uxth	r3, r3
 8000292:	3b01      	subs	r3, #1
 8000294:	b29b      	uxth	r3, r3
 8000296:	693a      	ldr	r2, [r7, #16]
 8000298:	b291      	uxth	r1, r2
 800029a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fc88 	bl	8000bb4 <ST7735_DrawPixel>
 for(int y = 0; y < ST7735_GetHeight(); y++)
 80002a4:	693b      	ldr	r3, [r7, #16]
 80002a6:	3301      	adds	r3, #1
 80002a8:	613b      	str	r3, [r7, #16]
 80002aa:	f001 fa7f 	bl	80017ac <ST7735_GetHeight>
 80002ae:	4603      	mov	r3, r0
 80002b0:	461a      	mov	r2, r3
 80002b2:	693b      	ldr	r3, [r7, #16]
 80002b4:	4293      	cmp	r3, r2
 80002b6:	dbe0      	blt.n	800027a <demoTFT+0x62>
 }

 ST7735_DrawLine(0, 0, ST7735_GetWidth(), ST7735_GetHeight(), ST7735_WHITE);
 80002b8:	f001 fa84 	bl	80017c4 <ST7735_GetWidth>
 80002bc:	4603      	mov	r3, r0
 80002be:	461c      	mov	r4, r3
 80002c0:	f001 fa74 	bl	80017ac <ST7735_GetHeight>
 80002c4:	4603      	mov	r3, r0
 80002c6:	461a      	mov	r2, r3
 80002c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	4613      	mov	r3, r2
 80002d0:	4622      	mov	r2, r4
 80002d2:	2100      	movs	r1, #0
 80002d4:	2000      	movs	r0, #0
 80002d6:	f001 f89c 	bl	8001412 <ST7735_DrawLine>
 ST7735_DrawLine(ST7735_GetWidth(), 0, 0, ST7735_GetHeight(), ST7735_WHITE);
 80002da:	f001 fa73 	bl	80017c4 <ST7735_GetWidth>
 80002de:	4603      	mov	r3, r0
 80002e0:	461c      	mov	r4, r3
 80002e2:	f001 fa63 	bl	80017ac <ST7735_GetHeight>
 80002e6:	4603      	mov	r3, r0
 80002e8:	461a      	mov	r2, r3
 80002ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	4613      	mov	r3, r2
 80002f2:	2200      	movs	r2, #0
 80002f4:	2100      	movs	r1, #0
 80002f6:	4620      	mov	r0, r4
 80002f8:	f001 f88b 	bl	8001412 <ST7735_DrawLine>

 HAL_Delay(2000);
 80002fc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000300:	f001 fbe6 	bl	8001ad0 <HAL_Delay>

 ST7735_FillScreen(ST7735_BLACK);
 8000304:	2000      	movs	r0, #0
 8000306:	f000 fdcb 	bl	8000ea0 <ST7735_FillScreen>

 for (int i = 0; i < ST7735_GetHeight(); i += 4)
 800030a:	2300      	movs	r3, #0
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	e011      	b.n	8000334 <demoTFT+0x11c>
 {
  ST7735_DrawFastHLine(0, i, ST7735_GetWidth() - 1, ST7735_WHITE);
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	b21c      	sxth	r4, r3
 8000314:	f001 fa56 	bl	80017c4 <ST7735_GetWidth>
 8000318:	4603      	mov	r3, r0
 800031a:	b29b      	uxth	r3, r3
 800031c:	3b01      	subs	r3, #1
 800031e:	b29b      	uxth	r3, r3
 8000320:	b21a      	sxth	r2, r3
 8000322:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000326:	4621      	mov	r1, r4
 8000328:	2000      	movs	r0, #0
 800032a:	f001 f953 	bl	80015d4 <ST7735_DrawFastHLine>
 for (int i = 0; i < ST7735_GetHeight(); i += 4)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	3304      	adds	r3, #4
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	f001 fa3a 	bl	80017ac <ST7735_GetHeight>
 8000338:	4603      	mov	r3, r0
 800033a:	461a      	mov	r2, r3
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	4293      	cmp	r3, r2
 8000340:	dbe6      	blt.n	8000310 <demoTFT+0xf8>
 }

 for (int i = 0; i < ST7735_GetWidth(); i += 4)
 8000342:	2300      	movs	r3, #0
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	e013      	b.n	8000370 <demoTFT+0x158>
 8000348:	2000003c 	.word	0x2000003c
 {
  ST7735_DrawFastVLine(i, 0, ST7735_GetHeight() - 1, ST7735_WHITE);
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	b21c      	sxth	r4, r3
 8000350:	f001 fa2c 	bl	80017ac <ST7735_GetHeight>
 8000354:	4603      	mov	r3, r0
 8000356:	b29b      	uxth	r3, r3
 8000358:	3b01      	subs	r3, #1
 800035a:	b29b      	uxth	r3, r3
 800035c:	b21a      	sxth	r2, r3
 800035e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000362:	2100      	movs	r1, #0
 8000364:	4620      	mov	r0, r4
 8000366:	f001 f8f3 	bl	8001550 <ST7735_DrawFastVLine>
 for (int i = 0; i < ST7735_GetWidth(); i += 4)
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	3304      	adds	r3, #4
 800036e:	60bb      	str	r3, [r7, #8]
 8000370:	f001 fa28 	bl	80017c4 <ST7735_GetWidth>
 8000374:	4603      	mov	r3, r0
 8000376:	461a      	mov	r2, r3
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	4293      	cmp	r3, r2
 800037c:	dbe6      	blt.n	800034c <demoTFT+0x134>
 }

 HAL_Delay(2000);
 800037e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000382:	f001 fba5 	bl	8001ad0 <HAL_Delay>

 // Check fonts
 ST7735_FillScreen(ST7735_BLACK);
 8000386:	2000      	movs	r0, #0
 8000388:	f000 fd8a 	bl	8000ea0 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "STM32 TFT ", Font_16x26, ST7735_RED, ST7735_BLACK);
 800038c:	4ba0      	ldr	r3, [pc, #640]	@ (8000610 <demoTFT+0x3f8>)
 800038e:	2200      	movs	r2, #0
 8000390:	9202      	str	r2, [sp, #8]
 8000392:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000396:	9201      	str	r2, [sp, #4]
 8000398:	685a      	ldr	r2, [r3, #4]
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a9d      	ldr	r2, [pc, #628]	@ (8000614 <demoTFT+0x3fc>)
 80003a0:	2100      	movs	r1, #0
 80003a2:	2000      	movs	r0, #0
 80003a4:	f000 fc4e 	bl	8000c44 <ST7735_DrawString>
 ST7735_DrawString(0, 3*20, "ELECTRONICS", Font_16x26, ST7735_GREEN, ST7735_BLACK);
 80003a8:	4b99      	ldr	r3, [pc, #612]	@ (8000610 <demoTFT+0x3f8>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	9202      	str	r2, [sp, #8]
 80003ae:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80003b2:	9201      	str	r2, [sp, #4]
 80003b4:	685a      	ldr	r2, [r3, #4]
 80003b6:	9200      	str	r2, [sp, #0]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a97      	ldr	r2, [pc, #604]	@ (8000618 <demoTFT+0x400>)
 80003bc:	213c      	movs	r1, #60	@ 0x3c
 80003be:	2000      	movs	r0, #0
 80003c0:	f000 fc40 	bl	8000c44 <ST7735_DrawString>
 ST7735_DrawString(0, 3*20+3*18, "Ismail", Font_16x26, ST7735_BLUE, ST7735_BLACK);
 80003c4:	4b92      	ldr	r3, [pc, #584]	@ (8000610 <demoTFT+0x3f8>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	9202      	str	r2, [sp, #8]
 80003ca:	221f      	movs	r2, #31
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	685a      	ldr	r2, [r3, #4]
 80003d0:	9200      	str	r2, [sp, #0]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a91      	ldr	r2, [pc, #580]	@ (800061c <demoTFT+0x404>)
 80003d6:	2172      	movs	r1, #114	@ 0x72
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 fc33 	bl	8000c44 <ST7735_DrawString>
 HAL_Delay(2000);
 80003de:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80003e2:	f001 fb75 	bl	8001ad0 <HAL_Delay>

 // Check colors
 ST7735_FillScreen(ST7735_BLACK);
 80003e6:	2000      	movs	r0, #0
 80003e8:	f000 fd5a 	bl	8000ea0 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "BLACK", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 80003ec:	4b88      	ldr	r3, [pc, #544]	@ (8000610 <demoTFT+0x3f8>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	9202      	str	r2, [sp, #8]
 80003f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003f6:	9201      	str	r2, [sp, #4]
 80003f8:	685a      	ldr	r2, [r3, #4]
 80003fa:	9200      	str	r2, [sp, #0]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a88      	ldr	r2, [pc, #544]	@ (8000620 <demoTFT+0x408>)
 8000400:	2100      	movs	r1, #0
 8000402:	2000      	movs	r0, #0
 8000404:	f000 fc1e 	bl	8000c44 <ST7735_DrawString>
 HAL_Delay(500);
 8000408:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800040c:	f001 fb60 	bl	8001ad0 <HAL_Delay>

 ST7735_FillScreen(ST7735_BLUE);
 8000410:	201f      	movs	r0, #31
 8000412:	f000 fd45 	bl	8000ea0 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "BLUE", Font_16x26, ST7735_BLACK, ST7735_BLUE);
 8000416:	4b7e      	ldr	r3, [pc, #504]	@ (8000610 <demoTFT+0x3f8>)
 8000418:	221f      	movs	r2, #31
 800041a:	9202      	str	r2, [sp, #8]
 800041c:	2200      	movs	r2, #0
 800041e:	9201      	str	r2, [sp, #4]
 8000420:	685a      	ldr	r2, [r3, #4]
 8000422:	9200      	str	r2, [sp, #0]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a7f      	ldr	r2, [pc, #508]	@ (8000624 <demoTFT+0x40c>)
 8000428:	2100      	movs	r1, #0
 800042a:	2000      	movs	r0, #0
 800042c:	f000 fc0a 	bl	8000c44 <ST7735_DrawString>
 HAL_Delay(500);
 8000430:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000434:	f001 fb4c 	bl	8001ad0 <HAL_Delay>

 ST7735_FillScreen(ST7735_RED);
 8000438:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800043c:	f000 fd30 	bl	8000ea0 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "RED", Font_16x26, ST7735_BLACK, ST7735_RED);
 8000440:	4b73      	ldr	r3, [pc, #460]	@ (8000610 <demoTFT+0x3f8>)
 8000442:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000446:	9202      	str	r2, [sp, #8]
 8000448:	2200      	movs	r2, #0
 800044a:	9201      	str	r2, [sp, #4]
 800044c:	685a      	ldr	r2, [r3, #4]
 800044e:	9200      	str	r2, [sp, #0]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a75      	ldr	r2, [pc, #468]	@ (8000628 <demoTFT+0x410>)
 8000454:	2100      	movs	r1, #0
 8000456:	2000      	movs	r0, #0
 8000458:	f000 fbf4 	bl	8000c44 <ST7735_DrawString>
 HAL_Delay(500);
 800045c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000460:	f001 fb36 	bl	8001ad0 <HAL_Delay>

 ST7735_FillScreen(ST7735_GREEN);
 8000464:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000468:	f000 fd1a 	bl	8000ea0 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "GREEN", Font_16x26, ST7735_BLACK, ST7735_GREEN);
 800046c:	4b68      	ldr	r3, [pc, #416]	@ (8000610 <demoTFT+0x3f8>)
 800046e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000472:	9202      	str	r2, [sp, #8]
 8000474:	2200      	movs	r2, #0
 8000476:	9201      	str	r2, [sp, #4]
 8000478:	685a      	ldr	r2, [r3, #4]
 800047a:	9200      	str	r2, [sp, #0]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a6b      	ldr	r2, [pc, #428]	@ (800062c <demoTFT+0x414>)
 8000480:	2100      	movs	r1, #0
 8000482:	2000      	movs	r0, #0
 8000484:	f000 fbde 	bl	8000c44 <ST7735_DrawString>
 HAL_Delay(500);
 8000488:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800048c:	f001 fb20 	bl	8001ad0 <HAL_Delay>

 ST7735_FillScreen(ST7735_CYAN);
 8000490:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8000494:	f000 fd04 	bl	8000ea0 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "CYAN", Font_16x26, ST7735_BLACK, ST7735_CYAN);
 8000498:	4b5d      	ldr	r3, [pc, #372]	@ (8000610 <demoTFT+0x3f8>)
 800049a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800049e:	9202      	str	r2, [sp, #8]
 80004a0:	2200      	movs	r2, #0
 80004a2:	9201      	str	r2, [sp, #4]
 80004a4:	685a      	ldr	r2, [r3, #4]
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a61      	ldr	r2, [pc, #388]	@ (8000630 <demoTFT+0x418>)
 80004ac:	2100      	movs	r1, #0
 80004ae:	2000      	movs	r0, #0
 80004b0:	f000 fbc8 	bl	8000c44 <ST7735_DrawString>
 HAL_Delay(500);
 80004b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004b8:	f001 fb0a 	bl	8001ad0 <HAL_Delay>

 ST7735_FillScreen(ST7735_MAGENTA);
 80004bc:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 80004c0:	f000 fcee 	bl	8000ea0 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "MAGENTA", Font_16x26, ST7735_BLACK, ST7735_MAGENTA);
 80004c4:	4b52      	ldr	r3, [pc, #328]	@ (8000610 <demoTFT+0x3f8>)
 80004c6:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80004ca:	9202      	str	r2, [sp, #8]
 80004cc:	2200      	movs	r2, #0
 80004ce:	9201      	str	r2, [sp, #4]
 80004d0:	685a      	ldr	r2, [r3, #4]
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a57      	ldr	r2, [pc, #348]	@ (8000634 <demoTFT+0x41c>)
 80004d8:	2100      	movs	r1, #0
 80004da:	2000      	movs	r0, #0
 80004dc:	f000 fbb2 	bl	8000c44 <ST7735_DrawString>
 HAL_Delay(500);
 80004e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004e4:	f001 faf4 	bl	8001ad0 <HAL_Delay>

 ST7735_FillScreen(ST7735_YELLOW);
 80004e8:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80004ec:	f000 fcd8 	bl	8000ea0 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "YELLOW", Font_16x26, ST7735_BLACK, ST7735_YELLOW);
 80004f0:	4b47      	ldr	r3, [pc, #284]	@ (8000610 <demoTFT+0x3f8>)
 80004f2:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80004f6:	9202      	str	r2, [sp, #8]
 80004f8:	2200      	movs	r2, #0
 80004fa:	9201      	str	r2, [sp, #4]
 80004fc:	685a      	ldr	r2, [r3, #4]
 80004fe:	9200      	str	r2, [sp, #0]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a4d      	ldr	r2, [pc, #308]	@ (8000638 <demoTFT+0x420>)
 8000504:	2100      	movs	r1, #0
 8000506:	2000      	movs	r0, #0
 8000508:	f000 fb9c 	bl	8000c44 <ST7735_DrawString>
 HAL_Delay(500);
 800050c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000510:	f001 fade 	bl	8001ad0 <HAL_Delay>

 ST7735_FillScreen(ST7735_WHITE);
 8000514:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000518:	f000 fcc2 	bl	8000ea0 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "WHITE", Font_16x26, ST7735_BLACK, ST7735_WHITE);
 800051c:	4b3c      	ldr	r3, [pc, #240]	@ (8000610 <demoTFT+0x3f8>)
 800051e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000522:	9202      	str	r2, [sp, #8]
 8000524:	2200      	movs	r2, #0
 8000526:	9201      	str	r2, [sp, #4]
 8000528:	685a      	ldr	r2, [r3, #4]
 800052a:	9200      	str	r2, [sp, #0]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a43      	ldr	r2, [pc, #268]	@ (800063c <demoTFT+0x424>)
 8000530:	2100      	movs	r1, #0
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fb86 	bl	8000c44 <ST7735_DrawString>
 HAL_Delay(500);
 8000538:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800053c:	f001 fac8 	bl	8001ad0 <HAL_Delay>

 // Draw circles
 ST7735_FillScreen(ST7735_BLACK);
 8000540:	2000      	movs	r0, #0
 8000542:	f000 fcad 	bl	8000ea0 <ST7735_FillScreen>
 for (int i = 0; i < ST7735_GetHeight() / 2; i += 2)
 8000546:	2300      	movs	r3, #0
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	e017      	b.n	800057c <demoTFT+0x364>
 {
  ST7735_DrawCircle(ST7735_GetWidth() / 2, ST7735_GetHeight() / 2, i, ST7735_YELLOW);
 800054c:	f001 f93a 	bl	80017c4 <ST7735_GetWidth>
 8000550:	4603      	mov	r3, r0
 8000552:	0fda      	lsrs	r2, r3, #31
 8000554:	4413      	add	r3, r2
 8000556:	105b      	asrs	r3, r3, #1
 8000558:	b21c      	sxth	r4, r3
 800055a:	f001 f927 	bl	80017ac <ST7735_GetHeight>
 800055e:	4603      	mov	r3, r0
 8000560:	0fda      	lsrs	r2, r3, #31
 8000562:	4413      	add	r3, r2
 8000564:	105b      	asrs	r3, r3, #1
 8000566:	b219      	sxth	r1, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	b21a      	sxth	r2, r3
 800056c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000570:	4620      	mov	r0, r4
 8000572:	f000 fd17 	bl	8000fa4 <ST7735_DrawCircle>
 for (int i = 0; i < ST7735_GetHeight() / 2; i += 2)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	3302      	adds	r3, #2
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	f001 f916 	bl	80017ac <ST7735_GetHeight>
 8000580:	4603      	mov	r3, r0
 8000582:	0fda      	lsrs	r2, r3, #31
 8000584:	4413      	add	r3, r2
 8000586:	105b      	asrs	r3, r3, #1
 8000588:	b21b      	sxth	r3, r3
 800058a:	461a      	mov	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4293      	cmp	r3, r2
 8000590:	dbdc      	blt.n	800054c <demoTFT+0x334>
 }
 HAL_Delay(1000);
 8000592:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000596:	f001 fa9b 	bl	8001ad0 <HAL_Delay>

 ST7735_FillScreen(ST7735_BLACK);
 800059a:	2000      	movs	r0, #0
 800059c:	f000 fc80 	bl	8000ea0 <ST7735_FillScreen>
 ST7735_FillTriangle(0, 0, ST7735_GetWidth() / 2, ST7735_GetHeight(), ST7735_GetWidth(), 0, ST7735_RED);
 80005a0:	f001 f910 	bl	80017c4 <ST7735_GetWidth>
 80005a4:	4603      	mov	r3, r0
 80005a6:	0fda      	lsrs	r2, r3, #31
 80005a8:	4413      	add	r3, r2
 80005aa:	105b      	asrs	r3, r3, #1
 80005ac:	b21c      	sxth	r4, r3
 80005ae:	f001 f8fd 	bl	80017ac <ST7735_GetHeight>
 80005b2:	4603      	mov	r3, r0
 80005b4:	461d      	mov	r5, r3
 80005b6:	f001 f905 	bl	80017c4 <ST7735_GetWidth>
 80005ba:	4603      	mov	r3, r0
 80005bc:	461a      	mov	r2, r3
 80005be:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80005c2:	9302      	str	r3, [sp, #8]
 80005c4:	2300      	movs	r3, #0
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9200      	str	r2, [sp, #0]
 80005ca:	462b      	mov	r3, r5
 80005cc:	4622      	mov	r2, r4
 80005ce:	2100      	movs	r1, #0
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 fdb9 	bl	8001148 <ST7735_FillTriangle>
 HAL_Delay(1000);
 80005d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005da:	f001 fa79 	bl	8001ad0 <HAL_Delay>

 ST7735_FillScreen(ST7735_BLACK);
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 fc5e 	bl	8000ea0 <ST7735_FillScreen>
 ST7735_DrawImage(0, 0, 128, 128, (uint16_t*) test_img_128x128);
 80005e4:	4b16      	ldr	r3, [pc, #88]	@ (8000640 <demoTFT+0x428>)
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2380      	movs	r3, #128	@ 0x80
 80005ea:	2280      	movs	r2, #128	@ 0x80
 80005ec:	2100      	movs	r1, #0
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 fc72 	bl	8000ed8 <ST7735_DrawImage>
 HAL_Delay(3000);
 80005f4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005f8:	f001 fa6a 	bl	8001ad0 <HAL_Delay>

 r++;
 80005fc:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <demoTFT+0x42c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	3301      	adds	r3, #1
 8000602:	b2da      	uxtb	r2, r3
 8000604:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <demoTFT+0x42c>)
 8000606:	701a      	strb	r2, [r3, #0]
}
 8000608:	bf00      	nop
 800060a:	3718      	adds	r7, #24
 800060c:	46bd      	mov	sp, r7
 800060e:	bdb0      	pop	{r4, r5, r7, pc}
 8000610:	20000000 	.word	0x20000000
 8000614:	08003b38 	.word	0x08003b38
 8000618:	08003b44 	.word	0x08003b44
 800061c:	08003b50 	.word	0x08003b50
 8000620:	08003b58 	.word	0x08003b58
 8000624:	08003b60 	.word	0x08003b60
 8000628:	08003b68 	.word	0x08003b68
 800062c:	08003b6c 	.word	0x08003b6c
 8000630:	08003b74 	.word	0x08003b74
 8000634:	08003b7c 	.word	0x08003b7c
 8000638:	08003b84 	.word	0x08003b84
 800063c:	08003b8c 	.word	0x08003b8c
 8000640:	08004ee0 	.word	0x08004ee0
 8000644:	2000003c 	.word	0x2000003c

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f001 f9cf 	bl	80019ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f80e 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 f8be 	bl	80007d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000658:	f000 f892 	bl	8000780 <MX_DMA_Init>
  MX_SPI1_Init();
 800065c:	f000 f852 	bl	8000704 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8000660:	f000 fa82 	bl	8000b68 <ST7735_Init>
  ST7735_FillScreen(ST7735_BLACK);
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fc1b 	bl	8000ea0 <ST7735_FillScreen>
	  ST7735_SetRotation(3);
	  ST7735_WriteString(0, 0, "Raphael ", Font_11x18, YELLOW, BLACK);
	  ST7735_WriteString(0, 18, "Baumeler", Font_11x18, YELLOW, BLACK);
	  HAL_Delay(1000);*/

	  demoTFT();
 800066a:	f7ff fdd5 	bl	8000218 <demoTFT>
 800066e:	e7fc      	b.n	800066a <main+0x22>

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	@ 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0318 	add.w	r3, r7, #24
 800067a:	2238      	movs	r2, #56	@ 0x38
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f003 fa22 	bl	8003ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000692:	2000      	movs	r0, #0
 8000694:	f001 ff5a 	bl	800254c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800069c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	2303      	movs	r3, #3
 80006a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV12;
 80006aa:	230c      	movs	r3, #12
 80006ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006ae:	2355      	movs	r3, #85	@ 0x55
 80006b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 0318 	add.w	r3, r7, #24
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fff6 	bl	80026b4 <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80006ce:	f000 f8e5 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2303      	movs	r3, #3
 80006d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2104      	movs	r1, #4
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 faf4 	bl	8002cd8 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006f6:	f000 f8d1 	bl	800089c <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	@ 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000708:	4b1b      	ldr	r3, [pc, #108]	@ (8000778 <MX_SPI1_Init+0x74>)
 800070a:	4a1c      	ldr	r2, [pc, #112]	@ (800077c <MX_SPI1_Init+0x78>)
 800070c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800070e:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <MX_SPI1_Init+0x74>)
 8000710:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000714:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000716:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <MX_SPI1_Init+0x74>)
 8000718:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800071c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800071e:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <MX_SPI1_Init+0x74>)
 8000720:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000724:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000726:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_SPI1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_SPI1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_SPI1_Init+0x74>)
 8000734:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000738:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800073a:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_SPI1_Init+0x74>)
 800073c:	2218      	movs	r2, #24
 800073e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000740:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <MX_SPI1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_SPI1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <MX_SPI1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_SPI1_Init+0x74>)
 8000754:	2207      	movs	r2, #7
 8000756:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000758:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <MX_SPI1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_SPI1_Init+0x74>)
 8000760:	2208      	movs	r2, #8
 8000762:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	@ (8000778 <MX_SPI1_Init+0x74>)
 8000766:	f002 fc9b 	bl	80030a0 <HAL_SPI_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000770:	f000 f894 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000040 	.word	0x20000040
 800077c:	40013000 	.word	0x40013000

08000780 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000786:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_DMA_Init+0x50>)
 8000788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800078a:	4a11      	ldr	r2, [pc, #68]	@ (80007d0 <MX_DMA_Init+0x50>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6493      	str	r3, [r2, #72]	@ 0x48
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_DMA_Init+0x50>)
 8000794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800079e:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_DMA_Init+0x50>)
 80007a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007a2:	4a0b      	ldr	r2, [pc, #44]	@ (80007d0 <MX_DMA_Init+0x50>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6493      	str	r3, [r2, #72]	@ 0x48
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_DMA_Init+0x50>)
 80007ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	200b      	movs	r0, #11
 80007bc:	f001 fa85 	bl	8001cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007c0:	200b      	movs	r0, #11
 80007c2:	f001 fa9c 	bl	8001cfe <HAL_NVIC_EnableIRQ>

}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <MX_GPIO_Init+0xc0>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	4a29      	ldr	r2, [pc, #164]	@ (8000894 <MX_GPIO_Init+0xc0>)
 80007f0:	f043 0320 	orr.w	r3, r3, #32
 80007f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f6:	4b27      	ldr	r3, [pc, #156]	@ (8000894 <MX_GPIO_Init+0xc0>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	f003 0320 	and.w	r3, r3, #32
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <MX_GPIO_Init+0xc0>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	4a23      	ldr	r2, [pc, #140]	@ (8000894 <MX_GPIO_Init+0xc0>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080e:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <MX_GPIO_Init+0xc0>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_GPIO_Init+0xc0>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	4a1d      	ldr	r2, [pc, #116]	@ (8000894 <MX_GPIO_Init+0xc0>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000826:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <MX_GPIO_Init+0xc0>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST7735_RES_Pin|ST7735_CS_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f248 0140 	movw	r1, #32832	@ 0x8040
 8000838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083c:	f001 fe6e 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_DC_Pin|ST7735_BL_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 4104 	mov.w	r1, #33792	@ 0x8400
 8000846:	4814      	ldr	r0, [pc, #80]	@ (8000898 <MX_GPIO_Init+0xc4>)
 8000848:	f001 fe68 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST7735_RES_Pin ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_CS_Pin;
 800084c:	f248 0340 	movw	r3, #32832	@ 0x8040
 8000850:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	4619      	mov	r1, r3
 8000864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000868:	f001 fcd6 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_BL_Pin */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_BL_Pin;
 800086c:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	4619      	mov	r1, r3
 8000884:	4804      	ldr	r0, [pc, #16]	@ (8000898 <MX_GPIO_Init+0xc4>)
 8000886:	f001 fcc7 	bl	8002218 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800088a:	bf00      	nop
 800088c:	3720      	adds	r7, #32
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000
 8000898:	48000400 	.word	0x48000400

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <Error_Handler+0x8>

080008a8 <ST7735_GPIO_Init>:
static void ST7735_ExecuteCommandList(const uint8_t *addr);
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor);

static void ST7735_GPIO_Init(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <ST7735_Reset>:

static void ST7735_Reset()
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0
	TFT_RES_L();
 80008ba:	2200      	movs	r2, #0
 80008bc:	2140      	movs	r1, #64	@ 0x40
 80008be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c2:	f001 fe2b 	bl	800251c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80008c6:	2014      	movs	r0, #20
 80008c8:	f001 f902 	bl	8001ad0 <HAL_Delay>
	TFT_RES_H();
 80008cc:	2201      	movs	r2, #1
 80008ce:	2140      	movs	r1, #64	@ 0x40
 80008d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d4:	f001 fe22 	bl	800251c <HAL_GPIO_WritePin>
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}

080008dc <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	TFT_DC_C();
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008ec:	4806      	ldr	r0, [pc, #24]	@ (8000908 <ST7735_WriteCommand+0x2c>)
 80008ee:	f001 fe15 	bl	800251c <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
  completed1 = 0;
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else*/
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80008f2:	1df9      	adds	r1, r7, #7
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295
 80008f8:	2201      	movs	r2, #1
 80008fa:	4804      	ldr	r0, [pc, #16]	@ (800090c <ST7735_WriteCommand+0x30>)
 80008fc:	f002 fc7b 	bl	80031f6 <HAL_SPI_Transmit>
//#endif
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	48000400 	.word	0x48000400
 800090c:	20000040 	.word	0x20000040

08000910 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
	TFT_DC_D();
 800091a:	2201      	movs	r2, #1
 800091c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000920:	480a      	ldr	r0, [pc, #40]	@ (800094c <ST7735_WriteData+0x3c>)
 8000922:	f001 fdfb 	bl	800251c <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	b29b      	uxth	r3, r3
 800092a:	461a      	mov	r2, r3
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	4808      	ldr	r0, [pc, #32]	@ (8000950 <ST7735_WriteData+0x40>)
 8000930:	f002 fdd6 	bl	80034e0 <HAL_SPI_Transmit_DMA>
	while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
 8000934:	bf00      	nop
 8000936:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <ST7735_WriteData+0x40>)
 8000938:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b03      	cmp	r3, #3
 8000940:	d0f9      	beq.n	8000936 <ST7735_WriteData+0x26>
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
#endif
}
 8000942:	bf00      	nop
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	48000400 	.word	0x48000400
 8000950:	20000040 	.word	0x20000040

08000954 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	1c5a      	adds	r2, r3, #1
 8000960:	607a      	str	r2, [r7, #4]
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 8000966:	e034      	b.n	80009d2 <ST7735_ExecuteCommandList+0x7e>
    {
    	uint8_t cmd = *addr++;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	607a      	str	r2, [r7, #4]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000972:	7afb      	ldrb	r3, [r7, #11]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ffb1 	bl	80008dc <ST7735_WriteCommand>

        numArgs = *addr++;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	1c5a      	adds	r2, r3, #1
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000984:	7abb      	ldrb	r3, [r7, #10]
 8000986:	b29b      	uxth	r3, r3
 8000988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800098c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800098e:	7abb      	ldrb	r3, [r7, #10]
 8000990:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000994:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 8000996:	7abb      	ldrb	r3, [r7, #10]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d008      	beq.n	80009ae <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800099c:	7abb      	ldrb	r3, [r7, #10]
 800099e:	4619      	mov	r1, r3
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ffb5 	bl	8000910 <ST7735_WriteData>
            addr += numArgs;
 80009a6:	7abb      	ldrb	r3, [r7, #10]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	4413      	add	r3, r2
 80009ac:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 80009ae:	89bb      	ldrh	r3, [r7, #12]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00e      	beq.n	80009d2 <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80009be:	89bb      	ldrh	r3, [r7, #12]
 80009c0:	2bff      	cmp	r3, #255	@ 0xff
 80009c2:	d102      	bne.n	80009ca <ST7735_ExecuteCommandList+0x76>
 80009c4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80009c8:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80009ca:	89bb      	ldrh	r3, [r7, #12]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f001 f87f 	bl	8001ad0 <HAL_Delay>
    while(numCommands--)
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	1e5a      	subs	r2, r3, #1
 80009d6:	73fa      	strb	r2, [r7, #15]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1c5      	bne.n	8000968 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80009dc:	bf00      	nop
 80009de:	bf00      	nop
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4604      	mov	r4, r0
 80009f0:	4608      	mov	r0, r1
 80009f2:	4611      	mov	r1, r2
 80009f4:	461a      	mov	r2, r3
 80009f6:	4623      	mov	r3, r4
 80009f8:	71fb      	strb	r3, [r7, #7]
 80009fa:	4603      	mov	r3, r0
 80009fc:	71bb      	strb	r3, [r7, #6]
 80009fe:	460b      	mov	r3, r1
 8000a00:	717b      	strb	r3, [r7, #5]
 8000a02:	4613      	mov	r3, r2
 8000a04:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000a06:	202a      	movs	r0, #42	@ 0x2a
 8000a08:	f7ff ff68 	bl	80008dc <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	733b      	strb	r3, [r7, #12]
 8000a10:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <ST7735_SetAddressWindow+0x88>)
 8000a12:	781a      	ldrb	r2, [r3, #0]
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	4413      	add	r3, r2
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	737b      	strb	r3, [r7, #13]
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	73bb      	strb	r3, [r7, #14]
 8000a20:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <ST7735_SetAddressWindow+0x88>)
 8000a22:	781a      	ldrb	r2, [r3, #0]
 8000a24:	797b      	ldrb	r3, [r7, #5]
 8000a26:	4413      	add	r3, r2
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	2104      	movs	r1, #4
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff6c 	bl	8000910 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000a38:	202b      	movs	r0, #43	@ 0x2b
 8000a3a:	f7ff ff4f 	bl	80008dc <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <ST7735_SetAddressWindow+0x8c>)
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	79bb      	ldrb	r3, [r7, #6]
 8000a44:	4413      	add	r3, r2
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <ST7735_SetAddressWindow+0x8c>)
 8000a4c:	781a      	ldrb	r2, [r3, #0]
 8000a4e:	793b      	ldrb	r3, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	2104      	movs	r1, #4
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff57 	bl	8000910 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000a62:	202c      	movs	r0, #44	@ 0x2c
 8000a64:	f7ff ff3a 	bl	80008dc <ST7735_WriteCommand>
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd90      	pop	{r4, r7, pc}
 8000a70:	20000010 	.word	0x20000010
 8000a74:	20000011 	.word	0x20000011

08000a78 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000a78:	b082      	sub	sp, #8
 8000a7a:	b590      	push	{r4, r7, lr}
 8000a7c:	b089      	sub	sp, #36	@ 0x24
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a82:	4603      	mov	r3, r0
 8000a84:	80fb      	strh	r3, [r7, #6]
 8000a86:	460b      	mov	r3, r1
 8000a88:	80bb      	strh	r3, [r7, #4]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	b2d8      	uxtb	r0, r3
 8000a92:	88bb      	ldrh	r3, [r7, #4]
 8000a94:	b2d9      	uxtb	r1, r3
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000a9e:	4413      	add	r3, r2
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	b2dc      	uxtb	r4, r3
 8000aa6:	88bb      	ldrh	r3, [r7, #4]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000aae:	4413      	add	r3, r2
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	4622      	mov	r2, r4
 8000ab8:	f7ff ff96 	bl	80009e8 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	e043      	b.n	8000b4a <ST7735_WriteChar+0xd2>
    {
        b = font.data[(ch - 32) * font.height + i];
 8000ac2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	3b20      	subs	r3, #32
 8000ac8:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000acc:	fb01 f303 	mul.w	r3, r1, r3
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	440b      	add	r3, r1
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	e029      	b.n	8000b38 <ST7735_WriteChar+0xc0>
        {
            if((b << j) & 0x8000)
 8000ae4:	697a      	ldr	r2, [r7, #20]
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d00e      	beq.n	8000b12 <ST7735_WriteChar+0x9a>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000af4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000af6:	0a1b      	lsrs	r3, r3, #8
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	743b      	strb	r3, [r7, #16]
 8000afe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	2102      	movs	r1, #2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff00 	bl	8000910 <ST7735_WriteData>
 8000b10:	e00f      	b.n	8000b32 <ST7735_WriteChar+0xba>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000b12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000b16:	0a1b      	lsrs	r3, r3, #8
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	733b      	strb	r3, [r7, #12]
 8000b1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff feef 	bl	8000910 <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	3301      	adds	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
 8000b38:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d3cf      	bcc.n	8000ae4 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++)
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	3301      	adds	r3, #1
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000b4e:	461a      	mov	r2, r3
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d3b5      	bcc.n	8000ac2 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000b56:	bf00      	nop
 8000b58:	bf00      	nop
 8000b5a:	3724      	adds	r7, #36	@ 0x24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b62:	b002      	add	sp, #8
 8000b64:	4770      	bx	lr
	...

08000b68 <ST7735_Init>:

void ST7735_Init()
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	ST7735_GPIO_Init();
 8000b6c:	f7ff fe9c 	bl	80008a8 <ST7735_GPIO_Init>
	TFT_CS_L();
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b7a:	f001 fccf 	bl	800251c <HAL_GPIO_WritePin>
    ST7735_Reset();
 8000b7e:	f7ff fe9a 	bl	80008b6 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000b82:	4809      	ldr	r0, [pc, #36]	@ (8000ba8 <ST7735_Init+0x40>)
 8000b84:	f7ff fee6 	bl	8000954 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000b88:	4808      	ldr	r0, [pc, #32]	@ (8000bac <ST7735_Init+0x44>)
 8000b8a:	f7ff fee3 	bl	8000954 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000b8e:	4808      	ldr	r0, [pc, #32]	@ (8000bb0 <ST7735_Init+0x48>)
 8000b90:	f7ff fee0 	bl	8000954 <ST7735_ExecuteCommandList>
    TFT_CS_H();
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9e:	f001 fcbd 	bl	800251c <HAL_GPIO_WritePin>
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	0800cee0 	.word	0x0800cee0
 8000bac:	0800cf1c 	.word	0x0800cf1c
 8000bb0:	0800cf2c 	.word	0x0800cf2c

08000bb4 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	80bb      	strh	r3, [r7, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8000c3c <ST7735_DrawPixel+0x88>)
 8000bca:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	da30      	bge.n	8000c34 <ST7735_DrawPixel+0x80>
 8000bd2:	88bb      	ldrh	r3, [r7, #4]
 8000bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8000c40 <ST7735_DrawPixel+0x8c>)
 8000bd6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	da2a      	bge.n	8000c34 <ST7735_DrawPixel+0x80>
        return;

    TFT_CS_L();
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000be4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be8:	f001 fc98 	bl	800251c <HAL_GPIO_WritePin>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	b2d8      	uxtb	r0, r3
 8000bf0:	88bb      	ldrh	r3, [r7, #4]
 8000bf2:	b2d9      	uxtb	r1, r3
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	88bb      	ldrh	r3, [r7, #4]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	3301      	adds	r3, #1
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	f7ff fef0 	bl	80009e8 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	0a1b      	lsrs	r3, r3, #8
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	733b      	strb	r3, [r7, #12]
 8000c12:	887b      	ldrh	r3, [r7, #2]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fe76 	bl	8000910 <ST7735_WriteData>

    TFT_CS_H();
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2e:	f001 fc75 	bl	800251c <HAL_GPIO_WritePin>
 8000c32:	e000      	b.n	8000c36 <ST7735_DrawPixel+0x82>
        return;
 8000c34:	bf00      	nop
}
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	2000000e 	.word	0x2000000e
 8000c40:	2000000c 	.word	0x2000000c

08000c44 <ST7735_DrawString>:

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000c44:	b082      	sub	sp, #8
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af04      	add	r7, sp, #16
 8000c4c:	603a      	str	r2, [r7, #0]
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	4603      	mov	r3, r0
 8000c52:	80fb      	strh	r3, [r7, #6]
 8000c54:	460b      	mov	r3, r1
 8000c56:	80bb      	strh	r3, [r7, #4]
	TFT_CS_L();
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c62:	f001 fc5b 	bl	800251c <HAL_GPIO_WritePin>

    while(*str)
 8000c66:	e033      	b.n	8000cd0 <ST7735_DrawString+0x8c>
    {
        if(x + font.width >= _width)
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	7d3a      	ldrb	r2, [r7, #20]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a22      	ldr	r2, [pc, #136]	@ (8000cf8 <ST7735_DrawString+0xb4>)
 8000c70:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c74:	4293      	cmp	r3, r2
 8000c76:	db16      	blt.n	8000ca6 <ST7735_DrawString+0x62>
        {
            x = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000c7c:	7d7b      	ldrb	r3, [r7, #21]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	88bb      	ldrh	r3, [r7, #4]
 8000c82:	4413      	add	r3, r2
 8000c84:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height)
 8000c86:	88bb      	ldrh	r3, [r7, #4]
 8000c88:	7d7a      	ldrb	r2, [r7, #21]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cfc <ST7735_DrawString+0xb8>)
 8000c8e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c92:	4293      	cmp	r3, r2
 8000c94:	da21      	bge.n	8000cda <ST7735_DrawString+0x96>
            {
                break;
            }

            if(*str == ' ')
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b20      	cmp	r3, #32
 8000c9c:	d103      	bne.n	8000ca6 <ST7735_DrawString+0x62>
            {
                // skip spaces in the beginning of the new line
                str++;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	603b      	str	r3, [r7, #0]
                continue;
 8000ca4:	e014      	b.n	8000cd0 <ST7735_DrawString+0x8c>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	781a      	ldrb	r2, [r3, #0]
 8000caa:	88b9      	ldrh	r1, [r7, #4]
 8000cac:	88f8      	ldrh	r0, [r7, #6]
 8000cae:	8c3b      	ldrh	r3, [r7, #32]
 8000cb0:	9302      	str	r3, [sp, #8]
 8000cb2:	8bbb      	ldrh	r3, [r7, #28]
 8000cb4:	9301      	str	r3, [sp, #4]
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	f7ff fedc 	bl	8000a78 <ST7735_WriteChar>
        x += font.width;
 8000cc0:	7d3b      	ldrb	r3, [r7, #20]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	80fb      	strh	r3, [r7, #6]
        str++;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	603b      	str	r3, [r7, #0]
    while(*str)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1c7      	bne.n	8000c68 <ST7735_DrawString+0x24>
 8000cd8:	e000      	b.n	8000cdc <ST7735_DrawString+0x98>
                break;
 8000cda:	bf00      	nop
    }
    TFT_CS_H();
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ce2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce6:	f001 fc19 	bl	800251c <HAL_GPIO_WritePin>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cf4:	b002      	add	sp, #8
 8000cf6:	4770      	bx	lr
 8000cf8:	2000000e 	.word	0x2000000e
 8000cfc:	2000000c 	.word	0x2000000c

08000d00 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4606      	mov	r6, r0
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4633      	mov	r3, r6
 8000d12:	80fb      	strh	r3, [r7, #6]
 8000d14:	4603      	mov	r3, r0
 8000d16:	80bb      	strh	r3, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	807b      	strh	r3, [r7, #2]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	803b      	strh	r3, [r7, #0]
 8000d20:	466b      	mov	r3, sp
 8000d22:	469a      	mov	sl, r3
    // clipping
    if ((x >= _width) || (y >= _height))
 8000d24:	88fb      	ldrh	r3, [r7, #6]
 8000d26:	4a5a      	ldr	r2, [pc, #360]	@ (8000e90 <ST7735_FillRectangle+0x190>)
 8000d28:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	da05      	bge.n	8000d3c <ST7735_FillRectangle+0x3c>
 8000d30:	88bb      	ldrh	r3, [r7, #4]
 8000d32:	4a58      	ldr	r2, [pc, #352]	@ (8000e94 <ST7735_FillRectangle+0x194>)
 8000d34:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	db01      	blt.n	8000d40 <ST7735_FillRectangle+0x40>
        return;
 8000d3c:	46d5      	mov	sp, sl
 8000d3e:	e0a3      	b.n	8000e88 <ST7735_FillRectangle+0x188>
    if ((x + w - 1) >= _width)
 8000d40:	88fa      	ldrh	r2, [r7, #6]
 8000d42:	887b      	ldrh	r3, [r7, #2]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a52      	ldr	r2, [pc, #328]	@ (8000e90 <ST7735_FillRectangle+0x190>)
 8000d48:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	dd06      	ble.n	8000d5e <ST7735_FillRectangle+0x5e>
        w = _width - x;
 8000d50:	4b4f      	ldr	r3, [pc, #316]	@ (8000e90 <ST7735_FillRectangle+0x190>)
 8000d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	807b      	strh	r3, [r7, #2]
    if ((y + h - 1) >= _height)
 8000d5e:	88ba      	ldrh	r2, [r7, #4]
 8000d60:	883b      	ldrh	r3, [r7, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a4b      	ldr	r2, [pc, #300]	@ (8000e94 <ST7735_FillRectangle+0x194>)
 8000d66:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	dd06      	ble.n	8000d7c <ST7735_FillRectangle+0x7c>
        h = _height - y;
 8000d6e:	4b49      	ldr	r3, [pc, #292]	@ (8000e94 <ST7735_FillRectangle+0x194>)
 8000d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	88bb      	ldrh	r3, [r7, #4]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d86:	f001 fbc9 	bl	800251c <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	b2d8      	uxtb	r0, r3
 8000d8e:	88bb      	ldrh	r3, [r7, #4]
 8000d90:	b2d9      	uxtb	r1, r3
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	887b      	ldrh	r3, [r7, #2]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	4413      	add	r3, r2
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	b2de      	uxtb	r6, r3
 8000da2:	88bb      	ldrh	r3, [r7, #4]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	883b      	ldrh	r3, [r7, #0]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	4413      	add	r3, r2
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	3b01      	subs	r3, #1
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	4632      	mov	r2, r6
 8000db4:	f7ff fe18 	bl	80009e8 <ST7735_SetAddressWindow>

    uint8_t data[2] = { color >> 8, color & 0xFF };
 8000db8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000dba:	0a1b      	lsrs	r3, r3, #8
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	723b      	strb	r3, [r7, #8]
 8000dc2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	727b      	strb	r3, [r7, #9]
    TFT_DC_D();
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dce:	4832      	ldr	r0, [pc, #200]	@ (8000e98 <ST7735_FillRectangle+0x198>)
 8000dd0:	f001 fba4 	bl	800251c <HAL_GPIO_WritePin>

#ifdef USE_SPI_DMA
    uint8_t tbuf[w*2];
 8000dd4:	887b      	ldrh	r3, [r7, #2]
 8000dd6:	005e      	lsls	r6, r3, #1
 8000dd8:	1e73      	subs	r3, r6, #1
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	4632      	mov	r2, r6
 8000dde:	2300      	movs	r3, #0
 8000de0:	4690      	mov	r8, r2
 8000de2:	4699      	mov	r9, r3
 8000de4:	f04f 0200 	mov.w	r2, #0
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000df0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000df4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000df8:	4632      	mov	r2, r6
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	4614      	mov	r4, r2
 8000dfe:	461d      	mov	r5, r3
 8000e00:	f04f 0200 	mov.w	r2, #0
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	00eb      	lsls	r3, r5, #3
 8000e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e0e:	00e2      	lsls	r2, r4, #3
 8000e10:	4633      	mov	r3, r6
 8000e12:	3307      	adds	r3, #7
 8000e14:	08db      	lsrs	r3, r3, #3
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	ebad 0d03 	sub.w	sp, sp, r3
 8000e1c:	466b      	mov	r3, sp
 8000e1e:	3300      	adds	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
    for (y = h; y > 0; y--) {
 8000e22:	883b      	ldrh	r3, [r7, #0]
 8000e24:	80bb      	strh	r3, [r7, #4]
 8000e26:	e024      	b.n	8000e72 <ST7735_FillRectangle+0x172>
        for (int x = w * 2; x >= 0; x -= 2) {
 8000e28:	887b      	ldrh	r3, [r7, #2]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	e00d      	b.n	8000e4c <ST7735_FillRectangle+0x14c>
            tbuf[x] = data[0];
 8000e30:	7a39      	ldrb	r1, [r7, #8]
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	4413      	add	r3, r2
 8000e38:	460a      	mov	r2, r1
 8000e3a:	701a      	strb	r2, [r3, #0]
            tbuf[x + 1] = data[1];
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	7a79      	ldrb	r1, [r7, #9]
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	54d1      	strb	r1, [r2, r3]
        for (int x = w * 2; x >= 0; x -= 2) {
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3b02      	subs	r3, #2
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	daee      	bge.n	8000e30 <ST7735_FillRectangle+0x130>
        }
        HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, tbuf, sizeof(tbuf));
 8000e52:	b2b3      	uxth	r3, r6
 8000e54:	461a      	mov	r2, r3
 8000e56:	68f9      	ldr	r1, [r7, #12]
 8000e58:	4810      	ldr	r0, [pc, #64]	@ (8000e9c <ST7735_FillRectangle+0x19c>)
 8000e5a:	f002 fb41 	bl	80034e0 <HAL_SPI_Transmit_DMA>
        while (hspi1.State == HAL_SPI_STATE_BUSY_TX) {
 8000e5e:	bf00      	nop
 8000e60:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <ST7735_FillRectangle+0x19c>)
 8000e62:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	d0f9      	beq.n	8000e60 <ST7735_FillRectangle+0x160>
    for (y = h; y > 0; y--) {
 8000e6c:	88bb      	ldrh	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	80bb      	strh	r3, [r7, #4]
 8000e72:	88bb      	ldrh	r3, [r7, #4]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1d7      	bne.n	8000e28 <ST7735_FillRectangle+0x128>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
        }
    }
#endif

    TFT_CS_H();
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e82:	f001 fb4b 	bl	800251c <HAL_GPIO_WritePin>
 8000e86:	46d5      	mov	sp, sl
}
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e90:	2000000e 	.word	0x2000000e
 8000e94:	2000000c 	.word	0x2000000c
 8000e98:	48000400 	.word	0x48000400
 8000e9c:	20000040 	.word	0x20000040

08000ea0 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 8000eaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <ST7735_FillScreen+0x30>)
 8000eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <ST7735_FillScreen+0x34>)
 8000eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb8:	b299      	uxth	r1, r3
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff ff1c 	bl	8000d00 <ST7735_FillRectangle>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	2000000e 	.word	0x2000000e
 8000ed4:	2000000c 	.word	0x2000000c

08000ed8 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4604      	mov	r4, r0
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	80fb      	strh	r3, [r7, #6]
 8000eea:	4603      	mov	r3, r0
 8000eec:	80bb      	strh	r3, [r7, #4]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	807b      	strh	r3, [r7, #2]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	4a28      	ldr	r2, [pc, #160]	@ (8000f9c <ST7735_DrawImage+0xc4>)
 8000efa:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000efe:	4293      	cmp	r3, r2
 8000f00:	da44      	bge.n	8000f8c <ST7735_DrawImage+0xb4>
 8000f02:	88bb      	ldrh	r3, [r7, #4]
 8000f04:	4a26      	ldr	r2, [pc, #152]	@ (8000fa0 <ST7735_DrawImage+0xc8>)
 8000f06:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	da3e      	bge.n	8000f8c <ST7735_DrawImage+0xb4>
    if((x + w - 1) >= _width) return;
 8000f0e:	88fa      	ldrh	r2, [r7, #6]
 8000f10:	887b      	ldrh	r3, [r7, #2]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a21      	ldr	r2, [pc, #132]	@ (8000f9c <ST7735_DrawImage+0xc4>)
 8000f16:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	dc38      	bgt.n	8000f90 <ST7735_DrawImage+0xb8>
    if((y + h - 1) >= _height) return;
 8000f1e:	88ba      	ldrh	r2, [r7, #4]
 8000f20:	883b      	ldrh	r3, [r7, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa0 <ST7735_DrawImage+0xc8>)
 8000f26:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	dc32      	bgt.n	8000f94 <ST7735_DrawImage+0xbc>

    TFT_CS_L();
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f38:	f001 faf0 	bl	800251c <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	b2d8      	uxtb	r0, r3
 8000f40:	88bb      	ldrh	r3, [r7, #4]
 8000f42:	b2d9      	uxtb	r1, r3
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	887b      	ldrh	r3, [r7, #2]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	3b01      	subs	r3, #1
 8000f52:	b2dc      	uxtb	r4, r3
 8000f54:	88bb      	ldrh	r3, [r7, #4]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	883b      	ldrh	r3, [r7, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	3b01      	subs	r3, #1
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	4622      	mov	r2, r4
 8000f66:	f7ff fd3f 	bl	80009e8 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000f6a:	887b      	ldrh	r3, [r7, #2]
 8000f6c:	883a      	ldrh	r2, [r7, #0]
 8000f6e:	fb02 f303 	mul.w	r3, r2, r3
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4619      	mov	r1, r3
 8000f76:	69b8      	ldr	r0, [r7, #24]
 8000f78:	f7ff fcca 	bl	8000910 <ST7735_WriteData>
    TFT_CS_H();
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f86:	f001 fac9 	bl	800251c <HAL_GPIO_WritePin>
 8000f8a:	e004      	b.n	8000f96 <ST7735_DrawImage+0xbe>
    if((x >= _width) || (y >= _height)) return;
 8000f8c:	bf00      	nop
 8000f8e:	e002      	b.n	8000f96 <ST7735_DrawImage+0xbe>
    if((x + w - 1) >= _width) return;
 8000f90:	bf00      	nop
 8000f92:	e000      	b.n	8000f96 <ST7735_DrawImage+0xbe>
    if((y + h - 1) >= _height) return;
 8000f94:	bf00      	nop
}
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd90      	pop	{r4, r7, pc}
 8000f9c:	2000000e 	.word	0x2000000e
 8000fa0:	2000000c 	.word	0x2000000c

08000fa4 <ST7735_DrawCircle>:
/***************************************************************************************
** Function name:           drawCircle
** Description:             Draw a circle outline
***************************************************************************************/
void ST7735_DrawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4604      	mov	r4, r0
 8000fac:	4608      	mov	r0, r1
 8000fae:	4611      	mov	r1, r2
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4623      	mov	r3, r4
 8000fb4:	80fb      	strh	r3, [r7, #6]
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80bb      	strh	r3, [r7, #4]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	807b      	strh	r3, [r7, #2]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	f1c3 0301 	rsb	r3, r3, #1
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	81fb      	strh	r3, [r7, #14]
  int16_t ddF_x = 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	81bb      	strh	r3, [r7, #12]
  int16_t ddF_y = - r - r;
 8000fd0:	887b      	ldrh	r3, [r7, #2]
 8000fd2:	425b      	negs	r3, r3
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	817b      	strh	r3, [r7, #10]
  int16_t x = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	813b      	strh	r3, [r7, #8]

  ST7735_DrawPixel(x0 + r, y0  , color);
 8000fe2:	88fa      	ldrh	r2, [r7, #6]
 8000fe4:	887b      	ldrh	r3, [r7, #2]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	88b9      	ldrh	r1, [r7, #4]
 8000fec:	883a      	ldrh	r2, [r7, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fde0 	bl	8000bb4 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0 - r, y0  , color);
 8000ff4:	88fa      	ldrh	r2, [r7, #6]
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	88b9      	ldrh	r1, [r7, #4]
 8000ffe:	883a      	ldrh	r2, [r7, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fdd7 	bl	8000bb4 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0  , y0 - r, color);
 8001006:	88f8      	ldrh	r0, [r7, #6]
 8001008:	88ba      	ldrh	r2, [r7, #4]
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	b29b      	uxth	r3, r3
 8001010:	883a      	ldrh	r2, [r7, #0]
 8001012:	4619      	mov	r1, r3
 8001014:	f7ff fdce 	bl	8000bb4 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0  , y0 + r, color);
 8001018:	88f8      	ldrh	r0, [r7, #6]
 800101a:	88ba      	ldrh	r2, [r7, #4]
 800101c:	887b      	ldrh	r3, [r7, #2]
 800101e:	4413      	add	r3, r2
 8001020:	b29b      	uxth	r3, r3
 8001022:	883a      	ldrh	r2, [r7, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	f7ff fdc5 	bl	8000bb4 <ST7735_DrawPixel>

  while (x < r)
 800102a:	e081      	b.n	8001130 <ST7735_DrawCircle+0x18c>
  {
    if (f >= 0)
 800102c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0e      	blt.n	8001052 <ST7735_DrawCircle+0xae>
    {
      r--;
 8001034:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001038:	b29b      	uxth	r3, r3
 800103a:	3b01      	subs	r3, #1
 800103c:	b29b      	uxth	r3, r3
 800103e:	807b      	strh	r3, [r7, #2]
      ddF_y += 2;
 8001040:	897b      	ldrh	r3, [r7, #10]
 8001042:	3302      	adds	r3, #2
 8001044:	b29b      	uxth	r3, r3
 8001046:	817b      	strh	r3, [r7, #10]
      f += ddF_y;
 8001048:	89fa      	ldrh	r2, [r7, #14]
 800104a:	897b      	ldrh	r3, [r7, #10]
 800104c:	4413      	add	r3, r2
 800104e:	b29b      	uxth	r3, r3
 8001050:	81fb      	strh	r3, [r7, #14]
    }
    x++;
 8001052:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001056:	b29b      	uxth	r3, r3
 8001058:	3301      	adds	r3, #1
 800105a:	b29b      	uxth	r3, r3
 800105c:	813b      	strh	r3, [r7, #8]
    ddF_x += 2;
 800105e:	89bb      	ldrh	r3, [r7, #12]
 8001060:	3302      	adds	r3, #2
 8001062:	b29b      	uxth	r3, r3
 8001064:	81bb      	strh	r3, [r7, #12]
    f += ddF_x;
 8001066:	89fa      	ldrh	r2, [r7, #14]
 8001068:	89bb      	ldrh	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	b29b      	uxth	r3, r3
 800106e:	81fb      	strh	r3, [r7, #14]

    ST7735_DrawPixel(x0 + x, y0 + r, color);
 8001070:	88fa      	ldrh	r2, [r7, #6]
 8001072:	893b      	ldrh	r3, [r7, #8]
 8001074:	4413      	add	r3, r2
 8001076:	b298      	uxth	r0, r3
 8001078:	88ba      	ldrh	r2, [r7, #4]
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	4413      	add	r3, r2
 800107e:	b29b      	uxth	r3, r3
 8001080:	883a      	ldrh	r2, [r7, #0]
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fd96 	bl	8000bb4 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - x, y0 + r, color);
 8001088:	88fa      	ldrh	r2, [r7, #6]
 800108a:	893b      	ldrh	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	b298      	uxth	r0, r3
 8001090:	88ba      	ldrh	r2, [r7, #4]
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	4413      	add	r3, r2
 8001096:	b29b      	uxth	r3, r3
 8001098:	883a      	ldrh	r2, [r7, #0]
 800109a:	4619      	mov	r1, r3
 800109c:	f7ff fd8a 	bl	8000bb4 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - x, y0 - r, color);
 80010a0:	88fa      	ldrh	r2, [r7, #6]
 80010a2:	893b      	ldrh	r3, [r7, #8]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	b298      	uxth	r0, r3
 80010a8:	88ba      	ldrh	r2, [r7, #4]
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	883a      	ldrh	r2, [r7, #0]
 80010b2:	4619      	mov	r1, r3
 80010b4:	f7ff fd7e 	bl	8000bb4 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 + x, y0 - r, color);
 80010b8:	88fa      	ldrh	r2, [r7, #6]
 80010ba:	893b      	ldrh	r3, [r7, #8]
 80010bc:	4413      	add	r3, r2
 80010be:	b298      	uxth	r0, r3
 80010c0:	88ba      	ldrh	r2, [r7, #4]
 80010c2:	887b      	ldrh	r3, [r7, #2]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	883a      	ldrh	r2, [r7, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	f7ff fd72 	bl	8000bb4 <ST7735_DrawPixel>

    ST7735_DrawPixel(x0 + r, y0 + x, color);
 80010d0:	88fa      	ldrh	r2, [r7, #6]
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	4413      	add	r3, r2
 80010d6:	b298      	uxth	r0, r3
 80010d8:	88ba      	ldrh	r2, [r7, #4]
 80010da:	893b      	ldrh	r3, [r7, #8]
 80010dc:	4413      	add	r3, r2
 80010de:	b29b      	uxth	r3, r3
 80010e0:	883a      	ldrh	r2, [r7, #0]
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fd66 	bl	8000bb4 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - r, y0 + x, color);
 80010e8:	88fa      	ldrh	r2, [r7, #6]
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	b298      	uxth	r0, r3
 80010f0:	88ba      	ldrh	r2, [r7, #4]
 80010f2:	893b      	ldrh	r3, [r7, #8]
 80010f4:	4413      	add	r3, r2
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	883a      	ldrh	r2, [r7, #0]
 80010fa:	4619      	mov	r1, r3
 80010fc:	f7ff fd5a 	bl	8000bb4 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - r, y0 - x, color);
 8001100:	88fa      	ldrh	r2, [r7, #6]
 8001102:	887b      	ldrh	r3, [r7, #2]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	b298      	uxth	r0, r3
 8001108:	88ba      	ldrh	r2, [r7, #4]
 800110a:	893b      	ldrh	r3, [r7, #8]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	b29b      	uxth	r3, r3
 8001110:	883a      	ldrh	r2, [r7, #0]
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff fd4e 	bl	8000bb4 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 + r, y0 - x, color);
 8001118:	88fa      	ldrh	r2, [r7, #6]
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	4413      	add	r3, r2
 800111e:	b298      	uxth	r0, r3
 8001120:	88ba      	ldrh	r2, [r7, #4]
 8001122:	893b      	ldrh	r3, [r7, #8]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	b29b      	uxth	r3, r3
 8001128:	883a      	ldrh	r2, [r7, #0]
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fd42 	bl	8000bb4 <ST7735_DrawPixel>
  while (x < r)
 8001130:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001134:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001138:	429a      	cmp	r2, r3
 800113a:	f6ff af77 	blt.w	800102c <ST7735_DrawCircle+0x88>
  }
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	bd90      	pop	{r4, r7, pc}

08001148 <ST7735_FillTriangle>:
** Function name:           fillTriangle
** Description:             Draw a filled triangle using 3 arbitrary points
***************************************************************************************/
// Fill a triangle - original Adafruit function works well and code footprint is small
void ST7735_FillTriangle( int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b08d      	sub	sp, #52	@ 0x34
 800114c:	af00      	add	r7, sp, #0
 800114e:	4604      	mov	r4, r0
 8001150:	4608      	mov	r0, r1
 8001152:	4611      	mov	r1, r2
 8001154:	461a      	mov	r2, r3
 8001156:	4623      	mov	r3, r4
 8001158:	80fb      	strh	r3, [r7, #6]
 800115a:	4603      	mov	r3, r0
 800115c:	80bb      	strh	r3, [r7, #4]
 800115e:	460b      	mov	r3, r1
 8001160:	807b      	strh	r3, [r7, #2]
 8001162:	4613      	mov	r3, r2
 8001164:	803b      	strh	r3, [r7, #0]
  int16_t a, b, y, last;

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1)
 8001166:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800116a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800116e:	429a      	cmp	r2, r3
 8001170:	dd0b      	ble.n	800118a <ST7735_FillTriangle+0x42>
  {
	  SWAP_INT16_T(y0, y1); SWAP_INT16_T(x0, x1);
 8001172:	88bb      	ldrh	r3, [r7, #4]
 8001174:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001176:	883b      	ldrh	r3, [r7, #0]
 8001178:	80bb      	strh	r3, [r7, #4]
 800117a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800117c:	803b      	strh	r3, [r7, #0]
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	843b      	strh	r3, [r7, #32]
 8001182:	887b      	ldrh	r3, [r7, #2]
 8001184:	80fb      	strh	r3, [r7, #6]
 8001186:	8c3b      	ldrh	r3, [r7, #32]
 8001188:	807b      	strh	r3, [r7, #2]
  }

  if (y1 > y2)
 800118a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800118e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001192:	429a      	cmp	r2, r3
 8001194:	dd0f      	ble.n	80011b6 <ST7735_FillTriangle+0x6e>
  {
	  SWAP_INT16_T(y2, y1); SWAP_INT16_T(x2, x1);
 8001196:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800119a:	83fb      	strh	r3, [r7, #30]
 800119c:	883b      	ldrh	r3, [r7, #0]
 800119e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80011a2:	8bfb      	ldrh	r3, [r7, #30]
 80011a4:	803b      	strh	r3, [r7, #0]
 80011a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80011aa:	83bb      	strh	r3, [r7, #28]
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80011b2:	8bbb      	ldrh	r3, [r7, #28]
 80011b4:	807b      	strh	r3, [r7, #2]
  }

  if (y0 > y1)
 80011b6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011be:	429a      	cmp	r2, r3
 80011c0:	dd0b      	ble.n	80011da <ST7735_FillTriangle+0x92>
  {
	  SWAP_INT16_T(y0, y1); SWAP_INT16_T(x0, x1);
 80011c2:	88bb      	ldrh	r3, [r7, #4]
 80011c4:	837b      	strh	r3, [r7, #26]
 80011c6:	883b      	ldrh	r3, [r7, #0]
 80011c8:	80bb      	strh	r3, [r7, #4]
 80011ca:	8b7b      	ldrh	r3, [r7, #26]
 80011cc:	803b      	strh	r3, [r7, #0]
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	833b      	strh	r3, [r7, #24]
 80011d2:	887b      	ldrh	r3, [r7, #2]
 80011d4:	80fb      	strh	r3, [r7, #6]
 80011d6:	8b3b      	ldrh	r3, [r7, #24]
 80011d8:	807b      	strh	r3, [r7, #2]
  }

  if (y0 == y2)
 80011da:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011de:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d137      	bne.n	8001256 <ST7735_FillTriangle+0x10e>
  { // Handle awkward all-on-same-line case as its own thing
    a = b = x0;
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80011ea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80011ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    if (x1 < a)      a = x1;
 80011ee:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80011f2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80011f6:	429a      	cmp	r2, r3
 80011f8:	da02      	bge.n	8001200 <ST7735_FillTriangle+0xb8>
 80011fa:	887b      	ldrh	r3, [r7, #2]
 80011fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80011fe:	e007      	b.n	8001210 <ST7735_FillTriangle+0xc8>
    else if (x1 > b) b = x1;
 8001200:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001204:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001208:	429a      	cmp	r2, r3
 800120a:	dd01      	ble.n	8001210 <ST7735_FillTriangle+0xc8>
 800120c:	887b      	ldrh	r3, [r7, #2]
 800120e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (x2 < a)      a = x2;
 8001210:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 8001214:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001218:	429a      	cmp	r2, r3
 800121a:	da03      	bge.n	8001224 <ST7735_FillTriangle+0xdc>
 800121c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001220:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001222:	e008      	b.n	8001236 <ST7735_FillTriangle+0xee>
    else if (x2 > b) b = x2;
 8001224:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 8001228:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800122c:	429a      	cmp	r2, r3
 800122e:	dd02      	ble.n	8001236 <ST7735_FillTriangle+0xee>
 8001230:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001234:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    ST7735_DrawFastHLine(a, y0, b - a + 1, color);
 8001236:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001238:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	b29b      	uxth	r3, r3
 800123e:	3301      	adds	r3, #1
 8001240:	b29b      	uxth	r3, r3
 8001242:	b21a      	sxth	r2, r3
 8001244:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001248:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800124c:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8001250:	f000 f9c0 	bl	80015d4 <ST7735_DrawFastHLine>
    return;
 8001254:	e0da      	b.n	800140c <ST7735_FillTriangle+0x2c4>
  }

  int16_t
  dx01 = x1 - x0,
 8001256:	887a      	ldrh	r2, [r7, #2]
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	b29b      	uxth	r3, r3
 800125e:	82fb      	strh	r3, [r7, #22]
  dy01 = y1 - y0,
 8001260:	883a      	ldrh	r2, [r7, #0]
 8001262:	88bb      	ldrh	r3, [r7, #4]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	b29b      	uxth	r3, r3
 8001268:	82bb      	strh	r3, [r7, #20]
  dx02 = x2 - x0,
 800126a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	b29b      	uxth	r3, r3
 8001274:	827b      	strh	r3, [r7, #18]
  dy02 = y2 - y0,
 8001276:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800127a:	88bb      	ldrh	r3, [r7, #4]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	b29b      	uxth	r3, r3
 8001280:	823b      	strh	r3, [r7, #16]
  dx12 = x2 - x1,
 8001282:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	b29b      	uxth	r3, r3
 800128c:	81fb      	strh	r3, [r7, #14]
  dy12 = y2 - y1,
 800128e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8001292:	883b      	ldrh	r3, [r7, #0]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	b29b      	uxth	r3, r3
 8001298:	81bb      	strh	r3, [r7, #12]
  sa   = 0,
 800129a:	2300      	movs	r3, #0
 800129c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  sb   = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y1 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if (y1 == y2) last = y1;  // Include y1 scanline
 80012a2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80012a6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d102      	bne.n	80012b4 <ST7735_FillTriangle+0x16c>
 80012ae:	883b      	ldrh	r3, [r7, #0]
 80012b0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80012b2:	e003      	b.n	80012bc <ST7735_FillTriangle+0x174>
  else         last = y1 - 1; // Skip it
 80012b4:	883b      	ldrh	r3, [r7, #0]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	853b      	strh	r3, [r7, #40]	@ 0x28

  for (y = y0; y <= last; y++)
 80012bc:	88bb      	ldrh	r3, [r7, #4]
 80012be:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80012c0:	e040      	b.n	8001344 <ST7735_FillTriangle+0x1fc>
  {
    a   = x0 + sa / dy01;
 80012c2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80012c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	4413      	add	r3, r2
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    b   = x0 + sb / dy02;
 80012d8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80012dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	4413      	add	r3, r2
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    sa += dx01;
 80012ee:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80012f0:	8afb      	ldrh	r3, [r7, #22]
 80012f2:	4413      	add	r3, r2
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    sb += dx02;
 80012f8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80012fa:	8a7b      	ldrh	r3, [r7, #18]
 80012fc:	4413      	add	r3, r2
 80012fe:	b29b      	uxth	r3, r3
 8001300:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (a > b) SWAP_INT16_T(a, b);
 8001302:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 8001306:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800130a:	429a      	cmp	r2, r3
 800130c:	dd05      	ble.n	800131a <ST7735_FillTriangle+0x1d2>
 800130e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001310:	813b      	strh	r3, [r7, #8]
 8001312:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001314:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001316:	893b      	ldrh	r3, [r7, #8]
 8001318:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    ST7735_DrawFastHLine(a, y, b - a + 1, color);
 800131a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800131c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	b29b      	uxth	r3, r3
 8001322:	3301      	adds	r3, #1
 8001324:	b29b      	uxth	r3, r3
 8001326:	b21a      	sxth	r2, r3
 8001328:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800132c:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	@ 0x2a
 8001330:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8001334:	f000 f94e 	bl	80015d4 <ST7735_DrawFastHLine>
  for (y = y0; y <= last; y++)
 8001338:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800133c:	b29b      	uxth	r3, r3
 800133e:	3301      	adds	r3, #1
 8001340:	b29b      	uxth	r3, r3
 8001342:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001344:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8001348:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800134c:	429a      	cmp	r2, r3
 800134e:	ddb8      	ble.n	80012c2 <ST7735_FillTriangle+0x17a>
  }

  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
 8001350:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8001354:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	b29a      	uxth	r2, r3
 800135c:	89fb      	ldrh	r3, [r7, #14]
 800135e:	fb12 f303 	smulbb	r3, r2, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	84fb      	strh	r3, [r7, #38]	@ 0x26
  sb = dx02 * (y - y0);
 8001366:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800136a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	b29a      	uxth	r2, r3
 8001372:	8a7b      	ldrh	r3, [r7, #18]
 8001374:	fb12 f303 	smulbb	r3, r2, r3
 8001378:	b29b      	uxth	r3, r3
 800137a:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (; y <= y2; y++)
 800137c:	e040      	b.n	8001400 <ST7735_FillTriangle+0x2b8>
  {
    a   = x1 + sa / dy12;
 800137e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8001382:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001386:	fb92 f3f3 	sdiv	r3, r2, r3
 800138a:	b29a      	uxth	r2, r3
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	4413      	add	r3, r2
 8001390:	b29b      	uxth	r3, r3
 8001392:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    b   = x0 + sb / dy02;
 8001394:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001398:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800139c:	fb92 f3f3 	sdiv	r3, r2, r3
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	4413      	add	r3, r2
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    sa += dx12;
 80013aa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80013ac:	89fb      	ldrh	r3, [r7, #14]
 80013ae:	4413      	add	r3, r2
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    sb += dx02;
 80013b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013b6:	8a7b      	ldrh	r3, [r7, #18]
 80013b8:	4413      	add	r3, r2
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (a > b) SWAP_INT16_T(a, b);
 80013be:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 80013c2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80013c6:	429a      	cmp	r2, r3
 80013c8:	dd05      	ble.n	80013d6 <ST7735_FillTriangle+0x28e>
 80013ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80013cc:	817b      	strh	r3, [r7, #10]
 80013ce:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80013d0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80013d2:	897b      	ldrh	r3, [r7, #10]
 80013d4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    ST7735_DrawFastHLine(a, y, b - a + 1, color);
 80013d6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80013d8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	b29b      	uxth	r3, r3
 80013de:	3301      	adds	r3, #1
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	b21a      	sxth	r2, r3
 80013e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80013e8:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	@ 0x2a
 80013ec:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 80013f0:	f000 f8f0 	bl	80015d4 <ST7735_DrawFastHLine>
  for (; y <= y2; y++)
 80013f4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	3301      	adds	r3, #1
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001400:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8001404:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001408:	429a      	cmp	r2, r3
 800140a:	ddb8      	ble.n	800137e <ST7735_FillTriangle+0x236>
  }
}
 800140c:	3734      	adds	r7, #52	@ 0x34
 800140e:	46bd      	mov	sp, r7
 8001410:	bd90      	pop	{r4, r7, pc}

08001412 <ST7735_DrawLine>:
** Description:             draw a line between 2 arbitrary points
***************************************************************************************/

// Slower but more compact line drawing function
void ST7735_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8001412:	b590      	push	{r4, r7, lr}
 8001414:	b089      	sub	sp, #36	@ 0x24
 8001416:	af00      	add	r7, sp, #0
 8001418:	4604      	mov	r4, r0
 800141a:	4608      	mov	r0, r1
 800141c:	4611      	mov	r1, r2
 800141e:	461a      	mov	r2, r3
 8001420:	4623      	mov	r3, r4
 8001422:	80fb      	strh	r3, [r7, #6]
 8001424:	4603      	mov	r3, r0
 8001426:	80bb      	strh	r3, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
 800142c:	4613      	mov	r3, r2
 800142e:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001430:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001434:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800143e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001442:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144a:	1acb      	subs	r3, r1, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	bfb8      	it	lt
 8001450:	425b      	neglt	r3, r3
 8001452:	429a      	cmp	r2, r3
 8001454:	bfcc      	ite	gt
 8001456:	2301      	movgt	r3, #1
 8001458:	2300      	movle	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	837b      	strh	r3, [r7, #26]
	if (steep)
 800145e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00b      	beq.n	800147e <ST7735_DrawLine+0x6c>
	{
		SWAP_INT16_T(x0, y0);
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	833b      	strh	r3, [r7, #24]
 800146a:	88bb      	ldrh	r3, [r7, #4]
 800146c:	80fb      	strh	r3, [r7, #6]
 800146e:	8b3b      	ldrh	r3, [r7, #24]
 8001470:	80bb      	strh	r3, [r7, #4]
		SWAP_INT16_T(x1, y1);
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	82fb      	strh	r3, [r7, #22]
 8001476:	883b      	ldrh	r3, [r7, #0]
 8001478:	807b      	strh	r3, [r7, #2]
 800147a:	8afb      	ldrh	r3, [r7, #22]
 800147c:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1)
 800147e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001482:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001486:	429a      	cmp	r2, r3
 8001488:	dd0b      	ble.n	80014a2 <ST7735_DrawLine+0x90>
	{
		SWAP_INT16_T(x0, x1);
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	82bb      	strh	r3, [r7, #20]
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	80fb      	strh	r3, [r7, #6]
 8001492:	8abb      	ldrh	r3, [r7, #20]
 8001494:	807b      	strh	r3, [r7, #2]
		SWAP_INT16_T(y0, y1);
 8001496:	88bb      	ldrh	r3, [r7, #4]
 8001498:	827b      	strh	r3, [r7, #18]
 800149a:	883b      	ldrh	r3, [r7, #0]
 800149c:	80bb      	strh	r3, [r7, #4]
 800149e:	8a7b      	ldrh	r3, [r7, #18]
 80014a0:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 80014a2:	887a      	ldrh	r2, [r7, #2]
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 80014ac:	f9b7 2000 	ldrsh.w	r2, [r7]
 80014b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	bfb8      	it	lt
 80014ba:	425b      	neglt	r3, r3
 80014bc:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 80014be:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80014c2:	0fda      	lsrs	r2, r3, #31
 80014c4:	4413      	add	r3, r2
 80014c6:	105b      	asrs	r3, r3, #1
 80014c8:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1)
 80014ca:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80014ce:	f9b7 3000 	ldrsh.w	r3, [r7]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	da02      	bge.n	80014dc <ST7735_DrawLine+0xca>
	{
		ystep = 1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	83bb      	strh	r3, [r7, #28]
 80014da:	e02d      	b.n	8001538 <ST7735_DrawLine+0x126>
	}
	else
	{
		ystep = -1;
 80014dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014e0:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0<=x1; x0++)
 80014e2:	e029      	b.n	8001538 <ST7735_DrawLine+0x126>
	{
		if (steep)
 80014e4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d006      	beq.n	80014fa <ST7735_DrawLine+0xe8>
		{
			ST7735_DrawPixel(y0, x0, color);
 80014ec:	88bb      	ldrh	r3, [r7, #4]
 80014ee:	88f9      	ldrh	r1, [r7, #6]
 80014f0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fb5e 	bl	8000bb4 <ST7735_DrawPixel>
 80014f8:	e005      	b.n	8001506 <ST7735_DrawLine+0xf4>
		}
		else
		{
			ST7735_DrawPixel(x0, y0, color);
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	88b9      	ldrh	r1, [r7, #4]
 80014fe:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fb57 	bl	8000bb4 <ST7735_DrawPixel>
		}
		err -= dy;
 8001506:	8bfa      	ldrh	r2, [r7, #30]
 8001508:	89fb      	ldrh	r3, [r7, #14]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	b29b      	uxth	r3, r3
 800150e:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 8001510:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001514:	2b00      	cmp	r3, #0
 8001516:	da09      	bge.n	800152c <ST7735_DrawLine+0x11a>
		{
			y0 += ystep;
 8001518:	88ba      	ldrh	r2, [r7, #4]
 800151a:	8bbb      	ldrh	r3, [r7, #28]
 800151c:	4413      	add	r3, r2
 800151e:	b29b      	uxth	r3, r3
 8001520:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8001522:	8bfa      	ldrh	r2, [r7, #30]
 8001524:	8a3b      	ldrh	r3, [r7, #16]
 8001526:	4413      	add	r3, r2
 8001528:	b29b      	uxth	r3, r3
 800152a:	83fb      	strh	r3, [r7, #30]
	for (; x0<=x1; x0++)
 800152c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001530:	b29b      	uxth	r3, r3
 8001532:	3301      	adds	r3, #1
 8001534:	b29b      	uxth	r3, r3
 8001536:	80fb      	strh	r3, [r7, #6]
 8001538:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800153c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001540:	429a      	cmp	r2, r3
 8001542:	ddcf      	ble.n	80014e4 <ST7735_DrawLine+0xd2>
		}
	}
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3724      	adds	r7, #36	@ 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd90      	pop	{r4, r7, pc}
	...

08001550 <ST7735_DrawFastVLine>:
/***************************************************************************************
** Function name:           drawFastVLine
** Description:             draw a vertical line
***************************************************************************************/
void ST7735_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b085      	sub	sp, #20
 8001554:	af02      	add	r7, sp, #8
 8001556:	4604      	mov	r4, r0
 8001558:	4608      	mov	r0, r1
 800155a:	4611      	mov	r1, r2
 800155c:	461a      	mov	r2, r3
 800155e:	4623      	mov	r3, r4
 8001560:	80fb      	strh	r3, [r7, #6]
 8001562:	4603      	mov	r3, r0
 8001564:	80bb      	strh	r3, [r7, #4]
 8001566:	460b      	mov	r3, r1
 8001568:	807b      	strh	r3, [r7, #2]
 800156a:	4613      	mov	r3, r2
 800156c:	803b      	strh	r3, [r7, #0]
  // Rudimentary clipping
  if ((x >= _width) || (y >= _height)) return;
 800156e:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <ST7735_DrawFastVLine+0x7c>)
 8001570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001574:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001578:	429a      	cmp	r2, r3
 800157a:	da22      	bge.n	80015c2 <ST7735_DrawFastVLine+0x72>
 800157c:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <ST7735_DrawFastVLine+0x80>)
 800157e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001582:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001586:	429a      	cmp	r2, r3
 8001588:	da1b      	bge.n	80015c2 <ST7735_DrawFastVLine+0x72>
  if ((y + h - 1) >= _height) h = _height - y;
 800158a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800158e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001592:	4413      	add	r3, r2
 8001594:	4a0e      	ldr	r2, [pc, #56]	@ (80015d0 <ST7735_DrawFastVLine+0x80>)
 8001596:	f9b2 2000 	ldrsh.w	r2, [r2]
 800159a:	4293      	cmp	r3, r2
 800159c:	dd07      	ble.n	80015ae <ST7735_DrawFastVLine+0x5e>
 800159e:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <ST7735_DrawFastVLine+0x80>)
 80015a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	88bb      	ldrh	r3, [r7, #4]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	807b      	strh	r3, [r7, #2]

  #ifdef USE_SPI_DMA
  ST7735_FillRectangle(x, y, 1, h, color);
 80015ae:	88f8      	ldrh	r0, [r7, #6]
 80015b0:	88b9      	ldrh	r1, [r7, #4]
 80015b2:	887a      	ldrh	r2, [r7, #2]
 80015b4:	883b      	ldrh	r3, [r7, #0]
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	4613      	mov	r3, r2
 80015ba:	2201      	movs	r2, #1
 80015bc:	f7ff fba0 	bl	8000d00 <ST7735_FillRectangle>
 80015c0:	e000      	b.n	80015c4 <ST7735_DrawFastVLine+0x74>
  if ((x >= _width) || (y >= _height)) return;
 80015c2:	bf00      	nop
  #else
  ST7735_DrawLine(x, y, x, y + h - 1, color);
  #endif

}
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd90      	pop	{r4, r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000000e 	.word	0x2000000e
 80015d0:	2000000c 	.word	0x2000000c

080015d4 <ST7735_DrawFastHLine>:
/***************************************************************************************
** Function name:           drawFastHLine
** Description:             draw a horizontal line
***************************************************************************************/
void ST7735_DrawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af02      	add	r7, sp, #8
 80015da:	4604      	mov	r4, r0
 80015dc:	4608      	mov	r0, r1
 80015de:	4611      	mov	r1, r2
 80015e0:	461a      	mov	r2, r3
 80015e2:	4623      	mov	r3, r4
 80015e4:	80fb      	strh	r3, [r7, #6]
 80015e6:	4603      	mov	r3, r0
 80015e8:	80bb      	strh	r3, [r7, #4]
 80015ea:	460b      	mov	r3, r1
 80015ec:	807b      	strh	r3, [r7, #2]
 80015ee:	4613      	mov	r3, r2
 80015f0:	803b      	strh	r3, [r7, #0]
  // Rudimentary clipping
  if ((x >= _width) || (y >= _height)) return;
 80015f2:	4b16      	ldr	r3, [pc, #88]	@ (800164c <ST7735_DrawFastHLine+0x78>)
 80015f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	da21      	bge.n	8001644 <ST7735_DrawFastHLine+0x70>
 8001600:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <ST7735_DrawFastHLine+0x7c>)
 8001602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001606:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800160a:	429a      	cmp	r2, r3
 800160c:	da1a      	bge.n	8001644 <ST7735_DrawFastHLine+0x70>
  if ((x + w - 1) >= _width)  w = _width - x;
 800160e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001612:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001616:	4413      	add	r3, r2
 8001618:	4a0c      	ldr	r2, [pc, #48]	@ (800164c <ST7735_DrawFastHLine+0x78>)
 800161a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800161e:	4293      	cmp	r3, r2
 8001620:	dd07      	ble.n	8001632 <ST7735_DrawFastHLine+0x5e>
 8001622:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <ST7735_DrawFastHLine+0x78>)
 8001624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001628:	b29a      	uxth	r2, r3
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	b29b      	uxth	r3, r3
 8001630:	807b      	strh	r3, [r7, #2]

  #ifdef USE_SPI_DMA
  ST7735_FillRectangle(x, y, w, 1, color);
 8001632:	88f8      	ldrh	r0, [r7, #6]
 8001634:	88b9      	ldrh	r1, [r7, #4]
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	883b      	ldrh	r3, [r7, #0]
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2301      	movs	r3, #1
 800163e:	f7ff fb5f 	bl	8000d00 <ST7735_FillRectangle>
 8001642:	e000      	b.n	8001646 <ST7735_DrawFastHLine+0x72>
  if ((x >= _width) || (y >= _height)) return;
 8001644:	bf00      	nop
  #else
  ST7735_DrawLine(x, y, x + w - 1, y, color);
  #endif
}
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	bd90      	pop	{r4, r7, pc}
 800164c:	2000000e 	.word	0x2000000e
 8001650:	2000000c 	.word	0x2000000c

08001654 <ST7735_SetRotation>:
/***************************************************************************************
** Function name:           setRotation
** Description:             rotate the screen orientation m = 0-3
***************************************************************************************/
void ST7735_SetRotation(uint8_t m)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  _value_rotation = m % 4;
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b4b      	ldr	r3, [pc, #300]	@ (8001794 <ST7735_SetRotation+0x140>)
 8001668:	701a      	strb	r2, [r3, #0]

  TFT_CS_L();
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001674:	f000 ff52 	bl	800251c <HAL_GPIO_WritePin>

  ST7735_WriteCommand(ST7735_MADCTL);
 8001678:	2036      	movs	r0, #54	@ 0x36
 800167a:	f7ff f92f 	bl	80008dc <ST7735_WriteCommand>

  switch (_value_rotation)
 800167e:	4b45      	ldr	r3, [pc, #276]	@ (8001794 <ST7735_SetRotation+0x140>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b03      	cmp	r3, #3
 8001684:	d87a      	bhi.n	800177c <ST7735_SetRotation+0x128>
 8001686:	a201      	add	r2, pc, #4	@ (adr r2, 800168c <ST7735_SetRotation+0x38>)
 8001688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168c:	0800169d 	.word	0x0800169d
 8001690:	080016d9 	.word	0x080016d9
 8001694:	08001715 	.word	0x08001715
 8001698:	08001741 	.word	0x08001741
  {
    case 0:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[1] | _data_rotation[3]);
 800169c:	4b3e      	ldr	r3, [pc, #248]	@ (8001798 <ST7735_SetRotation+0x144>)
 800169e:	781a      	ldrb	r2, [r3, #0]
 80016a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001798 <ST7735_SetRotation+0x144>)
 80016a2:	785b      	ldrb	r3, [r3, #1]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001798 <ST7735_SetRotation+0x144>)
 80016aa:	78db      	ldrb	r3, [r3, #3]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	73fb      	strb	r3, [r7, #15]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 80016b2:	f107 030f 	add.w	r3, r7, #15
 80016b6:	2101      	movs	r1, #1
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff f929 	bl	8000910 <ST7735_WriteData>
        _width  = ST7735_WIDTH;
 80016be:	4b37      	ldr	r3, [pc, #220]	@ (800179c <ST7735_SetRotation+0x148>)
 80016c0:	2280      	movs	r2, #128	@ 0x80
 80016c2:	801a      	strh	r2, [r3, #0]
        _height = ST7735_HEIGHT;
 80016c4:	4b36      	ldr	r3, [pc, #216]	@ (80017a0 <ST7735_SetRotation+0x14c>)
 80016c6:	2280      	movs	r2, #128	@ 0x80
 80016c8:	801a      	strh	r2, [r3, #0]
        _xstart = ST7735_XSTART;
 80016ca:	4b36      	ldr	r3, [pc, #216]	@ (80017a4 <ST7735_SetRotation+0x150>)
 80016cc:	2202      	movs	r2, #2
 80016ce:	701a      	strb	r2, [r3, #0]
		_ystart = ST7735_YSTART;
 80016d0:	4b35      	ldr	r3, [pc, #212]	@ (80017a8 <ST7735_SetRotation+0x154>)
 80016d2:	2203      	movs	r2, #3
 80016d4:	701a      	strb	r2, [r3, #0]
    }
     break;
 80016d6:	e051      	b.n	800177c <ST7735_SetRotation+0x128>
    case 1:
    {
    	uint8_t d_r = (_data_rotation[1] | _data_rotation[2] | _data_rotation[3]);
 80016d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001798 <ST7735_SetRotation+0x144>)
 80016da:	785a      	ldrb	r2, [r3, #1]
 80016dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001798 <ST7735_SetRotation+0x144>)
 80016de:	789b      	ldrb	r3, [r3, #2]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001798 <ST7735_SetRotation+0x144>)
 80016e6:	78db      	ldrb	r3, [r3, #3]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	73bb      	strb	r3, [r7, #14]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 80016ee:	f107 030e 	add.w	r3, r7, #14
 80016f2:	2101      	movs	r1, #1
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff f90b 	bl	8000910 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 80016fa:	4b28      	ldr	r3, [pc, #160]	@ (800179c <ST7735_SetRotation+0x148>)
 80016fc:	2280      	movs	r2, #128	@ 0x80
 80016fe:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 8001700:	4b27      	ldr	r3, [pc, #156]	@ (80017a0 <ST7735_SetRotation+0x14c>)
 8001702:	2280      	movs	r2, #128	@ 0x80
 8001704:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 8001706:	4b27      	ldr	r3, [pc, #156]	@ (80017a4 <ST7735_SetRotation+0x150>)
 8001708:	2203      	movs	r2, #3
 800170a:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 800170c:	4b26      	ldr	r3, [pc, #152]	@ (80017a8 <ST7735_SetRotation+0x154>)
 800170e:	2202      	movs	r2, #2
 8001710:	701a      	strb	r2, [r3, #0]
    }
      break;
 8001712:	e033      	b.n	800177c <ST7735_SetRotation+0x128>
    case 2:
    {
    	uint8_t d_r = _data_rotation[3];
 8001714:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <ST7735_SetRotation+0x144>)
 8001716:	78db      	ldrb	r3, [r3, #3]
 8001718:	737b      	strb	r3, [r7, #13]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 800171a:	f107 030d 	add.w	r3, r7, #13
 800171e:	2101      	movs	r1, #1
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff f8f5 	bl	8000910 <ST7735_WriteData>
    	_width  = ST7735_WIDTH;
 8001726:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <ST7735_SetRotation+0x148>)
 8001728:	2280      	movs	r2, #128	@ 0x80
 800172a:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_HEIGHT;
 800172c:	4b1c      	ldr	r3, [pc, #112]	@ (80017a0 <ST7735_SetRotation+0x14c>)
 800172e:	2280      	movs	r2, #128	@ 0x80
 8001730:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_XSTART;
 8001732:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <ST7735_SetRotation+0x150>)
 8001734:	2202      	movs	r2, #2
 8001736:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_YSTART;
 8001738:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <ST7735_SetRotation+0x154>)
 800173a:	2203      	movs	r2, #3
 800173c:	701a      	strb	r2, [r3, #0]
    }
      break;
 800173e:	e01d      	b.n	800177c <ST7735_SetRotation+0x128>
    case 3:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[2] | _data_rotation[3]);
 8001740:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <ST7735_SetRotation+0x144>)
 8001742:	781a      	ldrb	r2, [r3, #0]
 8001744:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <ST7735_SetRotation+0x144>)
 8001746:	789b      	ldrb	r3, [r3, #2]
 8001748:	4313      	orrs	r3, r2
 800174a:	b2da      	uxtb	r2, r3
 800174c:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <ST7735_SetRotation+0x144>)
 800174e:	78db      	ldrb	r3, [r3, #3]
 8001750:	4313      	orrs	r3, r2
 8001752:	b2db      	uxtb	r3, r3
 8001754:	733b      	strb	r3, [r7, #12]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	2101      	movs	r1, #1
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff f8d7 	bl	8000910 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 8001762:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <ST7735_SetRotation+0x148>)
 8001764:	2280      	movs	r2, #128	@ 0x80
 8001766:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 8001768:	4b0d      	ldr	r3, [pc, #52]	@ (80017a0 <ST7735_SetRotation+0x14c>)
 800176a:	2280      	movs	r2, #128	@ 0x80
 800176c:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 800176e:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <ST7735_SetRotation+0x150>)
 8001770:	2203      	movs	r2, #3
 8001772:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 8001774:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <ST7735_SetRotation+0x154>)
 8001776:	2202      	movs	r2, #2
 8001778:	701a      	strb	r2, [r3, #0]
    }
      break;
 800177a:	bf00      	nop
  }
  TFT_CS_H();
 800177c:	2201      	movs	r2, #1
 800177e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001782:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001786:	f000 fec9 	bl	800251c <HAL_GPIO_WritePin>
}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000104 	.word	0x20000104
 8001798:	20000008 	.word	0x20000008
 800179c:	2000000e 	.word	0x2000000e
 80017a0:	2000000c 	.word	0x2000000c
 80017a4:	20000010 	.word	0x20000010
 80017a8:	20000011 	.word	0x20000011

080017ac <ST7735_GetHeight>:
{
  return _value_rotation;
}

int16_t ST7735_GetHeight(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
	return _height;
 80017b0:	4b03      	ldr	r3, [pc, #12]	@ (80017c0 <ST7735_GetHeight+0x14>)
 80017b2:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	2000000c 	.word	0x2000000c

080017c4 <ST7735_GetWidth>:

int16_t ST7735_GetWidth(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
	return _width;
 80017c8:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <ST7735_GetWidth+0x14>)
 80017ca:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	2000000e 	.word	0x2000000e

080017dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <HAL_MspInit+0x44>)
 80017e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001820 <HAL_MspInit+0x44>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <HAL_MspInit+0x44>)
 80017f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <HAL_MspInit+0x44>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fe:	4a08      	ldr	r2, [pc, #32]	@ (8001820 <HAL_MspInit+0x44>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001804:	6593      	str	r3, [r2, #88]	@ 0x58
 8001806:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_MspInit+0x44>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001812:	f000 ff3f 	bl	8002694 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000

08001824 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	@ 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a2b      	ldr	r2, [pc, #172]	@ (80018f0 <HAL_SPI_MspInit+0xcc>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d150      	bne.n	80018e8 <HAL_SPI_MspInit+0xc4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001846:	4b2b      	ldr	r3, [pc, #172]	@ (80018f4 <HAL_SPI_MspInit+0xd0>)
 8001848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800184a:	4a2a      	ldr	r2, [pc, #168]	@ (80018f4 <HAL_SPI_MspInit+0xd0>)
 800184c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001850:	6613      	str	r3, [r2, #96]	@ 0x60
 8001852:	4b28      	ldr	r3, [pc, #160]	@ (80018f4 <HAL_SPI_MspInit+0xd0>)
 8001854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001856:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	4b25      	ldr	r3, [pc, #148]	@ (80018f4 <HAL_SPI_MspInit+0xd0>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001862:	4a24      	ldr	r2, [pc, #144]	@ (80018f4 <HAL_SPI_MspInit+0xd0>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800186a:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <HAL_SPI_MspInit+0xd0>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001876:	2328      	movs	r3, #40	@ 0x28
 8001878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001886:	2305      	movs	r3, #5
 8001888:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	4819      	ldr	r0, [pc, #100]	@ (80018f8 <HAL_SPI_MspInit+0xd4>)
 8001892:	f000 fcc1 	bl	8002218 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8001896:	4b19      	ldr	r3, [pc, #100]	@ (80018fc <HAL_SPI_MspInit+0xd8>)
 8001898:	4a19      	ldr	r2, [pc, #100]	@ (8001900 <HAL_SPI_MspInit+0xdc>)
 800189a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800189c:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <HAL_SPI_MspInit+0xd8>)
 800189e:	220b      	movs	r2, #11
 80018a0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018a2:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <HAL_SPI_MspInit+0xd8>)
 80018a4:	2210      	movs	r2, #16
 80018a6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a8:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <HAL_SPI_MspInit+0xd8>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018ae:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <HAL_SPI_MspInit+0xd8>)
 80018b0:	2280      	movs	r2, #128	@ 0x80
 80018b2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018b4:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <HAL_SPI_MspInit+0xd8>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ba:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <HAL_SPI_MspInit+0xd8>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80018c0:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <HAL_SPI_MspInit+0xd8>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018c6:	4b0d      	ldr	r3, [pc, #52]	@ (80018fc <HAL_SPI_MspInit+0xd8>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80018cc:	480b      	ldr	r0, [pc, #44]	@ (80018fc <HAL_SPI_MspInit+0xd8>)
 80018ce:	f000 fa31 	bl	8001d34 <HAL_DMA_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <HAL_SPI_MspInit+0xb8>
    {
      Error_Handler();
 80018d8:	f7fe ffe0 	bl	800089c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a07      	ldr	r2, [pc, #28]	@ (80018fc <HAL_SPI_MspInit+0xd8>)
 80018e0:	655a      	str	r2, [r3, #84]	@ 0x54
 80018e2:	4a06      	ldr	r2, [pc, #24]	@ (80018fc <HAL_SPI_MspInit+0xd8>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018e8:	bf00      	nop
 80018ea:	3728      	adds	r7, #40	@ 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40013000 	.word	0x40013000
 80018f4:	40021000 	.word	0x40021000
 80018f8:	48000400 	.word	0x48000400
 80018fc:	200000a4 	.word	0x200000a4
 8001900:	40020008 	.word	0x40020008

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <NMI_Handler+0x4>

0800190c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <HardFault_Handler+0x4>

08001914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <MemManage_Handler+0x4>

0800191c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <BusFault_Handler+0x4>

08001924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <UsageFault_Handler+0x4>

0800192c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195a:	f000 f89b 	bl	8001a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001968:	4802      	ldr	r0, [pc, #8]	@ (8001974 <DMA1_Channel1_IRQHandler+0x10>)
 800196a:	f000 fb06 	bl	8001f7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200000a4 	.word	0x200000a4

08001978 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800197c:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <SystemInit+0x20>)
 800197e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001982:	4a05      	ldr	r2, [pc, #20]	@ (8001998 <SystemInit+0x20>)
 8001984:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001988:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800199c:	480d      	ldr	r0, [pc, #52]	@ (80019d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800199e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a0:	f7ff ffea 	bl	8001978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a4:	480c      	ldr	r0, [pc, #48]	@ (80019d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80019a6:	490d      	ldr	r1, [pc, #52]	@ (80019dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80019a8:	4a0d      	ldr	r2, [pc, #52]	@ (80019e0 <LoopForever+0xe>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019ac:	e002      	b.n	80019b4 <LoopCopyDataInit>

080019ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b2:	3304      	adds	r3, #4

080019b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b8:	d3f9      	bcc.n	80019ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ba:	4a0a      	ldr	r2, [pc, #40]	@ (80019e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019bc:	4c0a      	ldr	r4, [pc, #40]	@ (80019e8 <LoopForever+0x16>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c0:	e001      	b.n	80019c6 <LoopFillZerobss>

080019c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c4:	3204      	adds	r2, #4

080019c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c8:	d3fb      	bcc.n	80019c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ca:	f002 f885 	bl	8003ad8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ce:	f7fe fe3b 	bl	8000648 <main>

080019d2 <LoopForever>:

LoopForever:
    b LoopForever
 80019d2:	e7fe      	b.n	80019d2 <LoopForever>
  ldr   r0, =_estack
 80019d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019dc:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80019e0:	0800cf70 	.word	0x0800cf70
  ldr r2, =_sbss
 80019e4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80019e8:	2000010c 	.word	0x2000010c

080019ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019ec:	e7fe      	b.n	80019ec <ADC1_2_IRQHandler>

080019ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f8:	2003      	movs	r0, #3
 80019fa:	f000 f95b 	bl	8001cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019fe:	200f      	movs	r0, #15
 8001a00:	f000 f80e 	bl	8001a20 <HAL_InitTick>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	71fb      	strb	r3, [r7, #7]
 8001a0e:	e001      	b.n	8001a14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a10:	f7ff fee4 	bl	80017dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a14:	79fb      	ldrb	r3, [r7, #7]

}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a2c:	4b16      	ldr	r3, [pc, #88]	@ (8001a88 <HAL_InitTick+0x68>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d022      	beq.n	8001a7a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a34:	4b15      	ldr	r3, [pc, #84]	@ (8001a8c <HAL_InitTick+0x6c>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <HAL_InitTick+0x68>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a40:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 f966 	bl	8001d1a <HAL_SYSTICK_Config>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10f      	bne.n	8001a74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b0f      	cmp	r3, #15
 8001a58:	d809      	bhi.n	8001a6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a62:	f000 f932 	bl	8001cca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a66:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <HAL_InitTick+0x70>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	e007      	b.n	8001a7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	73fb      	strb	r3, [r7, #15]
 8001a72:	e004      	b.n	8001a7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	e001      	b.n	8001a7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	2000001c 	.word	0x2000001c
 8001a8c:	20000014 	.word	0x20000014
 8001a90:	20000018 	.word	0x20000018

08001a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <HAL_IncTick+0x1c>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <HAL_IncTick+0x20>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	4a03      	ldr	r2, [pc, #12]	@ (8001ab0 <HAL_IncTick+0x1c>)
 8001aa4:	6013      	str	r3, [r2, #0]
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	20000108 	.word	0x20000108
 8001ab4:	2000001c 	.word	0x2000001c

08001ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return uwTick;
 8001abc:	4b03      	ldr	r3, [pc, #12]	@ (8001acc <HAL_GetTick+0x14>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000108 	.word	0x20000108

08001ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad8:	f7ff ffee 	bl	8001ab8 <HAL_GetTick>
 8001adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae8:	d004      	beq.n	8001af4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aea:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <HAL_Delay+0x40>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	4413      	add	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001af4:	bf00      	nop
 8001af6:	f7ff ffdf 	bl	8001ab8 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d8f7      	bhi.n	8001af6 <HAL_Delay+0x26>
  {
  }
}
 8001b06:	bf00      	nop
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	2000001c 	.word	0x2000001c

08001b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b24:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b30:	4013      	ands	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b46:	4a04      	ldr	r2, [pc, #16]	@ (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	60d3      	str	r3, [r2, #12]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b60:	4b04      	ldr	r3, [pc, #16]	@ (8001b74 <__NVIC_GetPriorityGrouping+0x18>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	f003 0307 	and.w	r3, r3, #7
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db0b      	blt.n	8001ba2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	f003 021f 	and.w	r2, r3, #31
 8001b90:	4907      	ldr	r1, [pc, #28]	@ (8001bb0 <__NVIC_EnableIRQ+0x38>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	095b      	lsrs	r3, r3, #5
 8001b98:	2001      	movs	r0, #1
 8001b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000e100 	.word	0xe000e100

08001bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db0a      	blt.n	8001bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	490c      	ldr	r1, [pc, #48]	@ (8001c00 <__NVIC_SetPriority+0x4c>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bdc:	e00a      	b.n	8001bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4908      	ldr	r1, [pc, #32]	@ (8001c04 <__NVIC_SetPriority+0x50>)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	3b04      	subs	r3, #4
 8001bec:	0112      	lsls	r2, r2, #4
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	761a      	strb	r2, [r3, #24]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000e100 	.word	0xe000e100
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	@ 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f1c3 0307 	rsb	r3, r3, #7
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	bf28      	it	cs
 8001c26:	2304      	movcs	r3, #4
 8001c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d902      	bls.n	8001c38 <NVIC_EncodePriority+0x30>
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3b03      	subs	r3, #3
 8001c36:	e000      	b.n	8001c3a <NVIC_EncodePriority+0x32>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43d9      	mvns	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	4313      	orrs	r3, r2
         );
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	@ 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c80:	d301      	bcc.n	8001c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00f      	b.n	8001ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c86:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <SysTick_Config+0x40>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8e:	210f      	movs	r1, #15
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f7ff ff8e 	bl	8001bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c98:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <SysTick_Config+0x40>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9e:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <SysTick_Config+0x40>)
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	e000e010 	.word	0xe000e010

08001cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff29 	bl	8001b14 <__NVIC_SetPriorityGrouping>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd8:	f7ff ff40 	bl	8001b5c <__NVIC_GetPriorityGrouping>
 8001cdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	6978      	ldr	r0, [r7, #20]
 8001ce4:	f7ff ff90 	bl	8001c08 <NVIC_EncodePriority>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff5f 	bl	8001bb4 <__NVIC_SetPriority>
}
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff33 	bl	8001b78 <__NVIC_EnableIRQ>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ffa4 	bl	8001c70 <SysTick_Config>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e08d      	b.n	8001e62 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4b47      	ldr	r3, [pc, #284]	@ (8001e6c <HAL_DMA_Init+0x138>)
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d80f      	bhi.n	8001d72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b45      	ldr	r3, [pc, #276]	@ (8001e70 <HAL_DMA_Init+0x13c>)
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a45      	ldr	r2, [pc, #276]	@ (8001e74 <HAL_DMA_Init+0x140>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	009a      	lsls	r2, r3, #2
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a42      	ldr	r2, [pc, #264]	@ (8001e78 <HAL_DMA_Init+0x144>)
 8001d6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d70:	e00e      	b.n	8001d90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b40      	ldr	r3, [pc, #256]	@ (8001e7c <HAL_DMA_Init+0x148>)
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4a3d      	ldr	r2, [pc, #244]	@ (8001e74 <HAL_DMA_Init+0x140>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	091b      	lsrs	r3, r3, #4
 8001d84:	009a      	lsls	r2, r3, #2
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a3c      	ldr	r2, [pc, #240]	@ (8001e80 <HAL_DMA_Init+0x14c>)
 8001d8e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001daa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f9b6 	bl	8002154 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001df0:	d102      	bne.n	8001df8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e0c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d010      	beq.n	8001e38 <HAL_DMA_Init+0x104>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d80c      	bhi.n	8001e38 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f9d6 	bl	80021d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	e008      	b.n	8001e4a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40020407 	.word	0x40020407
 8001e70:	bffdfff8 	.word	0xbffdfff8
 8001e74:	cccccccd 	.word	0xcccccccd
 8001e78:	40020000 	.word	0x40020000
 8001e7c:	bffdfbf8 	.word	0xbffdfbf8
 8001e80:	40020400 	.word	0x40020400

08001e84 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_DMA_Start_IT+0x20>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e066      	b.n	8001f72 <HAL_DMA_Start_IT+0xee>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d155      	bne.n	8001f64 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0201 	bic.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	68b9      	ldr	r1, [r7, #8]
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 f8fb 	bl	80020d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d008      	beq.n	8001efc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 020e 	orr.w	r2, r2, #14
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	e00f      	b.n	8001f1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0204 	bic.w	r2, r2, #4
 8001f0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 020a 	orr.w	r2, r2, #10
 8001f1a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d007      	beq.n	8001f3a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f38:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d007      	beq.n	8001f52 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f50:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0201 	orr.w	r2, r2, #1
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e005      	b.n	8001f70 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f96:	f003 031f 	and.w	r3, r3, #31
 8001f9a:	2204      	movs	r2, #4
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d026      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x7a>
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d021      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0320 	and.w	r3, r3, #32
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d107      	bne.n	8001fce <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0204 	bic.w	r2, r2, #4
 8001fcc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f003 021f 	and.w	r2, r3, #31
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	2104      	movs	r1, #4
 8001fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d071      	beq.n	80020ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001ff2:	e06c      	b.n	80020ce <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	409a      	lsls	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d02e      	beq.n	8002066 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d029      	beq.n	8002066 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10b      	bne.n	8002038 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 020a 	bic.w	r2, r2, #10
 800202e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	2102      	movs	r1, #2
 8002046:	fa01 f202 	lsl.w	r2, r1, r2
 800204a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002058:	2b00      	cmp	r3, #0
 800205a:	d038      	beq.n	80020ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002064:	e033      	b.n	80020ce <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206a:	f003 031f 	and.w	r3, r3, #31
 800206e:	2208      	movs	r2, #8
 8002070:	409a      	lsls	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4013      	ands	r3, r2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d02a      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b00      	cmp	r3, #0
 8002082:	d025      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 020e 	bic.w	r2, r2, #14
 8002092:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002098:	f003 021f 	and.w	r2, r3, #31
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a0:	2101      	movs	r1, #1
 80020a2:	fa01 f202 	lsl.w	r2, r1, r2
 80020a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d004      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80020ce:	bf00      	nop
 80020d0:	bf00      	nop
}
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80020ee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d004      	beq.n	8002102 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002100:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002106:	f003 021f 	and.w	r2, r3, #31
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	2101      	movs	r1, #1
 8002110:	fa01 f202 	lsl.w	r2, r1, r2
 8002114:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b10      	cmp	r3, #16
 8002124:	d108      	bne.n	8002138 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002136:	e007      	b.n	8002148 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	60da      	str	r2, [r3, #12]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	4b16      	ldr	r3, [pc, #88]	@ (80021bc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002164:	429a      	cmp	r2, r3
 8002166:	d802      	bhi.n	800216e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002168:	4b15      	ldr	r3, [pc, #84]	@ (80021c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	e001      	b.n	8002172 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800216e:	4b15      	ldr	r3, [pc, #84]	@ (80021c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002170:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	3b08      	subs	r3, #8
 800217e:	4a12      	ldr	r2, [pc, #72]	@ (80021c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	009a      	lsls	r2, r3, #2
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4413      	add	r3, r2
 8002194:	461a      	mov	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a0b      	ldr	r2, [pc, #44]	@ (80021cc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800219e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	2201      	movs	r2, #1
 80021a8:	409a      	lsls	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80021ae:	bf00      	nop
 80021b0:	371c      	adds	r7, #28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40020407 	.word	0x40020407
 80021c0:	40020800 	.word	0x40020800
 80021c4:	40020820 	.word	0x40020820
 80021c8:	cccccccd 	.word	0xcccccccd
 80021cc:	40020880 	.word	0x40020880

080021d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	461a      	mov	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a08      	ldr	r2, [pc, #32]	@ (8002214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80021f2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	2201      	movs	r2, #1
 80021fe:	409a      	lsls	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	1000823f 	.word	0x1000823f
 8002214:	40020940 	.word	0x40020940

08002218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002226:	e15a      	b.n	80024de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2101      	movs	r1, #1
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	fa01 f303 	lsl.w	r3, r1, r3
 8002234:	4013      	ands	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 814c 	beq.w	80024d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b01      	cmp	r3, #1
 800224a:	d005      	beq.n	8002258 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002254:	2b02      	cmp	r3, #2
 8002256:	d130      	bne.n	80022ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800228e:	2201      	movs	r2, #1
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	f003 0201 	and.w	r2, r3, #1
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d017      	beq.n	80022f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2203      	movs	r2, #3
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d123      	bne.n	800234a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	08da      	lsrs	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3208      	adds	r2, #8
 800230a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	220f      	movs	r2, #15
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	08da      	lsrs	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3208      	adds	r2, #8
 8002344:	6939      	ldr	r1, [r7, #16]
 8002346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 0203 	and.w	r2, r3, #3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80a6 	beq.w	80024d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238c:	4b5b      	ldr	r3, [pc, #364]	@ (80024fc <HAL_GPIO_Init+0x2e4>)
 800238e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002390:	4a5a      	ldr	r2, [pc, #360]	@ (80024fc <HAL_GPIO_Init+0x2e4>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6613      	str	r3, [r2, #96]	@ 0x60
 8002398:	4b58      	ldr	r3, [pc, #352]	@ (80024fc <HAL_GPIO_Init+0x2e4>)
 800239a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023a4:	4a56      	ldr	r2, [pc, #344]	@ (8002500 <HAL_GPIO_Init+0x2e8>)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	089b      	lsrs	r3, r3, #2
 80023aa:	3302      	adds	r3, #2
 80023ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	220f      	movs	r2, #15
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023ce:	d01f      	beq.n	8002410 <HAL_GPIO_Init+0x1f8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a4c      	ldr	r2, [pc, #304]	@ (8002504 <HAL_GPIO_Init+0x2ec>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d019      	beq.n	800240c <HAL_GPIO_Init+0x1f4>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a4b      	ldr	r2, [pc, #300]	@ (8002508 <HAL_GPIO_Init+0x2f0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d013      	beq.n	8002408 <HAL_GPIO_Init+0x1f0>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a4a      	ldr	r2, [pc, #296]	@ (800250c <HAL_GPIO_Init+0x2f4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d00d      	beq.n	8002404 <HAL_GPIO_Init+0x1ec>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a49      	ldr	r2, [pc, #292]	@ (8002510 <HAL_GPIO_Init+0x2f8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d007      	beq.n	8002400 <HAL_GPIO_Init+0x1e8>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a48      	ldr	r2, [pc, #288]	@ (8002514 <HAL_GPIO_Init+0x2fc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d101      	bne.n	80023fc <HAL_GPIO_Init+0x1e4>
 80023f8:	2305      	movs	r3, #5
 80023fa:	e00a      	b.n	8002412 <HAL_GPIO_Init+0x1fa>
 80023fc:	2306      	movs	r3, #6
 80023fe:	e008      	b.n	8002412 <HAL_GPIO_Init+0x1fa>
 8002400:	2304      	movs	r3, #4
 8002402:	e006      	b.n	8002412 <HAL_GPIO_Init+0x1fa>
 8002404:	2303      	movs	r3, #3
 8002406:	e004      	b.n	8002412 <HAL_GPIO_Init+0x1fa>
 8002408:	2302      	movs	r3, #2
 800240a:	e002      	b.n	8002412 <HAL_GPIO_Init+0x1fa>
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <HAL_GPIO_Init+0x1fa>
 8002410:	2300      	movs	r3, #0
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	f002 0203 	and.w	r2, r2, #3
 8002418:	0092      	lsls	r2, r2, #2
 800241a:	4093      	lsls	r3, r2
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002422:	4937      	ldr	r1, [pc, #220]	@ (8002500 <HAL_GPIO_Init+0x2e8>)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	3302      	adds	r3, #2
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002430:	4b39      	ldr	r3, [pc, #228]	@ (8002518 <HAL_GPIO_Init+0x300>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002454:	4a30      	ldr	r2, [pc, #192]	@ (8002518 <HAL_GPIO_Init+0x300>)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800245a:	4b2f      	ldr	r3, [pc, #188]	@ (8002518 <HAL_GPIO_Init+0x300>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800247e:	4a26      	ldr	r2, [pc, #152]	@ (8002518 <HAL_GPIO_Init+0x300>)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002484:	4b24      	ldr	r3, [pc, #144]	@ (8002518 <HAL_GPIO_Init+0x300>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002518 <HAL_GPIO_Init+0x300>)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002518 <HAL_GPIO_Init+0x300>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024d2:	4a11      	ldr	r2, [pc, #68]	@ (8002518 <HAL_GPIO_Init+0x300>)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	3301      	adds	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f47f ae9d 	bne.w	8002228 <HAL_GPIO_Init+0x10>
  }
}
 80024ee:	bf00      	nop
 80024f0:	bf00      	nop
 80024f2:	371c      	adds	r7, #28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	40021000 	.word	0x40021000
 8002500:	40010000 	.word	0x40010000
 8002504:	48000400 	.word	0x48000400
 8002508:	48000800 	.word	0x48000800
 800250c:	48000c00 	.word	0x48000c00
 8002510:	48001000 	.word	0x48001000
 8002514:	48001400 	.word	0x48001400
 8002518:	40010400 	.word	0x40010400

0800251c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	807b      	strh	r3, [r7, #2]
 8002528:	4613      	mov	r3, r2
 800252a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800252c:	787b      	ldrb	r3, [r7, #1]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002538:	e002      	b.n	8002540 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d141      	bne.n	80025de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800255a:	4b4b      	ldr	r3, [pc, #300]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002566:	d131      	bne.n	80025cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002568:	4b47      	ldr	r3, [pc, #284]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800256a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800256e:	4a46      	ldr	r2, [pc, #280]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002574:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002578:	4b43      	ldr	r3, [pc, #268]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002580:	4a41      	ldr	r2, [pc, #260]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002582:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002586:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002588:	4b40      	ldr	r3, [pc, #256]	@ (800268c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2232      	movs	r2, #50	@ 0x32
 800258e:	fb02 f303 	mul.w	r3, r2, r3
 8002592:	4a3f      	ldr	r2, [pc, #252]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002594:	fba2 2303 	umull	r2, r3, r2, r3
 8002598:	0c9b      	lsrs	r3, r3, #18
 800259a:	3301      	adds	r3, #1
 800259c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800259e:	e002      	b.n	80025a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025a6:	4b38      	ldr	r3, [pc, #224]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025b2:	d102      	bne.n	80025ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f2      	bne.n	80025a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025ba:	4b33      	ldr	r3, [pc, #204]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025c6:	d158      	bne.n	800267a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e057      	b.n	800267c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80025dc:	e04d      	b.n	800267a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025e4:	d141      	bne.n	800266a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025e6:	4b28      	ldr	r3, [pc, #160]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025f2:	d131      	bne.n	8002658 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025f4:	4b24      	ldr	r3, [pc, #144]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025fa:	4a23      	ldr	r2, [pc, #140]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002600:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002604:	4b20      	ldr	r3, [pc, #128]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800260c:	4a1e      	ldr	r2, [pc, #120]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002612:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002614:	4b1d      	ldr	r3, [pc, #116]	@ (800268c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2232      	movs	r2, #50	@ 0x32
 800261a:	fb02 f303 	mul.w	r3, r2, r3
 800261e:	4a1c      	ldr	r2, [pc, #112]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002620:	fba2 2303 	umull	r2, r3, r2, r3
 8002624:	0c9b      	lsrs	r3, r3, #18
 8002626:	3301      	adds	r3, #1
 8002628:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800262a:	e002      	b.n	8002632 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3b01      	subs	r3, #1
 8002630:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002632:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800263a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800263e:	d102      	bne.n	8002646 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f2      	bne.n	800262c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002646:	4b10      	ldr	r3, [pc, #64]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800264e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002652:	d112      	bne.n	800267a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e011      	b.n	800267c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002658:	4b0b      	ldr	r3, [pc, #44]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800265a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800265e:	4a0a      	ldr	r2, [pc, #40]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002664:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002668:	e007      	b.n	800267a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800266a:	4b07      	ldr	r3, [pc, #28]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002672:	4a05      	ldr	r2, [pc, #20]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002674:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002678:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	40007000 	.word	0x40007000
 800268c:	20000014 	.word	0x20000014
 8002690:	431bde83 	.word	0x431bde83

08002694 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002698:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	4a04      	ldr	r2, [pc, #16]	@ (80026b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800269e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a2:	6093      	str	r3, [r2, #8]
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40007000 	.word	0x40007000

080026b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e2fe      	b.n	8002cc4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d075      	beq.n	80027be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d2:	4b97      	ldr	r3, [pc, #604]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026dc:	4b94      	ldr	r3, [pc, #592]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	2b0c      	cmp	r3, #12
 80026ea:	d102      	bne.n	80026f2 <HAL_RCC_OscConfig+0x3e>
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d002      	beq.n	80026f8 <HAL_RCC_OscConfig+0x44>
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d10b      	bne.n	8002710 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	4b8d      	ldr	r3, [pc, #564]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d05b      	beq.n	80027bc <HAL_RCC_OscConfig+0x108>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d157      	bne.n	80027bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e2d9      	b.n	8002cc4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002718:	d106      	bne.n	8002728 <HAL_RCC_OscConfig+0x74>
 800271a:	4b85      	ldr	r3, [pc, #532]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a84      	ldr	r2, [pc, #528]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e01d      	b.n	8002764 <HAL_RCC_OscConfig+0xb0>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x98>
 8002732:	4b7f      	ldr	r3, [pc, #508]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a7e      	ldr	r2, [pc, #504]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b7c      	ldr	r3, [pc, #496]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a7b      	ldr	r2, [pc, #492]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e00b      	b.n	8002764 <HAL_RCC_OscConfig+0xb0>
 800274c:	4b78      	ldr	r3, [pc, #480]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a77      	ldr	r2, [pc, #476]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 8002752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	4b75      	ldr	r3, [pc, #468]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a74      	ldr	r2, [pc, #464]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 800275e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d013      	beq.n	8002794 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7ff f9a4 	bl	8001ab8 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002774:	f7ff f9a0 	bl	8001ab8 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	@ 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e29e      	b.n	8002cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002786:	4b6a      	ldr	r3, [pc, #424]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0xc0>
 8002792:	e014      	b.n	80027be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7ff f990 	bl	8001ab8 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800279c:	f7ff f98c 	bl	8001ab8 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	@ 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e28a      	b.n	8002cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ae:	4b60      	ldr	r3, [pc, #384]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0xe8>
 80027ba:	e000      	b.n	80027be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d075      	beq.n	80028b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ca:	4b59      	ldr	r3, [pc, #356]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027d4:	4b56      	ldr	r3, [pc, #344]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	2b0c      	cmp	r3, #12
 80027e2:	d102      	bne.n	80027ea <HAL_RCC_OscConfig+0x136>
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d002      	beq.n	80027f0 <HAL_RCC_OscConfig+0x13c>
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d11f      	bne.n	8002830 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f0:	4b4f      	ldr	r3, [pc, #316]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_OscConfig+0x154>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e25d      	b.n	8002cc4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002808:	4b49      	ldr	r3, [pc, #292]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	061b      	lsls	r3, r3, #24
 8002816:	4946      	ldr	r1, [pc, #280]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800281c:	4b45      	ldr	r3, [pc, #276]	@ (8002934 <HAL_RCC_OscConfig+0x280>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff f8fd 	bl	8001a20 <HAL_InitTick>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d043      	beq.n	80028b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e249      	b.n	8002cc4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d023      	beq.n	8002880 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002838:	4b3d      	ldr	r3, [pc, #244]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a3c      	ldr	r2, [pc, #240]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 800283e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7ff f938 	bl	8001ab8 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284c:	f7ff f934 	bl	8001ab8 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e232      	b.n	8002cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800285e:	4b34      	ldr	r3, [pc, #208]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286a:	4b31      	ldr	r3, [pc, #196]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	061b      	lsls	r3, r3, #24
 8002878:	492d      	ldr	r1, [pc, #180]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 800287a:	4313      	orrs	r3, r2
 800287c:	604b      	str	r3, [r1, #4]
 800287e:	e01a      	b.n	80028b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002880:	4b2b      	ldr	r3, [pc, #172]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a2a      	ldr	r2, [pc, #168]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 8002886:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800288a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7ff f914 	bl	8001ab8 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002894:	f7ff f910 	bl	8001ab8 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e20e      	b.n	8002cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028a6:	4b22      	ldr	r3, [pc, #136]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x1e0>
 80028b2:	e000      	b.n	80028b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d041      	beq.n	8002946 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d01c      	beq.n	8002904 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ca:	4b19      	ldr	r3, [pc, #100]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 80028cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028d0:	4a17      	ldr	r2, [pc, #92]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028da:	f7ff f8ed 	bl	8001ab8 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e2:	f7ff f8e9 	bl	8001ab8 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e1e7      	b.n	8002cc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 80028f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0ef      	beq.n	80028e2 <HAL_RCC_OscConfig+0x22e>
 8002902:	e020      	b.n	8002946 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002904:	4b0a      	ldr	r3, [pc, #40]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 8002906:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800290a:	4a09      	ldr	r2, [pc, #36]	@ (8002930 <HAL_RCC_OscConfig+0x27c>)
 800290c:	f023 0301 	bic.w	r3, r3, #1
 8002910:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7ff f8d0 	bl	8001ab8 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800291a:	e00d      	b.n	8002938 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291c:	f7ff f8cc 	bl	8001ab8 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d906      	bls.n	8002938 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e1ca      	b.n	8002cc4 <HAL_RCC_OscConfig+0x610>
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
 8002934:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002938:	4b8c      	ldr	r3, [pc, #560]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 800293a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1ea      	bne.n	800291c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 80a6 	beq.w	8002aa0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002954:	2300      	movs	r3, #0
 8002956:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002958:	4b84      	ldr	r3, [pc, #528]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_RCC_OscConfig+0x2b4>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <HAL_RCC_OscConfig+0x2b6>
 8002968:	2300      	movs	r3, #0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00d      	beq.n	800298a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 8002970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002972:	4a7e      	ldr	r2, [pc, #504]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 8002974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002978:	6593      	str	r3, [r2, #88]	@ 0x58
 800297a:	4b7c      	ldr	r3, [pc, #496]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 800297c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002986:	2301      	movs	r3, #1
 8002988:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800298a:	4b79      	ldr	r3, [pc, #484]	@ (8002b70 <HAL_RCC_OscConfig+0x4bc>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002992:	2b00      	cmp	r3, #0
 8002994:	d118      	bne.n	80029c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002996:	4b76      	ldr	r3, [pc, #472]	@ (8002b70 <HAL_RCC_OscConfig+0x4bc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a75      	ldr	r2, [pc, #468]	@ (8002b70 <HAL_RCC_OscConfig+0x4bc>)
 800299c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a2:	f7ff f889 	bl	8001ab8 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029aa:	f7ff f885 	bl	8001ab8 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e183      	b.n	8002cc4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029bc:	4b6c      	ldr	r3, [pc, #432]	@ (8002b70 <HAL_RCC_OscConfig+0x4bc>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d108      	bne.n	80029e2 <HAL_RCC_OscConfig+0x32e>
 80029d0:	4b66      	ldr	r3, [pc, #408]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 80029d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d6:	4a65      	ldr	r2, [pc, #404]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029e0:	e024      	b.n	8002a2c <HAL_RCC_OscConfig+0x378>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b05      	cmp	r3, #5
 80029e8:	d110      	bne.n	8002a0c <HAL_RCC_OscConfig+0x358>
 80029ea:	4b60      	ldr	r3, [pc, #384]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f0:	4a5e      	ldr	r2, [pc, #376]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 80029f2:	f043 0304 	orr.w	r3, r3, #4
 80029f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029fa:	4b5c      	ldr	r3, [pc, #368]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 80029fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a00:	4a5a      	ldr	r2, [pc, #360]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a0a:	e00f      	b.n	8002a2c <HAL_RCC_OscConfig+0x378>
 8002a0c:	4b57      	ldr	r3, [pc, #348]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a12:	4a56      	ldr	r2, [pc, #344]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a1c:	4b53      	ldr	r3, [pc, #332]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a22:	4a52      	ldr	r2, [pc, #328]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 8002a24:	f023 0304 	bic.w	r3, r3, #4
 8002a28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d016      	beq.n	8002a62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a34:	f7ff f840 	bl	8001ab8 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3c:	f7ff f83c 	bl	8001ab8 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e138      	b.n	8002cc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a52:	4b46      	ldr	r3, [pc, #280]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 8002a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0ed      	beq.n	8002a3c <HAL_RCC_OscConfig+0x388>
 8002a60:	e015      	b.n	8002a8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a62:	f7ff f829 	bl	8001ab8 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6a:	f7ff f825 	bl	8001ab8 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e121      	b.n	8002cc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a80:	4b3a      	ldr	r3, [pc, #232]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1ed      	bne.n	8002a6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a8e:	7ffb      	ldrb	r3, [r7, #31]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d105      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a94:	4b35      	ldr	r3, [pc, #212]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a98:	4a34      	ldr	r2, [pc, #208]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 8002a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a9e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d03c      	beq.n	8002b26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01c      	beq.n	8002aee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 8002ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002aba:	4a2c      	ldr	r2, [pc, #176]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac4:	f7fe fff8 	bl	8001ab8 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002acc:	f7fe fff4 	bl	8001ab8 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e0f2      	b.n	8002cc4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ade:	4b23      	ldr	r3, [pc, #140]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 8002ae0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0ef      	beq.n	8002acc <HAL_RCC_OscConfig+0x418>
 8002aec:	e01b      	b.n	8002b26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002aee:	4b1f      	ldr	r3, [pc, #124]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 8002af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002af4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 8002af6:	f023 0301 	bic.w	r3, r3, #1
 8002afa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afe:	f7fe ffdb 	bl	8001ab8 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b06:	f7fe ffd7 	bl	8001ab8 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e0d5      	b.n	8002cc4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b18:	4b14      	ldr	r3, [pc, #80]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 8002b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1ef      	bne.n	8002b06 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 80c9 	beq.w	8002cc2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b30:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b0c      	cmp	r3, #12
 8002b3a:	f000 8083 	beq.w	8002c44 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d15e      	bne.n	8002c04 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b46:	4b09      	ldr	r3, [pc, #36]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a08      	ldr	r2, [pc, #32]	@ (8002b6c <HAL_RCC_OscConfig+0x4b8>)
 8002b4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7fe ffb1 	bl	8001ab8 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b58:	e00c      	b.n	8002b74 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5a:	f7fe ffad 	bl	8001ab8 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d905      	bls.n	8002b74 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e0ab      	b.n	8002cc4 <HAL_RCC_OscConfig+0x610>
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b74:	4b55      	ldr	r3, [pc, #340]	@ (8002ccc <HAL_RCC_OscConfig+0x618>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1ec      	bne.n	8002b5a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b80:	4b52      	ldr	r3, [pc, #328]	@ (8002ccc <HAL_RCC_OscConfig+0x618>)
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	4b52      	ldr	r3, [pc, #328]	@ (8002cd0 <HAL_RCC_OscConfig+0x61c>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6a11      	ldr	r1, [r2, #32]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b90:	3a01      	subs	r2, #1
 8002b92:	0112      	lsls	r2, r2, #4
 8002b94:	4311      	orrs	r1, r2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002b9a:	0212      	lsls	r2, r2, #8
 8002b9c:	4311      	orrs	r1, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002ba2:	0852      	lsrs	r2, r2, #1
 8002ba4:	3a01      	subs	r2, #1
 8002ba6:	0552      	lsls	r2, r2, #21
 8002ba8:	4311      	orrs	r1, r2
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002bae:	0852      	lsrs	r2, r2, #1
 8002bb0:	3a01      	subs	r2, #1
 8002bb2:	0652      	lsls	r2, r2, #25
 8002bb4:	4311      	orrs	r1, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002bba:	06d2      	lsls	r2, r2, #27
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	4943      	ldr	r1, [pc, #268]	@ (8002ccc <HAL_RCC_OscConfig+0x618>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc4:	4b41      	ldr	r3, [pc, #260]	@ (8002ccc <HAL_RCC_OscConfig+0x618>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a40      	ldr	r2, [pc, #256]	@ (8002ccc <HAL_RCC_OscConfig+0x618>)
 8002bca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bd0:	4b3e      	ldr	r3, [pc, #248]	@ (8002ccc <HAL_RCC_OscConfig+0x618>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4a3d      	ldr	r2, [pc, #244]	@ (8002ccc <HAL_RCC_OscConfig+0x618>)
 8002bd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fe ff6c 	bl	8001ab8 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be4:	f7fe ff68 	bl	8001ab8 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e066      	b.n	8002cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf6:	4b35      	ldr	r3, [pc, #212]	@ (8002ccc <HAL_RCC_OscConfig+0x618>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x530>
 8002c02:	e05e      	b.n	8002cc2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c04:	4b31      	ldr	r3, [pc, #196]	@ (8002ccc <HAL_RCC_OscConfig+0x618>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a30      	ldr	r2, [pc, #192]	@ (8002ccc <HAL_RCC_OscConfig+0x618>)
 8002c0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c10:	f7fe ff52 	bl	8001ab8 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c18:	f7fe ff4e 	bl	8001ab8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e04c      	b.n	8002cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c2a:	4b28      	ldr	r3, [pc, #160]	@ (8002ccc <HAL_RCC_OscConfig+0x618>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002c36:	4b25      	ldr	r3, [pc, #148]	@ (8002ccc <HAL_RCC_OscConfig+0x618>)
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	4924      	ldr	r1, [pc, #144]	@ (8002ccc <HAL_RCC_OscConfig+0x618>)
 8002c3c:	4b25      	ldr	r3, [pc, #148]	@ (8002cd4 <HAL_RCC_OscConfig+0x620>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	60cb      	str	r3, [r1, #12]
 8002c42:	e03e      	b.n	8002cc2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e039      	b.n	8002cc4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002c50:	4b1e      	ldr	r3, [pc, #120]	@ (8002ccc <HAL_RCC_OscConfig+0x618>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f003 0203 	and.w	r2, r3, #3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d12c      	bne.n	8002cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d123      	bne.n	8002cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c80:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d11b      	bne.n	8002cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c90:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d113      	bne.n	8002cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca0:	085b      	lsrs	r3, r3, #1
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d109      	bne.n	8002cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb4:	085b      	lsrs	r3, r3, #1
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d001      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3720      	adds	r7, #32
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	019f800c 	.word	0x019f800c
 8002cd4:	feeefffc 	.word	0xfeeefffc

08002cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e11e      	b.n	8002f2e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b91      	ldr	r3, [pc, #580]	@ (8002f38 <HAL_RCC_ClockConfig+0x260>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d910      	bls.n	8002d20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b8e      	ldr	r3, [pc, #568]	@ (8002f38 <HAL_RCC_ClockConfig+0x260>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 020f 	bic.w	r2, r3, #15
 8002d06:	498c      	ldr	r1, [pc, #560]	@ (8002f38 <HAL_RCC_ClockConfig+0x260>)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b8a      	ldr	r3, [pc, #552]	@ (8002f38 <HAL_RCC_ClockConfig+0x260>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e106      	b.n	8002f2e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d073      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d129      	bne.n	8002d88 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d34:	4b81      	ldr	r3, [pc, #516]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0f4      	b.n	8002f2e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002d44:	f000 f966 	bl	8003014 <RCC_GetSysClockFreqFromPLLSource>
 8002d48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4a7c      	ldr	r2, [pc, #496]	@ (8002f40 <HAL_RCC_ClockConfig+0x268>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d93f      	bls.n	8002dd2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d52:	4b7a      	ldr	r3, [pc, #488]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d033      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d12f      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d72:	4b72      	ldr	r3, [pc, #456]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d7a:	4a70      	ldr	r2, [pc, #448]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002d7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d80:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d82:	2380      	movs	r3, #128	@ 0x80
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	e024      	b.n	8002dd2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d107      	bne.n	8002da0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d90:	4b6a      	ldr	r3, [pc, #424]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d109      	bne.n	8002db0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0c6      	b.n	8002f2e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002da0:	4b66      	ldr	r3, [pc, #408]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0be      	b.n	8002f2e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002db0:	f000 f8ce 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8002db4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4a61      	ldr	r2, [pc, #388]	@ (8002f40 <HAL_RCC_ClockConfig+0x268>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d909      	bls.n	8002dd2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002dbe:	4b5f      	ldr	r3, [pc, #380]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dc6:	4a5d      	ldr	r2, [pc, #372]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dcc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002dce:	2380      	movs	r3, #128	@ 0x80
 8002dd0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dd2:	4b5a      	ldr	r3, [pc, #360]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f023 0203 	bic.w	r2, r3, #3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4957      	ldr	r1, [pc, #348]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de4:	f7fe fe68 	bl	8001ab8 <HAL_GetTick>
 8002de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dec:	f7fe fe64 	bl	8001ab8 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e095      	b.n	8002f2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	4b4e      	ldr	r3, [pc, #312]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 020c 	and.w	r2, r3, #12
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d1eb      	bne.n	8002dec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d023      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e2c:	4b43      	ldr	r3, [pc, #268]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	4a42      	ldr	r2, [pc, #264]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002e32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e36:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d007      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002e44:	4b3d      	ldr	r3, [pc, #244]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e4c:	4a3b      	ldr	r2, [pc, #236]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002e4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e54:	4b39      	ldr	r3, [pc, #228]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	4936      	ldr	r1, [pc, #216]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2b80      	cmp	r3, #128	@ 0x80
 8002e6c:	d105      	bne.n	8002e7a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e6e:	4b33      	ldr	r3, [pc, #204]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	4a32      	ldr	r2, [pc, #200]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002e74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e78:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8002f38 <HAL_RCC_ClockConfig+0x260>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d21d      	bcs.n	8002ec4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e88:	4b2b      	ldr	r3, [pc, #172]	@ (8002f38 <HAL_RCC_ClockConfig+0x260>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 020f 	bic.w	r2, r3, #15
 8002e90:	4929      	ldr	r1, [pc, #164]	@ (8002f38 <HAL_RCC_ClockConfig+0x260>)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e98:	f7fe fe0e 	bl	8001ab8 <HAL_GetTick>
 8002e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea0:	f7fe fe0a 	bl	8001ab8 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e03b      	b.n	8002f2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb6:	4b20      	ldr	r3, [pc, #128]	@ (8002f38 <HAL_RCC_ClockConfig+0x260>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d1ed      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4917      	ldr	r1, [pc, #92]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eee:	4b13      	ldr	r3, [pc, #76]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	490f      	ldr	r1, [pc, #60]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f02:	f000 f825 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8002f06:	4602      	mov	r2, r0
 8002f08:	4b0c      	ldr	r3, [pc, #48]	@ (8002f3c <HAL_RCC_ClockConfig+0x264>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	490c      	ldr	r1, [pc, #48]	@ (8002f44 <HAL_RCC_ClockConfig+0x26c>)
 8002f14:	5ccb      	ldrb	r3, [r1, r3]
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f48 <HAL_RCC_ClockConfig+0x270>)
 8002f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f22:	4b0a      	ldr	r3, [pc, #40]	@ (8002f4c <HAL_RCC_ClockConfig+0x274>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fe fd7a 	bl	8001a20 <HAL_InitTick>
 8002f2c:	4603      	mov	r3, r0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40022000 	.word	0x40022000
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	04c4b400 	.word	0x04c4b400
 8002f44:	0800cf58 	.word	0x0800cf58
 8002f48:	20000014 	.word	0x20000014
 8002f4c:	20000018 	.word	0x20000018

08002f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f56:	4b2c      	ldr	r3, [pc, #176]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d102      	bne.n	8002f68 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f62:	4b2a      	ldr	r3, [pc, #168]	@ (800300c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	e047      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f68:	4b27      	ldr	r3, [pc, #156]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 030c 	and.w	r3, r3, #12
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d102      	bne.n	8002f7a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f74:	4b26      	ldr	r3, [pc, #152]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	e03e      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f7a:	4b23      	ldr	r3, [pc, #140]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	2b0c      	cmp	r3, #12
 8002f84:	d136      	bne.n	8002ff4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f86:	4b20      	ldr	r3, [pc, #128]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f90:	4b1d      	ldr	r3, [pc, #116]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d10c      	bne.n	8002fbe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fa4:	4a1a      	ldr	r2, [pc, #104]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fac:	4a16      	ldr	r2, [pc, #88]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fae:	68d2      	ldr	r2, [r2, #12]
 8002fb0:	0a12      	lsrs	r2, r2, #8
 8002fb2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fb6:	fb02 f303 	mul.w	r3, r2, r3
 8002fba:	617b      	str	r3, [r7, #20]
      break;
 8002fbc:	e00c      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fbe:	4a13      	ldr	r2, [pc, #76]	@ (800300c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc6:	4a10      	ldr	r2, [pc, #64]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fc8:	68d2      	ldr	r2, [r2, #12]
 8002fca:	0a12      	lsrs	r2, r2, #8
 8002fcc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fd0:	fb02 f303 	mul.w	r3, r2, r3
 8002fd4:	617b      	str	r3, [r7, #20]
      break;
 8002fd6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	0e5b      	lsrs	r3, r3, #25
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	e001      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ff8:	693b      	ldr	r3, [r7, #16]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	371c      	adds	r7, #28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000
 800300c:	00f42400 	.word	0x00f42400
 8003010:	02dc6c00 	.word	0x02dc6c00

08003014 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800301a:	4b1e      	ldr	r3, [pc, #120]	@ (8003094 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003024:	4b1b      	ldr	r3, [pc, #108]	@ (8003094 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	3301      	adds	r3, #1
 8003030:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b03      	cmp	r3, #3
 8003036:	d10c      	bne.n	8003052 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003038:	4a17      	ldr	r2, [pc, #92]	@ (8003098 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003040:	4a14      	ldr	r2, [pc, #80]	@ (8003094 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003042:	68d2      	ldr	r2, [r2, #12]
 8003044:	0a12      	lsrs	r2, r2, #8
 8003046:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	617b      	str	r3, [r7, #20]
    break;
 8003050:	e00c      	b.n	800306c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003052:	4a12      	ldr	r2, [pc, #72]	@ (800309c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	fbb2 f3f3 	udiv	r3, r2, r3
 800305a:	4a0e      	ldr	r2, [pc, #56]	@ (8003094 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800305c:	68d2      	ldr	r2, [r2, #12]
 800305e:	0a12      	lsrs	r2, r2, #8
 8003060:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003064:	fb02 f303 	mul.w	r3, r2, r3
 8003068:	617b      	str	r3, [r7, #20]
    break;
 800306a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800306c:	4b09      	ldr	r3, [pc, #36]	@ (8003094 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	0e5b      	lsrs	r3, r3, #25
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	3301      	adds	r3, #1
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	fbb2 f3f3 	udiv	r3, r2, r3
 8003084:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003086:	687b      	ldr	r3, [r7, #4]
}
 8003088:	4618      	mov	r0, r3
 800308a:	371c      	adds	r7, #28
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	40021000 	.word	0x40021000
 8003098:	02dc6c00 	.word	0x02dc6c00
 800309c:	00f42400 	.word	0x00f42400

080030a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e09d      	b.n	80031ee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d108      	bne.n	80030cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030c2:	d009      	beq.n	80030d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]
 80030ca:	e005      	b.n	80030d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fe fb96 	bl	8001824 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800310e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003118:	d902      	bls.n	8003120 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	e002      	b.n	8003126 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003124:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800312e:	d007      	beq.n	8003140 <HAL_SPI_Init+0xa0>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003138:	d002      	beq.n	8003140 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003182:	ea42 0103 	orr.w	r1, r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	0c1b      	lsrs	r3, r3, #16
 800319c:	f003 0204 	and.w	r2, r3, #4
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	431a      	orrs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80031bc:	ea42 0103 	orr.w	r1, r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69da      	ldr	r2, [r3, #28]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b088      	sub	sp, #32
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	603b      	str	r3, [r7, #0]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_SPI_Transmit+0x22>
 8003214:	2302      	movs	r3, #2
 8003216:	e15f      	b.n	80034d8 <HAL_SPI_Transmit+0x2e2>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003220:	f7fe fc4a 	bl	8001ab8 <HAL_GetTick>
 8003224:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003226:	88fb      	ldrh	r3, [r7, #6]
 8003228:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d002      	beq.n	800323c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003236:	2302      	movs	r3, #2
 8003238:	77fb      	strb	r3, [r7, #31]
    goto error;
 800323a:	e148      	b.n	80034ce <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_SPI_Transmit+0x52>
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d102      	bne.n	800324e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800324c:	e13f      	b.n	80034ce <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2203      	movs	r2, #3
 8003252:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	88fa      	ldrh	r2, [r7, #6]
 8003266:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	88fa      	ldrh	r2, [r7, #6]
 800326c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003298:	d10f      	bne.n	80032ba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c4:	2b40      	cmp	r3, #64	@ 0x40
 80032c6:	d007      	beq.n	80032d8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032e0:	d94f      	bls.n	8003382 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_SPI_Transmit+0xfa>
 80032ea:	8afb      	ldrh	r3, [r7, #22]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d142      	bne.n	8003376 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f4:	881a      	ldrh	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003300:	1c9a      	adds	r2, r3, #2
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003314:	e02f      	b.n	8003376 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b02      	cmp	r3, #2
 8003322:	d112      	bne.n	800334a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003328:	881a      	ldrh	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003334:	1c9a      	adds	r2, r3, #2
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800333e:	b29b      	uxth	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003348:	e015      	b.n	8003376 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800334a:	f7fe fbb5 	bl	8001ab8 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d803      	bhi.n	8003362 <HAL_SPI_Transmit+0x16c>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003360:	d102      	bne.n	8003368 <HAL_SPI_Transmit+0x172>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d106      	bne.n	8003376 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003374:	e0ab      	b.n	80034ce <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1ca      	bne.n	8003316 <HAL_SPI_Transmit+0x120>
 8003380:	e080      	b.n	8003484 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_SPI_Transmit+0x19a>
 800338a:	8afb      	ldrh	r3, [r7, #22]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d174      	bne.n	800347a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d912      	bls.n	80033c0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339e:	881a      	ldrh	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033aa:	1c9a      	adds	r2, r3, #2
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b02      	subs	r3, #2
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033be:	e05c      	b.n	800347a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	330c      	adds	r3, #12
 80033ca:	7812      	ldrb	r2, [r2, #0]
 80033cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80033e6:	e048      	b.n	800347a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d12b      	bne.n	800344e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d912      	bls.n	8003426 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003404:	881a      	ldrh	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003410:	1c9a      	adds	r2, r3, #2
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800341a:	b29b      	uxth	r3, r3
 800341c:	3b02      	subs	r3, #2
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003424:	e029      	b.n	800347a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	330c      	adds	r3, #12
 8003430:	7812      	ldrb	r2, [r2, #0]
 8003432:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800344c:	e015      	b.n	800347a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800344e:	f7fe fb33 	bl	8001ab8 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d803      	bhi.n	8003466 <HAL_SPI_Transmit+0x270>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003464:	d102      	bne.n	800346c <HAL_SPI_Transmit+0x276>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003478:	e029      	b.n	80034ce <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1b1      	bne.n	80033e8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	6839      	ldr	r1, [r7, #0]
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 fad7 	bl	8003a3c <SPI_EndRxTxTransaction>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10a      	bne.n	80034b8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e003      	b.n	80034ce <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80034d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	4613      	mov	r3, r2
 80034ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_SPI_Transmit_DMA+0x20>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e0d4      	b.n	80036aa <HAL_SPI_Transmit_DMA+0x1ca>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b01      	cmp	r3, #1
 8003512:	d002      	beq.n	800351a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003514:	2302      	movs	r3, #2
 8003516:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003518:	e0c2      	b.n	80036a0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <HAL_SPI_Transmit_DMA+0x46>
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d102      	bne.n	800352c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
    goto error;
 800352a:	e0b9      	b.n	80036a0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2203      	movs	r2, #3
 8003530:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	88fa      	ldrh	r2, [r7, #6]
 8003544:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	88fa      	ldrh	r2, [r7, #6]
 800354a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003576:	d10f      	bne.n	8003598 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003586:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003596:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800359c:	4a45      	ldr	r2, [pc, #276]	@ (80036b4 <HAL_SPI_Transmit_DMA+0x1d4>)
 800359e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a4:	4a44      	ldr	r2, [pc, #272]	@ (80036b8 <HAL_SPI_Transmit_DMA+0x1d8>)
 80035a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ac:	4a43      	ldr	r2, [pc, #268]	@ (80036bc <HAL_SPI_Transmit_DMA+0x1dc>)
 80035ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b4:	2200      	movs	r2, #0
 80035b6:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035c6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035d0:	d82d      	bhi.n	800362e <HAL_SPI_Transmit_DMA+0x14e>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035dc:	d127      	bne.n	800362e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10f      	bne.n	800360c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035fa:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003600:	b29b      	uxth	r3, r3
 8003602:	085b      	lsrs	r3, r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800360a:	e010      	b.n	800362e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800361a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003620:	b29b      	uxth	r3, r3
 8003622:	085b      	lsrs	r3, r3, #1
 8003624:	b29b      	uxth	r3, r3
 8003626:	3301      	adds	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003636:	4619      	mov	r1, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	330c      	adds	r3, #12
 800363e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003644:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003646:	f7fe fc1d 	bl	8001e84 <HAL_DMA_Start_IT>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003654:	f043 0210 	orr.w	r2, r3, #16
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003660:	e01e      	b.n	80036a0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366c:	2b40      	cmp	r3, #64	@ 0x40
 800366e:	d007      	beq.n	8003680 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800367e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0220 	orr.w	r2, r2, #32
 800368e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0202 	orr.w	r2, r2, #2
 800369e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	080037a3 	.word	0x080037a3
 80036b8:	080036fd 	.word	0x080036fd
 80036bc:	080037bf 	.word	0x080037bf

080036c0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003708:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800370a:	f7fe f9d5 	bl	8001ab8 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b20      	cmp	r3, #32
 800371c:	d03b      	beq.n	8003796 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0220 	bic.w	r2, r2, #32
 800372c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0202 	bic.w	r2, r2, #2
 800373c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	2164      	movs	r1, #100	@ 0x64
 8003742:	6978      	ldr	r0, [r7, #20]
 8003744:	f000 f97a 	bl	8003a3c <SPI_EndRxTxTransaction>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d005      	beq.n	800375a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003752:	f043 0220 	orr.w	r2, r3, #32
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10a      	bne.n	8003778 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2200      	movs	r2, #0
 800377c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800378e:	6978      	ldr	r0, [r7, #20]
 8003790:	f7ff ffaa 	bl	80036e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003794:	e002      	b.n	800379c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003796:	6978      	ldr	r0, [r7, #20]
 8003798:	f7ff ff92 	bl	80036c0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b084      	sub	sp, #16
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f7ff ff8f 	bl	80036d4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037b6:	bf00      	nop
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0203 	bic.w	r2, r2, #3
 80037da:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e0:	f043 0210 	orr.w	r2, r3, #16
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f7ff ff79 	bl	80036e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037f6:	bf00      	nop
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	4613      	mov	r3, r2
 800380e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003810:	f7fe f952 	bl	8001ab8 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	4413      	add	r3, r2
 800381e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003820:	f7fe f94a 	bl	8001ab8 <HAL_GetTick>
 8003824:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003826:	4b39      	ldr	r3, [pc, #228]	@ (800390c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	015b      	lsls	r3, r3, #5
 800382c:	0d1b      	lsrs	r3, r3, #20
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	fb02 f303 	mul.w	r3, r2, r3
 8003834:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003836:	e054      	b.n	80038e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383e:	d050      	beq.n	80038e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003840:	f7fe f93a 	bl	8001ab8 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	69fa      	ldr	r2, [r7, #28]
 800384c:	429a      	cmp	r2, r3
 800384e:	d902      	bls.n	8003856 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d13d      	bne.n	80038d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003864:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800386e:	d111      	bne.n	8003894 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003878:	d004      	beq.n	8003884 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003882:	d107      	bne.n	8003894 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003892:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800389c:	d10f      	bne.n	80038be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e017      	b.n	8003902 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	3b01      	subs	r3, #1
 80038e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4013      	ands	r3, r2
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	bf0c      	ite	eq
 80038f2:	2301      	moveq	r3, #1
 80038f4:	2300      	movne	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d19b      	bne.n	8003838 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3720      	adds	r7, #32
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20000014 	.word	0x20000014

08003910 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08a      	sub	sp, #40	@ 0x28
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800391e:	2300      	movs	r3, #0
 8003920:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003922:	f7fe f8c9 	bl	8001ab8 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	4413      	add	r3, r2
 8003930:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003932:	f7fe f8c1 	bl	8001ab8 <HAL_GetTick>
 8003936:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	330c      	adds	r3, #12
 800393e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003940:	4b3d      	ldr	r3, [pc, #244]	@ (8003a38 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	00da      	lsls	r2, r3, #3
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	0d1b      	lsrs	r3, r3, #20
 8003950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003952:	fb02 f303 	mul.w	r3, r2, r3
 8003956:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003958:	e060      	b.n	8003a1c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003960:	d107      	bne.n	8003972 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d104      	bne.n	8003972 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003970:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003978:	d050      	beq.n	8003a1c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800397a:	f7fe f89d 	bl	8001ab8 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003986:	429a      	cmp	r2, r3
 8003988:	d902      	bls.n	8003990 <SPI_WaitFifoStateUntilTimeout+0x80>
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	2b00      	cmp	r3, #0
 800398e:	d13d      	bne.n	8003a0c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800399e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039a8:	d111      	bne.n	80039ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039b2:	d004      	beq.n	80039be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039bc:	d107      	bne.n	80039ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039d6:	d10f      	bne.n	80039f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e010      	b.n	8003a2e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4013      	ands	r3, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d196      	bne.n	800395a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3728      	adds	r7, #40	@ 0x28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000014 	.word	0x20000014

08003a3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f7ff ff5b 	bl	8003910 <SPI_WaitFifoStateUntilTimeout>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d007      	beq.n	8003a70 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a64:	f043 0220 	orr.w	r2, r3, #32
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e027      	b.n	8003ac0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2200      	movs	r2, #0
 8003a78:	2180      	movs	r1, #128	@ 0x80
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f7ff fec0 	bl	8003800 <SPI_WaitFlagStateUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d007      	beq.n	8003a96 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a8a:	f043 0220 	orr.w	r2, r3, #32
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e014      	b.n	8003ac0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f7ff ff34 	bl	8003910 <SPI_WaitFifoStateUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab2:	f043 0220 	orr.w	r2, r3, #32
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e000      	b.n	8003ac0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <memset>:
 8003ac8:	4402      	add	r2, r0
 8003aca:	4603      	mov	r3, r0
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d100      	bne.n	8003ad2 <memset+0xa>
 8003ad0:	4770      	bx	lr
 8003ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ad6:	e7f9      	b.n	8003acc <memset+0x4>

08003ad8 <__libc_init_array>:
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	4d0d      	ldr	r5, [pc, #52]	@ (8003b10 <__libc_init_array+0x38>)
 8003adc:	4c0d      	ldr	r4, [pc, #52]	@ (8003b14 <__libc_init_array+0x3c>)
 8003ade:	1b64      	subs	r4, r4, r5
 8003ae0:	10a4      	asrs	r4, r4, #2
 8003ae2:	2600      	movs	r6, #0
 8003ae4:	42a6      	cmp	r6, r4
 8003ae6:	d109      	bne.n	8003afc <__libc_init_array+0x24>
 8003ae8:	4d0b      	ldr	r5, [pc, #44]	@ (8003b18 <__libc_init_array+0x40>)
 8003aea:	4c0c      	ldr	r4, [pc, #48]	@ (8003b1c <__libc_init_array+0x44>)
 8003aec:	f000 f818 	bl	8003b20 <_init>
 8003af0:	1b64      	subs	r4, r4, r5
 8003af2:	10a4      	asrs	r4, r4, #2
 8003af4:	2600      	movs	r6, #0
 8003af6:	42a6      	cmp	r6, r4
 8003af8:	d105      	bne.n	8003b06 <__libc_init_array+0x2e>
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
 8003afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b00:	4798      	blx	r3
 8003b02:	3601      	adds	r6, #1
 8003b04:	e7ee      	b.n	8003ae4 <__libc_init_array+0xc>
 8003b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b0a:	4798      	blx	r3
 8003b0c:	3601      	adds	r6, #1
 8003b0e:	e7f2      	b.n	8003af6 <__libc_init_array+0x1e>
 8003b10:	0800cf68 	.word	0x0800cf68
 8003b14:	0800cf68 	.word	0x0800cf68
 8003b18:	0800cf68 	.word	0x0800cf68
 8003b1c:	0800cf6c 	.word	0x0800cf6c

08003b20 <_init>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	bf00      	nop
 8003b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b26:	bc08      	pop	{r3}
 8003b28:	469e      	mov	lr, r3
 8003b2a:	4770      	bx	lr

08003b2c <_fini>:
 8003b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2e:	bf00      	nop
 8003b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b32:	bc08      	pop	{r3}
 8003b34:	469e      	mov	lr, r3
 8003b36:	4770      	bx	lr
