
108_Show_Timervalues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3bc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e8  0800c5a0  0800c5a0  0000d5a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce88  0800ce88  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce88  0800ce88  0000de88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce90  0800ce90  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce90  0800ce90  0000de90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce94  0800ce94  0000de94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800ce98  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  200001d4  0800d06c  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ac  0800d06c  0000e7ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001983f  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000306e  00000000  00000000  00027a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  0002aab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001119  00000000  00000000  0002c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c87  00000000  00000000  0002d1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194ed  00000000  00000000  00056e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001152a9  00000000  00000000  0007033d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001855e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071f8  00000000  00000000  0018562c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0018c824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c584 	.word	0x0800c584

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800c584 	.word	0x0800c584

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ef0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ef4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d013      	beq.n	8000f28 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f00:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f04:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000f08:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d00b      	beq.n	8000f28 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f10:	e000      	b.n	8000f14 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f12:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f14:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0f9      	beq.n	8000f12 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f1e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f28:	687b      	ldr	r3, [r7, #4]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Interrupts *****************************************************************/
// GPIO Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	// Interrupt Routine
	switch (GPIO_Pin) {
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f48:	d007      	beq.n	8000f5a <HAL_GPIO_EXTI_Callback+0x22>
 8000f4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f4e:	dc40      	bgt.n	8000fd2 <HAL_GPIO_EXTI_Callback+0x9a>
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d016      	beq.n	8000f82 <HAL_GPIO_EXTI_Callback+0x4a>
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d028      	beq.n	8000faa <HAL_GPIO_EXTI_Callback+0x72>
		sprintf(msg_console, "Taster2 gedrückt! \r\n");
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console),
		HAL_MAX_DELAY);
		break;
	default:
		break;
 8000f58:	e03b      	b.n	8000fd2 <HAL_GPIO_EXTI_Callback+0x9a>
		switch (handler_state) {
 8000f5a:	4b20      	ldr	r3, [pc, #128]	@ (8000fdc <HAL_GPIO_EXTI_Callback+0xa4>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d002      	beq.n	8000f68 <HAL_GPIO_EXTI_Callback+0x30>
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d004      	beq.n	8000f70 <HAL_GPIO_EXTI_Callback+0x38>
 8000f66:	e007      	b.n	8000f78 <HAL_GPIO_EXTI_Callback+0x40>
			set_handler_state(SINUS_MOD);
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f001 f9d3 	bl	8002314 <set_handler_state>
			break;
 8000f6e:	e007      	b.n	8000f80 <HAL_GPIO_EXTI_Callback+0x48>
			set_handler_state(IDLE);
 8000f70:	2000      	movs	r0, #0
 8000f72:	f001 f9cf 	bl	8002314 <set_handler_state>
			break;
 8000f76:	e003      	b.n	8000f80 <HAL_GPIO_EXTI_Callback+0x48>
			set_handler_state(IDLE);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f001 f9cb 	bl	8002314 <set_handler_state>
			break;
 8000f7e:	bf00      	nop
		break;
 8000f80:	e028      	b.n	8000fd4 <HAL_GPIO_EXTI_Callback+0x9c>
		sprintf(msg_display, "Taster1 gedrueckt!");
 8000f82:	4917      	ldr	r1, [pc, #92]	@ (8000fe0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000f84:	4817      	ldr	r0, [pc, #92]	@ (8000fe4 <HAL_GPIO_EXTI_Callback+0xac>)
 8000f86:	f008 fd4b 	bl	8009a20 <siprintf>
		sprintf(msg_console, "Taster1 gedrückt! \r\n");
 8000f8a:	4917      	ldr	r1, [pc, #92]	@ (8000fe8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000f8c:	4817      	ldr	r0, [pc, #92]	@ (8000fec <HAL_GPIO_EXTI_Callback+0xb4>)
 8000f8e:	f008 fd47 	bl	8009a20 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console),
 8000f92:	4816      	ldr	r0, [pc, #88]	@ (8000fec <HAL_GPIO_EXTI_Callback+0xb4>)
 8000f94:	f7ff f994 	bl	80002c0 <strlen>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa0:	4912      	ldr	r1, [pc, #72]	@ (8000fec <HAL_GPIO_EXTI_Callback+0xb4>)
 8000fa2:	4813      	ldr	r0, [pc, #76]	@ (8000ff0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000fa4:	f007 f847 	bl	8008036 <HAL_UART_Transmit>
		break;
 8000fa8:	e014      	b.n	8000fd4 <HAL_GPIO_EXTI_Callback+0x9c>
		sprintf(msg_display, "Taster2 gedrueckt!");
 8000faa:	4912      	ldr	r1, [pc, #72]	@ (8000ff4 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000fac:	480d      	ldr	r0, [pc, #52]	@ (8000fe4 <HAL_GPIO_EXTI_Callback+0xac>)
 8000fae:	f008 fd37 	bl	8009a20 <siprintf>
		sprintf(msg_console, "Taster2 gedrückt! \r\n");
 8000fb2:	4911      	ldr	r1, [pc, #68]	@ (8000ff8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000fb4:	480d      	ldr	r0, [pc, #52]	@ (8000fec <HAL_GPIO_EXTI_Callback+0xb4>)
 8000fb6:	f008 fd33 	bl	8009a20 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console),
 8000fba:	480c      	ldr	r0, [pc, #48]	@ (8000fec <HAL_GPIO_EXTI_Callback+0xb4>)
 8000fbc:	f7ff f980 	bl	80002c0 <strlen>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc8:	4908      	ldr	r1, [pc, #32]	@ (8000fec <HAL_GPIO_EXTI_Callback+0xb4>)
 8000fca:	4809      	ldr	r0, [pc, #36]	@ (8000ff0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000fcc:	f007 f833 	bl	8008036 <HAL_UART_Transmit>
		break;
 8000fd0:	e000      	b.n	8000fd4 <HAL_GPIO_EXTI_Callback+0x9c>
		break;
 8000fd2:	bf00      	nop
	}
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000640 	.word	0x20000640
 8000fe0:	0800c5a0 	.word	0x0800c5a0
 8000fe4:	20000620 	.word	0x20000620
 8000fe8:	0800c5b4 	.word	0x0800c5b4
 8000fec:	200005d0 	.word	0x200005d0
 8000ff0:	2000052c 	.word	0x2000052c
 8000ff4:	0800c5cc 	.word	0x0800c5cc
 8000ff8:	0800c5e0 	.word	0x0800c5e0

08000ffc <HAL_TIM_PeriodElapsedCallback>:

// Timer timeout Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001000:	b08a      	sub	sp, #40	@ 0x28
 8001002:	af06      	add	r7, sp, #24
 8001004:	6078      	str	r0, [r7, #4]
	// Überprüfe welcher Timer diese callback Funktion aufruft
	// time_val um 100ms inkrementieren
	if (htim == &htim16) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4e      	ldr	r2, [pc, #312]	@ (8001144 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d10c      	bne.n	8001028 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 800100e:	2108      	movs	r1, #8
 8001010:	484d      	ldr	r0, [pc, #308]	@ (8001148 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001012:	f003 fef7 	bl	8004e04 <HAL_GPIO_TogglePin>
		if (handler_state == SINUS_MOD) {
 8001016:	4b4d      	ldr	r3, [pc, #308]	@ (800114c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b01      	cmp	r3, #1
 800101c:	f040 808d 	bne.w	800113a <HAL_TIM_PeriodElapsedCallback+0x13e>
			inc_handler_currentTime(100);
 8001020:	2064      	movs	r0, #100	@ 0x64
 8001022:	f001 f995 	bl	8002350 <inc_handler_currentTime>
		default:
			set_handler_state(IDLE);
			break;
		}
	}
}
 8001026:	e088      	b.n	800113a <HAL_TIM_PeriodElapsedCallback+0x13e>
	else if (htim == &htim17) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a49      	ldr	r2, [pc, #292]	@ (8001150 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800102c:	4293      	cmp	r3, r2
 800102e:	f040 8084 	bne.w	800113a <HAL_TIM_PeriodElapsedCallback+0x13e>
		switch (handler_state) {
 8001032:	4b46      	ldr	r3, [pc, #280]	@ (800114c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d07e      	beq.n	8001138 <HAL_TIM_PeriodElapsedCallback+0x13c>
 800103a:	2b01      	cmp	r3, #1
 800103c:	d178      	bne.n	8001130 <HAL_TIM_PeriodElapsedCallback+0x134>
			adc_values *ptr = get_adc_values();
 800103e:	f001 f99b 	bl	8002378 <get_adc_values>
 8001042:	60f8      	str	r0, [r7, #12]
			sprintf(msg_display, "Poti1: %2.2fV", ptr->poti1_Vf);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff faa5 	bl	8000598 <__aeabi_f2d>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4940      	ldr	r1, [pc, #256]	@ (8001154 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001054:	4840      	ldr	r0, [pc, #256]	@ (8001158 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001056:	f008 fce3 	bl	8009a20 <siprintf>
			sprintf(msg_display, "Poti2: %2.2fV", ptr->poti2_Vf);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fa9a 	bl	8000598 <__aeabi_f2d>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	493c      	ldr	r1, [pc, #240]	@ (800115c <HAL_TIM_PeriodElapsedCallback+0x160>)
 800106a:	483b      	ldr	r0, [pc, #236]	@ (8001158 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800106c:	f008 fcd8 	bl	8009a20 <siprintf>
			sprintf(msg_display, "BNC1:  %2.2fV", ptr->bnc1_Vf);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fa8f 	bl	8000598 <__aeabi_f2d>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4938      	ldr	r1, [pc, #224]	@ (8001160 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001080:	4835      	ldr	r0, [pc, #212]	@ (8001158 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001082:	f008 fccd 	bl	8009a20 <siprintf>
			sprintf(msg_display, "BNC2:  %2.2fV", ptr->bnc2_Vf);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa84 	bl	8000598 <__aeabi_f2d>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4933      	ldr	r1, [pc, #204]	@ (8001164 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001096:	4830      	ldr	r0, [pc, #192]	@ (8001158 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001098:	f008 fcc2 	bl	8009a20 <siprintf>
			sprintf(msg_display, "f0 =  %4luHz", f0);
 800109c:	2332      	movs	r3, #50	@ 0x32
 800109e:	461a      	mov	r2, r3
 80010a0:	4931      	ldr	r1, [pc, #196]	@ (8001168 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80010a2:	482d      	ldr	r0, [pc, #180]	@ (8001158 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80010a4:	f008 fcbc 	bl	8009a20 <siprintf>
			sprintf(msg_display, "A0 =  %2.2f%%", 100.0 * A0);
 80010a8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa73 	bl	8000598 <__aeabi_f2d>
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	4b2d      	ldr	r3, [pc, #180]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x170>)
 80010b8:	f7ff fac6 	bl	8000648 <__aeabi_dmul>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	492b      	ldr	r1, [pc, #172]	@ (8001170 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80010c2:	4825      	ldr	r0, [pc, #148]	@ (8001158 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80010c4:	f008 fcac 	bl	8009a20 <siprintf>
					ptr->poti1_Vf, ptr->poti2_Vf, ptr->bnc1_Vf, ptr->bnc2_Vf); //, f0, 100.0*A0);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
			sprintf(msg_console,
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fa63 	bl	8000598 <__aeabi_f2d>
 80010d2:	4682      	mov	sl, r0
 80010d4:	468b      	mov	fp, r1
					ptr->poti1_Vf, ptr->poti2_Vf, ptr->bnc1_Vf, ptr->bnc2_Vf); //, f0, 100.0*A0);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	685b      	ldr	r3, [r3, #4]
			sprintf(msg_console,
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fa5c 	bl	8000598 <__aeabi_f2d>
 80010e0:	4604      	mov	r4, r0
 80010e2:	460d      	mov	r5, r1
					ptr->poti1_Vf, ptr->poti2_Vf, ptr->bnc1_Vf, ptr->bnc2_Vf); //, f0, 100.0*A0);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	689b      	ldr	r3, [r3, #8]
			sprintf(msg_console,
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fa55 	bl	8000598 <__aeabi_f2d>
 80010ee:	4680      	mov	r8, r0
 80010f0:	4689      	mov	r9, r1
					ptr->poti1_Vf, ptr->poti2_Vf, ptr->bnc1_Vf, ptr->bnc2_Vf); //, f0, 100.0*A0);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	68db      	ldr	r3, [r3, #12]
			sprintf(msg_console,
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fa4e 	bl	8000598 <__aeabi_f2d>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001104:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001108:	e9cd 4500 	strd	r4, r5, [sp]
 800110c:	4652      	mov	r2, sl
 800110e:	465b      	mov	r3, fp
 8001110:	4918      	ldr	r1, [pc, #96]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001112:	4819      	ldr	r0, [pc, #100]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001114:	f008 fc84 	bl	8009a20 <siprintf>
					strlen(msg_console), HAL_MAX_DELAY);
 8001118:	4817      	ldr	r0, [pc, #92]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800111a:	f7ff f8d1 	bl	80002c0 <strlen>
 800111e:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) msg_console,
 8001120:	b29a      	uxth	r2, r3
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	4914      	ldr	r1, [pc, #80]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001128:	4814      	ldr	r0, [pc, #80]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x180>)
 800112a:	f006 ff84 	bl	8008036 <HAL_UART_Transmit>
			break;
 800112e:	e004      	b.n	800113a <HAL_TIM_PeriodElapsedCallback+0x13e>
			set_handler_state(IDLE);
 8001130:	2000      	movs	r0, #0
 8001132:	f001 f8ef 	bl	8002314 <set_handler_state>
			break;
 8001136:	e000      	b.n	800113a <HAL_TIM_PeriodElapsedCallback+0x13e>
			break;
 8001138:	bf00      	nop
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001144:	200003d4 	.word	0x200003d4
 8001148:	48000800 	.word	0x48000800
 800114c:	20000640 	.word	0x20000640
 8001150:	20000420 	.word	0x20000420
 8001154:	0800c5f8 	.word	0x0800c5f8
 8001158:	20000620 	.word	0x20000620
 800115c:	0800c608 	.word	0x0800c608
 8001160:	0800c618 	.word	0x0800c618
 8001164:	0800c628 	.word	0x0800c628
 8001168:	0800c638 	.word	0x0800c638
 800116c:	40590000 	.word	0x40590000
 8001170:	0800c648 	.word	0x0800c648
 8001174:	0800c658 	.word	0x0800c658
 8001178:	200005d0 	.word	0x200005d0
 800117c:	2000052c 	.word	0x2000052c

08001180 <_write>:
//	    bnc2_V = (3.3*(float)bnc2_raw)/65535;
//	}
//}
/* SWV *******************************************************************/
int _write(int file, char *ptr, int len)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++)
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	e009      	b.n	80011a6 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	60ba      	str	r2, [r7, #8]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fea4 	bl	8000ee8 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dbf1      	blt.n	8001192 <_write+0x12>
	}
	return len;
 80011ae:	687b      	ldr	r3, [r7, #4]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011bc:	f001 fa6b 	bl	8002696 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c0:	f000 f836 	bl	8001230 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  // SWV
  ITM_PORT32(31) = 1; // Change Port
 80011c4:	4b15      	ldr	r3, [pc, #84]	@ (800121c <main+0x64>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ca:	f000 fb37 	bl	800183c <MX_GPIO_Init>
  MX_DMA_Init();
 80011ce:	f000 fae7 	bl	80017a0 <MX_DMA_Init>
  MX_TIM16_Init();
 80011d2:	f000 fa49 	bl	8001668 <MX_TIM16_Init>
  MX_ADC1_Init();
 80011d6:	f000 f877 	bl	80012c8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80011da:	f000 fa95 	bl	8001708 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 80011de:	f000 fa6b 	bl	80016b8 <MX_TIM17_Init>
  MX_ADC2_Init();
 80011e2:	f000 f909 	bl	80013f8 <MX_ADC2_Init>
  MX_TIM1_Init();
 80011e6:	f000 f96d 	bl	80014c4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	// Set first State
	set_handler_state(IDLE);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f001 f892 	bl	8002314 <set_handler_state>

	// SWV
	printf(" Starting SWV!\r\n");
 80011f0:	480b      	ldr	r0, [pc, #44]	@ (8001220 <main+0x68>)
 80011f2:	f008 fc0d 	bl	8009a10 <puts>
	ITM_PORT32(31) = 2; // Change Port
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <main+0x64>)
 80011f8:	2202      	movs	r2, #2
 80011fa:	601a      	str	r2, [r3, #0]

    /* USER CODE BEGIN 3 */
		// Run StateMachine
		// handler_task();
		// SWV
		HAL_Delay(0.1);
 80011fc:	2000      	movs	r0, #0
 80011fe:	f001 fabb 	bl	8002778 <HAL_Delay>
		tim_cnt_val = TIM1->CNT;
 8001202:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <main+0x6c>)
 8001204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001206:	4a08      	ldr	r2, [pc, #32]	@ (8001228 <main+0x70>)
 8001208:	6013      	str	r3, [r2, #0]
		printf("Counter = %lu\r\n", tim_cnt_val);
 800120a:	4b07      	ldr	r3, [pc, #28]	@ (8001228 <main+0x70>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4619      	mov	r1, r3
 8001210:	4806      	ldr	r0, [pc, #24]	@ (800122c <main+0x74>)
 8001212:	f008 fb95 	bl	8009940 <iprintf>
		HAL_Delay(0.1);
 8001216:	bf00      	nop
 8001218:	e7f0      	b.n	80011fc <main+0x44>
 800121a:	bf00      	nop
 800121c:	e000007c 	.word	0xe000007c
 8001220:	0800c698 	.word	0x0800c698
 8001224:	40012c00 	.word	0x40012c00
 8001228:	20000634 	.word	0x20000634
 800122c:	0800c6a8 	.word	0x0800c6a8

08001230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b094      	sub	sp, #80	@ 0x50
 8001234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001236:	f107 0318 	add.w	r3, r7, #24
 800123a:	2238      	movs	r2, #56	@ 0x38
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f008 fce6 	bl	8009c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001252:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001256:	f003 fe07 	bl	8004e68 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001264:	2340      	movs	r3, #64	@ 0x40
 8001266:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001268:	2302      	movs	r3, #2
 800126a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800126c:	2302      	movs	r3, #2
 800126e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001270:	2304      	movs	r3, #4
 8001272:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001274:	234b      	movs	r3, #75	@ 0x4b
 8001276:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001278:	2302      	movs	r3, #2
 800127a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800127c:	2302      	movs	r3, #2
 800127e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001280:	2302      	movs	r3, #2
 8001282:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001284:	f107 0318 	add.w	r3, r7, #24
 8001288:	4618      	mov	r0, r3
 800128a:	f003 fea1 	bl	8004fd0 <HAL_RCC_OscConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001294:	f000 fb8c 	bl	80019b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001298:	230f      	movs	r3, #15
 800129a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129c:	2303      	movs	r3, #3
 800129e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2104      	movs	r1, #4
 80012b0:	4618      	mov	r0, r3
 80012b2:	f004 f99f 	bl	80055f4 <HAL_RCC_ClockConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012bc:	f000 fb78 	bl	80019b0 <Error_Handler>
  }
}
 80012c0:	bf00      	nop
 80012c2:	3750      	adds	r7, #80	@ 0x50
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08c      	sub	sp, #48	@ 0x30
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2220      	movs	r2, #32
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f008 fc95 	bl	8009c10 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012e6:	4b40      	ldr	r3, [pc, #256]	@ (80013e8 <MX_ADC1_Init+0x120>)
 80012e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012ee:	4b3e      	ldr	r3, [pc, #248]	@ (80013e8 <MX_ADC1_Init+0x120>)
 80012f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012f6:	4b3c      	ldr	r3, [pc, #240]	@ (80013e8 <MX_ADC1_Init+0x120>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012fc:	4b3a      	ldr	r3, [pc, #232]	@ (80013e8 <MX_ADC1_Init+0x120>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001302:	4b39      	ldr	r3, [pc, #228]	@ (80013e8 <MX_ADC1_Init+0x120>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001308:	4b37      	ldr	r3, [pc, #220]	@ (80013e8 <MX_ADC1_Init+0x120>)
 800130a:	2201      	movs	r2, #1
 800130c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800130e:	4b36      	ldr	r3, [pc, #216]	@ (80013e8 <MX_ADC1_Init+0x120>)
 8001310:	2208      	movs	r2, #8
 8001312:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001314:	4b34      	ldr	r3, [pc, #208]	@ (80013e8 <MX_ADC1_Init+0x120>)
 8001316:	2200      	movs	r2, #0
 8001318:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800131a:	4b33      	ldr	r3, [pc, #204]	@ (80013e8 <MX_ADC1_Init+0x120>)
 800131c:	2201      	movs	r2, #1
 800131e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001320:	4b31      	ldr	r3, [pc, #196]	@ (80013e8 <MX_ADC1_Init+0x120>)
 8001322:	2203      	movs	r2, #3
 8001324:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001326:	4b30      	ldr	r3, [pc, #192]	@ (80013e8 <MX_ADC1_Init+0x120>)
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800132e:	4b2e      	ldr	r3, [pc, #184]	@ (80013e8 <MX_ADC1_Init+0x120>)
 8001330:	2200      	movs	r2, #0
 8001332:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001334:	4b2c      	ldr	r3, [pc, #176]	@ (80013e8 <MX_ADC1_Init+0x120>)
 8001336:	2200      	movs	r2, #0
 8001338:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800133a:	4b2b      	ldr	r3, [pc, #172]	@ (80013e8 <MX_ADC1_Init+0x120>)
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001342:	4b29      	ldr	r3, [pc, #164]	@ (80013e8 <MX_ADC1_Init+0x120>)
 8001344:	2200      	movs	r2, #0
 8001346:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001348:	4b27      	ldr	r3, [pc, #156]	@ (80013e8 <MX_ADC1_Init+0x120>)
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001350:	4825      	ldr	r0, [pc, #148]	@ (80013e8 <MX_ADC1_Init+0x120>)
 8001352:	f001 fc9f 	bl	8002c94 <HAL_ADC_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800135c:	f000 fb28 	bl	80019b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001364:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001368:	4619      	mov	r1, r3
 800136a:	481f      	ldr	r0, [pc, #124]	@ (80013e8 <MX_ADC1_Init+0x120>)
 800136c:	f002 fe4e 	bl	800400c <HAL_ADCEx_MultiModeConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001376:	f000 fb1b 	bl	80019b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800137a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <MX_ADC1_Init+0x124>)
 800137c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800137e:	2306      	movs	r3, #6
 8001380:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001382:	2307      	movs	r3, #7
 8001384:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001386:	237f      	movs	r3, #127	@ 0x7f
 8001388:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800138a:	2304      	movs	r3, #4
 800138c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	4619      	mov	r1, r3
 8001396:	4814      	ldr	r0, [pc, #80]	@ (80013e8 <MX_ADC1_Init+0x120>)
 8001398:	f001 ff8c 	bl	80032b4 <HAL_ADC_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80013a2:	f000 fb05 	bl	80019b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013a6:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <MX_ADC1_Init+0x128>)
 80013a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013aa:	230c      	movs	r3, #12
 80013ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	4619      	mov	r1, r3
 80013b2:	480d      	ldr	r0, [pc, #52]	@ (80013e8 <MX_ADC1_Init+0x120>)
 80013b4:	f001 ff7e 	bl	80032b4 <HAL_ADC_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80013be:	f000 faf7 	bl	80019b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80013c2:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <MX_ADC1_Init+0x12c>)
 80013c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013c6:	2312      	movs	r3, #18
 80013c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	@ (80013e8 <MX_ADC1_Init+0x120>)
 80013d0:	f001 ff70 	bl	80032b4 <HAL_ADC_ConfigChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80013da:	f000 fae9 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	3730      	adds	r7, #48	@ 0x30
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200001f0 	.word	0x200001f0
 80013ec:	04300002 	.word	0x04300002
 80013f0:	08600004 	.word	0x08600004
 80013f4:	3ef08000 	.word	0x3ef08000

080013f8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013fe:	463b      	mov	r3, r7
 8001400:	2220      	movs	r2, #32
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f008 fc03 	bl	8009c10 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800140a:	4b2b      	ldr	r3, [pc, #172]	@ (80014b8 <MX_ADC2_Init+0xc0>)
 800140c:	4a2b      	ldr	r2, [pc, #172]	@ (80014bc <MX_ADC2_Init+0xc4>)
 800140e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001410:	4b29      	ldr	r3, [pc, #164]	@ (80014b8 <MX_ADC2_Init+0xc0>)
 8001412:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001416:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001418:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <MX_ADC2_Init+0xc0>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800141e:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <MX_ADC2_Init+0xc0>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001424:	4b24      	ldr	r3, [pc, #144]	@ (80014b8 <MX_ADC2_Init+0xc0>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800142a:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <MX_ADC2_Init+0xc0>)
 800142c:	2200      	movs	r2, #0
 800142e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001430:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <MX_ADC2_Init+0xc0>)
 8001432:	2208      	movs	r2, #8
 8001434:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001436:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <MX_ADC2_Init+0xc0>)
 8001438:	2200      	movs	r2, #0
 800143a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800143c:	4b1e      	ldr	r3, [pc, #120]	@ (80014b8 <MX_ADC2_Init+0xc0>)
 800143e:	2201      	movs	r2, #1
 8001440:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001442:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <MX_ADC2_Init+0xc0>)
 8001444:	2201      	movs	r2, #1
 8001446:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001448:	4b1b      	ldr	r3, [pc, #108]	@ (80014b8 <MX_ADC2_Init+0xc0>)
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001450:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <MX_ADC2_Init+0xc0>)
 8001452:	2200      	movs	r2, #0
 8001454:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001456:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <MX_ADC2_Init+0xc0>)
 8001458:	2200      	movs	r2, #0
 800145a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800145c:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <MX_ADC2_Init+0xc0>)
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <MX_ADC2_Init+0xc0>)
 8001466:	2200      	movs	r2, #0
 8001468:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800146a:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <MX_ADC2_Init+0xc0>)
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001472:	4811      	ldr	r0, [pc, #68]	@ (80014b8 <MX_ADC2_Init+0xc0>)
 8001474:	f001 fc0e 	bl	8002c94 <HAL_ADC_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800147e:	f000 fa97 	bl	80019b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001482:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <MX_ADC2_Init+0xc8>)
 8001484:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001486:	2306      	movs	r3, #6
 8001488:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800148a:	2307      	movs	r3, #7
 800148c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800148e:	237f      	movs	r3, #127	@ 0x7f
 8001490:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001492:	2304      	movs	r3, #4
 8001494:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800149a:	463b      	mov	r3, r7
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	@ (80014b8 <MX_ADC2_Init+0xc0>)
 80014a0:	f001 ff08 	bl	80032b4 <HAL_ADC_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80014aa:	f000 fa81 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	3720      	adds	r7, #32
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2000025c 	.word	0x2000025c
 80014bc:	50000100 	.word	0x50000100
 80014c0:	47520000 	.word	0x47520000

080014c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b09c      	sub	sp, #112	@ 0x70
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
 80014f4:	615a      	str	r2, [r3, #20]
 80014f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2234      	movs	r2, #52	@ 0x34
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f008 fb86 	bl	8009c10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001504:	4b56      	ldr	r3, [pc, #344]	@ (8001660 <MX_TIM1_Init+0x19c>)
 8001506:	4a57      	ldr	r2, [pc, #348]	@ (8001664 <MX_TIM1_Init+0x1a0>)
 8001508:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15000-1;
 800150a:	4b55      	ldr	r3, [pc, #340]	@ (8001660 <MX_TIM1_Init+0x19c>)
 800150c:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8001510:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8001512:	4b53      	ldr	r3, [pc, #332]	@ (8001660 <MX_TIM1_Init+0x19c>)
 8001514:	2240      	movs	r2, #64	@ 0x40
 8001516:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3749;
 8001518:	4b51      	ldr	r3, [pc, #324]	@ (8001660 <MX_TIM1_Init+0x19c>)
 800151a:	f640 62a5 	movw	r2, #3749	@ 0xea5
 800151e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001520:	4b4f      	ldr	r3, [pc, #316]	@ (8001660 <MX_TIM1_Init+0x19c>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001526:	4b4e      	ldr	r3, [pc, #312]	@ (8001660 <MX_TIM1_Init+0x19c>)
 8001528:	2200      	movs	r2, #0
 800152a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800152c:	4b4c      	ldr	r3, [pc, #304]	@ (8001660 <MX_TIM1_Init+0x19c>)
 800152e:	2280      	movs	r2, #128	@ 0x80
 8001530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001532:	484b      	ldr	r0, [pc, #300]	@ (8001660 <MX_TIM1_Init+0x19c>)
 8001534:	f004 fcc8 	bl	8005ec8 <HAL_TIM_Base_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800153e:	f000 fa37 	bl	80019b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001542:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001546:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001548:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800154c:	4619      	mov	r1, r3
 800154e:	4844      	ldr	r0, [pc, #272]	@ (8001660 <MX_TIM1_Init+0x19c>)
 8001550:	f005 fba8 	bl	8006ca4 <HAL_TIM_ConfigClockSource>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800155a:	f000 fa29 	bl	80019b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800155e:	4840      	ldr	r0, [pc, #256]	@ (8001660 <MX_TIM1_Init+0x19c>)
 8001560:	f004 fdb1 	bl	80060c6 <HAL_TIM_PWM_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800156a:	f000 fa21 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800157a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800157e:	4619      	mov	r1, r3
 8001580:	4837      	ldr	r0, [pc, #220]	@ (8001660 <MX_TIM1_Init+0x19c>)
 8001582:	f006 fb73 	bl	8007c6c <HAL_TIMEx_MasterConfigSynchronization>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 800158c:	f000 fa10 	bl	80019b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001590:	2360      	movs	r3, #96	@ 0x60
 8001592:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 1875;
 8001594:	f240 7353 	movw	r3, #1875	@ 0x753
 8001598:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159a:	2300      	movs	r3, #0
 800159c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800159e:	2300      	movs	r3, #0
 80015a0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80015a2:	2304      	movs	r3, #4
 80015a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015b2:	2200      	movs	r2, #0
 80015b4:	4619      	mov	r1, r3
 80015b6:	482a      	ldr	r0, [pc, #168]	@ (8001660 <MX_TIM1_Init+0x19c>)
 80015b8:	f005 fa60 	bl	8006a7c <HAL_TIM_PWM_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80015c2:	f000 f9f5 	bl	80019b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80015c6:	2370      	movs	r3, #112	@ 0x70
 80015c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015d2:	2204      	movs	r2, #4
 80015d4:	4619      	mov	r1, r3
 80015d6:	4822      	ldr	r0, [pc, #136]	@ (8001660 <MX_TIM1_Init+0x19c>)
 80015d8:	f005 fa50 	bl	8006a7c <HAL_TIM_PWM_ConfigChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 80015e2:	f000 f9e5 	bl	80019b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 192;
 80015f2:	23c0      	movs	r3, #192	@ 0xc0
 80015f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800160c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001610:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001616:	2300      	movs	r3, #0
 8001618:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 800161a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800161e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	4619      	mov	r1, r3
 8001624:	480e      	ldr	r0, [pc, #56]	@ (8001660 <MX_TIM1_Init+0x19c>)
 8001626:	f006 fbb7 	bl	8007d98 <HAL_TIMEx_ConfigBreakDeadTime>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8001630:	f000 f9be 	bl	80019b0 <Error_Handler>
  // STAGES_3
  //	CH1 = CH2 = PWM Mode 1
  // STAGES_2
  //	CH1 = PWM Mode 1, CH2 = PWM Mode 2!
	#ifdef STAGES_3
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001634:	2360      	movs	r3, #96	@ 0x60
 8001636:	63bb      	str	r3, [r7, #56]	@ 0x38
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001638:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800163c:	2204      	movs	r2, #4
 800163e:	4619      	mov	r1, r3
 8001640:	4807      	ldr	r0, [pc, #28]	@ (8001660 <MX_TIM1_Init+0x19c>)
 8001642:	f005 fa1b 	bl	8006a7c <HAL_TIM_PWM_ConfigChannel>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM1_Init+0x18c>
	  {
		Error_Handler();
 800164c:	f000 f9b0 	bl	80019b0 <Error_Handler>
	  {
	    Error_Handler();
	  }
	#endif
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001650:	4803      	ldr	r0, [pc, #12]	@ (8001660 <MX_TIM1_Init+0x19c>)
 8001652:	f000 fbb9 	bl	8001dc8 <HAL_TIM_MspPostInit>

}
 8001656:	bf00      	nop
 8001658:	3770      	adds	r7, #112	@ 0x70
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000388 	.word	0x20000388
 8001664:	40012c00 	.word	0x40012c00

08001668 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800166c:	4b10      	ldr	r3, [pc, #64]	@ (80016b0 <MX_TIM16_Init+0x48>)
 800166e:	4a11      	ldr	r2, [pc, #68]	@ (80016b4 <MX_TIM16_Init+0x4c>)
 8001670:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 15000 - 1;
 8001672:	4b0f      	ldr	r3, [pc, #60]	@ (80016b0 <MX_TIM16_Init+0x48>)
 8001674:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8001678:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167a:	4b0d      	ldr	r3, [pc, #52]	@ (80016b0 <MX_TIM16_Init+0x48>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8001680:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <MX_TIM16_Init+0x48>)
 8001682:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001686:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001688:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <MX_TIM16_Init+0x48>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800168e:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <MX_TIM16_Init+0x48>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001694:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <MX_TIM16_Init+0x48>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800169a:	4805      	ldr	r0, [pc, #20]	@ (80016b0 <MX_TIM16_Init+0x48>)
 800169c:	f004 fc14 	bl	8005ec8 <HAL_TIM_Base_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80016a6:	f000 f983 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200003d4 	.word	0x200003d4
 80016b4:	40014400 	.word	0x40014400

080016b8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80016bc:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <MX_TIM17_Init+0x48>)
 80016be:	4a11      	ldr	r2, [pc, #68]	@ (8001704 <MX_TIM17_Init+0x4c>)
 80016c0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 15000-1;
 80016c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <MX_TIM17_Init+0x48>)
 80016c4:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80016c8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <MX_TIM17_Init+0x48>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 5000;
 80016d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <MX_TIM17_Init+0x48>)
 80016d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016d6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d8:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <MX_TIM17_Init+0x48>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80016de:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <MX_TIM17_Init+0x48>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <MX_TIM17_Init+0x48>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80016ea:	4805      	ldr	r0, [pc, #20]	@ (8001700 <MX_TIM17_Init+0x48>)
 80016ec:	f004 fbec 	bl	8005ec8 <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80016f6:	f000 f95b 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000420 	.word	0x20000420
 8001704:	40014800 	.word	0x40014800

08001708 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800170c:	4b22      	ldr	r3, [pc, #136]	@ (8001798 <MX_USART2_UART_Init+0x90>)
 800170e:	4a23      	ldr	r2, [pc, #140]	@ (800179c <MX_USART2_UART_Init+0x94>)
 8001710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001712:	4b21      	ldr	r3, [pc, #132]	@ (8001798 <MX_USART2_UART_Init+0x90>)
 8001714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800171a:	4b1f      	ldr	r3, [pc, #124]	@ (8001798 <MX_USART2_UART_Init+0x90>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001720:	4b1d      	ldr	r3, [pc, #116]	@ (8001798 <MX_USART2_UART_Init+0x90>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001726:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <MX_USART2_UART_Init+0x90>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800172c:	4b1a      	ldr	r3, [pc, #104]	@ (8001798 <MX_USART2_UART_Init+0x90>)
 800172e:	220c      	movs	r2, #12
 8001730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001732:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <MX_USART2_UART_Init+0x90>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001738:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <MX_USART2_UART_Init+0x90>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173e:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <MX_USART2_UART_Init+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001744:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <MX_USART2_UART_Init+0x90>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800174a:	4b13      	ldr	r3, [pc, #76]	@ (8001798 <MX_USART2_UART_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001750:	4811      	ldr	r0, [pc, #68]	@ (8001798 <MX_USART2_UART_Init+0x90>)
 8001752:	f006 fc20 	bl	8007f96 <HAL_UART_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800175c:	f000 f928 	bl	80019b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001760:	2100      	movs	r1, #0
 8001762:	480d      	ldr	r0, [pc, #52]	@ (8001798 <MX_USART2_UART_Init+0x90>)
 8001764:	f007 fa4a 	bl	8008bfc <HAL_UARTEx_SetTxFifoThreshold>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800176e:	f000 f91f 	bl	80019b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001772:	2100      	movs	r1, #0
 8001774:	4808      	ldr	r0, [pc, #32]	@ (8001798 <MX_USART2_UART_Init+0x90>)
 8001776:	f007 fa7f 	bl	8008c78 <HAL_UARTEx_SetRxFifoThreshold>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001780:	f000 f916 	bl	80019b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001784:	4804      	ldr	r0, [pc, #16]	@ (8001798 <MX_USART2_UART_Init+0x90>)
 8001786:	f007 fa00 	bl	8008b8a <HAL_UARTEx_DisableFifoMode>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001790:	f000 f90e 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	2000052c 	.word	0x2000052c
 800179c:	40004400 	.word	0x40004400

080017a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80017a6:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <MX_DMA_Init+0x98>)
 80017a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017aa:	4a23      	ldr	r2, [pc, #140]	@ (8001838 <MX_DMA_Init+0x98>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80017b2:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <MX_DMA_Init+0x98>)
 80017b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017be:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <MX_DMA_Init+0x98>)
 80017c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001838 <MX_DMA_Init+0x98>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80017ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <MX_DMA_Init+0x98>)
 80017cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017d6:	4b18      	ldr	r3, [pc, #96]	@ (8001838 <MX_DMA_Init+0x98>)
 80017d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017da:	4a17      	ldr	r2, [pc, #92]	@ (8001838 <MX_DMA_Init+0x98>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <MX_DMA_Init+0x98>)
 80017e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	200b      	movs	r0, #11
 80017f4:	f002 fded 	bl	80043d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017f8:	200b      	movs	r0, #11
 80017fa:	f002 fe04 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	200c      	movs	r0, #12
 8001804:	f002 fde5 	bl	80043d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001808:	200c      	movs	r0, #12
 800180a:	f002 fdfc 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	200d      	movs	r0, #13
 8001814:	f002 fddd 	bl	80043d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001818:	200d      	movs	r0, #13
 800181a:	f002 fdf4 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	2038      	movs	r0, #56	@ 0x38
 8001824:	f002 fdd5 	bl	80043d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001828:	2038      	movs	r0, #56	@ 0x38
 800182a:	f002 fdec 	bl	8004406 <HAL_NVIC_EnableIRQ>

}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000

0800183c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	@ 0x28
 8001840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001852:	4b54      	ldr	r3, [pc, #336]	@ (80019a4 <MX_GPIO_Init+0x168>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001856:	4a53      	ldr	r2, [pc, #332]	@ (80019a4 <MX_GPIO_Init+0x168>)
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800185e:	4b51      	ldr	r3, [pc, #324]	@ (80019a4 <MX_GPIO_Init+0x168>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800186a:	4b4e      	ldr	r3, [pc, #312]	@ (80019a4 <MX_GPIO_Init+0x168>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186e:	4a4d      	ldr	r2, [pc, #308]	@ (80019a4 <MX_GPIO_Init+0x168>)
 8001870:	f043 0320 	orr.w	r3, r3, #32
 8001874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001876:	4b4b      	ldr	r3, [pc, #300]	@ (80019a4 <MX_GPIO_Init+0x168>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187a:	f003 0320 	and.w	r3, r3, #32
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	4b48      	ldr	r3, [pc, #288]	@ (80019a4 <MX_GPIO_Init+0x168>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001886:	4a47      	ldr	r2, [pc, #284]	@ (80019a4 <MX_GPIO_Init+0x168>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800188e:	4b45      	ldr	r3, [pc, #276]	@ (80019a4 <MX_GPIO_Init+0x168>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189a:	4b42      	ldr	r3, [pc, #264]	@ (80019a4 <MX_GPIO_Init+0x168>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189e:	4a41      	ldr	r2, [pc, #260]	@ (80019a4 <MX_GPIO_Init+0x168>)
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018a6:	4b3f      	ldr	r3, [pc, #252]	@ (80019a4 <MX_GPIO_Init+0x168>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Stg2_NMOS1_Pin|GPIO_PIN_3|GPIO_PIN_4|Stg2_NMOS4_Pin
 80018b2:	2200      	movs	r2, #0
 80018b4:	f640 41fc 	movw	r1, #3324	@ 0xcfc
 80018b8:	483b      	ldr	r0, [pc, #236]	@ (80019a8 <MX_GPIO_Init+0x16c>)
 80018ba:	f003 fa8b 	bl	8004dd4 <HAL_GPIO_WritePin>
                          |Stg3_NMOS1_Pin|Stg3_NMOS3_Pin|Stg3_NMOS2_Pin|Stg3_NMOS4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPI1_RST_Pin|Stg2_NMOS3_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	f648 0160 	movw	r1, #34912	@ 0x8860
 80018c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018c8:	f003 fa84 	bl	8004dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_DC_Pin|Stg2_NMOS2_Pin, GPIO_PIN_RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80018d2:	4836      	ldr	r0, [pc, #216]	@ (80019ac <MX_GPIO_Init+0x170>)
 80018d4:	f003 fa7e 	bl	8004dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_EXTI13_Pin */
  GPIO_InitStruct.Pin = B1_EXTI13_Pin;
 80018d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4619      	mov	r1, r3
 80018ee:	482e      	ldr	r0, [pc, #184]	@ (80019a8 <MX_GPIO_Init+0x16c>)
 80018f0:	f003 f8d6 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Stg2_NMOS1_Pin PC3 PC4 Stg2_NMOS4_Pin
                           Stg3_NMOS1_Pin Stg3_NMOS3_Pin Stg3_NMOS2_Pin Stg3_NMOS4_Pin */
  GPIO_InitStruct.Pin = Stg2_NMOS1_Pin|GPIO_PIN_3|GPIO_PIN_4|Stg2_NMOS4_Pin
 80018f4:	f640 43fc 	movw	r3, #3324	@ 0xcfc
 80018f8:	617b      	str	r3, [r7, #20]
                          |Stg3_NMOS1_Pin|Stg3_NMOS3_Pin|Stg3_NMOS2_Pin|Stg3_NMOS4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4826      	ldr	r0, [pc, #152]	@ (80019a8 <MX_GPIO_Init+0x16c>)
 800190e:	f003 f8c7 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SPI1_RST_Pin Stg2_NMOS3_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI1_RST_Pin|Stg2_NMOS3_Pin|SPI1_CS_Pin;
 8001912:	f648 0360 	movw	r3, #34912	@ 0x8860
 8001916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001918:	2301      	movs	r3, #1
 800191a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4619      	mov	r1, r3
 800192a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800192e:	f003 f8b7 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Tast1_EXTI1_Pin Tast2_EXTI2_Pin */
  GPIO_InitStruct.Pin = Tast1_EXTI1_Pin|Tast2_EXTI2_Pin;
 8001932:	2306      	movs	r3, #6
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001936:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800193a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800193c:	2302      	movs	r3, #2
 800193e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	4619      	mov	r1, r3
 8001946:	4819      	ldr	r0, [pc, #100]	@ (80019ac <MX_GPIO_Init+0x170>)
 8001948:	f003 f8aa 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_DC_Pin Stg2_NMOS2_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin|Stg2_NMOS2_Pin;
 800194c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	2301      	movs	r3, #1
 8001954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	4811      	ldr	r0, [pc, #68]	@ (80019ac <MX_GPIO_Init+0x170>)
 8001966:	f003 f89b 	bl	8004aa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	2007      	movs	r0, #7
 8001970:	f002 fd2f 	bl	80043d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001974:	2007      	movs	r0, #7
 8001976:	f002 fd46 	bl	8004406 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	2008      	movs	r0, #8
 8001980:	f002 fd27 	bl	80043d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001984:	2008      	movs	r0, #8
 8001986:	f002 fd3e 	bl	8004406 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	2028      	movs	r0, #40	@ 0x28
 8001990:	f002 fd1f 	bl	80043d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001994:	2028      	movs	r0, #40	@ 0x28
 8001996:	f002 fd36 	bl	8004406 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	@ 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000
 80019a8:	48000800 	.word	0x48000800
 80019ac:	48000400 	.word	0x48000400

080019b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b4:	b672      	cpsid	i
}
 80019b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <Error_Handler+0x8>

080019bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <HAL_MspInit+0x44>)
 80019c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a00 <HAL_MspInit+0x44>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <HAL_MspInit+0x44>)
 80019d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019da:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <HAL_MspInit+0x44>)
 80019dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019de:	4a08      	ldr	r2, [pc, #32]	@ (8001a00 <HAL_MspInit+0x44>)
 80019e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80019e6:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_MspInit+0x44>)
 80019e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019f2:	f003 fadd 	bl	8004fb0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000

08001a04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b0a2      	sub	sp, #136	@ 0x88
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a1c:	f107 0320 	add.w	r3, r7, #32
 8001a20:	2254      	movs	r2, #84	@ 0x54
 8001a22:	2100      	movs	r1, #0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f008 f8f3 	bl	8009c10 <memset>
  if(hadc->Instance==ADC1)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a32:	f040 8082 	bne.w	8001b3a <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001a36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a3a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001a3c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a40:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a42:	f107 0320 	add.w	r3, r7, #32
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 fff0 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001a52:	f7ff ffad 	bl	80019b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a56:	4b72      	ldr	r3, [pc, #456]	@ (8001c20 <HAL_ADC_MspInit+0x21c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	4a70      	ldr	r2, [pc, #448]	@ (8001c20 <HAL_ADC_MspInit+0x21c>)
 8001a5e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a60:	4b6f      	ldr	r3, [pc, #444]	@ (8001c20 <HAL_ADC_MspInit+0x21c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d10b      	bne.n	8001a80 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a68:	4b6e      	ldr	r3, [pc, #440]	@ (8001c24 <HAL_ADC_MspInit+0x220>)
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6c:	4a6d      	ldr	r2, [pc, #436]	@ (8001c24 <HAL_ADC_MspInit+0x220>)
 8001a6e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a74:	4b6b      	ldr	r3, [pc, #428]	@ (8001c24 <HAL_ADC_MspInit+0x220>)
 8001a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	4b68      	ldr	r3, [pc, #416]	@ (8001c24 <HAL_ADC_MspInit+0x220>)
 8001a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a84:	4a67      	ldr	r2, [pc, #412]	@ (8001c24 <HAL_ADC_MspInit+0x220>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8c:	4b65      	ldr	r3, [pc, #404]	@ (8001c24 <HAL_ADC_MspInit+0x220>)
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a98:	4b62      	ldr	r3, [pc, #392]	@ (8001c24 <HAL_ADC_MspInit+0x220>)
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9c:	4a61      	ldr	r2, [pc, #388]	@ (8001c24 <HAL_ADC_MspInit+0x220>)
 8001a9e:	f043 0302 	orr.w	r3, r3, #2
 8001aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa4:	4b5f      	ldr	r3, [pc, #380]	@ (8001c24 <HAL_ADC_MspInit+0x220>)
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ADC1_IN1_Poti1_Pin|ADC1_IN2_Poti2_Pin;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ac6:	f002 ffeb 	bl	8004aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aca:	2301      	movs	r3, #1
 8001acc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001ada:	4619      	mov	r1, r3
 8001adc:	4852      	ldr	r0, [pc, #328]	@ (8001c28 <HAL_ADC_MspInit+0x224>)
 8001ade:	f002 ffdf 	bl	8004aa0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001ae2:	4b52      	ldr	r3, [pc, #328]	@ (8001c2c <HAL_ADC_MspInit+0x228>)
 8001ae4:	4a52      	ldr	r2, [pc, #328]	@ (8001c30 <HAL_ADC_MspInit+0x22c>)
 8001ae6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ae8:	4b50      	ldr	r3, [pc, #320]	@ (8001c2c <HAL_ADC_MspInit+0x228>)
 8001aea:	2205      	movs	r2, #5
 8001aec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aee:	4b4f      	ldr	r3, [pc, #316]	@ (8001c2c <HAL_ADC_MspInit+0x228>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af4:	4b4d      	ldr	r3, [pc, #308]	@ (8001c2c <HAL_ADC_MspInit+0x228>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001afa:	4b4c      	ldr	r3, [pc, #304]	@ (8001c2c <HAL_ADC_MspInit+0x228>)
 8001afc:	2280      	movs	r2, #128	@ 0x80
 8001afe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b00:	4b4a      	ldr	r3, [pc, #296]	@ (8001c2c <HAL_ADC_MspInit+0x228>)
 8001b02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b06:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b08:	4b48      	ldr	r3, [pc, #288]	@ (8001c2c <HAL_ADC_MspInit+0x228>)
 8001b0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b0e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b10:	4b46      	ldr	r3, [pc, #280]	@ (8001c2c <HAL_ADC_MspInit+0x228>)
 8001b12:	2220      	movs	r2, #32
 8001b14:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b16:	4b45      	ldr	r3, [pc, #276]	@ (8001c2c <HAL_ADC_MspInit+0x228>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b1c:	4843      	ldr	r0, [pc, #268]	@ (8001c2c <HAL_ADC_MspInit+0x228>)
 8001b1e:	f002 fc8d 	bl	800443c <HAL_DMA_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8001b28:	f7ff ff42 	bl	80019b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c2c <HAL_ADC_MspInit+0x228>)
 8001b30:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b32:	4a3e      	ldr	r2, [pc, #248]	@ (8001c2c <HAL_ADC_MspInit+0x228>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b38:	e06d      	b.n	8001c16 <HAL_ADC_MspInit+0x212>
  else if(hadc->Instance==ADC2)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a3d      	ldr	r2, [pc, #244]	@ (8001c34 <HAL_ADC_MspInit+0x230>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d168      	bne.n	8001c16 <HAL_ADC_MspInit+0x212>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001b44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b48:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001b4a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001b4e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b50:	f107 0320 	add.w	r3, r7, #32
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 ff69 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_ADC_MspInit+0x160>
      Error_Handler();
 8001b60:	f7ff ff26 	bl	80019b0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b64:	4b2e      	ldr	r3, [pc, #184]	@ (8001c20 <HAL_ADC_MspInit+0x21c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	4a2d      	ldr	r2, [pc, #180]	@ (8001c20 <HAL_ADC_MspInit+0x21c>)
 8001b6c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c20 <HAL_ADC_MspInit+0x21c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d10b      	bne.n	8001b8e <HAL_ADC_MspInit+0x18a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b76:	4b2b      	ldr	r3, [pc, #172]	@ (8001c24 <HAL_ADC_MspInit+0x220>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7a:	4a2a      	ldr	r2, [pc, #168]	@ (8001c24 <HAL_ADC_MspInit+0x220>)
 8001b7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b82:	4b28      	ldr	r3, [pc, #160]	@ (8001c24 <HAL_ADC_MspInit+0x220>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	4b25      	ldr	r3, [pc, #148]	@ (8001c24 <HAL_ADC_MspInit+0x220>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b92:	4a24      	ldr	r2, [pc, #144]	@ (8001c24 <HAL_ADC_MspInit+0x220>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b9a:	4b22      	ldr	r3, [pc, #136]	@ (8001c24 <HAL_ADC_MspInit+0x220>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ba6:	2310      	movs	r3, #16
 8001ba8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001baa:	2303      	movs	r3, #3
 8001bac:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bbc:	f002 ff70 	bl	8004aa0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c38 <HAL_ADC_MspInit+0x234>)
 8001bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8001c3c <HAL_ADC_MspInit+0x238>)
 8001bc4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <HAL_ADC_MspInit+0x234>)
 8001bc8:	2224      	movs	r2, #36	@ 0x24
 8001bca:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c38 <HAL_ADC_MspInit+0x234>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd2:	4b19      	ldr	r3, [pc, #100]	@ (8001c38 <HAL_ADC_MspInit+0x234>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001bd8:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <HAL_ADC_MspInit+0x234>)
 8001bda:	2280      	movs	r2, #128	@ 0x80
 8001bdc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bde:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <HAL_ADC_MspInit+0x234>)
 8001be0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001be4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001be6:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <HAL_ADC_MspInit+0x234>)
 8001be8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bec:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001bee:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <HAL_ADC_MspInit+0x234>)
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001bf4:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <HAL_ADC_MspInit+0x234>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001bfa:	480f      	ldr	r0, [pc, #60]	@ (8001c38 <HAL_ADC_MspInit+0x234>)
 8001bfc:	f002 fc1e 	bl	800443c <HAL_DMA_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_ADC_MspInit+0x206>
      Error_Handler();
 8001c06:	f7ff fed3 	bl	80019b0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c38 <HAL_ADC_MspInit+0x234>)
 8001c0e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c10:	4a09      	ldr	r2, [pc, #36]	@ (8001c38 <HAL_ADC_MspInit+0x234>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001c16:	bf00      	nop
 8001c18:	3788      	adds	r7, #136	@ 0x88
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000638 	.word	0x20000638
 8001c24:	40021000 	.word	0x40021000
 8001c28:	48000400 	.word	0x48000400
 8001c2c:	200002c8 	.word	0x200002c8
 8001c30:	40020030 	.word	0x40020030
 8001c34:	50000100 	.word	0x50000100
 8001c38:	20000328 	.word	0x20000328
 8001c3c:	40020408 	.word	0x40020408

08001c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a56      	ldr	r2, [pc, #344]	@ (8001da8 <HAL_TIM_Base_MspInit+0x168>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d172      	bne.n	8001d38 <HAL_TIM_Base_MspInit+0xf8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c52:	4b56      	ldr	r3, [pc, #344]	@ (8001dac <HAL_TIM_Base_MspInit+0x16c>)
 8001c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c56:	4a55      	ldr	r2, [pc, #340]	@ (8001dac <HAL_TIM_Base_MspInit+0x16c>)
 8001c58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c5e:	4b53      	ldr	r3, [pc, #332]	@ (8001dac <HAL_TIM_Base_MspInit+0x16c>)
 8001c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 8001c6a:	4b51      	ldr	r3, [pc, #324]	@ (8001db0 <HAL_TIM_Base_MspInit+0x170>)
 8001c6c:	4a51      	ldr	r2, [pc, #324]	@ (8001db4 <HAL_TIM_Base_MspInit+0x174>)
 8001c6e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8001c70:	4b4f      	ldr	r3, [pc, #316]	@ (8001db0 <HAL_TIM_Base_MspInit+0x170>)
 8001c72:	222a      	movs	r2, #42	@ 0x2a
 8001c74:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c76:	4b4e      	ldr	r3, [pc, #312]	@ (8001db0 <HAL_TIM_Base_MspInit+0x170>)
 8001c78:	2210      	movs	r2, #16
 8001c7a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c7c:	4b4c      	ldr	r3, [pc, #304]	@ (8001db0 <HAL_TIM_Base_MspInit+0x170>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c82:	4b4b      	ldr	r3, [pc, #300]	@ (8001db0 <HAL_TIM_Base_MspInit+0x170>)
 8001c84:	2280      	movs	r2, #128	@ 0x80
 8001c86:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c88:	4b49      	ldr	r3, [pc, #292]	@ (8001db0 <HAL_TIM_Base_MspInit+0x170>)
 8001c8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c8e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c90:	4b47      	ldr	r3, [pc, #284]	@ (8001db0 <HAL_TIM_Base_MspInit+0x170>)
 8001c92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c96:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001c98:	4b45      	ldr	r3, [pc, #276]	@ (8001db0 <HAL_TIM_Base_MspInit+0x170>)
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001c9e:	4b44      	ldr	r3, [pc, #272]	@ (8001db0 <HAL_TIM_Base_MspInit+0x170>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001ca4:	4842      	ldr	r0, [pc, #264]	@ (8001db0 <HAL_TIM_Base_MspInit+0x170>)
 8001ca6:	f002 fbc9 	bl	800443c <HAL_DMA_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8001cb0:	f7ff fe7e 	bl	80019b0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a3e      	ldr	r2, [pc, #248]	@ (8001db0 <HAL_TIM_Base_MspInit+0x170>)
 8001cb8:	625a      	str	r2, [r3, #36]	@ 0x24
 8001cba:	4a3d      	ldr	r2, [pc, #244]	@ (8001db0 <HAL_TIM_Base_MspInit+0x170>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel2;
 8001cc0:	4b3d      	ldr	r3, [pc, #244]	@ (8001db8 <HAL_TIM_Base_MspInit+0x178>)
 8001cc2:	4a3e      	ldr	r2, [pc, #248]	@ (8001dbc <HAL_TIM_Base_MspInit+0x17c>)
 8001cc4:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 8001cc6:	4b3c      	ldr	r3, [pc, #240]	@ (8001db8 <HAL_TIM_Base_MspInit+0x178>)
 8001cc8:	222b      	movs	r2, #43	@ 0x2b
 8001cca:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8001db8 <HAL_TIM_Base_MspInit+0x178>)
 8001cce:	2210      	movs	r2, #16
 8001cd0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd2:	4b39      	ldr	r3, [pc, #228]	@ (8001db8 <HAL_TIM_Base_MspInit+0x178>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001cd8:	4b37      	ldr	r3, [pc, #220]	@ (8001db8 <HAL_TIM_Base_MspInit+0x178>)
 8001cda:	2280      	movs	r2, #128	@ 0x80
 8001cdc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cde:	4b36      	ldr	r3, [pc, #216]	@ (8001db8 <HAL_TIM_Base_MspInit+0x178>)
 8001ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ce4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ce6:	4b34      	ldr	r3, [pc, #208]	@ (8001db8 <HAL_TIM_Base_MspInit+0x178>)
 8001ce8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cec:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 8001cee:	4b32      	ldr	r3, [pc, #200]	@ (8001db8 <HAL_TIM_Base_MspInit+0x178>)
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001cf4:	4b30      	ldr	r3, [pc, #192]	@ (8001db8 <HAL_TIM_Base_MspInit+0x178>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8001cfa:	482f      	ldr	r0, [pc, #188]	@ (8001db8 <HAL_TIM_Base_MspInit+0x178>)
 8001cfc:	f002 fb9e 	bl	800443c <HAL_DMA_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_TIM_Base_MspInit+0xca>
    {
      Error_Handler();
 8001d06:	f7ff fe53 	bl	80019b0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001db8 <HAL_TIM_Base_MspInit+0x178>)
 8001d0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d10:	4a29      	ldr	r2, [pc, #164]	@ (8001db8 <HAL_TIM_Base_MspInit+0x178>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2019      	movs	r0, #25
 8001d1c:	f002 fb59 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d20:	2019      	movs	r0, #25
 8001d22:	f002 fb70 	bl	8004406 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	201a      	movs	r0, #26
 8001d2c:	f002 fb51 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001d30:	201a      	movs	r0, #26
 8001d32:	f002 fb68 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001d36:	e032      	b.n	8001d9e <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM16)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a20      	ldr	r2, [pc, #128]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x180>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d114      	bne.n	8001d6c <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d42:	4b1a      	ldr	r3, [pc, #104]	@ (8001dac <HAL_TIM_Base_MspInit+0x16c>)
 8001d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d46:	4a19      	ldr	r2, [pc, #100]	@ (8001dac <HAL_TIM_Base_MspInit+0x16c>)
 8001d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d4e:	4b17      	ldr	r3, [pc, #92]	@ (8001dac <HAL_TIM_Base_MspInit+0x16c>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2019      	movs	r0, #25
 8001d60:	f002 fb37 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d64:	2019      	movs	r0, #25
 8001d66:	f002 fb4e 	bl	8004406 <HAL_NVIC_EnableIRQ>
}
 8001d6a:	e018      	b.n	8001d9e <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM17)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a14      	ldr	r2, [pc, #80]	@ (8001dc4 <HAL_TIM_Base_MspInit+0x184>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d113      	bne.n	8001d9e <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001d76:	4b0d      	ldr	r3, [pc, #52]	@ (8001dac <HAL_TIM_Base_MspInit+0x16c>)
 8001d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001dac <HAL_TIM_Base_MspInit+0x16c>)
 8001d7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d80:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d82:	4b0a      	ldr	r3, [pc, #40]	@ (8001dac <HAL_TIM_Base_MspInit+0x16c>)
 8001d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2100      	movs	r1, #0
 8001d92:	201a      	movs	r0, #26
 8001d94:	f002 fb1d 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001d98:	201a      	movs	r0, #26
 8001d9a:	f002 fb34 	bl	8004406 <HAL_NVIC_EnableIRQ>
}
 8001d9e:	bf00      	nop
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40012c00 	.word	0x40012c00
 8001dac:	40021000 	.word	0x40021000
 8001db0:	2000046c 	.word	0x2000046c
 8001db4:	40020008 	.word	0x40020008
 8001db8:	200004cc 	.word	0x200004cc
 8001dbc:	4002001c 	.word	0x4002001c
 8001dc0:	40014400 	.word	0x40014400
 8001dc4:	40014800 	.word	0x40014800

08001dc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	@ 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a20      	ldr	r2, [pc, #128]	@ (8001e68 <HAL_TIM_MspPostInit+0xa0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d13a      	bne.n	8001e60 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	4b20      	ldr	r3, [pc, #128]	@ (8001e6c <HAL_TIM_MspPostInit+0xa4>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dee:	4a1f      	ldr	r2, [pc, #124]	@ (8001e6c <HAL_TIM_MspPostInit+0xa4>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001df6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e6c <HAL_TIM_MspPostInit+0xa4>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	4b1a      	ldr	r3, [pc, #104]	@ (8001e6c <HAL_TIM_MspPostInit+0xa4>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e06:	4a19      	ldr	r2, [pc, #100]	@ (8001e6c <HAL_TIM_MspPostInit+0xa4>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e0e:	4b17      	ldr	r3, [pc, #92]	@ (8001e6c <HAL_TIM_MspPostInit+0xa4>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1N_NMOS2_LS_Pin|TIM1_CH1_NMOS1_HS_Pin|TIM1_CH2_NMOS3_HS_Pin;
 8001e1a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e24:	2302      	movs	r3, #2
 8001e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e2c:	2306      	movs	r3, #6
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4619      	mov	r1, r3
 8001e36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e3a:	f002 fe31 	bl	8004aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM1_CH2N_NMOS4_LS_Pin;
 8001e3e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e50:	2306      	movs	r3, #6
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM1_CH2N_NMOS4_LS_GPIO_Port, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <HAL_TIM_MspPostInit+0xa8>)
 8001e5c:	f002 fe20 	bl	8004aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e60:	bf00      	nop
 8001e62:	3728      	adds	r7, #40	@ 0x28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40012c00 	.word	0x40012c00
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	48000400 	.word	0x48000400

08001e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b09e      	sub	sp, #120	@ 0x78
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	2254      	movs	r2, #84	@ 0x54
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f007 febb 	bl	8009c10 <memset>
  if(huart->Instance==USART2)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8001f1c <HAL_UART_MspInit+0xa8>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d136      	bne.n	8001f12 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eac:	f107 0310 	add.w	r3, r7, #16
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f003 fdbb 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ebc:	f7ff fd78 	bl	80019b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ec0:	4b17      	ldr	r3, [pc, #92]	@ (8001f20 <HAL_UART_MspInit+0xac>)
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec4:	4a16      	ldr	r2, [pc, #88]	@ (8001f20 <HAL_UART_MspInit+0xac>)
 8001ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eca:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ecc:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <HAL_UART_MspInit+0xac>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed8:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <HAL_UART_MspInit+0xac>)
 8001eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001edc:	4a10      	ldr	r2, [pc, #64]	@ (8001f20 <HAL_UART_MspInit+0xac>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <HAL_UART_MspInit+0xac>)
 8001ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ef0:	230c      	movs	r3, #12
 8001ef2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f00:	2307      	movs	r3, #7
 8001f02:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f04:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f0e:	f002 fdc7 	bl	8004aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f12:	bf00      	nop
 8001f14:	3778      	adds	r7, #120	@ 0x78
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40004400 	.word	0x40004400
 8001f20:	40021000 	.word	0x40021000

08001f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <NMI_Handler+0x4>

08001f2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <HardFault_Handler+0x4>

08001f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <MemManage_Handler+0x4>

08001f3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <BusFault_Handler+0x4>

08001f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <UsageFault_Handler+0x4>

08001f4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f7a:	f000 fbdf 	bl	800273c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Tast1_EXTI1_Pin);
 8001f86:	2002      	movs	r0, #2
 8001f88:	f002 ff56 	bl	8004e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Tast2_EXTI2_Pin);
 8001f94:	2004      	movs	r0, #4
 8001f96:	f002 ff4f 	bl	8004e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001fa4:	4802      	ldr	r0, [pc, #8]	@ (8001fb0 <DMA1_Channel1_IRQHandler+0x10>)
 8001fa6:	f002 fc2c 	bl	8004802 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	2000046c 	.word	0x2000046c

08001fb4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8001fb8:	4802      	ldr	r0, [pc, #8]	@ (8001fc4 <DMA1_Channel2_IRQHandler+0x10>)
 8001fba:	f002 fc22 	bl	8004802 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200004cc 	.word	0x200004cc

08001fc8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fcc:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <DMA1_Channel3_IRQHandler+0x10>)
 8001fce:	f002 fc18 	bl	8004802 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200002c8 	.word	0x200002c8

08001fdc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fe0:	4803      	ldr	r0, [pc, #12]	@ (8001ff0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001fe2:	f004 fbfb 	bl	80067dc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001fe6:	4803      	ldr	r0, [pc, #12]	@ (8001ff4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001fe8:	f004 fbf8 	bl	80067dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000388 	.word	0x20000388
 8001ff4:	200003d4 	.word	0x200003d4

08001ff8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ffc:	4803      	ldr	r0, [pc, #12]	@ (800200c <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001ffe:	f004 fbed 	bl	80067dc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8002002:	4803      	ldr	r0, [pc, #12]	@ (8002010 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8002004:	f004 fbea 	bl	80067dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000388 	.word	0x20000388
 8002010:	20000420 	.word	0x20000420

08002014 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_EXTI13_Pin);
 8002018:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800201c:	f002 ff0c 	bl	8004e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}

08002024 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002028:	4802      	ldr	r0, [pc, #8]	@ (8002034 <DMA2_Channel1_IRQHandler+0x10>)
 800202a:	f002 fbea 	bl	8004802 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000328 	.word	0x20000328

08002038 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return 1;
 800203c:	2301      	movs	r3, #1
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <_kill>:

int _kill(int pid, int sig)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002052:	f007 fe3f 	bl	8009cd4 <__errno>
 8002056:	4603      	mov	r3, r0
 8002058:	2216      	movs	r2, #22
 800205a:	601a      	str	r2, [r3, #0]
  return -1;
 800205c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <_exit>:

void _exit (int status)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002070:	f04f 31ff 	mov.w	r1, #4294967295
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ffe7 	bl	8002048 <_kill>
  while (1) {}    /* Make sure we hang here */
 800207a:	bf00      	nop
 800207c:	e7fd      	b.n	800207a <_exit+0x12>

0800207e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	e00a      	b.n	80020a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002090:	f3af 8000 	nop.w
 8002094:	4601      	mov	r1, r0
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	1c5a      	adds	r2, r3, #1
 800209a:	60ba      	str	r2, [r7, #8]
 800209c:	b2ca      	uxtb	r2, r1
 800209e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	3301      	adds	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	dbf0      	blt.n	8002090 <_read+0x12>
  }

  return len;
 80020ae:	687b      	ldr	r3, [r7, #4]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020e0:	605a      	str	r2, [r3, #4]
  return 0;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <_isatty>:

int _isatty(int file)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020f8:	2301      	movs	r3, #1
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002106:	b480      	push	{r7}
 8002108:	b085      	sub	sp, #20
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002128:	4a14      	ldr	r2, [pc, #80]	@ (800217c <_sbrk+0x5c>)
 800212a:	4b15      	ldr	r3, [pc, #84]	@ (8002180 <_sbrk+0x60>)
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002134:	4b13      	ldr	r3, [pc, #76]	@ (8002184 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800213c:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <_sbrk+0x64>)
 800213e:	4a12      	ldr	r2, [pc, #72]	@ (8002188 <_sbrk+0x68>)
 8002140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002142:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	429a      	cmp	r2, r3
 800214e:	d207      	bcs.n	8002160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002150:	f007 fdc0 	bl	8009cd4 <__errno>
 8002154:	4603      	mov	r3, r0
 8002156:	220c      	movs	r2, #12
 8002158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
 800215e:	e009      	b.n	8002174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002160:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002166:	4b07      	ldr	r3, [pc, #28]	@ (8002184 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	4a05      	ldr	r2, [pc, #20]	@ (8002184 <_sbrk+0x64>)
 8002170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20020000 	.word	0x20020000
 8002180:	00000400 	.word	0x00000400
 8002184:	2000063c 	.word	0x2000063c
 8002188:	200007b0 	.word	0x200007b0

0800218c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002190:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <SystemInit+0x20>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002196:	4a05      	ldr	r2, [pc, #20]	@ (80021ac <SystemInit+0x20>)
 8002198:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800219c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <enter_handler_state>:
pwm_sin_mod *pwmPtr_1;
#ifdef STAGES_3
pwm_sin_mod *pwmPtr_2;
#endif

void enter_handler_state(int state) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	switch (state) {
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <enter_handler_state+0x16>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d019      	beq.n	80021f8 <enter_handler_state+0x48>
		#endif

		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 80021c4:	e05d      	b.n	8002282 <enter_handler_state+0xd2>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2120      	movs	r1, #32
 80021ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021ce:	f002 fe01 	bl	8004dd4 <HAL_GPIO_WritePin>
		handler_state = IDLE;
 80021d2:	4b2e      	ldr	r3, [pc, #184]	@ (800228c <enter_handler_state+0xdc>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
				(uint32_t*) pwmPtr_1->ccr_arr, pwmPtr_1->NrOfEl);
 80021d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002290 <enter_handler_state+0xe0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	1d1a      	adds	r2, r3, #4
 80021de:	4b2c      	ldr	r3, [pc, #176]	@ (8002290 <enter_handler_state+0xe0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	2100      	movs	r1, #0
 80021e8:	482a      	ldr	r0, [pc, #168]	@ (8002294 <enter_handler_state+0xe4>)
 80021ea:	f003 ffcd 	bl	8006188 <HAL_TIM_PWM_Start_DMA>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80021ee:	2100      	movs	r1, #0
 80021f0:	4828      	ldr	r0, [pc, #160]	@ (8002294 <enter_handler_state+0xe4>)
 80021f2:	f005 fc1b 	bl	8007a2c <HAL_TIMEx_PWMN_Start>
		break;
 80021f6:	e044      	b.n	8002282 <enter_handler_state+0xd2>
		time_val = 0;
 80021f8:	4b27      	ldr	r3, [pc, #156]	@ (8002298 <enter_handler_state+0xe8>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80021fe:	2201      	movs	r2, #1
 8002200:	2120      	movs	r1, #32
 8002202:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002206:	f002 fde5 	bl	8004dd4 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Start_IT(&htim17);
 800220a:	4824      	ldr	r0, [pc, #144]	@ (800229c <enter_handler_state+0xec>)
 800220c:	f003 feb4 	bl	8005f78 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim16);
 8002210:	4823      	ldr	r0, [pc, #140]	@ (80022a0 <enter_handler_state+0xf0>)
 8002212:	f003 feb1 	bl	8005f78 <HAL_TIM_Base_Start_IT>
		HAL_ADC_Start_DMA(&hadc1, AD_RES_BUFFER_ADC1, 3);
 8002216:	2203      	movs	r2, #3
 8002218:	4922      	ldr	r1, [pc, #136]	@ (80022a4 <enter_handler_state+0xf4>)
 800221a:	4823      	ldr	r0, [pc, #140]	@ (80022a8 <enter_handler_state+0xf8>)
 800221c:	f000 fef6 	bl	800300c <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(&hadc2, AD_RES_BUFFER_ADC2, 1);
 8002220:	2201      	movs	r2, #1
 8002222:	4922      	ldr	r1, [pc, #136]	@ (80022ac <enter_handler_state+0xfc>)
 8002224:	4822      	ldr	r0, [pc, #136]	@ (80022b0 <enter_handler_state+0x100>)
 8002226:	f000 fef1 	bl	800300c <HAL_ADC_Start_DMA>
		set_pwm_values(fPWM, f0, A0);
 800222a:	4b22      	ldr	r3, [pc, #136]	@ (80022b4 <enter_handler_state+0x104>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a22      	ldr	r2, [pc, #136]	@ (80022b8 <enter_handler_state+0x108>)
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	4922      	ldr	r1, [pc, #136]	@ (80022bc <enter_handler_state+0x10c>)
 8002234:	edd1 7a00 	vldr	s15, [r1]
 8002238:	eeb0 0a67 	vmov.f32	s0, s15
 800223c:	4611      	mov	r1, r2
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f8a4 	bl	800238c <set_pwm_values>
				(uint32_t*) pwmPtr_1->ccr_arr, pwmPtr_1->NrOfEl);
 8002244:	4b12      	ldr	r3, [pc, #72]	@ (8002290 <enter_handler_state+0xe0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	1d1a      	adds	r2, r3, #4
 800224a:	4b11      	ldr	r3, [pc, #68]	@ (8002290 <enter_handler_state+0xe0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,
 8002250:	b29b      	uxth	r3, r3
 8002252:	2100      	movs	r1, #0
 8002254:	480f      	ldr	r0, [pc, #60]	@ (8002294 <enter_handler_state+0xe4>)
 8002256:	f003 ff97 	bl	8006188 <HAL_TIM_PWM_Start_DMA>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800225a:	2100      	movs	r1, #0
 800225c:	480d      	ldr	r0, [pc, #52]	@ (8002294 <enter_handler_state+0xe4>)
 800225e:	f005 fbe5 	bl	8007a2c <HAL_TIMEx_PWMN_Start>
				(uint32_t*) pwmPtr_2->ccr_arr, pwmPtr_2->NrOfEl);
 8002262:	4b17      	ldr	r3, [pc, #92]	@ (80022c0 <enter_handler_state+0x110>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	1d1a      	adds	r2, r3, #4
 8002268:	4b15      	ldr	r3, [pc, #84]	@ (80022c0 <enter_handler_state+0x110>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,
 800226e:	b29b      	uxth	r3, r3
 8002270:	2104      	movs	r1, #4
 8002272:	4808      	ldr	r0, [pc, #32]	@ (8002294 <enter_handler_state+0xe4>)
 8002274:	f003 ff88 	bl	8006188 <HAL_TIM_PWM_Start_DMA>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002278:	2104      	movs	r1, #4
 800227a:	4806      	ldr	r0, [pc, #24]	@ (8002294 <enter_handler_state+0xe4>)
 800227c:	f005 fbd6 	bl	8007a2c <HAL_TIMEx_PWMN_Start>
		break;
 8002280:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000640 	.word	0x20000640
 8002290:	20000654 	.word	0x20000654
 8002294:	20000388 	.word	0x20000388
 8002298:	20000642 	.word	0x20000642
 800229c:	20000420 	.word	0x20000420
 80022a0:	200003d4 	.word	0x200003d4
 80022a4:	200005c0 	.word	0x200005c0
 80022a8:	200001f0 	.word	0x200001f0
 80022ac:	200005cc 	.word	0x200005cc
 80022b0:	2000025c 	.word	0x2000025c
 80022b4:	0800c6f8 	.word	0x0800c6f8
 80022b8:	0800c6fc 	.word	0x0800c6fc
 80022bc:	0800c700 	.word	0x0800c700
 80022c0:	20000658 	.word	0x20000658

080022c4 <leave_handler_state>:
	}
}

//-----------------------------------------------------------------------------------------------------------------------

void leave_handler_state(int state) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	switch (state) {
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d012      	beq.n	80022f8 <leave_handler_state+0x34>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d000      	beq.n	80022da <leave_handler_state+0x16>
		// PWM Timer mit DMA stoppen
		stopp_pwm();
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 80022d8:	e00f      	b.n	80022fa <leave_handler_state+0x36>
		HAL_TIM_Base_Stop_IT(&htim17);
 80022da:	480a      	ldr	r0, [pc, #40]	@ (8002304 <leave_handler_state+0x40>)
 80022dc:	f003 fec4 	bl	8006068 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim16);
 80022e0:	4809      	ldr	r0, [pc, #36]	@ (8002308 <leave_handler_state+0x44>)
 80022e2:	f003 fec1 	bl	8006068 <HAL_TIM_Base_Stop_IT>
		HAL_ADC_Stop_DMA(&hadc1);
 80022e6:	4809      	ldr	r0, [pc, #36]	@ (800230c <leave_handler_state+0x48>)
 80022e8:	f000 ff64 	bl	80031b4 <HAL_ADC_Stop_DMA>
		HAL_ADC_Stop_DMA(&hadc2);
 80022ec:	4808      	ldr	r0, [pc, #32]	@ (8002310 <leave_handler_state+0x4c>)
 80022ee:	f000 ff61 	bl	80031b4 <HAL_ADC_Stop_DMA>
		stopp_pwm();
 80022f2:	f000 f965 	bl	80025c0 <stopp_pwm>
		break;
 80022f6:	e000      	b.n	80022fa <leave_handler_state+0x36>
		break;
 80022f8:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000420 	.word	0x20000420
 8002308:	200003d4 	.word	0x200003d4
 800230c:	200001f0 	.word	0x200001f0
 8002310:	2000025c 	.word	0x2000025c

08002314 <set_handler_state>:

void handler_task(void) {
	exec_handler_state(handler_state);
}

void set_handler_state(uint8_t state) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
	prev_handler_state = handler_state;
 800231e:	4b0a      	ldr	r3, [pc, #40]	@ (8002348 <set_handler_state+0x34>)
 8002320:	781a      	ldrb	r2, [r3, #0]
 8002322:	4b0a      	ldr	r3, [pc, #40]	@ (800234c <set_handler_state+0x38>)
 8002324:	701a      	strb	r2, [r3, #0]
	handler_state = state;
 8002326:	4a08      	ldr	r2, [pc, #32]	@ (8002348 <set_handler_state+0x34>)
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	7013      	strb	r3, [r2, #0]
	leave_handler_state(prev_handler_state);
 800232c:	4b07      	ldr	r3, [pc, #28]	@ (800234c <set_handler_state+0x38>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ffc7 	bl	80022c4 <leave_handler_state>
	enter_handler_state(state);
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff39 	bl	80021b0 <enter_handler_state>
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000640 	.word	0x20000640
 800234c:	20000641 	.word	0x20000641

08002350 <inc_handler_currentTime>:

uint8_t get_handler_state(void) {
	return handler_state;
}

void inc_handler_currentTime(uint16_t dT) {
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	80fb      	strh	r3, [r7, #6]
	time_val = time_val + dT;
 800235a:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <inc_handler_currentTime+0x24>)
 800235c:	881a      	ldrh	r2, [r3, #0]
 800235e:	88fb      	ldrh	r3, [r7, #6]
 8002360:	4413      	add	r3, r2
 8002362:	b29a      	uxth	r2, r3
 8002364:	4b03      	ldr	r3, [pc, #12]	@ (8002374 <inc_handler_currentTime+0x24>)
 8002366:	801a      	strh	r2, [r3, #0]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	20000642 	.word	0x20000642

08002378 <get_adc_values>:

adc_values* get_adc_values(void) {
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
	return &adc_values1;
 800237c:	4b02      	ldr	r3, [pc, #8]	@ (8002388 <get_adc_values+0x10>)
}
 800237e:	4618      	mov	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	20000644 	.word	0x20000644

0800238c <set_pwm_values>:

void set_pwm_values(const uint32_t fPWM, const uint32_t f0, const float A0) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b0a4      	sub	sp, #144	@ 0x90
 8002390:	af02      	add	r7, sp, #8
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	ed87 0a01 	vstr	s0, [r7, #4]
	// Char array für ausgabe
	char msg_console1[80];
	// Speicher dynamisch allozieren
	pwmPtr_1 = malloc(
			sizeof(pwm_sin_mod) + (uint32_t) (fPWM / f0) * sizeof(uint32_t));
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a2:	3301      	adds	r3, #1
 80023a4:	009b      	lsls	r3, r3, #2
	pwmPtr_1 = malloc(
 80023a6:	4618      	mov	r0, r3
 80023a8:	f006 fcf2 	bl	8008d90 <malloc>
 80023ac:	4603      	mov	r3, r0
 80023ae:	461a      	mov	r2, r3
 80023b0:	4b7d      	ldr	r3, [pc, #500]	@ (80025a8 <set_pwm_values+0x21c>)
 80023b2:	601a      	str	r2, [r3, #0]
	pwmPtr_1->NrOfEl = (uint32_t) (fPWM / f0);
 80023b4:	4b7c      	ldr	r3, [pc, #496]	@ (80025a8 <set_pwm_values+0x21c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68f9      	ldr	r1, [r7, #12]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	fbb1 f2f2 	udiv	r2, r1, r2
 80023c0:	601a      	str	r2, [r3, #0]
#ifdef STAGES_3
	pwmPtr_2 = malloc(
			sizeof(pwm_sin_mod) + (uint32_t) (fPWM / f0) * sizeof(uint32_t));
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ca:	3301      	adds	r3, #1
 80023cc:	009b      	lsls	r3, r3, #2
	pwmPtr_2 = malloc(
 80023ce:	4618      	mov	r0, r3
 80023d0:	f006 fcde 	bl	8008d90 <malloc>
 80023d4:	4603      	mov	r3, r0
 80023d6:	461a      	mov	r2, r3
 80023d8:	4b74      	ldr	r3, [pc, #464]	@ (80025ac <set_pwm_values+0x220>)
 80023da:	601a      	str	r2, [r3, #0]
	pwmPtr_2->NrOfEl = (uint32_t) (fPWM / f0);
 80023dc:	4b73      	ldr	r3, [pc, #460]	@ (80025ac <set_pwm_values+0x220>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68f9      	ldr	r1, [r7, #12]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	fbb1 f2f2 	udiv	r2, r1, r2
 80023e8:	601a      	str	r2, [r3, #0]
#endif
	// Struktur mit Werten füllen
	const float pi = M_PI;
 80023ea:	4b71      	ldr	r3, [pc, #452]	@ (80025b0 <set_pwm_values+0x224>)
 80023ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	float dRad = (2 * pi) / (pwmPtr_1->NrOfEl - 1);	// Winkelschritt [rad]
 80023f0:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80023f4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80023f8:	4b6b      	ldr	r3, [pc, #428]	@ (80025a8 <set_pwm_values+0x21c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	3b01      	subs	r3, #1
 8002400:	ee07 3a90 	vmov	s15, r3
 8002404:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800240c:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	float norm0 = ((TIM1->ARR) / 2) + 1;
 8002410:	4b68      	ldr	r3, [pc, #416]	@ (80025b4 <set_pwm_values+0x228>)
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	085b      	lsrs	r3, r3, #1
 8002416:	3301      	adds	r3, #1
 8002418:	ee07 3a90 	vmov	s15, r3
 800241c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002420:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
	float sin_val = 0;
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	677b      	str	r3, [r7, #116]	@ 0x74
	float posOffset0 = 1;
 800242a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800242e:	673b      	str	r3, [r7, #112]	@ 0x70
	float posOffsetCurr_1 = 0;
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float normCurr_1 = 0;
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	66bb      	str	r3, [r7, #104]	@ 0x68
#ifdef STAGES_3
	float posOffsetCurr_2 = 0;
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	667b      	str	r3, [r7, #100]	@ 0x64
	float normCurr_2 = 0;
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	663b      	str	r3, [r7, #96]	@ 0x60
#endif
	uint32_t i = 1;
 8002448:	2301      	movs	r3, #1
 800244a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	for (i = 0; i < pwmPtr_1->NrOfEl; i++) {
 800244e:	2300      	movs	r3, #0
 8002450:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002454:	e09b      	b.n	800258e <set_pwm_values+0x202>
		if (i == 0) {
 8002456:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800245a:	2b00      	cmp	r3, #0
 800245c:	d11a      	bne.n	8002494 <set_pwm_values+0x108>
			pwmPtr_1->ccr_arr[i] = (uint32_t) norm0;
 800245e:	4b52      	ldr	r3, [pc, #328]	@ (80025a8 <set_pwm_values+0x21c>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8002466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800246a:	ee17 1a90 	vmov	r1, s15
 800246e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	6059      	str	r1, [r3, #4]
#ifdef STAGES_3
			pwmPtr_2->ccr_arr[i] = (uint32_t) norm0;
 8002478:	4b4c      	ldr	r3, [pc, #304]	@ (80025ac <set_pwm_values+0x220>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8002480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002484:	ee17 1a90 	vmov	r1, s15
 8002488:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	6059      	str	r1, [r3, #4]
 8002492:	e04f      	b.n	8002534 <set_pwm_values+0x1a8>
#endif
		} else {
			sin_val = A0 * sinf(i * dRad);
 8002494:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002498:	ee07 3a90 	vmov	s15, r3
 800249c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024a0:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80024a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a8:	eeb0 0a67 	vmov.f32	s0, s15
 80024ac:	f009 fb30 	bl	800bb10 <sinf>
 80024b0:	eeb0 7a40 	vmov.f32	s14, s0
 80024b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80024b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024bc:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
			posOffsetCurr_1 = posOffset0 + sin_val;
 80024c0:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80024c4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80024c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024cc:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
			normCurr_1 = norm0 * posOffsetCurr_1;
 80024d0:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 80024d4:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80024d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024dc:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
			pwmPtr_1->ccr_arr[i] = (uint32_t) normCurr_1;
 80024e0:	4b31      	ldr	r3, [pc, #196]	@ (80025a8 <set_pwm_values+0x21c>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80024e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ec:	ee17 1a90 	vmov	r1, s15
 80024f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	6059      	str	r1, [r3, #4]
#ifdef STAGES_3
			posOffsetCurr_2 = posOffset0 - sin_val; // Sinusreferenz für 3-Stufen hier MINUS!
 80024fa:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80024fe:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002506:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
			normCurr_2 = norm0 * posOffsetCurr_2;
 800250a:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 800250e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002516:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
			pwmPtr_2->ccr_arr[i] = (uint32_t) normCurr_2;
 800251a:	4b24      	ldr	r3, [pc, #144]	@ (80025ac <set_pwm_values+0x220>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002526:	ee17 1a90 	vmov	r1, s15
 800252a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	6059      	str	r1, [r3, #4]
		}
		// Dynamisch allozierter Speicher ausgeben
#ifdef STAGES_3
		sprintf(msg_console1,
				"pwmPtr_1->ccr_arr[%lu]: %3lu  |  pwmPtr_2->ccr_arr[%lu]: %3lu\r\n",
				i, pwmPtr_1->ccr_arr[i], i, pwmPtr_2->ccr_arr[i]);
 8002534:	4b1c      	ldr	r3, [pc, #112]	@ (80025a8 <set_pwm_values+0x21c>)
 8002536:	681a      	ldr	r2, [r3, #0]
		sprintf(msg_console1,
 8002538:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	6859      	ldr	r1, [r3, #4]
				i, pwmPtr_1->ccr_arr[i], i, pwmPtr_2->ccr_arr[i]);
 8002542:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <set_pwm_values+0x220>)
 8002544:	681a      	ldr	r2, [r3, #0]
		sprintf(msg_console1,
 8002546:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f107 0010 	add.w	r0, r7, #16
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	460b      	mov	r3, r1
 800255e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002562:	4915      	ldr	r1, [pc, #84]	@ (80025b8 <set_pwm_values+0x22c>)
 8002564:	f007 fa5c 	bl	8009a20 <siprintf>
#else
		sprintf(msg_console1, "pwmPtr_1->ccr_arr[%lu]: %3lu\r\n", i,
				pwmPtr_1->ccr_arr[i]);
		#endif
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_console1,
				strlen(msg_console1), HAL_MAX_DELAY);
 8002568:	f107 0310 	add.w	r3, r7, #16
 800256c:	4618      	mov	r0, r3
 800256e:	f7fd fea7 	bl	80002c0 <strlen>
 8002572:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_console1,
 8002574:	b29a      	uxth	r2, r3
 8002576:	f107 0110 	add.w	r1, r7, #16
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
 800257e:	480f      	ldr	r0, [pc, #60]	@ (80025bc <set_pwm_values+0x230>)
 8002580:	f005 fd59 	bl	8008036 <HAL_UART_Transmit>
	for (i = 0; i < pwmPtr_1->NrOfEl; i++) {
 8002584:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002588:	3301      	adds	r3, #1
 800258a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800258e:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <set_pwm_values+0x21c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002598:	429a      	cmp	r2, r3
 800259a:	f4ff af5c 	bcc.w	8002456 <set_pwm_values+0xca>
	}
}
 800259e:	bf00      	nop
 80025a0:	bf00      	nop
 80025a2:	3788      	adds	r7, #136	@ 0x88
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000654 	.word	0x20000654
 80025ac:	20000658 	.word	0x20000658
 80025b0:	40490fdb 	.word	0x40490fdb
 80025b4:	40012c00 	.word	0x40012c00
 80025b8:	0800c6b8 	.word	0x0800c6b8
 80025bc:	2000052c 	.word	0x2000052c

080025c0 <stopp_pwm>:

void stopp_pwm(void) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
	uint16_t gpio_state = GPIO_PIN_SET;
 80025c6:	2301      	movs	r3, #1
 80025c8:	80fb      	strh	r3, [r7, #6]
	while (gpio_state != GPIO_PIN_RESET) {
 80025ca:	e006      	b.n	80025da <stopp_pwm+0x1a>
		gpio_state = HAL_GPIO_ReadPin(TIM1_CH1N_NMOS2_LS_GPIO_Port,
 80025cc:	2180      	movs	r1, #128	@ 0x80
 80025ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025d2:	f002 fbe7 	bl	8004da4 <HAL_GPIO_ReadPin>
 80025d6:	4603      	mov	r3, r0
 80025d8:	80fb      	strh	r3, [r7, #6]
	while (gpio_state != GPIO_PIN_RESET) {
 80025da:	88fb      	ldrh	r3, [r7, #6]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f5      	bne.n	80025cc <stopp_pwm+0xc>
		TIM1_CH1N_NMOS2_LS_Pin);
	}
	// Stop PWM NMOS1 & NMOS2
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80025e0:	2100      	movs	r1, #0
 80025e2:	4814      	ldr	r0, [pc, #80]	@ (8002634 <stopp_pwm+0x74>)
 80025e4:	f005 fae4 	bl	8007bb0 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80025e8:	2100      	movs	r1, #0
 80025ea:	4812      	ldr	r0, [pc, #72]	@ (8002634 <stopp_pwm+0x74>)
 80025ec:	f003 fff8 	bl	80065e0 <HAL_TIM_PWM_Stop_DMA>

	while (gpio_state != GPIO_PIN_RESET) {
 80025f0:	e006      	b.n	8002600 <stopp_pwm+0x40>
		gpio_state = HAL_GPIO_ReadPin(TIM1_CH2N_NMOS4_LS_GPIO_Port,
 80025f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80025f6:	4810      	ldr	r0, [pc, #64]	@ (8002638 <stopp_pwm+0x78>)
 80025f8:	f002 fbd4 	bl	8004da4 <HAL_GPIO_ReadPin>
 80025fc:	4603      	mov	r3, r0
 80025fe:	80fb      	strh	r3, [r7, #6]
	while (gpio_state != GPIO_PIN_RESET) {
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f5      	bne.n	80025f2 <stopp_pwm+0x32>
		TIM1_CH2N_NMOS4_LS_Pin);
	}
	// Stop PWM NMOS3 & NMOS4
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8002606:	2104      	movs	r1, #4
 8002608:	480a      	ldr	r0, [pc, #40]	@ (8002634 <stopp_pwm+0x74>)
 800260a:	f005 fad1 	bl	8007bb0 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 800260e:	2104      	movs	r1, #4
 8002610:	4808      	ldr	r0, [pc, #32]	@ (8002634 <stopp_pwm+0x74>)
 8002612:	f003 ffe5 	bl	80065e0 <HAL_TIM_PWM_Stop_DMA>

	// dynamisch allozierter Speicher freigeben
	free(pwmPtr_1);
 8002616:	4b09      	ldr	r3, [pc, #36]	@ (800263c <stopp_pwm+0x7c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f006 fbc0 	bl	8008da0 <free>
#ifdef STAGES_3
	free(pwmPtr_2);
 8002620:	4b07      	ldr	r3, [pc, #28]	@ (8002640 <stopp_pwm+0x80>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f006 fbbb 	bl	8008da0 <free>
#endif
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000388 	.word	0x20000388
 8002638:	48000400 	.word	0x48000400
 800263c:	20000654 	.word	0x20000654
 8002640:	20000658 	.word	0x20000658

08002644 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002644:	480d      	ldr	r0, [pc, #52]	@ (800267c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002646:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002648:	f7ff fda0 	bl	800218c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800264c:	480c      	ldr	r0, [pc, #48]	@ (8002680 <LoopForever+0x6>)
  ldr r1, =_edata
 800264e:	490d      	ldr	r1, [pc, #52]	@ (8002684 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002650:	4a0d      	ldr	r2, [pc, #52]	@ (8002688 <LoopForever+0xe>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002654:	e002      	b.n	800265c <LoopCopyDataInit>

08002656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800265a:	3304      	adds	r3, #4

0800265c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800265c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800265e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002660:	d3f9      	bcc.n	8002656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002662:	4a0a      	ldr	r2, [pc, #40]	@ (800268c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002664:	4c0a      	ldr	r4, [pc, #40]	@ (8002690 <LoopForever+0x16>)
  movs r3, #0
 8002666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002668:	e001      	b.n	800266e <LoopFillZerobss>

0800266a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800266a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800266c:	3204      	adds	r2, #4

0800266e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800266e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002670:	d3fb      	bcc.n	800266a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002672:	f007 fb35 	bl	8009ce0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002676:	f7fe fd9f 	bl	80011b8 <main>

0800267a <LoopForever>:

LoopForever:
    b LoopForever
 800267a:	e7fe      	b.n	800267a <LoopForever>
  ldr   r0, =_estack
 800267c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002684:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002688:	0800ce98 	.word	0x0800ce98
  ldr r2, =_sbss
 800268c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002690:	200007ac 	.word	0x200007ac

08002694 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002694:	e7fe      	b.n	8002694 <ADC1_2_IRQHandler>

08002696 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a0:	2003      	movs	r0, #3
 80026a2:	f001 fe8b 	bl	80043bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026a6:	200f      	movs	r0, #15
 80026a8:	f000 f80e 	bl	80026c8 <HAL_InitTick>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	71fb      	strb	r3, [r7, #7]
 80026b6:	e001      	b.n	80026bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026b8:	f7ff f980 	bl	80019bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026bc:	79fb      	ldrb	r3, [r7, #7]

}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80026d4:	4b16      	ldr	r3, [pc, #88]	@ (8002730 <HAL_InitTick+0x68>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d022      	beq.n	8002722 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80026dc:	4b15      	ldr	r3, [pc, #84]	@ (8002734 <HAL_InitTick+0x6c>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b13      	ldr	r3, [pc, #76]	@ (8002730 <HAL_InitTick+0x68>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80026e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f0:	4618      	mov	r0, r3
 80026f2:	f001 fe96 	bl	8004422 <HAL_SYSTICK_Config>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10f      	bne.n	800271c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b0f      	cmp	r3, #15
 8002700:	d809      	bhi.n	8002716 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002702:	2200      	movs	r2, #0
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	f04f 30ff 	mov.w	r0, #4294967295
 800270a:	f001 fe62 	bl	80043d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800270e:	4a0a      	ldr	r2, [pc, #40]	@ (8002738 <HAL_InitTick+0x70>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	e007      	b.n	8002726 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
 800271a:	e004      	b.n	8002726 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	73fb      	strb	r3, [r7, #15]
 8002720:	e001      	b.n	8002726 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002726:	7bfb      	ldrb	r3, [r7, #15]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000008 	.word	0x20000008
 8002734:	20000000 	.word	0x20000000
 8002738:	20000004 	.word	0x20000004

0800273c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002740:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <HAL_IncTick+0x1c>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b05      	ldr	r3, [pc, #20]	@ (800275c <HAL_IncTick+0x20>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4413      	add	r3, r2
 800274a:	4a03      	ldr	r2, [pc, #12]	@ (8002758 <HAL_IncTick+0x1c>)
 800274c:	6013      	str	r3, [r2, #0]
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	2000065c 	.word	0x2000065c
 800275c:	20000008 	.word	0x20000008

08002760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return uwTick;
 8002764:	4b03      	ldr	r3, [pc, #12]	@ (8002774 <HAL_GetTick+0x14>)
 8002766:	681b      	ldr	r3, [r3, #0]
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	2000065c 	.word	0x2000065c

08002778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002780:	f7ff ffee 	bl	8002760 <HAL_GetTick>
 8002784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d004      	beq.n	800279c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002792:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <HAL_Delay+0x40>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4413      	add	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800279c:	bf00      	nop
 800279e:	f7ff ffdf 	bl	8002760 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d8f7      	bhi.n	800279e <HAL_Delay+0x26>
  {
  }
}
 80027ae:	bf00      	nop
 80027b0:	bf00      	nop
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000008 	.word	0x20000008

080027bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	609a      	str	r2, [r3, #8]
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	609a      	str	r2, [r3, #8]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3360      	adds	r3, #96	@ 0x60
 8002836:	461a      	mov	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b08      	ldr	r3, [pc, #32]	@ (8002868 <LL_ADC_SetOffset+0x44>)
 8002846:	4013      	ands	r3, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	4313      	orrs	r3, r2
 8002854:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800285c:	bf00      	nop
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	03fff000 	.word	0x03fff000

0800286c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3360      	adds	r3, #96	@ 0x60
 800287a:	461a      	mov	r2, r3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	3360      	adds	r3, #96	@ 0x60
 80028a8:	461a      	mov	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	431a      	orrs	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028c2:	bf00      	nop
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b087      	sub	sp, #28
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	3360      	adds	r3, #96	@ 0x60
 80028de:	461a      	mov	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80028f8:	bf00      	nop
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	3360      	adds	r3, #96	@ 0x60
 8002914:	461a      	mov	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	431a      	orrs	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	615a      	str	r2, [r3, #20]
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002986:	b480      	push	{r7}
 8002988:	b087      	sub	sp, #28
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3330      	adds	r3, #48	@ 0x30
 8002996:	461a      	mov	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	f003 030c 	and.w	r3, r3, #12
 80029a2:	4413      	add	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	211f      	movs	r1, #31
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	401a      	ands	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	0e9b      	lsrs	r3, r3, #26
 80029be:	f003 011f 	and.w	r1, r3, #31
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	fa01 f303 	lsl.w	r3, r1, r3
 80029cc:	431a      	orrs	r2, r3
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029d2:	bf00      	nop
 80029d4:	371c      	adds	r7, #28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029de:	b480      	push	{r7}
 80029e0:	b087      	sub	sp, #28
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3314      	adds	r3, #20
 80029ee:	461a      	mov	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	0e5b      	lsrs	r3, r3, #25
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	4413      	add	r3, r2
 80029fc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	0d1b      	lsrs	r3, r3, #20
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	2107      	movs	r1, #7
 8002a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	401a      	ands	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	0d1b      	lsrs	r3, r3, #20
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	431a      	orrs	r2, r3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a28:	bf00      	nop
 8002a2a:	371c      	adds	r7, #28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	401a      	ands	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f003 0318 	and.w	r3, r3, #24
 8002a56:	4908      	ldr	r1, [pc, #32]	@ (8002a78 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a58:	40d9      	lsrs	r1, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	400b      	ands	r3, r1
 8002a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a62:	431a      	orrs	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a6a:	bf00      	nop
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	0007ffff 	.word	0x0007ffff

08002a7c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 031f 	and.w	r3, r3, #31
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002aa8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6093      	str	r3, [r2, #8]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002acc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ad0:	d101      	bne.n	8002ad6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002af4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002af8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b20:	d101      	bne.n	8002b26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b48:	f043 0201 	orr.w	r2, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b70:	f043 0202 	orr.w	r2, r3, #2
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <LL_ADC_IsEnabled+0x18>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <LL_ADC_IsEnabled+0x1a>
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d101      	bne.n	8002bc2 <LL_ADC_IsDisableOngoing+0x18>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <LL_ADC_IsDisableOngoing+0x1a>
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002be0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002be4:	f043 0204 	orr.w	r2, r3, #4
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c0c:	f043 0210 	orr.w	r2, r3, #16
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d101      	bne.n	8002c38 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c56:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c5a:	f043 0220 	orr.w	r2, r3, #32
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d101      	bne.n	8002c86 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c94:	b590      	push	{r4, r7, lr}
 8002c96:	b089      	sub	sp, #36	@ 0x24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e1a9      	b.n	8003002 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d109      	bne.n	8002cd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7fe fea1 	bl	8001a04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff fef1 	bl	8002abc <LL_ADC_IsDeepPowerDownEnabled>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d004      	beq.n	8002cea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fed7 	bl	8002a98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff ff0c 	bl	8002b0c <LL_ADC_IsInternalRegulatorEnabled>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d115      	bne.n	8002d26 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fef0 	bl	8002ae4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d04:	4b9c      	ldr	r3, [pc, #624]	@ (8002f78 <HAL_ADC_Init+0x2e4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	099b      	lsrs	r3, r3, #6
 8002d0a:	4a9c      	ldr	r2, [pc, #624]	@ (8002f7c <HAL_ADC_Init+0x2e8>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	099b      	lsrs	r3, r3, #6
 8002d12:	3301      	adds	r3, #1
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d18:	e002      	b.n	8002d20 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f9      	bne.n	8002d1a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff feee 	bl	8002b0c <LL_ADC_IsInternalRegulatorEnabled>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10d      	bne.n	8002d52 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3a:	f043 0210 	orr.w	r2, r3, #16
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d46:	f043 0201 	orr.w	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff ff62 	bl	8002c20 <LL_ADC_REG_IsConversionOngoing>
 8002d5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 8142 	bne.w	8002ff0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f040 813e 	bne.w	8002ff0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d78:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d7c:	f043 0202 	orr.w	r2, r3, #2
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fefb 	bl	8002b84 <LL_ADC_IsEnabled>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d141      	bne.n	8002e18 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d9c:	d004      	beq.n	8002da8 <HAL_ADC_Init+0x114>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a77      	ldr	r2, [pc, #476]	@ (8002f80 <HAL_ADC_Init+0x2ec>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d10f      	bne.n	8002dc8 <HAL_ADC_Init+0x134>
 8002da8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002dac:	f7ff feea 	bl	8002b84 <LL_ADC_IsEnabled>
 8002db0:	4604      	mov	r4, r0
 8002db2:	4873      	ldr	r0, [pc, #460]	@ (8002f80 <HAL_ADC_Init+0x2ec>)
 8002db4:	f7ff fee6 	bl	8002b84 <LL_ADC_IsEnabled>
 8002db8:	4603      	mov	r3, r0
 8002dba:	4323      	orrs	r3, r4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	e012      	b.n	8002dee <HAL_ADC_Init+0x15a>
 8002dc8:	486e      	ldr	r0, [pc, #440]	@ (8002f84 <HAL_ADC_Init+0x2f0>)
 8002dca:	f7ff fedb 	bl	8002b84 <LL_ADC_IsEnabled>
 8002dce:	4604      	mov	r4, r0
 8002dd0:	486d      	ldr	r0, [pc, #436]	@ (8002f88 <HAL_ADC_Init+0x2f4>)
 8002dd2:	f7ff fed7 	bl	8002b84 <LL_ADC_IsEnabled>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	431c      	orrs	r4, r3
 8002dda:	486c      	ldr	r0, [pc, #432]	@ (8002f8c <HAL_ADC_Init+0x2f8>)
 8002ddc:	f7ff fed2 	bl	8002b84 <LL_ADC_IsEnabled>
 8002de0:	4603      	mov	r3, r0
 8002de2:	4323      	orrs	r3, r4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d012      	beq.n	8002e18 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dfa:	d004      	beq.n	8002e06 <HAL_ADC_Init+0x172>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a5f      	ldr	r2, [pc, #380]	@ (8002f80 <HAL_ADC_Init+0x2ec>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d101      	bne.n	8002e0a <HAL_ADC_Init+0x176>
 8002e06:	4a62      	ldr	r2, [pc, #392]	@ (8002f90 <HAL_ADC_Init+0x2fc>)
 8002e08:	e000      	b.n	8002e0c <HAL_ADC_Init+0x178>
 8002e0a:	4a62      	ldr	r2, [pc, #392]	@ (8002f94 <HAL_ADC_Init+0x300>)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4619      	mov	r1, r3
 8002e12:	4610      	mov	r0, r2
 8002e14:	f7ff fcd2 	bl	80027bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	7f5b      	ldrb	r3, [r3, #29]
 8002e1c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e22:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002e28:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002e2e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e36:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d106      	bne.n	8002e54 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	045b      	lsls	r3, r3, #17
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d009      	beq.n	8002e70 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e60:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e68:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	4b48      	ldr	r3, [pc, #288]	@ (8002f98 <HAL_ADC_Init+0x304>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	69b9      	ldr	r1, [r7, #24]
 8002e80:	430b      	orrs	r3, r1
 8002e82:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fee5 	bl	8002c6e <LL_ADC_INJ_IsConversionOngoing>
 8002ea4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d17f      	bne.n	8002fac <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d17c      	bne.n	8002fac <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002eb6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ebe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ece:	f023 0302 	bic.w	r3, r3, #2
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	69b9      	ldr	r1, [r7, #24]
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d017      	beq.n	8002f14 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002ef2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002efc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6911      	ldr	r1, [r2, #16]
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002f12:	e013      	b.n	8002f3c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691a      	ldr	r2, [r3, #16]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002f22:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f38:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d12a      	bne.n	8002f9c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002f50:	f023 0304 	bic.w	r3, r3, #4
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f5c:	4311      	orrs	r1, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f62:	4311      	orrs	r1, r2
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0201 	orr.w	r2, r2, #1
 8002f74:	611a      	str	r2, [r3, #16]
 8002f76:	e019      	b.n	8002fac <HAL_ADC_Init+0x318>
 8002f78:	20000000 	.word	0x20000000
 8002f7c:	053e2d63 	.word	0x053e2d63
 8002f80:	50000100 	.word	0x50000100
 8002f84:	50000400 	.word	0x50000400
 8002f88:	50000500 	.word	0x50000500
 8002f8c:	50000600 	.word	0x50000600
 8002f90:	50000300 	.word	0x50000300
 8002f94:	50000700 	.word	0x50000700
 8002f98:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d10c      	bne.n	8002fce <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	f023 010f 	bic.w	r1, r3, #15
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	1e5a      	subs	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fcc:	e007      	b.n	8002fde <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 020f 	bic.w	r2, r2, #15
 8002fdc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe2:	f023 0303 	bic.w	r3, r3, #3
 8002fe6:	f043 0201 	orr.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fee:	e007      	b.n	8003000 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff4:	f043 0210 	orr.w	r2, r3, #16
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003000:	7ffb      	ldrb	r3, [r7, #31]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3724      	adds	r7, #36	@ 0x24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd90      	pop	{r4, r7, pc}
 800300a:	bf00      	nop

0800300c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003020:	d004      	beq.n	800302c <HAL_ADC_Start_DMA+0x20>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a5a      	ldr	r2, [pc, #360]	@ (8003190 <HAL_ADC_Start_DMA+0x184>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d101      	bne.n	8003030 <HAL_ADC_Start_DMA+0x24>
 800302c:	4b59      	ldr	r3, [pc, #356]	@ (8003194 <HAL_ADC_Start_DMA+0x188>)
 800302e:	e000      	b.n	8003032 <HAL_ADC_Start_DMA+0x26>
 8003030:	4b59      	ldr	r3, [pc, #356]	@ (8003198 <HAL_ADC_Start_DMA+0x18c>)
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fd22 	bl	8002a7c <LL_ADC_GetMultimode>
 8003038:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fdee 	bl	8002c20 <LL_ADC_REG_IsConversionOngoing>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	f040 809b 	bne.w	8003182 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_ADC_Start_DMA+0x4e>
 8003056:	2302      	movs	r3, #2
 8003058:	e096      	b.n	8003188 <HAL_ADC_Start_DMA+0x17c>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a4d      	ldr	r2, [pc, #308]	@ (800319c <HAL_ADC_Start_DMA+0x190>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d008      	beq.n	800307e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	2b05      	cmp	r3, #5
 8003076:	d002      	beq.n	800307e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	2b09      	cmp	r3, #9
 800307c:	d17a      	bne.n	8003174 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fe14 	bl	8003cac <ADC_Enable>
 8003084:	4603      	mov	r3, r0
 8003086:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003088:	7dfb      	ldrb	r3, [r7, #23]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d16d      	bne.n	800316a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003092:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003096:	f023 0301 	bic.w	r3, r3, #1
 800309a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a3a      	ldr	r2, [pc, #232]	@ (8003190 <HAL_ADC_Start_DMA+0x184>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d009      	beq.n	80030c0 <HAL_ADC_Start_DMA+0xb4>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a3b      	ldr	r2, [pc, #236]	@ (80031a0 <HAL_ADC_Start_DMA+0x194>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d002      	beq.n	80030bc <HAL_ADC_Start_DMA+0xb0>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	e003      	b.n	80030c4 <HAL_ADC_Start_DMA+0xb8>
 80030bc:	4b39      	ldr	r3, [pc, #228]	@ (80031a4 <HAL_ADC_Start_DMA+0x198>)
 80030be:	e001      	b.n	80030c4 <HAL_ADC_Start_DMA+0xb8>
 80030c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d002      	beq.n	80030d2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d105      	bne.n	80030de <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d006      	beq.n	80030f8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ee:	f023 0206 	bic.w	r2, r3, #6
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	661a      	str	r2, [r3, #96]	@ 0x60
 80030f6:	e002      	b.n	80030fe <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003102:	4a29      	ldr	r2, [pc, #164]	@ (80031a8 <HAL_ADC_Start_DMA+0x19c>)
 8003104:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310a:	4a28      	ldr	r2, [pc, #160]	@ (80031ac <HAL_ADC_Start_DMA+0x1a0>)
 800310c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003112:	4a27      	ldr	r2, [pc, #156]	@ (80031b0 <HAL_ADC_Start_DMA+0x1a4>)
 8003114:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	221c      	movs	r2, #28
 800311c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 0210 	orr.w	r2, r2, #16
 8003134:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3340      	adds	r3, #64	@ 0x40
 8003150:	4619      	mov	r1, r3
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f001 fa19 	bl	800458c <HAL_DMA_Start_IT>
 800315a:	4603      	mov	r3, r0
 800315c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fd34 	bl	8002bd0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003168:	e00d      	b.n	8003186 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003172:	e008      	b.n	8003186 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003180:	e001      	b.n	8003186 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003182:	2302      	movs	r3, #2
 8003184:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003186:	7dfb      	ldrb	r3, [r7, #23]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	50000100 	.word	0x50000100
 8003194:	50000300 	.word	0x50000300
 8003198:	50000700 	.word	0x50000700
 800319c:	50000600 	.word	0x50000600
 80031a0:	50000500 	.word	0x50000500
 80031a4:	50000400 	.word	0x50000400
 80031a8:	08003e97 	.word	0x08003e97
 80031ac:	08003f6f 	.word	0x08003f6f
 80031b0:	08003f8b 	.word	0x08003f8b

080031b4 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_ADC_Stop_DMA+0x16>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e051      	b.n	800326e <HAL_ADC_Stop_DMA+0xba>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80031d2:	2103      	movs	r1, #3
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 fcad 	bl	8003b34 <ADC_ConversionStop>
 80031da:	4603      	mov	r3, r0
 80031dc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d13f      	bne.n	8003264 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0201 	bic.w	r2, r2, #1
 80031f2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d10f      	bne.n	8003222 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003206:	4618      	mov	r0, r3
 8003208:	f001 fa3b 	bl	8004682 <HAL_DMA_Abort>
 800320c:	4603      	mov	r3, r0
 800320e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003210:	7bfb      	ldrb	r3, [r7, #15]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0210 	bic.w	r2, r2, #16
 8003230:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d105      	bne.n	8003244 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fdcd 	bl	8003dd8 <ADC_Disable>
 800323e:	4603      	mov	r3, r0
 8003240:	73fb      	strb	r3, [r7, #15]
 8003242:	e002      	b.n	800324a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fdc7 	bl	8003dd8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d109      	bne.n	8003264 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003254:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	f043 0201 	orr.w	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800326c:	7bfb      	ldrb	r3, [r7, #15]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b0b6      	sub	sp, #216	@ 0xd8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d102      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x24>
 80032d2:	2302      	movs	r3, #2
 80032d4:	f000 bc13 	b.w	8003afe <HAL_ADC_ConfigChannel+0x84a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fc9b 	bl	8002c20 <LL_ADC_REG_IsConversionOngoing>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f040 83f3 	bne.w	8003ad8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6859      	ldr	r1, [r3, #4]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	f7ff fb41 	bl	8002986 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fc89 	bl	8002c20 <LL_ADC_REG_IsConversionOngoing>
 800330e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff fca9 	bl	8002c6e <LL_ADC_INJ_IsConversionOngoing>
 800331c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003320:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003324:	2b00      	cmp	r3, #0
 8003326:	f040 81d9 	bne.w	80036dc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800332a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800332e:	2b00      	cmp	r3, #0
 8003330:	f040 81d4 	bne.w	80036dc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800333c:	d10f      	bne.n	800335e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2200      	movs	r2, #0
 8003348:	4619      	mov	r1, r3
 800334a:	f7ff fb48 	bl	80029de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff faef 	bl	800293a <LL_ADC_SetSamplingTimeCommonConfig>
 800335c:	e00e      	b.n	800337c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	6819      	ldr	r1, [r3, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	461a      	mov	r2, r3
 800336c:	f7ff fb37 	bl	80029de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2100      	movs	r1, #0
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fadf 	bl	800293a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	695a      	ldr	r2, [r3, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	08db      	lsrs	r3, r3, #3
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	2b04      	cmp	r3, #4
 800339c:	d022      	beq.n	80033e4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6919      	ldr	r1, [r3, #16]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80033ae:	f7ff fa39 	bl	8002824 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6919      	ldr	r1, [r3, #16]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	461a      	mov	r2, r3
 80033c0:	f7ff fa85 	bl	80028ce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d102      	bne.n	80033da <HAL_ADC_ConfigChannel+0x126>
 80033d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033d8:	e000      	b.n	80033dc <HAL_ADC_ConfigChannel+0x128>
 80033da:	2300      	movs	r3, #0
 80033dc:	461a      	mov	r2, r3
 80033de:	f7ff fa91 	bl	8002904 <LL_ADC_SetOffsetSaturation>
 80033e2:	e17b      	b.n	80036dc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff fa3e 	bl	800286c <LL_ADC_GetOffsetChannel>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10a      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x15c>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2100      	movs	r1, #0
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fa33 	bl	800286c <LL_ADC_GetOffsetChannel>
 8003406:	4603      	mov	r3, r0
 8003408:	0e9b      	lsrs	r3, r3, #26
 800340a:	f003 021f 	and.w	r2, r3, #31
 800340e:	e01e      	b.n	800344e <HAL_ADC_ConfigChannel+0x19a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2100      	movs	r1, #0
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fa28 	bl	800286c <LL_ADC_GetOffsetChannel>
 800341c:	4603      	mov	r3, r0
 800341e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003422:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003426:	fa93 f3a3 	rbit	r3, r3
 800342a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800342e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003432:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003436:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800343e:	2320      	movs	r3, #32
 8003440:	e004      	b.n	800344c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003442:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003446:	fab3 f383 	clz	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003456:	2b00      	cmp	r3, #0
 8003458:	d105      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x1b2>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	0e9b      	lsrs	r3, r3, #26
 8003460:	f003 031f 	and.w	r3, r3, #31
 8003464:	e018      	b.n	8003498 <HAL_ADC_ConfigChannel+0x1e4>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800347a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800347e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003482:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800348a:	2320      	movs	r3, #32
 800348c:	e004      	b.n	8003498 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800348e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003492:	fab3 f383 	clz	r3, r3
 8003496:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003498:	429a      	cmp	r2, r3
 800349a:	d106      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2200      	movs	r2, #0
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff f9f7 	bl	8002898 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2101      	movs	r1, #1
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff f9db 	bl	800286c <LL_ADC_GetOffsetChannel>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10a      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x222>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2101      	movs	r1, #1
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff f9d0 	bl	800286c <LL_ADC_GetOffsetChannel>
 80034cc:	4603      	mov	r3, r0
 80034ce:	0e9b      	lsrs	r3, r3, #26
 80034d0:	f003 021f 	and.w	r2, r3, #31
 80034d4:	e01e      	b.n	8003514 <HAL_ADC_ConfigChannel+0x260>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2101      	movs	r1, #1
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff f9c5 	bl	800286c <LL_ADC_GetOffsetChannel>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80034ec:	fa93 f3a3 	rbit	r3, r3
 80034f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80034f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80034fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003504:	2320      	movs	r3, #32
 8003506:	e004      	b.n	8003512 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003508:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800350c:	fab3 f383 	clz	r3, r3
 8003510:	b2db      	uxtb	r3, r3
 8003512:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800351c:	2b00      	cmp	r3, #0
 800351e:	d105      	bne.n	800352c <HAL_ADC_ConfigChannel+0x278>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	0e9b      	lsrs	r3, r3, #26
 8003526:	f003 031f 	and.w	r3, r3, #31
 800352a:	e018      	b.n	800355e <HAL_ADC_ConfigChannel+0x2aa>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003538:	fa93 f3a3 	rbit	r3, r3
 800353c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003540:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003544:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003548:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003550:	2320      	movs	r3, #32
 8003552:	e004      	b.n	800355e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003554:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003558:	fab3 f383 	clz	r3, r3
 800355c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800355e:	429a      	cmp	r2, r3
 8003560:	d106      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2200      	movs	r2, #0
 8003568:	2101      	movs	r1, #1
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff f994 	bl	8002898 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2102      	movs	r1, #2
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff f978 	bl	800286c <LL_ADC_GetOffsetChannel>
 800357c:	4603      	mov	r3, r0
 800357e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10a      	bne.n	800359c <HAL_ADC_ConfigChannel+0x2e8>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2102      	movs	r1, #2
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff f96d 	bl	800286c <LL_ADC_GetOffsetChannel>
 8003592:	4603      	mov	r3, r0
 8003594:	0e9b      	lsrs	r3, r3, #26
 8003596:	f003 021f 	and.w	r2, r3, #31
 800359a:	e01e      	b.n	80035da <HAL_ADC_ConfigChannel+0x326>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2102      	movs	r1, #2
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff f962 	bl	800286c <LL_ADC_GetOffsetChannel>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035b2:	fa93 f3a3 	rbit	r3, r3
 80035b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80035ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80035c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80035ca:	2320      	movs	r3, #32
 80035cc:	e004      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80035ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80035d2:	fab3 f383 	clz	r3, r3
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d105      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x33e>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	0e9b      	lsrs	r3, r3, #26
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	e016      	b.n	8003620 <HAL_ADC_ConfigChannel+0x36c>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003604:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003606:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800360a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003612:	2320      	movs	r3, #32
 8003614:	e004      	b.n	8003620 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003616:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800361a:	fab3 f383 	clz	r3, r3
 800361e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003620:	429a      	cmp	r2, r3
 8003622:	d106      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2200      	movs	r2, #0
 800362a:	2102      	movs	r1, #2
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff f933 	bl	8002898 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2103      	movs	r1, #3
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff f917 	bl	800286c <LL_ADC_GetOffsetChannel>
 800363e:	4603      	mov	r3, r0
 8003640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <HAL_ADC_ConfigChannel+0x3aa>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2103      	movs	r1, #3
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff f90c 	bl	800286c <LL_ADC_GetOffsetChannel>
 8003654:	4603      	mov	r3, r0
 8003656:	0e9b      	lsrs	r3, r3, #26
 8003658:	f003 021f 	and.w	r2, r3, #31
 800365c:	e017      	b.n	800368e <HAL_ADC_ConfigChannel+0x3da>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2103      	movs	r1, #3
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff f901 	bl	800286c <LL_ADC_GetOffsetChannel>
 800366a:	4603      	mov	r3, r0
 800366c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003676:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003678:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800367a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003680:	2320      	movs	r3, #32
 8003682:	e003      	b.n	800368c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003684:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003686:	fab3 f383 	clz	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003696:	2b00      	cmp	r3, #0
 8003698:	d105      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x3f2>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	0e9b      	lsrs	r3, r3, #26
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	e011      	b.n	80036ca <HAL_ADC_ConfigChannel+0x416>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80036b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80036b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80036be:	2320      	movs	r3, #32
 80036c0:	e003      	b.n	80036ca <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80036c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036c4:	fab3 f383 	clz	r3, r3
 80036c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d106      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2200      	movs	r2, #0
 80036d4:	2103      	movs	r1, #3
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff f8de 	bl	8002898 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff fa4f 	bl	8002b84 <LL_ADC_IsEnabled>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f040 813d 	bne.w	8003968 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6818      	ldr	r0, [r3, #0]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	6819      	ldr	r1, [r3, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	461a      	mov	r2, r3
 80036fc:	f7ff f99a 	bl	8002a34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4aa2      	ldr	r2, [pc, #648]	@ (8003990 <HAL_ADC_ConfigChannel+0x6dc>)
 8003706:	4293      	cmp	r3, r2
 8003708:	f040 812e 	bne.w	8003968 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10b      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x480>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	0e9b      	lsrs	r3, r3, #26
 8003722:	3301      	adds	r3, #1
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	2b09      	cmp	r3, #9
 800372a:	bf94      	ite	ls
 800372c:	2301      	movls	r3, #1
 800372e:	2300      	movhi	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	e019      	b.n	8003768 <HAL_ADC_ConfigChannel+0x4b4>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800373c:	fa93 f3a3 	rbit	r3, r3
 8003740:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003742:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003744:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003746:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800374c:	2320      	movs	r3, #32
 800374e:	e003      	b.n	8003758 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003750:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	3301      	adds	r3, #1
 800375a:	f003 031f 	and.w	r3, r3, #31
 800375e:	2b09      	cmp	r3, #9
 8003760:	bf94      	ite	ls
 8003762:	2301      	movls	r3, #1
 8003764:	2300      	movhi	r3, #0
 8003766:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003768:	2b00      	cmp	r3, #0
 800376a:	d079      	beq.n	8003860 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003774:	2b00      	cmp	r3, #0
 8003776:	d107      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x4d4>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	0e9b      	lsrs	r3, r3, #26
 800377e:	3301      	adds	r3, #1
 8003780:	069b      	lsls	r3, r3, #26
 8003782:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003786:	e015      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x500>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003790:	fa93 f3a3 	rbit	r3, r3
 8003794:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003798:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800379a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80037a0:	2320      	movs	r3, #32
 80037a2:	e003      	b.n	80037ac <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80037a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	3301      	adds	r3, #1
 80037ae:	069b      	lsls	r3, r3, #26
 80037b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d109      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x520>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	0e9b      	lsrs	r3, r3, #26
 80037c6:	3301      	adds	r3, #1
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	2101      	movs	r1, #1
 80037ce:	fa01 f303 	lsl.w	r3, r1, r3
 80037d2:	e017      	b.n	8003804 <HAL_ADC_ConfigChannel+0x550>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037dc:	fa93 f3a3 	rbit	r3, r3
 80037e0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80037e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80037e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80037ec:	2320      	movs	r3, #32
 80037ee:	e003      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80037f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037f2:	fab3 f383 	clz	r3, r3
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	3301      	adds	r3, #1
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	2101      	movs	r1, #1
 8003800:	fa01 f303 	lsl.w	r3, r1, r3
 8003804:	ea42 0103 	orr.w	r1, r2, r3
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10a      	bne.n	800382a <HAL_ADC_ConfigChannel+0x576>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	0e9b      	lsrs	r3, r3, #26
 800381a:	3301      	adds	r3, #1
 800381c:	f003 021f 	and.w	r2, r3, #31
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	051b      	lsls	r3, r3, #20
 8003828:	e018      	b.n	800385c <HAL_ADC_ConfigChannel+0x5a8>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800383a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800383c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003842:	2320      	movs	r3, #32
 8003844:	e003      	b.n	800384e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003848:	fab3 f383 	clz	r3, r3
 800384c:	b2db      	uxtb	r3, r3
 800384e:	3301      	adds	r3, #1
 8003850:	f003 021f 	and.w	r2, r3, #31
 8003854:	4613      	mov	r3, r2
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	4413      	add	r3, r2
 800385a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800385c:	430b      	orrs	r3, r1
 800385e:	e07e      	b.n	800395e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003868:	2b00      	cmp	r3, #0
 800386a:	d107      	bne.n	800387c <HAL_ADC_ConfigChannel+0x5c8>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	0e9b      	lsrs	r3, r3, #26
 8003872:	3301      	adds	r3, #1
 8003874:	069b      	lsls	r3, r3, #26
 8003876:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800387a:	e015      	b.n	80038a8 <HAL_ADC_ConfigChannel+0x5f4>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003884:	fa93 f3a3 	rbit	r3, r3
 8003888:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800388a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800388e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003894:	2320      	movs	r3, #32
 8003896:	e003      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389a:	fab3 f383 	clz	r3, r3
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	3301      	adds	r3, #1
 80038a2:	069b      	lsls	r3, r3, #26
 80038a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d109      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x614>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	0e9b      	lsrs	r3, r3, #26
 80038ba:	3301      	adds	r3, #1
 80038bc:	f003 031f 	and.w	r3, r3, #31
 80038c0:	2101      	movs	r1, #1
 80038c2:	fa01 f303 	lsl.w	r3, r1, r3
 80038c6:	e017      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x644>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	fa93 f3a3 	rbit	r3, r3
 80038d4:	61fb      	str	r3, [r7, #28]
  return result;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80038da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80038e0:	2320      	movs	r3, #32
 80038e2:	e003      	b.n	80038ec <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80038e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	3301      	adds	r3, #1
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	2101      	movs	r1, #1
 80038f4:	fa01 f303 	lsl.w	r3, r1, r3
 80038f8:	ea42 0103 	orr.w	r1, r2, r3
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10d      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x670>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	0e9b      	lsrs	r3, r3, #26
 800390e:	3301      	adds	r3, #1
 8003910:	f003 021f 	and.w	r2, r3, #31
 8003914:	4613      	mov	r3, r2
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	4413      	add	r3, r2
 800391a:	3b1e      	subs	r3, #30
 800391c:	051b      	lsls	r3, r3, #20
 800391e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003922:	e01b      	b.n	800395c <HAL_ADC_ConfigChannel+0x6a8>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	fa93 f3a3 	rbit	r3, r3
 8003930:	613b      	str	r3, [r7, #16]
  return result;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800393c:	2320      	movs	r3, #32
 800393e:	e003      	b.n	8003948 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	fab3 f383 	clz	r3, r3
 8003946:	b2db      	uxtb	r3, r3
 8003948:	3301      	adds	r3, #1
 800394a:	f003 021f 	and.w	r2, r3, #31
 800394e:	4613      	mov	r3, r2
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	4413      	add	r3, r2
 8003954:	3b1e      	subs	r3, #30
 8003956:	051b      	lsls	r3, r3, #20
 8003958:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800395c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003962:	4619      	mov	r1, r3
 8003964:	f7ff f83b 	bl	80029de <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b09      	ldr	r3, [pc, #36]	@ (8003994 <HAL_ADC_ConfigChannel+0x6e0>)
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80be 	beq.w	8003af2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800397e:	d004      	beq.n	800398a <HAL_ADC_ConfigChannel+0x6d6>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a04      	ldr	r2, [pc, #16]	@ (8003998 <HAL_ADC_ConfigChannel+0x6e4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d10a      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x6ec>
 800398a:	4b04      	ldr	r3, [pc, #16]	@ (800399c <HAL_ADC_ConfigChannel+0x6e8>)
 800398c:	e009      	b.n	80039a2 <HAL_ADC_ConfigChannel+0x6ee>
 800398e:	bf00      	nop
 8003990:	407f0000 	.word	0x407f0000
 8003994:	80080000 	.word	0x80080000
 8003998:	50000100 	.word	0x50000100
 800399c:	50000300 	.word	0x50000300
 80039a0:	4b59      	ldr	r3, [pc, #356]	@ (8003b08 <HAL_ADC_ConfigChannel+0x854>)
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fe ff30 	bl	8002808 <LL_ADC_GetCommonPathInternalCh>
 80039a8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a56      	ldr	r2, [pc, #344]	@ (8003b0c <HAL_ADC_ConfigChannel+0x858>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d004      	beq.n	80039c0 <HAL_ADC_ConfigChannel+0x70c>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a55      	ldr	r2, [pc, #340]	@ (8003b10 <HAL_ADC_ConfigChannel+0x85c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d13a      	bne.n	8003a36 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d134      	bne.n	8003a36 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039d4:	d005      	beq.n	80039e2 <HAL_ADC_ConfigChannel+0x72e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a4e      	ldr	r2, [pc, #312]	@ (8003b14 <HAL_ADC_ConfigChannel+0x860>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	f040 8085 	bne.w	8003aec <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039ea:	d004      	beq.n	80039f6 <HAL_ADC_ConfigChannel+0x742>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a49      	ldr	r2, [pc, #292]	@ (8003b18 <HAL_ADC_ConfigChannel+0x864>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d101      	bne.n	80039fa <HAL_ADC_ConfigChannel+0x746>
 80039f6:	4a49      	ldr	r2, [pc, #292]	@ (8003b1c <HAL_ADC_ConfigChannel+0x868>)
 80039f8:	e000      	b.n	80039fc <HAL_ADC_ConfigChannel+0x748>
 80039fa:	4a43      	ldr	r2, [pc, #268]	@ (8003b08 <HAL_ADC_ConfigChannel+0x854>)
 80039fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a04:	4619      	mov	r1, r3
 8003a06:	4610      	mov	r0, r2
 8003a08:	f7fe feeb 	bl	80027e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a0c:	4b44      	ldr	r3, [pc, #272]	@ (8003b20 <HAL_ADC_ConfigChannel+0x86c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	099b      	lsrs	r3, r3, #6
 8003a12:	4a44      	ldr	r2, [pc, #272]	@ (8003b24 <HAL_ADC_ConfigChannel+0x870>)
 8003a14:	fba2 2303 	umull	r2, r3, r2, r3
 8003a18:	099b      	lsrs	r3, r3, #6
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a26:	e002      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1f9      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a34:	e05a      	b.n	8003aec <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a3b      	ldr	r2, [pc, #236]	@ (8003b28 <HAL_ADC_ConfigChannel+0x874>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d125      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d11f      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a31      	ldr	r2, [pc, #196]	@ (8003b18 <HAL_ADC_ConfigChannel+0x864>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d104      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x7ac>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a34      	ldr	r2, [pc, #208]	@ (8003b2c <HAL_ADC_ConfigChannel+0x878>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d047      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a68:	d004      	beq.n	8003a74 <HAL_ADC_ConfigChannel+0x7c0>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8003b18 <HAL_ADC_ConfigChannel+0x864>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d101      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x7c4>
 8003a74:	4a29      	ldr	r2, [pc, #164]	@ (8003b1c <HAL_ADC_ConfigChannel+0x868>)
 8003a76:	e000      	b.n	8003a7a <HAL_ADC_ConfigChannel+0x7c6>
 8003a78:	4a23      	ldr	r2, [pc, #140]	@ (8003b08 <HAL_ADC_ConfigChannel+0x854>)
 8003a7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a82:	4619      	mov	r1, r3
 8003a84:	4610      	mov	r0, r2
 8003a86:	f7fe feac 	bl	80027e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a8a:	e031      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a27      	ldr	r2, [pc, #156]	@ (8003b30 <HAL_ADC_ConfigChannel+0x87c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d12d      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d127      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8003b18 <HAL_ADC_ConfigChannel+0x864>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d022      	beq.n	8003af2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ab4:	d004      	beq.n	8003ac0 <HAL_ADC_ConfigChannel+0x80c>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a17      	ldr	r2, [pc, #92]	@ (8003b18 <HAL_ADC_ConfigChannel+0x864>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d101      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x810>
 8003ac0:	4a16      	ldr	r2, [pc, #88]	@ (8003b1c <HAL_ADC_ConfigChannel+0x868>)
 8003ac2:	e000      	b.n	8003ac6 <HAL_ADC_ConfigChannel+0x812>
 8003ac4:	4a10      	ldr	r2, [pc, #64]	@ (8003b08 <HAL_ADC_ConfigChannel+0x854>)
 8003ac6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003aca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	f7fe fe86 	bl	80027e2 <LL_ADC_SetCommonPathInternalCh>
 8003ad6:	e00c      	b.n	8003af2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003adc:	f043 0220 	orr.w	r2, r3, #32
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003aea:	e002      	b.n	8003af2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003aec:	bf00      	nop
 8003aee:	e000      	b.n	8003af2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003af0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003afa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	37d8      	adds	r7, #216	@ 0xd8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	50000700 	.word	0x50000700
 8003b0c:	c3210000 	.word	0xc3210000
 8003b10:	90c00010 	.word	0x90c00010
 8003b14:	50000600 	.word	0x50000600
 8003b18:	50000100 	.word	0x50000100
 8003b1c:	50000300 	.word	0x50000300
 8003b20:	20000000 	.word	0x20000000
 8003b24:	053e2d63 	.word	0x053e2d63
 8003b28:	c7520000 	.word	0xc7520000
 8003b2c:	50000500 	.word	0x50000500
 8003b30:	cb840000 	.word	0xcb840000

08003b34 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff f868 	bl	8002c20 <LL_ADC_REG_IsConversionOngoing>
 8003b50:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff f889 	bl	8002c6e <LL_ADC_INJ_IsConversionOngoing>
 8003b5c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d103      	bne.n	8003b6c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 8098 	beq.w	8003c9c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d02a      	beq.n	8003bd0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	7f5b      	ldrb	r3, [r3, #29]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d126      	bne.n	8003bd0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	7f1b      	ldrb	r3, [r3, #28]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d122      	bne.n	8003bd0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003b8e:	e014      	b.n	8003bba <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4a45      	ldr	r2, [pc, #276]	@ (8003ca8 <ADC_ConversionStop+0x174>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d90d      	bls.n	8003bb4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9c:	f043 0210 	orr.w	r2, r3, #16
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba8:	f043 0201 	orr.w	r2, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e074      	b.n	8003c9e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc4:	2b40      	cmp	r3, #64	@ 0x40
 8003bc6:	d1e3      	bne.n	8003b90 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2240      	movs	r2, #64	@ 0x40
 8003bce:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d014      	beq.n	8003c00 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff f820 	bl	8002c20 <LL_ADC_REG_IsConversionOngoing>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00c      	beq.n	8003c00 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe ffdd 	bl	8002baa <LL_ADC_IsDisableOngoing>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d104      	bne.n	8003c00 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fffc 	bl	8002bf8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d014      	beq.n	8003c30 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff f82f 	bl	8002c6e <LL_ADC_INJ_IsConversionOngoing>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00c      	beq.n	8003c30 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fe ffc5 	bl	8002baa <LL_ADC_IsDisableOngoing>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d104      	bne.n	8003c30 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff f80b 	bl	8002c46 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d005      	beq.n	8003c42 <ADC_ConversionStop+0x10e>
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d105      	bne.n	8003c48 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003c3c:	230c      	movs	r3, #12
 8003c3e:	617b      	str	r3, [r7, #20]
        break;
 8003c40:	e005      	b.n	8003c4e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003c42:	2308      	movs	r3, #8
 8003c44:	617b      	str	r3, [r7, #20]
        break;
 8003c46:	e002      	b.n	8003c4e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c48:	2304      	movs	r3, #4
 8003c4a:	617b      	str	r3, [r7, #20]
        break;
 8003c4c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003c4e:	f7fe fd87 	bl	8002760 <HAL_GetTick>
 8003c52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c54:	e01b      	b.n	8003c8e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c56:	f7fe fd83 	bl	8002760 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b05      	cmp	r3, #5
 8003c62:	d914      	bls.n	8003c8e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00d      	beq.n	8003c8e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c76:	f043 0210 	orr.w	r2, r3, #16
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c82:	f043 0201 	orr.w	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e007      	b.n	8003c9e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1dc      	bne.n	8003c56 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	a33fffff 	.word	0xa33fffff

08003cac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe ff61 	bl	8002b84 <LL_ADC_IsEnabled>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d176      	bne.n	8003db6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	4b3c      	ldr	r3, [pc, #240]	@ (8003dc0 <ADC_Enable+0x114>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00d      	beq.n	8003cf2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cda:	f043 0210 	orr.w	r2, r3, #16
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce6:	f043 0201 	orr.w	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e062      	b.n	8003db8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe ff1c 	bl	8002b34 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d04:	d004      	beq.n	8003d10 <ADC_Enable+0x64>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a2e      	ldr	r2, [pc, #184]	@ (8003dc4 <ADC_Enable+0x118>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d101      	bne.n	8003d14 <ADC_Enable+0x68>
 8003d10:	4b2d      	ldr	r3, [pc, #180]	@ (8003dc8 <ADC_Enable+0x11c>)
 8003d12:	e000      	b.n	8003d16 <ADC_Enable+0x6a>
 8003d14:	4b2d      	ldr	r3, [pc, #180]	@ (8003dcc <ADC_Enable+0x120>)
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fe fd76 	bl	8002808 <LL_ADC_GetCommonPathInternalCh>
 8003d1c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d013      	beq.n	8003d4e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d26:	4b2a      	ldr	r3, [pc, #168]	@ (8003dd0 <ADC_Enable+0x124>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	099b      	lsrs	r3, r3, #6
 8003d2c:	4a29      	ldr	r2, [pc, #164]	@ (8003dd4 <ADC_Enable+0x128>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	099b      	lsrs	r3, r3, #6
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	4613      	mov	r3, r2
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d40:	e002      	b.n	8003d48 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	3b01      	subs	r3, #1
 8003d46:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f9      	bne.n	8003d42 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d4e:	f7fe fd07 	bl	8002760 <HAL_GetTick>
 8003d52:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d54:	e028      	b.n	8003da8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe ff12 	bl	8002b84 <LL_ADC_IsEnabled>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d104      	bne.n	8003d70 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe fee2 	bl	8002b34 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d70:	f7fe fcf6 	bl	8002760 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d914      	bls.n	8003da8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d00d      	beq.n	8003da8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d90:	f043 0210 	orr.w	r2, r3, #16
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d9c:	f043 0201 	orr.w	r2, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e007      	b.n	8003db8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d1cf      	bne.n	8003d56 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	8000003f 	.word	0x8000003f
 8003dc4:	50000100 	.word	0x50000100
 8003dc8:	50000300 	.word	0x50000300
 8003dcc:	50000700 	.word	0x50000700
 8003dd0:	20000000 	.word	0x20000000
 8003dd4:	053e2d63 	.word	0x053e2d63

08003dd8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fe fee0 	bl	8002baa <LL_ADC_IsDisableOngoing>
 8003dea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fe fec7 	bl	8002b84 <LL_ADC_IsEnabled>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d047      	beq.n	8003e8c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d144      	bne.n	8003e8c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 030d 	and.w	r3, r3, #13
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d10c      	bne.n	8003e2a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe fea1 	bl	8002b5c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2203      	movs	r2, #3
 8003e20:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e22:	f7fe fc9d 	bl	8002760 <HAL_GetTick>
 8003e26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e28:	e029      	b.n	8003e7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2e:	f043 0210 	orr.w	r2, r3, #16
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e3a:	f043 0201 	orr.w	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e023      	b.n	8003e8e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e46:	f7fe fc8b 	bl	8002760 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d914      	bls.n	8003e7e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00d      	beq.n	8003e7e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e66:	f043 0210 	orr.w	r2, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e72:	f043 0201 	orr.w	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e007      	b.n	8003e8e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1dc      	bne.n	8003e46 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d14b      	bne.n	8003f48 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d021      	beq.n	8003f0e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe fd46 	bl	8002960 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d032      	beq.n	8003f40 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d12b      	bne.n	8003f40 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d11f      	bne.n	8003f40 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f04:	f043 0201 	orr.w	r2, r3, #1
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f0c:	e018      	b.n	8003f40 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d111      	bne.n	8003f40 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d105      	bne.n	8003f40 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f38:	f043 0201 	orr.w	r2, r3, #1
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f7ff f998 	bl	8003276 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f46:	e00e      	b.n	8003f66 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f7ff f9a2 	bl	800329e <HAL_ADC_ErrorCallback>
}
 8003f5a:	e004      	b.n	8003f66 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	4798      	blx	r3
}
 8003f66:	bf00      	nop
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f7ff f984 	bl	800328a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa8:	f043 0204 	orr.w	r2, r3, #4
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7ff f974 	bl	800329e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <LL_ADC_IsEnabled>:
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <LL_ADC_IsEnabled+0x18>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <LL_ADC_IsEnabled+0x1a>
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <LL_ADC_REG_IsConversionOngoing>:
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d101      	bne.n	8003ffc <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
	...

0800400c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800400c:	b590      	push	{r4, r7, lr}
 800400e:	b0a1      	sub	sp, #132	@ 0x84
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004026:	2302      	movs	r3, #2
 8004028:	e0e7      	b.n	80041fa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004032:	2300      	movs	r3, #0
 8004034:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004036:	2300      	movs	r3, #0
 8004038:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004042:	d102      	bne.n	800404a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004044:	4b6f      	ldr	r3, [pc, #444]	@ (8004204 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	e009      	b.n	800405e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a6e      	ldr	r2, [pc, #440]	@ (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d102      	bne.n	800405a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004054:	4b6d      	ldr	r3, [pc, #436]	@ (800420c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	e001      	b.n	800405e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800405a:	2300      	movs	r3, #0
 800405c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10b      	bne.n	800407c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004068:	f043 0220 	orr.w	r2, r3, #32
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0be      	b.n	80041fa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff ffb0 	bl	8003fe4 <LL_ADC_REG_IsConversionOngoing>
 8004084:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff ffaa 	bl	8003fe4 <LL_ADC_REG_IsConversionOngoing>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	f040 80a0 	bne.w	80041d8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004098:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800409a:	2b00      	cmp	r3, #0
 800409c:	f040 809c 	bne.w	80041d8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040a8:	d004      	beq.n	80040b4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a55      	ldr	r2, [pc, #340]	@ (8004204 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d101      	bne.n	80040b8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80040b4:	4b56      	ldr	r3, [pc, #344]	@ (8004210 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80040b6:	e000      	b.n	80040ba <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80040b8:	4b56      	ldr	r3, [pc, #344]	@ (8004214 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80040ba:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d04b      	beq.n	800415c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80040c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	6859      	ldr	r1, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80040d6:	035b      	lsls	r3, r3, #13
 80040d8:	430b      	orrs	r3, r1
 80040da:	431a      	orrs	r2, r3
 80040dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040de:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040e8:	d004      	beq.n	80040f4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a45      	ldr	r2, [pc, #276]	@ (8004204 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d10f      	bne.n	8004114 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80040f4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80040f8:	f7ff ff61 	bl	8003fbe <LL_ADC_IsEnabled>
 80040fc:	4604      	mov	r4, r0
 80040fe:	4841      	ldr	r0, [pc, #260]	@ (8004204 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004100:	f7ff ff5d 	bl	8003fbe <LL_ADC_IsEnabled>
 8004104:	4603      	mov	r3, r0
 8004106:	4323      	orrs	r3, r4
 8004108:	2b00      	cmp	r3, #0
 800410a:	bf0c      	ite	eq
 800410c:	2301      	moveq	r3, #1
 800410e:	2300      	movne	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	e012      	b.n	800413a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004114:	483c      	ldr	r0, [pc, #240]	@ (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004116:	f7ff ff52 	bl	8003fbe <LL_ADC_IsEnabled>
 800411a:	4604      	mov	r4, r0
 800411c:	483b      	ldr	r0, [pc, #236]	@ (800420c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800411e:	f7ff ff4e 	bl	8003fbe <LL_ADC_IsEnabled>
 8004122:	4603      	mov	r3, r0
 8004124:	431c      	orrs	r4, r3
 8004126:	483c      	ldr	r0, [pc, #240]	@ (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004128:	f7ff ff49 	bl	8003fbe <LL_ADC_IsEnabled>
 800412c:	4603      	mov	r3, r0
 800412e:	4323      	orrs	r3, r4
 8004130:	2b00      	cmp	r3, #0
 8004132:	bf0c      	ite	eq
 8004134:	2301      	moveq	r3, #1
 8004136:	2300      	movne	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d056      	beq.n	80041ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800413e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004146:	f023 030f 	bic.w	r3, r3, #15
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	6811      	ldr	r1, [r2, #0]
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	6892      	ldr	r2, [r2, #8]
 8004152:	430a      	orrs	r2, r1
 8004154:	431a      	orrs	r2, r3
 8004156:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004158:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800415a:	e047      	b.n	80041ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800415c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004164:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004166:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004170:	d004      	beq.n	800417c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a23      	ldr	r2, [pc, #140]	@ (8004204 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d10f      	bne.n	800419c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800417c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004180:	f7ff ff1d 	bl	8003fbe <LL_ADC_IsEnabled>
 8004184:	4604      	mov	r4, r0
 8004186:	481f      	ldr	r0, [pc, #124]	@ (8004204 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004188:	f7ff ff19 	bl	8003fbe <LL_ADC_IsEnabled>
 800418c:	4603      	mov	r3, r0
 800418e:	4323      	orrs	r3, r4
 8004190:	2b00      	cmp	r3, #0
 8004192:	bf0c      	ite	eq
 8004194:	2301      	moveq	r3, #1
 8004196:	2300      	movne	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	e012      	b.n	80041c2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800419c:	481a      	ldr	r0, [pc, #104]	@ (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800419e:	f7ff ff0e 	bl	8003fbe <LL_ADC_IsEnabled>
 80041a2:	4604      	mov	r4, r0
 80041a4:	4819      	ldr	r0, [pc, #100]	@ (800420c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80041a6:	f7ff ff0a 	bl	8003fbe <LL_ADC_IsEnabled>
 80041aa:	4603      	mov	r3, r0
 80041ac:	431c      	orrs	r4, r3
 80041ae:	481a      	ldr	r0, [pc, #104]	@ (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80041b0:	f7ff ff05 	bl	8003fbe <LL_ADC_IsEnabled>
 80041b4:	4603      	mov	r3, r0
 80041b6:	4323      	orrs	r3, r4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d012      	beq.n	80041ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80041c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80041ce:	f023 030f 	bic.w	r3, r3, #15
 80041d2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80041d4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80041d6:	e009      	b.n	80041ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041dc:	f043 0220 	orr.w	r2, r3, #32
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80041ea:	e000      	b.n	80041ee <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80041ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80041f6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3784      	adds	r7, #132	@ 0x84
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd90      	pop	{r4, r7, pc}
 8004202:	bf00      	nop
 8004204:	50000100 	.word	0x50000100
 8004208:	50000400 	.word	0x50000400
 800420c:	50000500 	.word	0x50000500
 8004210:	50000300 	.word	0x50000300
 8004214:	50000700 	.word	0x50000700
 8004218:	50000600 	.word	0x50000600

0800421c <__NVIC_SetPriorityGrouping>:
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800422c:	4b0c      	ldr	r3, [pc, #48]	@ (8004260 <__NVIC_SetPriorityGrouping+0x44>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004238:	4013      	ands	r3, r2
 800423a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004244:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800424c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800424e:	4a04      	ldr	r2, [pc, #16]	@ (8004260 <__NVIC_SetPriorityGrouping+0x44>)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	60d3      	str	r3, [r2, #12]
}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	e000ed00 	.word	0xe000ed00

08004264 <__NVIC_GetPriorityGrouping>:
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004268:	4b04      	ldr	r3, [pc, #16]	@ (800427c <__NVIC_GetPriorityGrouping+0x18>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	0a1b      	lsrs	r3, r3, #8
 800426e:	f003 0307 	and.w	r3, r3, #7
}
 8004272:	4618      	mov	r0, r3
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	e000ed00 	.word	0xe000ed00

08004280 <__NVIC_EnableIRQ>:
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800428a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428e:	2b00      	cmp	r3, #0
 8004290:	db0b      	blt.n	80042aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	f003 021f 	and.w	r2, r3, #31
 8004298:	4907      	ldr	r1, [pc, #28]	@ (80042b8 <__NVIC_EnableIRQ+0x38>)
 800429a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	2001      	movs	r0, #1
 80042a2:	fa00 f202 	lsl.w	r2, r0, r2
 80042a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	e000e100 	.word	0xe000e100

080042bc <__NVIC_SetPriority>:
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	6039      	str	r1, [r7, #0]
 80042c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	db0a      	blt.n	80042e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	490c      	ldr	r1, [pc, #48]	@ (8004308 <__NVIC_SetPriority+0x4c>)
 80042d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042da:	0112      	lsls	r2, r2, #4
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	440b      	add	r3, r1
 80042e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80042e4:	e00a      	b.n	80042fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	4908      	ldr	r1, [pc, #32]	@ (800430c <__NVIC_SetPriority+0x50>)
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	3b04      	subs	r3, #4
 80042f4:	0112      	lsls	r2, r2, #4
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	440b      	add	r3, r1
 80042fa:	761a      	strb	r2, [r3, #24]
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	e000e100 	.word	0xe000e100
 800430c:	e000ed00 	.word	0xe000ed00

08004310 <NVIC_EncodePriority>:
{
 8004310:	b480      	push	{r7}
 8004312:	b089      	sub	sp, #36	@ 0x24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f1c3 0307 	rsb	r3, r3, #7
 800432a:	2b04      	cmp	r3, #4
 800432c:	bf28      	it	cs
 800432e:	2304      	movcs	r3, #4
 8004330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	3304      	adds	r3, #4
 8004336:	2b06      	cmp	r3, #6
 8004338:	d902      	bls.n	8004340 <NVIC_EncodePriority+0x30>
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	3b03      	subs	r3, #3
 800433e:	e000      	b.n	8004342 <NVIC_EncodePriority+0x32>
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004344:	f04f 32ff 	mov.w	r2, #4294967295
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43da      	mvns	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	401a      	ands	r2, r3
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004358:	f04f 31ff 	mov.w	r1, #4294967295
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	fa01 f303 	lsl.w	r3, r1, r3
 8004362:	43d9      	mvns	r1, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004368:	4313      	orrs	r3, r2
}
 800436a:	4618      	mov	r0, r3
 800436c:	3724      	adds	r7, #36	@ 0x24
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <SysTick_Config>:
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3b01      	subs	r3, #1
 8004384:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004388:	d301      	bcc.n	800438e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800438a:	2301      	movs	r3, #1
 800438c:	e00f      	b.n	80043ae <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800438e:	4a0a      	ldr	r2, [pc, #40]	@ (80043b8 <SysTick_Config+0x40>)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3b01      	subs	r3, #1
 8004394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004396:	210f      	movs	r1, #15
 8004398:	f04f 30ff 	mov.w	r0, #4294967295
 800439c:	f7ff ff8e 	bl	80042bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043a0:	4b05      	ldr	r3, [pc, #20]	@ (80043b8 <SysTick_Config+0x40>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043a6:	4b04      	ldr	r3, [pc, #16]	@ (80043b8 <SysTick_Config+0x40>)
 80043a8:	2207      	movs	r2, #7
 80043aa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	e000e010 	.word	0xe000e010

080043bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff ff29 	bl	800421c <__NVIC_SetPriorityGrouping>
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b086      	sub	sp, #24
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	4603      	mov	r3, r0
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
 80043de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043e0:	f7ff ff40 	bl	8004264 <__NVIC_GetPriorityGrouping>
 80043e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	6978      	ldr	r0, [r7, #20]
 80043ec:	f7ff ff90 	bl	8004310 <NVIC_EncodePriority>
 80043f0:	4602      	mov	r2, r0
 80043f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f6:	4611      	mov	r1, r2
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff ff5f 	bl	80042bc <__NVIC_SetPriority>
}
 80043fe:	bf00      	nop
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
 800440c:	4603      	mov	r3, r0
 800440e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff ff33 	bl	8004280 <__NVIC_EnableIRQ>
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff ffa4 	bl	8004378 <SysTick_Config>
 8004430:	4603      	mov	r3, r0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e08d      	b.n	800456a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	4b47      	ldr	r3, [pc, #284]	@ (8004574 <HAL_DMA_Init+0x138>)
 8004456:	429a      	cmp	r2, r3
 8004458:	d80f      	bhi.n	800447a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	4b45      	ldr	r3, [pc, #276]	@ (8004578 <HAL_DMA_Init+0x13c>)
 8004462:	4413      	add	r3, r2
 8004464:	4a45      	ldr	r2, [pc, #276]	@ (800457c <HAL_DMA_Init+0x140>)
 8004466:	fba2 2303 	umull	r2, r3, r2, r3
 800446a:	091b      	lsrs	r3, r3, #4
 800446c:	009a      	lsls	r2, r3, #2
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a42      	ldr	r2, [pc, #264]	@ (8004580 <HAL_DMA_Init+0x144>)
 8004476:	641a      	str	r2, [r3, #64]	@ 0x40
 8004478:	e00e      	b.n	8004498 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	4b40      	ldr	r3, [pc, #256]	@ (8004584 <HAL_DMA_Init+0x148>)
 8004482:	4413      	add	r3, r2
 8004484:	4a3d      	ldr	r2, [pc, #244]	@ (800457c <HAL_DMA_Init+0x140>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	091b      	lsrs	r3, r3, #4
 800448c:	009a      	lsls	r2, r3, #2
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a3c      	ldr	r2, [pc, #240]	@ (8004588 <HAL_DMA_Init+0x14c>)
 8004496:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80044ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80044bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fa76 	bl	80049dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044f8:	d102      	bne.n	8004500 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004514:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d010      	beq.n	8004540 <HAL_DMA_Init+0x104>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b04      	cmp	r3, #4
 8004524:	d80c      	bhi.n	8004540 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fa96 	bl	8004a58 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800453c:	605a      	str	r2, [r3, #4]
 800453e:	e008      	b.n	8004552 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40020407 	.word	0x40020407
 8004578:	bffdfff8 	.word	0xbffdfff8
 800457c:	cccccccd 	.word	0xcccccccd
 8004580:	40020000 	.word	0x40020000
 8004584:	bffdfbf8 	.word	0xbffdfbf8
 8004588:	40020400 	.word	0x40020400

0800458c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_DMA_Start_IT+0x20>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e066      	b.n	800467a <HAL_DMA_Start_IT+0xee>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d155      	bne.n	800466c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0201 	bic.w	r2, r2, #1
 80045dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f9bb 	bl	8004960 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d008      	beq.n	8004604 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f042 020e 	orr.w	r2, r2, #14
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	e00f      	b.n	8004624 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0204 	bic.w	r2, r2, #4
 8004612:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 020a 	orr.w	r2, r2, #10
 8004622:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d007      	beq.n	8004642 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800463c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004640:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004646:	2b00      	cmp	r3, #0
 8004648:	d007      	beq.n	800465a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004654:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004658:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0201 	orr.w	r2, r2, #1
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	e005      	b.n	8004678 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004674:	2302      	movs	r3, #2
 8004676:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004678:	7dfb      	ldrb	r3, [r7, #23]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004682:	b480      	push	{r7}
 8004684:	b085      	sub	sp, #20
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d005      	beq.n	80046a6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2204      	movs	r2, #4
 800469e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
 80046a4:	e037      	b.n	8004716 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 020e 	bic.w	r2, r2, #14
 80046b4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046c4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0201 	bic.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046da:	f003 021f 	and.w	r2, r3, #31
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e2:	2101      	movs	r1, #1
 80046e4:	fa01 f202 	lsl.w	r2, r1, r2
 80046e8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046f2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00c      	beq.n	8004716 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004706:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800470a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004714:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004726:	7bfb      	ldrb	r3, [r7, #15]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d00d      	beq.n	8004768 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2204      	movs	r2, #4
 8004750:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	73fb      	strb	r3, [r7, #15]
 8004766:	e047      	b.n	80047f8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 020e 	bic.w	r2, r2, #14
 8004776:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0201 	bic.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004792:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004796:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479c:	f003 021f 	and.w	r2, r3, #31
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a4:	2101      	movs	r1, #1
 80047a6:	fa01 f202 	lsl.w	r2, r1, r2
 80047aa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80047b4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00c      	beq.n	80047d8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80047d6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	4798      	blx	r3
    }
  }
  return status;
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481e:	f003 031f 	and.w	r3, r3, #31
 8004822:	2204      	movs	r2, #4
 8004824:	409a      	lsls	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4013      	ands	r3, r2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d026      	beq.n	800487c <HAL_DMA_IRQHandler+0x7a>
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d021      	beq.n	800487c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b00      	cmp	r3, #0
 8004844:	d107      	bne.n	8004856 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0204 	bic.w	r2, r2, #4
 8004854:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485a:	f003 021f 	and.w	r2, r3, #31
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004862:	2104      	movs	r1, #4
 8004864:	fa01 f202 	lsl.w	r2, r1, r2
 8004868:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800486e:	2b00      	cmp	r3, #0
 8004870:	d071      	beq.n	8004956 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800487a:	e06c      	b.n	8004956 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004880:	f003 031f 	and.w	r3, r3, #31
 8004884:	2202      	movs	r2, #2
 8004886:	409a      	lsls	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4013      	ands	r3, r2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d02e      	beq.n	80048ee <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d029      	beq.n	80048ee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10b      	bne.n	80048c0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 020a 	bic.w	r2, r2, #10
 80048b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c4:	f003 021f 	and.w	r2, r3, #31
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048cc:	2102      	movs	r1, #2
 80048ce:	fa01 f202 	lsl.w	r2, r1, r2
 80048d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d038      	beq.n	8004956 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80048ec:	e033      	b.n	8004956 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f2:	f003 031f 	and.w	r3, r3, #31
 80048f6:	2208      	movs	r2, #8
 80048f8:	409a      	lsls	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4013      	ands	r3, r2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d02a      	beq.n	8004958 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d025      	beq.n	8004958 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 020e 	bic.w	r2, r2, #14
 800491a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004920:	f003 021f 	and.w	r2, r3, #31
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004928:	2101      	movs	r1, #1
 800492a:	fa01 f202 	lsl.w	r2, r1, r2
 800492e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800494a:	2b00      	cmp	r3, #0
 800494c:	d004      	beq.n	8004958 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004956:	bf00      	nop
 8004958:	bf00      	nop
}
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004976:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800497c:	2b00      	cmp	r3, #0
 800497e:	d004      	beq.n	800498a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004988:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498e:	f003 021f 	and.w	r2, r3, #31
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004996:	2101      	movs	r1, #1
 8004998:	fa01 f202 	lsl.w	r2, r1, r2
 800499c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	2b10      	cmp	r3, #16
 80049ac:	d108      	bne.n	80049c0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049be:	e007      	b.n	80049d0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	60da      	str	r2, [r3, #12]
}
 80049d0:	bf00      	nop
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	4b16      	ldr	r3, [pc, #88]	@ (8004a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d802      	bhi.n	80049f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80049f0:	4b15      	ldr	r3, [pc, #84]	@ (8004a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	e001      	b.n	80049fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80049f6:	4b15      	ldr	r3, [pc, #84]	@ (8004a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80049f8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	3b08      	subs	r3, #8
 8004a06:	4a12      	ldr	r2, [pc, #72]	@ (8004a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004a08:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a14:	089b      	lsrs	r3, r3, #2
 8004a16:	009a      	lsls	r2, r3, #2
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a0b      	ldr	r2, [pc, #44]	@ (8004a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004a26:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f003 031f 	and.w	r3, r3, #31
 8004a2e:	2201      	movs	r2, #1
 8004a30:	409a      	lsls	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	40020407 	.word	0x40020407
 8004a48:	40020800 	.word	0x40020800
 8004a4c:	40020820 	.word	0x40020820
 8004a50:	cccccccd 	.word	0xcccccccd
 8004a54:	40020880 	.word	0x40020880

08004a58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	461a      	mov	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a08      	ldr	r2, [pc, #32]	@ (8004a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004a7a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	f003 031f 	and.w	r3, r3, #31
 8004a84:	2201      	movs	r2, #1
 8004a86:	409a      	lsls	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004a8c:	bf00      	nop
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	1000823f 	.word	0x1000823f
 8004a9c:	40020940 	.word	0x40020940

08004aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004aae:	e15a      	b.n	8004d66 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8004abc:	4013      	ands	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 814c 	beq.w	8004d60 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 0303 	and.w	r3, r3, #3
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d005      	beq.n	8004ae0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d130      	bne.n	8004b42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	2203      	movs	r2, #3
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	43db      	mvns	r3, r3
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	4013      	ands	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b16:	2201      	movs	r2, #1
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4013      	ands	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	091b      	lsrs	r3, r3, #4
 8004b2c:	f003 0201 	and.w	r2, r3, #1
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	d017      	beq.n	8004b7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	2203      	movs	r2, #3
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4013      	ands	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d123      	bne.n	8004bd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	08da      	lsrs	r2, r3, #3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3208      	adds	r2, #8
 8004b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	220f      	movs	r2, #15
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4013      	ands	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	08da      	lsrs	r2, r3, #3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3208      	adds	r2, #8
 8004bcc:	6939      	ldr	r1, [r7, #16]
 8004bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	2203      	movs	r2, #3
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	43db      	mvns	r3, r3
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4013      	ands	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f003 0203 	and.w	r2, r3, #3
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 80a6 	beq.w	8004d60 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c14:	4b5b      	ldr	r3, [pc, #364]	@ (8004d84 <HAL_GPIO_Init+0x2e4>)
 8004c16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c18:	4a5a      	ldr	r2, [pc, #360]	@ (8004d84 <HAL_GPIO_Init+0x2e4>)
 8004c1a:	f043 0301 	orr.w	r3, r3, #1
 8004c1e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004c20:	4b58      	ldr	r3, [pc, #352]	@ (8004d84 <HAL_GPIO_Init+0x2e4>)
 8004c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	60bb      	str	r3, [r7, #8]
 8004c2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c2c:	4a56      	ldr	r2, [pc, #344]	@ (8004d88 <HAL_GPIO_Init+0x2e8>)
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	089b      	lsrs	r3, r3, #2
 8004c32:	3302      	adds	r3, #2
 8004c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f003 0303 	and.w	r3, r3, #3
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	220f      	movs	r2, #15
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004c56:	d01f      	beq.n	8004c98 <HAL_GPIO_Init+0x1f8>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a4c      	ldr	r2, [pc, #304]	@ (8004d8c <HAL_GPIO_Init+0x2ec>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d019      	beq.n	8004c94 <HAL_GPIO_Init+0x1f4>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a4b      	ldr	r2, [pc, #300]	@ (8004d90 <HAL_GPIO_Init+0x2f0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d013      	beq.n	8004c90 <HAL_GPIO_Init+0x1f0>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a4a      	ldr	r2, [pc, #296]	@ (8004d94 <HAL_GPIO_Init+0x2f4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00d      	beq.n	8004c8c <HAL_GPIO_Init+0x1ec>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a49      	ldr	r2, [pc, #292]	@ (8004d98 <HAL_GPIO_Init+0x2f8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d007      	beq.n	8004c88 <HAL_GPIO_Init+0x1e8>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a48      	ldr	r2, [pc, #288]	@ (8004d9c <HAL_GPIO_Init+0x2fc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d101      	bne.n	8004c84 <HAL_GPIO_Init+0x1e4>
 8004c80:	2305      	movs	r3, #5
 8004c82:	e00a      	b.n	8004c9a <HAL_GPIO_Init+0x1fa>
 8004c84:	2306      	movs	r3, #6
 8004c86:	e008      	b.n	8004c9a <HAL_GPIO_Init+0x1fa>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	e006      	b.n	8004c9a <HAL_GPIO_Init+0x1fa>
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e004      	b.n	8004c9a <HAL_GPIO_Init+0x1fa>
 8004c90:	2302      	movs	r3, #2
 8004c92:	e002      	b.n	8004c9a <HAL_GPIO_Init+0x1fa>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <HAL_GPIO_Init+0x1fa>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	f002 0203 	and.w	r2, r2, #3
 8004ca0:	0092      	lsls	r2, r2, #2
 8004ca2:	4093      	lsls	r3, r2
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004caa:	4937      	ldr	r1, [pc, #220]	@ (8004d88 <HAL_GPIO_Init+0x2e8>)
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	089b      	lsrs	r3, r3, #2
 8004cb0:	3302      	adds	r3, #2
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004cb8:	4b39      	ldr	r3, [pc, #228]	@ (8004da0 <HAL_GPIO_Init+0x300>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004cdc:	4a30      	ldr	r2, [pc, #192]	@ (8004da0 <HAL_GPIO_Init+0x300>)
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8004da0 <HAL_GPIO_Init+0x300>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	43db      	mvns	r3, r3
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d06:	4a26      	ldr	r2, [pc, #152]	@ (8004da0 <HAL_GPIO_Init+0x300>)
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004d0c:	4b24      	ldr	r3, [pc, #144]	@ (8004da0 <HAL_GPIO_Init+0x300>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	43db      	mvns	r3, r3
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d30:	4a1b      	ldr	r2, [pc, #108]	@ (8004da0 <HAL_GPIO_Init+0x300>)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d36:	4b1a      	ldr	r3, [pc, #104]	@ (8004da0 <HAL_GPIO_Init+0x300>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4013      	ands	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d5a:	4a11      	ldr	r2, [pc, #68]	@ (8004da0 <HAL_GPIO_Init+0x300>)
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	3301      	adds	r3, #1
 8004d64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f47f ae9d 	bne.w	8004ab0 <HAL_GPIO_Init+0x10>
  }
}
 8004d76:	bf00      	nop
 8004d78:	bf00      	nop
 8004d7a:	371c      	adds	r7, #28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	40021000 	.word	0x40021000
 8004d88:	40010000 	.word	0x40010000
 8004d8c:	48000400 	.word	0x48000400
 8004d90:	48000800 	.word	0x48000800
 8004d94:	48000c00 	.word	0x48000c00
 8004d98:	48001000 	.word	0x48001000
 8004d9c:	48001400 	.word	0x48001400
 8004da0:	40010400 	.word	0x40010400

08004da4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	887b      	ldrh	r3, [r7, #2]
 8004db6:	4013      	ands	r3, r2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	73fb      	strb	r3, [r7, #15]
 8004dc0:	e001      	b.n	8004dc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	807b      	strh	r3, [r7, #2]
 8004de0:	4613      	mov	r3, r2
 8004de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004de4:	787b      	ldrb	r3, [r7, #1]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004dea:	887a      	ldrh	r2, [r7, #2]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004df0:	e002      	b.n	8004df8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004df2:	887a      	ldrh	r2, [r7, #2]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e16:	887a      	ldrh	r2, [r7, #2]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	041a      	lsls	r2, r3, #16
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	43d9      	mvns	r1, r3
 8004e22:	887b      	ldrh	r3, [r7, #2]
 8004e24:	400b      	ands	r3, r1
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	619a      	str	r2, [r3, #24]
}
 8004e2c:	bf00      	nop
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e42:	4b08      	ldr	r3, [pc, #32]	@ (8004e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e44:	695a      	ldr	r2, [r3, #20]
 8004e46:	88fb      	ldrh	r3, [r7, #6]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d006      	beq.n	8004e5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e4e:	4a05      	ldr	r2, [pc, #20]	@ (8004e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fc f86e 	bl	8000f38 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e5c:	bf00      	nop
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40010400 	.word	0x40010400

08004e68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d141      	bne.n	8004efa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e76:	4b4b      	ldr	r3, [pc, #300]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e82:	d131      	bne.n	8004ee8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e84:	4b47      	ldr	r3, [pc, #284]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e8a:	4a46      	ldr	r2, [pc, #280]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e94:	4b43      	ldr	r3, [pc, #268]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e9c:	4a41      	ldr	r2, [pc, #260]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ea2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ea4:	4b40      	ldr	r3, [pc, #256]	@ (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2232      	movs	r2, #50	@ 0x32
 8004eaa:	fb02 f303 	mul.w	r3, r2, r3
 8004eae:	4a3f      	ldr	r2, [pc, #252]	@ (8004fac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb4:	0c9b      	lsrs	r3, r3, #18
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eba:	e002      	b.n	8004ec2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ec2:	4b38      	ldr	r3, [pc, #224]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ece:	d102      	bne.n	8004ed6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f2      	bne.n	8004ebc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ed6:	4b33      	ldr	r3, [pc, #204]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ee2:	d158      	bne.n	8004f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e057      	b.n	8004f98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ee8:	4b2e      	ldr	r3, [pc, #184]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eee:	4a2d      	ldr	r2, [pc, #180]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ef4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ef8:	e04d      	b.n	8004f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f00:	d141      	bne.n	8004f86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f02:	4b28      	ldr	r3, [pc, #160]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f0e:	d131      	bne.n	8004f74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f10:	4b24      	ldr	r3, [pc, #144]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f16:	4a23      	ldr	r2, [pc, #140]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f20:	4b20      	ldr	r3, [pc, #128]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f28:	4a1e      	ldr	r2, [pc, #120]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f30:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2232      	movs	r2, #50	@ 0x32
 8004f36:	fb02 f303 	mul.w	r3, r2, r3
 8004f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f40:	0c9b      	lsrs	r3, r3, #18
 8004f42:	3301      	adds	r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f46:	e002      	b.n	8004f4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f4e:	4b15      	ldr	r3, [pc, #84]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f5a:	d102      	bne.n	8004f62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f2      	bne.n	8004f48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f62:	4b10      	ldr	r3, [pc, #64]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f6e:	d112      	bne.n	8004f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e011      	b.n	8004f98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f74:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f84:	e007      	b.n	8004f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f86:	4b07      	ldr	r3, [pc, #28]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f8e:	4a05      	ldr	r2, [pc, #20]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f94:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	40007000 	.word	0x40007000
 8004fa8:	20000000 	.word	0x20000000
 8004fac:	431bde83 	.word	0x431bde83

08004fb0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004fb4:	4b05      	ldr	r3, [pc, #20]	@ (8004fcc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	4a04      	ldr	r2, [pc, #16]	@ (8004fcc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004fba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fbe:	6093      	str	r3, [r2, #8]
}
 8004fc0:	bf00      	nop
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40007000 	.word	0x40007000

08004fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e2fe      	b.n	80055e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d075      	beq.n	80050da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fee:	4b97      	ldr	r3, [pc, #604]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 030c 	and.w	r3, r3, #12
 8004ff6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ff8:	4b94      	ldr	r3, [pc, #592]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	2b0c      	cmp	r3, #12
 8005006:	d102      	bne.n	800500e <HAL_RCC_OscConfig+0x3e>
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	2b03      	cmp	r3, #3
 800500c:	d002      	beq.n	8005014 <HAL_RCC_OscConfig+0x44>
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2b08      	cmp	r3, #8
 8005012:	d10b      	bne.n	800502c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005014:	4b8d      	ldr	r3, [pc, #564]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d05b      	beq.n	80050d8 <HAL_RCC_OscConfig+0x108>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d157      	bne.n	80050d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e2d9      	b.n	80055e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005034:	d106      	bne.n	8005044 <HAL_RCC_OscConfig+0x74>
 8005036:	4b85      	ldr	r3, [pc, #532]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a84      	ldr	r2, [pc, #528]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 800503c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	e01d      	b.n	8005080 <HAL_RCC_OscConfig+0xb0>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800504c:	d10c      	bne.n	8005068 <HAL_RCC_OscConfig+0x98>
 800504e:	4b7f      	ldr	r3, [pc, #508]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a7e      	ldr	r2, [pc, #504]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 8005054:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	4b7c      	ldr	r3, [pc, #496]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a7b      	ldr	r2, [pc, #492]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 8005060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	e00b      	b.n	8005080 <HAL_RCC_OscConfig+0xb0>
 8005068:	4b78      	ldr	r3, [pc, #480]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a77      	ldr	r2, [pc, #476]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 800506e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	4b75      	ldr	r3, [pc, #468]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a74      	ldr	r2, [pc, #464]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 800507a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800507e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d013      	beq.n	80050b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005088:	f7fd fb6a 	bl	8002760 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005090:	f7fd fb66 	bl	8002760 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b64      	cmp	r3, #100	@ 0x64
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e29e      	b.n	80055e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050a2:	4b6a      	ldr	r3, [pc, #424]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0xc0>
 80050ae:	e014      	b.n	80050da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b0:	f7fd fb56 	bl	8002760 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b8:	f7fd fb52 	bl	8002760 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b64      	cmp	r3, #100	@ 0x64
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e28a      	b.n	80055e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050ca:	4b60      	ldr	r3, [pc, #384]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1f0      	bne.n	80050b8 <HAL_RCC_OscConfig+0xe8>
 80050d6:	e000      	b.n	80050da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d075      	beq.n	80051d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050e6:	4b59      	ldr	r3, [pc, #356]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 030c 	and.w	r3, r3, #12
 80050ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050f0:	4b56      	ldr	r3, [pc, #344]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f003 0303 	and.w	r3, r3, #3
 80050f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	2b0c      	cmp	r3, #12
 80050fe:	d102      	bne.n	8005106 <HAL_RCC_OscConfig+0x136>
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	2b02      	cmp	r3, #2
 8005104:	d002      	beq.n	800510c <HAL_RCC_OscConfig+0x13c>
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b04      	cmp	r3, #4
 800510a:	d11f      	bne.n	800514c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800510c:	4b4f      	ldr	r3, [pc, #316]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <HAL_RCC_OscConfig+0x154>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e25d      	b.n	80055e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005124:	4b49      	ldr	r3, [pc, #292]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	061b      	lsls	r3, r3, #24
 8005132:	4946      	ldr	r1, [pc, #280]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 8005134:	4313      	orrs	r3, r2
 8005136:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005138:	4b45      	ldr	r3, [pc, #276]	@ (8005250 <HAL_RCC_OscConfig+0x280>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4618      	mov	r0, r3
 800513e:	f7fd fac3 	bl	80026c8 <HAL_InitTick>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d043      	beq.n	80051d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e249      	b.n	80055e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d023      	beq.n	800519c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005154:	4b3d      	ldr	r3, [pc, #244]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a3c      	ldr	r2, [pc, #240]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 800515a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800515e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005160:	f7fd fafe 	bl	8002760 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005168:	f7fd fafa 	bl	8002760 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e232      	b.n	80055e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800517a:	4b34      	ldr	r3, [pc, #208]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0f0      	beq.n	8005168 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005186:	4b31      	ldr	r3, [pc, #196]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	061b      	lsls	r3, r3, #24
 8005194:	492d      	ldr	r1, [pc, #180]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 8005196:	4313      	orrs	r3, r2
 8005198:	604b      	str	r3, [r1, #4]
 800519a:	e01a      	b.n	80051d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800519c:	4b2b      	ldr	r3, [pc, #172]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a2a      	ldr	r2, [pc, #168]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 80051a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a8:	f7fd fada 	bl	8002760 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b0:	f7fd fad6 	bl	8002760 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e20e      	b.n	80055e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051c2:	4b22      	ldr	r3, [pc, #136]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCC_OscConfig+0x1e0>
 80051ce:	e000      	b.n	80051d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d041      	beq.n	8005262 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d01c      	beq.n	8005220 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051e6:	4b19      	ldr	r3, [pc, #100]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 80051e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051ec:	4a17      	ldr	r2, [pc, #92]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 80051ee:	f043 0301 	orr.w	r3, r3, #1
 80051f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f6:	f7fd fab3 	bl	8002760 <HAL_GetTick>
 80051fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051fc:	e008      	b.n	8005210 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051fe:	f7fd faaf 	bl	8002760 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e1e7      	b.n	80055e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005210:	4b0e      	ldr	r3, [pc, #56]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 8005212:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0ef      	beq.n	80051fe <HAL_RCC_OscConfig+0x22e>
 800521e:	e020      	b.n	8005262 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005220:	4b0a      	ldr	r3, [pc, #40]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 8005222:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005226:	4a09      	ldr	r2, [pc, #36]	@ (800524c <HAL_RCC_OscConfig+0x27c>)
 8005228:	f023 0301 	bic.w	r3, r3, #1
 800522c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005230:	f7fd fa96 	bl	8002760 <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005236:	e00d      	b.n	8005254 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005238:	f7fd fa92 	bl	8002760 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d906      	bls.n	8005254 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e1ca      	b.n	80055e0 <HAL_RCC_OscConfig+0x610>
 800524a:	bf00      	nop
 800524c:	40021000 	.word	0x40021000
 8005250:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005254:	4b8c      	ldr	r3, [pc, #560]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 8005256:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1ea      	bne.n	8005238 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 80a6 	beq.w	80053bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005270:	2300      	movs	r3, #0
 8005272:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005274:	4b84      	ldr	r3, [pc, #528]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 8005276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_RCC_OscConfig+0x2b4>
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <HAL_RCC_OscConfig+0x2b6>
 8005284:	2300      	movs	r3, #0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00d      	beq.n	80052a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800528a:	4b7f      	ldr	r3, [pc, #508]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 800528c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800528e:	4a7e      	ldr	r2, [pc, #504]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 8005290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005294:	6593      	str	r3, [r2, #88]	@ 0x58
 8005296:	4b7c      	ldr	r3, [pc, #496]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 8005298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800529a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80052a2:	2301      	movs	r3, #1
 80052a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052a6:	4b79      	ldr	r3, [pc, #484]	@ (800548c <HAL_RCC_OscConfig+0x4bc>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d118      	bne.n	80052e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052b2:	4b76      	ldr	r3, [pc, #472]	@ (800548c <HAL_RCC_OscConfig+0x4bc>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a75      	ldr	r2, [pc, #468]	@ (800548c <HAL_RCC_OscConfig+0x4bc>)
 80052b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052be:	f7fd fa4f 	bl	8002760 <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c6:	f7fd fa4b 	bl	8002760 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e183      	b.n	80055e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052d8:	4b6c      	ldr	r3, [pc, #432]	@ (800548c <HAL_RCC_OscConfig+0x4bc>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0f0      	beq.n	80052c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d108      	bne.n	80052fe <HAL_RCC_OscConfig+0x32e>
 80052ec:	4b66      	ldr	r3, [pc, #408]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 80052ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052f2:	4a65      	ldr	r2, [pc, #404]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 80052f4:	f043 0301 	orr.w	r3, r3, #1
 80052f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052fc:	e024      	b.n	8005348 <HAL_RCC_OscConfig+0x378>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2b05      	cmp	r3, #5
 8005304:	d110      	bne.n	8005328 <HAL_RCC_OscConfig+0x358>
 8005306:	4b60      	ldr	r3, [pc, #384]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 8005308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530c:	4a5e      	ldr	r2, [pc, #376]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 800530e:	f043 0304 	orr.w	r3, r3, #4
 8005312:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005316:	4b5c      	ldr	r3, [pc, #368]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 8005318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800531c:	4a5a      	ldr	r2, [pc, #360]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005326:	e00f      	b.n	8005348 <HAL_RCC_OscConfig+0x378>
 8005328:	4b57      	ldr	r3, [pc, #348]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800532e:	4a56      	ldr	r2, [pc, #344]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005338:	4b53      	ldr	r3, [pc, #332]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 800533a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800533e:	4a52      	ldr	r2, [pc, #328]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 8005340:	f023 0304 	bic.w	r3, r3, #4
 8005344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d016      	beq.n	800537e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005350:	f7fd fa06 	bl	8002760 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005356:	e00a      	b.n	800536e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005358:	f7fd fa02 	bl	8002760 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005366:	4293      	cmp	r3, r2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e138      	b.n	80055e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800536e:	4b46      	ldr	r3, [pc, #280]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 8005370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0ed      	beq.n	8005358 <HAL_RCC_OscConfig+0x388>
 800537c:	e015      	b.n	80053aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537e:	f7fd f9ef 	bl	8002760 <HAL_GetTick>
 8005382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005384:	e00a      	b.n	800539c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005386:	f7fd f9eb 	bl	8002760 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005394:	4293      	cmp	r3, r2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e121      	b.n	80055e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800539c:	4b3a      	ldr	r3, [pc, #232]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 800539e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1ed      	bne.n	8005386 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053aa:	7ffb      	ldrb	r3, [r7, #31]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d105      	bne.n	80053bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053b0:	4b35      	ldr	r3, [pc, #212]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 80053b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b4:	4a34      	ldr	r2, [pc, #208]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 80053b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d03c      	beq.n	8005442 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d01c      	beq.n	800540a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053d0:	4b2d      	ldr	r3, [pc, #180]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 80053d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 80053d8:	f043 0301 	orr.w	r3, r3, #1
 80053dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e0:	f7fd f9be 	bl	8002760 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053e8:	f7fd f9ba 	bl	8002760 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e0f2      	b.n	80055e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053fa:	4b23      	ldr	r3, [pc, #140]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 80053fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0ef      	beq.n	80053e8 <HAL_RCC_OscConfig+0x418>
 8005408:	e01b      	b.n	8005442 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800540a:	4b1f      	ldr	r3, [pc, #124]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 800540c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005410:	4a1d      	ldr	r2, [pc, #116]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 8005412:	f023 0301 	bic.w	r3, r3, #1
 8005416:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800541a:	f7fd f9a1 	bl	8002760 <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005422:	f7fd f99d 	bl	8002760 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e0d5      	b.n	80055e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005434:	4b14      	ldr	r3, [pc, #80]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 8005436:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1ef      	bne.n	8005422 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 80c9 	beq.w	80055de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800544c:	4b0e      	ldr	r3, [pc, #56]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f003 030c 	and.w	r3, r3, #12
 8005454:	2b0c      	cmp	r3, #12
 8005456:	f000 8083 	beq.w	8005560 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	2b02      	cmp	r3, #2
 8005460:	d15e      	bne.n	8005520 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005462:	4b09      	ldr	r3, [pc, #36]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a08      	ldr	r2, [pc, #32]	@ (8005488 <HAL_RCC_OscConfig+0x4b8>)
 8005468:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800546c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546e:	f7fd f977 	bl	8002760 <HAL_GetTick>
 8005472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005474:	e00c      	b.n	8005490 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005476:	f7fd f973 	bl	8002760 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d905      	bls.n	8005490 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e0ab      	b.n	80055e0 <HAL_RCC_OscConfig+0x610>
 8005488:	40021000 	.word	0x40021000
 800548c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005490:	4b55      	ldr	r3, [pc, #340]	@ (80055e8 <HAL_RCC_OscConfig+0x618>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1ec      	bne.n	8005476 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800549c:	4b52      	ldr	r3, [pc, #328]	@ (80055e8 <HAL_RCC_OscConfig+0x618>)
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	4b52      	ldr	r3, [pc, #328]	@ (80055ec <HAL_RCC_OscConfig+0x61c>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6a11      	ldr	r1, [r2, #32]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054ac:	3a01      	subs	r2, #1
 80054ae:	0112      	lsls	r2, r2, #4
 80054b0:	4311      	orrs	r1, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80054b6:	0212      	lsls	r2, r2, #8
 80054b8:	4311      	orrs	r1, r2
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80054be:	0852      	lsrs	r2, r2, #1
 80054c0:	3a01      	subs	r2, #1
 80054c2:	0552      	lsls	r2, r2, #21
 80054c4:	4311      	orrs	r1, r2
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80054ca:	0852      	lsrs	r2, r2, #1
 80054cc:	3a01      	subs	r2, #1
 80054ce:	0652      	lsls	r2, r2, #25
 80054d0:	4311      	orrs	r1, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80054d6:	06d2      	lsls	r2, r2, #27
 80054d8:	430a      	orrs	r2, r1
 80054da:	4943      	ldr	r1, [pc, #268]	@ (80055e8 <HAL_RCC_OscConfig+0x618>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054e0:	4b41      	ldr	r3, [pc, #260]	@ (80055e8 <HAL_RCC_OscConfig+0x618>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a40      	ldr	r2, [pc, #256]	@ (80055e8 <HAL_RCC_OscConfig+0x618>)
 80054e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054ec:	4b3e      	ldr	r3, [pc, #248]	@ (80055e8 <HAL_RCC_OscConfig+0x618>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	4a3d      	ldr	r2, [pc, #244]	@ (80055e8 <HAL_RCC_OscConfig+0x618>)
 80054f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f8:	f7fd f932 	bl	8002760 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005500:	f7fd f92e 	bl	8002760 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e066      	b.n	80055e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005512:	4b35      	ldr	r3, [pc, #212]	@ (80055e8 <HAL_RCC_OscConfig+0x618>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0f0      	beq.n	8005500 <HAL_RCC_OscConfig+0x530>
 800551e:	e05e      	b.n	80055de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005520:	4b31      	ldr	r3, [pc, #196]	@ (80055e8 <HAL_RCC_OscConfig+0x618>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a30      	ldr	r2, [pc, #192]	@ (80055e8 <HAL_RCC_OscConfig+0x618>)
 8005526:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800552a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552c:	f7fd f918 	bl	8002760 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005534:	f7fd f914 	bl	8002760 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e04c      	b.n	80055e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005546:	4b28      	ldr	r3, [pc, #160]	@ (80055e8 <HAL_RCC_OscConfig+0x618>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1f0      	bne.n	8005534 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005552:	4b25      	ldr	r3, [pc, #148]	@ (80055e8 <HAL_RCC_OscConfig+0x618>)
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	4924      	ldr	r1, [pc, #144]	@ (80055e8 <HAL_RCC_OscConfig+0x618>)
 8005558:	4b25      	ldr	r3, [pc, #148]	@ (80055f0 <HAL_RCC_OscConfig+0x620>)
 800555a:	4013      	ands	r3, r2
 800555c:	60cb      	str	r3, [r1, #12]
 800555e:	e03e      	b.n	80055de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d101      	bne.n	800556c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e039      	b.n	80055e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800556c:	4b1e      	ldr	r3, [pc, #120]	@ (80055e8 <HAL_RCC_OscConfig+0x618>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f003 0203 	and.w	r2, r3, #3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	429a      	cmp	r2, r3
 800557e:	d12c      	bne.n	80055da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558a:	3b01      	subs	r3, #1
 800558c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800558e:	429a      	cmp	r2, r3
 8005590:	d123      	bne.n	80055da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800559e:	429a      	cmp	r2, r3
 80055a0:	d11b      	bne.n	80055da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d113      	bne.n	80055da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055bc:	085b      	lsrs	r3, r3, #1
 80055be:	3b01      	subs	r3, #1
 80055c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d109      	bne.n	80055da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055d0:	085b      	lsrs	r3, r3, #1
 80055d2:	3b01      	subs	r3, #1
 80055d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d001      	beq.n	80055de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3720      	adds	r7, #32
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	40021000 	.word	0x40021000
 80055ec:	019f800c 	.word	0x019f800c
 80055f0:	feeefffc 	.word	0xfeeefffc

080055f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e11e      	b.n	800584a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800560c:	4b91      	ldr	r3, [pc, #580]	@ (8005854 <HAL_RCC_ClockConfig+0x260>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 030f 	and.w	r3, r3, #15
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d910      	bls.n	800563c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561a:	4b8e      	ldr	r3, [pc, #568]	@ (8005854 <HAL_RCC_ClockConfig+0x260>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f023 020f 	bic.w	r2, r3, #15
 8005622:	498c      	ldr	r1, [pc, #560]	@ (8005854 <HAL_RCC_ClockConfig+0x260>)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	4313      	orrs	r3, r2
 8005628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800562a:	4b8a      	ldr	r3, [pc, #552]	@ (8005854 <HAL_RCC_ClockConfig+0x260>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d001      	beq.n	800563c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e106      	b.n	800584a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b00      	cmp	r3, #0
 8005646:	d073      	beq.n	8005730 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	2b03      	cmp	r3, #3
 800564e:	d129      	bne.n	80056a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005650:	4b81      	ldr	r3, [pc, #516]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e0f4      	b.n	800584a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005660:	f000 f99e 	bl	80059a0 <RCC_GetSysClockFreqFromPLLSource>
 8005664:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	4a7c      	ldr	r2, [pc, #496]	@ (800585c <HAL_RCC_ClockConfig+0x268>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d93f      	bls.n	80056ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800566e:	4b7a      	ldr	r3, [pc, #488]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005682:	2b00      	cmp	r3, #0
 8005684:	d033      	beq.n	80056ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800568a:	2b00      	cmp	r3, #0
 800568c:	d12f      	bne.n	80056ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800568e:	4b72      	ldr	r3, [pc, #456]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005696:	4a70      	ldr	r2, [pc, #448]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 8005698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800569c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800569e:	2380      	movs	r3, #128	@ 0x80
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	e024      	b.n	80056ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d107      	bne.n	80056bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056ac:	4b6a      	ldr	r3, [pc, #424]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d109      	bne.n	80056cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e0c6      	b.n	800584a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056bc:	4b66      	ldr	r3, [pc, #408]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e0be      	b.n	800584a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80056cc:	f000 f8ce 	bl	800586c <HAL_RCC_GetSysClockFreq>
 80056d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	4a61      	ldr	r2, [pc, #388]	@ (800585c <HAL_RCC_ClockConfig+0x268>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d909      	bls.n	80056ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056da:	4b5f      	ldr	r3, [pc, #380]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056e2:	4a5d      	ldr	r2, [pc, #372]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 80056e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80056ea:	2380      	movs	r3, #128	@ 0x80
 80056ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056ee:	4b5a      	ldr	r3, [pc, #360]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f023 0203 	bic.w	r2, r3, #3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	4957      	ldr	r1, [pc, #348]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005700:	f7fd f82e 	bl	8002760 <HAL_GetTick>
 8005704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005706:	e00a      	b.n	800571e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005708:	f7fd f82a 	bl	8002760 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005716:	4293      	cmp	r3, r2
 8005718:	d901      	bls.n	800571e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e095      	b.n	800584a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800571e:	4b4e      	ldr	r3, [pc, #312]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 020c 	and.w	r2, r3, #12
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	429a      	cmp	r2, r3
 800572e:	d1eb      	bne.n	8005708 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d023      	beq.n	8005784 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005748:	4b43      	ldr	r3, [pc, #268]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	4a42      	ldr	r2, [pc, #264]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 800574e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005752:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	2b00      	cmp	r3, #0
 800575e:	d007      	beq.n	8005770 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005760:	4b3d      	ldr	r3, [pc, #244]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005768:	4a3b      	ldr	r2, [pc, #236]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 800576a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800576e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005770:	4b39      	ldr	r3, [pc, #228]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	4936      	ldr	r1, [pc, #216]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 800577e:	4313      	orrs	r3, r2
 8005780:	608b      	str	r3, [r1, #8]
 8005782:	e008      	b.n	8005796 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	2b80      	cmp	r3, #128	@ 0x80
 8005788:	d105      	bne.n	8005796 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800578a:	4b33      	ldr	r3, [pc, #204]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	4a32      	ldr	r2, [pc, #200]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 8005790:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005794:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005796:	4b2f      	ldr	r3, [pc, #188]	@ (8005854 <HAL_RCC_ClockConfig+0x260>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d21d      	bcs.n	80057e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005854 <HAL_RCC_ClockConfig+0x260>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f023 020f 	bic.w	r2, r3, #15
 80057ac:	4929      	ldr	r1, [pc, #164]	@ (8005854 <HAL_RCC_ClockConfig+0x260>)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057b4:	f7fc ffd4 	bl	8002760 <HAL_GetTick>
 80057b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ba:	e00a      	b.n	80057d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057bc:	f7fc ffd0 	bl	8002760 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e03b      	b.n	800584a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057d2:	4b20      	ldr	r3, [pc, #128]	@ (8005854 <HAL_RCC_ClockConfig+0x260>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d1ed      	bne.n	80057bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	4917      	ldr	r1, [pc, #92]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d009      	beq.n	800581e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800580a:	4b13      	ldr	r3, [pc, #76]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	490f      	ldr	r1, [pc, #60]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 800581a:	4313      	orrs	r3, r2
 800581c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800581e:	f000 f825 	bl	800586c <HAL_RCC_GetSysClockFreq>
 8005822:	4602      	mov	r2, r0
 8005824:	4b0c      	ldr	r3, [pc, #48]	@ (8005858 <HAL_RCC_ClockConfig+0x264>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	091b      	lsrs	r3, r3, #4
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	490c      	ldr	r1, [pc, #48]	@ (8005860 <HAL_RCC_ClockConfig+0x26c>)
 8005830:	5ccb      	ldrb	r3, [r1, r3]
 8005832:	f003 031f 	and.w	r3, r3, #31
 8005836:	fa22 f303 	lsr.w	r3, r2, r3
 800583a:	4a0a      	ldr	r2, [pc, #40]	@ (8005864 <HAL_RCC_ClockConfig+0x270>)
 800583c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800583e:	4b0a      	ldr	r3, [pc, #40]	@ (8005868 <HAL_RCC_ClockConfig+0x274>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f7fc ff40 	bl	80026c8 <HAL_InitTick>
 8005848:	4603      	mov	r3, r0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40022000 	.word	0x40022000
 8005858:	40021000 	.word	0x40021000
 800585c:	04c4b400 	.word	0x04c4b400
 8005860:	0800c704 	.word	0x0800c704
 8005864:	20000000 	.word	0x20000000
 8005868:	20000004 	.word	0x20000004

0800586c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005872:	4b2c      	ldr	r3, [pc, #176]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f003 030c 	and.w	r3, r3, #12
 800587a:	2b04      	cmp	r3, #4
 800587c:	d102      	bne.n	8005884 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800587e:	4b2a      	ldr	r3, [pc, #168]	@ (8005928 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	e047      	b.n	8005914 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005884:	4b27      	ldr	r3, [pc, #156]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f003 030c 	and.w	r3, r3, #12
 800588c:	2b08      	cmp	r3, #8
 800588e:	d102      	bne.n	8005896 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005890:	4b26      	ldr	r3, [pc, #152]	@ (800592c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005892:	613b      	str	r3, [r7, #16]
 8005894:	e03e      	b.n	8005914 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005896:	4b23      	ldr	r3, [pc, #140]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 030c 	and.w	r3, r3, #12
 800589e:	2b0c      	cmp	r3, #12
 80058a0:	d136      	bne.n	8005910 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058a2:	4b20      	ldr	r3, [pc, #128]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	091b      	lsrs	r3, r3, #4
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	3301      	adds	r3, #1
 80058b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b03      	cmp	r3, #3
 80058be:	d10c      	bne.n	80058da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058c0:	4a1a      	ldr	r2, [pc, #104]	@ (800592c <HAL_RCC_GetSysClockFreq+0xc0>)
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c8:	4a16      	ldr	r2, [pc, #88]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058ca:	68d2      	ldr	r2, [r2, #12]
 80058cc:	0a12      	lsrs	r2, r2, #8
 80058ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058d2:	fb02 f303 	mul.w	r3, r2, r3
 80058d6:	617b      	str	r3, [r7, #20]
      break;
 80058d8:	e00c      	b.n	80058f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058da:	4a13      	ldr	r2, [pc, #76]	@ (8005928 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e2:	4a10      	ldr	r2, [pc, #64]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058e4:	68d2      	ldr	r2, [r2, #12]
 80058e6:	0a12      	lsrs	r2, r2, #8
 80058e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058ec:	fb02 f303 	mul.w	r3, r2, r3
 80058f0:	617b      	str	r3, [r7, #20]
      break;
 80058f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	0e5b      	lsrs	r3, r3, #25
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	3301      	adds	r3, #1
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	fbb2 f3f3 	udiv	r3, r2, r3
 800590c:	613b      	str	r3, [r7, #16]
 800590e:	e001      	b.n	8005914 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005914:	693b      	ldr	r3, [r7, #16]
}
 8005916:	4618      	mov	r0, r3
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40021000 	.word	0x40021000
 8005928:	00f42400 	.word	0x00f42400
 800592c:	02dc6c00 	.word	0x02dc6c00

08005930 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005934:	4b03      	ldr	r3, [pc, #12]	@ (8005944 <HAL_RCC_GetHCLKFreq+0x14>)
 8005936:	681b      	ldr	r3, [r3, #0]
}
 8005938:	4618      	mov	r0, r3
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	20000000 	.word	0x20000000

08005948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800594c:	f7ff fff0 	bl	8005930 <HAL_RCC_GetHCLKFreq>
 8005950:	4602      	mov	r2, r0
 8005952:	4b06      	ldr	r3, [pc, #24]	@ (800596c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	0a1b      	lsrs	r3, r3, #8
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	4904      	ldr	r1, [pc, #16]	@ (8005970 <HAL_RCC_GetPCLK1Freq+0x28>)
 800595e:	5ccb      	ldrb	r3, [r1, r3]
 8005960:	f003 031f 	and.w	r3, r3, #31
 8005964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005968:	4618      	mov	r0, r3
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40021000 	.word	0x40021000
 8005970:	0800c714 	.word	0x0800c714

08005974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005978:	f7ff ffda 	bl	8005930 <HAL_RCC_GetHCLKFreq>
 800597c:	4602      	mov	r2, r0
 800597e:	4b06      	ldr	r3, [pc, #24]	@ (8005998 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	0adb      	lsrs	r3, r3, #11
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	4904      	ldr	r1, [pc, #16]	@ (800599c <HAL_RCC_GetPCLK2Freq+0x28>)
 800598a:	5ccb      	ldrb	r3, [r1, r3]
 800598c:	f003 031f 	and.w	r3, r3, #31
 8005990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005994:	4618      	mov	r0, r3
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40021000 	.word	0x40021000
 800599c:	0800c714 	.word	0x0800c714

080059a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005a20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f003 0303 	and.w	r3, r3, #3
 80059ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	091b      	lsrs	r3, r3, #4
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	3301      	adds	r3, #1
 80059bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	2b03      	cmp	r3, #3
 80059c2:	d10c      	bne.n	80059de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059c4:	4a17      	ldr	r2, [pc, #92]	@ (8005a24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059cc:	4a14      	ldr	r2, [pc, #80]	@ (8005a20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059ce:	68d2      	ldr	r2, [r2, #12]
 80059d0:	0a12      	lsrs	r2, r2, #8
 80059d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80059d6:	fb02 f303 	mul.w	r3, r2, r3
 80059da:	617b      	str	r3, [r7, #20]
    break;
 80059dc:	e00c      	b.n	80059f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059de:	4a12      	ldr	r2, [pc, #72]	@ (8005a28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e6:	4a0e      	ldr	r2, [pc, #56]	@ (8005a20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059e8:	68d2      	ldr	r2, [r2, #12]
 80059ea:	0a12      	lsrs	r2, r2, #8
 80059ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80059f0:	fb02 f303 	mul.w	r3, r2, r3
 80059f4:	617b      	str	r3, [r7, #20]
    break;
 80059f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059f8:	4b09      	ldr	r3, [pc, #36]	@ (8005a20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	0e5b      	lsrs	r3, r3, #25
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	3301      	adds	r3, #1
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a12:	687b      	ldr	r3, [r7, #4]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	371c      	adds	r7, #28
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	40021000 	.word	0x40021000
 8005a24:	02dc6c00 	.word	0x02dc6c00
 8005a28:	00f42400 	.word	0x00f42400

08005a2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a34:	2300      	movs	r3, #0
 8005a36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a38:	2300      	movs	r3, #0
 8005a3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 8098 	beq.w	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a4e:	4b43      	ldr	r3, [pc, #268]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10d      	bne.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a5a:	4b40      	ldr	r3, [pc, #256]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5e:	4a3f      	ldr	r2, [pc, #252]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a64:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a66:	4b3d      	ldr	r3, [pc, #244]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a6e:	60bb      	str	r3, [r7, #8]
 8005a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a72:	2301      	movs	r3, #1
 8005a74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a76:	4b3a      	ldr	r3, [pc, #232]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a39      	ldr	r2, [pc, #228]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a82:	f7fc fe6d 	bl	8002760 <HAL_GetTick>
 8005a86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a88:	e009      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a8a:	f7fc fe69 	bl	8002760 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d902      	bls.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	74fb      	strb	r3, [r7, #19]
        break;
 8005a9c:	e005      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a9e:	4b30      	ldr	r3, [pc, #192]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0ef      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005aaa:	7cfb      	ldrb	r3, [r7, #19]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d159      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d01e      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d019      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005acc:	4b23      	ldr	r3, [pc, #140]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ad6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ad8:	4b20      	ldr	r3, [pc, #128]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ade:	4a1f      	ldr	r2, [pc, #124]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aee:	4a1b      	ldr	r2, [pc, #108]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005af0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005af4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005af8:	4a18      	ldr	r2, [pc, #96]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d016      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0a:	f7fc fe29 	bl	8002760 <HAL_GetTick>
 8005b0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b10:	e00b      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b12:	f7fc fe25 	bl	8002760 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d902      	bls.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	74fb      	strb	r3, [r7, #19]
            break;
 8005b28:	e006      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0ec      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005b38:	7cfb      	ldrb	r3, [r7, #19]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10b      	bne.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b3e:	4b07      	ldr	r3, [pc, #28]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b4c:	4903      	ldr	r1, [pc, #12]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005b54:	e008      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b56:	7cfb      	ldrb	r3, [r7, #19]
 8005b58:	74bb      	strb	r3, [r7, #18]
 8005b5a:	e005      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b64:	7cfb      	ldrb	r3, [r7, #19]
 8005b66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b68:	7c7b      	ldrb	r3, [r7, #17]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d105      	bne.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b6e:	4ba7      	ldr	r3, [pc, #668]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b72:	4aa6      	ldr	r2, [pc, #664]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b78:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b86:	4ba1      	ldr	r3, [pc, #644]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b8c:	f023 0203 	bic.w	r2, r3, #3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	499d      	ldr	r1, [pc, #628]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ba8:	4b98      	ldr	r3, [pc, #608]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bae:	f023 020c 	bic.w	r2, r3, #12
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	4995      	ldr	r1, [pc, #596]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0304 	and.w	r3, r3, #4
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005bca:	4b90      	ldr	r3, [pc, #576]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	498c      	ldr	r1, [pc, #560]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0308 	and.w	r3, r3, #8
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00a      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005bec:	4b87      	ldr	r3, [pc, #540]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	4984      	ldr	r1, [pc, #528]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0310 	and.w	r3, r3, #16
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c0e:	4b7f      	ldr	r3, [pc, #508]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	497b      	ldr	r1, [pc, #492]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00a      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c30:	4b76      	ldr	r3, [pc, #472]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c36:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	4973      	ldr	r1, [pc, #460]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c52:	4b6e      	ldr	r3, [pc, #440]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c58:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	496a      	ldr	r1, [pc, #424]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00a      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c74:	4b65      	ldr	r3, [pc, #404]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c7a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	4962      	ldr	r1, [pc, #392]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00a      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c96:	4b5d      	ldr	r3, [pc, #372]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca4:	4959      	ldr	r1, [pc, #356]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00a      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005cb8:	4b54      	ldr	r3, [pc, #336]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cbe:	f023 0203 	bic.w	r2, r3, #3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc6:	4951      	ldr	r1, [pc, #324]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cda:	4b4c      	ldr	r3, [pc, #304]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce8:	4948      	ldr	r1, [pc, #288]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d015      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cfc:	4b43      	ldr	r3, [pc, #268]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0a:	4940      	ldr	r1, [pc, #256]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d1a:	d105      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	4a3a      	ldr	r2, [pc, #232]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d015      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d34:	4b35      	ldr	r3, [pc, #212]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d3a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d42:	4932      	ldr	r1, [pc, #200]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d52:	d105      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d54:	4b2d      	ldr	r3, [pc, #180]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	4a2c      	ldr	r2, [pc, #176]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d5e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d015      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d6c:	4b27      	ldr	r3, [pc, #156]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d72:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7a:	4924      	ldr	r1, [pc, #144]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d8a:	d105      	bne.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	4a1e      	ldr	r2, [pc, #120]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d96:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d015      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005da4:	4b19      	ldr	r3, [pc, #100]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005daa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db2:	4916      	ldr	r1, [pc, #88]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dc2:	d105      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dc4:	4b11      	ldr	r3, [pc, #68]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	4a10      	ldr	r2, [pc, #64]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d019      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dea:	4908      	ldr	r1, [pc, #32]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dfa:	d109      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dfc:	4b03      	ldr	r3, [pc, #12]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	4a02      	ldr	r2, [pc, #8]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e06:	60d3      	str	r3, [r2, #12]
 8005e08:	e002      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005e0a:	bf00      	nop
 8005e0c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d015      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e1c:	4b29      	ldr	r3, [pc, #164]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e22:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e2a:	4926      	ldr	r1, [pc, #152]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e3a:	d105      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e3c:	4b21      	ldr	r3, [pc, #132]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	4a20      	ldr	r2, [pc, #128]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e46:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d015      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005e54:	4b1b      	ldr	r3, [pc, #108]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e5a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e62:	4918      	ldr	r1, [pc, #96]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e72:	d105      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e74:	4b13      	ldr	r3, [pc, #76]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	4a12      	ldr	r2, [pc, #72]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e7e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d015      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e9a:	490a      	ldr	r1, [pc, #40]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ea6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005eaa:	d105      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eac:	4b05      	ldr	r3, [pc, #20]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	4a04      	ldr	r2, [pc, #16]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eb6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005eb8:	7cbb      	ldrb	r3, [r7, #18]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	40021000 	.word	0x40021000

08005ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e049      	b.n	8005f6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d106      	bne.n	8005ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7fb fea6 	bl	8001c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3304      	adds	r3, #4
 8005f04:	4619      	mov	r1, r3
 8005f06:	4610      	mov	r0, r2
 8005f08:	f001 f8f0 	bl	80070ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d001      	beq.n	8005f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e054      	b.n	800603a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0201 	orr.w	r2, r2, #1
 8005fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a26      	ldr	r2, [pc, #152]	@ (8006048 <HAL_TIM_Base_Start_IT+0xd0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d022      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x80>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fba:	d01d      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x80>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a22      	ldr	r2, [pc, #136]	@ (800604c <HAL_TIM_Base_Start_IT+0xd4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d018      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x80>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a21      	ldr	r2, [pc, #132]	@ (8006050 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d013      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x80>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8006054 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00e      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x80>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1e      	ldr	r2, [pc, #120]	@ (8006058 <HAL_TIM_Base_Start_IT+0xe0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d009      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x80>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800605c <HAL_TIM_Base_Start_IT+0xe4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d004      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x80>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8006060 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d115      	bne.n	8006024 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	4b19      	ldr	r3, [pc, #100]	@ (8006064 <HAL_TIM_Base_Start_IT+0xec>)
 8006000:	4013      	ands	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b06      	cmp	r3, #6
 8006008:	d015      	beq.n	8006036 <HAL_TIM_Base_Start_IT+0xbe>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006010:	d011      	beq.n	8006036 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f042 0201 	orr.w	r2, r2, #1
 8006020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006022:	e008      	b.n	8006036 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	e000      	b.n	8006038 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006036:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	40012c00 	.word	0x40012c00
 800604c:	40000400 	.word	0x40000400
 8006050:	40000800 	.word	0x40000800
 8006054:	40000c00 	.word	0x40000c00
 8006058:	40013400 	.word	0x40013400
 800605c:	40014000 	.word	0x40014000
 8006060:	40015000 	.word	0x40015000
 8006064:	00010007 	.word	0x00010007

08006068 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0201 	bic.w	r2, r2, #1
 800607e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6a1a      	ldr	r2, [r3, #32]
 8006086:	f241 1311 	movw	r3, #4369	@ 0x1111
 800608a:	4013      	ands	r3, r2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10f      	bne.n	80060b0 <HAL_TIM_Base_Stop_IT+0x48>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6a1a      	ldr	r2, [r3, #32]
 8006096:	f244 4344 	movw	r3, #17476	@ 0x4444
 800609a:	4013      	ands	r3, r2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d107      	bne.n	80060b0 <HAL_TIM_Base_Stop_IT+0x48>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0201 	bic.w	r2, r2, #1
 80060ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b082      	sub	sp, #8
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e049      	b.n	800616c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d106      	bne.n	80060f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f841 	bl	8006174 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2202      	movs	r2, #2
 80060f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	3304      	adds	r3, #4
 8006102:	4619      	mov	r1, r3
 8006104:	4610      	mov	r0, r2
 8006106:	f000 fff1 	bl	80070ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d109      	bne.n	80061b4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	bf0c      	ite	eq
 80061ac:	2301      	moveq	r3, #1
 80061ae:	2300      	movne	r3, #0
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	e03c      	b.n	800622e <HAL_TIM_PWM_Start_DMA+0xa6>
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d109      	bne.n	80061ce <HAL_TIM_PWM_Start_DMA+0x46>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	bf0c      	ite	eq
 80061c6:	2301      	moveq	r3, #1
 80061c8:	2300      	movne	r3, #0
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	e02f      	b.n	800622e <HAL_TIM_PWM_Start_DMA+0xa6>
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d109      	bne.n	80061e8 <HAL_TIM_PWM_Start_DMA+0x60>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	bf0c      	ite	eq
 80061e0:	2301      	moveq	r3, #1
 80061e2:	2300      	movne	r3, #0
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	e022      	b.n	800622e <HAL_TIM_PWM_Start_DMA+0xa6>
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b0c      	cmp	r3, #12
 80061ec:	d109      	bne.n	8006202 <HAL_TIM_PWM_Start_DMA+0x7a>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	bf0c      	ite	eq
 80061fa:	2301      	moveq	r3, #1
 80061fc:	2300      	movne	r3, #0
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	e015      	b.n	800622e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b10      	cmp	r3, #16
 8006206:	d109      	bne.n	800621c <HAL_TIM_PWM_Start_DMA+0x94>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b02      	cmp	r3, #2
 8006212:	bf0c      	ite	eq
 8006214:	2301      	moveq	r3, #1
 8006216:	2300      	movne	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	e008      	b.n	800622e <HAL_TIM_PWM_Start_DMA+0xa6>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b02      	cmp	r3, #2
 8006226:	bf0c      	ite	eq
 8006228:	2301      	moveq	r3, #1
 800622a:	2300      	movne	r3, #0
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8006232:	2302      	movs	r3, #2
 8006234:	e1b5      	b.n	80065a2 <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d109      	bne.n	8006250 <HAL_TIM_PWM_Start_DMA+0xc8>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b01      	cmp	r3, #1
 8006246:	bf0c      	ite	eq
 8006248:	2301      	moveq	r3, #1
 800624a:	2300      	movne	r3, #0
 800624c:	b2db      	uxtb	r3, r3
 800624e:	e03c      	b.n	80062ca <HAL_TIM_PWM_Start_DMA+0x142>
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b04      	cmp	r3, #4
 8006254:	d109      	bne.n	800626a <HAL_TIM_PWM_Start_DMA+0xe2>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b01      	cmp	r3, #1
 8006260:	bf0c      	ite	eq
 8006262:	2301      	moveq	r3, #1
 8006264:	2300      	movne	r3, #0
 8006266:	b2db      	uxtb	r3, r3
 8006268:	e02f      	b.n	80062ca <HAL_TIM_PWM_Start_DMA+0x142>
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2b08      	cmp	r3, #8
 800626e:	d109      	bne.n	8006284 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b01      	cmp	r3, #1
 800627a:	bf0c      	ite	eq
 800627c:	2301      	moveq	r3, #1
 800627e:	2300      	movne	r3, #0
 8006280:	b2db      	uxtb	r3, r3
 8006282:	e022      	b.n	80062ca <HAL_TIM_PWM_Start_DMA+0x142>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b0c      	cmp	r3, #12
 8006288:	d109      	bne.n	800629e <HAL_TIM_PWM_Start_DMA+0x116>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b01      	cmp	r3, #1
 8006294:	bf0c      	ite	eq
 8006296:	2301      	moveq	r3, #1
 8006298:	2300      	movne	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	e015      	b.n	80062ca <HAL_TIM_PWM_Start_DMA+0x142>
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b10      	cmp	r3, #16
 80062a2:	d109      	bne.n	80062b8 <HAL_TIM_PWM_Start_DMA+0x130>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	bf0c      	ite	eq
 80062b0:	2301      	moveq	r3, #1
 80062b2:	2300      	movne	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	e008      	b.n	80062ca <HAL_TIM_PWM_Start_DMA+0x142>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	bf0c      	ite	eq
 80062c4:	2301      	moveq	r3, #1
 80062c6:	2300      	movne	r3, #0
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d034      	beq.n	8006338 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d002      	beq.n	80062da <HAL_TIM_PWM_Start_DMA+0x152>
 80062d4:	887b      	ldrh	r3, [r7, #2]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e161      	b.n	80065a2 <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d104      	bne.n	80062ee <HAL_TIM_PWM_Start_DMA+0x166>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062ec:	e026      	b.n	800633c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d104      	bne.n	80062fe <HAL_TIM_PWM_Start_DMA+0x176>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062fc:	e01e      	b.n	800633c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2b08      	cmp	r3, #8
 8006302:	d104      	bne.n	800630e <HAL_TIM_PWM_Start_DMA+0x186>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800630c:	e016      	b.n	800633c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2b0c      	cmp	r3, #12
 8006312:	d104      	bne.n	800631e <HAL_TIM_PWM_Start_DMA+0x196>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800631c:	e00e      	b.n	800633c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b10      	cmp	r3, #16
 8006322:	d104      	bne.n	800632e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800632c:	e006      	b.n	800633c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2202      	movs	r2, #2
 8006332:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006336:	e001      	b.n	800633c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e132      	b.n	80065a2 <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2b0c      	cmp	r3, #12
 8006340:	f200 80ae 	bhi.w	80064a0 <HAL_TIM_PWM_Start_DMA+0x318>
 8006344:	a201      	add	r2, pc, #4	@ (adr r2, 800634c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8006346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634a:	bf00      	nop
 800634c:	08006381 	.word	0x08006381
 8006350:	080064a1 	.word	0x080064a1
 8006354:	080064a1 	.word	0x080064a1
 8006358:	080064a1 	.word	0x080064a1
 800635c:	080063c9 	.word	0x080063c9
 8006360:	080064a1 	.word	0x080064a1
 8006364:	080064a1 	.word	0x080064a1
 8006368:	080064a1 	.word	0x080064a1
 800636c:	08006411 	.word	0x08006411
 8006370:	080064a1 	.word	0x080064a1
 8006374:	080064a1 	.word	0x080064a1
 8006378:	080064a1 	.word	0x080064a1
 800637c:	08006459 	.word	0x08006459
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006384:	4a89      	ldr	r2, [pc, #548]	@ (80065ac <HAL_TIM_PWM_Start_DMA+0x424>)
 8006386:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638c:	4a88      	ldr	r2, [pc, #544]	@ (80065b0 <HAL_TIM_PWM_Start_DMA+0x428>)
 800638e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006394:	4a87      	ldr	r2, [pc, #540]	@ (80065b4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8006396:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3334      	adds	r3, #52	@ 0x34
 80063a4:	461a      	mov	r2, r3
 80063a6:	887b      	ldrh	r3, [r7, #2]
 80063a8:	f7fe f8f0 	bl	800458c <HAL_DMA_Start_IT>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e0f5      	b.n	80065a2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68da      	ldr	r2, [r3, #12]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063c4:	60da      	str	r2, [r3, #12]
      break;
 80063c6:	e06e      	b.n	80064a6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063cc:	4a77      	ldr	r2, [pc, #476]	@ (80065ac <HAL_TIM_PWM_Start_DMA+0x424>)
 80063ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d4:	4a76      	ldr	r2, [pc, #472]	@ (80065b0 <HAL_TIM_PWM_Start_DMA+0x428>)
 80063d6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063dc:	4a75      	ldr	r2, [pc, #468]	@ (80065b4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80063de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3338      	adds	r3, #56	@ 0x38
 80063ec:	461a      	mov	r2, r3
 80063ee:	887b      	ldrh	r3, [r7, #2]
 80063f0:	f7fe f8cc 	bl	800458c <HAL_DMA_Start_IT>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e0d1      	b.n	80065a2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68da      	ldr	r2, [r3, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800640c:	60da      	str	r2, [r3, #12]
      break;
 800640e:	e04a      	b.n	80064a6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006414:	4a65      	ldr	r2, [pc, #404]	@ (80065ac <HAL_TIM_PWM_Start_DMA+0x424>)
 8006416:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641c:	4a64      	ldr	r2, [pc, #400]	@ (80065b0 <HAL_TIM_PWM_Start_DMA+0x428>)
 800641e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006424:	4a63      	ldr	r2, [pc, #396]	@ (80065b4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8006426:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800642c:	6879      	ldr	r1, [r7, #4]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	333c      	adds	r3, #60	@ 0x3c
 8006434:	461a      	mov	r2, r3
 8006436:	887b      	ldrh	r3, [r7, #2]
 8006438:	f7fe f8a8 	bl	800458c <HAL_DMA_Start_IT>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e0ad      	b.n	80065a2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006454:	60da      	str	r2, [r3, #12]
      break;
 8006456:	e026      	b.n	80064a6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645c:	4a53      	ldr	r2, [pc, #332]	@ (80065ac <HAL_TIM_PWM_Start_DMA+0x424>)
 800645e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006464:	4a52      	ldr	r2, [pc, #328]	@ (80065b0 <HAL_TIM_PWM_Start_DMA+0x428>)
 8006466:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646c:	4a51      	ldr	r2, [pc, #324]	@ (80065b4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800646e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006474:	6879      	ldr	r1, [r7, #4]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3340      	adds	r3, #64	@ 0x40
 800647c:	461a      	mov	r2, r3
 800647e:	887b      	ldrh	r3, [r7, #2]
 8006480:	f7fe f884 	bl	800458c <HAL_DMA_Start_IT>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e089      	b.n	80065a2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800649c:	60da      	str	r2, [r3, #12]
      break;
 800649e:	e002      	b.n	80064a6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	75fb      	strb	r3, [r7, #23]
      break;
 80064a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80064a6:	7dfb      	ldrb	r3, [r7, #23]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d179      	bne.n	80065a0 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2201      	movs	r2, #1
 80064b2:	68b9      	ldr	r1, [r7, #8]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f001 fa93 	bl	80079e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a3e      	ldr	r2, [pc, #248]	@ (80065b8 <HAL_TIM_PWM_Start_DMA+0x430>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d018      	beq.n	80064f6 <HAL_TIM_PWM_Start_DMA+0x36e>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a3c      	ldr	r2, [pc, #240]	@ (80065bc <HAL_TIM_PWM_Start_DMA+0x434>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d013      	beq.n	80064f6 <HAL_TIM_PWM_Start_DMA+0x36e>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a3b      	ldr	r2, [pc, #236]	@ (80065c0 <HAL_TIM_PWM_Start_DMA+0x438>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d00e      	beq.n	80064f6 <HAL_TIM_PWM_Start_DMA+0x36e>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a39      	ldr	r2, [pc, #228]	@ (80065c4 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d009      	beq.n	80064f6 <HAL_TIM_PWM_Start_DMA+0x36e>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a38      	ldr	r2, [pc, #224]	@ (80065c8 <HAL_TIM_PWM_Start_DMA+0x440>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d004      	beq.n	80064f6 <HAL_TIM_PWM_Start_DMA+0x36e>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a36      	ldr	r2, [pc, #216]	@ (80065cc <HAL_TIM_PWM_Start_DMA+0x444>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d101      	bne.n	80064fa <HAL_TIM_PWM_Start_DMA+0x372>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <HAL_TIM_PWM_Start_DMA+0x374>
 80064fa:	2300      	movs	r3, #0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d007      	beq.n	8006510 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800650e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a28      	ldr	r2, [pc, #160]	@ (80065b8 <HAL_TIM_PWM_Start_DMA+0x430>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d022      	beq.n	8006560 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006522:	d01d      	beq.n	8006560 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a29      	ldr	r2, [pc, #164]	@ (80065d0 <HAL_TIM_PWM_Start_DMA+0x448>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d018      	beq.n	8006560 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a28      	ldr	r2, [pc, #160]	@ (80065d4 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d013      	beq.n	8006560 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a26      	ldr	r2, [pc, #152]	@ (80065d8 <HAL_TIM_PWM_Start_DMA+0x450>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00e      	beq.n	8006560 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a1d      	ldr	r2, [pc, #116]	@ (80065bc <HAL_TIM_PWM_Start_DMA+0x434>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d009      	beq.n	8006560 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a1b      	ldr	r2, [pc, #108]	@ (80065c0 <HAL_TIM_PWM_Start_DMA+0x438>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d004      	beq.n	8006560 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a1c      	ldr	r2, [pc, #112]	@ (80065cc <HAL_TIM_PWM_Start_DMA+0x444>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d115      	bne.n	800658c <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689a      	ldr	r2, [r3, #8]
 8006566:	4b1d      	ldr	r3, [pc, #116]	@ (80065dc <HAL_TIM_PWM_Start_DMA+0x454>)
 8006568:	4013      	ands	r3, r2
 800656a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	2b06      	cmp	r3, #6
 8006570:	d015      	beq.n	800659e <HAL_TIM_PWM_Start_DMA+0x416>
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006578:	d011      	beq.n	800659e <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f042 0201 	orr.w	r2, r2, #1
 8006588:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800658a:	e008      	b.n	800659e <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 0201 	orr.w	r2, r2, #1
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	e000      	b.n	80065a0 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800659e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80065a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3718      	adds	r7, #24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	08006fdb 	.word	0x08006fdb
 80065b0:	08007083 	.word	0x08007083
 80065b4:	08006f49 	.word	0x08006f49
 80065b8:	40012c00 	.word	0x40012c00
 80065bc:	40013400 	.word	0x40013400
 80065c0:	40014000 	.word	0x40014000
 80065c4:	40014400 	.word	0x40014400
 80065c8:	40014800 	.word	0x40014800
 80065cc:	40015000 	.word	0x40015000
 80065d0:	40000400 	.word	0x40000400
 80065d4:	40000800 	.word	0x40000800
 80065d8:	40000c00 	.word	0x40000c00
 80065dc:	00010007 	.word	0x00010007

080065e0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b0c      	cmp	r3, #12
 80065f2:	d855      	bhi.n	80066a0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80065f4:	a201      	add	r2, pc, #4	@ (adr r2, 80065fc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80065f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fa:	bf00      	nop
 80065fc:	08006631 	.word	0x08006631
 8006600:	080066a1 	.word	0x080066a1
 8006604:	080066a1 	.word	0x080066a1
 8006608:	080066a1 	.word	0x080066a1
 800660c:	0800664d 	.word	0x0800664d
 8006610:	080066a1 	.word	0x080066a1
 8006614:	080066a1 	.word	0x080066a1
 8006618:	080066a1 	.word	0x080066a1
 800661c:	08006669 	.word	0x08006669
 8006620:	080066a1 	.word	0x080066a1
 8006624:	080066a1 	.word	0x080066a1
 8006628:	080066a1 	.word	0x080066a1
 800662c:	08006685 	.word	0x08006685
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800663e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe f875 	bl	8004734 <HAL_DMA_Abort_IT>
      break;
 800664a:	e02c      	b.n	80066a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800665a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe f867 	bl	8004734 <HAL_DMA_Abort_IT>
      break;
 8006666:	e01e      	b.n	80066a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68da      	ldr	r2, [r3, #12]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006676:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667c:	4618      	mov	r0, r3
 800667e:	f7fe f859 	bl	8004734 <HAL_DMA_Abort_IT>
      break;
 8006682:	e010      	b.n	80066a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68da      	ldr	r2, [r3, #12]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006692:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006698:	4618      	mov	r0, r3
 800669a:	f7fe f84b 	bl	8004734 <HAL_DMA_Abort_IT>
      break;
 800669e:	e002      	b.n	80066a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	73fb      	strb	r3, [r7, #15]
      break;
 80066a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f040 8086 	bne.w	80067ba <HAL_TIM_PWM_Stop_DMA+0x1da>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2200      	movs	r2, #0
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f001 f992 	bl	80079e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a40      	ldr	r2, [pc, #256]	@ (80067c4 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d018      	beq.n	80066f8 <HAL_TIM_PWM_Stop_DMA+0x118>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a3f      	ldr	r2, [pc, #252]	@ (80067c8 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d013      	beq.n	80066f8 <HAL_TIM_PWM_Stop_DMA+0x118>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a3d      	ldr	r2, [pc, #244]	@ (80067cc <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00e      	beq.n	80066f8 <HAL_TIM_PWM_Stop_DMA+0x118>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a3c      	ldr	r2, [pc, #240]	@ (80067d0 <HAL_TIM_PWM_Stop_DMA+0x1f0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d009      	beq.n	80066f8 <HAL_TIM_PWM_Stop_DMA+0x118>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a3a      	ldr	r2, [pc, #232]	@ (80067d4 <HAL_TIM_PWM_Stop_DMA+0x1f4>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d004      	beq.n	80066f8 <HAL_TIM_PWM_Stop_DMA+0x118>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a39      	ldr	r2, [pc, #228]	@ (80067d8 <HAL_TIM_PWM_Stop_DMA+0x1f8>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d101      	bne.n	80066fc <HAL_TIM_PWM_Stop_DMA+0x11c>
 80066f8:	2301      	movs	r3, #1
 80066fa:	e000      	b.n	80066fe <HAL_TIM_PWM_Stop_DMA+0x11e>
 80066fc:	2300      	movs	r3, #0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d017      	beq.n	8006732 <HAL_TIM_PWM_Stop_DMA+0x152>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6a1a      	ldr	r2, [r3, #32]
 8006708:	f241 1311 	movw	r3, #4369	@ 0x1111
 800670c:	4013      	ands	r3, r2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10f      	bne.n	8006732 <HAL_TIM_PWM_Stop_DMA+0x152>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6a1a      	ldr	r2, [r3, #32]
 8006718:	f244 4344 	movw	r3, #17476	@ 0x4444
 800671c:	4013      	ands	r3, r2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d107      	bne.n	8006732 <HAL_TIM_PWM_Stop_DMA+0x152>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006730:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6a1a      	ldr	r2, [r3, #32]
 8006738:	f241 1311 	movw	r3, #4369	@ 0x1111
 800673c:	4013      	ands	r3, r2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10f      	bne.n	8006762 <HAL_TIM_PWM_Stop_DMA+0x182>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6a1a      	ldr	r2, [r3, #32]
 8006748:	f244 4344 	movw	r3, #17476	@ 0x4444
 800674c:	4013      	ands	r3, r2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d107      	bne.n	8006762 <HAL_TIM_PWM_Stop_DMA+0x182>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0201 	bic.w	r2, r2, #1
 8006760:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d104      	bne.n	8006772 <HAL_TIM_PWM_Stop_DMA+0x192>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006770:	e023      	b.n	80067ba <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b04      	cmp	r3, #4
 8006776:	d104      	bne.n	8006782 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006780:	e01b      	b.n	80067ba <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b08      	cmp	r3, #8
 8006786:	d104      	bne.n	8006792 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006790:	e013      	b.n	80067ba <HAL_TIM_PWM_Stop_DMA+0x1da>
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b0c      	cmp	r3, #12
 8006796:	d104      	bne.n	80067a2 <HAL_TIM_PWM_Stop_DMA+0x1c2>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067a0:	e00b      	b.n	80067ba <HAL_TIM_PWM_Stop_DMA+0x1da>
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b10      	cmp	r3, #16
 80067a6:	d104      	bne.n	80067b2 <HAL_TIM_PWM_Stop_DMA+0x1d2>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067b0:	e003      	b.n	80067ba <HAL_TIM_PWM_Stop_DMA+0x1da>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	40012c00 	.word	0x40012c00
 80067c8:	40013400 	.word	0x40013400
 80067cc:	40014000 	.word	0x40014000
 80067d0:	40014400 	.word	0x40014400
 80067d4:	40014800 	.word	0x40014800
 80067d8:	40015000 	.word	0x40015000

080067dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d020      	beq.n	8006840 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d01b      	beq.n	8006840 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f06f 0202 	mvn.w	r2, #2
 8006810:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	f003 0303 	and.w	r3, r3, #3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fb5c 	bl	8006ee4 <HAL_TIM_IC_CaptureCallback>
 800682c:	e005      	b.n	800683a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fb4e 	bl	8006ed0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fb5f 	bl	8006ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	d020      	beq.n	800688c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01b      	beq.n	800688c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f06f 0204 	mvn.w	r2, #4
 800685c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2202      	movs	r2, #2
 8006862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fb36 	bl	8006ee4 <HAL_TIM_IC_CaptureCallback>
 8006878:	e005      	b.n	8006886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fb28 	bl	8006ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fb39 	bl	8006ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f003 0308 	and.w	r3, r3, #8
 8006892:	2b00      	cmp	r3, #0
 8006894:	d020      	beq.n	80068d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f003 0308 	and.w	r3, r3, #8
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01b      	beq.n	80068d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f06f 0208 	mvn.w	r2, #8
 80068a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2204      	movs	r2, #4
 80068ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	f003 0303 	and.w	r3, r3, #3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fb10 	bl	8006ee4 <HAL_TIM_IC_CaptureCallback>
 80068c4:	e005      	b.n	80068d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fb02 	bl	8006ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fb13 	bl	8006ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f003 0310 	and.w	r3, r3, #16
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d020      	beq.n	8006924 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f003 0310 	and.w	r3, r3, #16
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01b      	beq.n	8006924 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f06f 0210 	mvn.w	r2, #16
 80068f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2208      	movs	r2, #8
 80068fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 faea 	bl	8006ee4 <HAL_TIM_IC_CaptureCallback>
 8006910:	e005      	b.n	800691e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fadc 	bl	8006ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 faed 	bl	8006ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00c      	beq.n	8006948 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d007      	beq.n	8006948 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f06f 0201 	mvn.w	r2, #1
 8006940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7fa fb5a 	bl	8000ffc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800694e:	2b00      	cmp	r3, #0
 8006950:	d104      	bne.n	800695c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00c      	beq.n	8006976 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006962:	2b00      	cmp	r3, #0
 8006964:	d007      	beq.n	8006976 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800696e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f001 faaf 	bl	8007ed4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00c      	beq.n	800699a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006986:	2b00      	cmp	r3, #0
 8006988:	d007      	beq.n	800699a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f001 faa7 	bl	8007ee8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00c      	beq.n	80069be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d007      	beq.n	80069be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80069b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fab1 	bl	8006f20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00c      	beq.n	80069e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f003 0320 	and.w	r3, r3, #32
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d007      	beq.n	80069e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f06f 0220 	mvn.w	r2, #32
 80069da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 fa6f 	bl	8007ec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00c      	beq.n	8006a06 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d007      	beq.n	8006a06 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80069fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 fa7b 	bl	8007efc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00c      	beq.n	8006a2a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d007      	beq.n	8006a2a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 fa73 	bl	8007f10 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00c      	beq.n	8006a4e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d007      	beq.n	8006a4e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 fa6b 	bl	8007f24 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00c      	beq.n	8006a72 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d007      	beq.n	8006a72 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f001 fa63 	bl	8007f38 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a72:	bf00      	nop
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d101      	bne.n	8006a9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a96:	2302      	movs	r3, #2
 8006a98:	e0ff      	b.n	8006c9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b14      	cmp	r3, #20
 8006aa6:	f200 80f0 	bhi.w	8006c8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab0:	08006b05 	.word	0x08006b05
 8006ab4:	08006c8b 	.word	0x08006c8b
 8006ab8:	08006c8b 	.word	0x08006c8b
 8006abc:	08006c8b 	.word	0x08006c8b
 8006ac0:	08006b45 	.word	0x08006b45
 8006ac4:	08006c8b 	.word	0x08006c8b
 8006ac8:	08006c8b 	.word	0x08006c8b
 8006acc:	08006c8b 	.word	0x08006c8b
 8006ad0:	08006b87 	.word	0x08006b87
 8006ad4:	08006c8b 	.word	0x08006c8b
 8006ad8:	08006c8b 	.word	0x08006c8b
 8006adc:	08006c8b 	.word	0x08006c8b
 8006ae0:	08006bc7 	.word	0x08006bc7
 8006ae4:	08006c8b 	.word	0x08006c8b
 8006ae8:	08006c8b 	.word	0x08006c8b
 8006aec:	08006c8b 	.word	0x08006c8b
 8006af0:	08006c09 	.word	0x08006c09
 8006af4:	08006c8b 	.word	0x08006c8b
 8006af8:	08006c8b 	.word	0x08006c8b
 8006afc:	08006c8b 	.word	0x08006c8b
 8006b00:	08006c49 	.word	0x08006c49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fba2 	bl	8007254 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	699a      	ldr	r2, [r3, #24]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f042 0208 	orr.w	r2, r2, #8
 8006b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699a      	ldr	r2, [r3, #24]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0204 	bic.w	r2, r2, #4
 8006b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6999      	ldr	r1, [r3, #24]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	691a      	ldr	r2, [r3, #16]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	619a      	str	r2, [r3, #24]
      break;
 8006b42:	e0a5      	b.n	8006c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68b9      	ldr	r1, [r7, #8]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fc1c 	bl	8007388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699a      	ldr	r2, [r3, #24]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	699a      	ldr	r2, [r3, #24]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6999      	ldr	r1, [r3, #24]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	021a      	lsls	r2, r3, #8
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	619a      	str	r2, [r3, #24]
      break;
 8006b84:	e084      	b.n	8006c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68b9      	ldr	r1, [r7, #8]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 fc8f 	bl	80074b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69da      	ldr	r2, [r3, #28]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f042 0208 	orr.w	r2, r2, #8
 8006ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	69da      	ldr	r2, [r3, #28]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0204 	bic.w	r2, r2, #4
 8006bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69d9      	ldr	r1, [r3, #28]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	691a      	ldr	r2, [r3, #16]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	61da      	str	r2, [r3, #28]
      break;
 8006bc4:	e064      	b.n	8006c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68b9      	ldr	r1, [r7, #8]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 fd01 	bl	80075d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	69da      	ldr	r2, [r3, #28]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69da      	ldr	r2, [r3, #28]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69d9      	ldr	r1, [r3, #28]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	021a      	lsls	r2, r3, #8
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	61da      	str	r2, [r3, #28]
      break;
 8006c06:	e043      	b.n	8006c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68b9      	ldr	r1, [r7, #8]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 fd74 	bl	80076fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f042 0208 	orr.w	r2, r2, #8
 8006c22:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0204 	bic.w	r2, r2, #4
 8006c32:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	691a      	ldr	r2, [r3, #16]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006c46:	e023      	b.n	8006c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68b9      	ldr	r1, [r7, #8]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 fdbe 	bl	80077d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c62:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c72:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	021a      	lsls	r2, r3, #8
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	430a      	orrs	r2, r1
 8006c86:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006c88:	e002      	b.n	8006c90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop

08006ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d101      	bne.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1c>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	e0f6      	b.n	8006eae <HAL_TIM_ConfigClockSource+0x20a>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006cde:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a6f      	ldr	r2, [pc, #444]	@ (8006eb8 <HAL_TIM_ConfigClockSource+0x214>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	f000 80c1 	beq.w	8006e82 <HAL_TIM_ConfigClockSource+0x1de>
 8006d00:	4a6d      	ldr	r2, [pc, #436]	@ (8006eb8 <HAL_TIM_ConfigClockSource+0x214>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	f200 80c6 	bhi.w	8006e94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d08:	4a6c      	ldr	r2, [pc, #432]	@ (8006ebc <HAL_TIM_ConfigClockSource+0x218>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	f000 80b9 	beq.w	8006e82 <HAL_TIM_ConfigClockSource+0x1de>
 8006d10:	4a6a      	ldr	r2, [pc, #424]	@ (8006ebc <HAL_TIM_ConfigClockSource+0x218>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	f200 80be 	bhi.w	8006e94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d18:	4a69      	ldr	r2, [pc, #420]	@ (8006ec0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	f000 80b1 	beq.w	8006e82 <HAL_TIM_ConfigClockSource+0x1de>
 8006d20:	4a67      	ldr	r2, [pc, #412]	@ (8006ec0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	f200 80b6 	bhi.w	8006e94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d28:	4a66      	ldr	r2, [pc, #408]	@ (8006ec4 <HAL_TIM_ConfigClockSource+0x220>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	f000 80a9 	beq.w	8006e82 <HAL_TIM_ConfigClockSource+0x1de>
 8006d30:	4a64      	ldr	r2, [pc, #400]	@ (8006ec4 <HAL_TIM_ConfigClockSource+0x220>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	f200 80ae 	bhi.w	8006e94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d38:	4a63      	ldr	r2, [pc, #396]	@ (8006ec8 <HAL_TIM_ConfigClockSource+0x224>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	f000 80a1 	beq.w	8006e82 <HAL_TIM_ConfigClockSource+0x1de>
 8006d40:	4a61      	ldr	r2, [pc, #388]	@ (8006ec8 <HAL_TIM_ConfigClockSource+0x224>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	f200 80a6 	bhi.w	8006e94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d48:	4a60      	ldr	r2, [pc, #384]	@ (8006ecc <HAL_TIM_ConfigClockSource+0x228>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	f000 8099 	beq.w	8006e82 <HAL_TIM_ConfigClockSource+0x1de>
 8006d50:	4a5e      	ldr	r2, [pc, #376]	@ (8006ecc <HAL_TIM_ConfigClockSource+0x228>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	f200 809e 	bhi.w	8006e94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d58:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006d5c:	f000 8091 	beq.w	8006e82 <HAL_TIM_ConfigClockSource+0x1de>
 8006d60:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006d64:	f200 8096 	bhi.w	8006e94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d6c:	f000 8089 	beq.w	8006e82 <HAL_TIM_ConfigClockSource+0x1de>
 8006d70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d74:	f200 808e 	bhi.w	8006e94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d7c:	d03e      	beq.n	8006dfc <HAL_TIM_ConfigClockSource+0x158>
 8006d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d82:	f200 8087 	bhi.w	8006e94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d8a:	f000 8086 	beq.w	8006e9a <HAL_TIM_ConfigClockSource+0x1f6>
 8006d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d92:	d87f      	bhi.n	8006e94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d94:	2b70      	cmp	r3, #112	@ 0x70
 8006d96:	d01a      	beq.n	8006dce <HAL_TIM_ConfigClockSource+0x12a>
 8006d98:	2b70      	cmp	r3, #112	@ 0x70
 8006d9a:	d87b      	bhi.n	8006e94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d9c:	2b60      	cmp	r3, #96	@ 0x60
 8006d9e:	d050      	beq.n	8006e42 <HAL_TIM_ConfigClockSource+0x19e>
 8006da0:	2b60      	cmp	r3, #96	@ 0x60
 8006da2:	d877      	bhi.n	8006e94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006da4:	2b50      	cmp	r3, #80	@ 0x50
 8006da6:	d03c      	beq.n	8006e22 <HAL_TIM_ConfigClockSource+0x17e>
 8006da8:	2b50      	cmp	r3, #80	@ 0x50
 8006daa:	d873      	bhi.n	8006e94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dac:	2b40      	cmp	r3, #64	@ 0x40
 8006dae:	d058      	beq.n	8006e62 <HAL_TIM_ConfigClockSource+0x1be>
 8006db0:	2b40      	cmp	r3, #64	@ 0x40
 8006db2:	d86f      	bhi.n	8006e94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006db4:	2b30      	cmp	r3, #48	@ 0x30
 8006db6:	d064      	beq.n	8006e82 <HAL_TIM_ConfigClockSource+0x1de>
 8006db8:	2b30      	cmp	r3, #48	@ 0x30
 8006dba:	d86b      	bhi.n	8006e94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dbc:	2b20      	cmp	r3, #32
 8006dbe:	d060      	beq.n	8006e82 <HAL_TIM_ConfigClockSource+0x1de>
 8006dc0:	2b20      	cmp	r3, #32
 8006dc2:	d867      	bhi.n	8006e94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d05c      	beq.n	8006e82 <HAL_TIM_ConfigClockSource+0x1de>
 8006dc8:	2b10      	cmp	r3, #16
 8006dca:	d05a      	beq.n	8006e82 <HAL_TIM_ConfigClockSource+0x1de>
 8006dcc:	e062      	b.n	8006e94 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006dde:	f000 fddf 	bl	80079a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006df0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	609a      	str	r2, [r3, #8]
      break;
 8006dfa:	e04f      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e0c:	f000 fdc8 	bl	80079a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689a      	ldr	r2, [r3, #8]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e1e:	609a      	str	r2, [r3, #8]
      break;
 8006e20:	e03c      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f000 fd3a 	bl	80078a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2150      	movs	r1, #80	@ 0x50
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 fd93 	bl	8007966 <TIM_ITRx_SetConfig>
      break;
 8006e40:	e02c      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f000 fd59 	bl	8007906 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2160      	movs	r1, #96	@ 0x60
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 fd83 	bl	8007966 <TIM_ITRx_SetConfig>
      break;
 8006e60:	e01c      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e6e:	461a      	mov	r2, r3
 8006e70:	f000 fd1a 	bl	80078a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2140      	movs	r1, #64	@ 0x40
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 fd73 	bl	8007966 <TIM_ITRx_SetConfig>
      break;
 8006e80:	e00c      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	f000 fd6a 	bl	8007966 <TIM_ITRx_SetConfig>
      break;
 8006e92:	e003      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	73fb      	strb	r3, [r7, #15]
      break;
 8006e98:	e000      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006e9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	00100070 	.word	0x00100070
 8006ebc:	00100060 	.word	0x00100060
 8006ec0:	00100050 	.word	0x00100050
 8006ec4:	00100040 	.word	0x00100040
 8006ec8:	00100030 	.word	0x00100030
 8006ecc:	00100020 	.word	0x00100020

08006ed0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f54:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d107      	bne.n	8006f70 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2201      	movs	r2, #1
 8006f64:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f6e:	e02a      	b.n	8006fc6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d107      	bne.n	8006f8a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f88:	e01d      	b.n	8006fc6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d107      	bne.n	8006fa4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2204      	movs	r2, #4
 8006f98:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fa2:	e010      	b.n	8006fc6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d107      	bne.n	8006fbe <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2208      	movs	r2, #8
 8006fb2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006fbc:	e003      	b.n	8006fc6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f7ff ffb4 	bl	8006f34 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	771a      	strb	r2, [r3, #28]
}
 8006fd2:	bf00      	nop
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d10b      	bne.n	800700a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	69db      	ldr	r3, [r3, #28]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d136      	bne.n	800706e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007008:	e031      	b.n	800706e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	429a      	cmp	r2, r3
 8007012:	d10b      	bne.n	800702c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2202      	movs	r2, #2
 8007018:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d125      	bne.n	800706e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800702a:	e020      	b.n	800706e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	429a      	cmp	r2, r3
 8007034:	d10b      	bne.n	800704e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2204      	movs	r2, #4
 800703a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d114      	bne.n	800706e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800704c:	e00f      	b.n	800706e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	429a      	cmp	r2, r3
 8007056:	d10a      	bne.n	800706e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2208      	movs	r2, #8
 800705c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d103      	bne.n	800706e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f7ff ff42 	bl	8006ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	771a      	strb	r2, [r3, #28]
}
 800707a:	bf00      	nop
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	429a      	cmp	r2, r3
 8007098:	d103      	bne.n	80070a2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2201      	movs	r2, #1
 800709e:	771a      	strb	r2, [r3, #28]
 80070a0:	e019      	b.n	80070d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d103      	bne.n	80070b4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2202      	movs	r2, #2
 80070b0:	771a      	strb	r2, [r3, #28]
 80070b2:	e010      	b.n	80070d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d103      	bne.n	80070c6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2204      	movs	r2, #4
 80070c2:	771a      	strb	r2, [r3, #28]
 80070c4:	e007      	b.n	80070d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d102      	bne.n	80070d6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2208      	movs	r2, #8
 80070d4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f7ff ff18 	bl	8006f0c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	771a      	strb	r2, [r3, #28]
}
 80070e2:	bf00      	nop
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
	...

080070ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a4c      	ldr	r2, [pc, #304]	@ (8007230 <TIM_Base_SetConfig+0x144>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d017      	beq.n	8007134 <TIM_Base_SetConfig+0x48>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800710a:	d013      	beq.n	8007134 <TIM_Base_SetConfig+0x48>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a49      	ldr	r2, [pc, #292]	@ (8007234 <TIM_Base_SetConfig+0x148>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00f      	beq.n	8007134 <TIM_Base_SetConfig+0x48>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a48      	ldr	r2, [pc, #288]	@ (8007238 <TIM_Base_SetConfig+0x14c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00b      	beq.n	8007134 <TIM_Base_SetConfig+0x48>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a47      	ldr	r2, [pc, #284]	@ (800723c <TIM_Base_SetConfig+0x150>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d007      	beq.n	8007134 <TIM_Base_SetConfig+0x48>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a46      	ldr	r2, [pc, #280]	@ (8007240 <TIM_Base_SetConfig+0x154>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d003      	beq.n	8007134 <TIM_Base_SetConfig+0x48>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a45      	ldr	r2, [pc, #276]	@ (8007244 <TIM_Base_SetConfig+0x158>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d108      	bne.n	8007146 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800713a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4313      	orrs	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a39      	ldr	r2, [pc, #228]	@ (8007230 <TIM_Base_SetConfig+0x144>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d023      	beq.n	8007196 <TIM_Base_SetConfig+0xaa>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007154:	d01f      	beq.n	8007196 <TIM_Base_SetConfig+0xaa>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a36      	ldr	r2, [pc, #216]	@ (8007234 <TIM_Base_SetConfig+0x148>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d01b      	beq.n	8007196 <TIM_Base_SetConfig+0xaa>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a35      	ldr	r2, [pc, #212]	@ (8007238 <TIM_Base_SetConfig+0x14c>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d017      	beq.n	8007196 <TIM_Base_SetConfig+0xaa>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a34      	ldr	r2, [pc, #208]	@ (800723c <TIM_Base_SetConfig+0x150>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d013      	beq.n	8007196 <TIM_Base_SetConfig+0xaa>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a33      	ldr	r2, [pc, #204]	@ (8007240 <TIM_Base_SetConfig+0x154>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00f      	beq.n	8007196 <TIM_Base_SetConfig+0xaa>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a33      	ldr	r2, [pc, #204]	@ (8007248 <TIM_Base_SetConfig+0x15c>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d00b      	beq.n	8007196 <TIM_Base_SetConfig+0xaa>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a32      	ldr	r2, [pc, #200]	@ (800724c <TIM_Base_SetConfig+0x160>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d007      	beq.n	8007196 <TIM_Base_SetConfig+0xaa>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a31      	ldr	r2, [pc, #196]	@ (8007250 <TIM_Base_SetConfig+0x164>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d003      	beq.n	8007196 <TIM_Base_SetConfig+0xaa>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a2c      	ldr	r2, [pc, #176]	@ (8007244 <TIM_Base_SetConfig+0x158>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d108      	bne.n	80071a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800719c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a18      	ldr	r2, [pc, #96]	@ (8007230 <TIM_Base_SetConfig+0x144>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d013      	beq.n	80071fc <TIM_Base_SetConfig+0x110>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a1a      	ldr	r2, [pc, #104]	@ (8007240 <TIM_Base_SetConfig+0x154>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d00f      	beq.n	80071fc <TIM_Base_SetConfig+0x110>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a1a      	ldr	r2, [pc, #104]	@ (8007248 <TIM_Base_SetConfig+0x15c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d00b      	beq.n	80071fc <TIM_Base_SetConfig+0x110>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a19      	ldr	r2, [pc, #100]	@ (800724c <TIM_Base_SetConfig+0x160>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d007      	beq.n	80071fc <TIM_Base_SetConfig+0x110>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a18      	ldr	r2, [pc, #96]	@ (8007250 <TIM_Base_SetConfig+0x164>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d003      	beq.n	80071fc <TIM_Base_SetConfig+0x110>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a13      	ldr	r2, [pc, #76]	@ (8007244 <TIM_Base_SetConfig+0x158>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d103      	bne.n	8007204 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	691a      	ldr	r2, [r3, #16]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b01      	cmp	r3, #1
 8007214:	d105      	bne.n	8007222 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	f023 0201 	bic.w	r2, r3, #1
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	611a      	str	r2, [r3, #16]
  }
}
 8007222:	bf00      	nop
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	40012c00 	.word	0x40012c00
 8007234:	40000400 	.word	0x40000400
 8007238:	40000800 	.word	0x40000800
 800723c:	40000c00 	.word	0x40000c00
 8007240:	40013400 	.word	0x40013400
 8007244:	40015000 	.word	0x40015000
 8007248:	40014000 	.word	0x40014000
 800724c:	40014400 	.word	0x40014400
 8007250:	40014800 	.word	0x40014800

08007254 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	f023 0201 	bic.w	r2, r3, #1
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 0303 	bic.w	r3, r3, #3
 800728e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f023 0302 	bic.w	r3, r3, #2
 80072a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a30      	ldr	r2, [pc, #192]	@ (8007370 <TIM_OC1_SetConfig+0x11c>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d013      	beq.n	80072dc <TIM_OC1_SetConfig+0x88>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a2f      	ldr	r2, [pc, #188]	@ (8007374 <TIM_OC1_SetConfig+0x120>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d00f      	beq.n	80072dc <TIM_OC1_SetConfig+0x88>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a2e      	ldr	r2, [pc, #184]	@ (8007378 <TIM_OC1_SetConfig+0x124>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d00b      	beq.n	80072dc <TIM_OC1_SetConfig+0x88>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a2d      	ldr	r2, [pc, #180]	@ (800737c <TIM_OC1_SetConfig+0x128>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d007      	beq.n	80072dc <TIM_OC1_SetConfig+0x88>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a2c      	ldr	r2, [pc, #176]	@ (8007380 <TIM_OC1_SetConfig+0x12c>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d003      	beq.n	80072dc <TIM_OC1_SetConfig+0x88>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a2b      	ldr	r2, [pc, #172]	@ (8007384 <TIM_OC1_SetConfig+0x130>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d10c      	bne.n	80072f6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f023 0308 	bic.w	r3, r3, #8
 80072e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f023 0304 	bic.w	r3, r3, #4
 80072f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007370 <TIM_OC1_SetConfig+0x11c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d013      	beq.n	8007326 <TIM_OC1_SetConfig+0xd2>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a1c      	ldr	r2, [pc, #112]	@ (8007374 <TIM_OC1_SetConfig+0x120>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d00f      	beq.n	8007326 <TIM_OC1_SetConfig+0xd2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a1b      	ldr	r2, [pc, #108]	@ (8007378 <TIM_OC1_SetConfig+0x124>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d00b      	beq.n	8007326 <TIM_OC1_SetConfig+0xd2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a1a      	ldr	r2, [pc, #104]	@ (800737c <TIM_OC1_SetConfig+0x128>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d007      	beq.n	8007326 <TIM_OC1_SetConfig+0xd2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a19      	ldr	r2, [pc, #100]	@ (8007380 <TIM_OC1_SetConfig+0x12c>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d003      	beq.n	8007326 <TIM_OC1_SetConfig+0xd2>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a18      	ldr	r2, [pc, #96]	@ (8007384 <TIM_OC1_SetConfig+0x130>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d111      	bne.n	800734a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800732c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	4313      	orrs	r3, r2
 800733e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	4313      	orrs	r3, r2
 8007348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	621a      	str	r2, [r3, #32]
}
 8007364:	bf00      	nop
 8007366:	371c      	adds	r7, #28
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	40012c00 	.word	0x40012c00
 8007374:	40013400 	.word	0x40013400
 8007378:	40014000 	.word	0x40014000
 800737c:	40014400 	.word	0x40014400
 8007380:	40014800 	.word	0x40014800
 8007384:	40015000 	.word	0x40015000

08007388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a1b      	ldr	r3, [r3, #32]
 800739c:	f023 0210 	bic.w	r2, r3, #16
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	021b      	lsls	r3, r3, #8
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f023 0320 	bic.w	r3, r3, #32
 80073d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	011b      	lsls	r3, r3, #4
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a2c      	ldr	r2, [pc, #176]	@ (8007498 <TIM_OC2_SetConfig+0x110>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d007      	beq.n	80073fc <TIM_OC2_SetConfig+0x74>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a2b      	ldr	r2, [pc, #172]	@ (800749c <TIM_OC2_SetConfig+0x114>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d003      	beq.n	80073fc <TIM_OC2_SetConfig+0x74>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a2a      	ldr	r2, [pc, #168]	@ (80074a0 <TIM_OC2_SetConfig+0x118>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d10d      	bne.n	8007418 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	011b      	lsls	r3, r3, #4
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	4313      	orrs	r3, r2
 800740e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007416:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a1f      	ldr	r2, [pc, #124]	@ (8007498 <TIM_OC2_SetConfig+0x110>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d013      	beq.n	8007448 <TIM_OC2_SetConfig+0xc0>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a1e      	ldr	r2, [pc, #120]	@ (800749c <TIM_OC2_SetConfig+0x114>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d00f      	beq.n	8007448 <TIM_OC2_SetConfig+0xc0>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a1e      	ldr	r2, [pc, #120]	@ (80074a4 <TIM_OC2_SetConfig+0x11c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d00b      	beq.n	8007448 <TIM_OC2_SetConfig+0xc0>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a1d      	ldr	r2, [pc, #116]	@ (80074a8 <TIM_OC2_SetConfig+0x120>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d007      	beq.n	8007448 <TIM_OC2_SetConfig+0xc0>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a1c      	ldr	r2, [pc, #112]	@ (80074ac <TIM_OC2_SetConfig+0x124>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d003      	beq.n	8007448 <TIM_OC2_SetConfig+0xc0>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a17      	ldr	r2, [pc, #92]	@ (80074a0 <TIM_OC2_SetConfig+0x118>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d113      	bne.n	8007470 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800744e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007456:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	4313      	orrs	r3, r2
 8007462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	4313      	orrs	r3, r2
 800746e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	621a      	str	r2, [r3, #32]
}
 800748a:	bf00      	nop
 800748c:	371c      	adds	r7, #28
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	40012c00 	.word	0x40012c00
 800749c:	40013400 	.word	0x40013400
 80074a0:	40015000 	.word	0x40015000
 80074a4:	40014000 	.word	0x40014000
 80074a8:	40014400 	.word	0x40014400
 80074ac:	40014800 	.word	0x40014800

080074b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a1b      	ldr	r3, [r3, #32]
 80074c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f023 0303 	bic.w	r3, r3, #3
 80074ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80074fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	021b      	lsls	r3, r3, #8
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	4313      	orrs	r3, r2
 8007508:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a2b      	ldr	r2, [pc, #172]	@ (80075bc <TIM_OC3_SetConfig+0x10c>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d007      	beq.n	8007522 <TIM_OC3_SetConfig+0x72>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a2a      	ldr	r2, [pc, #168]	@ (80075c0 <TIM_OC3_SetConfig+0x110>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d003      	beq.n	8007522 <TIM_OC3_SetConfig+0x72>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a29      	ldr	r2, [pc, #164]	@ (80075c4 <TIM_OC3_SetConfig+0x114>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d10d      	bne.n	800753e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007528:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	021b      	lsls	r3, r3, #8
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	4313      	orrs	r3, r2
 8007534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800753c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a1e      	ldr	r2, [pc, #120]	@ (80075bc <TIM_OC3_SetConfig+0x10c>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d013      	beq.n	800756e <TIM_OC3_SetConfig+0xbe>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a1d      	ldr	r2, [pc, #116]	@ (80075c0 <TIM_OC3_SetConfig+0x110>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d00f      	beq.n	800756e <TIM_OC3_SetConfig+0xbe>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a1d      	ldr	r2, [pc, #116]	@ (80075c8 <TIM_OC3_SetConfig+0x118>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d00b      	beq.n	800756e <TIM_OC3_SetConfig+0xbe>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a1c      	ldr	r2, [pc, #112]	@ (80075cc <TIM_OC3_SetConfig+0x11c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d007      	beq.n	800756e <TIM_OC3_SetConfig+0xbe>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a1b      	ldr	r2, [pc, #108]	@ (80075d0 <TIM_OC3_SetConfig+0x120>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d003      	beq.n	800756e <TIM_OC3_SetConfig+0xbe>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a16      	ldr	r2, [pc, #88]	@ (80075c4 <TIM_OC3_SetConfig+0x114>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d113      	bne.n	8007596 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800757c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	011b      	lsls	r3, r3, #4
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	4313      	orrs	r3, r2
 8007588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	011b      	lsls	r3, r3, #4
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	4313      	orrs	r3, r2
 8007594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685a      	ldr	r2, [r3, #4]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	621a      	str	r2, [r3, #32]
}
 80075b0:	bf00      	nop
 80075b2:	371c      	adds	r7, #28
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	40012c00 	.word	0x40012c00
 80075c0:	40013400 	.word	0x40013400
 80075c4:	40015000 	.word	0x40015000
 80075c8:	40014000 	.word	0x40014000
 80075cc:	40014400 	.word	0x40014400
 80075d0:	40014800 	.word	0x40014800

080075d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a1b      	ldr	r3, [r3, #32]
 80075e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	69db      	ldr	r3, [r3, #28]
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800760e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	021b      	lsls	r3, r3, #8
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	4313      	orrs	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	031b      	lsls	r3, r3, #12
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	4313      	orrs	r3, r2
 800762e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a2c      	ldr	r2, [pc, #176]	@ (80076e4 <TIM_OC4_SetConfig+0x110>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d007      	beq.n	8007648 <TIM_OC4_SetConfig+0x74>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a2b      	ldr	r2, [pc, #172]	@ (80076e8 <TIM_OC4_SetConfig+0x114>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d003      	beq.n	8007648 <TIM_OC4_SetConfig+0x74>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a2a      	ldr	r2, [pc, #168]	@ (80076ec <TIM_OC4_SetConfig+0x118>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d10d      	bne.n	8007664 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800764e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	031b      	lsls	r3, r3, #12
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	4313      	orrs	r3, r2
 800765a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007662:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a1f      	ldr	r2, [pc, #124]	@ (80076e4 <TIM_OC4_SetConfig+0x110>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d013      	beq.n	8007694 <TIM_OC4_SetConfig+0xc0>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a1e      	ldr	r2, [pc, #120]	@ (80076e8 <TIM_OC4_SetConfig+0x114>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d00f      	beq.n	8007694 <TIM_OC4_SetConfig+0xc0>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a1e      	ldr	r2, [pc, #120]	@ (80076f0 <TIM_OC4_SetConfig+0x11c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00b      	beq.n	8007694 <TIM_OC4_SetConfig+0xc0>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a1d      	ldr	r2, [pc, #116]	@ (80076f4 <TIM_OC4_SetConfig+0x120>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d007      	beq.n	8007694 <TIM_OC4_SetConfig+0xc0>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a1c      	ldr	r2, [pc, #112]	@ (80076f8 <TIM_OC4_SetConfig+0x124>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d003      	beq.n	8007694 <TIM_OC4_SetConfig+0xc0>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a17      	ldr	r2, [pc, #92]	@ (80076ec <TIM_OC4_SetConfig+0x118>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d113      	bne.n	80076bc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800769a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80076a2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	019b      	lsls	r3, r3, #6
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	019b      	lsls	r3, r3, #6
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	621a      	str	r2, [r3, #32]
}
 80076d6:	bf00      	nop
 80076d8:	371c      	adds	r7, #28
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	40012c00 	.word	0x40012c00
 80076e8:	40013400 	.word	0x40013400
 80076ec:	40015000 	.word	0x40015000
 80076f0:	40014000 	.word	0x40014000
 80076f4:	40014400 	.word	0x40014400
 80076f8:	40014800 	.word	0x40014800

080076fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800772a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800772e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	4313      	orrs	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007740:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	041b      	lsls	r3, r3, #16
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	4313      	orrs	r3, r2
 800774c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a19      	ldr	r2, [pc, #100]	@ (80077b8 <TIM_OC5_SetConfig+0xbc>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d013      	beq.n	800777e <TIM_OC5_SetConfig+0x82>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a18      	ldr	r2, [pc, #96]	@ (80077bc <TIM_OC5_SetConfig+0xc0>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d00f      	beq.n	800777e <TIM_OC5_SetConfig+0x82>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a17      	ldr	r2, [pc, #92]	@ (80077c0 <TIM_OC5_SetConfig+0xc4>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d00b      	beq.n	800777e <TIM_OC5_SetConfig+0x82>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a16      	ldr	r2, [pc, #88]	@ (80077c4 <TIM_OC5_SetConfig+0xc8>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d007      	beq.n	800777e <TIM_OC5_SetConfig+0x82>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a15      	ldr	r2, [pc, #84]	@ (80077c8 <TIM_OC5_SetConfig+0xcc>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d003      	beq.n	800777e <TIM_OC5_SetConfig+0x82>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a14      	ldr	r2, [pc, #80]	@ (80077cc <TIM_OC5_SetConfig+0xd0>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d109      	bne.n	8007792 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007784:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	021b      	lsls	r3, r3, #8
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	4313      	orrs	r3, r2
 8007790:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	621a      	str	r2, [r3, #32]
}
 80077ac:	bf00      	nop
 80077ae:	371c      	adds	r7, #28
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	40012c00 	.word	0x40012c00
 80077bc:	40013400 	.word	0x40013400
 80077c0:	40014000 	.word	0x40014000
 80077c4:	40014400 	.word	0x40014400
 80077c8:	40014800 	.word	0x40014800
 80077cc:	40015000 	.word	0x40015000

080077d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	021b      	lsls	r3, r3, #8
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	4313      	orrs	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	051b      	lsls	r3, r3, #20
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	4313      	orrs	r3, r2
 8007822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a1a      	ldr	r2, [pc, #104]	@ (8007890 <TIM_OC6_SetConfig+0xc0>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d013      	beq.n	8007854 <TIM_OC6_SetConfig+0x84>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a19      	ldr	r2, [pc, #100]	@ (8007894 <TIM_OC6_SetConfig+0xc4>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d00f      	beq.n	8007854 <TIM_OC6_SetConfig+0x84>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a18      	ldr	r2, [pc, #96]	@ (8007898 <TIM_OC6_SetConfig+0xc8>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d00b      	beq.n	8007854 <TIM_OC6_SetConfig+0x84>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a17      	ldr	r2, [pc, #92]	@ (800789c <TIM_OC6_SetConfig+0xcc>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d007      	beq.n	8007854 <TIM_OC6_SetConfig+0x84>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a16      	ldr	r2, [pc, #88]	@ (80078a0 <TIM_OC6_SetConfig+0xd0>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d003      	beq.n	8007854 <TIM_OC6_SetConfig+0x84>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a15      	ldr	r2, [pc, #84]	@ (80078a4 <TIM_OC6_SetConfig+0xd4>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d109      	bne.n	8007868 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800785a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	029b      	lsls	r3, r3, #10
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4313      	orrs	r3, r2
 8007866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	621a      	str	r2, [r3, #32]
}
 8007882:	bf00      	nop
 8007884:	371c      	adds	r7, #28
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	40012c00 	.word	0x40012c00
 8007894:	40013400 	.word	0x40013400
 8007898:	40014000 	.word	0x40014000
 800789c:	40014400 	.word	0x40014400
 80078a0:	40014800 	.word	0x40014800
 80078a4:	40015000 	.word	0x40015000

080078a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b087      	sub	sp, #28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	f023 0201 	bic.w	r2, r3, #1
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	011b      	lsls	r3, r3, #4
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	4313      	orrs	r3, r2
 80078dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f023 030a 	bic.w	r3, r3, #10
 80078e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	621a      	str	r2, [r3, #32]
}
 80078fa:	bf00      	nop
 80078fc:	371c      	adds	r7, #28
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007906:	b480      	push	{r7}
 8007908:	b087      	sub	sp, #28
 800790a:	af00      	add	r7, sp, #0
 800790c:	60f8      	str	r0, [r7, #12]
 800790e:	60b9      	str	r1, [r7, #8]
 8007910:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6a1b      	ldr	r3, [r3, #32]
 800791c:	f023 0210 	bic.w	r2, r3, #16
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007930:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	031b      	lsls	r3, r3, #12
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	4313      	orrs	r3, r2
 800793a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007942:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	011b      	lsls	r3, r3, #4
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	4313      	orrs	r3, r2
 800794c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	621a      	str	r2, [r3, #32]
}
 800795a:	bf00      	nop
 800795c:	371c      	adds	r7, #28
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007966:	b480      	push	{r7}
 8007968:	b085      	sub	sp, #20
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800797c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007980:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4313      	orrs	r3, r2
 8007988:	f043 0307 	orr.w	r3, r3, #7
 800798c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	609a      	str	r2, [r3, #8]
}
 8007994:	bf00      	nop
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	021a      	lsls	r2, r3, #8
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	431a      	orrs	r2, r3
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	609a      	str	r2, [r3, #8]
}
 80079d4:	bf00      	nop
 80079d6:	371c      	adds	r7, #28
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b087      	sub	sp, #28
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f003 031f 	and.w	r3, r3, #31
 80079f2:	2201      	movs	r2, #1
 80079f4:	fa02 f303 	lsl.w	r3, r2, r3
 80079f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6a1a      	ldr	r2, [r3, #32]
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	43db      	mvns	r3, r3
 8007a02:	401a      	ands	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6a1a      	ldr	r2, [r3, #32]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f003 031f 	and.w	r3, r3, #31
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	fa01 f303 	lsl.w	r3, r1, r3
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	621a      	str	r2, [r3, #32]
}
 8007a1e:	bf00      	nop
 8007a20:	371c      	adds	r7, #28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
	...

08007a2c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d109      	bne.n	8007a50 <HAL_TIMEx_PWMN_Start+0x24>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	bf14      	ite	ne
 8007a48:	2301      	movne	r3, #1
 8007a4a:	2300      	moveq	r3, #0
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	e022      	b.n	8007a96 <HAL_TIMEx_PWMN_Start+0x6a>
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	d109      	bne.n	8007a6a <HAL_TIMEx_PWMN_Start+0x3e>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	bf14      	ite	ne
 8007a62:	2301      	movne	r3, #1
 8007a64:	2300      	moveq	r3, #0
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	e015      	b.n	8007a96 <HAL_TIMEx_PWMN_Start+0x6a>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d109      	bne.n	8007a84 <HAL_TIMEx_PWMN_Start+0x58>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	bf14      	ite	ne
 8007a7c:	2301      	movne	r3, #1
 8007a7e:	2300      	moveq	r3, #0
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	e008      	b.n	8007a96 <HAL_TIMEx_PWMN_Start+0x6a>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	bf14      	ite	ne
 8007a90:	2301      	movne	r3, #1
 8007a92:	2300      	moveq	r3, #0
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e073      	b.n	8007b86 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d104      	bne.n	8007aae <HAL_TIMEx_PWMN_Start+0x82>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007aac:	e013      	b.n	8007ad6 <HAL_TIMEx_PWMN_Start+0xaa>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d104      	bne.n	8007abe <HAL_TIMEx_PWMN_Start+0x92>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007abc:	e00b      	b.n	8007ad6 <HAL_TIMEx_PWMN_Start+0xaa>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b08      	cmp	r3, #8
 8007ac2:	d104      	bne.n	8007ace <HAL_TIMEx_PWMN_Start+0xa2>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007acc:	e003      	b.n	8007ad6 <HAL_TIMEx_PWMN_Start+0xaa>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2204      	movs	r2, #4
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 fa34 	bl	8007f4c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007af2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a25      	ldr	r2, [pc, #148]	@ (8007b90 <HAL_TIMEx_PWMN_Start+0x164>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d022      	beq.n	8007b44 <HAL_TIMEx_PWMN_Start+0x118>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b06:	d01d      	beq.n	8007b44 <HAL_TIMEx_PWMN_Start+0x118>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a21      	ldr	r2, [pc, #132]	@ (8007b94 <HAL_TIMEx_PWMN_Start+0x168>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d018      	beq.n	8007b44 <HAL_TIMEx_PWMN_Start+0x118>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a20      	ldr	r2, [pc, #128]	@ (8007b98 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d013      	beq.n	8007b44 <HAL_TIMEx_PWMN_Start+0x118>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a1e      	ldr	r2, [pc, #120]	@ (8007b9c <HAL_TIMEx_PWMN_Start+0x170>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d00e      	beq.n	8007b44 <HAL_TIMEx_PWMN_Start+0x118>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a1d      	ldr	r2, [pc, #116]	@ (8007ba0 <HAL_TIMEx_PWMN_Start+0x174>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d009      	beq.n	8007b44 <HAL_TIMEx_PWMN_Start+0x118>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a1b      	ldr	r2, [pc, #108]	@ (8007ba4 <HAL_TIMEx_PWMN_Start+0x178>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d004      	beq.n	8007b44 <HAL_TIMEx_PWMN_Start+0x118>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8007ba8 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d115      	bne.n	8007b70 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689a      	ldr	r2, [r3, #8]
 8007b4a:	4b18      	ldr	r3, [pc, #96]	@ (8007bac <HAL_TIMEx_PWMN_Start+0x180>)
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2b06      	cmp	r3, #6
 8007b54:	d015      	beq.n	8007b82 <HAL_TIMEx_PWMN_Start+0x156>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b5c:	d011      	beq.n	8007b82 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f042 0201 	orr.w	r2, r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b6e:	e008      	b.n	8007b82 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f042 0201 	orr.w	r2, r2, #1
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	e000      	b.n	8007b84 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	40012c00 	.word	0x40012c00
 8007b94:	40000400 	.word	0x40000400
 8007b98:	40000800 	.word	0x40000800
 8007b9c:	40000c00 	.word	0x40000c00
 8007ba0:	40013400 	.word	0x40013400
 8007ba4:	40014000 	.word	0x40014000
 8007ba8:	40015000 	.word	0x40015000
 8007bac:	00010007 	.word	0x00010007

08007bb0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 f9c2 	bl	8007f4c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6a1a      	ldr	r2, [r3, #32]
 8007bce:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10f      	bne.n	8007bf8 <HAL_TIMEx_PWMN_Stop+0x48>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6a1a      	ldr	r2, [r3, #32]
 8007bde:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007be2:	4013      	ands	r3, r2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d107      	bne.n	8007bf8 <HAL_TIMEx_PWMN_Stop+0x48>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007bf6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6a1a      	ldr	r2, [r3, #32]
 8007bfe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007c02:	4013      	ands	r3, r2
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10f      	bne.n	8007c28 <HAL_TIMEx_PWMN_Stop+0x78>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6a1a      	ldr	r2, [r3, #32]
 8007c0e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007c12:	4013      	ands	r3, r2
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d107      	bne.n	8007c28 <HAL_TIMEx_PWMN_Stop+0x78>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f022 0201 	bic.w	r2, r2, #1
 8007c26:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d104      	bne.n	8007c38 <HAL_TIMEx_PWMN_Stop+0x88>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c36:	e013      	b.n	8007c60 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	2b04      	cmp	r3, #4
 8007c3c:	d104      	bne.n	8007c48 <HAL_TIMEx_PWMN_Stop+0x98>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c46:	e00b      	b.n	8007c60 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	2b08      	cmp	r3, #8
 8007c4c:	d104      	bne.n	8007c58 <HAL_TIMEx_PWMN_Stop+0xa8>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c56:	e003      	b.n	8007c60 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
	...

08007c6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d101      	bne.n	8007c84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c80:	2302      	movs	r3, #2
 8007c82:	e074      	b.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a34      	ldr	r2, [pc, #208]	@ (8007d7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d009      	beq.n	8007cc2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a33      	ldr	r2, [pc, #204]	@ (8007d80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d004      	beq.n	8007cc2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a31      	ldr	r2, [pc, #196]	@ (8007d84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d108      	bne.n	8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007cc8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a21      	ldr	r2, [pc, #132]	@ (8007d7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d022      	beq.n	8007d42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d04:	d01d      	beq.n	8007d42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8007d88 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d018      	beq.n	8007d42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a1d      	ldr	r2, [pc, #116]	@ (8007d8c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d013      	beq.n	8007d42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8007d90 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d00e      	beq.n	8007d42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a15      	ldr	r2, [pc, #84]	@ (8007d80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d009      	beq.n	8007d42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a18      	ldr	r2, [pc, #96]	@ (8007d94 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d004      	beq.n	8007d42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a11      	ldr	r2, [pc, #68]	@ (8007d84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d10c      	bne.n	8007d5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	40012c00 	.word	0x40012c00
 8007d80:	40013400 	.word	0x40013400
 8007d84:	40015000 	.word	0x40015000
 8007d88:	40000400 	.word	0x40000400
 8007d8c:	40000800 	.word	0x40000800
 8007d90:	40000c00 	.word	0x40000c00
 8007d94:	40014000 	.word	0x40014000

08007d98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d101      	bne.n	8007db4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007db0:	2302      	movs	r3, #2
 8007db2:	e078      	b.n	8007ea6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	041b      	lsls	r3, r3, #16
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	69db      	ldr	r3, [r3, #28]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a1c      	ldr	r2, [pc, #112]	@ (8007eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d009      	beq.n	8007e5a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8007eb8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d004      	beq.n	8007e5a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a19      	ldr	r2, [pc, #100]	@ (8007ebc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d11c      	bne.n	8007e94 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e64:	051b      	lsls	r3, r3, #20
 8007e66:	4313      	orrs	r3, r2
 8007e68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	6a1b      	ldr	r3, [r3, #32]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	40012c00 	.word	0x40012c00
 8007eb8:	40013400 	.word	0x40013400
 8007ebc:	40015000 	.word	0x40015000

08007ec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	f003 030f 	and.w	r3, r3, #15
 8007f5e:	2204      	movs	r2, #4
 8007f60:	fa02 f303 	lsl.w	r3, r2, r3
 8007f64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6a1a      	ldr	r2, [r3, #32]
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	43db      	mvns	r3, r3
 8007f6e:	401a      	ands	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6a1a      	ldr	r2, [r3, #32]
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f003 030f 	and.w	r3, r3, #15
 8007f7e:	6879      	ldr	r1, [r7, #4]
 8007f80:	fa01 f303 	lsl.w	r3, r1, r3
 8007f84:	431a      	orrs	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	621a      	str	r2, [r3, #32]
}
 8007f8a:	bf00      	nop
 8007f8c:	371c      	adds	r7, #28
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b082      	sub	sp, #8
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e042      	b.n	800802e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d106      	bne.n	8007fc0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7f9 ff5a 	bl	8001e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2224      	movs	r2, #36	@ 0x24
 8007fc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f022 0201 	bic.w	r2, r2, #1
 8007fd6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d002      	beq.n	8007fe6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fbb3 	bl	800874c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f8b4 	bl	8008154 <UART_SetConfig>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d101      	bne.n	8007ff6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e01b      	b.n	800802e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008004:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689a      	ldr	r2, [r3, #8]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008014:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f042 0201 	orr.w	r2, r2, #1
 8008024:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fc32 	bl	8008890 <UART_CheckIdleState>
 800802c:	4603      	mov	r3, r0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b08a      	sub	sp, #40	@ 0x28
 800803a:	af02      	add	r7, sp, #8
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	60b9      	str	r1, [r7, #8]
 8008040:	603b      	str	r3, [r7, #0]
 8008042:	4613      	mov	r3, r2
 8008044:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800804c:	2b20      	cmp	r3, #32
 800804e:	d17b      	bne.n	8008148 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d002      	beq.n	800805c <HAL_UART_Transmit+0x26>
 8008056:	88fb      	ldrh	r3, [r7, #6]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e074      	b.n	800814a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2221      	movs	r2, #33	@ 0x21
 800806c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008070:	f7fa fb76 	bl	8002760 <HAL_GetTick>
 8008074:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	88fa      	ldrh	r2, [r7, #6]
 800807a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	88fa      	ldrh	r2, [r7, #6]
 8008082:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800808e:	d108      	bne.n	80080a2 <HAL_UART_Transmit+0x6c>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d104      	bne.n	80080a2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008098:	2300      	movs	r3, #0
 800809a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	61bb      	str	r3, [r7, #24]
 80080a0:	e003      	b.n	80080aa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080a6:	2300      	movs	r3, #0
 80080a8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80080aa:	e030      	b.n	800810e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	2200      	movs	r2, #0
 80080b4:	2180      	movs	r1, #128	@ 0x80
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 fc94 	bl	80089e4 <UART_WaitOnFlagUntilTimeout>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d005      	beq.n	80080ce <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2220      	movs	r2, #32
 80080c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e03d      	b.n	800814a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10b      	bne.n	80080ec <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	881b      	ldrh	r3, [r3, #0]
 80080d8:	461a      	mov	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	3302      	adds	r3, #2
 80080e8:	61bb      	str	r3, [r7, #24]
 80080ea:	e007      	b.n	80080fc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	781a      	ldrb	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	3301      	adds	r3, #1
 80080fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008102:	b29b      	uxth	r3, r3
 8008104:	3b01      	subs	r3, #1
 8008106:	b29a      	uxth	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008114:	b29b      	uxth	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1c8      	bne.n	80080ac <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	2200      	movs	r2, #0
 8008122:	2140      	movs	r1, #64	@ 0x40
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 fc5d 	bl	80089e4 <UART_WaitOnFlagUntilTimeout>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d005      	beq.n	800813c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2220      	movs	r2, #32
 8008134:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e006      	b.n	800814a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2220      	movs	r2, #32
 8008140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008144:	2300      	movs	r3, #0
 8008146:	e000      	b.n	800814a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008148:	2302      	movs	r3, #2
  }
}
 800814a:	4618      	mov	r0, r3
 800814c:	3720      	adds	r7, #32
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
	...

08008154 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008158:	b08c      	sub	sp, #48	@ 0x30
 800815a:	af00      	add	r7, sp, #0
 800815c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	689a      	ldr	r2, [r3, #8]
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	431a      	orrs	r2, r3
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	431a      	orrs	r2, r3
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	4313      	orrs	r3, r2
 800817a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	4baa      	ldr	r3, [pc, #680]	@ (800842c <UART_SetConfig+0x2d8>)
 8008184:	4013      	ands	r3, r2
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	6812      	ldr	r2, [r2, #0]
 800818a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800818c:	430b      	orrs	r3, r1
 800818e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	68da      	ldr	r2, [r3, #12]
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a9f      	ldr	r2, [pc, #636]	@ (8008430 <UART_SetConfig+0x2dc>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d004      	beq.n	80081c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081bc:	4313      	orrs	r3, r2
 80081be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80081ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	6812      	ldr	r2, [r2, #0]
 80081d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081d4:	430b      	orrs	r3, r1
 80081d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081de:	f023 010f 	bic.w	r1, r3, #15
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a90      	ldr	r2, [pc, #576]	@ (8008434 <UART_SetConfig+0x2e0>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d125      	bne.n	8008244 <UART_SetConfig+0xf0>
 80081f8:	4b8f      	ldr	r3, [pc, #572]	@ (8008438 <UART_SetConfig+0x2e4>)
 80081fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081fe:	f003 0303 	and.w	r3, r3, #3
 8008202:	2b03      	cmp	r3, #3
 8008204:	d81a      	bhi.n	800823c <UART_SetConfig+0xe8>
 8008206:	a201      	add	r2, pc, #4	@ (adr r2, 800820c <UART_SetConfig+0xb8>)
 8008208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820c:	0800821d 	.word	0x0800821d
 8008210:	0800822d 	.word	0x0800822d
 8008214:	08008225 	.word	0x08008225
 8008218:	08008235 	.word	0x08008235
 800821c:	2301      	movs	r3, #1
 800821e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008222:	e116      	b.n	8008452 <UART_SetConfig+0x2fe>
 8008224:	2302      	movs	r3, #2
 8008226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800822a:	e112      	b.n	8008452 <UART_SetConfig+0x2fe>
 800822c:	2304      	movs	r3, #4
 800822e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008232:	e10e      	b.n	8008452 <UART_SetConfig+0x2fe>
 8008234:	2308      	movs	r3, #8
 8008236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800823a:	e10a      	b.n	8008452 <UART_SetConfig+0x2fe>
 800823c:	2310      	movs	r3, #16
 800823e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008242:	e106      	b.n	8008452 <UART_SetConfig+0x2fe>
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a7c      	ldr	r2, [pc, #496]	@ (800843c <UART_SetConfig+0x2e8>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d138      	bne.n	80082c0 <UART_SetConfig+0x16c>
 800824e:	4b7a      	ldr	r3, [pc, #488]	@ (8008438 <UART_SetConfig+0x2e4>)
 8008250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008254:	f003 030c 	and.w	r3, r3, #12
 8008258:	2b0c      	cmp	r3, #12
 800825a:	d82d      	bhi.n	80082b8 <UART_SetConfig+0x164>
 800825c:	a201      	add	r2, pc, #4	@ (adr r2, 8008264 <UART_SetConfig+0x110>)
 800825e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008262:	bf00      	nop
 8008264:	08008299 	.word	0x08008299
 8008268:	080082b9 	.word	0x080082b9
 800826c:	080082b9 	.word	0x080082b9
 8008270:	080082b9 	.word	0x080082b9
 8008274:	080082a9 	.word	0x080082a9
 8008278:	080082b9 	.word	0x080082b9
 800827c:	080082b9 	.word	0x080082b9
 8008280:	080082b9 	.word	0x080082b9
 8008284:	080082a1 	.word	0x080082a1
 8008288:	080082b9 	.word	0x080082b9
 800828c:	080082b9 	.word	0x080082b9
 8008290:	080082b9 	.word	0x080082b9
 8008294:	080082b1 	.word	0x080082b1
 8008298:	2300      	movs	r3, #0
 800829a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800829e:	e0d8      	b.n	8008452 <UART_SetConfig+0x2fe>
 80082a0:	2302      	movs	r3, #2
 80082a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082a6:	e0d4      	b.n	8008452 <UART_SetConfig+0x2fe>
 80082a8:	2304      	movs	r3, #4
 80082aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082ae:	e0d0      	b.n	8008452 <UART_SetConfig+0x2fe>
 80082b0:	2308      	movs	r3, #8
 80082b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082b6:	e0cc      	b.n	8008452 <UART_SetConfig+0x2fe>
 80082b8:	2310      	movs	r3, #16
 80082ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082be:	e0c8      	b.n	8008452 <UART_SetConfig+0x2fe>
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a5e      	ldr	r2, [pc, #376]	@ (8008440 <UART_SetConfig+0x2ec>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d125      	bne.n	8008316 <UART_SetConfig+0x1c2>
 80082ca:	4b5b      	ldr	r3, [pc, #364]	@ (8008438 <UART_SetConfig+0x2e4>)
 80082cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80082d4:	2b30      	cmp	r3, #48	@ 0x30
 80082d6:	d016      	beq.n	8008306 <UART_SetConfig+0x1b2>
 80082d8:	2b30      	cmp	r3, #48	@ 0x30
 80082da:	d818      	bhi.n	800830e <UART_SetConfig+0x1ba>
 80082dc:	2b20      	cmp	r3, #32
 80082de:	d00a      	beq.n	80082f6 <UART_SetConfig+0x1a2>
 80082e0:	2b20      	cmp	r3, #32
 80082e2:	d814      	bhi.n	800830e <UART_SetConfig+0x1ba>
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <UART_SetConfig+0x19a>
 80082e8:	2b10      	cmp	r3, #16
 80082ea:	d008      	beq.n	80082fe <UART_SetConfig+0x1aa>
 80082ec:	e00f      	b.n	800830e <UART_SetConfig+0x1ba>
 80082ee:	2300      	movs	r3, #0
 80082f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082f4:	e0ad      	b.n	8008452 <UART_SetConfig+0x2fe>
 80082f6:	2302      	movs	r3, #2
 80082f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082fc:	e0a9      	b.n	8008452 <UART_SetConfig+0x2fe>
 80082fe:	2304      	movs	r3, #4
 8008300:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008304:	e0a5      	b.n	8008452 <UART_SetConfig+0x2fe>
 8008306:	2308      	movs	r3, #8
 8008308:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800830c:	e0a1      	b.n	8008452 <UART_SetConfig+0x2fe>
 800830e:	2310      	movs	r3, #16
 8008310:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008314:	e09d      	b.n	8008452 <UART_SetConfig+0x2fe>
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a4a      	ldr	r2, [pc, #296]	@ (8008444 <UART_SetConfig+0x2f0>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d125      	bne.n	800836c <UART_SetConfig+0x218>
 8008320:	4b45      	ldr	r3, [pc, #276]	@ (8008438 <UART_SetConfig+0x2e4>)
 8008322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008326:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800832a:	2bc0      	cmp	r3, #192	@ 0xc0
 800832c:	d016      	beq.n	800835c <UART_SetConfig+0x208>
 800832e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008330:	d818      	bhi.n	8008364 <UART_SetConfig+0x210>
 8008332:	2b80      	cmp	r3, #128	@ 0x80
 8008334:	d00a      	beq.n	800834c <UART_SetConfig+0x1f8>
 8008336:	2b80      	cmp	r3, #128	@ 0x80
 8008338:	d814      	bhi.n	8008364 <UART_SetConfig+0x210>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <UART_SetConfig+0x1f0>
 800833e:	2b40      	cmp	r3, #64	@ 0x40
 8008340:	d008      	beq.n	8008354 <UART_SetConfig+0x200>
 8008342:	e00f      	b.n	8008364 <UART_SetConfig+0x210>
 8008344:	2300      	movs	r3, #0
 8008346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800834a:	e082      	b.n	8008452 <UART_SetConfig+0x2fe>
 800834c:	2302      	movs	r3, #2
 800834e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008352:	e07e      	b.n	8008452 <UART_SetConfig+0x2fe>
 8008354:	2304      	movs	r3, #4
 8008356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800835a:	e07a      	b.n	8008452 <UART_SetConfig+0x2fe>
 800835c:	2308      	movs	r3, #8
 800835e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008362:	e076      	b.n	8008452 <UART_SetConfig+0x2fe>
 8008364:	2310      	movs	r3, #16
 8008366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800836a:	e072      	b.n	8008452 <UART_SetConfig+0x2fe>
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a35      	ldr	r2, [pc, #212]	@ (8008448 <UART_SetConfig+0x2f4>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d12a      	bne.n	80083cc <UART_SetConfig+0x278>
 8008376:	4b30      	ldr	r3, [pc, #192]	@ (8008438 <UART_SetConfig+0x2e4>)
 8008378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800837c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008380:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008384:	d01a      	beq.n	80083bc <UART_SetConfig+0x268>
 8008386:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800838a:	d81b      	bhi.n	80083c4 <UART_SetConfig+0x270>
 800838c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008390:	d00c      	beq.n	80083ac <UART_SetConfig+0x258>
 8008392:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008396:	d815      	bhi.n	80083c4 <UART_SetConfig+0x270>
 8008398:	2b00      	cmp	r3, #0
 800839a:	d003      	beq.n	80083a4 <UART_SetConfig+0x250>
 800839c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083a0:	d008      	beq.n	80083b4 <UART_SetConfig+0x260>
 80083a2:	e00f      	b.n	80083c4 <UART_SetConfig+0x270>
 80083a4:	2300      	movs	r3, #0
 80083a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083aa:	e052      	b.n	8008452 <UART_SetConfig+0x2fe>
 80083ac:	2302      	movs	r3, #2
 80083ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083b2:	e04e      	b.n	8008452 <UART_SetConfig+0x2fe>
 80083b4:	2304      	movs	r3, #4
 80083b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ba:	e04a      	b.n	8008452 <UART_SetConfig+0x2fe>
 80083bc:	2308      	movs	r3, #8
 80083be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083c2:	e046      	b.n	8008452 <UART_SetConfig+0x2fe>
 80083c4:	2310      	movs	r3, #16
 80083c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ca:	e042      	b.n	8008452 <UART_SetConfig+0x2fe>
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a17      	ldr	r2, [pc, #92]	@ (8008430 <UART_SetConfig+0x2dc>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d13a      	bne.n	800844c <UART_SetConfig+0x2f8>
 80083d6:	4b18      	ldr	r3, [pc, #96]	@ (8008438 <UART_SetConfig+0x2e4>)
 80083d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80083e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083e4:	d01a      	beq.n	800841c <UART_SetConfig+0x2c8>
 80083e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083ea:	d81b      	bhi.n	8008424 <UART_SetConfig+0x2d0>
 80083ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083f0:	d00c      	beq.n	800840c <UART_SetConfig+0x2b8>
 80083f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083f6:	d815      	bhi.n	8008424 <UART_SetConfig+0x2d0>
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d003      	beq.n	8008404 <UART_SetConfig+0x2b0>
 80083fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008400:	d008      	beq.n	8008414 <UART_SetConfig+0x2c0>
 8008402:	e00f      	b.n	8008424 <UART_SetConfig+0x2d0>
 8008404:	2300      	movs	r3, #0
 8008406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800840a:	e022      	b.n	8008452 <UART_SetConfig+0x2fe>
 800840c:	2302      	movs	r3, #2
 800840e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008412:	e01e      	b.n	8008452 <UART_SetConfig+0x2fe>
 8008414:	2304      	movs	r3, #4
 8008416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800841a:	e01a      	b.n	8008452 <UART_SetConfig+0x2fe>
 800841c:	2308      	movs	r3, #8
 800841e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008422:	e016      	b.n	8008452 <UART_SetConfig+0x2fe>
 8008424:	2310      	movs	r3, #16
 8008426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800842a:	e012      	b.n	8008452 <UART_SetConfig+0x2fe>
 800842c:	cfff69f3 	.word	0xcfff69f3
 8008430:	40008000 	.word	0x40008000
 8008434:	40013800 	.word	0x40013800
 8008438:	40021000 	.word	0x40021000
 800843c:	40004400 	.word	0x40004400
 8008440:	40004800 	.word	0x40004800
 8008444:	40004c00 	.word	0x40004c00
 8008448:	40005000 	.word	0x40005000
 800844c:	2310      	movs	r3, #16
 800844e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4aae      	ldr	r2, [pc, #696]	@ (8008710 <UART_SetConfig+0x5bc>)
 8008458:	4293      	cmp	r3, r2
 800845a:	f040 8097 	bne.w	800858c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800845e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008462:	2b08      	cmp	r3, #8
 8008464:	d823      	bhi.n	80084ae <UART_SetConfig+0x35a>
 8008466:	a201      	add	r2, pc, #4	@ (adr r2, 800846c <UART_SetConfig+0x318>)
 8008468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846c:	08008491 	.word	0x08008491
 8008470:	080084af 	.word	0x080084af
 8008474:	08008499 	.word	0x08008499
 8008478:	080084af 	.word	0x080084af
 800847c:	0800849f 	.word	0x0800849f
 8008480:	080084af 	.word	0x080084af
 8008484:	080084af 	.word	0x080084af
 8008488:	080084af 	.word	0x080084af
 800848c:	080084a7 	.word	0x080084a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008490:	f7fd fa5a 	bl	8005948 <HAL_RCC_GetPCLK1Freq>
 8008494:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008496:	e010      	b.n	80084ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008498:	4b9e      	ldr	r3, [pc, #632]	@ (8008714 <UART_SetConfig+0x5c0>)
 800849a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800849c:	e00d      	b.n	80084ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800849e:	f7fd f9e5 	bl	800586c <HAL_RCC_GetSysClockFreq>
 80084a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084a4:	e009      	b.n	80084ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084ac:	e005      	b.n	80084ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80084b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 8130 	beq.w	8008722 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c6:	4a94      	ldr	r2, [pc, #592]	@ (8008718 <UART_SetConfig+0x5c4>)
 80084c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084cc:	461a      	mov	r2, r3
 80084ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80084d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	4613      	mov	r3, r2
 80084dc:	005b      	lsls	r3, r3, #1
 80084de:	4413      	add	r3, r2
 80084e0:	69ba      	ldr	r2, [r7, #24]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d305      	bcc.n	80084f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d903      	bls.n	80084fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80084f8:	e113      	b.n	8008722 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fc:	2200      	movs	r2, #0
 80084fe:	60bb      	str	r3, [r7, #8]
 8008500:	60fa      	str	r2, [r7, #12]
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008506:	4a84      	ldr	r2, [pc, #528]	@ (8008718 <UART_SetConfig+0x5c4>)
 8008508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800850c:	b29b      	uxth	r3, r3
 800850e:	2200      	movs	r2, #0
 8008510:	603b      	str	r3, [r7, #0]
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008518:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800851c:	f7f8 fb6c 	bl	8000bf8 <__aeabi_uldivmod>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4610      	mov	r0, r2
 8008526:	4619      	mov	r1, r3
 8008528:	f04f 0200 	mov.w	r2, #0
 800852c:	f04f 0300 	mov.w	r3, #0
 8008530:	020b      	lsls	r3, r1, #8
 8008532:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008536:	0202      	lsls	r2, r0, #8
 8008538:	6979      	ldr	r1, [r7, #20]
 800853a:	6849      	ldr	r1, [r1, #4]
 800853c:	0849      	lsrs	r1, r1, #1
 800853e:	2000      	movs	r0, #0
 8008540:	460c      	mov	r4, r1
 8008542:	4605      	mov	r5, r0
 8008544:	eb12 0804 	adds.w	r8, r2, r4
 8008548:	eb43 0905 	adc.w	r9, r3, r5
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	469a      	mov	sl, r3
 8008554:	4693      	mov	fp, r2
 8008556:	4652      	mov	r2, sl
 8008558:	465b      	mov	r3, fp
 800855a:	4640      	mov	r0, r8
 800855c:	4649      	mov	r1, r9
 800855e:	f7f8 fb4b 	bl	8000bf8 <__aeabi_uldivmod>
 8008562:	4602      	mov	r2, r0
 8008564:	460b      	mov	r3, r1
 8008566:	4613      	mov	r3, r2
 8008568:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008570:	d308      	bcc.n	8008584 <UART_SetConfig+0x430>
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008578:	d204      	bcs.n	8008584 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	6a3a      	ldr	r2, [r7, #32]
 8008580:	60da      	str	r2, [r3, #12]
 8008582:	e0ce      	b.n	8008722 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800858a:	e0ca      	b.n	8008722 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	69db      	ldr	r3, [r3, #28]
 8008590:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008594:	d166      	bne.n	8008664 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008596:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800859a:	2b08      	cmp	r3, #8
 800859c:	d827      	bhi.n	80085ee <UART_SetConfig+0x49a>
 800859e:	a201      	add	r2, pc, #4	@ (adr r2, 80085a4 <UART_SetConfig+0x450>)
 80085a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a4:	080085c9 	.word	0x080085c9
 80085a8:	080085d1 	.word	0x080085d1
 80085ac:	080085d9 	.word	0x080085d9
 80085b0:	080085ef 	.word	0x080085ef
 80085b4:	080085df 	.word	0x080085df
 80085b8:	080085ef 	.word	0x080085ef
 80085bc:	080085ef 	.word	0x080085ef
 80085c0:	080085ef 	.word	0x080085ef
 80085c4:	080085e7 	.word	0x080085e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085c8:	f7fd f9be 	bl	8005948 <HAL_RCC_GetPCLK1Freq>
 80085cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085ce:	e014      	b.n	80085fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085d0:	f7fd f9d0 	bl	8005974 <HAL_RCC_GetPCLK2Freq>
 80085d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085d6:	e010      	b.n	80085fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085d8:	4b4e      	ldr	r3, [pc, #312]	@ (8008714 <UART_SetConfig+0x5c0>)
 80085da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085dc:	e00d      	b.n	80085fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085de:	f7fd f945 	bl	800586c <HAL_RCC_GetSysClockFreq>
 80085e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085e4:	e009      	b.n	80085fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085ec:	e005      	b.n	80085fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80085f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 8090 	beq.w	8008722 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008606:	4a44      	ldr	r2, [pc, #272]	@ (8008718 <UART_SetConfig+0x5c4>)
 8008608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800860c:	461a      	mov	r2, r3
 800860e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008610:	fbb3 f3f2 	udiv	r3, r3, r2
 8008614:	005a      	lsls	r2, r3, #1
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	085b      	lsrs	r3, r3, #1
 800861c:	441a      	add	r2, r3
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	fbb2 f3f3 	udiv	r3, r2, r3
 8008626:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	2b0f      	cmp	r3, #15
 800862c:	d916      	bls.n	800865c <UART_SetConfig+0x508>
 800862e:	6a3b      	ldr	r3, [r7, #32]
 8008630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008634:	d212      	bcs.n	800865c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008636:	6a3b      	ldr	r3, [r7, #32]
 8008638:	b29b      	uxth	r3, r3
 800863a:	f023 030f 	bic.w	r3, r3, #15
 800863e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	085b      	lsrs	r3, r3, #1
 8008644:	b29b      	uxth	r3, r3
 8008646:	f003 0307 	and.w	r3, r3, #7
 800864a:	b29a      	uxth	r2, r3
 800864c:	8bfb      	ldrh	r3, [r7, #30]
 800864e:	4313      	orrs	r3, r2
 8008650:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	8bfa      	ldrh	r2, [r7, #30]
 8008658:	60da      	str	r2, [r3, #12]
 800865a:	e062      	b.n	8008722 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008662:	e05e      	b.n	8008722 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008664:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008668:	2b08      	cmp	r3, #8
 800866a:	d828      	bhi.n	80086be <UART_SetConfig+0x56a>
 800866c:	a201      	add	r2, pc, #4	@ (adr r2, 8008674 <UART_SetConfig+0x520>)
 800866e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008672:	bf00      	nop
 8008674:	08008699 	.word	0x08008699
 8008678:	080086a1 	.word	0x080086a1
 800867c:	080086a9 	.word	0x080086a9
 8008680:	080086bf 	.word	0x080086bf
 8008684:	080086af 	.word	0x080086af
 8008688:	080086bf 	.word	0x080086bf
 800868c:	080086bf 	.word	0x080086bf
 8008690:	080086bf 	.word	0x080086bf
 8008694:	080086b7 	.word	0x080086b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008698:	f7fd f956 	bl	8005948 <HAL_RCC_GetPCLK1Freq>
 800869c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800869e:	e014      	b.n	80086ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086a0:	f7fd f968 	bl	8005974 <HAL_RCC_GetPCLK2Freq>
 80086a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086a6:	e010      	b.n	80086ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008714 <UART_SetConfig+0x5c0>)
 80086aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086ac:	e00d      	b.n	80086ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086ae:	f7fd f8dd 	bl	800586c <HAL_RCC_GetSysClockFreq>
 80086b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086b4:	e009      	b.n	80086ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086bc:	e005      	b.n	80086ca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80086be:	2300      	movs	r3, #0
 80086c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80086c8:	bf00      	nop
    }

    if (pclk != 0U)
 80086ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d028      	beq.n	8008722 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d4:	4a10      	ldr	r2, [pc, #64]	@ (8008718 <UART_SetConfig+0x5c4>)
 80086d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086da:	461a      	mov	r2, r3
 80086dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086de:	fbb3 f2f2 	udiv	r2, r3, r2
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	085b      	lsrs	r3, r3, #1
 80086e8:	441a      	add	r2, r3
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	2b0f      	cmp	r3, #15
 80086f8:	d910      	bls.n	800871c <UART_SetConfig+0x5c8>
 80086fa:	6a3b      	ldr	r3, [r7, #32]
 80086fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008700:	d20c      	bcs.n	800871c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	b29a      	uxth	r2, r3
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	60da      	str	r2, [r3, #12]
 800870c:	e009      	b.n	8008722 <UART_SetConfig+0x5ce>
 800870e:	bf00      	nop
 8008710:	40008000 	.word	0x40008000
 8008714:	00f42400 	.word	0x00f42400
 8008718:	0800c71c 	.word	0x0800c71c
      }
      else
      {
        ret = HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2201      	movs	r2, #1
 8008726:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	2201      	movs	r2, #1
 800872e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	2200      	movs	r2, #0
 8008736:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	2200      	movs	r2, #0
 800873c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800873e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008742:	4618      	mov	r0, r3
 8008744:	3730      	adds	r7, #48	@ 0x30
 8008746:	46bd      	mov	sp, r7
 8008748:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800874c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008758:	f003 0308 	and.w	r3, r3, #8
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00a      	beq.n	8008776 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	430a      	orrs	r2, r1
 8008774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00a      	beq.n	8008798 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	430a      	orrs	r2, r1
 8008796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800879c:	f003 0302 	and.w	r3, r3, #2
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00a      	beq.n	80087ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	430a      	orrs	r2, r1
 80087b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087be:	f003 0304 	and.w	r3, r3, #4
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00a      	beq.n	80087dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	430a      	orrs	r2, r1
 80087da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e0:	f003 0310 	and.w	r3, r3, #16
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00a      	beq.n	80087fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	430a      	orrs	r2, r1
 80087fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008802:	f003 0320 	and.w	r3, r3, #32
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00a      	beq.n	8008820 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	430a      	orrs	r2, r1
 800881e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008828:	2b00      	cmp	r3, #0
 800882a:	d01a      	beq.n	8008862 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	430a      	orrs	r2, r1
 8008840:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008846:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800884a:	d10a      	bne.n	8008862 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	430a      	orrs	r2, r1
 8008860:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00a      	beq.n	8008884 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	430a      	orrs	r2, r1
 8008882:	605a      	str	r2, [r3, #4]
  }
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b098      	sub	sp, #96	@ 0x60
 8008894:	af02      	add	r7, sp, #8
 8008896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088a0:	f7f9 ff5e 	bl	8002760 <HAL_GetTick>
 80088a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0308 	and.w	r3, r3, #8
 80088b0:	2b08      	cmp	r3, #8
 80088b2:	d12f      	bne.n	8008914 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088bc:	2200      	movs	r2, #0
 80088be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f88e 	bl	80089e4 <UART_WaitOnFlagUntilTimeout>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d022      	beq.n	8008914 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d6:	e853 3f00 	ldrex	r3, [r3]
 80088da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	461a      	mov	r2, r3
 80088ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80088ee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088f4:	e841 2300 	strex	r3, r2, [r1]
 80088f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1e6      	bne.n	80088ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2220      	movs	r2, #32
 8008904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e063      	b.n	80089dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 0304 	and.w	r3, r3, #4
 800891e:	2b04      	cmp	r3, #4
 8008920:	d149      	bne.n	80089b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008922:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800892a:	2200      	movs	r2, #0
 800892c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f857 	bl	80089e4 <UART_WaitOnFlagUntilTimeout>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d03c      	beq.n	80089b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008944:	e853 3f00 	ldrex	r3, [r3]
 8008948:	623b      	str	r3, [r7, #32]
   return(result);
 800894a:	6a3b      	ldr	r3, [r7, #32]
 800894c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008950:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800895a:	633b      	str	r3, [r7, #48]	@ 0x30
 800895c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008962:	e841 2300 	strex	r3, r2, [r1]
 8008966:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1e6      	bne.n	800893c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	3308      	adds	r3, #8
 8008974:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	e853 3f00 	ldrex	r3, [r3]
 800897c:	60fb      	str	r3, [r7, #12]
   return(result);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f023 0301 	bic.w	r3, r3, #1
 8008984:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	3308      	adds	r3, #8
 800898c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800898e:	61fa      	str	r2, [r7, #28]
 8008990:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008992:	69b9      	ldr	r1, [r7, #24]
 8008994:	69fa      	ldr	r2, [r7, #28]
 8008996:	e841 2300 	strex	r3, r2, [r1]
 800899a:	617b      	str	r3, [r7, #20]
   return(result);
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1e5      	bne.n	800896e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2220      	movs	r2, #32
 80089a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e012      	b.n	80089dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2220      	movs	r2, #32
 80089ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2220      	movs	r2, #32
 80089c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3758      	adds	r7, #88	@ 0x58
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	603b      	str	r3, [r7, #0]
 80089f0:	4613      	mov	r3, r2
 80089f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089f4:	e04f      	b.n	8008a96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fc:	d04b      	beq.n	8008a96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089fe:	f7f9 feaf 	bl	8002760 <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d302      	bcc.n	8008a14 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e04e      	b.n	8008ab6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0304 	and.w	r3, r3, #4
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d037      	beq.n	8008a96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2b80      	cmp	r3, #128	@ 0x80
 8008a2a:	d034      	beq.n	8008a96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	2b40      	cmp	r3, #64	@ 0x40
 8008a30:	d031      	beq.n	8008a96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	69db      	ldr	r3, [r3, #28]
 8008a38:	f003 0308 	and.w	r3, r3, #8
 8008a3c:	2b08      	cmp	r3, #8
 8008a3e:	d110      	bne.n	8008a62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2208      	movs	r2, #8
 8008a46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f000 f838 	bl	8008abe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2208      	movs	r2, #8
 8008a52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e029      	b.n	8008ab6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	69db      	ldr	r3, [r3, #28]
 8008a68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a70:	d111      	bne.n	8008a96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f000 f81e 	bl	8008abe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2220      	movs	r2, #32
 8008a86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e00f      	b.n	8008ab6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	69da      	ldr	r2, [r3, #28]
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	bf0c      	ite	eq
 8008aa6:	2301      	moveq	r3, #1
 8008aa8:	2300      	movne	r3, #0
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	461a      	mov	r2, r3
 8008aae:	79fb      	ldrb	r3, [r7, #7]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d0a0      	beq.n	80089f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b095      	sub	sp, #84	@ 0x54
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ace:	e853 3f00 	ldrex	r3, [r3]
 8008ad2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ae4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ae6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008aea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008aec:	e841 2300 	strex	r3, r2, [r1]
 8008af0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1e6      	bne.n	8008ac6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3308      	adds	r3, #8
 8008afe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b00:	6a3b      	ldr	r3, [r7, #32]
 8008b02:	e853 3f00 	ldrex	r3, [r3]
 8008b06:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b0e:	f023 0301 	bic.w	r3, r3, #1
 8008b12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3308      	adds	r3, #8
 8008b1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b24:	e841 2300 	strex	r3, r2, [r1]
 8008b28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1e3      	bne.n	8008af8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d118      	bne.n	8008b6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	e853 3f00 	ldrex	r3, [r3]
 8008b44:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	f023 0310 	bic.w	r3, r3, #16
 8008b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	461a      	mov	r2, r3
 8008b54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b56:	61bb      	str	r3, [r7, #24]
 8008b58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5a:	6979      	ldr	r1, [r7, #20]
 8008b5c:	69ba      	ldr	r2, [r7, #24]
 8008b5e:	e841 2300 	strex	r3, r2, [r1]
 8008b62:	613b      	str	r3, [r7, #16]
   return(result);
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1e6      	bne.n	8008b38 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2220      	movs	r2, #32
 8008b6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008b7e:	bf00      	nop
 8008b80:	3754      	adds	r7, #84	@ 0x54
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b085      	sub	sp, #20
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d101      	bne.n	8008ba0 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	e027      	b.n	8008bf0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2224      	movs	r2, #36	@ 0x24
 8008bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f022 0201 	bic.w	r2, r2, #1
 8008bc6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008bce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2220      	movs	r2, #32
 8008be2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3714      	adds	r7, #20
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d101      	bne.n	8008c14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c10:	2302      	movs	r3, #2
 8008c12:	e02d      	b.n	8008c70 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2224      	movs	r2, #36	@ 0x24
 8008c20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f022 0201 	bic.w	r2, r2, #1
 8008c3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f84f 	bl	8008cf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2220      	movs	r2, #32
 8008c62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d101      	bne.n	8008c90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	e02d      	b.n	8008cec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2224      	movs	r2, #36	@ 0x24
 8008c9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f022 0201 	bic.w	r2, r2, #1
 8008cb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f811 	bl	8008cf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2220      	movs	r2, #32
 8008cde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d108      	bne.n	8008d16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d14:	e031      	b.n	8008d7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d16:	2308      	movs	r3, #8
 8008d18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d1a:	2308      	movs	r3, #8
 8008d1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	0e5b      	lsrs	r3, r3, #25
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	f003 0307 	and.w	r3, r3, #7
 8008d2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	0f5b      	lsrs	r3, r3, #29
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	f003 0307 	and.w	r3, r3, #7
 8008d3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d3e:	7bbb      	ldrb	r3, [r7, #14]
 8008d40:	7b3a      	ldrb	r2, [r7, #12]
 8008d42:	4911      	ldr	r1, [pc, #68]	@ (8008d88 <UARTEx_SetNbDataToProcess+0x94>)
 8008d44:	5c8a      	ldrb	r2, [r1, r2]
 8008d46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d4a:	7b3a      	ldrb	r2, [r7, #12]
 8008d4c:	490f      	ldr	r1, [pc, #60]	@ (8008d8c <UARTEx_SetNbDataToProcess+0x98>)
 8008d4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d50:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
 8008d5e:	7b7a      	ldrb	r2, [r7, #13]
 8008d60:	4909      	ldr	r1, [pc, #36]	@ (8008d88 <UARTEx_SetNbDataToProcess+0x94>)
 8008d62:	5c8a      	ldrb	r2, [r1, r2]
 8008d64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d68:	7b7a      	ldrb	r2, [r7, #13]
 8008d6a:	4908      	ldr	r1, [pc, #32]	@ (8008d8c <UARTEx_SetNbDataToProcess+0x98>)
 8008d6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008d7a:	bf00      	nop
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	0800c734 	.word	0x0800c734
 8008d8c:	0800c73c 	.word	0x0800c73c

08008d90 <malloc>:
 8008d90:	4b02      	ldr	r3, [pc, #8]	@ (8008d9c <malloc+0xc>)
 8008d92:	4601      	mov	r1, r0
 8008d94:	6818      	ldr	r0, [r3, #0]
 8008d96:	f000 b82d 	b.w	8008df4 <_malloc_r>
 8008d9a:	bf00      	nop
 8008d9c:	20000018 	.word	0x20000018

08008da0 <free>:
 8008da0:	4b02      	ldr	r3, [pc, #8]	@ (8008dac <free+0xc>)
 8008da2:	4601      	mov	r1, r0
 8008da4:	6818      	ldr	r0, [r3, #0]
 8008da6:	f001 be0f 	b.w	800a9c8 <_free_r>
 8008daa:	bf00      	nop
 8008dac:	20000018 	.word	0x20000018

08008db0 <sbrk_aligned>:
 8008db0:	b570      	push	{r4, r5, r6, lr}
 8008db2:	4e0f      	ldr	r6, [pc, #60]	@ (8008df0 <sbrk_aligned+0x40>)
 8008db4:	460c      	mov	r4, r1
 8008db6:	6831      	ldr	r1, [r6, #0]
 8008db8:	4605      	mov	r5, r0
 8008dba:	b911      	cbnz	r1, 8008dc2 <sbrk_aligned+0x12>
 8008dbc:	f000 ff68 	bl	8009c90 <_sbrk_r>
 8008dc0:	6030      	str	r0, [r6, #0]
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	f000 ff63 	bl	8009c90 <_sbrk_r>
 8008dca:	1c43      	adds	r3, r0, #1
 8008dcc:	d103      	bne.n	8008dd6 <sbrk_aligned+0x26>
 8008dce:	f04f 34ff 	mov.w	r4, #4294967295
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	bd70      	pop	{r4, r5, r6, pc}
 8008dd6:	1cc4      	adds	r4, r0, #3
 8008dd8:	f024 0403 	bic.w	r4, r4, #3
 8008ddc:	42a0      	cmp	r0, r4
 8008dde:	d0f8      	beq.n	8008dd2 <sbrk_aligned+0x22>
 8008de0:	1a21      	subs	r1, r4, r0
 8008de2:	4628      	mov	r0, r5
 8008de4:	f000 ff54 	bl	8009c90 <_sbrk_r>
 8008de8:	3001      	adds	r0, #1
 8008dea:	d1f2      	bne.n	8008dd2 <sbrk_aligned+0x22>
 8008dec:	e7ef      	b.n	8008dce <sbrk_aligned+0x1e>
 8008dee:	bf00      	nop
 8008df0:	20000660 	.word	0x20000660

08008df4 <_malloc_r>:
 8008df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008df8:	1ccd      	adds	r5, r1, #3
 8008dfa:	f025 0503 	bic.w	r5, r5, #3
 8008dfe:	3508      	adds	r5, #8
 8008e00:	2d0c      	cmp	r5, #12
 8008e02:	bf38      	it	cc
 8008e04:	250c      	movcc	r5, #12
 8008e06:	2d00      	cmp	r5, #0
 8008e08:	4606      	mov	r6, r0
 8008e0a:	db01      	blt.n	8008e10 <_malloc_r+0x1c>
 8008e0c:	42a9      	cmp	r1, r5
 8008e0e:	d904      	bls.n	8008e1a <_malloc_r+0x26>
 8008e10:	230c      	movs	r3, #12
 8008e12:	6033      	str	r3, [r6, #0]
 8008e14:	2000      	movs	r0, #0
 8008e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ef0 <_malloc_r+0xfc>
 8008e1e:	f000 f869 	bl	8008ef4 <__malloc_lock>
 8008e22:	f8d8 3000 	ldr.w	r3, [r8]
 8008e26:	461c      	mov	r4, r3
 8008e28:	bb44      	cbnz	r4, 8008e7c <_malloc_r+0x88>
 8008e2a:	4629      	mov	r1, r5
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	f7ff ffbf 	bl	8008db0 <sbrk_aligned>
 8008e32:	1c43      	adds	r3, r0, #1
 8008e34:	4604      	mov	r4, r0
 8008e36:	d158      	bne.n	8008eea <_malloc_r+0xf6>
 8008e38:	f8d8 4000 	ldr.w	r4, [r8]
 8008e3c:	4627      	mov	r7, r4
 8008e3e:	2f00      	cmp	r7, #0
 8008e40:	d143      	bne.n	8008eca <_malloc_r+0xd6>
 8008e42:	2c00      	cmp	r4, #0
 8008e44:	d04b      	beq.n	8008ede <_malloc_r+0xea>
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	4639      	mov	r1, r7
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	eb04 0903 	add.w	r9, r4, r3
 8008e50:	f000 ff1e 	bl	8009c90 <_sbrk_r>
 8008e54:	4581      	cmp	r9, r0
 8008e56:	d142      	bne.n	8008ede <_malloc_r+0xea>
 8008e58:	6821      	ldr	r1, [r4, #0]
 8008e5a:	1a6d      	subs	r5, r5, r1
 8008e5c:	4629      	mov	r1, r5
 8008e5e:	4630      	mov	r0, r6
 8008e60:	f7ff ffa6 	bl	8008db0 <sbrk_aligned>
 8008e64:	3001      	adds	r0, #1
 8008e66:	d03a      	beq.n	8008ede <_malloc_r+0xea>
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	442b      	add	r3, r5
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8008e72:	685a      	ldr	r2, [r3, #4]
 8008e74:	bb62      	cbnz	r2, 8008ed0 <_malloc_r+0xdc>
 8008e76:	f8c8 7000 	str.w	r7, [r8]
 8008e7a:	e00f      	b.n	8008e9c <_malloc_r+0xa8>
 8008e7c:	6822      	ldr	r2, [r4, #0]
 8008e7e:	1b52      	subs	r2, r2, r5
 8008e80:	d420      	bmi.n	8008ec4 <_malloc_r+0xd0>
 8008e82:	2a0b      	cmp	r2, #11
 8008e84:	d917      	bls.n	8008eb6 <_malloc_r+0xc2>
 8008e86:	1961      	adds	r1, r4, r5
 8008e88:	42a3      	cmp	r3, r4
 8008e8a:	6025      	str	r5, [r4, #0]
 8008e8c:	bf18      	it	ne
 8008e8e:	6059      	strne	r1, [r3, #4]
 8008e90:	6863      	ldr	r3, [r4, #4]
 8008e92:	bf08      	it	eq
 8008e94:	f8c8 1000 	streq.w	r1, [r8]
 8008e98:	5162      	str	r2, [r4, r5]
 8008e9a:	604b      	str	r3, [r1, #4]
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f000 f82f 	bl	8008f00 <__malloc_unlock>
 8008ea2:	f104 000b 	add.w	r0, r4, #11
 8008ea6:	1d23      	adds	r3, r4, #4
 8008ea8:	f020 0007 	bic.w	r0, r0, #7
 8008eac:	1ac2      	subs	r2, r0, r3
 8008eae:	bf1c      	itt	ne
 8008eb0:	1a1b      	subne	r3, r3, r0
 8008eb2:	50a3      	strne	r3, [r4, r2]
 8008eb4:	e7af      	b.n	8008e16 <_malloc_r+0x22>
 8008eb6:	6862      	ldr	r2, [r4, #4]
 8008eb8:	42a3      	cmp	r3, r4
 8008eba:	bf0c      	ite	eq
 8008ebc:	f8c8 2000 	streq.w	r2, [r8]
 8008ec0:	605a      	strne	r2, [r3, #4]
 8008ec2:	e7eb      	b.n	8008e9c <_malloc_r+0xa8>
 8008ec4:	4623      	mov	r3, r4
 8008ec6:	6864      	ldr	r4, [r4, #4]
 8008ec8:	e7ae      	b.n	8008e28 <_malloc_r+0x34>
 8008eca:	463c      	mov	r4, r7
 8008ecc:	687f      	ldr	r7, [r7, #4]
 8008ece:	e7b6      	b.n	8008e3e <_malloc_r+0x4a>
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	42a3      	cmp	r3, r4
 8008ed6:	d1fb      	bne.n	8008ed0 <_malloc_r+0xdc>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	6053      	str	r3, [r2, #4]
 8008edc:	e7de      	b.n	8008e9c <_malloc_r+0xa8>
 8008ede:	230c      	movs	r3, #12
 8008ee0:	6033      	str	r3, [r6, #0]
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	f000 f80c 	bl	8008f00 <__malloc_unlock>
 8008ee8:	e794      	b.n	8008e14 <_malloc_r+0x20>
 8008eea:	6005      	str	r5, [r0, #0]
 8008eec:	e7d6      	b.n	8008e9c <_malloc_r+0xa8>
 8008eee:	bf00      	nop
 8008ef0:	20000664 	.word	0x20000664

08008ef4 <__malloc_lock>:
 8008ef4:	4801      	ldr	r0, [pc, #4]	@ (8008efc <__malloc_lock+0x8>)
 8008ef6:	f000 bf18 	b.w	8009d2a <__retarget_lock_acquire_recursive>
 8008efa:	bf00      	nop
 8008efc:	200007a8 	.word	0x200007a8

08008f00 <__malloc_unlock>:
 8008f00:	4801      	ldr	r0, [pc, #4]	@ (8008f08 <__malloc_unlock+0x8>)
 8008f02:	f000 bf13 	b.w	8009d2c <__retarget_lock_release_recursive>
 8008f06:	bf00      	nop
 8008f08:	200007a8 	.word	0x200007a8

08008f0c <__cvt>:
 8008f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f10:	ec57 6b10 	vmov	r6, r7, d0
 8008f14:	2f00      	cmp	r7, #0
 8008f16:	460c      	mov	r4, r1
 8008f18:	4619      	mov	r1, r3
 8008f1a:	463b      	mov	r3, r7
 8008f1c:	bfbb      	ittet	lt
 8008f1e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008f22:	461f      	movlt	r7, r3
 8008f24:	2300      	movge	r3, #0
 8008f26:	232d      	movlt	r3, #45	@ 0x2d
 8008f28:	700b      	strb	r3, [r1, #0]
 8008f2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f2c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008f30:	4691      	mov	r9, r2
 8008f32:	f023 0820 	bic.w	r8, r3, #32
 8008f36:	bfbc      	itt	lt
 8008f38:	4632      	movlt	r2, r6
 8008f3a:	4616      	movlt	r6, r2
 8008f3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f40:	d005      	beq.n	8008f4e <__cvt+0x42>
 8008f42:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008f46:	d100      	bne.n	8008f4a <__cvt+0x3e>
 8008f48:	3401      	adds	r4, #1
 8008f4a:	2102      	movs	r1, #2
 8008f4c:	e000      	b.n	8008f50 <__cvt+0x44>
 8008f4e:	2103      	movs	r1, #3
 8008f50:	ab03      	add	r3, sp, #12
 8008f52:	9301      	str	r3, [sp, #4]
 8008f54:	ab02      	add	r3, sp, #8
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	ec47 6b10 	vmov	d0, r6, r7
 8008f5c:	4653      	mov	r3, sl
 8008f5e:	4622      	mov	r2, r4
 8008f60:	f000 ff6e 	bl	8009e40 <_dtoa_r>
 8008f64:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008f68:	4605      	mov	r5, r0
 8008f6a:	d119      	bne.n	8008fa0 <__cvt+0x94>
 8008f6c:	f019 0f01 	tst.w	r9, #1
 8008f70:	d00e      	beq.n	8008f90 <__cvt+0x84>
 8008f72:	eb00 0904 	add.w	r9, r0, r4
 8008f76:	2200      	movs	r2, #0
 8008f78:	2300      	movs	r3, #0
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	4639      	mov	r1, r7
 8008f7e:	f7f7 fdcb 	bl	8000b18 <__aeabi_dcmpeq>
 8008f82:	b108      	cbz	r0, 8008f88 <__cvt+0x7c>
 8008f84:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f88:	2230      	movs	r2, #48	@ 0x30
 8008f8a:	9b03      	ldr	r3, [sp, #12]
 8008f8c:	454b      	cmp	r3, r9
 8008f8e:	d31e      	bcc.n	8008fce <__cvt+0xc2>
 8008f90:	9b03      	ldr	r3, [sp, #12]
 8008f92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f94:	1b5b      	subs	r3, r3, r5
 8008f96:	4628      	mov	r0, r5
 8008f98:	6013      	str	r3, [r2, #0]
 8008f9a:	b004      	add	sp, #16
 8008f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008fa4:	eb00 0904 	add.w	r9, r0, r4
 8008fa8:	d1e5      	bne.n	8008f76 <__cvt+0x6a>
 8008faa:	7803      	ldrb	r3, [r0, #0]
 8008fac:	2b30      	cmp	r3, #48	@ 0x30
 8008fae:	d10a      	bne.n	8008fc6 <__cvt+0xba>
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	4639      	mov	r1, r7
 8008fb8:	f7f7 fdae 	bl	8000b18 <__aeabi_dcmpeq>
 8008fbc:	b918      	cbnz	r0, 8008fc6 <__cvt+0xba>
 8008fbe:	f1c4 0401 	rsb	r4, r4, #1
 8008fc2:	f8ca 4000 	str.w	r4, [sl]
 8008fc6:	f8da 3000 	ldr.w	r3, [sl]
 8008fca:	4499      	add	r9, r3
 8008fcc:	e7d3      	b.n	8008f76 <__cvt+0x6a>
 8008fce:	1c59      	adds	r1, r3, #1
 8008fd0:	9103      	str	r1, [sp, #12]
 8008fd2:	701a      	strb	r2, [r3, #0]
 8008fd4:	e7d9      	b.n	8008f8a <__cvt+0x7e>

08008fd6 <__exponent>:
 8008fd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fd8:	2900      	cmp	r1, #0
 8008fda:	bfba      	itte	lt
 8008fdc:	4249      	neglt	r1, r1
 8008fde:	232d      	movlt	r3, #45	@ 0x2d
 8008fe0:	232b      	movge	r3, #43	@ 0x2b
 8008fe2:	2909      	cmp	r1, #9
 8008fe4:	7002      	strb	r2, [r0, #0]
 8008fe6:	7043      	strb	r3, [r0, #1]
 8008fe8:	dd29      	ble.n	800903e <__exponent+0x68>
 8008fea:	f10d 0307 	add.w	r3, sp, #7
 8008fee:	461d      	mov	r5, r3
 8008ff0:	270a      	movs	r7, #10
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	fbb1 f6f7 	udiv	r6, r1, r7
 8008ff8:	fb07 1416 	mls	r4, r7, r6, r1
 8008ffc:	3430      	adds	r4, #48	@ 0x30
 8008ffe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009002:	460c      	mov	r4, r1
 8009004:	2c63      	cmp	r4, #99	@ 0x63
 8009006:	f103 33ff 	add.w	r3, r3, #4294967295
 800900a:	4631      	mov	r1, r6
 800900c:	dcf1      	bgt.n	8008ff2 <__exponent+0x1c>
 800900e:	3130      	adds	r1, #48	@ 0x30
 8009010:	1e94      	subs	r4, r2, #2
 8009012:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009016:	1c41      	adds	r1, r0, #1
 8009018:	4623      	mov	r3, r4
 800901a:	42ab      	cmp	r3, r5
 800901c:	d30a      	bcc.n	8009034 <__exponent+0x5e>
 800901e:	f10d 0309 	add.w	r3, sp, #9
 8009022:	1a9b      	subs	r3, r3, r2
 8009024:	42ac      	cmp	r4, r5
 8009026:	bf88      	it	hi
 8009028:	2300      	movhi	r3, #0
 800902a:	3302      	adds	r3, #2
 800902c:	4403      	add	r3, r0
 800902e:	1a18      	subs	r0, r3, r0
 8009030:	b003      	add	sp, #12
 8009032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009034:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009038:	f801 6f01 	strb.w	r6, [r1, #1]!
 800903c:	e7ed      	b.n	800901a <__exponent+0x44>
 800903e:	2330      	movs	r3, #48	@ 0x30
 8009040:	3130      	adds	r1, #48	@ 0x30
 8009042:	7083      	strb	r3, [r0, #2]
 8009044:	70c1      	strb	r1, [r0, #3]
 8009046:	1d03      	adds	r3, r0, #4
 8009048:	e7f1      	b.n	800902e <__exponent+0x58>
	...

0800904c <_printf_float>:
 800904c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009050:	b08d      	sub	sp, #52	@ 0x34
 8009052:	460c      	mov	r4, r1
 8009054:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009058:	4616      	mov	r6, r2
 800905a:	461f      	mov	r7, r3
 800905c:	4605      	mov	r5, r0
 800905e:	f000 fddf 	bl	8009c20 <_localeconv_r>
 8009062:	6803      	ldr	r3, [r0, #0]
 8009064:	9304      	str	r3, [sp, #16]
 8009066:	4618      	mov	r0, r3
 8009068:	f7f7 f92a 	bl	80002c0 <strlen>
 800906c:	2300      	movs	r3, #0
 800906e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009070:	f8d8 3000 	ldr.w	r3, [r8]
 8009074:	9005      	str	r0, [sp, #20]
 8009076:	3307      	adds	r3, #7
 8009078:	f023 0307 	bic.w	r3, r3, #7
 800907c:	f103 0208 	add.w	r2, r3, #8
 8009080:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009084:	f8d4 b000 	ldr.w	fp, [r4]
 8009088:	f8c8 2000 	str.w	r2, [r8]
 800908c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009090:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009094:	9307      	str	r3, [sp, #28]
 8009096:	f8cd 8018 	str.w	r8, [sp, #24]
 800909a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800909e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090a2:	4b9c      	ldr	r3, [pc, #624]	@ (8009314 <_printf_float+0x2c8>)
 80090a4:	f04f 32ff 	mov.w	r2, #4294967295
 80090a8:	f7f7 fd68 	bl	8000b7c <__aeabi_dcmpun>
 80090ac:	bb70      	cbnz	r0, 800910c <_printf_float+0xc0>
 80090ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090b2:	4b98      	ldr	r3, [pc, #608]	@ (8009314 <_printf_float+0x2c8>)
 80090b4:	f04f 32ff 	mov.w	r2, #4294967295
 80090b8:	f7f7 fd42 	bl	8000b40 <__aeabi_dcmple>
 80090bc:	bb30      	cbnz	r0, 800910c <_printf_float+0xc0>
 80090be:	2200      	movs	r2, #0
 80090c0:	2300      	movs	r3, #0
 80090c2:	4640      	mov	r0, r8
 80090c4:	4649      	mov	r1, r9
 80090c6:	f7f7 fd31 	bl	8000b2c <__aeabi_dcmplt>
 80090ca:	b110      	cbz	r0, 80090d2 <_printf_float+0x86>
 80090cc:	232d      	movs	r3, #45	@ 0x2d
 80090ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090d2:	4a91      	ldr	r2, [pc, #580]	@ (8009318 <_printf_float+0x2cc>)
 80090d4:	4b91      	ldr	r3, [pc, #580]	@ (800931c <_printf_float+0x2d0>)
 80090d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80090da:	bf94      	ite	ls
 80090dc:	4690      	movls	r8, r2
 80090de:	4698      	movhi	r8, r3
 80090e0:	2303      	movs	r3, #3
 80090e2:	6123      	str	r3, [r4, #16]
 80090e4:	f02b 0304 	bic.w	r3, fp, #4
 80090e8:	6023      	str	r3, [r4, #0]
 80090ea:	f04f 0900 	mov.w	r9, #0
 80090ee:	9700      	str	r7, [sp, #0]
 80090f0:	4633      	mov	r3, r6
 80090f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80090f4:	4621      	mov	r1, r4
 80090f6:	4628      	mov	r0, r5
 80090f8:	f000 f9d2 	bl	80094a0 <_printf_common>
 80090fc:	3001      	adds	r0, #1
 80090fe:	f040 808d 	bne.w	800921c <_printf_float+0x1d0>
 8009102:	f04f 30ff 	mov.w	r0, #4294967295
 8009106:	b00d      	add	sp, #52	@ 0x34
 8009108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800910c:	4642      	mov	r2, r8
 800910e:	464b      	mov	r3, r9
 8009110:	4640      	mov	r0, r8
 8009112:	4649      	mov	r1, r9
 8009114:	f7f7 fd32 	bl	8000b7c <__aeabi_dcmpun>
 8009118:	b140      	cbz	r0, 800912c <_printf_float+0xe0>
 800911a:	464b      	mov	r3, r9
 800911c:	2b00      	cmp	r3, #0
 800911e:	bfbc      	itt	lt
 8009120:	232d      	movlt	r3, #45	@ 0x2d
 8009122:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009126:	4a7e      	ldr	r2, [pc, #504]	@ (8009320 <_printf_float+0x2d4>)
 8009128:	4b7e      	ldr	r3, [pc, #504]	@ (8009324 <_printf_float+0x2d8>)
 800912a:	e7d4      	b.n	80090d6 <_printf_float+0x8a>
 800912c:	6863      	ldr	r3, [r4, #4]
 800912e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009132:	9206      	str	r2, [sp, #24]
 8009134:	1c5a      	adds	r2, r3, #1
 8009136:	d13b      	bne.n	80091b0 <_printf_float+0x164>
 8009138:	2306      	movs	r3, #6
 800913a:	6063      	str	r3, [r4, #4]
 800913c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009140:	2300      	movs	r3, #0
 8009142:	6022      	str	r2, [r4, #0]
 8009144:	9303      	str	r3, [sp, #12]
 8009146:	ab0a      	add	r3, sp, #40	@ 0x28
 8009148:	e9cd a301 	strd	sl, r3, [sp, #4]
 800914c:	ab09      	add	r3, sp, #36	@ 0x24
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	6861      	ldr	r1, [r4, #4]
 8009152:	ec49 8b10 	vmov	d0, r8, r9
 8009156:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800915a:	4628      	mov	r0, r5
 800915c:	f7ff fed6 	bl	8008f0c <__cvt>
 8009160:	9b06      	ldr	r3, [sp, #24]
 8009162:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009164:	2b47      	cmp	r3, #71	@ 0x47
 8009166:	4680      	mov	r8, r0
 8009168:	d129      	bne.n	80091be <_printf_float+0x172>
 800916a:	1cc8      	adds	r0, r1, #3
 800916c:	db02      	blt.n	8009174 <_printf_float+0x128>
 800916e:	6863      	ldr	r3, [r4, #4]
 8009170:	4299      	cmp	r1, r3
 8009172:	dd41      	ble.n	80091f8 <_printf_float+0x1ac>
 8009174:	f1aa 0a02 	sub.w	sl, sl, #2
 8009178:	fa5f fa8a 	uxtb.w	sl, sl
 800917c:	3901      	subs	r1, #1
 800917e:	4652      	mov	r2, sl
 8009180:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009184:	9109      	str	r1, [sp, #36]	@ 0x24
 8009186:	f7ff ff26 	bl	8008fd6 <__exponent>
 800918a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800918c:	1813      	adds	r3, r2, r0
 800918e:	2a01      	cmp	r2, #1
 8009190:	4681      	mov	r9, r0
 8009192:	6123      	str	r3, [r4, #16]
 8009194:	dc02      	bgt.n	800919c <_printf_float+0x150>
 8009196:	6822      	ldr	r2, [r4, #0]
 8009198:	07d2      	lsls	r2, r2, #31
 800919a:	d501      	bpl.n	80091a0 <_printf_float+0x154>
 800919c:	3301      	adds	r3, #1
 800919e:	6123      	str	r3, [r4, #16]
 80091a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d0a2      	beq.n	80090ee <_printf_float+0xa2>
 80091a8:	232d      	movs	r3, #45	@ 0x2d
 80091aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091ae:	e79e      	b.n	80090ee <_printf_float+0xa2>
 80091b0:	9a06      	ldr	r2, [sp, #24]
 80091b2:	2a47      	cmp	r2, #71	@ 0x47
 80091b4:	d1c2      	bne.n	800913c <_printf_float+0xf0>
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1c0      	bne.n	800913c <_printf_float+0xf0>
 80091ba:	2301      	movs	r3, #1
 80091bc:	e7bd      	b.n	800913a <_printf_float+0xee>
 80091be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80091c2:	d9db      	bls.n	800917c <_printf_float+0x130>
 80091c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80091c8:	d118      	bne.n	80091fc <_printf_float+0x1b0>
 80091ca:	2900      	cmp	r1, #0
 80091cc:	6863      	ldr	r3, [r4, #4]
 80091ce:	dd0b      	ble.n	80091e8 <_printf_float+0x19c>
 80091d0:	6121      	str	r1, [r4, #16]
 80091d2:	b913      	cbnz	r3, 80091da <_printf_float+0x18e>
 80091d4:	6822      	ldr	r2, [r4, #0]
 80091d6:	07d0      	lsls	r0, r2, #31
 80091d8:	d502      	bpl.n	80091e0 <_printf_float+0x194>
 80091da:	3301      	adds	r3, #1
 80091dc:	440b      	add	r3, r1
 80091de:	6123      	str	r3, [r4, #16]
 80091e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80091e2:	f04f 0900 	mov.w	r9, #0
 80091e6:	e7db      	b.n	80091a0 <_printf_float+0x154>
 80091e8:	b913      	cbnz	r3, 80091f0 <_printf_float+0x1a4>
 80091ea:	6822      	ldr	r2, [r4, #0]
 80091ec:	07d2      	lsls	r2, r2, #31
 80091ee:	d501      	bpl.n	80091f4 <_printf_float+0x1a8>
 80091f0:	3302      	adds	r3, #2
 80091f2:	e7f4      	b.n	80091de <_printf_float+0x192>
 80091f4:	2301      	movs	r3, #1
 80091f6:	e7f2      	b.n	80091de <_printf_float+0x192>
 80091f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80091fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091fe:	4299      	cmp	r1, r3
 8009200:	db05      	blt.n	800920e <_printf_float+0x1c2>
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	6121      	str	r1, [r4, #16]
 8009206:	07d8      	lsls	r0, r3, #31
 8009208:	d5ea      	bpl.n	80091e0 <_printf_float+0x194>
 800920a:	1c4b      	adds	r3, r1, #1
 800920c:	e7e7      	b.n	80091de <_printf_float+0x192>
 800920e:	2900      	cmp	r1, #0
 8009210:	bfd4      	ite	le
 8009212:	f1c1 0202 	rsble	r2, r1, #2
 8009216:	2201      	movgt	r2, #1
 8009218:	4413      	add	r3, r2
 800921a:	e7e0      	b.n	80091de <_printf_float+0x192>
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	055a      	lsls	r2, r3, #21
 8009220:	d407      	bmi.n	8009232 <_printf_float+0x1e6>
 8009222:	6923      	ldr	r3, [r4, #16]
 8009224:	4642      	mov	r2, r8
 8009226:	4631      	mov	r1, r6
 8009228:	4628      	mov	r0, r5
 800922a:	47b8      	blx	r7
 800922c:	3001      	adds	r0, #1
 800922e:	d12b      	bne.n	8009288 <_printf_float+0x23c>
 8009230:	e767      	b.n	8009102 <_printf_float+0xb6>
 8009232:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009236:	f240 80dd 	bls.w	80093f4 <_printf_float+0x3a8>
 800923a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800923e:	2200      	movs	r2, #0
 8009240:	2300      	movs	r3, #0
 8009242:	f7f7 fc69 	bl	8000b18 <__aeabi_dcmpeq>
 8009246:	2800      	cmp	r0, #0
 8009248:	d033      	beq.n	80092b2 <_printf_float+0x266>
 800924a:	4a37      	ldr	r2, [pc, #220]	@ (8009328 <_printf_float+0x2dc>)
 800924c:	2301      	movs	r3, #1
 800924e:	4631      	mov	r1, r6
 8009250:	4628      	mov	r0, r5
 8009252:	47b8      	blx	r7
 8009254:	3001      	adds	r0, #1
 8009256:	f43f af54 	beq.w	8009102 <_printf_float+0xb6>
 800925a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800925e:	4543      	cmp	r3, r8
 8009260:	db02      	blt.n	8009268 <_printf_float+0x21c>
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	07d8      	lsls	r0, r3, #31
 8009266:	d50f      	bpl.n	8009288 <_printf_float+0x23c>
 8009268:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800926c:	4631      	mov	r1, r6
 800926e:	4628      	mov	r0, r5
 8009270:	47b8      	blx	r7
 8009272:	3001      	adds	r0, #1
 8009274:	f43f af45 	beq.w	8009102 <_printf_float+0xb6>
 8009278:	f04f 0900 	mov.w	r9, #0
 800927c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009280:	f104 0a1a 	add.w	sl, r4, #26
 8009284:	45c8      	cmp	r8, r9
 8009286:	dc09      	bgt.n	800929c <_printf_float+0x250>
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	079b      	lsls	r3, r3, #30
 800928c:	f100 8103 	bmi.w	8009496 <_printf_float+0x44a>
 8009290:	68e0      	ldr	r0, [r4, #12]
 8009292:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009294:	4298      	cmp	r0, r3
 8009296:	bfb8      	it	lt
 8009298:	4618      	movlt	r0, r3
 800929a:	e734      	b.n	8009106 <_printf_float+0xba>
 800929c:	2301      	movs	r3, #1
 800929e:	4652      	mov	r2, sl
 80092a0:	4631      	mov	r1, r6
 80092a2:	4628      	mov	r0, r5
 80092a4:	47b8      	blx	r7
 80092a6:	3001      	adds	r0, #1
 80092a8:	f43f af2b 	beq.w	8009102 <_printf_float+0xb6>
 80092ac:	f109 0901 	add.w	r9, r9, #1
 80092b0:	e7e8      	b.n	8009284 <_printf_float+0x238>
 80092b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	dc39      	bgt.n	800932c <_printf_float+0x2e0>
 80092b8:	4a1b      	ldr	r2, [pc, #108]	@ (8009328 <_printf_float+0x2dc>)
 80092ba:	2301      	movs	r3, #1
 80092bc:	4631      	mov	r1, r6
 80092be:	4628      	mov	r0, r5
 80092c0:	47b8      	blx	r7
 80092c2:	3001      	adds	r0, #1
 80092c4:	f43f af1d 	beq.w	8009102 <_printf_float+0xb6>
 80092c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80092cc:	ea59 0303 	orrs.w	r3, r9, r3
 80092d0:	d102      	bne.n	80092d8 <_printf_float+0x28c>
 80092d2:	6823      	ldr	r3, [r4, #0]
 80092d4:	07d9      	lsls	r1, r3, #31
 80092d6:	d5d7      	bpl.n	8009288 <_printf_float+0x23c>
 80092d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092dc:	4631      	mov	r1, r6
 80092de:	4628      	mov	r0, r5
 80092e0:	47b8      	blx	r7
 80092e2:	3001      	adds	r0, #1
 80092e4:	f43f af0d 	beq.w	8009102 <_printf_float+0xb6>
 80092e8:	f04f 0a00 	mov.w	sl, #0
 80092ec:	f104 0b1a 	add.w	fp, r4, #26
 80092f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092f2:	425b      	negs	r3, r3
 80092f4:	4553      	cmp	r3, sl
 80092f6:	dc01      	bgt.n	80092fc <_printf_float+0x2b0>
 80092f8:	464b      	mov	r3, r9
 80092fa:	e793      	b.n	8009224 <_printf_float+0x1d8>
 80092fc:	2301      	movs	r3, #1
 80092fe:	465a      	mov	r2, fp
 8009300:	4631      	mov	r1, r6
 8009302:	4628      	mov	r0, r5
 8009304:	47b8      	blx	r7
 8009306:	3001      	adds	r0, #1
 8009308:	f43f aefb 	beq.w	8009102 <_printf_float+0xb6>
 800930c:	f10a 0a01 	add.w	sl, sl, #1
 8009310:	e7ee      	b.n	80092f0 <_printf_float+0x2a4>
 8009312:	bf00      	nop
 8009314:	7fefffff 	.word	0x7fefffff
 8009318:	0800c744 	.word	0x0800c744
 800931c:	0800c748 	.word	0x0800c748
 8009320:	0800c74c 	.word	0x0800c74c
 8009324:	0800c750 	.word	0x0800c750
 8009328:	0800c754 	.word	0x0800c754
 800932c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800932e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009332:	4553      	cmp	r3, sl
 8009334:	bfa8      	it	ge
 8009336:	4653      	movge	r3, sl
 8009338:	2b00      	cmp	r3, #0
 800933a:	4699      	mov	r9, r3
 800933c:	dc36      	bgt.n	80093ac <_printf_float+0x360>
 800933e:	f04f 0b00 	mov.w	fp, #0
 8009342:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009346:	f104 021a 	add.w	r2, r4, #26
 800934a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800934c:	9306      	str	r3, [sp, #24]
 800934e:	eba3 0309 	sub.w	r3, r3, r9
 8009352:	455b      	cmp	r3, fp
 8009354:	dc31      	bgt.n	80093ba <_printf_float+0x36e>
 8009356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009358:	459a      	cmp	sl, r3
 800935a:	dc3a      	bgt.n	80093d2 <_printf_float+0x386>
 800935c:	6823      	ldr	r3, [r4, #0]
 800935e:	07da      	lsls	r2, r3, #31
 8009360:	d437      	bmi.n	80093d2 <_printf_float+0x386>
 8009362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009364:	ebaa 0903 	sub.w	r9, sl, r3
 8009368:	9b06      	ldr	r3, [sp, #24]
 800936a:	ebaa 0303 	sub.w	r3, sl, r3
 800936e:	4599      	cmp	r9, r3
 8009370:	bfa8      	it	ge
 8009372:	4699      	movge	r9, r3
 8009374:	f1b9 0f00 	cmp.w	r9, #0
 8009378:	dc33      	bgt.n	80093e2 <_printf_float+0x396>
 800937a:	f04f 0800 	mov.w	r8, #0
 800937e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009382:	f104 0b1a 	add.w	fp, r4, #26
 8009386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009388:	ebaa 0303 	sub.w	r3, sl, r3
 800938c:	eba3 0309 	sub.w	r3, r3, r9
 8009390:	4543      	cmp	r3, r8
 8009392:	f77f af79 	ble.w	8009288 <_printf_float+0x23c>
 8009396:	2301      	movs	r3, #1
 8009398:	465a      	mov	r2, fp
 800939a:	4631      	mov	r1, r6
 800939c:	4628      	mov	r0, r5
 800939e:	47b8      	blx	r7
 80093a0:	3001      	adds	r0, #1
 80093a2:	f43f aeae 	beq.w	8009102 <_printf_float+0xb6>
 80093a6:	f108 0801 	add.w	r8, r8, #1
 80093aa:	e7ec      	b.n	8009386 <_printf_float+0x33a>
 80093ac:	4642      	mov	r2, r8
 80093ae:	4631      	mov	r1, r6
 80093b0:	4628      	mov	r0, r5
 80093b2:	47b8      	blx	r7
 80093b4:	3001      	adds	r0, #1
 80093b6:	d1c2      	bne.n	800933e <_printf_float+0x2f2>
 80093b8:	e6a3      	b.n	8009102 <_printf_float+0xb6>
 80093ba:	2301      	movs	r3, #1
 80093bc:	4631      	mov	r1, r6
 80093be:	4628      	mov	r0, r5
 80093c0:	9206      	str	r2, [sp, #24]
 80093c2:	47b8      	blx	r7
 80093c4:	3001      	adds	r0, #1
 80093c6:	f43f ae9c 	beq.w	8009102 <_printf_float+0xb6>
 80093ca:	9a06      	ldr	r2, [sp, #24]
 80093cc:	f10b 0b01 	add.w	fp, fp, #1
 80093d0:	e7bb      	b.n	800934a <_printf_float+0x2fe>
 80093d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093d6:	4631      	mov	r1, r6
 80093d8:	4628      	mov	r0, r5
 80093da:	47b8      	blx	r7
 80093dc:	3001      	adds	r0, #1
 80093de:	d1c0      	bne.n	8009362 <_printf_float+0x316>
 80093e0:	e68f      	b.n	8009102 <_printf_float+0xb6>
 80093e2:	9a06      	ldr	r2, [sp, #24]
 80093e4:	464b      	mov	r3, r9
 80093e6:	4442      	add	r2, r8
 80093e8:	4631      	mov	r1, r6
 80093ea:	4628      	mov	r0, r5
 80093ec:	47b8      	blx	r7
 80093ee:	3001      	adds	r0, #1
 80093f0:	d1c3      	bne.n	800937a <_printf_float+0x32e>
 80093f2:	e686      	b.n	8009102 <_printf_float+0xb6>
 80093f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80093f8:	f1ba 0f01 	cmp.w	sl, #1
 80093fc:	dc01      	bgt.n	8009402 <_printf_float+0x3b6>
 80093fe:	07db      	lsls	r3, r3, #31
 8009400:	d536      	bpl.n	8009470 <_printf_float+0x424>
 8009402:	2301      	movs	r3, #1
 8009404:	4642      	mov	r2, r8
 8009406:	4631      	mov	r1, r6
 8009408:	4628      	mov	r0, r5
 800940a:	47b8      	blx	r7
 800940c:	3001      	adds	r0, #1
 800940e:	f43f ae78 	beq.w	8009102 <_printf_float+0xb6>
 8009412:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009416:	4631      	mov	r1, r6
 8009418:	4628      	mov	r0, r5
 800941a:	47b8      	blx	r7
 800941c:	3001      	adds	r0, #1
 800941e:	f43f ae70 	beq.w	8009102 <_printf_float+0xb6>
 8009422:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009426:	2200      	movs	r2, #0
 8009428:	2300      	movs	r3, #0
 800942a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800942e:	f7f7 fb73 	bl	8000b18 <__aeabi_dcmpeq>
 8009432:	b9c0      	cbnz	r0, 8009466 <_printf_float+0x41a>
 8009434:	4653      	mov	r3, sl
 8009436:	f108 0201 	add.w	r2, r8, #1
 800943a:	4631      	mov	r1, r6
 800943c:	4628      	mov	r0, r5
 800943e:	47b8      	blx	r7
 8009440:	3001      	adds	r0, #1
 8009442:	d10c      	bne.n	800945e <_printf_float+0x412>
 8009444:	e65d      	b.n	8009102 <_printf_float+0xb6>
 8009446:	2301      	movs	r3, #1
 8009448:	465a      	mov	r2, fp
 800944a:	4631      	mov	r1, r6
 800944c:	4628      	mov	r0, r5
 800944e:	47b8      	blx	r7
 8009450:	3001      	adds	r0, #1
 8009452:	f43f ae56 	beq.w	8009102 <_printf_float+0xb6>
 8009456:	f108 0801 	add.w	r8, r8, #1
 800945a:	45d0      	cmp	r8, sl
 800945c:	dbf3      	blt.n	8009446 <_printf_float+0x3fa>
 800945e:	464b      	mov	r3, r9
 8009460:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009464:	e6df      	b.n	8009226 <_printf_float+0x1da>
 8009466:	f04f 0800 	mov.w	r8, #0
 800946a:	f104 0b1a 	add.w	fp, r4, #26
 800946e:	e7f4      	b.n	800945a <_printf_float+0x40e>
 8009470:	2301      	movs	r3, #1
 8009472:	4642      	mov	r2, r8
 8009474:	e7e1      	b.n	800943a <_printf_float+0x3ee>
 8009476:	2301      	movs	r3, #1
 8009478:	464a      	mov	r2, r9
 800947a:	4631      	mov	r1, r6
 800947c:	4628      	mov	r0, r5
 800947e:	47b8      	blx	r7
 8009480:	3001      	adds	r0, #1
 8009482:	f43f ae3e 	beq.w	8009102 <_printf_float+0xb6>
 8009486:	f108 0801 	add.w	r8, r8, #1
 800948a:	68e3      	ldr	r3, [r4, #12]
 800948c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800948e:	1a5b      	subs	r3, r3, r1
 8009490:	4543      	cmp	r3, r8
 8009492:	dcf0      	bgt.n	8009476 <_printf_float+0x42a>
 8009494:	e6fc      	b.n	8009290 <_printf_float+0x244>
 8009496:	f04f 0800 	mov.w	r8, #0
 800949a:	f104 0919 	add.w	r9, r4, #25
 800949e:	e7f4      	b.n	800948a <_printf_float+0x43e>

080094a0 <_printf_common>:
 80094a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a4:	4616      	mov	r6, r2
 80094a6:	4698      	mov	r8, r3
 80094a8:	688a      	ldr	r2, [r1, #8]
 80094aa:	690b      	ldr	r3, [r1, #16]
 80094ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80094b0:	4293      	cmp	r3, r2
 80094b2:	bfb8      	it	lt
 80094b4:	4613      	movlt	r3, r2
 80094b6:	6033      	str	r3, [r6, #0]
 80094b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094bc:	4607      	mov	r7, r0
 80094be:	460c      	mov	r4, r1
 80094c0:	b10a      	cbz	r2, 80094c6 <_printf_common+0x26>
 80094c2:	3301      	adds	r3, #1
 80094c4:	6033      	str	r3, [r6, #0]
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	0699      	lsls	r1, r3, #26
 80094ca:	bf42      	ittt	mi
 80094cc:	6833      	ldrmi	r3, [r6, #0]
 80094ce:	3302      	addmi	r3, #2
 80094d0:	6033      	strmi	r3, [r6, #0]
 80094d2:	6825      	ldr	r5, [r4, #0]
 80094d4:	f015 0506 	ands.w	r5, r5, #6
 80094d8:	d106      	bne.n	80094e8 <_printf_common+0x48>
 80094da:	f104 0a19 	add.w	sl, r4, #25
 80094de:	68e3      	ldr	r3, [r4, #12]
 80094e0:	6832      	ldr	r2, [r6, #0]
 80094e2:	1a9b      	subs	r3, r3, r2
 80094e4:	42ab      	cmp	r3, r5
 80094e6:	dc26      	bgt.n	8009536 <_printf_common+0x96>
 80094e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80094ec:	6822      	ldr	r2, [r4, #0]
 80094ee:	3b00      	subs	r3, #0
 80094f0:	bf18      	it	ne
 80094f2:	2301      	movne	r3, #1
 80094f4:	0692      	lsls	r2, r2, #26
 80094f6:	d42b      	bmi.n	8009550 <_printf_common+0xb0>
 80094f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80094fc:	4641      	mov	r1, r8
 80094fe:	4638      	mov	r0, r7
 8009500:	47c8      	blx	r9
 8009502:	3001      	adds	r0, #1
 8009504:	d01e      	beq.n	8009544 <_printf_common+0xa4>
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	6922      	ldr	r2, [r4, #16]
 800950a:	f003 0306 	and.w	r3, r3, #6
 800950e:	2b04      	cmp	r3, #4
 8009510:	bf02      	ittt	eq
 8009512:	68e5      	ldreq	r5, [r4, #12]
 8009514:	6833      	ldreq	r3, [r6, #0]
 8009516:	1aed      	subeq	r5, r5, r3
 8009518:	68a3      	ldr	r3, [r4, #8]
 800951a:	bf0c      	ite	eq
 800951c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009520:	2500      	movne	r5, #0
 8009522:	4293      	cmp	r3, r2
 8009524:	bfc4      	itt	gt
 8009526:	1a9b      	subgt	r3, r3, r2
 8009528:	18ed      	addgt	r5, r5, r3
 800952a:	2600      	movs	r6, #0
 800952c:	341a      	adds	r4, #26
 800952e:	42b5      	cmp	r5, r6
 8009530:	d11a      	bne.n	8009568 <_printf_common+0xc8>
 8009532:	2000      	movs	r0, #0
 8009534:	e008      	b.n	8009548 <_printf_common+0xa8>
 8009536:	2301      	movs	r3, #1
 8009538:	4652      	mov	r2, sl
 800953a:	4641      	mov	r1, r8
 800953c:	4638      	mov	r0, r7
 800953e:	47c8      	blx	r9
 8009540:	3001      	adds	r0, #1
 8009542:	d103      	bne.n	800954c <_printf_common+0xac>
 8009544:	f04f 30ff 	mov.w	r0, #4294967295
 8009548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800954c:	3501      	adds	r5, #1
 800954e:	e7c6      	b.n	80094de <_printf_common+0x3e>
 8009550:	18e1      	adds	r1, r4, r3
 8009552:	1c5a      	adds	r2, r3, #1
 8009554:	2030      	movs	r0, #48	@ 0x30
 8009556:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800955a:	4422      	add	r2, r4
 800955c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009560:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009564:	3302      	adds	r3, #2
 8009566:	e7c7      	b.n	80094f8 <_printf_common+0x58>
 8009568:	2301      	movs	r3, #1
 800956a:	4622      	mov	r2, r4
 800956c:	4641      	mov	r1, r8
 800956e:	4638      	mov	r0, r7
 8009570:	47c8      	blx	r9
 8009572:	3001      	adds	r0, #1
 8009574:	d0e6      	beq.n	8009544 <_printf_common+0xa4>
 8009576:	3601      	adds	r6, #1
 8009578:	e7d9      	b.n	800952e <_printf_common+0x8e>
	...

0800957c <_printf_i>:
 800957c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009580:	7e0f      	ldrb	r7, [r1, #24]
 8009582:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009584:	2f78      	cmp	r7, #120	@ 0x78
 8009586:	4691      	mov	r9, r2
 8009588:	4680      	mov	r8, r0
 800958a:	460c      	mov	r4, r1
 800958c:	469a      	mov	sl, r3
 800958e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009592:	d807      	bhi.n	80095a4 <_printf_i+0x28>
 8009594:	2f62      	cmp	r7, #98	@ 0x62
 8009596:	d80a      	bhi.n	80095ae <_printf_i+0x32>
 8009598:	2f00      	cmp	r7, #0
 800959a:	f000 80d2 	beq.w	8009742 <_printf_i+0x1c6>
 800959e:	2f58      	cmp	r7, #88	@ 0x58
 80095a0:	f000 80b9 	beq.w	8009716 <_printf_i+0x19a>
 80095a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80095ac:	e03a      	b.n	8009624 <_printf_i+0xa8>
 80095ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80095b2:	2b15      	cmp	r3, #21
 80095b4:	d8f6      	bhi.n	80095a4 <_printf_i+0x28>
 80095b6:	a101      	add	r1, pc, #4	@ (adr r1, 80095bc <_printf_i+0x40>)
 80095b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095bc:	08009615 	.word	0x08009615
 80095c0:	08009629 	.word	0x08009629
 80095c4:	080095a5 	.word	0x080095a5
 80095c8:	080095a5 	.word	0x080095a5
 80095cc:	080095a5 	.word	0x080095a5
 80095d0:	080095a5 	.word	0x080095a5
 80095d4:	08009629 	.word	0x08009629
 80095d8:	080095a5 	.word	0x080095a5
 80095dc:	080095a5 	.word	0x080095a5
 80095e0:	080095a5 	.word	0x080095a5
 80095e4:	080095a5 	.word	0x080095a5
 80095e8:	08009729 	.word	0x08009729
 80095ec:	08009653 	.word	0x08009653
 80095f0:	080096e3 	.word	0x080096e3
 80095f4:	080095a5 	.word	0x080095a5
 80095f8:	080095a5 	.word	0x080095a5
 80095fc:	0800974b 	.word	0x0800974b
 8009600:	080095a5 	.word	0x080095a5
 8009604:	08009653 	.word	0x08009653
 8009608:	080095a5 	.word	0x080095a5
 800960c:	080095a5 	.word	0x080095a5
 8009610:	080096eb 	.word	0x080096eb
 8009614:	6833      	ldr	r3, [r6, #0]
 8009616:	1d1a      	adds	r2, r3, #4
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	6032      	str	r2, [r6, #0]
 800961c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009620:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009624:	2301      	movs	r3, #1
 8009626:	e09d      	b.n	8009764 <_printf_i+0x1e8>
 8009628:	6833      	ldr	r3, [r6, #0]
 800962a:	6820      	ldr	r0, [r4, #0]
 800962c:	1d19      	adds	r1, r3, #4
 800962e:	6031      	str	r1, [r6, #0]
 8009630:	0606      	lsls	r6, r0, #24
 8009632:	d501      	bpl.n	8009638 <_printf_i+0xbc>
 8009634:	681d      	ldr	r5, [r3, #0]
 8009636:	e003      	b.n	8009640 <_printf_i+0xc4>
 8009638:	0645      	lsls	r5, r0, #25
 800963a:	d5fb      	bpl.n	8009634 <_printf_i+0xb8>
 800963c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009640:	2d00      	cmp	r5, #0
 8009642:	da03      	bge.n	800964c <_printf_i+0xd0>
 8009644:	232d      	movs	r3, #45	@ 0x2d
 8009646:	426d      	negs	r5, r5
 8009648:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800964c:	4859      	ldr	r0, [pc, #356]	@ (80097b4 <_printf_i+0x238>)
 800964e:	230a      	movs	r3, #10
 8009650:	e011      	b.n	8009676 <_printf_i+0xfa>
 8009652:	6821      	ldr	r1, [r4, #0]
 8009654:	6833      	ldr	r3, [r6, #0]
 8009656:	0608      	lsls	r0, r1, #24
 8009658:	f853 5b04 	ldr.w	r5, [r3], #4
 800965c:	d402      	bmi.n	8009664 <_printf_i+0xe8>
 800965e:	0649      	lsls	r1, r1, #25
 8009660:	bf48      	it	mi
 8009662:	b2ad      	uxthmi	r5, r5
 8009664:	2f6f      	cmp	r7, #111	@ 0x6f
 8009666:	4853      	ldr	r0, [pc, #332]	@ (80097b4 <_printf_i+0x238>)
 8009668:	6033      	str	r3, [r6, #0]
 800966a:	bf14      	ite	ne
 800966c:	230a      	movne	r3, #10
 800966e:	2308      	moveq	r3, #8
 8009670:	2100      	movs	r1, #0
 8009672:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009676:	6866      	ldr	r6, [r4, #4]
 8009678:	60a6      	str	r6, [r4, #8]
 800967a:	2e00      	cmp	r6, #0
 800967c:	bfa2      	ittt	ge
 800967e:	6821      	ldrge	r1, [r4, #0]
 8009680:	f021 0104 	bicge.w	r1, r1, #4
 8009684:	6021      	strge	r1, [r4, #0]
 8009686:	b90d      	cbnz	r5, 800968c <_printf_i+0x110>
 8009688:	2e00      	cmp	r6, #0
 800968a:	d04b      	beq.n	8009724 <_printf_i+0x1a8>
 800968c:	4616      	mov	r6, r2
 800968e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009692:	fb03 5711 	mls	r7, r3, r1, r5
 8009696:	5dc7      	ldrb	r7, [r0, r7]
 8009698:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800969c:	462f      	mov	r7, r5
 800969e:	42bb      	cmp	r3, r7
 80096a0:	460d      	mov	r5, r1
 80096a2:	d9f4      	bls.n	800968e <_printf_i+0x112>
 80096a4:	2b08      	cmp	r3, #8
 80096a6:	d10b      	bne.n	80096c0 <_printf_i+0x144>
 80096a8:	6823      	ldr	r3, [r4, #0]
 80096aa:	07df      	lsls	r7, r3, #31
 80096ac:	d508      	bpl.n	80096c0 <_printf_i+0x144>
 80096ae:	6923      	ldr	r3, [r4, #16]
 80096b0:	6861      	ldr	r1, [r4, #4]
 80096b2:	4299      	cmp	r1, r3
 80096b4:	bfde      	ittt	le
 80096b6:	2330      	movle	r3, #48	@ 0x30
 80096b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096c0:	1b92      	subs	r2, r2, r6
 80096c2:	6122      	str	r2, [r4, #16]
 80096c4:	f8cd a000 	str.w	sl, [sp]
 80096c8:	464b      	mov	r3, r9
 80096ca:	aa03      	add	r2, sp, #12
 80096cc:	4621      	mov	r1, r4
 80096ce:	4640      	mov	r0, r8
 80096d0:	f7ff fee6 	bl	80094a0 <_printf_common>
 80096d4:	3001      	adds	r0, #1
 80096d6:	d14a      	bne.n	800976e <_printf_i+0x1f2>
 80096d8:	f04f 30ff 	mov.w	r0, #4294967295
 80096dc:	b004      	add	sp, #16
 80096de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	f043 0320 	orr.w	r3, r3, #32
 80096e8:	6023      	str	r3, [r4, #0]
 80096ea:	4833      	ldr	r0, [pc, #204]	@ (80097b8 <_printf_i+0x23c>)
 80096ec:	2778      	movs	r7, #120	@ 0x78
 80096ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	6831      	ldr	r1, [r6, #0]
 80096f6:	061f      	lsls	r7, r3, #24
 80096f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80096fc:	d402      	bmi.n	8009704 <_printf_i+0x188>
 80096fe:	065f      	lsls	r7, r3, #25
 8009700:	bf48      	it	mi
 8009702:	b2ad      	uxthmi	r5, r5
 8009704:	6031      	str	r1, [r6, #0]
 8009706:	07d9      	lsls	r1, r3, #31
 8009708:	bf44      	itt	mi
 800970a:	f043 0320 	orrmi.w	r3, r3, #32
 800970e:	6023      	strmi	r3, [r4, #0]
 8009710:	b11d      	cbz	r5, 800971a <_printf_i+0x19e>
 8009712:	2310      	movs	r3, #16
 8009714:	e7ac      	b.n	8009670 <_printf_i+0xf4>
 8009716:	4827      	ldr	r0, [pc, #156]	@ (80097b4 <_printf_i+0x238>)
 8009718:	e7e9      	b.n	80096ee <_printf_i+0x172>
 800971a:	6823      	ldr	r3, [r4, #0]
 800971c:	f023 0320 	bic.w	r3, r3, #32
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	e7f6      	b.n	8009712 <_printf_i+0x196>
 8009724:	4616      	mov	r6, r2
 8009726:	e7bd      	b.n	80096a4 <_printf_i+0x128>
 8009728:	6833      	ldr	r3, [r6, #0]
 800972a:	6825      	ldr	r5, [r4, #0]
 800972c:	6961      	ldr	r1, [r4, #20]
 800972e:	1d18      	adds	r0, r3, #4
 8009730:	6030      	str	r0, [r6, #0]
 8009732:	062e      	lsls	r6, r5, #24
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	d501      	bpl.n	800973c <_printf_i+0x1c0>
 8009738:	6019      	str	r1, [r3, #0]
 800973a:	e002      	b.n	8009742 <_printf_i+0x1c6>
 800973c:	0668      	lsls	r0, r5, #25
 800973e:	d5fb      	bpl.n	8009738 <_printf_i+0x1bc>
 8009740:	8019      	strh	r1, [r3, #0]
 8009742:	2300      	movs	r3, #0
 8009744:	6123      	str	r3, [r4, #16]
 8009746:	4616      	mov	r6, r2
 8009748:	e7bc      	b.n	80096c4 <_printf_i+0x148>
 800974a:	6833      	ldr	r3, [r6, #0]
 800974c:	1d1a      	adds	r2, r3, #4
 800974e:	6032      	str	r2, [r6, #0]
 8009750:	681e      	ldr	r6, [r3, #0]
 8009752:	6862      	ldr	r2, [r4, #4]
 8009754:	2100      	movs	r1, #0
 8009756:	4630      	mov	r0, r6
 8009758:	f7f6 fd62 	bl	8000220 <memchr>
 800975c:	b108      	cbz	r0, 8009762 <_printf_i+0x1e6>
 800975e:	1b80      	subs	r0, r0, r6
 8009760:	6060      	str	r0, [r4, #4]
 8009762:	6863      	ldr	r3, [r4, #4]
 8009764:	6123      	str	r3, [r4, #16]
 8009766:	2300      	movs	r3, #0
 8009768:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800976c:	e7aa      	b.n	80096c4 <_printf_i+0x148>
 800976e:	6923      	ldr	r3, [r4, #16]
 8009770:	4632      	mov	r2, r6
 8009772:	4649      	mov	r1, r9
 8009774:	4640      	mov	r0, r8
 8009776:	47d0      	blx	sl
 8009778:	3001      	adds	r0, #1
 800977a:	d0ad      	beq.n	80096d8 <_printf_i+0x15c>
 800977c:	6823      	ldr	r3, [r4, #0]
 800977e:	079b      	lsls	r3, r3, #30
 8009780:	d413      	bmi.n	80097aa <_printf_i+0x22e>
 8009782:	68e0      	ldr	r0, [r4, #12]
 8009784:	9b03      	ldr	r3, [sp, #12]
 8009786:	4298      	cmp	r0, r3
 8009788:	bfb8      	it	lt
 800978a:	4618      	movlt	r0, r3
 800978c:	e7a6      	b.n	80096dc <_printf_i+0x160>
 800978e:	2301      	movs	r3, #1
 8009790:	4632      	mov	r2, r6
 8009792:	4649      	mov	r1, r9
 8009794:	4640      	mov	r0, r8
 8009796:	47d0      	blx	sl
 8009798:	3001      	adds	r0, #1
 800979a:	d09d      	beq.n	80096d8 <_printf_i+0x15c>
 800979c:	3501      	adds	r5, #1
 800979e:	68e3      	ldr	r3, [r4, #12]
 80097a0:	9903      	ldr	r1, [sp, #12]
 80097a2:	1a5b      	subs	r3, r3, r1
 80097a4:	42ab      	cmp	r3, r5
 80097a6:	dcf2      	bgt.n	800978e <_printf_i+0x212>
 80097a8:	e7eb      	b.n	8009782 <_printf_i+0x206>
 80097aa:	2500      	movs	r5, #0
 80097ac:	f104 0619 	add.w	r6, r4, #25
 80097b0:	e7f5      	b.n	800979e <_printf_i+0x222>
 80097b2:	bf00      	nop
 80097b4:	0800c756 	.word	0x0800c756
 80097b8:	0800c767 	.word	0x0800c767

080097bc <std>:
 80097bc:	2300      	movs	r3, #0
 80097be:	b510      	push	{r4, lr}
 80097c0:	4604      	mov	r4, r0
 80097c2:	e9c0 3300 	strd	r3, r3, [r0]
 80097c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097ca:	6083      	str	r3, [r0, #8]
 80097cc:	8181      	strh	r1, [r0, #12]
 80097ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80097d0:	81c2      	strh	r2, [r0, #14]
 80097d2:	6183      	str	r3, [r0, #24]
 80097d4:	4619      	mov	r1, r3
 80097d6:	2208      	movs	r2, #8
 80097d8:	305c      	adds	r0, #92	@ 0x5c
 80097da:	f000 fa19 	bl	8009c10 <memset>
 80097de:	4b0d      	ldr	r3, [pc, #52]	@ (8009814 <std+0x58>)
 80097e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80097e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009818 <std+0x5c>)
 80097e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80097e6:	4b0d      	ldr	r3, [pc, #52]	@ (800981c <std+0x60>)
 80097e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80097ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009820 <std+0x64>)
 80097ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80097ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009824 <std+0x68>)
 80097f0:	6224      	str	r4, [r4, #32]
 80097f2:	429c      	cmp	r4, r3
 80097f4:	d006      	beq.n	8009804 <std+0x48>
 80097f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80097fa:	4294      	cmp	r4, r2
 80097fc:	d002      	beq.n	8009804 <std+0x48>
 80097fe:	33d0      	adds	r3, #208	@ 0xd0
 8009800:	429c      	cmp	r4, r3
 8009802:	d105      	bne.n	8009810 <std+0x54>
 8009804:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800980c:	f000 ba8c 	b.w	8009d28 <__retarget_lock_init_recursive>
 8009810:	bd10      	pop	{r4, pc}
 8009812:	bf00      	nop
 8009814:	08009a61 	.word	0x08009a61
 8009818:	08009a83 	.word	0x08009a83
 800981c:	08009abb 	.word	0x08009abb
 8009820:	08009adf 	.word	0x08009adf
 8009824:	20000668 	.word	0x20000668

08009828 <stdio_exit_handler>:
 8009828:	4a02      	ldr	r2, [pc, #8]	@ (8009834 <stdio_exit_handler+0xc>)
 800982a:	4903      	ldr	r1, [pc, #12]	@ (8009838 <stdio_exit_handler+0x10>)
 800982c:	4803      	ldr	r0, [pc, #12]	@ (800983c <stdio_exit_handler+0x14>)
 800982e:	f000 b869 	b.w	8009904 <_fwalk_sglue>
 8009832:	bf00      	nop
 8009834:	2000000c 	.word	0x2000000c
 8009838:	0800b79d 	.word	0x0800b79d
 800983c:	2000001c 	.word	0x2000001c

08009840 <cleanup_stdio>:
 8009840:	6841      	ldr	r1, [r0, #4]
 8009842:	4b0c      	ldr	r3, [pc, #48]	@ (8009874 <cleanup_stdio+0x34>)
 8009844:	4299      	cmp	r1, r3
 8009846:	b510      	push	{r4, lr}
 8009848:	4604      	mov	r4, r0
 800984a:	d001      	beq.n	8009850 <cleanup_stdio+0x10>
 800984c:	f001 ffa6 	bl	800b79c <_fflush_r>
 8009850:	68a1      	ldr	r1, [r4, #8]
 8009852:	4b09      	ldr	r3, [pc, #36]	@ (8009878 <cleanup_stdio+0x38>)
 8009854:	4299      	cmp	r1, r3
 8009856:	d002      	beq.n	800985e <cleanup_stdio+0x1e>
 8009858:	4620      	mov	r0, r4
 800985a:	f001 ff9f 	bl	800b79c <_fflush_r>
 800985e:	68e1      	ldr	r1, [r4, #12]
 8009860:	4b06      	ldr	r3, [pc, #24]	@ (800987c <cleanup_stdio+0x3c>)
 8009862:	4299      	cmp	r1, r3
 8009864:	d004      	beq.n	8009870 <cleanup_stdio+0x30>
 8009866:	4620      	mov	r0, r4
 8009868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800986c:	f001 bf96 	b.w	800b79c <_fflush_r>
 8009870:	bd10      	pop	{r4, pc}
 8009872:	bf00      	nop
 8009874:	20000668 	.word	0x20000668
 8009878:	200006d0 	.word	0x200006d0
 800987c:	20000738 	.word	0x20000738

08009880 <global_stdio_init.part.0>:
 8009880:	b510      	push	{r4, lr}
 8009882:	4b0b      	ldr	r3, [pc, #44]	@ (80098b0 <global_stdio_init.part.0+0x30>)
 8009884:	4c0b      	ldr	r4, [pc, #44]	@ (80098b4 <global_stdio_init.part.0+0x34>)
 8009886:	4a0c      	ldr	r2, [pc, #48]	@ (80098b8 <global_stdio_init.part.0+0x38>)
 8009888:	601a      	str	r2, [r3, #0]
 800988a:	4620      	mov	r0, r4
 800988c:	2200      	movs	r2, #0
 800988e:	2104      	movs	r1, #4
 8009890:	f7ff ff94 	bl	80097bc <std>
 8009894:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009898:	2201      	movs	r2, #1
 800989a:	2109      	movs	r1, #9
 800989c:	f7ff ff8e 	bl	80097bc <std>
 80098a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80098a4:	2202      	movs	r2, #2
 80098a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098aa:	2112      	movs	r1, #18
 80098ac:	f7ff bf86 	b.w	80097bc <std>
 80098b0:	200007a0 	.word	0x200007a0
 80098b4:	20000668 	.word	0x20000668
 80098b8:	08009829 	.word	0x08009829

080098bc <__sfp_lock_acquire>:
 80098bc:	4801      	ldr	r0, [pc, #4]	@ (80098c4 <__sfp_lock_acquire+0x8>)
 80098be:	f000 ba34 	b.w	8009d2a <__retarget_lock_acquire_recursive>
 80098c2:	bf00      	nop
 80098c4:	200007a9 	.word	0x200007a9

080098c8 <__sfp_lock_release>:
 80098c8:	4801      	ldr	r0, [pc, #4]	@ (80098d0 <__sfp_lock_release+0x8>)
 80098ca:	f000 ba2f 	b.w	8009d2c <__retarget_lock_release_recursive>
 80098ce:	bf00      	nop
 80098d0:	200007a9 	.word	0x200007a9

080098d4 <__sinit>:
 80098d4:	b510      	push	{r4, lr}
 80098d6:	4604      	mov	r4, r0
 80098d8:	f7ff fff0 	bl	80098bc <__sfp_lock_acquire>
 80098dc:	6a23      	ldr	r3, [r4, #32]
 80098de:	b11b      	cbz	r3, 80098e8 <__sinit+0x14>
 80098e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098e4:	f7ff bff0 	b.w	80098c8 <__sfp_lock_release>
 80098e8:	4b04      	ldr	r3, [pc, #16]	@ (80098fc <__sinit+0x28>)
 80098ea:	6223      	str	r3, [r4, #32]
 80098ec:	4b04      	ldr	r3, [pc, #16]	@ (8009900 <__sinit+0x2c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1f5      	bne.n	80098e0 <__sinit+0xc>
 80098f4:	f7ff ffc4 	bl	8009880 <global_stdio_init.part.0>
 80098f8:	e7f2      	b.n	80098e0 <__sinit+0xc>
 80098fa:	bf00      	nop
 80098fc:	08009841 	.word	0x08009841
 8009900:	200007a0 	.word	0x200007a0

08009904 <_fwalk_sglue>:
 8009904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009908:	4607      	mov	r7, r0
 800990a:	4688      	mov	r8, r1
 800990c:	4614      	mov	r4, r2
 800990e:	2600      	movs	r6, #0
 8009910:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009914:	f1b9 0901 	subs.w	r9, r9, #1
 8009918:	d505      	bpl.n	8009926 <_fwalk_sglue+0x22>
 800991a:	6824      	ldr	r4, [r4, #0]
 800991c:	2c00      	cmp	r4, #0
 800991e:	d1f7      	bne.n	8009910 <_fwalk_sglue+0xc>
 8009920:	4630      	mov	r0, r6
 8009922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009926:	89ab      	ldrh	r3, [r5, #12]
 8009928:	2b01      	cmp	r3, #1
 800992a:	d907      	bls.n	800993c <_fwalk_sglue+0x38>
 800992c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009930:	3301      	adds	r3, #1
 8009932:	d003      	beq.n	800993c <_fwalk_sglue+0x38>
 8009934:	4629      	mov	r1, r5
 8009936:	4638      	mov	r0, r7
 8009938:	47c0      	blx	r8
 800993a:	4306      	orrs	r6, r0
 800993c:	3568      	adds	r5, #104	@ 0x68
 800993e:	e7e9      	b.n	8009914 <_fwalk_sglue+0x10>

08009940 <iprintf>:
 8009940:	b40f      	push	{r0, r1, r2, r3}
 8009942:	b507      	push	{r0, r1, r2, lr}
 8009944:	4906      	ldr	r1, [pc, #24]	@ (8009960 <iprintf+0x20>)
 8009946:	ab04      	add	r3, sp, #16
 8009948:	6808      	ldr	r0, [r1, #0]
 800994a:	f853 2b04 	ldr.w	r2, [r3], #4
 800994e:	6881      	ldr	r1, [r0, #8]
 8009950:	9301      	str	r3, [sp, #4]
 8009952:	f001 fd87 	bl	800b464 <_vfiprintf_r>
 8009956:	b003      	add	sp, #12
 8009958:	f85d eb04 	ldr.w	lr, [sp], #4
 800995c:	b004      	add	sp, #16
 800995e:	4770      	bx	lr
 8009960:	20000018 	.word	0x20000018

08009964 <_puts_r>:
 8009964:	6a03      	ldr	r3, [r0, #32]
 8009966:	b570      	push	{r4, r5, r6, lr}
 8009968:	6884      	ldr	r4, [r0, #8]
 800996a:	4605      	mov	r5, r0
 800996c:	460e      	mov	r6, r1
 800996e:	b90b      	cbnz	r3, 8009974 <_puts_r+0x10>
 8009970:	f7ff ffb0 	bl	80098d4 <__sinit>
 8009974:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009976:	07db      	lsls	r3, r3, #31
 8009978:	d405      	bmi.n	8009986 <_puts_r+0x22>
 800997a:	89a3      	ldrh	r3, [r4, #12]
 800997c:	0598      	lsls	r0, r3, #22
 800997e:	d402      	bmi.n	8009986 <_puts_r+0x22>
 8009980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009982:	f000 f9d2 	bl	8009d2a <__retarget_lock_acquire_recursive>
 8009986:	89a3      	ldrh	r3, [r4, #12]
 8009988:	0719      	lsls	r1, r3, #28
 800998a:	d502      	bpl.n	8009992 <_puts_r+0x2e>
 800998c:	6923      	ldr	r3, [r4, #16]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d135      	bne.n	80099fe <_puts_r+0x9a>
 8009992:	4621      	mov	r1, r4
 8009994:	4628      	mov	r0, r5
 8009996:	f000 f8e5 	bl	8009b64 <__swsetup_r>
 800999a:	b380      	cbz	r0, 80099fe <_puts_r+0x9a>
 800999c:	f04f 35ff 	mov.w	r5, #4294967295
 80099a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099a2:	07da      	lsls	r2, r3, #31
 80099a4:	d405      	bmi.n	80099b2 <_puts_r+0x4e>
 80099a6:	89a3      	ldrh	r3, [r4, #12]
 80099a8:	059b      	lsls	r3, r3, #22
 80099aa:	d402      	bmi.n	80099b2 <_puts_r+0x4e>
 80099ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099ae:	f000 f9bd 	bl	8009d2c <__retarget_lock_release_recursive>
 80099b2:	4628      	mov	r0, r5
 80099b4:	bd70      	pop	{r4, r5, r6, pc}
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	da04      	bge.n	80099c4 <_puts_r+0x60>
 80099ba:	69a2      	ldr	r2, [r4, #24]
 80099bc:	429a      	cmp	r2, r3
 80099be:	dc17      	bgt.n	80099f0 <_puts_r+0x8c>
 80099c0:	290a      	cmp	r1, #10
 80099c2:	d015      	beq.n	80099f0 <_puts_r+0x8c>
 80099c4:	6823      	ldr	r3, [r4, #0]
 80099c6:	1c5a      	adds	r2, r3, #1
 80099c8:	6022      	str	r2, [r4, #0]
 80099ca:	7019      	strb	r1, [r3, #0]
 80099cc:	68a3      	ldr	r3, [r4, #8]
 80099ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80099d2:	3b01      	subs	r3, #1
 80099d4:	60a3      	str	r3, [r4, #8]
 80099d6:	2900      	cmp	r1, #0
 80099d8:	d1ed      	bne.n	80099b6 <_puts_r+0x52>
 80099da:	2b00      	cmp	r3, #0
 80099dc:	da11      	bge.n	8009a02 <_puts_r+0x9e>
 80099de:	4622      	mov	r2, r4
 80099e0:	210a      	movs	r1, #10
 80099e2:	4628      	mov	r0, r5
 80099e4:	f000 f87f 	bl	8009ae6 <__swbuf_r>
 80099e8:	3001      	adds	r0, #1
 80099ea:	d0d7      	beq.n	800999c <_puts_r+0x38>
 80099ec:	250a      	movs	r5, #10
 80099ee:	e7d7      	b.n	80099a0 <_puts_r+0x3c>
 80099f0:	4622      	mov	r2, r4
 80099f2:	4628      	mov	r0, r5
 80099f4:	f000 f877 	bl	8009ae6 <__swbuf_r>
 80099f8:	3001      	adds	r0, #1
 80099fa:	d1e7      	bne.n	80099cc <_puts_r+0x68>
 80099fc:	e7ce      	b.n	800999c <_puts_r+0x38>
 80099fe:	3e01      	subs	r6, #1
 8009a00:	e7e4      	b.n	80099cc <_puts_r+0x68>
 8009a02:	6823      	ldr	r3, [r4, #0]
 8009a04:	1c5a      	adds	r2, r3, #1
 8009a06:	6022      	str	r2, [r4, #0]
 8009a08:	220a      	movs	r2, #10
 8009a0a:	701a      	strb	r2, [r3, #0]
 8009a0c:	e7ee      	b.n	80099ec <_puts_r+0x88>
	...

08009a10 <puts>:
 8009a10:	4b02      	ldr	r3, [pc, #8]	@ (8009a1c <puts+0xc>)
 8009a12:	4601      	mov	r1, r0
 8009a14:	6818      	ldr	r0, [r3, #0]
 8009a16:	f7ff bfa5 	b.w	8009964 <_puts_r>
 8009a1a:	bf00      	nop
 8009a1c:	20000018 	.word	0x20000018

08009a20 <siprintf>:
 8009a20:	b40e      	push	{r1, r2, r3}
 8009a22:	b500      	push	{lr}
 8009a24:	b09c      	sub	sp, #112	@ 0x70
 8009a26:	ab1d      	add	r3, sp, #116	@ 0x74
 8009a28:	9002      	str	r0, [sp, #8]
 8009a2a:	9006      	str	r0, [sp, #24]
 8009a2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009a30:	4809      	ldr	r0, [pc, #36]	@ (8009a58 <siprintf+0x38>)
 8009a32:	9107      	str	r1, [sp, #28]
 8009a34:	9104      	str	r1, [sp, #16]
 8009a36:	4909      	ldr	r1, [pc, #36]	@ (8009a5c <siprintf+0x3c>)
 8009a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a3c:	9105      	str	r1, [sp, #20]
 8009a3e:	6800      	ldr	r0, [r0, #0]
 8009a40:	9301      	str	r3, [sp, #4]
 8009a42:	a902      	add	r1, sp, #8
 8009a44:	f001 fbe8 	bl	800b218 <_svfiprintf_r>
 8009a48:	9b02      	ldr	r3, [sp, #8]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	701a      	strb	r2, [r3, #0]
 8009a4e:	b01c      	add	sp, #112	@ 0x70
 8009a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a54:	b003      	add	sp, #12
 8009a56:	4770      	bx	lr
 8009a58:	20000018 	.word	0x20000018
 8009a5c:	ffff0208 	.word	0xffff0208

08009a60 <__sread>:
 8009a60:	b510      	push	{r4, lr}
 8009a62:	460c      	mov	r4, r1
 8009a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a68:	f000 f900 	bl	8009c6c <_read_r>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	bfab      	itete	ge
 8009a70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009a72:	89a3      	ldrhlt	r3, [r4, #12]
 8009a74:	181b      	addge	r3, r3, r0
 8009a76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009a7a:	bfac      	ite	ge
 8009a7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009a7e:	81a3      	strhlt	r3, [r4, #12]
 8009a80:	bd10      	pop	{r4, pc}

08009a82 <__swrite>:
 8009a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a86:	461f      	mov	r7, r3
 8009a88:	898b      	ldrh	r3, [r1, #12]
 8009a8a:	05db      	lsls	r3, r3, #23
 8009a8c:	4605      	mov	r5, r0
 8009a8e:	460c      	mov	r4, r1
 8009a90:	4616      	mov	r6, r2
 8009a92:	d505      	bpl.n	8009aa0 <__swrite+0x1e>
 8009a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a98:	2302      	movs	r3, #2
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f000 f8d4 	bl	8009c48 <_lseek_r>
 8009aa0:	89a3      	ldrh	r3, [r4, #12]
 8009aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aa6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009aaa:	81a3      	strh	r3, [r4, #12]
 8009aac:	4632      	mov	r2, r6
 8009aae:	463b      	mov	r3, r7
 8009ab0:	4628      	mov	r0, r5
 8009ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab6:	f000 b8fb 	b.w	8009cb0 <_write_r>

08009aba <__sseek>:
 8009aba:	b510      	push	{r4, lr}
 8009abc:	460c      	mov	r4, r1
 8009abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ac2:	f000 f8c1 	bl	8009c48 <_lseek_r>
 8009ac6:	1c43      	adds	r3, r0, #1
 8009ac8:	89a3      	ldrh	r3, [r4, #12]
 8009aca:	bf15      	itete	ne
 8009acc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009ace:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009ad2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009ad6:	81a3      	strheq	r3, [r4, #12]
 8009ad8:	bf18      	it	ne
 8009ada:	81a3      	strhne	r3, [r4, #12]
 8009adc:	bd10      	pop	{r4, pc}

08009ade <__sclose>:
 8009ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ae2:	f000 b8a1 	b.w	8009c28 <_close_r>

08009ae6 <__swbuf_r>:
 8009ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae8:	460e      	mov	r6, r1
 8009aea:	4614      	mov	r4, r2
 8009aec:	4605      	mov	r5, r0
 8009aee:	b118      	cbz	r0, 8009af8 <__swbuf_r+0x12>
 8009af0:	6a03      	ldr	r3, [r0, #32]
 8009af2:	b90b      	cbnz	r3, 8009af8 <__swbuf_r+0x12>
 8009af4:	f7ff feee 	bl	80098d4 <__sinit>
 8009af8:	69a3      	ldr	r3, [r4, #24]
 8009afa:	60a3      	str	r3, [r4, #8]
 8009afc:	89a3      	ldrh	r3, [r4, #12]
 8009afe:	071a      	lsls	r2, r3, #28
 8009b00:	d501      	bpl.n	8009b06 <__swbuf_r+0x20>
 8009b02:	6923      	ldr	r3, [r4, #16]
 8009b04:	b943      	cbnz	r3, 8009b18 <__swbuf_r+0x32>
 8009b06:	4621      	mov	r1, r4
 8009b08:	4628      	mov	r0, r5
 8009b0a:	f000 f82b 	bl	8009b64 <__swsetup_r>
 8009b0e:	b118      	cbz	r0, 8009b18 <__swbuf_r+0x32>
 8009b10:	f04f 37ff 	mov.w	r7, #4294967295
 8009b14:	4638      	mov	r0, r7
 8009b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	6922      	ldr	r2, [r4, #16]
 8009b1c:	1a98      	subs	r0, r3, r2
 8009b1e:	6963      	ldr	r3, [r4, #20]
 8009b20:	b2f6      	uxtb	r6, r6
 8009b22:	4283      	cmp	r3, r0
 8009b24:	4637      	mov	r7, r6
 8009b26:	dc05      	bgt.n	8009b34 <__swbuf_r+0x4e>
 8009b28:	4621      	mov	r1, r4
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	f001 fe36 	bl	800b79c <_fflush_r>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	d1ed      	bne.n	8009b10 <__swbuf_r+0x2a>
 8009b34:	68a3      	ldr	r3, [r4, #8]
 8009b36:	3b01      	subs	r3, #1
 8009b38:	60a3      	str	r3, [r4, #8]
 8009b3a:	6823      	ldr	r3, [r4, #0]
 8009b3c:	1c5a      	adds	r2, r3, #1
 8009b3e:	6022      	str	r2, [r4, #0]
 8009b40:	701e      	strb	r6, [r3, #0]
 8009b42:	6962      	ldr	r2, [r4, #20]
 8009b44:	1c43      	adds	r3, r0, #1
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d004      	beq.n	8009b54 <__swbuf_r+0x6e>
 8009b4a:	89a3      	ldrh	r3, [r4, #12]
 8009b4c:	07db      	lsls	r3, r3, #31
 8009b4e:	d5e1      	bpl.n	8009b14 <__swbuf_r+0x2e>
 8009b50:	2e0a      	cmp	r6, #10
 8009b52:	d1df      	bne.n	8009b14 <__swbuf_r+0x2e>
 8009b54:	4621      	mov	r1, r4
 8009b56:	4628      	mov	r0, r5
 8009b58:	f001 fe20 	bl	800b79c <_fflush_r>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	d0d9      	beq.n	8009b14 <__swbuf_r+0x2e>
 8009b60:	e7d6      	b.n	8009b10 <__swbuf_r+0x2a>
	...

08009b64 <__swsetup_r>:
 8009b64:	b538      	push	{r3, r4, r5, lr}
 8009b66:	4b29      	ldr	r3, [pc, #164]	@ (8009c0c <__swsetup_r+0xa8>)
 8009b68:	4605      	mov	r5, r0
 8009b6a:	6818      	ldr	r0, [r3, #0]
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	b118      	cbz	r0, 8009b78 <__swsetup_r+0x14>
 8009b70:	6a03      	ldr	r3, [r0, #32]
 8009b72:	b90b      	cbnz	r3, 8009b78 <__swsetup_r+0x14>
 8009b74:	f7ff feae 	bl	80098d4 <__sinit>
 8009b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b7c:	0719      	lsls	r1, r3, #28
 8009b7e:	d422      	bmi.n	8009bc6 <__swsetup_r+0x62>
 8009b80:	06da      	lsls	r2, r3, #27
 8009b82:	d407      	bmi.n	8009b94 <__swsetup_r+0x30>
 8009b84:	2209      	movs	r2, #9
 8009b86:	602a      	str	r2, [r5, #0]
 8009b88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b8c:	81a3      	strh	r3, [r4, #12]
 8009b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b92:	e033      	b.n	8009bfc <__swsetup_r+0x98>
 8009b94:	0758      	lsls	r0, r3, #29
 8009b96:	d512      	bpl.n	8009bbe <__swsetup_r+0x5a>
 8009b98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b9a:	b141      	cbz	r1, 8009bae <__swsetup_r+0x4a>
 8009b9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ba0:	4299      	cmp	r1, r3
 8009ba2:	d002      	beq.n	8009baa <__swsetup_r+0x46>
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	f000 ff0f 	bl	800a9c8 <_free_r>
 8009baa:	2300      	movs	r3, #0
 8009bac:	6363      	str	r3, [r4, #52]	@ 0x34
 8009bae:	89a3      	ldrh	r3, [r4, #12]
 8009bb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009bb4:	81a3      	strh	r3, [r4, #12]
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	6063      	str	r3, [r4, #4]
 8009bba:	6923      	ldr	r3, [r4, #16]
 8009bbc:	6023      	str	r3, [r4, #0]
 8009bbe:	89a3      	ldrh	r3, [r4, #12]
 8009bc0:	f043 0308 	orr.w	r3, r3, #8
 8009bc4:	81a3      	strh	r3, [r4, #12]
 8009bc6:	6923      	ldr	r3, [r4, #16]
 8009bc8:	b94b      	cbnz	r3, 8009bde <__swsetup_r+0x7a>
 8009bca:	89a3      	ldrh	r3, [r4, #12]
 8009bcc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bd4:	d003      	beq.n	8009bde <__swsetup_r+0x7a>
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	4628      	mov	r0, r5
 8009bda:	f001 fe2d 	bl	800b838 <__smakebuf_r>
 8009bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009be2:	f013 0201 	ands.w	r2, r3, #1
 8009be6:	d00a      	beq.n	8009bfe <__swsetup_r+0x9a>
 8009be8:	2200      	movs	r2, #0
 8009bea:	60a2      	str	r2, [r4, #8]
 8009bec:	6962      	ldr	r2, [r4, #20]
 8009bee:	4252      	negs	r2, r2
 8009bf0:	61a2      	str	r2, [r4, #24]
 8009bf2:	6922      	ldr	r2, [r4, #16]
 8009bf4:	b942      	cbnz	r2, 8009c08 <__swsetup_r+0xa4>
 8009bf6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009bfa:	d1c5      	bne.n	8009b88 <__swsetup_r+0x24>
 8009bfc:	bd38      	pop	{r3, r4, r5, pc}
 8009bfe:	0799      	lsls	r1, r3, #30
 8009c00:	bf58      	it	pl
 8009c02:	6962      	ldrpl	r2, [r4, #20]
 8009c04:	60a2      	str	r2, [r4, #8]
 8009c06:	e7f4      	b.n	8009bf2 <__swsetup_r+0x8e>
 8009c08:	2000      	movs	r0, #0
 8009c0a:	e7f7      	b.n	8009bfc <__swsetup_r+0x98>
 8009c0c:	20000018 	.word	0x20000018

08009c10 <memset>:
 8009c10:	4402      	add	r2, r0
 8009c12:	4603      	mov	r3, r0
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d100      	bne.n	8009c1a <memset+0xa>
 8009c18:	4770      	bx	lr
 8009c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c1e:	e7f9      	b.n	8009c14 <memset+0x4>

08009c20 <_localeconv_r>:
 8009c20:	4800      	ldr	r0, [pc, #0]	@ (8009c24 <_localeconv_r+0x4>)
 8009c22:	4770      	bx	lr
 8009c24:	20000158 	.word	0x20000158

08009c28 <_close_r>:
 8009c28:	b538      	push	{r3, r4, r5, lr}
 8009c2a:	4d06      	ldr	r5, [pc, #24]	@ (8009c44 <_close_r+0x1c>)
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	4604      	mov	r4, r0
 8009c30:	4608      	mov	r0, r1
 8009c32:	602b      	str	r3, [r5, #0]
 8009c34:	f7f8 fa40 	bl	80020b8 <_close>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d102      	bne.n	8009c42 <_close_r+0x1a>
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	b103      	cbz	r3, 8009c42 <_close_r+0x1a>
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	200007a4 	.word	0x200007a4

08009c48 <_lseek_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4d07      	ldr	r5, [pc, #28]	@ (8009c68 <_lseek_r+0x20>)
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	4608      	mov	r0, r1
 8009c50:	4611      	mov	r1, r2
 8009c52:	2200      	movs	r2, #0
 8009c54:	602a      	str	r2, [r5, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	f7f8 fa55 	bl	8002106 <_lseek>
 8009c5c:	1c43      	adds	r3, r0, #1
 8009c5e:	d102      	bne.n	8009c66 <_lseek_r+0x1e>
 8009c60:	682b      	ldr	r3, [r5, #0]
 8009c62:	b103      	cbz	r3, 8009c66 <_lseek_r+0x1e>
 8009c64:	6023      	str	r3, [r4, #0]
 8009c66:	bd38      	pop	{r3, r4, r5, pc}
 8009c68:	200007a4 	.word	0x200007a4

08009c6c <_read_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	4d07      	ldr	r5, [pc, #28]	@ (8009c8c <_read_r+0x20>)
 8009c70:	4604      	mov	r4, r0
 8009c72:	4608      	mov	r0, r1
 8009c74:	4611      	mov	r1, r2
 8009c76:	2200      	movs	r2, #0
 8009c78:	602a      	str	r2, [r5, #0]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	f7f8 f9ff 	bl	800207e <_read>
 8009c80:	1c43      	adds	r3, r0, #1
 8009c82:	d102      	bne.n	8009c8a <_read_r+0x1e>
 8009c84:	682b      	ldr	r3, [r5, #0]
 8009c86:	b103      	cbz	r3, 8009c8a <_read_r+0x1e>
 8009c88:	6023      	str	r3, [r4, #0]
 8009c8a:	bd38      	pop	{r3, r4, r5, pc}
 8009c8c:	200007a4 	.word	0x200007a4

08009c90 <_sbrk_r>:
 8009c90:	b538      	push	{r3, r4, r5, lr}
 8009c92:	4d06      	ldr	r5, [pc, #24]	@ (8009cac <_sbrk_r+0x1c>)
 8009c94:	2300      	movs	r3, #0
 8009c96:	4604      	mov	r4, r0
 8009c98:	4608      	mov	r0, r1
 8009c9a:	602b      	str	r3, [r5, #0]
 8009c9c:	f7f8 fa40 	bl	8002120 <_sbrk>
 8009ca0:	1c43      	adds	r3, r0, #1
 8009ca2:	d102      	bne.n	8009caa <_sbrk_r+0x1a>
 8009ca4:	682b      	ldr	r3, [r5, #0]
 8009ca6:	b103      	cbz	r3, 8009caa <_sbrk_r+0x1a>
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	bd38      	pop	{r3, r4, r5, pc}
 8009cac:	200007a4 	.word	0x200007a4

08009cb0 <_write_r>:
 8009cb0:	b538      	push	{r3, r4, r5, lr}
 8009cb2:	4d07      	ldr	r5, [pc, #28]	@ (8009cd0 <_write_r+0x20>)
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	4608      	mov	r0, r1
 8009cb8:	4611      	mov	r1, r2
 8009cba:	2200      	movs	r2, #0
 8009cbc:	602a      	str	r2, [r5, #0]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	f7f7 fa5e 	bl	8001180 <_write>
 8009cc4:	1c43      	adds	r3, r0, #1
 8009cc6:	d102      	bne.n	8009cce <_write_r+0x1e>
 8009cc8:	682b      	ldr	r3, [r5, #0]
 8009cca:	b103      	cbz	r3, 8009cce <_write_r+0x1e>
 8009ccc:	6023      	str	r3, [r4, #0]
 8009cce:	bd38      	pop	{r3, r4, r5, pc}
 8009cd0:	200007a4 	.word	0x200007a4

08009cd4 <__errno>:
 8009cd4:	4b01      	ldr	r3, [pc, #4]	@ (8009cdc <__errno+0x8>)
 8009cd6:	6818      	ldr	r0, [r3, #0]
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	20000018 	.word	0x20000018

08009ce0 <__libc_init_array>:
 8009ce0:	b570      	push	{r4, r5, r6, lr}
 8009ce2:	4d0d      	ldr	r5, [pc, #52]	@ (8009d18 <__libc_init_array+0x38>)
 8009ce4:	4c0d      	ldr	r4, [pc, #52]	@ (8009d1c <__libc_init_array+0x3c>)
 8009ce6:	1b64      	subs	r4, r4, r5
 8009ce8:	10a4      	asrs	r4, r4, #2
 8009cea:	2600      	movs	r6, #0
 8009cec:	42a6      	cmp	r6, r4
 8009cee:	d109      	bne.n	8009d04 <__libc_init_array+0x24>
 8009cf0:	4d0b      	ldr	r5, [pc, #44]	@ (8009d20 <__libc_init_array+0x40>)
 8009cf2:	4c0c      	ldr	r4, [pc, #48]	@ (8009d24 <__libc_init_array+0x44>)
 8009cf4:	f002 fc46 	bl	800c584 <_init>
 8009cf8:	1b64      	subs	r4, r4, r5
 8009cfa:	10a4      	asrs	r4, r4, #2
 8009cfc:	2600      	movs	r6, #0
 8009cfe:	42a6      	cmp	r6, r4
 8009d00:	d105      	bne.n	8009d0e <__libc_init_array+0x2e>
 8009d02:	bd70      	pop	{r4, r5, r6, pc}
 8009d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d08:	4798      	blx	r3
 8009d0a:	3601      	adds	r6, #1
 8009d0c:	e7ee      	b.n	8009cec <__libc_init_array+0xc>
 8009d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d12:	4798      	blx	r3
 8009d14:	3601      	adds	r6, #1
 8009d16:	e7f2      	b.n	8009cfe <__libc_init_array+0x1e>
 8009d18:	0800ce90 	.word	0x0800ce90
 8009d1c:	0800ce90 	.word	0x0800ce90
 8009d20:	0800ce90 	.word	0x0800ce90
 8009d24:	0800ce94 	.word	0x0800ce94

08009d28 <__retarget_lock_init_recursive>:
 8009d28:	4770      	bx	lr

08009d2a <__retarget_lock_acquire_recursive>:
 8009d2a:	4770      	bx	lr

08009d2c <__retarget_lock_release_recursive>:
 8009d2c:	4770      	bx	lr

08009d2e <quorem>:
 8009d2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d32:	6903      	ldr	r3, [r0, #16]
 8009d34:	690c      	ldr	r4, [r1, #16]
 8009d36:	42a3      	cmp	r3, r4
 8009d38:	4607      	mov	r7, r0
 8009d3a:	db7e      	blt.n	8009e3a <quorem+0x10c>
 8009d3c:	3c01      	subs	r4, #1
 8009d3e:	f101 0814 	add.w	r8, r1, #20
 8009d42:	00a3      	lsls	r3, r4, #2
 8009d44:	f100 0514 	add.w	r5, r0, #20
 8009d48:	9300      	str	r3, [sp, #0]
 8009d4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d4e:	9301      	str	r3, [sp, #4]
 8009d50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d60:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d64:	d32e      	bcc.n	8009dc4 <quorem+0x96>
 8009d66:	f04f 0a00 	mov.w	sl, #0
 8009d6a:	46c4      	mov	ip, r8
 8009d6c:	46ae      	mov	lr, r5
 8009d6e:	46d3      	mov	fp, sl
 8009d70:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d74:	b298      	uxth	r0, r3
 8009d76:	fb06 a000 	mla	r0, r6, r0, sl
 8009d7a:	0c02      	lsrs	r2, r0, #16
 8009d7c:	0c1b      	lsrs	r3, r3, #16
 8009d7e:	fb06 2303 	mla	r3, r6, r3, r2
 8009d82:	f8de 2000 	ldr.w	r2, [lr]
 8009d86:	b280      	uxth	r0, r0
 8009d88:	b292      	uxth	r2, r2
 8009d8a:	1a12      	subs	r2, r2, r0
 8009d8c:	445a      	add	r2, fp
 8009d8e:	f8de 0000 	ldr.w	r0, [lr]
 8009d92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009d9c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009da0:	b292      	uxth	r2, r2
 8009da2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009da6:	45e1      	cmp	r9, ip
 8009da8:	f84e 2b04 	str.w	r2, [lr], #4
 8009dac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009db0:	d2de      	bcs.n	8009d70 <quorem+0x42>
 8009db2:	9b00      	ldr	r3, [sp, #0]
 8009db4:	58eb      	ldr	r3, [r5, r3]
 8009db6:	b92b      	cbnz	r3, 8009dc4 <quorem+0x96>
 8009db8:	9b01      	ldr	r3, [sp, #4]
 8009dba:	3b04      	subs	r3, #4
 8009dbc:	429d      	cmp	r5, r3
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	d32f      	bcc.n	8009e22 <quorem+0xf4>
 8009dc2:	613c      	str	r4, [r7, #16]
 8009dc4:	4638      	mov	r0, r7
 8009dc6:	f001 f8c3 	bl	800af50 <__mcmp>
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	db25      	blt.n	8009e1a <quorem+0xec>
 8009dce:	4629      	mov	r1, r5
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	f858 2b04 	ldr.w	r2, [r8], #4
 8009dd6:	f8d1 c000 	ldr.w	ip, [r1]
 8009dda:	fa1f fe82 	uxth.w	lr, r2
 8009dde:	fa1f f38c 	uxth.w	r3, ip
 8009de2:	eba3 030e 	sub.w	r3, r3, lr
 8009de6:	4403      	add	r3, r0
 8009de8:	0c12      	lsrs	r2, r2, #16
 8009dea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009dee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009df8:	45c1      	cmp	r9, r8
 8009dfa:	f841 3b04 	str.w	r3, [r1], #4
 8009dfe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e02:	d2e6      	bcs.n	8009dd2 <quorem+0xa4>
 8009e04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e0c:	b922      	cbnz	r2, 8009e18 <quorem+0xea>
 8009e0e:	3b04      	subs	r3, #4
 8009e10:	429d      	cmp	r5, r3
 8009e12:	461a      	mov	r2, r3
 8009e14:	d30b      	bcc.n	8009e2e <quorem+0x100>
 8009e16:	613c      	str	r4, [r7, #16]
 8009e18:	3601      	adds	r6, #1
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	b003      	add	sp, #12
 8009e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e22:	6812      	ldr	r2, [r2, #0]
 8009e24:	3b04      	subs	r3, #4
 8009e26:	2a00      	cmp	r2, #0
 8009e28:	d1cb      	bne.n	8009dc2 <quorem+0x94>
 8009e2a:	3c01      	subs	r4, #1
 8009e2c:	e7c6      	b.n	8009dbc <quorem+0x8e>
 8009e2e:	6812      	ldr	r2, [r2, #0]
 8009e30:	3b04      	subs	r3, #4
 8009e32:	2a00      	cmp	r2, #0
 8009e34:	d1ef      	bne.n	8009e16 <quorem+0xe8>
 8009e36:	3c01      	subs	r4, #1
 8009e38:	e7ea      	b.n	8009e10 <quorem+0xe2>
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	e7ee      	b.n	8009e1c <quorem+0xee>
	...

08009e40 <_dtoa_r>:
 8009e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e44:	69c7      	ldr	r7, [r0, #28]
 8009e46:	b099      	sub	sp, #100	@ 0x64
 8009e48:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009e4c:	ec55 4b10 	vmov	r4, r5, d0
 8009e50:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009e52:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e54:	4683      	mov	fp, r0
 8009e56:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e5a:	b97f      	cbnz	r7, 8009e7c <_dtoa_r+0x3c>
 8009e5c:	2010      	movs	r0, #16
 8009e5e:	f7fe ff97 	bl	8008d90 <malloc>
 8009e62:	4602      	mov	r2, r0
 8009e64:	f8cb 001c 	str.w	r0, [fp, #28]
 8009e68:	b920      	cbnz	r0, 8009e74 <_dtoa_r+0x34>
 8009e6a:	4ba7      	ldr	r3, [pc, #668]	@ (800a108 <_dtoa_r+0x2c8>)
 8009e6c:	21ef      	movs	r1, #239	@ 0xef
 8009e6e:	48a7      	ldr	r0, [pc, #668]	@ (800a10c <_dtoa_r+0x2cc>)
 8009e70:	f001 fd68 	bl	800b944 <__assert_func>
 8009e74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009e78:	6007      	str	r7, [r0, #0]
 8009e7a:	60c7      	str	r7, [r0, #12]
 8009e7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e80:	6819      	ldr	r1, [r3, #0]
 8009e82:	b159      	cbz	r1, 8009e9c <_dtoa_r+0x5c>
 8009e84:	685a      	ldr	r2, [r3, #4]
 8009e86:	604a      	str	r2, [r1, #4]
 8009e88:	2301      	movs	r3, #1
 8009e8a:	4093      	lsls	r3, r2
 8009e8c:	608b      	str	r3, [r1, #8]
 8009e8e:	4658      	mov	r0, fp
 8009e90:	f000 fe24 	bl	800aadc <_Bfree>
 8009e94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	601a      	str	r2, [r3, #0]
 8009e9c:	1e2b      	subs	r3, r5, #0
 8009e9e:	bfb9      	ittee	lt
 8009ea0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009ea4:	9303      	strlt	r3, [sp, #12]
 8009ea6:	2300      	movge	r3, #0
 8009ea8:	6033      	strge	r3, [r6, #0]
 8009eaa:	9f03      	ldr	r7, [sp, #12]
 8009eac:	4b98      	ldr	r3, [pc, #608]	@ (800a110 <_dtoa_r+0x2d0>)
 8009eae:	bfbc      	itt	lt
 8009eb0:	2201      	movlt	r2, #1
 8009eb2:	6032      	strlt	r2, [r6, #0]
 8009eb4:	43bb      	bics	r3, r7
 8009eb6:	d112      	bne.n	8009ede <_dtoa_r+0x9e>
 8009eb8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009eba:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009ebe:	6013      	str	r3, [r2, #0]
 8009ec0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ec4:	4323      	orrs	r3, r4
 8009ec6:	f000 854d 	beq.w	800a964 <_dtoa_r+0xb24>
 8009eca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ecc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a124 <_dtoa_r+0x2e4>
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 854f 	beq.w	800a974 <_dtoa_r+0xb34>
 8009ed6:	f10a 0303 	add.w	r3, sl, #3
 8009eda:	f000 bd49 	b.w	800a970 <_dtoa_r+0xb30>
 8009ede:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	ec51 0b17 	vmov	r0, r1, d7
 8009ee8:	2300      	movs	r3, #0
 8009eea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009eee:	f7f6 fe13 	bl	8000b18 <__aeabi_dcmpeq>
 8009ef2:	4680      	mov	r8, r0
 8009ef4:	b158      	cbz	r0, 8009f0e <_dtoa_r+0xce>
 8009ef6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009ef8:	2301      	movs	r3, #1
 8009efa:	6013      	str	r3, [r2, #0]
 8009efc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009efe:	b113      	cbz	r3, 8009f06 <_dtoa_r+0xc6>
 8009f00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009f02:	4b84      	ldr	r3, [pc, #528]	@ (800a114 <_dtoa_r+0x2d4>)
 8009f04:	6013      	str	r3, [r2, #0]
 8009f06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a128 <_dtoa_r+0x2e8>
 8009f0a:	f000 bd33 	b.w	800a974 <_dtoa_r+0xb34>
 8009f0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009f12:	aa16      	add	r2, sp, #88	@ 0x58
 8009f14:	a917      	add	r1, sp, #92	@ 0x5c
 8009f16:	4658      	mov	r0, fp
 8009f18:	f001 f8ca 	bl	800b0b0 <__d2b>
 8009f1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009f20:	4681      	mov	r9, r0
 8009f22:	2e00      	cmp	r6, #0
 8009f24:	d077      	beq.n	800a016 <_dtoa_r+0x1d6>
 8009f26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009f38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009f3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009f40:	4619      	mov	r1, r3
 8009f42:	2200      	movs	r2, #0
 8009f44:	4b74      	ldr	r3, [pc, #464]	@ (800a118 <_dtoa_r+0x2d8>)
 8009f46:	f7f6 f9c7 	bl	80002d8 <__aeabi_dsub>
 8009f4a:	a369      	add	r3, pc, #420	@ (adr r3, 800a0f0 <_dtoa_r+0x2b0>)
 8009f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f50:	f7f6 fb7a 	bl	8000648 <__aeabi_dmul>
 8009f54:	a368      	add	r3, pc, #416	@ (adr r3, 800a0f8 <_dtoa_r+0x2b8>)
 8009f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5a:	f7f6 f9bf 	bl	80002dc <__adddf3>
 8009f5e:	4604      	mov	r4, r0
 8009f60:	4630      	mov	r0, r6
 8009f62:	460d      	mov	r5, r1
 8009f64:	f7f6 fb06 	bl	8000574 <__aeabi_i2d>
 8009f68:	a365      	add	r3, pc, #404	@ (adr r3, 800a100 <_dtoa_r+0x2c0>)
 8009f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6e:	f7f6 fb6b 	bl	8000648 <__aeabi_dmul>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4620      	mov	r0, r4
 8009f78:	4629      	mov	r1, r5
 8009f7a:	f7f6 f9af 	bl	80002dc <__adddf3>
 8009f7e:	4604      	mov	r4, r0
 8009f80:	460d      	mov	r5, r1
 8009f82:	f7f6 fe11 	bl	8000ba8 <__aeabi_d2iz>
 8009f86:	2200      	movs	r2, #0
 8009f88:	4607      	mov	r7, r0
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	4629      	mov	r1, r5
 8009f90:	f7f6 fdcc 	bl	8000b2c <__aeabi_dcmplt>
 8009f94:	b140      	cbz	r0, 8009fa8 <_dtoa_r+0x168>
 8009f96:	4638      	mov	r0, r7
 8009f98:	f7f6 faec 	bl	8000574 <__aeabi_i2d>
 8009f9c:	4622      	mov	r2, r4
 8009f9e:	462b      	mov	r3, r5
 8009fa0:	f7f6 fdba 	bl	8000b18 <__aeabi_dcmpeq>
 8009fa4:	b900      	cbnz	r0, 8009fa8 <_dtoa_r+0x168>
 8009fa6:	3f01      	subs	r7, #1
 8009fa8:	2f16      	cmp	r7, #22
 8009faa:	d851      	bhi.n	800a050 <_dtoa_r+0x210>
 8009fac:	4b5b      	ldr	r3, [pc, #364]	@ (800a11c <_dtoa_r+0x2dc>)
 8009fae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fba:	f7f6 fdb7 	bl	8000b2c <__aeabi_dcmplt>
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	d048      	beq.n	800a054 <_dtoa_r+0x214>
 8009fc2:	3f01      	subs	r7, #1
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	9312      	str	r3, [sp, #72]	@ 0x48
 8009fc8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009fca:	1b9b      	subs	r3, r3, r6
 8009fcc:	1e5a      	subs	r2, r3, #1
 8009fce:	bf44      	itt	mi
 8009fd0:	f1c3 0801 	rsbmi	r8, r3, #1
 8009fd4:	2300      	movmi	r3, #0
 8009fd6:	9208      	str	r2, [sp, #32]
 8009fd8:	bf54      	ite	pl
 8009fda:	f04f 0800 	movpl.w	r8, #0
 8009fde:	9308      	strmi	r3, [sp, #32]
 8009fe0:	2f00      	cmp	r7, #0
 8009fe2:	db39      	blt.n	800a058 <_dtoa_r+0x218>
 8009fe4:	9b08      	ldr	r3, [sp, #32]
 8009fe6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009fe8:	443b      	add	r3, r7
 8009fea:	9308      	str	r3, [sp, #32]
 8009fec:	2300      	movs	r3, #0
 8009fee:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ff2:	2b09      	cmp	r3, #9
 8009ff4:	d864      	bhi.n	800a0c0 <_dtoa_r+0x280>
 8009ff6:	2b05      	cmp	r3, #5
 8009ff8:	bfc4      	itt	gt
 8009ffa:	3b04      	subgt	r3, #4
 8009ffc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009ffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a000:	f1a3 0302 	sub.w	r3, r3, #2
 800a004:	bfcc      	ite	gt
 800a006:	2400      	movgt	r4, #0
 800a008:	2401      	movle	r4, #1
 800a00a:	2b03      	cmp	r3, #3
 800a00c:	d863      	bhi.n	800a0d6 <_dtoa_r+0x296>
 800a00e:	e8df f003 	tbb	[pc, r3]
 800a012:	372a      	.short	0x372a
 800a014:	5535      	.short	0x5535
 800a016:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a01a:	441e      	add	r6, r3
 800a01c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a020:	2b20      	cmp	r3, #32
 800a022:	bfc1      	itttt	gt
 800a024:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a028:	409f      	lslgt	r7, r3
 800a02a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a02e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a032:	bfd6      	itet	le
 800a034:	f1c3 0320 	rsble	r3, r3, #32
 800a038:	ea47 0003 	orrgt.w	r0, r7, r3
 800a03c:	fa04 f003 	lslle.w	r0, r4, r3
 800a040:	f7f6 fa88 	bl	8000554 <__aeabi_ui2d>
 800a044:	2201      	movs	r2, #1
 800a046:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a04a:	3e01      	subs	r6, #1
 800a04c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a04e:	e777      	b.n	8009f40 <_dtoa_r+0x100>
 800a050:	2301      	movs	r3, #1
 800a052:	e7b8      	b.n	8009fc6 <_dtoa_r+0x186>
 800a054:	9012      	str	r0, [sp, #72]	@ 0x48
 800a056:	e7b7      	b.n	8009fc8 <_dtoa_r+0x188>
 800a058:	427b      	negs	r3, r7
 800a05a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a05c:	2300      	movs	r3, #0
 800a05e:	eba8 0807 	sub.w	r8, r8, r7
 800a062:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a064:	e7c4      	b.n	8009ff0 <_dtoa_r+0x1b0>
 800a066:	2300      	movs	r3, #0
 800a068:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a06a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	dc35      	bgt.n	800a0dc <_dtoa_r+0x29c>
 800a070:	2301      	movs	r3, #1
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	9307      	str	r3, [sp, #28]
 800a076:	461a      	mov	r2, r3
 800a078:	920e      	str	r2, [sp, #56]	@ 0x38
 800a07a:	e00b      	b.n	800a094 <_dtoa_r+0x254>
 800a07c:	2301      	movs	r3, #1
 800a07e:	e7f3      	b.n	800a068 <_dtoa_r+0x228>
 800a080:	2300      	movs	r3, #0
 800a082:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a084:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a086:	18fb      	adds	r3, r7, r3
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	3301      	adds	r3, #1
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	9307      	str	r3, [sp, #28]
 800a090:	bfb8      	it	lt
 800a092:	2301      	movlt	r3, #1
 800a094:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a098:	2100      	movs	r1, #0
 800a09a:	2204      	movs	r2, #4
 800a09c:	f102 0514 	add.w	r5, r2, #20
 800a0a0:	429d      	cmp	r5, r3
 800a0a2:	d91f      	bls.n	800a0e4 <_dtoa_r+0x2a4>
 800a0a4:	6041      	str	r1, [r0, #4]
 800a0a6:	4658      	mov	r0, fp
 800a0a8:	f000 fcd8 	bl	800aa5c <_Balloc>
 800a0ac:	4682      	mov	sl, r0
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d13c      	bne.n	800a12c <_dtoa_r+0x2ec>
 800a0b2:	4b1b      	ldr	r3, [pc, #108]	@ (800a120 <_dtoa_r+0x2e0>)
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a0ba:	e6d8      	b.n	8009e6e <_dtoa_r+0x2e>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e7e0      	b.n	800a082 <_dtoa_r+0x242>
 800a0c0:	2401      	movs	r4, #1
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a0c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	9307      	str	r3, [sp, #28]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	2312      	movs	r3, #18
 800a0d4:	e7d0      	b.n	800a078 <_dtoa_r+0x238>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0da:	e7f5      	b.n	800a0c8 <_dtoa_r+0x288>
 800a0dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	9307      	str	r3, [sp, #28]
 800a0e2:	e7d7      	b.n	800a094 <_dtoa_r+0x254>
 800a0e4:	3101      	adds	r1, #1
 800a0e6:	0052      	lsls	r2, r2, #1
 800a0e8:	e7d8      	b.n	800a09c <_dtoa_r+0x25c>
 800a0ea:	bf00      	nop
 800a0ec:	f3af 8000 	nop.w
 800a0f0:	636f4361 	.word	0x636f4361
 800a0f4:	3fd287a7 	.word	0x3fd287a7
 800a0f8:	8b60c8b3 	.word	0x8b60c8b3
 800a0fc:	3fc68a28 	.word	0x3fc68a28
 800a100:	509f79fb 	.word	0x509f79fb
 800a104:	3fd34413 	.word	0x3fd34413
 800a108:	0800c785 	.word	0x0800c785
 800a10c:	0800c79c 	.word	0x0800c79c
 800a110:	7ff00000 	.word	0x7ff00000
 800a114:	0800c755 	.word	0x0800c755
 800a118:	3ff80000 	.word	0x3ff80000
 800a11c:	0800c898 	.word	0x0800c898
 800a120:	0800c7f4 	.word	0x0800c7f4
 800a124:	0800c781 	.word	0x0800c781
 800a128:	0800c754 	.word	0x0800c754
 800a12c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a130:	6018      	str	r0, [r3, #0]
 800a132:	9b07      	ldr	r3, [sp, #28]
 800a134:	2b0e      	cmp	r3, #14
 800a136:	f200 80a4 	bhi.w	800a282 <_dtoa_r+0x442>
 800a13a:	2c00      	cmp	r4, #0
 800a13c:	f000 80a1 	beq.w	800a282 <_dtoa_r+0x442>
 800a140:	2f00      	cmp	r7, #0
 800a142:	dd33      	ble.n	800a1ac <_dtoa_r+0x36c>
 800a144:	4bad      	ldr	r3, [pc, #692]	@ (800a3fc <_dtoa_r+0x5bc>)
 800a146:	f007 020f 	and.w	r2, r7, #15
 800a14a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a14e:	ed93 7b00 	vldr	d7, [r3]
 800a152:	05f8      	lsls	r0, r7, #23
 800a154:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a158:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a15c:	d516      	bpl.n	800a18c <_dtoa_r+0x34c>
 800a15e:	4ba8      	ldr	r3, [pc, #672]	@ (800a400 <_dtoa_r+0x5c0>)
 800a160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a164:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a168:	f7f6 fb98 	bl	800089c <__aeabi_ddiv>
 800a16c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a170:	f004 040f 	and.w	r4, r4, #15
 800a174:	2603      	movs	r6, #3
 800a176:	4da2      	ldr	r5, [pc, #648]	@ (800a400 <_dtoa_r+0x5c0>)
 800a178:	b954      	cbnz	r4, 800a190 <_dtoa_r+0x350>
 800a17a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a17e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a182:	f7f6 fb8b 	bl	800089c <__aeabi_ddiv>
 800a186:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a18a:	e028      	b.n	800a1de <_dtoa_r+0x39e>
 800a18c:	2602      	movs	r6, #2
 800a18e:	e7f2      	b.n	800a176 <_dtoa_r+0x336>
 800a190:	07e1      	lsls	r1, r4, #31
 800a192:	d508      	bpl.n	800a1a6 <_dtoa_r+0x366>
 800a194:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a198:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a19c:	f7f6 fa54 	bl	8000648 <__aeabi_dmul>
 800a1a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1a4:	3601      	adds	r6, #1
 800a1a6:	1064      	asrs	r4, r4, #1
 800a1a8:	3508      	adds	r5, #8
 800a1aa:	e7e5      	b.n	800a178 <_dtoa_r+0x338>
 800a1ac:	f000 80d2 	beq.w	800a354 <_dtoa_r+0x514>
 800a1b0:	427c      	negs	r4, r7
 800a1b2:	4b92      	ldr	r3, [pc, #584]	@ (800a3fc <_dtoa_r+0x5bc>)
 800a1b4:	4d92      	ldr	r5, [pc, #584]	@ (800a400 <_dtoa_r+0x5c0>)
 800a1b6:	f004 020f 	and.w	r2, r4, #15
 800a1ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1c6:	f7f6 fa3f 	bl	8000648 <__aeabi_dmul>
 800a1ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1ce:	1124      	asrs	r4, r4, #4
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	2602      	movs	r6, #2
 800a1d4:	2c00      	cmp	r4, #0
 800a1d6:	f040 80b2 	bne.w	800a33e <_dtoa_r+0x4fe>
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d1d3      	bne.n	800a186 <_dtoa_r+0x346>
 800a1de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a1e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f000 80b7 	beq.w	800a358 <_dtoa_r+0x518>
 800a1ea:	4b86      	ldr	r3, [pc, #536]	@ (800a404 <_dtoa_r+0x5c4>)
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	f7f6 fc9b 	bl	8000b2c <__aeabi_dcmplt>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	f000 80ae 	beq.w	800a358 <_dtoa_r+0x518>
 800a1fc:	9b07      	ldr	r3, [sp, #28]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f000 80aa 	beq.w	800a358 <_dtoa_r+0x518>
 800a204:	9b00      	ldr	r3, [sp, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	dd37      	ble.n	800a27a <_dtoa_r+0x43a>
 800a20a:	1e7b      	subs	r3, r7, #1
 800a20c:	9304      	str	r3, [sp, #16]
 800a20e:	4620      	mov	r0, r4
 800a210:	4b7d      	ldr	r3, [pc, #500]	@ (800a408 <_dtoa_r+0x5c8>)
 800a212:	2200      	movs	r2, #0
 800a214:	4629      	mov	r1, r5
 800a216:	f7f6 fa17 	bl	8000648 <__aeabi_dmul>
 800a21a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a21e:	9c00      	ldr	r4, [sp, #0]
 800a220:	3601      	adds	r6, #1
 800a222:	4630      	mov	r0, r6
 800a224:	f7f6 f9a6 	bl	8000574 <__aeabi_i2d>
 800a228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a22c:	f7f6 fa0c 	bl	8000648 <__aeabi_dmul>
 800a230:	4b76      	ldr	r3, [pc, #472]	@ (800a40c <_dtoa_r+0x5cc>)
 800a232:	2200      	movs	r2, #0
 800a234:	f7f6 f852 	bl	80002dc <__adddf3>
 800a238:	4605      	mov	r5, r0
 800a23a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a23e:	2c00      	cmp	r4, #0
 800a240:	f040 808d 	bne.w	800a35e <_dtoa_r+0x51e>
 800a244:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a248:	4b71      	ldr	r3, [pc, #452]	@ (800a410 <_dtoa_r+0x5d0>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	f7f6 f844 	bl	80002d8 <__aeabi_dsub>
 800a250:	4602      	mov	r2, r0
 800a252:	460b      	mov	r3, r1
 800a254:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a258:	462a      	mov	r2, r5
 800a25a:	4633      	mov	r3, r6
 800a25c:	f7f6 fc84 	bl	8000b68 <__aeabi_dcmpgt>
 800a260:	2800      	cmp	r0, #0
 800a262:	f040 828b 	bne.w	800a77c <_dtoa_r+0x93c>
 800a266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a26a:	462a      	mov	r2, r5
 800a26c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a270:	f7f6 fc5c 	bl	8000b2c <__aeabi_dcmplt>
 800a274:	2800      	cmp	r0, #0
 800a276:	f040 8128 	bne.w	800a4ca <_dtoa_r+0x68a>
 800a27a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a27e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a282:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a284:	2b00      	cmp	r3, #0
 800a286:	f2c0 815a 	blt.w	800a53e <_dtoa_r+0x6fe>
 800a28a:	2f0e      	cmp	r7, #14
 800a28c:	f300 8157 	bgt.w	800a53e <_dtoa_r+0x6fe>
 800a290:	4b5a      	ldr	r3, [pc, #360]	@ (800a3fc <_dtoa_r+0x5bc>)
 800a292:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a296:	ed93 7b00 	vldr	d7, [r3]
 800a29a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	ed8d 7b00 	vstr	d7, [sp]
 800a2a2:	da03      	bge.n	800a2ac <_dtoa_r+0x46c>
 800a2a4:	9b07      	ldr	r3, [sp, #28]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f340 8101 	ble.w	800a4ae <_dtoa_r+0x66e>
 800a2ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a2b0:	4656      	mov	r6, sl
 800a2b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	f7f6 faef 	bl	800089c <__aeabi_ddiv>
 800a2be:	f7f6 fc73 	bl	8000ba8 <__aeabi_d2iz>
 800a2c2:	4680      	mov	r8, r0
 800a2c4:	f7f6 f956 	bl	8000574 <__aeabi_i2d>
 800a2c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2cc:	f7f6 f9bc 	bl	8000648 <__aeabi_dmul>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a2dc:	f7f5 fffc 	bl	80002d8 <__aeabi_dsub>
 800a2e0:	f806 4b01 	strb.w	r4, [r6], #1
 800a2e4:	9d07      	ldr	r5, [sp, #28]
 800a2e6:	eba6 040a 	sub.w	r4, r6, sl
 800a2ea:	42a5      	cmp	r5, r4
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	f040 8117 	bne.w	800a522 <_dtoa_r+0x6e2>
 800a2f4:	f7f5 fff2 	bl	80002dc <__adddf3>
 800a2f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	460d      	mov	r5, r1
 800a300:	f7f6 fc32 	bl	8000b68 <__aeabi_dcmpgt>
 800a304:	2800      	cmp	r0, #0
 800a306:	f040 80f9 	bne.w	800a4fc <_dtoa_r+0x6bc>
 800a30a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a30e:	4620      	mov	r0, r4
 800a310:	4629      	mov	r1, r5
 800a312:	f7f6 fc01 	bl	8000b18 <__aeabi_dcmpeq>
 800a316:	b118      	cbz	r0, 800a320 <_dtoa_r+0x4e0>
 800a318:	f018 0f01 	tst.w	r8, #1
 800a31c:	f040 80ee 	bne.w	800a4fc <_dtoa_r+0x6bc>
 800a320:	4649      	mov	r1, r9
 800a322:	4658      	mov	r0, fp
 800a324:	f000 fbda 	bl	800aadc <_Bfree>
 800a328:	2300      	movs	r3, #0
 800a32a:	7033      	strb	r3, [r6, #0]
 800a32c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a32e:	3701      	adds	r7, #1
 800a330:	601f      	str	r7, [r3, #0]
 800a332:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a334:	2b00      	cmp	r3, #0
 800a336:	f000 831d 	beq.w	800a974 <_dtoa_r+0xb34>
 800a33a:	601e      	str	r6, [r3, #0]
 800a33c:	e31a      	b.n	800a974 <_dtoa_r+0xb34>
 800a33e:	07e2      	lsls	r2, r4, #31
 800a340:	d505      	bpl.n	800a34e <_dtoa_r+0x50e>
 800a342:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a346:	f7f6 f97f 	bl	8000648 <__aeabi_dmul>
 800a34a:	3601      	adds	r6, #1
 800a34c:	2301      	movs	r3, #1
 800a34e:	1064      	asrs	r4, r4, #1
 800a350:	3508      	adds	r5, #8
 800a352:	e73f      	b.n	800a1d4 <_dtoa_r+0x394>
 800a354:	2602      	movs	r6, #2
 800a356:	e742      	b.n	800a1de <_dtoa_r+0x39e>
 800a358:	9c07      	ldr	r4, [sp, #28]
 800a35a:	9704      	str	r7, [sp, #16]
 800a35c:	e761      	b.n	800a222 <_dtoa_r+0x3e2>
 800a35e:	4b27      	ldr	r3, [pc, #156]	@ (800a3fc <_dtoa_r+0x5bc>)
 800a360:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a362:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a366:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a36a:	4454      	add	r4, sl
 800a36c:	2900      	cmp	r1, #0
 800a36e:	d053      	beq.n	800a418 <_dtoa_r+0x5d8>
 800a370:	4928      	ldr	r1, [pc, #160]	@ (800a414 <_dtoa_r+0x5d4>)
 800a372:	2000      	movs	r0, #0
 800a374:	f7f6 fa92 	bl	800089c <__aeabi_ddiv>
 800a378:	4633      	mov	r3, r6
 800a37a:	462a      	mov	r2, r5
 800a37c:	f7f5 ffac 	bl	80002d8 <__aeabi_dsub>
 800a380:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a384:	4656      	mov	r6, sl
 800a386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a38a:	f7f6 fc0d 	bl	8000ba8 <__aeabi_d2iz>
 800a38e:	4605      	mov	r5, r0
 800a390:	f7f6 f8f0 	bl	8000574 <__aeabi_i2d>
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a39c:	f7f5 ff9c 	bl	80002d8 <__aeabi_dsub>
 800a3a0:	3530      	adds	r5, #48	@ 0x30
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3aa:	f806 5b01 	strb.w	r5, [r6], #1
 800a3ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a3b2:	f7f6 fbbb 	bl	8000b2c <__aeabi_dcmplt>
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d171      	bne.n	800a49e <_dtoa_r+0x65e>
 800a3ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3be:	4911      	ldr	r1, [pc, #68]	@ (800a404 <_dtoa_r+0x5c4>)
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	f7f5 ff89 	bl	80002d8 <__aeabi_dsub>
 800a3c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a3ca:	f7f6 fbaf 	bl	8000b2c <__aeabi_dcmplt>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	f040 8095 	bne.w	800a4fe <_dtoa_r+0x6be>
 800a3d4:	42a6      	cmp	r6, r4
 800a3d6:	f43f af50 	beq.w	800a27a <_dtoa_r+0x43a>
 800a3da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a3de:	4b0a      	ldr	r3, [pc, #40]	@ (800a408 <_dtoa_r+0x5c8>)
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f7f6 f931 	bl	8000648 <__aeabi_dmul>
 800a3e6:	4b08      	ldr	r3, [pc, #32]	@ (800a408 <_dtoa_r+0x5c8>)
 800a3e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3f2:	f7f6 f929 	bl	8000648 <__aeabi_dmul>
 800a3f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3fa:	e7c4      	b.n	800a386 <_dtoa_r+0x546>
 800a3fc:	0800c898 	.word	0x0800c898
 800a400:	0800c870 	.word	0x0800c870
 800a404:	3ff00000 	.word	0x3ff00000
 800a408:	40240000 	.word	0x40240000
 800a40c:	401c0000 	.word	0x401c0000
 800a410:	40140000 	.word	0x40140000
 800a414:	3fe00000 	.word	0x3fe00000
 800a418:	4631      	mov	r1, r6
 800a41a:	4628      	mov	r0, r5
 800a41c:	f7f6 f914 	bl	8000648 <__aeabi_dmul>
 800a420:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a424:	9415      	str	r4, [sp, #84]	@ 0x54
 800a426:	4656      	mov	r6, sl
 800a428:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a42c:	f7f6 fbbc 	bl	8000ba8 <__aeabi_d2iz>
 800a430:	4605      	mov	r5, r0
 800a432:	f7f6 f89f 	bl	8000574 <__aeabi_i2d>
 800a436:	4602      	mov	r2, r0
 800a438:	460b      	mov	r3, r1
 800a43a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a43e:	f7f5 ff4b 	bl	80002d8 <__aeabi_dsub>
 800a442:	3530      	adds	r5, #48	@ 0x30
 800a444:	f806 5b01 	strb.w	r5, [r6], #1
 800a448:	4602      	mov	r2, r0
 800a44a:	460b      	mov	r3, r1
 800a44c:	42a6      	cmp	r6, r4
 800a44e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a452:	f04f 0200 	mov.w	r2, #0
 800a456:	d124      	bne.n	800a4a2 <_dtoa_r+0x662>
 800a458:	4bac      	ldr	r3, [pc, #688]	@ (800a70c <_dtoa_r+0x8cc>)
 800a45a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a45e:	f7f5 ff3d 	bl	80002dc <__adddf3>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a46a:	f7f6 fb7d 	bl	8000b68 <__aeabi_dcmpgt>
 800a46e:	2800      	cmp	r0, #0
 800a470:	d145      	bne.n	800a4fe <_dtoa_r+0x6be>
 800a472:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a476:	49a5      	ldr	r1, [pc, #660]	@ (800a70c <_dtoa_r+0x8cc>)
 800a478:	2000      	movs	r0, #0
 800a47a:	f7f5 ff2d 	bl	80002d8 <__aeabi_dsub>
 800a47e:	4602      	mov	r2, r0
 800a480:	460b      	mov	r3, r1
 800a482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a486:	f7f6 fb51 	bl	8000b2c <__aeabi_dcmplt>
 800a48a:	2800      	cmp	r0, #0
 800a48c:	f43f aef5 	beq.w	800a27a <_dtoa_r+0x43a>
 800a490:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a492:	1e73      	subs	r3, r6, #1
 800a494:	9315      	str	r3, [sp, #84]	@ 0x54
 800a496:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a49a:	2b30      	cmp	r3, #48	@ 0x30
 800a49c:	d0f8      	beq.n	800a490 <_dtoa_r+0x650>
 800a49e:	9f04      	ldr	r7, [sp, #16]
 800a4a0:	e73e      	b.n	800a320 <_dtoa_r+0x4e0>
 800a4a2:	4b9b      	ldr	r3, [pc, #620]	@ (800a710 <_dtoa_r+0x8d0>)
 800a4a4:	f7f6 f8d0 	bl	8000648 <__aeabi_dmul>
 800a4a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4ac:	e7bc      	b.n	800a428 <_dtoa_r+0x5e8>
 800a4ae:	d10c      	bne.n	800a4ca <_dtoa_r+0x68a>
 800a4b0:	4b98      	ldr	r3, [pc, #608]	@ (800a714 <_dtoa_r+0x8d4>)
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4b8:	f7f6 f8c6 	bl	8000648 <__aeabi_dmul>
 800a4bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4c0:	f7f6 fb48 	bl	8000b54 <__aeabi_dcmpge>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	f000 8157 	beq.w	800a778 <_dtoa_r+0x938>
 800a4ca:	2400      	movs	r4, #0
 800a4cc:	4625      	mov	r5, r4
 800a4ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4d0:	43db      	mvns	r3, r3
 800a4d2:	9304      	str	r3, [sp, #16]
 800a4d4:	4656      	mov	r6, sl
 800a4d6:	2700      	movs	r7, #0
 800a4d8:	4621      	mov	r1, r4
 800a4da:	4658      	mov	r0, fp
 800a4dc:	f000 fafe 	bl	800aadc <_Bfree>
 800a4e0:	2d00      	cmp	r5, #0
 800a4e2:	d0dc      	beq.n	800a49e <_dtoa_r+0x65e>
 800a4e4:	b12f      	cbz	r7, 800a4f2 <_dtoa_r+0x6b2>
 800a4e6:	42af      	cmp	r7, r5
 800a4e8:	d003      	beq.n	800a4f2 <_dtoa_r+0x6b2>
 800a4ea:	4639      	mov	r1, r7
 800a4ec:	4658      	mov	r0, fp
 800a4ee:	f000 faf5 	bl	800aadc <_Bfree>
 800a4f2:	4629      	mov	r1, r5
 800a4f4:	4658      	mov	r0, fp
 800a4f6:	f000 faf1 	bl	800aadc <_Bfree>
 800a4fa:	e7d0      	b.n	800a49e <_dtoa_r+0x65e>
 800a4fc:	9704      	str	r7, [sp, #16]
 800a4fe:	4633      	mov	r3, r6
 800a500:	461e      	mov	r6, r3
 800a502:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a506:	2a39      	cmp	r2, #57	@ 0x39
 800a508:	d107      	bne.n	800a51a <_dtoa_r+0x6da>
 800a50a:	459a      	cmp	sl, r3
 800a50c:	d1f8      	bne.n	800a500 <_dtoa_r+0x6c0>
 800a50e:	9a04      	ldr	r2, [sp, #16]
 800a510:	3201      	adds	r2, #1
 800a512:	9204      	str	r2, [sp, #16]
 800a514:	2230      	movs	r2, #48	@ 0x30
 800a516:	f88a 2000 	strb.w	r2, [sl]
 800a51a:	781a      	ldrb	r2, [r3, #0]
 800a51c:	3201      	adds	r2, #1
 800a51e:	701a      	strb	r2, [r3, #0]
 800a520:	e7bd      	b.n	800a49e <_dtoa_r+0x65e>
 800a522:	4b7b      	ldr	r3, [pc, #492]	@ (800a710 <_dtoa_r+0x8d0>)
 800a524:	2200      	movs	r2, #0
 800a526:	f7f6 f88f 	bl	8000648 <__aeabi_dmul>
 800a52a:	2200      	movs	r2, #0
 800a52c:	2300      	movs	r3, #0
 800a52e:	4604      	mov	r4, r0
 800a530:	460d      	mov	r5, r1
 800a532:	f7f6 faf1 	bl	8000b18 <__aeabi_dcmpeq>
 800a536:	2800      	cmp	r0, #0
 800a538:	f43f aebb 	beq.w	800a2b2 <_dtoa_r+0x472>
 800a53c:	e6f0      	b.n	800a320 <_dtoa_r+0x4e0>
 800a53e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a540:	2a00      	cmp	r2, #0
 800a542:	f000 80db 	beq.w	800a6fc <_dtoa_r+0x8bc>
 800a546:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a548:	2a01      	cmp	r2, #1
 800a54a:	f300 80bf 	bgt.w	800a6cc <_dtoa_r+0x88c>
 800a54e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a550:	2a00      	cmp	r2, #0
 800a552:	f000 80b7 	beq.w	800a6c4 <_dtoa_r+0x884>
 800a556:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a55a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a55c:	4646      	mov	r6, r8
 800a55e:	9a08      	ldr	r2, [sp, #32]
 800a560:	2101      	movs	r1, #1
 800a562:	441a      	add	r2, r3
 800a564:	4658      	mov	r0, fp
 800a566:	4498      	add	r8, r3
 800a568:	9208      	str	r2, [sp, #32]
 800a56a:	f000 fb6b 	bl	800ac44 <__i2b>
 800a56e:	4605      	mov	r5, r0
 800a570:	b15e      	cbz	r6, 800a58a <_dtoa_r+0x74a>
 800a572:	9b08      	ldr	r3, [sp, #32]
 800a574:	2b00      	cmp	r3, #0
 800a576:	dd08      	ble.n	800a58a <_dtoa_r+0x74a>
 800a578:	42b3      	cmp	r3, r6
 800a57a:	9a08      	ldr	r2, [sp, #32]
 800a57c:	bfa8      	it	ge
 800a57e:	4633      	movge	r3, r6
 800a580:	eba8 0803 	sub.w	r8, r8, r3
 800a584:	1af6      	subs	r6, r6, r3
 800a586:	1ad3      	subs	r3, r2, r3
 800a588:	9308      	str	r3, [sp, #32]
 800a58a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a58c:	b1f3      	cbz	r3, 800a5cc <_dtoa_r+0x78c>
 800a58e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 80b7 	beq.w	800a704 <_dtoa_r+0x8c4>
 800a596:	b18c      	cbz	r4, 800a5bc <_dtoa_r+0x77c>
 800a598:	4629      	mov	r1, r5
 800a59a:	4622      	mov	r2, r4
 800a59c:	4658      	mov	r0, fp
 800a59e:	f000 fc11 	bl	800adc4 <__pow5mult>
 800a5a2:	464a      	mov	r2, r9
 800a5a4:	4601      	mov	r1, r0
 800a5a6:	4605      	mov	r5, r0
 800a5a8:	4658      	mov	r0, fp
 800a5aa:	f000 fb61 	bl	800ac70 <__multiply>
 800a5ae:	4649      	mov	r1, r9
 800a5b0:	9004      	str	r0, [sp, #16]
 800a5b2:	4658      	mov	r0, fp
 800a5b4:	f000 fa92 	bl	800aadc <_Bfree>
 800a5b8:	9b04      	ldr	r3, [sp, #16]
 800a5ba:	4699      	mov	r9, r3
 800a5bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5be:	1b1a      	subs	r2, r3, r4
 800a5c0:	d004      	beq.n	800a5cc <_dtoa_r+0x78c>
 800a5c2:	4649      	mov	r1, r9
 800a5c4:	4658      	mov	r0, fp
 800a5c6:	f000 fbfd 	bl	800adc4 <__pow5mult>
 800a5ca:	4681      	mov	r9, r0
 800a5cc:	2101      	movs	r1, #1
 800a5ce:	4658      	mov	r0, fp
 800a5d0:	f000 fb38 	bl	800ac44 <__i2b>
 800a5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	f000 81cf 	beq.w	800a97c <_dtoa_r+0xb3c>
 800a5de:	461a      	mov	r2, r3
 800a5e0:	4601      	mov	r1, r0
 800a5e2:	4658      	mov	r0, fp
 800a5e4:	f000 fbee 	bl	800adc4 <__pow5mult>
 800a5e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	f300 8095 	bgt.w	800a71c <_dtoa_r+0x8dc>
 800a5f2:	9b02      	ldr	r3, [sp, #8]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f040 8087 	bne.w	800a708 <_dtoa_r+0x8c8>
 800a5fa:	9b03      	ldr	r3, [sp, #12]
 800a5fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a600:	2b00      	cmp	r3, #0
 800a602:	f040 8089 	bne.w	800a718 <_dtoa_r+0x8d8>
 800a606:	9b03      	ldr	r3, [sp, #12]
 800a608:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a60c:	0d1b      	lsrs	r3, r3, #20
 800a60e:	051b      	lsls	r3, r3, #20
 800a610:	b12b      	cbz	r3, 800a61e <_dtoa_r+0x7de>
 800a612:	9b08      	ldr	r3, [sp, #32]
 800a614:	3301      	adds	r3, #1
 800a616:	9308      	str	r3, [sp, #32]
 800a618:	f108 0801 	add.w	r8, r8, #1
 800a61c:	2301      	movs	r3, #1
 800a61e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a622:	2b00      	cmp	r3, #0
 800a624:	f000 81b0 	beq.w	800a988 <_dtoa_r+0xb48>
 800a628:	6923      	ldr	r3, [r4, #16]
 800a62a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a62e:	6918      	ldr	r0, [r3, #16]
 800a630:	f000 fabc 	bl	800abac <__hi0bits>
 800a634:	f1c0 0020 	rsb	r0, r0, #32
 800a638:	9b08      	ldr	r3, [sp, #32]
 800a63a:	4418      	add	r0, r3
 800a63c:	f010 001f 	ands.w	r0, r0, #31
 800a640:	d077      	beq.n	800a732 <_dtoa_r+0x8f2>
 800a642:	f1c0 0320 	rsb	r3, r0, #32
 800a646:	2b04      	cmp	r3, #4
 800a648:	dd6b      	ble.n	800a722 <_dtoa_r+0x8e2>
 800a64a:	9b08      	ldr	r3, [sp, #32]
 800a64c:	f1c0 001c 	rsb	r0, r0, #28
 800a650:	4403      	add	r3, r0
 800a652:	4480      	add	r8, r0
 800a654:	4406      	add	r6, r0
 800a656:	9308      	str	r3, [sp, #32]
 800a658:	f1b8 0f00 	cmp.w	r8, #0
 800a65c:	dd05      	ble.n	800a66a <_dtoa_r+0x82a>
 800a65e:	4649      	mov	r1, r9
 800a660:	4642      	mov	r2, r8
 800a662:	4658      	mov	r0, fp
 800a664:	f000 fc08 	bl	800ae78 <__lshift>
 800a668:	4681      	mov	r9, r0
 800a66a:	9b08      	ldr	r3, [sp, #32]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	dd05      	ble.n	800a67c <_dtoa_r+0x83c>
 800a670:	4621      	mov	r1, r4
 800a672:	461a      	mov	r2, r3
 800a674:	4658      	mov	r0, fp
 800a676:	f000 fbff 	bl	800ae78 <__lshift>
 800a67a:	4604      	mov	r4, r0
 800a67c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d059      	beq.n	800a736 <_dtoa_r+0x8f6>
 800a682:	4621      	mov	r1, r4
 800a684:	4648      	mov	r0, r9
 800a686:	f000 fc63 	bl	800af50 <__mcmp>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	da53      	bge.n	800a736 <_dtoa_r+0x8f6>
 800a68e:	1e7b      	subs	r3, r7, #1
 800a690:	9304      	str	r3, [sp, #16]
 800a692:	4649      	mov	r1, r9
 800a694:	2300      	movs	r3, #0
 800a696:	220a      	movs	r2, #10
 800a698:	4658      	mov	r0, fp
 800a69a:	f000 fa41 	bl	800ab20 <__multadd>
 800a69e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6a0:	4681      	mov	r9, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f000 8172 	beq.w	800a98c <_dtoa_r+0xb4c>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	4629      	mov	r1, r5
 800a6ac:	220a      	movs	r2, #10
 800a6ae:	4658      	mov	r0, fp
 800a6b0:	f000 fa36 	bl	800ab20 <__multadd>
 800a6b4:	9b00      	ldr	r3, [sp, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	4605      	mov	r5, r0
 800a6ba:	dc67      	bgt.n	800a78c <_dtoa_r+0x94c>
 800a6bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	dc41      	bgt.n	800a746 <_dtoa_r+0x906>
 800a6c2:	e063      	b.n	800a78c <_dtoa_r+0x94c>
 800a6c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a6c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a6ca:	e746      	b.n	800a55a <_dtoa_r+0x71a>
 800a6cc:	9b07      	ldr	r3, [sp, #28]
 800a6ce:	1e5c      	subs	r4, r3, #1
 800a6d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6d2:	42a3      	cmp	r3, r4
 800a6d4:	bfbf      	itttt	lt
 800a6d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a6d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a6da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a6dc:	1ae3      	sublt	r3, r4, r3
 800a6de:	bfb4      	ite	lt
 800a6e0:	18d2      	addlt	r2, r2, r3
 800a6e2:	1b1c      	subge	r4, r3, r4
 800a6e4:	9b07      	ldr	r3, [sp, #28]
 800a6e6:	bfbc      	itt	lt
 800a6e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a6ea:	2400      	movlt	r4, #0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	bfb5      	itete	lt
 800a6f0:	eba8 0603 	sublt.w	r6, r8, r3
 800a6f4:	9b07      	ldrge	r3, [sp, #28]
 800a6f6:	2300      	movlt	r3, #0
 800a6f8:	4646      	movge	r6, r8
 800a6fa:	e730      	b.n	800a55e <_dtoa_r+0x71e>
 800a6fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a6fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a700:	4646      	mov	r6, r8
 800a702:	e735      	b.n	800a570 <_dtoa_r+0x730>
 800a704:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a706:	e75c      	b.n	800a5c2 <_dtoa_r+0x782>
 800a708:	2300      	movs	r3, #0
 800a70a:	e788      	b.n	800a61e <_dtoa_r+0x7de>
 800a70c:	3fe00000 	.word	0x3fe00000
 800a710:	40240000 	.word	0x40240000
 800a714:	40140000 	.word	0x40140000
 800a718:	9b02      	ldr	r3, [sp, #8]
 800a71a:	e780      	b.n	800a61e <_dtoa_r+0x7de>
 800a71c:	2300      	movs	r3, #0
 800a71e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a720:	e782      	b.n	800a628 <_dtoa_r+0x7e8>
 800a722:	d099      	beq.n	800a658 <_dtoa_r+0x818>
 800a724:	9a08      	ldr	r2, [sp, #32]
 800a726:	331c      	adds	r3, #28
 800a728:	441a      	add	r2, r3
 800a72a:	4498      	add	r8, r3
 800a72c:	441e      	add	r6, r3
 800a72e:	9208      	str	r2, [sp, #32]
 800a730:	e792      	b.n	800a658 <_dtoa_r+0x818>
 800a732:	4603      	mov	r3, r0
 800a734:	e7f6      	b.n	800a724 <_dtoa_r+0x8e4>
 800a736:	9b07      	ldr	r3, [sp, #28]
 800a738:	9704      	str	r7, [sp, #16]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	dc20      	bgt.n	800a780 <_dtoa_r+0x940>
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a742:	2b02      	cmp	r3, #2
 800a744:	dd1e      	ble.n	800a784 <_dtoa_r+0x944>
 800a746:	9b00      	ldr	r3, [sp, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f47f aec0 	bne.w	800a4ce <_dtoa_r+0x68e>
 800a74e:	4621      	mov	r1, r4
 800a750:	2205      	movs	r2, #5
 800a752:	4658      	mov	r0, fp
 800a754:	f000 f9e4 	bl	800ab20 <__multadd>
 800a758:	4601      	mov	r1, r0
 800a75a:	4604      	mov	r4, r0
 800a75c:	4648      	mov	r0, r9
 800a75e:	f000 fbf7 	bl	800af50 <__mcmp>
 800a762:	2800      	cmp	r0, #0
 800a764:	f77f aeb3 	ble.w	800a4ce <_dtoa_r+0x68e>
 800a768:	4656      	mov	r6, sl
 800a76a:	2331      	movs	r3, #49	@ 0x31
 800a76c:	f806 3b01 	strb.w	r3, [r6], #1
 800a770:	9b04      	ldr	r3, [sp, #16]
 800a772:	3301      	adds	r3, #1
 800a774:	9304      	str	r3, [sp, #16]
 800a776:	e6ae      	b.n	800a4d6 <_dtoa_r+0x696>
 800a778:	9c07      	ldr	r4, [sp, #28]
 800a77a:	9704      	str	r7, [sp, #16]
 800a77c:	4625      	mov	r5, r4
 800a77e:	e7f3      	b.n	800a768 <_dtoa_r+0x928>
 800a780:	9b07      	ldr	r3, [sp, #28]
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a786:	2b00      	cmp	r3, #0
 800a788:	f000 8104 	beq.w	800a994 <_dtoa_r+0xb54>
 800a78c:	2e00      	cmp	r6, #0
 800a78e:	dd05      	ble.n	800a79c <_dtoa_r+0x95c>
 800a790:	4629      	mov	r1, r5
 800a792:	4632      	mov	r2, r6
 800a794:	4658      	mov	r0, fp
 800a796:	f000 fb6f 	bl	800ae78 <__lshift>
 800a79a:	4605      	mov	r5, r0
 800a79c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d05a      	beq.n	800a858 <_dtoa_r+0xa18>
 800a7a2:	6869      	ldr	r1, [r5, #4]
 800a7a4:	4658      	mov	r0, fp
 800a7a6:	f000 f959 	bl	800aa5c <_Balloc>
 800a7aa:	4606      	mov	r6, r0
 800a7ac:	b928      	cbnz	r0, 800a7ba <_dtoa_r+0x97a>
 800a7ae:	4b84      	ldr	r3, [pc, #528]	@ (800a9c0 <_dtoa_r+0xb80>)
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a7b6:	f7ff bb5a 	b.w	8009e6e <_dtoa_r+0x2e>
 800a7ba:	692a      	ldr	r2, [r5, #16]
 800a7bc:	3202      	adds	r2, #2
 800a7be:	0092      	lsls	r2, r2, #2
 800a7c0:	f105 010c 	add.w	r1, r5, #12
 800a7c4:	300c      	adds	r0, #12
 800a7c6:	f001 f8af 	bl	800b928 <memcpy>
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	4631      	mov	r1, r6
 800a7ce:	4658      	mov	r0, fp
 800a7d0:	f000 fb52 	bl	800ae78 <__lshift>
 800a7d4:	f10a 0301 	add.w	r3, sl, #1
 800a7d8:	9307      	str	r3, [sp, #28]
 800a7da:	9b00      	ldr	r3, [sp, #0]
 800a7dc:	4453      	add	r3, sl
 800a7de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7e0:	9b02      	ldr	r3, [sp, #8]
 800a7e2:	f003 0301 	and.w	r3, r3, #1
 800a7e6:	462f      	mov	r7, r5
 800a7e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7ea:	4605      	mov	r5, r0
 800a7ec:	9b07      	ldr	r3, [sp, #28]
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	3b01      	subs	r3, #1
 800a7f2:	4648      	mov	r0, r9
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	f7ff fa9a 	bl	8009d2e <quorem>
 800a7fa:	4639      	mov	r1, r7
 800a7fc:	9002      	str	r0, [sp, #8]
 800a7fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a802:	4648      	mov	r0, r9
 800a804:	f000 fba4 	bl	800af50 <__mcmp>
 800a808:	462a      	mov	r2, r5
 800a80a:	9008      	str	r0, [sp, #32]
 800a80c:	4621      	mov	r1, r4
 800a80e:	4658      	mov	r0, fp
 800a810:	f000 fbba 	bl	800af88 <__mdiff>
 800a814:	68c2      	ldr	r2, [r0, #12]
 800a816:	4606      	mov	r6, r0
 800a818:	bb02      	cbnz	r2, 800a85c <_dtoa_r+0xa1c>
 800a81a:	4601      	mov	r1, r0
 800a81c:	4648      	mov	r0, r9
 800a81e:	f000 fb97 	bl	800af50 <__mcmp>
 800a822:	4602      	mov	r2, r0
 800a824:	4631      	mov	r1, r6
 800a826:	4658      	mov	r0, fp
 800a828:	920e      	str	r2, [sp, #56]	@ 0x38
 800a82a:	f000 f957 	bl	800aadc <_Bfree>
 800a82e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a830:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a832:	9e07      	ldr	r6, [sp, #28]
 800a834:	ea43 0102 	orr.w	r1, r3, r2
 800a838:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a83a:	4319      	orrs	r1, r3
 800a83c:	d110      	bne.n	800a860 <_dtoa_r+0xa20>
 800a83e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a842:	d029      	beq.n	800a898 <_dtoa_r+0xa58>
 800a844:	9b08      	ldr	r3, [sp, #32]
 800a846:	2b00      	cmp	r3, #0
 800a848:	dd02      	ble.n	800a850 <_dtoa_r+0xa10>
 800a84a:	9b02      	ldr	r3, [sp, #8]
 800a84c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a850:	9b00      	ldr	r3, [sp, #0]
 800a852:	f883 8000 	strb.w	r8, [r3]
 800a856:	e63f      	b.n	800a4d8 <_dtoa_r+0x698>
 800a858:	4628      	mov	r0, r5
 800a85a:	e7bb      	b.n	800a7d4 <_dtoa_r+0x994>
 800a85c:	2201      	movs	r2, #1
 800a85e:	e7e1      	b.n	800a824 <_dtoa_r+0x9e4>
 800a860:	9b08      	ldr	r3, [sp, #32]
 800a862:	2b00      	cmp	r3, #0
 800a864:	db04      	blt.n	800a870 <_dtoa_r+0xa30>
 800a866:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a868:	430b      	orrs	r3, r1
 800a86a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a86c:	430b      	orrs	r3, r1
 800a86e:	d120      	bne.n	800a8b2 <_dtoa_r+0xa72>
 800a870:	2a00      	cmp	r2, #0
 800a872:	dded      	ble.n	800a850 <_dtoa_r+0xa10>
 800a874:	4649      	mov	r1, r9
 800a876:	2201      	movs	r2, #1
 800a878:	4658      	mov	r0, fp
 800a87a:	f000 fafd 	bl	800ae78 <__lshift>
 800a87e:	4621      	mov	r1, r4
 800a880:	4681      	mov	r9, r0
 800a882:	f000 fb65 	bl	800af50 <__mcmp>
 800a886:	2800      	cmp	r0, #0
 800a888:	dc03      	bgt.n	800a892 <_dtoa_r+0xa52>
 800a88a:	d1e1      	bne.n	800a850 <_dtoa_r+0xa10>
 800a88c:	f018 0f01 	tst.w	r8, #1
 800a890:	d0de      	beq.n	800a850 <_dtoa_r+0xa10>
 800a892:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a896:	d1d8      	bne.n	800a84a <_dtoa_r+0xa0a>
 800a898:	9a00      	ldr	r2, [sp, #0]
 800a89a:	2339      	movs	r3, #57	@ 0x39
 800a89c:	7013      	strb	r3, [r2, #0]
 800a89e:	4633      	mov	r3, r6
 800a8a0:	461e      	mov	r6, r3
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a8a8:	2a39      	cmp	r2, #57	@ 0x39
 800a8aa:	d052      	beq.n	800a952 <_dtoa_r+0xb12>
 800a8ac:	3201      	adds	r2, #1
 800a8ae:	701a      	strb	r2, [r3, #0]
 800a8b0:	e612      	b.n	800a4d8 <_dtoa_r+0x698>
 800a8b2:	2a00      	cmp	r2, #0
 800a8b4:	dd07      	ble.n	800a8c6 <_dtoa_r+0xa86>
 800a8b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a8ba:	d0ed      	beq.n	800a898 <_dtoa_r+0xa58>
 800a8bc:	9a00      	ldr	r2, [sp, #0]
 800a8be:	f108 0301 	add.w	r3, r8, #1
 800a8c2:	7013      	strb	r3, [r2, #0]
 800a8c4:	e608      	b.n	800a4d8 <_dtoa_r+0x698>
 800a8c6:	9b07      	ldr	r3, [sp, #28]
 800a8c8:	9a07      	ldr	r2, [sp, #28]
 800a8ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a8ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d028      	beq.n	800a926 <_dtoa_r+0xae6>
 800a8d4:	4649      	mov	r1, r9
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	220a      	movs	r2, #10
 800a8da:	4658      	mov	r0, fp
 800a8dc:	f000 f920 	bl	800ab20 <__multadd>
 800a8e0:	42af      	cmp	r7, r5
 800a8e2:	4681      	mov	r9, r0
 800a8e4:	f04f 0300 	mov.w	r3, #0
 800a8e8:	f04f 020a 	mov.w	r2, #10
 800a8ec:	4639      	mov	r1, r7
 800a8ee:	4658      	mov	r0, fp
 800a8f0:	d107      	bne.n	800a902 <_dtoa_r+0xac2>
 800a8f2:	f000 f915 	bl	800ab20 <__multadd>
 800a8f6:	4607      	mov	r7, r0
 800a8f8:	4605      	mov	r5, r0
 800a8fa:	9b07      	ldr	r3, [sp, #28]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	9307      	str	r3, [sp, #28]
 800a900:	e774      	b.n	800a7ec <_dtoa_r+0x9ac>
 800a902:	f000 f90d 	bl	800ab20 <__multadd>
 800a906:	4629      	mov	r1, r5
 800a908:	4607      	mov	r7, r0
 800a90a:	2300      	movs	r3, #0
 800a90c:	220a      	movs	r2, #10
 800a90e:	4658      	mov	r0, fp
 800a910:	f000 f906 	bl	800ab20 <__multadd>
 800a914:	4605      	mov	r5, r0
 800a916:	e7f0      	b.n	800a8fa <_dtoa_r+0xaba>
 800a918:	9b00      	ldr	r3, [sp, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	bfcc      	ite	gt
 800a91e:	461e      	movgt	r6, r3
 800a920:	2601      	movle	r6, #1
 800a922:	4456      	add	r6, sl
 800a924:	2700      	movs	r7, #0
 800a926:	4649      	mov	r1, r9
 800a928:	2201      	movs	r2, #1
 800a92a:	4658      	mov	r0, fp
 800a92c:	f000 faa4 	bl	800ae78 <__lshift>
 800a930:	4621      	mov	r1, r4
 800a932:	4681      	mov	r9, r0
 800a934:	f000 fb0c 	bl	800af50 <__mcmp>
 800a938:	2800      	cmp	r0, #0
 800a93a:	dcb0      	bgt.n	800a89e <_dtoa_r+0xa5e>
 800a93c:	d102      	bne.n	800a944 <_dtoa_r+0xb04>
 800a93e:	f018 0f01 	tst.w	r8, #1
 800a942:	d1ac      	bne.n	800a89e <_dtoa_r+0xa5e>
 800a944:	4633      	mov	r3, r6
 800a946:	461e      	mov	r6, r3
 800a948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a94c:	2a30      	cmp	r2, #48	@ 0x30
 800a94e:	d0fa      	beq.n	800a946 <_dtoa_r+0xb06>
 800a950:	e5c2      	b.n	800a4d8 <_dtoa_r+0x698>
 800a952:	459a      	cmp	sl, r3
 800a954:	d1a4      	bne.n	800a8a0 <_dtoa_r+0xa60>
 800a956:	9b04      	ldr	r3, [sp, #16]
 800a958:	3301      	adds	r3, #1
 800a95a:	9304      	str	r3, [sp, #16]
 800a95c:	2331      	movs	r3, #49	@ 0x31
 800a95e:	f88a 3000 	strb.w	r3, [sl]
 800a962:	e5b9      	b.n	800a4d8 <_dtoa_r+0x698>
 800a964:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a966:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a9c4 <_dtoa_r+0xb84>
 800a96a:	b11b      	cbz	r3, 800a974 <_dtoa_r+0xb34>
 800a96c:	f10a 0308 	add.w	r3, sl, #8
 800a970:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a972:	6013      	str	r3, [r2, #0]
 800a974:	4650      	mov	r0, sl
 800a976:	b019      	add	sp, #100	@ 0x64
 800a978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a97c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a97e:	2b01      	cmp	r3, #1
 800a980:	f77f ae37 	ble.w	800a5f2 <_dtoa_r+0x7b2>
 800a984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a986:	930a      	str	r3, [sp, #40]	@ 0x28
 800a988:	2001      	movs	r0, #1
 800a98a:	e655      	b.n	800a638 <_dtoa_r+0x7f8>
 800a98c:	9b00      	ldr	r3, [sp, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f77f aed6 	ble.w	800a740 <_dtoa_r+0x900>
 800a994:	4656      	mov	r6, sl
 800a996:	4621      	mov	r1, r4
 800a998:	4648      	mov	r0, r9
 800a99a:	f7ff f9c8 	bl	8009d2e <quorem>
 800a99e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a9a2:	f806 8b01 	strb.w	r8, [r6], #1
 800a9a6:	9b00      	ldr	r3, [sp, #0]
 800a9a8:	eba6 020a 	sub.w	r2, r6, sl
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	ddb3      	ble.n	800a918 <_dtoa_r+0xad8>
 800a9b0:	4649      	mov	r1, r9
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	220a      	movs	r2, #10
 800a9b6:	4658      	mov	r0, fp
 800a9b8:	f000 f8b2 	bl	800ab20 <__multadd>
 800a9bc:	4681      	mov	r9, r0
 800a9be:	e7ea      	b.n	800a996 <_dtoa_r+0xb56>
 800a9c0:	0800c7f4 	.word	0x0800c7f4
 800a9c4:	0800c778 	.word	0x0800c778

0800a9c8 <_free_r>:
 800a9c8:	b538      	push	{r3, r4, r5, lr}
 800a9ca:	4605      	mov	r5, r0
 800a9cc:	2900      	cmp	r1, #0
 800a9ce:	d041      	beq.n	800aa54 <_free_r+0x8c>
 800a9d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9d4:	1f0c      	subs	r4, r1, #4
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	bfb8      	it	lt
 800a9da:	18e4      	addlt	r4, r4, r3
 800a9dc:	f7fe fa8a 	bl	8008ef4 <__malloc_lock>
 800a9e0:	4a1d      	ldr	r2, [pc, #116]	@ (800aa58 <_free_r+0x90>)
 800a9e2:	6813      	ldr	r3, [r2, #0]
 800a9e4:	b933      	cbnz	r3, 800a9f4 <_free_r+0x2c>
 800a9e6:	6063      	str	r3, [r4, #4]
 800a9e8:	6014      	str	r4, [r2, #0]
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9f0:	f7fe ba86 	b.w	8008f00 <__malloc_unlock>
 800a9f4:	42a3      	cmp	r3, r4
 800a9f6:	d908      	bls.n	800aa0a <_free_r+0x42>
 800a9f8:	6820      	ldr	r0, [r4, #0]
 800a9fa:	1821      	adds	r1, r4, r0
 800a9fc:	428b      	cmp	r3, r1
 800a9fe:	bf01      	itttt	eq
 800aa00:	6819      	ldreq	r1, [r3, #0]
 800aa02:	685b      	ldreq	r3, [r3, #4]
 800aa04:	1809      	addeq	r1, r1, r0
 800aa06:	6021      	streq	r1, [r4, #0]
 800aa08:	e7ed      	b.n	800a9e6 <_free_r+0x1e>
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	b10b      	cbz	r3, 800aa14 <_free_r+0x4c>
 800aa10:	42a3      	cmp	r3, r4
 800aa12:	d9fa      	bls.n	800aa0a <_free_r+0x42>
 800aa14:	6811      	ldr	r1, [r2, #0]
 800aa16:	1850      	adds	r0, r2, r1
 800aa18:	42a0      	cmp	r0, r4
 800aa1a:	d10b      	bne.n	800aa34 <_free_r+0x6c>
 800aa1c:	6820      	ldr	r0, [r4, #0]
 800aa1e:	4401      	add	r1, r0
 800aa20:	1850      	adds	r0, r2, r1
 800aa22:	4283      	cmp	r3, r0
 800aa24:	6011      	str	r1, [r2, #0]
 800aa26:	d1e0      	bne.n	800a9ea <_free_r+0x22>
 800aa28:	6818      	ldr	r0, [r3, #0]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	6053      	str	r3, [r2, #4]
 800aa2e:	4408      	add	r0, r1
 800aa30:	6010      	str	r0, [r2, #0]
 800aa32:	e7da      	b.n	800a9ea <_free_r+0x22>
 800aa34:	d902      	bls.n	800aa3c <_free_r+0x74>
 800aa36:	230c      	movs	r3, #12
 800aa38:	602b      	str	r3, [r5, #0]
 800aa3a:	e7d6      	b.n	800a9ea <_free_r+0x22>
 800aa3c:	6820      	ldr	r0, [r4, #0]
 800aa3e:	1821      	adds	r1, r4, r0
 800aa40:	428b      	cmp	r3, r1
 800aa42:	bf04      	itt	eq
 800aa44:	6819      	ldreq	r1, [r3, #0]
 800aa46:	685b      	ldreq	r3, [r3, #4]
 800aa48:	6063      	str	r3, [r4, #4]
 800aa4a:	bf04      	itt	eq
 800aa4c:	1809      	addeq	r1, r1, r0
 800aa4e:	6021      	streq	r1, [r4, #0]
 800aa50:	6054      	str	r4, [r2, #4]
 800aa52:	e7ca      	b.n	800a9ea <_free_r+0x22>
 800aa54:	bd38      	pop	{r3, r4, r5, pc}
 800aa56:	bf00      	nop
 800aa58:	20000664 	.word	0x20000664

0800aa5c <_Balloc>:
 800aa5c:	b570      	push	{r4, r5, r6, lr}
 800aa5e:	69c6      	ldr	r6, [r0, #28]
 800aa60:	4604      	mov	r4, r0
 800aa62:	460d      	mov	r5, r1
 800aa64:	b976      	cbnz	r6, 800aa84 <_Balloc+0x28>
 800aa66:	2010      	movs	r0, #16
 800aa68:	f7fe f992 	bl	8008d90 <malloc>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	61e0      	str	r0, [r4, #28]
 800aa70:	b920      	cbnz	r0, 800aa7c <_Balloc+0x20>
 800aa72:	4b18      	ldr	r3, [pc, #96]	@ (800aad4 <_Balloc+0x78>)
 800aa74:	4818      	ldr	r0, [pc, #96]	@ (800aad8 <_Balloc+0x7c>)
 800aa76:	216b      	movs	r1, #107	@ 0x6b
 800aa78:	f000 ff64 	bl	800b944 <__assert_func>
 800aa7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa80:	6006      	str	r6, [r0, #0]
 800aa82:	60c6      	str	r6, [r0, #12]
 800aa84:	69e6      	ldr	r6, [r4, #28]
 800aa86:	68f3      	ldr	r3, [r6, #12]
 800aa88:	b183      	cbz	r3, 800aaac <_Balloc+0x50>
 800aa8a:	69e3      	ldr	r3, [r4, #28]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa92:	b9b8      	cbnz	r0, 800aac4 <_Balloc+0x68>
 800aa94:	2101      	movs	r1, #1
 800aa96:	fa01 f605 	lsl.w	r6, r1, r5
 800aa9a:	1d72      	adds	r2, r6, #5
 800aa9c:	0092      	lsls	r2, r2, #2
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f000 ff6e 	bl	800b980 <_calloc_r>
 800aaa4:	b160      	cbz	r0, 800aac0 <_Balloc+0x64>
 800aaa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aaaa:	e00e      	b.n	800aaca <_Balloc+0x6e>
 800aaac:	2221      	movs	r2, #33	@ 0x21
 800aaae:	2104      	movs	r1, #4
 800aab0:	4620      	mov	r0, r4
 800aab2:	f000 ff65 	bl	800b980 <_calloc_r>
 800aab6:	69e3      	ldr	r3, [r4, #28]
 800aab8:	60f0      	str	r0, [r6, #12]
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1e4      	bne.n	800aa8a <_Balloc+0x2e>
 800aac0:	2000      	movs	r0, #0
 800aac2:	bd70      	pop	{r4, r5, r6, pc}
 800aac4:	6802      	ldr	r2, [r0, #0]
 800aac6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aaca:	2300      	movs	r3, #0
 800aacc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aad0:	e7f7      	b.n	800aac2 <_Balloc+0x66>
 800aad2:	bf00      	nop
 800aad4:	0800c785 	.word	0x0800c785
 800aad8:	0800c805 	.word	0x0800c805

0800aadc <_Bfree>:
 800aadc:	b570      	push	{r4, r5, r6, lr}
 800aade:	69c6      	ldr	r6, [r0, #28]
 800aae0:	4605      	mov	r5, r0
 800aae2:	460c      	mov	r4, r1
 800aae4:	b976      	cbnz	r6, 800ab04 <_Bfree+0x28>
 800aae6:	2010      	movs	r0, #16
 800aae8:	f7fe f952 	bl	8008d90 <malloc>
 800aaec:	4602      	mov	r2, r0
 800aaee:	61e8      	str	r0, [r5, #28]
 800aaf0:	b920      	cbnz	r0, 800aafc <_Bfree+0x20>
 800aaf2:	4b09      	ldr	r3, [pc, #36]	@ (800ab18 <_Bfree+0x3c>)
 800aaf4:	4809      	ldr	r0, [pc, #36]	@ (800ab1c <_Bfree+0x40>)
 800aaf6:	218f      	movs	r1, #143	@ 0x8f
 800aaf8:	f000 ff24 	bl	800b944 <__assert_func>
 800aafc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab00:	6006      	str	r6, [r0, #0]
 800ab02:	60c6      	str	r6, [r0, #12]
 800ab04:	b13c      	cbz	r4, 800ab16 <_Bfree+0x3a>
 800ab06:	69eb      	ldr	r3, [r5, #28]
 800ab08:	6862      	ldr	r2, [r4, #4]
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab10:	6021      	str	r1, [r4, #0]
 800ab12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab16:	bd70      	pop	{r4, r5, r6, pc}
 800ab18:	0800c785 	.word	0x0800c785
 800ab1c:	0800c805 	.word	0x0800c805

0800ab20 <__multadd>:
 800ab20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab24:	690d      	ldr	r5, [r1, #16]
 800ab26:	4607      	mov	r7, r0
 800ab28:	460c      	mov	r4, r1
 800ab2a:	461e      	mov	r6, r3
 800ab2c:	f101 0c14 	add.w	ip, r1, #20
 800ab30:	2000      	movs	r0, #0
 800ab32:	f8dc 3000 	ldr.w	r3, [ip]
 800ab36:	b299      	uxth	r1, r3
 800ab38:	fb02 6101 	mla	r1, r2, r1, r6
 800ab3c:	0c1e      	lsrs	r6, r3, #16
 800ab3e:	0c0b      	lsrs	r3, r1, #16
 800ab40:	fb02 3306 	mla	r3, r2, r6, r3
 800ab44:	b289      	uxth	r1, r1
 800ab46:	3001      	adds	r0, #1
 800ab48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab4c:	4285      	cmp	r5, r0
 800ab4e:	f84c 1b04 	str.w	r1, [ip], #4
 800ab52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab56:	dcec      	bgt.n	800ab32 <__multadd+0x12>
 800ab58:	b30e      	cbz	r6, 800ab9e <__multadd+0x7e>
 800ab5a:	68a3      	ldr	r3, [r4, #8]
 800ab5c:	42ab      	cmp	r3, r5
 800ab5e:	dc19      	bgt.n	800ab94 <__multadd+0x74>
 800ab60:	6861      	ldr	r1, [r4, #4]
 800ab62:	4638      	mov	r0, r7
 800ab64:	3101      	adds	r1, #1
 800ab66:	f7ff ff79 	bl	800aa5c <_Balloc>
 800ab6a:	4680      	mov	r8, r0
 800ab6c:	b928      	cbnz	r0, 800ab7a <__multadd+0x5a>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	4b0c      	ldr	r3, [pc, #48]	@ (800aba4 <__multadd+0x84>)
 800ab72:	480d      	ldr	r0, [pc, #52]	@ (800aba8 <__multadd+0x88>)
 800ab74:	21ba      	movs	r1, #186	@ 0xba
 800ab76:	f000 fee5 	bl	800b944 <__assert_func>
 800ab7a:	6922      	ldr	r2, [r4, #16]
 800ab7c:	3202      	adds	r2, #2
 800ab7e:	f104 010c 	add.w	r1, r4, #12
 800ab82:	0092      	lsls	r2, r2, #2
 800ab84:	300c      	adds	r0, #12
 800ab86:	f000 fecf 	bl	800b928 <memcpy>
 800ab8a:	4621      	mov	r1, r4
 800ab8c:	4638      	mov	r0, r7
 800ab8e:	f7ff ffa5 	bl	800aadc <_Bfree>
 800ab92:	4644      	mov	r4, r8
 800ab94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab98:	3501      	adds	r5, #1
 800ab9a:	615e      	str	r6, [r3, #20]
 800ab9c:	6125      	str	r5, [r4, #16]
 800ab9e:	4620      	mov	r0, r4
 800aba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aba4:	0800c7f4 	.word	0x0800c7f4
 800aba8:	0800c805 	.word	0x0800c805

0800abac <__hi0bits>:
 800abac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800abb0:	4603      	mov	r3, r0
 800abb2:	bf36      	itet	cc
 800abb4:	0403      	lslcc	r3, r0, #16
 800abb6:	2000      	movcs	r0, #0
 800abb8:	2010      	movcc	r0, #16
 800abba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800abbe:	bf3c      	itt	cc
 800abc0:	021b      	lslcc	r3, r3, #8
 800abc2:	3008      	addcc	r0, #8
 800abc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abc8:	bf3c      	itt	cc
 800abca:	011b      	lslcc	r3, r3, #4
 800abcc:	3004      	addcc	r0, #4
 800abce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abd2:	bf3c      	itt	cc
 800abd4:	009b      	lslcc	r3, r3, #2
 800abd6:	3002      	addcc	r0, #2
 800abd8:	2b00      	cmp	r3, #0
 800abda:	db05      	blt.n	800abe8 <__hi0bits+0x3c>
 800abdc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800abe0:	f100 0001 	add.w	r0, r0, #1
 800abe4:	bf08      	it	eq
 800abe6:	2020      	moveq	r0, #32
 800abe8:	4770      	bx	lr

0800abea <__lo0bits>:
 800abea:	6803      	ldr	r3, [r0, #0]
 800abec:	4602      	mov	r2, r0
 800abee:	f013 0007 	ands.w	r0, r3, #7
 800abf2:	d00b      	beq.n	800ac0c <__lo0bits+0x22>
 800abf4:	07d9      	lsls	r1, r3, #31
 800abf6:	d421      	bmi.n	800ac3c <__lo0bits+0x52>
 800abf8:	0798      	lsls	r0, r3, #30
 800abfa:	bf49      	itett	mi
 800abfc:	085b      	lsrmi	r3, r3, #1
 800abfe:	089b      	lsrpl	r3, r3, #2
 800ac00:	2001      	movmi	r0, #1
 800ac02:	6013      	strmi	r3, [r2, #0]
 800ac04:	bf5c      	itt	pl
 800ac06:	6013      	strpl	r3, [r2, #0]
 800ac08:	2002      	movpl	r0, #2
 800ac0a:	4770      	bx	lr
 800ac0c:	b299      	uxth	r1, r3
 800ac0e:	b909      	cbnz	r1, 800ac14 <__lo0bits+0x2a>
 800ac10:	0c1b      	lsrs	r3, r3, #16
 800ac12:	2010      	movs	r0, #16
 800ac14:	b2d9      	uxtb	r1, r3
 800ac16:	b909      	cbnz	r1, 800ac1c <__lo0bits+0x32>
 800ac18:	3008      	adds	r0, #8
 800ac1a:	0a1b      	lsrs	r3, r3, #8
 800ac1c:	0719      	lsls	r1, r3, #28
 800ac1e:	bf04      	itt	eq
 800ac20:	091b      	lsreq	r3, r3, #4
 800ac22:	3004      	addeq	r0, #4
 800ac24:	0799      	lsls	r1, r3, #30
 800ac26:	bf04      	itt	eq
 800ac28:	089b      	lsreq	r3, r3, #2
 800ac2a:	3002      	addeq	r0, #2
 800ac2c:	07d9      	lsls	r1, r3, #31
 800ac2e:	d403      	bmi.n	800ac38 <__lo0bits+0x4e>
 800ac30:	085b      	lsrs	r3, r3, #1
 800ac32:	f100 0001 	add.w	r0, r0, #1
 800ac36:	d003      	beq.n	800ac40 <__lo0bits+0x56>
 800ac38:	6013      	str	r3, [r2, #0]
 800ac3a:	4770      	bx	lr
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	4770      	bx	lr
 800ac40:	2020      	movs	r0, #32
 800ac42:	4770      	bx	lr

0800ac44 <__i2b>:
 800ac44:	b510      	push	{r4, lr}
 800ac46:	460c      	mov	r4, r1
 800ac48:	2101      	movs	r1, #1
 800ac4a:	f7ff ff07 	bl	800aa5c <_Balloc>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	b928      	cbnz	r0, 800ac5e <__i2b+0x1a>
 800ac52:	4b05      	ldr	r3, [pc, #20]	@ (800ac68 <__i2b+0x24>)
 800ac54:	4805      	ldr	r0, [pc, #20]	@ (800ac6c <__i2b+0x28>)
 800ac56:	f240 1145 	movw	r1, #325	@ 0x145
 800ac5a:	f000 fe73 	bl	800b944 <__assert_func>
 800ac5e:	2301      	movs	r3, #1
 800ac60:	6144      	str	r4, [r0, #20]
 800ac62:	6103      	str	r3, [r0, #16]
 800ac64:	bd10      	pop	{r4, pc}
 800ac66:	bf00      	nop
 800ac68:	0800c7f4 	.word	0x0800c7f4
 800ac6c:	0800c805 	.word	0x0800c805

0800ac70 <__multiply>:
 800ac70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac74:	4614      	mov	r4, r2
 800ac76:	690a      	ldr	r2, [r1, #16]
 800ac78:	6923      	ldr	r3, [r4, #16]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	bfa8      	it	ge
 800ac7e:	4623      	movge	r3, r4
 800ac80:	460f      	mov	r7, r1
 800ac82:	bfa4      	itt	ge
 800ac84:	460c      	movge	r4, r1
 800ac86:	461f      	movge	r7, r3
 800ac88:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ac8c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ac90:	68a3      	ldr	r3, [r4, #8]
 800ac92:	6861      	ldr	r1, [r4, #4]
 800ac94:	eb0a 0609 	add.w	r6, sl, r9
 800ac98:	42b3      	cmp	r3, r6
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	bfb8      	it	lt
 800ac9e:	3101      	addlt	r1, #1
 800aca0:	f7ff fedc 	bl	800aa5c <_Balloc>
 800aca4:	b930      	cbnz	r0, 800acb4 <__multiply+0x44>
 800aca6:	4602      	mov	r2, r0
 800aca8:	4b44      	ldr	r3, [pc, #272]	@ (800adbc <__multiply+0x14c>)
 800acaa:	4845      	ldr	r0, [pc, #276]	@ (800adc0 <__multiply+0x150>)
 800acac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800acb0:	f000 fe48 	bl	800b944 <__assert_func>
 800acb4:	f100 0514 	add.w	r5, r0, #20
 800acb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800acbc:	462b      	mov	r3, r5
 800acbe:	2200      	movs	r2, #0
 800acc0:	4543      	cmp	r3, r8
 800acc2:	d321      	bcc.n	800ad08 <__multiply+0x98>
 800acc4:	f107 0114 	add.w	r1, r7, #20
 800acc8:	f104 0214 	add.w	r2, r4, #20
 800accc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800acd0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800acd4:	9302      	str	r3, [sp, #8]
 800acd6:	1b13      	subs	r3, r2, r4
 800acd8:	3b15      	subs	r3, #21
 800acda:	f023 0303 	bic.w	r3, r3, #3
 800acde:	3304      	adds	r3, #4
 800ace0:	f104 0715 	add.w	r7, r4, #21
 800ace4:	42ba      	cmp	r2, r7
 800ace6:	bf38      	it	cc
 800ace8:	2304      	movcc	r3, #4
 800acea:	9301      	str	r3, [sp, #4]
 800acec:	9b02      	ldr	r3, [sp, #8]
 800acee:	9103      	str	r1, [sp, #12]
 800acf0:	428b      	cmp	r3, r1
 800acf2:	d80c      	bhi.n	800ad0e <__multiply+0x9e>
 800acf4:	2e00      	cmp	r6, #0
 800acf6:	dd03      	ble.n	800ad00 <__multiply+0x90>
 800acf8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d05b      	beq.n	800adb8 <__multiply+0x148>
 800ad00:	6106      	str	r6, [r0, #16]
 800ad02:	b005      	add	sp, #20
 800ad04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad08:	f843 2b04 	str.w	r2, [r3], #4
 800ad0c:	e7d8      	b.n	800acc0 <__multiply+0x50>
 800ad0e:	f8b1 a000 	ldrh.w	sl, [r1]
 800ad12:	f1ba 0f00 	cmp.w	sl, #0
 800ad16:	d024      	beq.n	800ad62 <__multiply+0xf2>
 800ad18:	f104 0e14 	add.w	lr, r4, #20
 800ad1c:	46a9      	mov	r9, r5
 800ad1e:	f04f 0c00 	mov.w	ip, #0
 800ad22:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ad26:	f8d9 3000 	ldr.w	r3, [r9]
 800ad2a:	fa1f fb87 	uxth.w	fp, r7
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	fb0a 330b 	mla	r3, sl, fp, r3
 800ad34:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ad38:	f8d9 7000 	ldr.w	r7, [r9]
 800ad3c:	4463      	add	r3, ip
 800ad3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ad42:	fb0a c70b 	mla	r7, sl, fp, ip
 800ad46:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad50:	4572      	cmp	r2, lr
 800ad52:	f849 3b04 	str.w	r3, [r9], #4
 800ad56:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ad5a:	d8e2      	bhi.n	800ad22 <__multiply+0xb2>
 800ad5c:	9b01      	ldr	r3, [sp, #4]
 800ad5e:	f845 c003 	str.w	ip, [r5, r3]
 800ad62:	9b03      	ldr	r3, [sp, #12]
 800ad64:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ad68:	3104      	adds	r1, #4
 800ad6a:	f1b9 0f00 	cmp.w	r9, #0
 800ad6e:	d021      	beq.n	800adb4 <__multiply+0x144>
 800ad70:	682b      	ldr	r3, [r5, #0]
 800ad72:	f104 0c14 	add.w	ip, r4, #20
 800ad76:	46ae      	mov	lr, r5
 800ad78:	f04f 0a00 	mov.w	sl, #0
 800ad7c:	f8bc b000 	ldrh.w	fp, [ip]
 800ad80:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ad84:	fb09 770b 	mla	r7, r9, fp, r7
 800ad88:	4457      	add	r7, sl
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad90:	f84e 3b04 	str.w	r3, [lr], #4
 800ad94:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad9c:	f8be 3000 	ldrh.w	r3, [lr]
 800ada0:	fb09 330a 	mla	r3, r9, sl, r3
 800ada4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ada8:	4562      	cmp	r2, ip
 800adaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800adae:	d8e5      	bhi.n	800ad7c <__multiply+0x10c>
 800adb0:	9f01      	ldr	r7, [sp, #4]
 800adb2:	51eb      	str	r3, [r5, r7]
 800adb4:	3504      	adds	r5, #4
 800adb6:	e799      	b.n	800acec <__multiply+0x7c>
 800adb8:	3e01      	subs	r6, #1
 800adba:	e79b      	b.n	800acf4 <__multiply+0x84>
 800adbc:	0800c7f4 	.word	0x0800c7f4
 800adc0:	0800c805 	.word	0x0800c805

0800adc4 <__pow5mult>:
 800adc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adc8:	4615      	mov	r5, r2
 800adca:	f012 0203 	ands.w	r2, r2, #3
 800adce:	4607      	mov	r7, r0
 800add0:	460e      	mov	r6, r1
 800add2:	d007      	beq.n	800ade4 <__pow5mult+0x20>
 800add4:	4c25      	ldr	r4, [pc, #148]	@ (800ae6c <__pow5mult+0xa8>)
 800add6:	3a01      	subs	r2, #1
 800add8:	2300      	movs	r3, #0
 800adda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800adde:	f7ff fe9f 	bl	800ab20 <__multadd>
 800ade2:	4606      	mov	r6, r0
 800ade4:	10ad      	asrs	r5, r5, #2
 800ade6:	d03d      	beq.n	800ae64 <__pow5mult+0xa0>
 800ade8:	69fc      	ldr	r4, [r7, #28]
 800adea:	b97c      	cbnz	r4, 800ae0c <__pow5mult+0x48>
 800adec:	2010      	movs	r0, #16
 800adee:	f7fd ffcf 	bl	8008d90 <malloc>
 800adf2:	4602      	mov	r2, r0
 800adf4:	61f8      	str	r0, [r7, #28]
 800adf6:	b928      	cbnz	r0, 800ae04 <__pow5mult+0x40>
 800adf8:	4b1d      	ldr	r3, [pc, #116]	@ (800ae70 <__pow5mult+0xac>)
 800adfa:	481e      	ldr	r0, [pc, #120]	@ (800ae74 <__pow5mult+0xb0>)
 800adfc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ae00:	f000 fda0 	bl	800b944 <__assert_func>
 800ae04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae08:	6004      	str	r4, [r0, #0]
 800ae0a:	60c4      	str	r4, [r0, #12]
 800ae0c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ae10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae14:	b94c      	cbnz	r4, 800ae2a <__pow5mult+0x66>
 800ae16:	f240 2171 	movw	r1, #625	@ 0x271
 800ae1a:	4638      	mov	r0, r7
 800ae1c:	f7ff ff12 	bl	800ac44 <__i2b>
 800ae20:	2300      	movs	r3, #0
 800ae22:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae26:	4604      	mov	r4, r0
 800ae28:	6003      	str	r3, [r0, #0]
 800ae2a:	f04f 0900 	mov.w	r9, #0
 800ae2e:	07eb      	lsls	r3, r5, #31
 800ae30:	d50a      	bpl.n	800ae48 <__pow5mult+0x84>
 800ae32:	4631      	mov	r1, r6
 800ae34:	4622      	mov	r2, r4
 800ae36:	4638      	mov	r0, r7
 800ae38:	f7ff ff1a 	bl	800ac70 <__multiply>
 800ae3c:	4631      	mov	r1, r6
 800ae3e:	4680      	mov	r8, r0
 800ae40:	4638      	mov	r0, r7
 800ae42:	f7ff fe4b 	bl	800aadc <_Bfree>
 800ae46:	4646      	mov	r6, r8
 800ae48:	106d      	asrs	r5, r5, #1
 800ae4a:	d00b      	beq.n	800ae64 <__pow5mult+0xa0>
 800ae4c:	6820      	ldr	r0, [r4, #0]
 800ae4e:	b938      	cbnz	r0, 800ae60 <__pow5mult+0x9c>
 800ae50:	4622      	mov	r2, r4
 800ae52:	4621      	mov	r1, r4
 800ae54:	4638      	mov	r0, r7
 800ae56:	f7ff ff0b 	bl	800ac70 <__multiply>
 800ae5a:	6020      	str	r0, [r4, #0]
 800ae5c:	f8c0 9000 	str.w	r9, [r0]
 800ae60:	4604      	mov	r4, r0
 800ae62:	e7e4      	b.n	800ae2e <__pow5mult+0x6a>
 800ae64:	4630      	mov	r0, r6
 800ae66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae6a:	bf00      	nop
 800ae6c:	0800c860 	.word	0x0800c860
 800ae70:	0800c785 	.word	0x0800c785
 800ae74:	0800c805 	.word	0x0800c805

0800ae78 <__lshift>:
 800ae78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae7c:	460c      	mov	r4, r1
 800ae7e:	6849      	ldr	r1, [r1, #4]
 800ae80:	6923      	ldr	r3, [r4, #16]
 800ae82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae86:	68a3      	ldr	r3, [r4, #8]
 800ae88:	4607      	mov	r7, r0
 800ae8a:	4691      	mov	r9, r2
 800ae8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae90:	f108 0601 	add.w	r6, r8, #1
 800ae94:	42b3      	cmp	r3, r6
 800ae96:	db0b      	blt.n	800aeb0 <__lshift+0x38>
 800ae98:	4638      	mov	r0, r7
 800ae9a:	f7ff fddf 	bl	800aa5c <_Balloc>
 800ae9e:	4605      	mov	r5, r0
 800aea0:	b948      	cbnz	r0, 800aeb6 <__lshift+0x3e>
 800aea2:	4602      	mov	r2, r0
 800aea4:	4b28      	ldr	r3, [pc, #160]	@ (800af48 <__lshift+0xd0>)
 800aea6:	4829      	ldr	r0, [pc, #164]	@ (800af4c <__lshift+0xd4>)
 800aea8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aeac:	f000 fd4a 	bl	800b944 <__assert_func>
 800aeb0:	3101      	adds	r1, #1
 800aeb2:	005b      	lsls	r3, r3, #1
 800aeb4:	e7ee      	b.n	800ae94 <__lshift+0x1c>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	f100 0114 	add.w	r1, r0, #20
 800aebc:	f100 0210 	add.w	r2, r0, #16
 800aec0:	4618      	mov	r0, r3
 800aec2:	4553      	cmp	r3, sl
 800aec4:	db33      	blt.n	800af2e <__lshift+0xb6>
 800aec6:	6920      	ldr	r0, [r4, #16]
 800aec8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aecc:	f104 0314 	add.w	r3, r4, #20
 800aed0:	f019 091f 	ands.w	r9, r9, #31
 800aed4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aed8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aedc:	d02b      	beq.n	800af36 <__lshift+0xbe>
 800aede:	f1c9 0e20 	rsb	lr, r9, #32
 800aee2:	468a      	mov	sl, r1
 800aee4:	2200      	movs	r2, #0
 800aee6:	6818      	ldr	r0, [r3, #0]
 800aee8:	fa00 f009 	lsl.w	r0, r0, r9
 800aeec:	4310      	orrs	r0, r2
 800aeee:	f84a 0b04 	str.w	r0, [sl], #4
 800aef2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aef6:	459c      	cmp	ip, r3
 800aef8:	fa22 f20e 	lsr.w	r2, r2, lr
 800aefc:	d8f3      	bhi.n	800aee6 <__lshift+0x6e>
 800aefe:	ebac 0304 	sub.w	r3, ip, r4
 800af02:	3b15      	subs	r3, #21
 800af04:	f023 0303 	bic.w	r3, r3, #3
 800af08:	3304      	adds	r3, #4
 800af0a:	f104 0015 	add.w	r0, r4, #21
 800af0e:	4584      	cmp	ip, r0
 800af10:	bf38      	it	cc
 800af12:	2304      	movcc	r3, #4
 800af14:	50ca      	str	r2, [r1, r3]
 800af16:	b10a      	cbz	r2, 800af1c <__lshift+0xa4>
 800af18:	f108 0602 	add.w	r6, r8, #2
 800af1c:	3e01      	subs	r6, #1
 800af1e:	4638      	mov	r0, r7
 800af20:	612e      	str	r6, [r5, #16]
 800af22:	4621      	mov	r1, r4
 800af24:	f7ff fdda 	bl	800aadc <_Bfree>
 800af28:	4628      	mov	r0, r5
 800af2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af2e:	f842 0f04 	str.w	r0, [r2, #4]!
 800af32:	3301      	adds	r3, #1
 800af34:	e7c5      	b.n	800aec2 <__lshift+0x4a>
 800af36:	3904      	subs	r1, #4
 800af38:	f853 2b04 	ldr.w	r2, [r3], #4
 800af3c:	f841 2f04 	str.w	r2, [r1, #4]!
 800af40:	459c      	cmp	ip, r3
 800af42:	d8f9      	bhi.n	800af38 <__lshift+0xc0>
 800af44:	e7ea      	b.n	800af1c <__lshift+0xa4>
 800af46:	bf00      	nop
 800af48:	0800c7f4 	.word	0x0800c7f4
 800af4c:	0800c805 	.word	0x0800c805

0800af50 <__mcmp>:
 800af50:	690a      	ldr	r2, [r1, #16]
 800af52:	4603      	mov	r3, r0
 800af54:	6900      	ldr	r0, [r0, #16]
 800af56:	1a80      	subs	r0, r0, r2
 800af58:	b530      	push	{r4, r5, lr}
 800af5a:	d10e      	bne.n	800af7a <__mcmp+0x2a>
 800af5c:	3314      	adds	r3, #20
 800af5e:	3114      	adds	r1, #20
 800af60:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800af64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800af68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af70:	4295      	cmp	r5, r2
 800af72:	d003      	beq.n	800af7c <__mcmp+0x2c>
 800af74:	d205      	bcs.n	800af82 <__mcmp+0x32>
 800af76:	f04f 30ff 	mov.w	r0, #4294967295
 800af7a:	bd30      	pop	{r4, r5, pc}
 800af7c:	42a3      	cmp	r3, r4
 800af7e:	d3f3      	bcc.n	800af68 <__mcmp+0x18>
 800af80:	e7fb      	b.n	800af7a <__mcmp+0x2a>
 800af82:	2001      	movs	r0, #1
 800af84:	e7f9      	b.n	800af7a <__mcmp+0x2a>
	...

0800af88 <__mdiff>:
 800af88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	4689      	mov	r9, r1
 800af8e:	4606      	mov	r6, r0
 800af90:	4611      	mov	r1, r2
 800af92:	4648      	mov	r0, r9
 800af94:	4614      	mov	r4, r2
 800af96:	f7ff ffdb 	bl	800af50 <__mcmp>
 800af9a:	1e05      	subs	r5, r0, #0
 800af9c:	d112      	bne.n	800afc4 <__mdiff+0x3c>
 800af9e:	4629      	mov	r1, r5
 800afa0:	4630      	mov	r0, r6
 800afa2:	f7ff fd5b 	bl	800aa5c <_Balloc>
 800afa6:	4602      	mov	r2, r0
 800afa8:	b928      	cbnz	r0, 800afb6 <__mdiff+0x2e>
 800afaa:	4b3f      	ldr	r3, [pc, #252]	@ (800b0a8 <__mdiff+0x120>)
 800afac:	f240 2137 	movw	r1, #567	@ 0x237
 800afb0:	483e      	ldr	r0, [pc, #248]	@ (800b0ac <__mdiff+0x124>)
 800afb2:	f000 fcc7 	bl	800b944 <__assert_func>
 800afb6:	2301      	movs	r3, #1
 800afb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800afbc:	4610      	mov	r0, r2
 800afbe:	b003      	add	sp, #12
 800afc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc4:	bfbc      	itt	lt
 800afc6:	464b      	movlt	r3, r9
 800afc8:	46a1      	movlt	r9, r4
 800afca:	4630      	mov	r0, r6
 800afcc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800afd0:	bfba      	itte	lt
 800afd2:	461c      	movlt	r4, r3
 800afd4:	2501      	movlt	r5, #1
 800afd6:	2500      	movge	r5, #0
 800afd8:	f7ff fd40 	bl	800aa5c <_Balloc>
 800afdc:	4602      	mov	r2, r0
 800afde:	b918      	cbnz	r0, 800afe8 <__mdiff+0x60>
 800afe0:	4b31      	ldr	r3, [pc, #196]	@ (800b0a8 <__mdiff+0x120>)
 800afe2:	f240 2145 	movw	r1, #581	@ 0x245
 800afe6:	e7e3      	b.n	800afb0 <__mdiff+0x28>
 800afe8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800afec:	6926      	ldr	r6, [r4, #16]
 800afee:	60c5      	str	r5, [r0, #12]
 800aff0:	f109 0310 	add.w	r3, r9, #16
 800aff4:	f109 0514 	add.w	r5, r9, #20
 800aff8:	f104 0e14 	add.w	lr, r4, #20
 800affc:	f100 0b14 	add.w	fp, r0, #20
 800b000:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b004:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b008:	9301      	str	r3, [sp, #4]
 800b00a:	46d9      	mov	r9, fp
 800b00c:	f04f 0c00 	mov.w	ip, #0
 800b010:	9b01      	ldr	r3, [sp, #4]
 800b012:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b016:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b01a:	9301      	str	r3, [sp, #4]
 800b01c:	fa1f f38a 	uxth.w	r3, sl
 800b020:	4619      	mov	r1, r3
 800b022:	b283      	uxth	r3, r0
 800b024:	1acb      	subs	r3, r1, r3
 800b026:	0c00      	lsrs	r0, r0, #16
 800b028:	4463      	add	r3, ip
 800b02a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b02e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b032:	b29b      	uxth	r3, r3
 800b034:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b038:	4576      	cmp	r6, lr
 800b03a:	f849 3b04 	str.w	r3, [r9], #4
 800b03e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b042:	d8e5      	bhi.n	800b010 <__mdiff+0x88>
 800b044:	1b33      	subs	r3, r6, r4
 800b046:	3b15      	subs	r3, #21
 800b048:	f023 0303 	bic.w	r3, r3, #3
 800b04c:	3415      	adds	r4, #21
 800b04e:	3304      	adds	r3, #4
 800b050:	42a6      	cmp	r6, r4
 800b052:	bf38      	it	cc
 800b054:	2304      	movcc	r3, #4
 800b056:	441d      	add	r5, r3
 800b058:	445b      	add	r3, fp
 800b05a:	461e      	mov	r6, r3
 800b05c:	462c      	mov	r4, r5
 800b05e:	4544      	cmp	r4, r8
 800b060:	d30e      	bcc.n	800b080 <__mdiff+0xf8>
 800b062:	f108 0103 	add.w	r1, r8, #3
 800b066:	1b49      	subs	r1, r1, r5
 800b068:	f021 0103 	bic.w	r1, r1, #3
 800b06c:	3d03      	subs	r5, #3
 800b06e:	45a8      	cmp	r8, r5
 800b070:	bf38      	it	cc
 800b072:	2100      	movcc	r1, #0
 800b074:	440b      	add	r3, r1
 800b076:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b07a:	b191      	cbz	r1, 800b0a2 <__mdiff+0x11a>
 800b07c:	6117      	str	r7, [r2, #16]
 800b07e:	e79d      	b.n	800afbc <__mdiff+0x34>
 800b080:	f854 1b04 	ldr.w	r1, [r4], #4
 800b084:	46e6      	mov	lr, ip
 800b086:	0c08      	lsrs	r0, r1, #16
 800b088:	fa1c fc81 	uxtah	ip, ip, r1
 800b08c:	4471      	add	r1, lr
 800b08e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b092:	b289      	uxth	r1, r1
 800b094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b098:	f846 1b04 	str.w	r1, [r6], #4
 800b09c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b0a0:	e7dd      	b.n	800b05e <__mdiff+0xd6>
 800b0a2:	3f01      	subs	r7, #1
 800b0a4:	e7e7      	b.n	800b076 <__mdiff+0xee>
 800b0a6:	bf00      	nop
 800b0a8:	0800c7f4 	.word	0x0800c7f4
 800b0ac:	0800c805 	.word	0x0800c805

0800b0b0 <__d2b>:
 800b0b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0b4:	460f      	mov	r7, r1
 800b0b6:	2101      	movs	r1, #1
 800b0b8:	ec59 8b10 	vmov	r8, r9, d0
 800b0bc:	4616      	mov	r6, r2
 800b0be:	f7ff fccd 	bl	800aa5c <_Balloc>
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	b930      	cbnz	r0, 800b0d4 <__d2b+0x24>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	4b23      	ldr	r3, [pc, #140]	@ (800b158 <__d2b+0xa8>)
 800b0ca:	4824      	ldr	r0, [pc, #144]	@ (800b15c <__d2b+0xac>)
 800b0cc:	f240 310f 	movw	r1, #783	@ 0x30f
 800b0d0:	f000 fc38 	bl	800b944 <__assert_func>
 800b0d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b0d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0dc:	b10d      	cbz	r5, 800b0e2 <__d2b+0x32>
 800b0de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b0e2:	9301      	str	r3, [sp, #4]
 800b0e4:	f1b8 0300 	subs.w	r3, r8, #0
 800b0e8:	d023      	beq.n	800b132 <__d2b+0x82>
 800b0ea:	4668      	mov	r0, sp
 800b0ec:	9300      	str	r3, [sp, #0]
 800b0ee:	f7ff fd7c 	bl	800abea <__lo0bits>
 800b0f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b0f6:	b1d0      	cbz	r0, 800b12e <__d2b+0x7e>
 800b0f8:	f1c0 0320 	rsb	r3, r0, #32
 800b0fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b100:	430b      	orrs	r3, r1
 800b102:	40c2      	lsrs	r2, r0
 800b104:	6163      	str	r3, [r4, #20]
 800b106:	9201      	str	r2, [sp, #4]
 800b108:	9b01      	ldr	r3, [sp, #4]
 800b10a:	61a3      	str	r3, [r4, #24]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	bf0c      	ite	eq
 800b110:	2201      	moveq	r2, #1
 800b112:	2202      	movne	r2, #2
 800b114:	6122      	str	r2, [r4, #16]
 800b116:	b1a5      	cbz	r5, 800b142 <__d2b+0x92>
 800b118:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b11c:	4405      	add	r5, r0
 800b11e:	603d      	str	r5, [r7, #0]
 800b120:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b124:	6030      	str	r0, [r6, #0]
 800b126:	4620      	mov	r0, r4
 800b128:	b003      	add	sp, #12
 800b12a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b12e:	6161      	str	r1, [r4, #20]
 800b130:	e7ea      	b.n	800b108 <__d2b+0x58>
 800b132:	a801      	add	r0, sp, #4
 800b134:	f7ff fd59 	bl	800abea <__lo0bits>
 800b138:	9b01      	ldr	r3, [sp, #4]
 800b13a:	6163      	str	r3, [r4, #20]
 800b13c:	3020      	adds	r0, #32
 800b13e:	2201      	movs	r2, #1
 800b140:	e7e8      	b.n	800b114 <__d2b+0x64>
 800b142:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b146:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b14a:	6038      	str	r0, [r7, #0]
 800b14c:	6918      	ldr	r0, [r3, #16]
 800b14e:	f7ff fd2d 	bl	800abac <__hi0bits>
 800b152:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b156:	e7e5      	b.n	800b124 <__d2b+0x74>
 800b158:	0800c7f4 	.word	0x0800c7f4
 800b15c:	0800c805 	.word	0x0800c805

0800b160 <__ssputs_r>:
 800b160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b164:	688e      	ldr	r6, [r1, #8]
 800b166:	461f      	mov	r7, r3
 800b168:	42be      	cmp	r6, r7
 800b16a:	680b      	ldr	r3, [r1, #0]
 800b16c:	4682      	mov	sl, r0
 800b16e:	460c      	mov	r4, r1
 800b170:	4690      	mov	r8, r2
 800b172:	d82d      	bhi.n	800b1d0 <__ssputs_r+0x70>
 800b174:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b178:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b17c:	d026      	beq.n	800b1cc <__ssputs_r+0x6c>
 800b17e:	6965      	ldr	r5, [r4, #20]
 800b180:	6909      	ldr	r1, [r1, #16]
 800b182:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b186:	eba3 0901 	sub.w	r9, r3, r1
 800b18a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b18e:	1c7b      	adds	r3, r7, #1
 800b190:	444b      	add	r3, r9
 800b192:	106d      	asrs	r5, r5, #1
 800b194:	429d      	cmp	r5, r3
 800b196:	bf38      	it	cc
 800b198:	461d      	movcc	r5, r3
 800b19a:	0553      	lsls	r3, r2, #21
 800b19c:	d527      	bpl.n	800b1ee <__ssputs_r+0x8e>
 800b19e:	4629      	mov	r1, r5
 800b1a0:	f7fd fe28 	bl	8008df4 <_malloc_r>
 800b1a4:	4606      	mov	r6, r0
 800b1a6:	b360      	cbz	r0, 800b202 <__ssputs_r+0xa2>
 800b1a8:	6921      	ldr	r1, [r4, #16]
 800b1aa:	464a      	mov	r2, r9
 800b1ac:	f000 fbbc 	bl	800b928 <memcpy>
 800b1b0:	89a3      	ldrh	r3, [r4, #12]
 800b1b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b1b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1ba:	81a3      	strh	r3, [r4, #12]
 800b1bc:	6126      	str	r6, [r4, #16]
 800b1be:	6165      	str	r5, [r4, #20]
 800b1c0:	444e      	add	r6, r9
 800b1c2:	eba5 0509 	sub.w	r5, r5, r9
 800b1c6:	6026      	str	r6, [r4, #0]
 800b1c8:	60a5      	str	r5, [r4, #8]
 800b1ca:	463e      	mov	r6, r7
 800b1cc:	42be      	cmp	r6, r7
 800b1ce:	d900      	bls.n	800b1d2 <__ssputs_r+0x72>
 800b1d0:	463e      	mov	r6, r7
 800b1d2:	6820      	ldr	r0, [r4, #0]
 800b1d4:	4632      	mov	r2, r6
 800b1d6:	4641      	mov	r1, r8
 800b1d8:	f000 fb6a 	bl	800b8b0 <memmove>
 800b1dc:	68a3      	ldr	r3, [r4, #8]
 800b1de:	1b9b      	subs	r3, r3, r6
 800b1e0:	60a3      	str	r3, [r4, #8]
 800b1e2:	6823      	ldr	r3, [r4, #0]
 800b1e4:	4433      	add	r3, r6
 800b1e6:	6023      	str	r3, [r4, #0]
 800b1e8:	2000      	movs	r0, #0
 800b1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ee:	462a      	mov	r2, r5
 800b1f0:	f000 fbec 	bl	800b9cc <_realloc_r>
 800b1f4:	4606      	mov	r6, r0
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	d1e0      	bne.n	800b1bc <__ssputs_r+0x5c>
 800b1fa:	6921      	ldr	r1, [r4, #16]
 800b1fc:	4650      	mov	r0, sl
 800b1fe:	f7ff fbe3 	bl	800a9c8 <_free_r>
 800b202:	230c      	movs	r3, #12
 800b204:	f8ca 3000 	str.w	r3, [sl]
 800b208:	89a3      	ldrh	r3, [r4, #12]
 800b20a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b20e:	81a3      	strh	r3, [r4, #12]
 800b210:	f04f 30ff 	mov.w	r0, #4294967295
 800b214:	e7e9      	b.n	800b1ea <__ssputs_r+0x8a>
	...

0800b218 <_svfiprintf_r>:
 800b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21c:	4698      	mov	r8, r3
 800b21e:	898b      	ldrh	r3, [r1, #12]
 800b220:	061b      	lsls	r3, r3, #24
 800b222:	b09d      	sub	sp, #116	@ 0x74
 800b224:	4607      	mov	r7, r0
 800b226:	460d      	mov	r5, r1
 800b228:	4614      	mov	r4, r2
 800b22a:	d510      	bpl.n	800b24e <_svfiprintf_r+0x36>
 800b22c:	690b      	ldr	r3, [r1, #16]
 800b22e:	b973      	cbnz	r3, 800b24e <_svfiprintf_r+0x36>
 800b230:	2140      	movs	r1, #64	@ 0x40
 800b232:	f7fd fddf 	bl	8008df4 <_malloc_r>
 800b236:	6028      	str	r0, [r5, #0]
 800b238:	6128      	str	r0, [r5, #16]
 800b23a:	b930      	cbnz	r0, 800b24a <_svfiprintf_r+0x32>
 800b23c:	230c      	movs	r3, #12
 800b23e:	603b      	str	r3, [r7, #0]
 800b240:	f04f 30ff 	mov.w	r0, #4294967295
 800b244:	b01d      	add	sp, #116	@ 0x74
 800b246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b24a:	2340      	movs	r3, #64	@ 0x40
 800b24c:	616b      	str	r3, [r5, #20]
 800b24e:	2300      	movs	r3, #0
 800b250:	9309      	str	r3, [sp, #36]	@ 0x24
 800b252:	2320      	movs	r3, #32
 800b254:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b258:	f8cd 800c 	str.w	r8, [sp, #12]
 800b25c:	2330      	movs	r3, #48	@ 0x30
 800b25e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b3fc <_svfiprintf_r+0x1e4>
 800b262:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b266:	f04f 0901 	mov.w	r9, #1
 800b26a:	4623      	mov	r3, r4
 800b26c:	469a      	mov	sl, r3
 800b26e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b272:	b10a      	cbz	r2, 800b278 <_svfiprintf_r+0x60>
 800b274:	2a25      	cmp	r2, #37	@ 0x25
 800b276:	d1f9      	bne.n	800b26c <_svfiprintf_r+0x54>
 800b278:	ebba 0b04 	subs.w	fp, sl, r4
 800b27c:	d00b      	beq.n	800b296 <_svfiprintf_r+0x7e>
 800b27e:	465b      	mov	r3, fp
 800b280:	4622      	mov	r2, r4
 800b282:	4629      	mov	r1, r5
 800b284:	4638      	mov	r0, r7
 800b286:	f7ff ff6b 	bl	800b160 <__ssputs_r>
 800b28a:	3001      	adds	r0, #1
 800b28c:	f000 80a7 	beq.w	800b3de <_svfiprintf_r+0x1c6>
 800b290:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b292:	445a      	add	r2, fp
 800b294:	9209      	str	r2, [sp, #36]	@ 0x24
 800b296:	f89a 3000 	ldrb.w	r3, [sl]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f000 809f 	beq.w	800b3de <_svfiprintf_r+0x1c6>
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2aa:	f10a 0a01 	add.w	sl, sl, #1
 800b2ae:	9304      	str	r3, [sp, #16]
 800b2b0:	9307      	str	r3, [sp, #28]
 800b2b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b2b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2b8:	4654      	mov	r4, sl
 800b2ba:	2205      	movs	r2, #5
 800b2bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2c0:	484e      	ldr	r0, [pc, #312]	@ (800b3fc <_svfiprintf_r+0x1e4>)
 800b2c2:	f7f4 ffad 	bl	8000220 <memchr>
 800b2c6:	9a04      	ldr	r2, [sp, #16]
 800b2c8:	b9d8      	cbnz	r0, 800b302 <_svfiprintf_r+0xea>
 800b2ca:	06d0      	lsls	r0, r2, #27
 800b2cc:	bf44      	itt	mi
 800b2ce:	2320      	movmi	r3, #32
 800b2d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2d4:	0711      	lsls	r1, r2, #28
 800b2d6:	bf44      	itt	mi
 800b2d8:	232b      	movmi	r3, #43	@ 0x2b
 800b2da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2de:	f89a 3000 	ldrb.w	r3, [sl]
 800b2e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2e4:	d015      	beq.n	800b312 <_svfiprintf_r+0xfa>
 800b2e6:	9a07      	ldr	r2, [sp, #28]
 800b2e8:	4654      	mov	r4, sl
 800b2ea:	2000      	movs	r0, #0
 800b2ec:	f04f 0c0a 	mov.w	ip, #10
 800b2f0:	4621      	mov	r1, r4
 800b2f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2f6:	3b30      	subs	r3, #48	@ 0x30
 800b2f8:	2b09      	cmp	r3, #9
 800b2fa:	d94b      	bls.n	800b394 <_svfiprintf_r+0x17c>
 800b2fc:	b1b0      	cbz	r0, 800b32c <_svfiprintf_r+0x114>
 800b2fe:	9207      	str	r2, [sp, #28]
 800b300:	e014      	b.n	800b32c <_svfiprintf_r+0x114>
 800b302:	eba0 0308 	sub.w	r3, r0, r8
 800b306:	fa09 f303 	lsl.w	r3, r9, r3
 800b30a:	4313      	orrs	r3, r2
 800b30c:	9304      	str	r3, [sp, #16]
 800b30e:	46a2      	mov	sl, r4
 800b310:	e7d2      	b.n	800b2b8 <_svfiprintf_r+0xa0>
 800b312:	9b03      	ldr	r3, [sp, #12]
 800b314:	1d19      	adds	r1, r3, #4
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	9103      	str	r1, [sp, #12]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	bfbb      	ittet	lt
 800b31e:	425b      	neglt	r3, r3
 800b320:	f042 0202 	orrlt.w	r2, r2, #2
 800b324:	9307      	strge	r3, [sp, #28]
 800b326:	9307      	strlt	r3, [sp, #28]
 800b328:	bfb8      	it	lt
 800b32a:	9204      	strlt	r2, [sp, #16]
 800b32c:	7823      	ldrb	r3, [r4, #0]
 800b32e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b330:	d10a      	bne.n	800b348 <_svfiprintf_r+0x130>
 800b332:	7863      	ldrb	r3, [r4, #1]
 800b334:	2b2a      	cmp	r3, #42	@ 0x2a
 800b336:	d132      	bne.n	800b39e <_svfiprintf_r+0x186>
 800b338:	9b03      	ldr	r3, [sp, #12]
 800b33a:	1d1a      	adds	r2, r3, #4
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	9203      	str	r2, [sp, #12]
 800b340:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b344:	3402      	adds	r4, #2
 800b346:	9305      	str	r3, [sp, #20]
 800b348:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b40c <_svfiprintf_r+0x1f4>
 800b34c:	7821      	ldrb	r1, [r4, #0]
 800b34e:	2203      	movs	r2, #3
 800b350:	4650      	mov	r0, sl
 800b352:	f7f4 ff65 	bl	8000220 <memchr>
 800b356:	b138      	cbz	r0, 800b368 <_svfiprintf_r+0x150>
 800b358:	9b04      	ldr	r3, [sp, #16]
 800b35a:	eba0 000a 	sub.w	r0, r0, sl
 800b35e:	2240      	movs	r2, #64	@ 0x40
 800b360:	4082      	lsls	r2, r0
 800b362:	4313      	orrs	r3, r2
 800b364:	3401      	adds	r4, #1
 800b366:	9304      	str	r3, [sp, #16]
 800b368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b36c:	4824      	ldr	r0, [pc, #144]	@ (800b400 <_svfiprintf_r+0x1e8>)
 800b36e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b372:	2206      	movs	r2, #6
 800b374:	f7f4 ff54 	bl	8000220 <memchr>
 800b378:	2800      	cmp	r0, #0
 800b37a:	d036      	beq.n	800b3ea <_svfiprintf_r+0x1d2>
 800b37c:	4b21      	ldr	r3, [pc, #132]	@ (800b404 <_svfiprintf_r+0x1ec>)
 800b37e:	bb1b      	cbnz	r3, 800b3c8 <_svfiprintf_r+0x1b0>
 800b380:	9b03      	ldr	r3, [sp, #12]
 800b382:	3307      	adds	r3, #7
 800b384:	f023 0307 	bic.w	r3, r3, #7
 800b388:	3308      	adds	r3, #8
 800b38a:	9303      	str	r3, [sp, #12]
 800b38c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b38e:	4433      	add	r3, r6
 800b390:	9309      	str	r3, [sp, #36]	@ 0x24
 800b392:	e76a      	b.n	800b26a <_svfiprintf_r+0x52>
 800b394:	fb0c 3202 	mla	r2, ip, r2, r3
 800b398:	460c      	mov	r4, r1
 800b39a:	2001      	movs	r0, #1
 800b39c:	e7a8      	b.n	800b2f0 <_svfiprintf_r+0xd8>
 800b39e:	2300      	movs	r3, #0
 800b3a0:	3401      	adds	r4, #1
 800b3a2:	9305      	str	r3, [sp, #20]
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	f04f 0c0a 	mov.w	ip, #10
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3b0:	3a30      	subs	r2, #48	@ 0x30
 800b3b2:	2a09      	cmp	r2, #9
 800b3b4:	d903      	bls.n	800b3be <_svfiprintf_r+0x1a6>
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d0c6      	beq.n	800b348 <_svfiprintf_r+0x130>
 800b3ba:	9105      	str	r1, [sp, #20]
 800b3bc:	e7c4      	b.n	800b348 <_svfiprintf_r+0x130>
 800b3be:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e7f0      	b.n	800b3aa <_svfiprintf_r+0x192>
 800b3c8:	ab03      	add	r3, sp, #12
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	462a      	mov	r2, r5
 800b3ce:	4b0e      	ldr	r3, [pc, #56]	@ (800b408 <_svfiprintf_r+0x1f0>)
 800b3d0:	a904      	add	r1, sp, #16
 800b3d2:	4638      	mov	r0, r7
 800b3d4:	f7fd fe3a 	bl	800904c <_printf_float>
 800b3d8:	1c42      	adds	r2, r0, #1
 800b3da:	4606      	mov	r6, r0
 800b3dc:	d1d6      	bne.n	800b38c <_svfiprintf_r+0x174>
 800b3de:	89ab      	ldrh	r3, [r5, #12]
 800b3e0:	065b      	lsls	r3, r3, #25
 800b3e2:	f53f af2d 	bmi.w	800b240 <_svfiprintf_r+0x28>
 800b3e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b3e8:	e72c      	b.n	800b244 <_svfiprintf_r+0x2c>
 800b3ea:	ab03      	add	r3, sp, #12
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	462a      	mov	r2, r5
 800b3f0:	4b05      	ldr	r3, [pc, #20]	@ (800b408 <_svfiprintf_r+0x1f0>)
 800b3f2:	a904      	add	r1, sp, #16
 800b3f4:	4638      	mov	r0, r7
 800b3f6:	f7fe f8c1 	bl	800957c <_printf_i>
 800b3fa:	e7ed      	b.n	800b3d8 <_svfiprintf_r+0x1c0>
 800b3fc:	0800c960 	.word	0x0800c960
 800b400:	0800c96a 	.word	0x0800c96a
 800b404:	0800904d 	.word	0x0800904d
 800b408:	0800b161 	.word	0x0800b161
 800b40c:	0800c966 	.word	0x0800c966

0800b410 <__sfputc_r>:
 800b410:	6893      	ldr	r3, [r2, #8]
 800b412:	3b01      	subs	r3, #1
 800b414:	2b00      	cmp	r3, #0
 800b416:	b410      	push	{r4}
 800b418:	6093      	str	r3, [r2, #8]
 800b41a:	da08      	bge.n	800b42e <__sfputc_r+0x1e>
 800b41c:	6994      	ldr	r4, [r2, #24]
 800b41e:	42a3      	cmp	r3, r4
 800b420:	db01      	blt.n	800b426 <__sfputc_r+0x16>
 800b422:	290a      	cmp	r1, #10
 800b424:	d103      	bne.n	800b42e <__sfputc_r+0x1e>
 800b426:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b42a:	f7fe bb5c 	b.w	8009ae6 <__swbuf_r>
 800b42e:	6813      	ldr	r3, [r2, #0]
 800b430:	1c58      	adds	r0, r3, #1
 800b432:	6010      	str	r0, [r2, #0]
 800b434:	7019      	strb	r1, [r3, #0]
 800b436:	4608      	mov	r0, r1
 800b438:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b43c:	4770      	bx	lr

0800b43e <__sfputs_r>:
 800b43e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b440:	4606      	mov	r6, r0
 800b442:	460f      	mov	r7, r1
 800b444:	4614      	mov	r4, r2
 800b446:	18d5      	adds	r5, r2, r3
 800b448:	42ac      	cmp	r4, r5
 800b44a:	d101      	bne.n	800b450 <__sfputs_r+0x12>
 800b44c:	2000      	movs	r0, #0
 800b44e:	e007      	b.n	800b460 <__sfputs_r+0x22>
 800b450:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b454:	463a      	mov	r2, r7
 800b456:	4630      	mov	r0, r6
 800b458:	f7ff ffda 	bl	800b410 <__sfputc_r>
 800b45c:	1c43      	adds	r3, r0, #1
 800b45e:	d1f3      	bne.n	800b448 <__sfputs_r+0xa>
 800b460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b464 <_vfiprintf_r>:
 800b464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b468:	460d      	mov	r5, r1
 800b46a:	b09d      	sub	sp, #116	@ 0x74
 800b46c:	4614      	mov	r4, r2
 800b46e:	4698      	mov	r8, r3
 800b470:	4606      	mov	r6, r0
 800b472:	b118      	cbz	r0, 800b47c <_vfiprintf_r+0x18>
 800b474:	6a03      	ldr	r3, [r0, #32]
 800b476:	b90b      	cbnz	r3, 800b47c <_vfiprintf_r+0x18>
 800b478:	f7fe fa2c 	bl	80098d4 <__sinit>
 800b47c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b47e:	07d9      	lsls	r1, r3, #31
 800b480:	d405      	bmi.n	800b48e <_vfiprintf_r+0x2a>
 800b482:	89ab      	ldrh	r3, [r5, #12]
 800b484:	059a      	lsls	r2, r3, #22
 800b486:	d402      	bmi.n	800b48e <_vfiprintf_r+0x2a>
 800b488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b48a:	f7fe fc4e 	bl	8009d2a <__retarget_lock_acquire_recursive>
 800b48e:	89ab      	ldrh	r3, [r5, #12]
 800b490:	071b      	lsls	r3, r3, #28
 800b492:	d501      	bpl.n	800b498 <_vfiprintf_r+0x34>
 800b494:	692b      	ldr	r3, [r5, #16]
 800b496:	b99b      	cbnz	r3, 800b4c0 <_vfiprintf_r+0x5c>
 800b498:	4629      	mov	r1, r5
 800b49a:	4630      	mov	r0, r6
 800b49c:	f7fe fb62 	bl	8009b64 <__swsetup_r>
 800b4a0:	b170      	cbz	r0, 800b4c0 <_vfiprintf_r+0x5c>
 800b4a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4a4:	07dc      	lsls	r4, r3, #31
 800b4a6:	d504      	bpl.n	800b4b2 <_vfiprintf_r+0x4e>
 800b4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ac:	b01d      	add	sp, #116	@ 0x74
 800b4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b2:	89ab      	ldrh	r3, [r5, #12]
 800b4b4:	0598      	lsls	r0, r3, #22
 800b4b6:	d4f7      	bmi.n	800b4a8 <_vfiprintf_r+0x44>
 800b4b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4ba:	f7fe fc37 	bl	8009d2c <__retarget_lock_release_recursive>
 800b4be:	e7f3      	b.n	800b4a8 <_vfiprintf_r+0x44>
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4c4:	2320      	movs	r3, #32
 800b4c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b4ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4ce:	2330      	movs	r3, #48	@ 0x30
 800b4d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b680 <_vfiprintf_r+0x21c>
 800b4d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4d8:	f04f 0901 	mov.w	r9, #1
 800b4dc:	4623      	mov	r3, r4
 800b4de:	469a      	mov	sl, r3
 800b4e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4e4:	b10a      	cbz	r2, 800b4ea <_vfiprintf_r+0x86>
 800b4e6:	2a25      	cmp	r2, #37	@ 0x25
 800b4e8:	d1f9      	bne.n	800b4de <_vfiprintf_r+0x7a>
 800b4ea:	ebba 0b04 	subs.w	fp, sl, r4
 800b4ee:	d00b      	beq.n	800b508 <_vfiprintf_r+0xa4>
 800b4f0:	465b      	mov	r3, fp
 800b4f2:	4622      	mov	r2, r4
 800b4f4:	4629      	mov	r1, r5
 800b4f6:	4630      	mov	r0, r6
 800b4f8:	f7ff ffa1 	bl	800b43e <__sfputs_r>
 800b4fc:	3001      	adds	r0, #1
 800b4fe:	f000 80a7 	beq.w	800b650 <_vfiprintf_r+0x1ec>
 800b502:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b504:	445a      	add	r2, fp
 800b506:	9209      	str	r2, [sp, #36]	@ 0x24
 800b508:	f89a 3000 	ldrb.w	r3, [sl]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	f000 809f 	beq.w	800b650 <_vfiprintf_r+0x1ec>
 800b512:	2300      	movs	r3, #0
 800b514:	f04f 32ff 	mov.w	r2, #4294967295
 800b518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b51c:	f10a 0a01 	add.w	sl, sl, #1
 800b520:	9304      	str	r3, [sp, #16]
 800b522:	9307      	str	r3, [sp, #28]
 800b524:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b528:	931a      	str	r3, [sp, #104]	@ 0x68
 800b52a:	4654      	mov	r4, sl
 800b52c:	2205      	movs	r2, #5
 800b52e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b532:	4853      	ldr	r0, [pc, #332]	@ (800b680 <_vfiprintf_r+0x21c>)
 800b534:	f7f4 fe74 	bl	8000220 <memchr>
 800b538:	9a04      	ldr	r2, [sp, #16]
 800b53a:	b9d8      	cbnz	r0, 800b574 <_vfiprintf_r+0x110>
 800b53c:	06d1      	lsls	r1, r2, #27
 800b53e:	bf44      	itt	mi
 800b540:	2320      	movmi	r3, #32
 800b542:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b546:	0713      	lsls	r3, r2, #28
 800b548:	bf44      	itt	mi
 800b54a:	232b      	movmi	r3, #43	@ 0x2b
 800b54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b550:	f89a 3000 	ldrb.w	r3, [sl]
 800b554:	2b2a      	cmp	r3, #42	@ 0x2a
 800b556:	d015      	beq.n	800b584 <_vfiprintf_r+0x120>
 800b558:	9a07      	ldr	r2, [sp, #28]
 800b55a:	4654      	mov	r4, sl
 800b55c:	2000      	movs	r0, #0
 800b55e:	f04f 0c0a 	mov.w	ip, #10
 800b562:	4621      	mov	r1, r4
 800b564:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b568:	3b30      	subs	r3, #48	@ 0x30
 800b56a:	2b09      	cmp	r3, #9
 800b56c:	d94b      	bls.n	800b606 <_vfiprintf_r+0x1a2>
 800b56e:	b1b0      	cbz	r0, 800b59e <_vfiprintf_r+0x13a>
 800b570:	9207      	str	r2, [sp, #28]
 800b572:	e014      	b.n	800b59e <_vfiprintf_r+0x13a>
 800b574:	eba0 0308 	sub.w	r3, r0, r8
 800b578:	fa09 f303 	lsl.w	r3, r9, r3
 800b57c:	4313      	orrs	r3, r2
 800b57e:	9304      	str	r3, [sp, #16]
 800b580:	46a2      	mov	sl, r4
 800b582:	e7d2      	b.n	800b52a <_vfiprintf_r+0xc6>
 800b584:	9b03      	ldr	r3, [sp, #12]
 800b586:	1d19      	adds	r1, r3, #4
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	9103      	str	r1, [sp, #12]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	bfbb      	ittet	lt
 800b590:	425b      	neglt	r3, r3
 800b592:	f042 0202 	orrlt.w	r2, r2, #2
 800b596:	9307      	strge	r3, [sp, #28]
 800b598:	9307      	strlt	r3, [sp, #28]
 800b59a:	bfb8      	it	lt
 800b59c:	9204      	strlt	r2, [sp, #16]
 800b59e:	7823      	ldrb	r3, [r4, #0]
 800b5a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5a2:	d10a      	bne.n	800b5ba <_vfiprintf_r+0x156>
 800b5a4:	7863      	ldrb	r3, [r4, #1]
 800b5a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5a8:	d132      	bne.n	800b610 <_vfiprintf_r+0x1ac>
 800b5aa:	9b03      	ldr	r3, [sp, #12]
 800b5ac:	1d1a      	adds	r2, r3, #4
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	9203      	str	r2, [sp, #12]
 800b5b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b5b6:	3402      	adds	r4, #2
 800b5b8:	9305      	str	r3, [sp, #20]
 800b5ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b690 <_vfiprintf_r+0x22c>
 800b5be:	7821      	ldrb	r1, [r4, #0]
 800b5c0:	2203      	movs	r2, #3
 800b5c2:	4650      	mov	r0, sl
 800b5c4:	f7f4 fe2c 	bl	8000220 <memchr>
 800b5c8:	b138      	cbz	r0, 800b5da <_vfiprintf_r+0x176>
 800b5ca:	9b04      	ldr	r3, [sp, #16]
 800b5cc:	eba0 000a 	sub.w	r0, r0, sl
 800b5d0:	2240      	movs	r2, #64	@ 0x40
 800b5d2:	4082      	lsls	r2, r0
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	3401      	adds	r4, #1
 800b5d8:	9304      	str	r3, [sp, #16]
 800b5da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5de:	4829      	ldr	r0, [pc, #164]	@ (800b684 <_vfiprintf_r+0x220>)
 800b5e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5e4:	2206      	movs	r2, #6
 800b5e6:	f7f4 fe1b 	bl	8000220 <memchr>
 800b5ea:	2800      	cmp	r0, #0
 800b5ec:	d03f      	beq.n	800b66e <_vfiprintf_r+0x20a>
 800b5ee:	4b26      	ldr	r3, [pc, #152]	@ (800b688 <_vfiprintf_r+0x224>)
 800b5f0:	bb1b      	cbnz	r3, 800b63a <_vfiprintf_r+0x1d6>
 800b5f2:	9b03      	ldr	r3, [sp, #12]
 800b5f4:	3307      	adds	r3, #7
 800b5f6:	f023 0307 	bic.w	r3, r3, #7
 800b5fa:	3308      	adds	r3, #8
 800b5fc:	9303      	str	r3, [sp, #12]
 800b5fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b600:	443b      	add	r3, r7
 800b602:	9309      	str	r3, [sp, #36]	@ 0x24
 800b604:	e76a      	b.n	800b4dc <_vfiprintf_r+0x78>
 800b606:	fb0c 3202 	mla	r2, ip, r2, r3
 800b60a:	460c      	mov	r4, r1
 800b60c:	2001      	movs	r0, #1
 800b60e:	e7a8      	b.n	800b562 <_vfiprintf_r+0xfe>
 800b610:	2300      	movs	r3, #0
 800b612:	3401      	adds	r4, #1
 800b614:	9305      	str	r3, [sp, #20]
 800b616:	4619      	mov	r1, r3
 800b618:	f04f 0c0a 	mov.w	ip, #10
 800b61c:	4620      	mov	r0, r4
 800b61e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b622:	3a30      	subs	r2, #48	@ 0x30
 800b624:	2a09      	cmp	r2, #9
 800b626:	d903      	bls.n	800b630 <_vfiprintf_r+0x1cc>
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d0c6      	beq.n	800b5ba <_vfiprintf_r+0x156>
 800b62c:	9105      	str	r1, [sp, #20]
 800b62e:	e7c4      	b.n	800b5ba <_vfiprintf_r+0x156>
 800b630:	fb0c 2101 	mla	r1, ip, r1, r2
 800b634:	4604      	mov	r4, r0
 800b636:	2301      	movs	r3, #1
 800b638:	e7f0      	b.n	800b61c <_vfiprintf_r+0x1b8>
 800b63a:	ab03      	add	r3, sp, #12
 800b63c:	9300      	str	r3, [sp, #0]
 800b63e:	462a      	mov	r2, r5
 800b640:	4b12      	ldr	r3, [pc, #72]	@ (800b68c <_vfiprintf_r+0x228>)
 800b642:	a904      	add	r1, sp, #16
 800b644:	4630      	mov	r0, r6
 800b646:	f7fd fd01 	bl	800904c <_printf_float>
 800b64a:	4607      	mov	r7, r0
 800b64c:	1c78      	adds	r0, r7, #1
 800b64e:	d1d6      	bne.n	800b5fe <_vfiprintf_r+0x19a>
 800b650:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b652:	07d9      	lsls	r1, r3, #31
 800b654:	d405      	bmi.n	800b662 <_vfiprintf_r+0x1fe>
 800b656:	89ab      	ldrh	r3, [r5, #12]
 800b658:	059a      	lsls	r2, r3, #22
 800b65a:	d402      	bmi.n	800b662 <_vfiprintf_r+0x1fe>
 800b65c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b65e:	f7fe fb65 	bl	8009d2c <__retarget_lock_release_recursive>
 800b662:	89ab      	ldrh	r3, [r5, #12]
 800b664:	065b      	lsls	r3, r3, #25
 800b666:	f53f af1f 	bmi.w	800b4a8 <_vfiprintf_r+0x44>
 800b66a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b66c:	e71e      	b.n	800b4ac <_vfiprintf_r+0x48>
 800b66e:	ab03      	add	r3, sp, #12
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	462a      	mov	r2, r5
 800b674:	4b05      	ldr	r3, [pc, #20]	@ (800b68c <_vfiprintf_r+0x228>)
 800b676:	a904      	add	r1, sp, #16
 800b678:	4630      	mov	r0, r6
 800b67a:	f7fd ff7f 	bl	800957c <_printf_i>
 800b67e:	e7e4      	b.n	800b64a <_vfiprintf_r+0x1e6>
 800b680:	0800c960 	.word	0x0800c960
 800b684:	0800c96a 	.word	0x0800c96a
 800b688:	0800904d 	.word	0x0800904d
 800b68c:	0800b43f 	.word	0x0800b43f
 800b690:	0800c966 	.word	0x0800c966

0800b694 <__sflush_r>:
 800b694:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b69c:	0716      	lsls	r6, r2, #28
 800b69e:	4605      	mov	r5, r0
 800b6a0:	460c      	mov	r4, r1
 800b6a2:	d454      	bmi.n	800b74e <__sflush_r+0xba>
 800b6a4:	684b      	ldr	r3, [r1, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	dc02      	bgt.n	800b6b0 <__sflush_r+0x1c>
 800b6aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	dd48      	ble.n	800b742 <__sflush_r+0xae>
 800b6b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6b2:	2e00      	cmp	r6, #0
 800b6b4:	d045      	beq.n	800b742 <__sflush_r+0xae>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b6bc:	682f      	ldr	r7, [r5, #0]
 800b6be:	6a21      	ldr	r1, [r4, #32]
 800b6c0:	602b      	str	r3, [r5, #0]
 800b6c2:	d030      	beq.n	800b726 <__sflush_r+0x92>
 800b6c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b6c6:	89a3      	ldrh	r3, [r4, #12]
 800b6c8:	0759      	lsls	r1, r3, #29
 800b6ca:	d505      	bpl.n	800b6d8 <__sflush_r+0x44>
 800b6cc:	6863      	ldr	r3, [r4, #4]
 800b6ce:	1ad2      	subs	r2, r2, r3
 800b6d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b6d2:	b10b      	cbz	r3, 800b6d8 <__sflush_r+0x44>
 800b6d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b6d6:	1ad2      	subs	r2, r2, r3
 800b6d8:	2300      	movs	r3, #0
 800b6da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6dc:	6a21      	ldr	r1, [r4, #32]
 800b6de:	4628      	mov	r0, r5
 800b6e0:	47b0      	blx	r6
 800b6e2:	1c43      	adds	r3, r0, #1
 800b6e4:	89a3      	ldrh	r3, [r4, #12]
 800b6e6:	d106      	bne.n	800b6f6 <__sflush_r+0x62>
 800b6e8:	6829      	ldr	r1, [r5, #0]
 800b6ea:	291d      	cmp	r1, #29
 800b6ec:	d82b      	bhi.n	800b746 <__sflush_r+0xb2>
 800b6ee:	4a2a      	ldr	r2, [pc, #168]	@ (800b798 <__sflush_r+0x104>)
 800b6f0:	410a      	asrs	r2, r1
 800b6f2:	07d6      	lsls	r6, r2, #31
 800b6f4:	d427      	bmi.n	800b746 <__sflush_r+0xb2>
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	6062      	str	r2, [r4, #4]
 800b6fa:	04d9      	lsls	r1, r3, #19
 800b6fc:	6922      	ldr	r2, [r4, #16]
 800b6fe:	6022      	str	r2, [r4, #0]
 800b700:	d504      	bpl.n	800b70c <__sflush_r+0x78>
 800b702:	1c42      	adds	r2, r0, #1
 800b704:	d101      	bne.n	800b70a <__sflush_r+0x76>
 800b706:	682b      	ldr	r3, [r5, #0]
 800b708:	b903      	cbnz	r3, 800b70c <__sflush_r+0x78>
 800b70a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b70c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b70e:	602f      	str	r7, [r5, #0]
 800b710:	b1b9      	cbz	r1, 800b742 <__sflush_r+0xae>
 800b712:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b716:	4299      	cmp	r1, r3
 800b718:	d002      	beq.n	800b720 <__sflush_r+0x8c>
 800b71a:	4628      	mov	r0, r5
 800b71c:	f7ff f954 	bl	800a9c8 <_free_r>
 800b720:	2300      	movs	r3, #0
 800b722:	6363      	str	r3, [r4, #52]	@ 0x34
 800b724:	e00d      	b.n	800b742 <__sflush_r+0xae>
 800b726:	2301      	movs	r3, #1
 800b728:	4628      	mov	r0, r5
 800b72a:	47b0      	blx	r6
 800b72c:	4602      	mov	r2, r0
 800b72e:	1c50      	adds	r0, r2, #1
 800b730:	d1c9      	bne.n	800b6c6 <__sflush_r+0x32>
 800b732:	682b      	ldr	r3, [r5, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d0c6      	beq.n	800b6c6 <__sflush_r+0x32>
 800b738:	2b1d      	cmp	r3, #29
 800b73a:	d001      	beq.n	800b740 <__sflush_r+0xac>
 800b73c:	2b16      	cmp	r3, #22
 800b73e:	d11e      	bne.n	800b77e <__sflush_r+0xea>
 800b740:	602f      	str	r7, [r5, #0]
 800b742:	2000      	movs	r0, #0
 800b744:	e022      	b.n	800b78c <__sflush_r+0xf8>
 800b746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b74a:	b21b      	sxth	r3, r3
 800b74c:	e01b      	b.n	800b786 <__sflush_r+0xf2>
 800b74e:	690f      	ldr	r7, [r1, #16]
 800b750:	2f00      	cmp	r7, #0
 800b752:	d0f6      	beq.n	800b742 <__sflush_r+0xae>
 800b754:	0793      	lsls	r3, r2, #30
 800b756:	680e      	ldr	r6, [r1, #0]
 800b758:	bf08      	it	eq
 800b75a:	694b      	ldreq	r3, [r1, #20]
 800b75c:	600f      	str	r7, [r1, #0]
 800b75e:	bf18      	it	ne
 800b760:	2300      	movne	r3, #0
 800b762:	eba6 0807 	sub.w	r8, r6, r7
 800b766:	608b      	str	r3, [r1, #8]
 800b768:	f1b8 0f00 	cmp.w	r8, #0
 800b76c:	dde9      	ble.n	800b742 <__sflush_r+0xae>
 800b76e:	6a21      	ldr	r1, [r4, #32]
 800b770:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b772:	4643      	mov	r3, r8
 800b774:	463a      	mov	r2, r7
 800b776:	4628      	mov	r0, r5
 800b778:	47b0      	blx	r6
 800b77a:	2800      	cmp	r0, #0
 800b77c:	dc08      	bgt.n	800b790 <__sflush_r+0xfc>
 800b77e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b786:	81a3      	strh	r3, [r4, #12]
 800b788:	f04f 30ff 	mov.w	r0, #4294967295
 800b78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b790:	4407      	add	r7, r0
 800b792:	eba8 0800 	sub.w	r8, r8, r0
 800b796:	e7e7      	b.n	800b768 <__sflush_r+0xd4>
 800b798:	dfbffffe 	.word	0xdfbffffe

0800b79c <_fflush_r>:
 800b79c:	b538      	push	{r3, r4, r5, lr}
 800b79e:	690b      	ldr	r3, [r1, #16]
 800b7a0:	4605      	mov	r5, r0
 800b7a2:	460c      	mov	r4, r1
 800b7a4:	b913      	cbnz	r3, 800b7ac <_fflush_r+0x10>
 800b7a6:	2500      	movs	r5, #0
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	bd38      	pop	{r3, r4, r5, pc}
 800b7ac:	b118      	cbz	r0, 800b7b6 <_fflush_r+0x1a>
 800b7ae:	6a03      	ldr	r3, [r0, #32]
 800b7b0:	b90b      	cbnz	r3, 800b7b6 <_fflush_r+0x1a>
 800b7b2:	f7fe f88f 	bl	80098d4 <__sinit>
 800b7b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d0f3      	beq.n	800b7a6 <_fflush_r+0xa>
 800b7be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b7c0:	07d0      	lsls	r0, r2, #31
 800b7c2:	d404      	bmi.n	800b7ce <_fflush_r+0x32>
 800b7c4:	0599      	lsls	r1, r3, #22
 800b7c6:	d402      	bmi.n	800b7ce <_fflush_r+0x32>
 800b7c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7ca:	f7fe faae 	bl	8009d2a <__retarget_lock_acquire_recursive>
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	4621      	mov	r1, r4
 800b7d2:	f7ff ff5f 	bl	800b694 <__sflush_r>
 800b7d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7d8:	07da      	lsls	r2, r3, #31
 800b7da:	4605      	mov	r5, r0
 800b7dc:	d4e4      	bmi.n	800b7a8 <_fflush_r+0xc>
 800b7de:	89a3      	ldrh	r3, [r4, #12]
 800b7e0:	059b      	lsls	r3, r3, #22
 800b7e2:	d4e1      	bmi.n	800b7a8 <_fflush_r+0xc>
 800b7e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7e6:	f7fe faa1 	bl	8009d2c <__retarget_lock_release_recursive>
 800b7ea:	e7dd      	b.n	800b7a8 <_fflush_r+0xc>

0800b7ec <__swhatbuf_r>:
 800b7ec:	b570      	push	{r4, r5, r6, lr}
 800b7ee:	460c      	mov	r4, r1
 800b7f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7f4:	2900      	cmp	r1, #0
 800b7f6:	b096      	sub	sp, #88	@ 0x58
 800b7f8:	4615      	mov	r5, r2
 800b7fa:	461e      	mov	r6, r3
 800b7fc:	da0d      	bge.n	800b81a <__swhatbuf_r+0x2e>
 800b7fe:	89a3      	ldrh	r3, [r4, #12]
 800b800:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b804:	f04f 0100 	mov.w	r1, #0
 800b808:	bf14      	ite	ne
 800b80a:	2340      	movne	r3, #64	@ 0x40
 800b80c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b810:	2000      	movs	r0, #0
 800b812:	6031      	str	r1, [r6, #0]
 800b814:	602b      	str	r3, [r5, #0]
 800b816:	b016      	add	sp, #88	@ 0x58
 800b818:	bd70      	pop	{r4, r5, r6, pc}
 800b81a:	466a      	mov	r2, sp
 800b81c:	f000 f862 	bl	800b8e4 <_fstat_r>
 800b820:	2800      	cmp	r0, #0
 800b822:	dbec      	blt.n	800b7fe <__swhatbuf_r+0x12>
 800b824:	9901      	ldr	r1, [sp, #4]
 800b826:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b82a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b82e:	4259      	negs	r1, r3
 800b830:	4159      	adcs	r1, r3
 800b832:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b836:	e7eb      	b.n	800b810 <__swhatbuf_r+0x24>

0800b838 <__smakebuf_r>:
 800b838:	898b      	ldrh	r3, [r1, #12]
 800b83a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b83c:	079d      	lsls	r5, r3, #30
 800b83e:	4606      	mov	r6, r0
 800b840:	460c      	mov	r4, r1
 800b842:	d507      	bpl.n	800b854 <__smakebuf_r+0x1c>
 800b844:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b848:	6023      	str	r3, [r4, #0]
 800b84a:	6123      	str	r3, [r4, #16]
 800b84c:	2301      	movs	r3, #1
 800b84e:	6163      	str	r3, [r4, #20]
 800b850:	b003      	add	sp, #12
 800b852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b854:	ab01      	add	r3, sp, #4
 800b856:	466a      	mov	r2, sp
 800b858:	f7ff ffc8 	bl	800b7ec <__swhatbuf_r>
 800b85c:	9f00      	ldr	r7, [sp, #0]
 800b85e:	4605      	mov	r5, r0
 800b860:	4639      	mov	r1, r7
 800b862:	4630      	mov	r0, r6
 800b864:	f7fd fac6 	bl	8008df4 <_malloc_r>
 800b868:	b948      	cbnz	r0, 800b87e <__smakebuf_r+0x46>
 800b86a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b86e:	059a      	lsls	r2, r3, #22
 800b870:	d4ee      	bmi.n	800b850 <__smakebuf_r+0x18>
 800b872:	f023 0303 	bic.w	r3, r3, #3
 800b876:	f043 0302 	orr.w	r3, r3, #2
 800b87a:	81a3      	strh	r3, [r4, #12]
 800b87c:	e7e2      	b.n	800b844 <__smakebuf_r+0xc>
 800b87e:	89a3      	ldrh	r3, [r4, #12]
 800b880:	6020      	str	r0, [r4, #0]
 800b882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b886:	81a3      	strh	r3, [r4, #12]
 800b888:	9b01      	ldr	r3, [sp, #4]
 800b88a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b88e:	b15b      	cbz	r3, 800b8a8 <__smakebuf_r+0x70>
 800b890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b894:	4630      	mov	r0, r6
 800b896:	f000 f837 	bl	800b908 <_isatty_r>
 800b89a:	b128      	cbz	r0, 800b8a8 <__smakebuf_r+0x70>
 800b89c:	89a3      	ldrh	r3, [r4, #12]
 800b89e:	f023 0303 	bic.w	r3, r3, #3
 800b8a2:	f043 0301 	orr.w	r3, r3, #1
 800b8a6:	81a3      	strh	r3, [r4, #12]
 800b8a8:	89a3      	ldrh	r3, [r4, #12]
 800b8aa:	431d      	orrs	r5, r3
 800b8ac:	81a5      	strh	r5, [r4, #12]
 800b8ae:	e7cf      	b.n	800b850 <__smakebuf_r+0x18>

0800b8b0 <memmove>:
 800b8b0:	4288      	cmp	r0, r1
 800b8b2:	b510      	push	{r4, lr}
 800b8b4:	eb01 0402 	add.w	r4, r1, r2
 800b8b8:	d902      	bls.n	800b8c0 <memmove+0x10>
 800b8ba:	4284      	cmp	r4, r0
 800b8bc:	4623      	mov	r3, r4
 800b8be:	d807      	bhi.n	800b8d0 <memmove+0x20>
 800b8c0:	1e43      	subs	r3, r0, #1
 800b8c2:	42a1      	cmp	r1, r4
 800b8c4:	d008      	beq.n	800b8d8 <memmove+0x28>
 800b8c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8ce:	e7f8      	b.n	800b8c2 <memmove+0x12>
 800b8d0:	4402      	add	r2, r0
 800b8d2:	4601      	mov	r1, r0
 800b8d4:	428a      	cmp	r2, r1
 800b8d6:	d100      	bne.n	800b8da <memmove+0x2a>
 800b8d8:	bd10      	pop	{r4, pc}
 800b8da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8e2:	e7f7      	b.n	800b8d4 <memmove+0x24>

0800b8e4 <_fstat_r>:
 800b8e4:	b538      	push	{r3, r4, r5, lr}
 800b8e6:	4d07      	ldr	r5, [pc, #28]	@ (800b904 <_fstat_r+0x20>)
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	4608      	mov	r0, r1
 800b8ee:	4611      	mov	r1, r2
 800b8f0:	602b      	str	r3, [r5, #0]
 800b8f2:	f7f6 fbed 	bl	80020d0 <_fstat>
 800b8f6:	1c43      	adds	r3, r0, #1
 800b8f8:	d102      	bne.n	800b900 <_fstat_r+0x1c>
 800b8fa:	682b      	ldr	r3, [r5, #0]
 800b8fc:	b103      	cbz	r3, 800b900 <_fstat_r+0x1c>
 800b8fe:	6023      	str	r3, [r4, #0]
 800b900:	bd38      	pop	{r3, r4, r5, pc}
 800b902:	bf00      	nop
 800b904:	200007a4 	.word	0x200007a4

0800b908 <_isatty_r>:
 800b908:	b538      	push	{r3, r4, r5, lr}
 800b90a:	4d06      	ldr	r5, [pc, #24]	@ (800b924 <_isatty_r+0x1c>)
 800b90c:	2300      	movs	r3, #0
 800b90e:	4604      	mov	r4, r0
 800b910:	4608      	mov	r0, r1
 800b912:	602b      	str	r3, [r5, #0]
 800b914:	f7f6 fbec 	bl	80020f0 <_isatty>
 800b918:	1c43      	adds	r3, r0, #1
 800b91a:	d102      	bne.n	800b922 <_isatty_r+0x1a>
 800b91c:	682b      	ldr	r3, [r5, #0]
 800b91e:	b103      	cbz	r3, 800b922 <_isatty_r+0x1a>
 800b920:	6023      	str	r3, [r4, #0]
 800b922:	bd38      	pop	{r3, r4, r5, pc}
 800b924:	200007a4 	.word	0x200007a4

0800b928 <memcpy>:
 800b928:	440a      	add	r2, r1
 800b92a:	4291      	cmp	r1, r2
 800b92c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b930:	d100      	bne.n	800b934 <memcpy+0xc>
 800b932:	4770      	bx	lr
 800b934:	b510      	push	{r4, lr}
 800b936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b93a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b93e:	4291      	cmp	r1, r2
 800b940:	d1f9      	bne.n	800b936 <memcpy+0xe>
 800b942:	bd10      	pop	{r4, pc}

0800b944 <__assert_func>:
 800b944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b946:	4614      	mov	r4, r2
 800b948:	461a      	mov	r2, r3
 800b94a:	4b09      	ldr	r3, [pc, #36]	@ (800b970 <__assert_func+0x2c>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4605      	mov	r5, r0
 800b950:	68d8      	ldr	r0, [r3, #12]
 800b952:	b954      	cbnz	r4, 800b96a <__assert_func+0x26>
 800b954:	4b07      	ldr	r3, [pc, #28]	@ (800b974 <__assert_func+0x30>)
 800b956:	461c      	mov	r4, r3
 800b958:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b95c:	9100      	str	r1, [sp, #0]
 800b95e:	462b      	mov	r3, r5
 800b960:	4905      	ldr	r1, [pc, #20]	@ (800b978 <__assert_func+0x34>)
 800b962:	f000 f86f 	bl	800ba44 <fiprintf>
 800b966:	f000 f87f 	bl	800ba68 <abort>
 800b96a:	4b04      	ldr	r3, [pc, #16]	@ (800b97c <__assert_func+0x38>)
 800b96c:	e7f4      	b.n	800b958 <__assert_func+0x14>
 800b96e:	bf00      	nop
 800b970:	20000018 	.word	0x20000018
 800b974:	0800c9b6 	.word	0x0800c9b6
 800b978:	0800c988 	.word	0x0800c988
 800b97c:	0800c97b 	.word	0x0800c97b

0800b980 <_calloc_r>:
 800b980:	b570      	push	{r4, r5, r6, lr}
 800b982:	fba1 5402 	umull	r5, r4, r1, r2
 800b986:	b93c      	cbnz	r4, 800b998 <_calloc_r+0x18>
 800b988:	4629      	mov	r1, r5
 800b98a:	f7fd fa33 	bl	8008df4 <_malloc_r>
 800b98e:	4606      	mov	r6, r0
 800b990:	b928      	cbnz	r0, 800b99e <_calloc_r+0x1e>
 800b992:	2600      	movs	r6, #0
 800b994:	4630      	mov	r0, r6
 800b996:	bd70      	pop	{r4, r5, r6, pc}
 800b998:	220c      	movs	r2, #12
 800b99a:	6002      	str	r2, [r0, #0]
 800b99c:	e7f9      	b.n	800b992 <_calloc_r+0x12>
 800b99e:	462a      	mov	r2, r5
 800b9a0:	4621      	mov	r1, r4
 800b9a2:	f7fe f935 	bl	8009c10 <memset>
 800b9a6:	e7f5      	b.n	800b994 <_calloc_r+0x14>

0800b9a8 <__ascii_mbtowc>:
 800b9a8:	b082      	sub	sp, #8
 800b9aa:	b901      	cbnz	r1, 800b9ae <__ascii_mbtowc+0x6>
 800b9ac:	a901      	add	r1, sp, #4
 800b9ae:	b142      	cbz	r2, 800b9c2 <__ascii_mbtowc+0x1a>
 800b9b0:	b14b      	cbz	r3, 800b9c6 <__ascii_mbtowc+0x1e>
 800b9b2:	7813      	ldrb	r3, [r2, #0]
 800b9b4:	600b      	str	r3, [r1, #0]
 800b9b6:	7812      	ldrb	r2, [r2, #0]
 800b9b8:	1e10      	subs	r0, r2, #0
 800b9ba:	bf18      	it	ne
 800b9bc:	2001      	movne	r0, #1
 800b9be:	b002      	add	sp, #8
 800b9c0:	4770      	bx	lr
 800b9c2:	4610      	mov	r0, r2
 800b9c4:	e7fb      	b.n	800b9be <__ascii_mbtowc+0x16>
 800b9c6:	f06f 0001 	mvn.w	r0, #1
 800b9ca:	e7f8      	b.n	800b9be <__ascii_mbtowc+0x16>

0800b9cc <_realloc_r>:
 800b9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d0:	4680      	mov	r8, r0
 800b9d2:	4615      	mov	r5, r2
 800b9d4:	460c      	mov	r4, r1
 800b9d6:	b921      	cbnz	r1, 800b9e2 <_realloc_r+0x16>
 800b9d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9dc:	4611      	mov	r1, r2
 800b9de:	f7fd ba09 	b.w	8008df4 <_malloc_r>
 800b9e2:	b92a      	cbnz	r2, 800b9f0 <_realloc_r+0x24>
 800b9e4:	f7fe fff0 	bl	800a9c8 <_free_r>
 800b9e8:	2400      	movs	r4, #0
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f0:	f000 f841 	bl	800ba76 <_malloc_usable_size_r>
 800b9f4:	4285      	cmp	r5, r0
 800b9f6:	4606      	mov	r6, r0
 800b9f8:	d802      	bhi.n	800ba00 <_realloc_r+0x34>
 800b9fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b9fe:	d8f4      	bhi.n	800b9ea <_realloc_r+0x1e>
 800ba00:	4629      	mov	r1, r5
 800ba02:	4640      	mov	r0, r8
 800ba04:	f7fd f9f6 	bl	8008df4 <_malloc_r>
 800ba08:	4607      	mov	r7, r0
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	d0ec      	beq.n	800b9e8 <_realloc_r+0x1c>
 800ba0e:	42b5      	cmp	r5, r6
 800ba10:	462a      	mov	r2, r5
 800ba12:	4621      	mov	r1, r4
 800ba14:	bf28      	it	cs
 800ba16:	4632      	movcs	r2, r6
 800ba18:	f7ff ff86 	bl	800b928 <memcpy>
 800ba1c:	4621      	mov	r1, r4
 800ba1e:	4640      	mov	r0, r8
 800ba20:	f7fe ffd2 	bl	800a9c8 <_free_r>
 800ba24:	463c      	mov	r4, r7
 800ba26:	e7e0      	b.n	800b9ea <_realloc_r+0x1e>

0800ba28 <__ascii_wctomb>:
 800ba28:	4603      	mov	r3, r0
 800ba2a:	4608      	mov	r0, r1
 800ba2c:	b141      	cbz	r1, 800ba40 <__ascii_wctomb+0x18>
 800ba2e:	2aff      	cmp	r2, #255	@ 0xff
 800ba30:	d904      	bls.n	800ba3c <__ascii_wctomb+0x14>
 800ba32:	228a      	movs	r2, #138	@ 0x8a
 800ba34:	601a      	str	r2, [r3, #0]
 800ba36:	f04f 30ff 	mov.w	r0, #4294967295
 800ba3a:	4770      	bx	lr
 800ba3c:	700a      	strb	r2, [r1, #0]
 800ba3e:	2001      	movs	r0, #1
 800ba40:	4770      	bx	lr
	...

0800ba44 <fiprintf>:
 800ba44:	b40e      	push	{r1, r2, r3}
 800ba46:	b503      	push	{r0, r1, lr}
 800ba48:	4601      	mov	r1, r0
 800ba4a:	ab03      	add	r3, sp, #12
 800ba4c:	4805      	ldr	r0, [pc, #20]	@ (800ba64 <fiprintf+0x20>)
 800ba4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba52:	6800      	ldr	r0, [r0, #0]
 800ba54:	9301      	str	r3, [sp, #4]
 800ba56:	f7ff fd05 	bl	800b464 <_vfiprintf_r>
 800ba5a:	b002      	add	sp, #8
 800ba5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba60:	b003      	add	sp, #12
 800ba62:	4770      	bx	lr
 800ba64:	20000018 	.word	0x20000018

0800ba68 <abort>:
 800ba68:	b508      	push	{r3, lr}
 800ba6a:	2006      	movs	r0, #6
 800ba6c:	f000 f834 	bl	800bad8 <raise>
 800ba70:	2001      	movs	r0, #1
 800ba72:	f7f6 faf9 	bl	8002068 <_exit>

0800ba76 <_malloc_usable_size_r>:
 800ba76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba7a:	1f18      	subs	r0, r3, #4
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	bfbc      	itt	lt
 800ba80:	580b      	ldrlt	r3, [r1, r0]
 800ba82:	18c0      	addlt	r0, r0, r3
 800ba84:	4770      	bx	lr

0800ba86 <_raise_r>:
 800ba86:	291f      	cmp	r1, #31
 800ba88:	b538      	push	{r3, r4, r5, lr}
 800ba8a:	4605      	mov	r5, r0
 800ba8c:	460c      	mov	r4, r1
 800ba8e:	d904      	bls.n	800ba9a <_raise_r+0x14>
 800ba90:	2316      	movs	r3, #22
 800ba92:	6003      	str	r3, [r0, #0]
 800ba94:	f04f 30ff 	mov.w	r0, #4294967295
 800ba98:	bd38      	pop	{r3, r4, r5, pc}
 800ba9a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba9c:	b112      	cbz	r2, 800baa4 <_raise_r+0x1e>
 800ba9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800baa2:	b94b      	cbnz	r3, 800bab8 <_raise_r+0x32>
 800baa4:	4628      	mov	r0, r5
 800baa6:	f000 f831 	bl	800bb0c <_getpid_r>
 800baaa:	4622      	mov	r2, r4
 800baac:	4601      	mov	r1, r0
 800baae:	4628      	mov	r0, r5
 800bab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bab4:	f000 b818 	b.w	800bae8 <_kill_r>
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d00a      	beq.n	800bad2 <_raise_r+0x4c>
 800babc:	1c59      	adds	r1, r3, #1
 800babe:	d103      	bne.n	800bac8 <_raise_r+0x42>
 800bac0:	2316      	movs	r3, #22
 800bac2:	6003      	str	r3, [r0, #0]
 800bac4:	2001      	movs	r0, #1
 800bac6:	e7e7      	b.n	800ba98 <_raise_r+0x12>
 800bac8:	2100      	movs	r1, #0
 800baca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bace:	4620      	mov	r0, r4
 800bad0:	4798      	blx	r3
 800bad2:	2000      	movs	r0, #0
 800bad4:	e7e0      	b.n	800ba98 <_raise_r+0x12>
	...

0800bad8 <raise>:
 800bad8:	4b02      	ldr	r3, [pc, #8]	@ (800bae4 <raise+0xc>)
 800bada:	4601      	mov	r1, r0
 800badc:	6818      	ldr	r0, [r3, #0]
 800bade:	f7ff bfd2 	b.w	800ba86 <_raise_r>
 800bae2:	bf00      	nop
 800bae4:	20000018 	.word	0x20000018

0800bae8 <_kill_r>:
 800bae8:	b538      	push	{r3, r4, r5, lr}
 800baea:	4d07      	ldr	r5, [pc, #28]	@ (800bb08 <_kill_r+0x20>)
 800baec:	2300      	movs	r3, #0
 800baee:	4604      	mov	r4, r0
 800baf0:	4608      	mov	r0, r1
 800baf2:	4611      	mov	r1, r2
 800baf4:	602b      	str	r3, [r5, #0]
 800baf6:	f7f6 faa7 	bl	8002048 <_kill>
 800bafa:	1c43      	adds	r3, r0, #1
 800bafc:	d102      	bne.n	800bb04 <_kill_r+0x1c>
 800bafe:	682b      	ldr	r3, [r5, #0]
 800bb00:	b103      	cbz	r3, 800bb04 <_kill_r+0x1c>
 800bb02:	6023      	str	r3, [r4, #0]
 800bb04:	bd38      	pop	{r3, r4, r5, pc}
 800bb06:	bf00      	nop
 800bb08:	200007a4 	.word	0x200007a4

0800bb0c <_getpid_r>:
 800bb0c:	f7f6 ba94 	b.w	8002038 <_getpid>

0800bb10 <sinf>:
 800bb10:	ee10 3a10 	vmov	r3, s0
 800bb14:	b507      	push	{r0, r1, r2, lr}
 800bb16:	4a1f      	ldr	r2, [pc, #124]	@ (800bb94 <sinf+0x84>)
 800bb18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d807      	bhi.n	800bb30 <sinf+0x20>
 800bb20:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800bb98 <sinf+0x88>
 800bb24:	2000      	movs	r0, #0
 800bb26:	b003      	add	sp, #12
 800bb28:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb2c:	f000 b88e 	b.w	800bc4c <__kernel_sinf>
 800bb30:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bb34:	d304      	bcc.n	800bb40 <sinf+0x30>
 800bb36:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bb3a:	b003      	add	sp, #12
 800bb3c:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb40:	4668      	mov	r0, sp
 800bb42:	f000 f8cb 	bl	800bcdc <__ieee754_rem_pio2f>
 800bb46:	f000 0003 	and.w	r0, r0, #3
 800bb4a:	2801      	cmp	r0, #1
 800bb4c:	d00a      	beq.n	800bb64 <sinf+0x54>
 800bb4e:	2802      	cmp	r0, #2
 800bb50:	d00f      	beq.n	800bb72 <sinf+0x62>
 800bb52:	b9c0      	cbnz	r0, 800bb86 <sinf+0x76>
 800bb54:	eddd 0a01 	vldr	s1, [sp, #4]
 800bb58:	ed9d 0a00 	vldr	s0, [sp]
 800bb5c:	2001      	movs	r0, #1
 800bb5e:	f000 f875 	bl	800bc4c <__kernel_sinf>
 800bb62:	e7ea      	b.n	800bb3a <sinf+0x2a>
 800bb64:	eddd 0a01 	vldr	s1, [sp, #4]
 800bb68:	ed9d 0a00 	vldr	s0, [sp]
 800bb6c:	f000 f816 	bl	800bb9c <__kernel_cosf>
 800bb70:	e7e3      	b.n	800bb3a <sinf+0x2a>
 800bb72:	eddd 0a01 	vldr	s1, [sp, #4]
 800bb76:	ed9d 0a00 	vldr	s0, [sp]
 800bb7a:	2001      	movs	r0, #1
 800bb7c:	f000 f866 	bl	800bc4c <__kernel_sinf>
 800bb80:	eeb1 0a40 	vneg.f32	s0, s0
 800bb84:	e7d9      	b.n	800bb3a <sinf+0x2a>
 800bb86:	eddd 0a01 	vldr	s1, [sp, #4]
 800bb8a:	ed9d 0a00 	vldr	s0, [sp]
 800bb8e:	f000 f805 	bl	800bb9c <__kernel_cosf>
 800bb92:	e7f5      	b.n	800bb80 <sinf+0x70>
 800bb94:	3f490fd8 	.word	0x3f490fd8
 800bb98:	00000000 	.word	0x00000000

0800bb9c <__kernel_cosf>:
 800bb9c:	ee10 3a10 	vmov	r3, s0
 800bba0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bba4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800bba8:	eef0 6a40 	vmov.f32	s13, s0
 800bbac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bbb0:	d204      	bcs.n	800bbbc <__kernel_cosf+0x20>
 800bbb2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800bbb6:	ee17 2a90 	vmov	r2, s15
 800bbba:	b342      	cbz	r2, 800bc0e <__kernel_cosf+0x72>
 800bbbc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800bbc0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800bc2c <__kernel_cosf+0x90>
 800bbc4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800bc30 <__kernel_cosf+0x94>
 800bbc8:	4a1a      	ldr	r2, [pc, #104]	@ (800bc34 <__kernel_cosf+0x98>)
 800bbca:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bc38 <__kernel_cosf+0x9c>
 800bbd4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bbd8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800bc3c <__kernel_cosf+0xa0>
 800bbdc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bbe0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800bc40 <__kernel_cosf+0xa4>
 800bbe4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bbe8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800bc44 <__kernel_cosf+0xa8>
 800bbec:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bbf0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800bbf4:	ee26 6a07 	vmul.f32	s12, s12, s14
 800bbf8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bbfc:	eee7 0a06 	vfma.f32	s1, s14, s12
 800bc00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc04:	d804      	bhi.n	800bc10 <__kernel_cosf+0x74>
 800bc06:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800bc0a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bc0e:	4770      	bx	lr
 800bc10:	4a0d      	ldr	r2, [pc, #52]	@ (800bc48 <__kernel_cosf+0xac>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	bf9a      	itte	ls
 800bc16:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800bc1a:	ee07 3a10 	vmovls	s14, r3
 800bc1e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800bc22:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bc26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc2a:	e7ec      	b.n	800bc06 <__kernel_cosf+0x6a>
 800bc2c:	ad47d74e 	.word	0xad47d74e
 800bc30:	310f74f6 	.word	0x310f74f6
 800bc34:	3e999999 	.word	0x3e999999
 800bc38:	b493f27c 	.word	0xb493f27c
 800bc3c:	37d00d01 	.word	0x37d00d01
 800bc40:	bab60b61 	.word	0xbab60b61
 800bc44:	3d2aaaab 	.word	0x3d2aaaab
 800bc48:	3f480000 	.word	0x3f480000

0800bc4c <__kernel_sinf>:
 800bc4c:	ee10 3a10 	vmov	r3, s0
 800bc50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc54:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800bc58:	d204      	bcs.n	800bc64 <__kernel_sinf+0x18>
 800bc5a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bc5e:	ee17 3a90 	vmov	r3, s15
 800bc62:	b35b      	cbz	r3, 800bcbc <__kernel_sinf+0x70>
 800bc64:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bc68:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800bcc0 <__kernel_sinf+0x74>
 800bc6c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800bcc4 <__kernel_sinf+0x78>
 800bc70:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bc74:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800bcc8 <__kernel_sinf+0x7c>
 800bc78:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bc7c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800bccc <__kernel_sinf+0x80>
 800bc80:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bc84:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800bcd0 <__kernel_sinf+0x84>
 800bc88:	ee60 6a07 	vmul.f32	s13, s0, s14
 800bc8c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bc90:	b930      	cbnz	r0, 800bca0 <__kernel_sinf+0x54>
 800bc92:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800bcd4 <__kernel_sinf+0x88>
 800bc96:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bc9a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bc9e:	4770      	bx	lr
 800bca0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bca4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800bca8:	eee0 7a86 	vfma.f32	s15, s1, s12
 800bcac:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800bcb0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800bcd8 <__kernel_sinf+0x8c>
 800bcb4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800bcb8:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop
 800bcc0:	2f2ec9d3 	.word	0x2f2ec9d3
 800bcc4:	b2d72f34 	.word	0xb2d72f34
 800bcc8:	3638ef1b 	.word	0x3638ef1b
 800bccc:	b9500d01 	.word	0xb9500d01
 800bcd0:	3c088889 	.word	0x3c088889
 800bcd4:	be2aaaab 	.word	0xbe2aaaab
 800bcd8:	3e2aaaab 	.word	0x3e2aaaab

0800bcdc <__ieee754_rem_pio2f>:
 800bcdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcde:	ee10 6a10 	vmov	r6, s0
 800bce2:	4b88      	ldr	r3, [pc, #544]	@ (800bf04 <__ieee754_rem_pio2f+0x228>)
 800bce4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800bce8:	429d      	cmp	r5, r3
 800bcea:	b087      	sub	sp, #28
 800bcec:	4604      	mov	r4, r0
 800bcee:	d805      	bhi.n	800bcfc <__ieee754_rem_pio2f+0x20>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	ed80 0a00 	vstr	s0, [r0]
 800bcf6:	6043      	str	r3, [r0, #4]
 800bcf8:	2000      	movs	r0, #0
 800bcfa:	e022      	b.n	800bd42 <__ieee754_rem_pio2f+0x66>
 800bcfc:	4b82      	ldr	r3, [pc, #520]	@ (800bf08 <__ieee754_rem_pio2f+0x22c>)
 800bcfe:	429d      	cmp	r5, r3
 800bd00:	d83a      	bhi.n	800bd78 <__ieee754_rem_pio2f+0x9c>
 800bd02:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bd06:	2e00      	cmp	r6, #0
 800bd08:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800bf0c <__ieee754_rem_pio2f+0x230>
 800bd0c:	4a80      	ldr	r2, [pc, #512]	@ (800bf10 <__ieee754_rem_pio2f+0x234>)
 800bd0e:	f023 030f 	bic.w	r3, r3, #15
 800bd12:	dd18      	ble.n	800bd46 <__ieee754_rem_pio2f+0x6a>
 800bd14:	4293      	cmp	r3, r2
 800bd16:	ee70 7a47 	vsub.f32	s15, s0, s14
 800bd1a:	bf09      	itett	eq
 800bd1c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800bf14 <__ieee754_rem_pio2f+0x238>
 800bd20:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800bf18 <__ieee754_rem_pio2f+0x23c>
 800bd24:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800bf1c <__ieee754_rem_pio2f+0x240>
 800bd28:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800bd2c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800bd30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd34:	ed80 7a00 	vstr	s14, [r0]
 800bd38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bd3c:	edc0 7a01 	vstr	s15, [r0, #4]
 800bd40:	2001      	movs	r0, #1
 800bd42:	b007      	add	sp, #28
 800bd44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd46:	4293      	cmp	r3, r2
 800bd48:	ee70 7a07 	vadd.f32	s15, s0, s14
 800bd4c:	bf09      	itett	eq
 800bd4e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800bf14 <__ieee754_rem_pio2f+0x238>
 800bd52:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800bf18 <__ieee754_rem_pio2f+0x23c>
 800bd56:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800bf1c <__ieee754_rem_pio2f+0x240>
 800bd5a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800bd5e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bd62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd66:	ed80 7a00 	vstr	s14, [r0]
 800bd6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd6e:	edc0 7a01 	vstr	s15, [r0, #4]
 800bd72:	f04f 30ff 	mov.w	r0, #4294967295
 800bd76:	e7e4      	b.n	800bd42 <__ieee754_rem_pio2f+0x66>
 800bd78:	4b69      	ldr	r3, [pc, #420]	@ (800bf20 <__ieee754_rem_pio2f+0x244>)
 800bd7a:	429d      	cmp	r5, r3
 800bd7c:	d873      	bhi.n	800be66 <__ieee754_rem_pio2f+0x18a>
 800bd7e:	f000 f8dd 	bl	800bf3c <fabsf>
 800bd82:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800bf24 <__ieee754_rem_pio2f+0x248>
 800bd86:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bd8a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bd8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bd96:	ee17 0a90 	vmov	r0, s15
 800bd9a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bf0c <__ieee754_rem_pio2f+0x230>
 800bd9e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800bda2:	281f      	cmp	r0, #31
 800bda4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bf18 <__ieee754_rem_pio2f+0x23c>
 800bda8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdac:	eeb1 6a47 	vneg.f32	s12, s14
 800bdb0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bdb4:	ee16 1a90 	vmov	r1, s13
 800bdb8:	dc09      	bgt.n	800bdce <__ieee754_rem_pio2f+0xf2>
 800bdba:	4a5b      	ldr	r2, [pc, #364]	@ (800bf28 <__ieee754_rem_pio2f+0x24c>)
 800bdbc:	1e47      	subs	r7, r0, #1
 800bdbe:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bdc2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800bdc6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d107      	bne.n	800bdde <__ieee754_rem_pio2f+0x102>
 800bdce:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800bdd2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800bdd6:	2a08      	cmp	r2, #8
 800bdd8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800bddc:	dc14      	bgt.n	800be08 <__ieee754_rem_pio2f+0x12c>
 800bdde:	6021      	str	r1, [r4, #0]
 800bde0:	ed94 7a00 	vldr	s14, [r4]
 800bde4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bde8:	2e00      	cmp	r6, #0
 800bdea:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bdee:	ed84 0a01 	vstr	s0, [r4, #4]
 800bdf2:	daa6      	bge.n	800bd42 <__ieee754_rem_pio2f+0x66>
 800bdf4:	eeb1 7a47 	vneg.f32	s14, s14
 800bdf8:	eeb1 0a40 	vneg.f32	s0, s0
 800bdfc:	ed84 7a00 	vstr	s14, [r4]
 800be00:	ed84 0a01 	vstr	s0, [r4, #4]
 800be04:	4240      	negs	r0, r0
 800be06:	e79c      	b.n	800bd42 <__ieee754_rem_pio2f+0x66>
 800be08:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800bf14 <__ieee754_rem_pio2f+0x238>
 800be0c:	eef0 6a40 	vmov.f32	s13, s0
 800be10:	eee6 6a25 	vfma.f32	s13, s12, s11
 800be14:	ee70 7a66 	vsub.f32	s15, s0, s13
 800be18:	eee6 7a25 	vfma.f32	s15, s12, s11
 800be1c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800bf1c <__ieee754_rem_pio2f+0x240>
 800be20:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800be24:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800be28:	ee15 2a90 	vmov	r2, s11
 800be2c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800be30:	1a5b      	subs	r3, r3, r1
 800be32:	2b19      	cmp	r3, #25
 800be34:	dc04      	bgt.n	800be40 <__ieee754_rem_pio2f+0x164>
 800be36:	edc4 5a00 	vstr	s11, [r4]
 800be3a:	eeb0 0a66 	vmov.f32	s0, s13
 800be3e:	e7cf      	b.n	800bde0 <__ieee754_rem_pio2f+0x104>
 800be40:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800bf2c <__ieee754_rem_pio2f+0x250>
 800be44:	eeb0 0a66 	vmov.f32	s0, s13
 800be48:	eea6 0a25 	vfma.f32	s0, s12, s11
 800be4c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800be50:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800bf30 <__ieee754_rem_pio2f+0x254>
 800be54:	eee6 7a25 	vfma.f32	s15, s12, s11
 800be58:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800be5c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800be60:	ed84 7a00 	vstr	s14, [r4]
 800be64:	e7bc      	b.n	800bde0 <__ieee754_rem_pio2f+0x104>
 800be66:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800be6a:	d306      	bcc.n	800be7a <__ieee754_rem_pio2f+0x19e>
 800be6c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800be70:	edc0 7a01 	vstr	s15, [r0, #4]
 800be74:	edc0 7a00 	vstr	s15, [r0]
 800be78:	e73e      	b.n	800bcf8 <__ieee754_rem_pio2f+0x1c>
 800be7a:	15ea      	asrs	r2, r5, #23
 800be7c:	3a86      	subs	r2, #134	@ 0x86
 800be7e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800be82:	ee07 3a90 	vmov	s15, r3
 800be86:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800be8a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800bf34 <__ieee754_rem_pio2f+0x258>
 800be8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800be92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be96:	ed8d 7a03 	vstr	s14, [sp, #12]
 800be9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800be9e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bea2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bea6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800beaa:	ed8d 7a04 	vstr	s14, [sp, #16]
 800beae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800beb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800beb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beba:	edcd 7a05 	vstr	s15, [sp, #20]
 800bebe:	d11e      	bne.n	800befe <__ieee754_rem_pio2f+0x222>
 800bec0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bec8:	bf0c      	ite	eq
 800beca:	2301      	moveq	r3, #1
 800becc:	2302      	movne	r3, #2
 800bece:	491a      	ldr	r1, [pc, #104]	@ (800bf38 <__ieee754_rem_pio2f+0x25c>)
 800bed0:	9101      	str	r1, [sp, #4]
 800bed2:	2102      	movs	r1, #2
 800bed4:	9100      	str	r1, [sp, #0]
 800bed6:	a803      	add	r0, sp, #12
 800bed8:	4621      	mov	r1, r4
 800beda:	f000 f837 	bl	800bf4c <__kernel_rem_pio2f>
 800bede:	2e00      	cmp	r6, #0
 800bee0:	f6bf af2f 	bge.w	800bd42 <__ieee754_rem_pio2f+0x66>
 800bee4:	edd4 7a00 	vldr	s15, [r4]
 800bee8:	eef1 7a67 	vneg.f32	s15, s15
 800beec:	edc4 7a00 	vstr	s15, [r4]
 800bef0:	edd4 7a01 	vldr	s15, [r4, #4]
 800bef4:	eef1 7a67 	vneg.f32	s15, s15
 800bef8:	edc4 7a01 	vstr	s15, [r4, #4]
 800befc:	e782      	b.n	800be04 <__ieee754_rem_pio2f+0x128>
 800befe:	2303      	movs	r3, #3
 800bf00:	e7e5      	b.n	800bece <__ieee754_rem_pio2f+0x1f2>
 800bf02:	bf00      	nop
 800bf04:	3f490fd8 	.word	0x3f490fd8
 800bf08:	4016cbe3 	.word	0x4016cbe3
 800bf0c:	3fc90f80 	.word	0x3fc90f80
 800bf10:	3fc90fd0 	.word	0x3fc90fd0
 800bf14:	37354400 	.word	0x37354400
 800bf18:	37354443 	.word	0x37354443
 800bf1c:	2e85a308 	.word	0x2e85a308
 800bf20:	43490f80 	.word	0x43490f80
 800bf24:	3f22f984 	.word	0x3f22f984
 800bf28:	0800cab8 	.word	0x0800cab8
 800bf2c:	2e85a300 	.word	0x2e85a300
 800bf30:	248d3132 	.word	0x248d3132
 800bf34:	43800000 	.word	0x43800000
 800bf38:	0800cb38 	.word	0x0800cb38

0800bf3c <fabsf>:
 800bf3c:	ee10 3a10 	vmov	r3, s0
 800bf40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bf44:	ee00 3a10 	vmov	s0, r3
 800bf48:	4770      	bx	lr
	...

0800bf4c <__kernel_rem_pio2f>:
 800bf4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf50:	ed2d 8b04 	vpush	{d8-d9}
 800bf54:	b0d9      	sub	sp, #356	@ 0x164
 800bf56:	4690      	mov	r8, r2
 800bf58:	9001      	str	r0, [sp, #4]
 800bf5a:	4ab9      	ldr	r2, [pc, #740]	@ (800c240 <__kernel_rem_pio2f+0x2f4>)
 800bf5c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800bf5e:	f118 0f04 	cmn.w	r8, #4
 800bf62:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800bf66:	460f      	mov	r7, r1
 800bf68:	f103 3bff 	add.w	fp, r3, #4294967295
 800bf6c:	db27      	blt.n	800bfbe <__kernel_rem_pio2f+0x72>
 800bf6e:	f1b8 0203 	subs.w	r2, r8, #3
 800bf72:	bf48      	it	mi
 800bf74:	f108 0204 	addmi.w	r2, r8, #4
 800bf78:	10d2      	asrs	r2, r2, #3
 800bf7a:	1c55      	adds	r5, r2, #1
 800bf7c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800bf7e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800c250 <__kernel_rem_pio2f+0x304>
 800bf82:	00e8      	lsls	r0, r5, #3
 800bf84:	eba2 060b 	sub.w	r6, r2, fp
 800bf88:	9002      	str	r0, [sp, #8]
 800bf8a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800bf8e:	eb0a 0c0b 	add.w	ip, sl, fp
 800bf92:	ac1c      	add	r4, sp, #112	@ 0x70
 800bf94:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800bf98:	2000      	movs	r0, #0
 800bf9a:	4560      	cmp	r0, ip
 800bf9c:	dd11      	ble.n	800bfc2 <__kernel_rem_pio2f+0x76>
 800bf9e:	a91c      	add	r1, sp, #112	@ 0x70
 800bfa0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800bfa4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800bfa8:	f04f 0c00 	mov.w	ip, #0
 800bfac:	45d4      	cmp	ip, sl
 800bfae:	dc27      	bgt.n	800c000 <__kernel_rem_pio2f+0xb4>
 800bfb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bfb4:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800c250 <__kernel_rem_pio2f+0x304>
 800bfb8:	4606      	mov	r6, r0
 800bfba:	2400      	movs	r4, #0
 800bfbc:	e016      	b.n	800bfec <__kernel_rem_pio2f+0xa0>
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	e7db      	b.n	800bf7a <__kernel_rem_pio2f+0x2e>
 800bfc2:	42c6      	cmn	r6, r0
 800bfc4:	bf5d      	ittte	pl
 800bfc6:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800bfca:	ee07 1a90 	vmovpl	s15, r1
 800bfce:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800bfd2:	eef0 7a47 	vmovmi.f32	s15, s14
 800bfd6:	ece4 7a01 	vstmia	r4!, {s15}
 800bfda:	3001      	adds	r0, #1
 800bfdc:	e7dd      	b.n	800bf9a <__kernel_rem_pio2f+0x4e>
 800bfde:	ecfe 6a01 	vldmia	lr!, {s13}
 800bfe2:	ed96 7a00 	vldr	s14, [r6]
 800bfe6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bfea:	3401      	adds	r4, #1
 800bfec:	455c      	cmp	r4, fp
 800bfee:	f1a6 0604 	sub.w	r6, r6, #4
 800bff2:	ddf4      	ble.n	800bfde <__kernel_rem_pio2f+0x92>
 800bff4:	ece9 7a01 	vstmia	r9!, {s15}
 800bff8:	f10c 0c01 	add.w	ip, ip, #1
 800bffc:	3004      	adds	r0, #4
 800bffe:	e7d5      	b.n	800bfac <__kernel_rem_pio2f+0x60>
 800c000:	a908      	add	r1, sp, #32
 800c002:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c006:	9104      	str	r1, [sp, #16]
 800c008:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c00a:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800c24c <__kernel_rem_pio2f+0x300>
 800c00e:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800c248 <__kernel_rem_pio2f+0x2fc>
 800c012:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c016:	9203      	str	r2, [sp, #12]
 800c018:	4654      	mov	r4, sl
 800c01a:	00a2      	lsls	r2, r4, #2
 800c01c:	9205      	str	r2, [sp, #20]
 800c01e:	aa58      	add	r2, sp, #352	@ 0x160
 800c020:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c024:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800c028:	a944      	add	r1, sp, #272	@ 0x110
 800c02a:	aa08      	add	r2, sp, #32
 800c02c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800c030:	4694      	mov	ip, r2
 800c032:	4626      	mov	r6, r4
 800c034:	2e00      	cmp	r6, #0
 800c036:	f1a0 0004 	sub.w	r0, r0, #4
 800c03a:	dc4c      	bgt.n	800c0d6 <__kernel_rem_pio2f+0x18a>
 800c03c:	4628      	mov	r0, r5
 800c03e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c042:	f000 f9f5 	bl	800c430 <scalbnf>
 800c046:	eeb0 8a40 	vmov.f32	s16, s0
 800c04a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800c04e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c052:	f000 fa53 	bl	800c4fc <floorf>
 800c056:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800c05a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c05e:	2d00      	cmp	r5, #0
 800c060:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c064:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c068:	ee17 9a90 	vmov	r9, s15
 800c06c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c070:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c074:	dd41      	ble.n	800c0fa <__kernel_rem_pio2f+0x1ae>
 800c076:	f104 3cff 	add.w	ip, r4, #4294967295
 800c07a:	a908      	add	r1, sp, #32
 800c07c:	f1c5 0e08 	rsb	lr, r5, #8
 800c080:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800c084:	fa46 f00e 	asr.w	r0, r6, lr
 800c088:	4481      	add	r9, r0
 800c08a:	fa00 f00e 	lsl.w	r0, r0, lr
 800c08e:	1a36      	subs	r6, r6, r0
 800c090:	f1c5 0007 	rsb	r0, r5, #7
 800c094:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800c098:	4106      	asrs	r6, r0
 800c09a:	2e00      	cmp	r6, #0
 800c09c:	dd3c      	ble.n	800c118 <__kernel_rem_pio2f+0x1cc>
 800c09e:	f04f 0e00 	mov.w	lr, #0
 800c0a2:	f109 0901 	add.w	r9, r9, #1
 800c0a6:	4670      	mov	r0, lr
 800c0a8:	4574      	cmp	r4, lr
 800c0aa:	dc68      	bgt.n	800c17e <__kernel_rem_pio2f+0x232>
 800c0ac:	2d00      	cmp	r5, #0
 800c0ae:	dd03      	ble.n	800c0b8 <__kernel_rem_pio2f+0x16c>
 800c0b0:	2d01      	cmp	r5, #1
 800c0b2:	d074      	beq.n	800c19e <__kernel_rem_pio2f+0x252>
 800c0b4:	2d02      	cmp	r5, #2
 800c0b6:	d07d      	beq.n	800c1b4 <__kernel_rem_pio2f+0x268>
 800c0b8:	2e02      	cmp	r6, #2
 800c0ba:	d12d      	bne.n	800c118 <__kernel_rem_pio2f+0x1cc>
 800c0bc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c0c0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c0c4:	b340      	cbz	r0, 800c118 <__kernel_rem_pio2f+0x1cc>
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	9306      	str	r3, [sp, #24]
 800c0ca:	f000 f9b1 	bl	800c430 <scalbnf>
 800c0ce:	9b06      	ldr	r3, [sp, #24]
 800c0d0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c0d4:	e020      	b.n	800c118 <__kernel_rem_pio2f+0x1cc>
 800c0d6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c0da:	3e01      	subs	r6, #1
 800c0dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0e4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c0e8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c0ec:	ecac 0a01 	vstmia	ip!, {s0}
 800c0f0:	ed90 0a00 	vldr	s0, [r0]
 800c0f4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c0f8:	e79c      	b.n	800c034 <__kernel_rem_pio2f+0xe8>
 800c0fa:	d105      	bne.n	800c108 <__kernel_rem_pio2f+0x1bc>
 800c0fc:	1e60      	subs	r0, r4, #1
 800c0fe:	a908      	add	r1, sp, #32
 800c100:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800c104:	11f6      	asrs	r6, r6, #7
 800c106:	e7c8      	b.n	800c09a <__kernel_rem_pio2f+0x14e>
 800c108:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c10c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c114:	da31      	bge.n	800c17a <__kernel_rem_pio2f+0x22e>
 800c116:	2600      	movs	r6, #0
 800c118:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c120:	f040 8098 	bne.w	800c254 <__kernel_rem_pio2f+0x308>
 800c124:	1e60      	subs	r0, r4, #1
 800c126:	2200      	movs	r2, #0
 800c128:	4550      	cmp	r0, sl
 800c12a:	da4b      	bge.n	800c1c4 <__kernel_rem_pio2f+0x278>
 800c12c:	2a00      	cmp	r2, #0
 800c12e:	d065      	beq.n	800c1fc <__kernel_rem_pio2f+0x2b0>
 800c130:	3c01      	subs	r4, #1
 800c132:	ab08      	add	r3, sp, #32
 800c134:	3d08      	subs	r5, #8
 800c136:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d0f8      	beq.n	800c130 <__kernel_rem_pio2f+0x1e4>
 800c13e:	4628      	mov	r0, r5
 800c140:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c144:	f000 f974 	bl	800c430 <scalbnf>
 800c148:	1c63      	adds	r3, r4, #1
 800c14a:	aa44      	add	r2, sp, #272	@ 0x110
 800c14c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800c24c <__kernel_rem_pio2f+0x300>
 800c150:	0099      	lsls	r1, r3, #2
 800c152:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c156:	4623      	mov	r3, r4
 800c158:	2b00      	cmp	r3, #0
 800c15a:	f280 80a9 	bge.w	800c2b0 <__kernel_rem_pio2f+0x364>
 800c15e:	4623      	mov	r3, r4
 800c160:	2b00      	cmp	r3, #0
 800c162:	f2c0 80c7 	blt.w	800c2f4 <__kernel_rem_pio2f+0x3a8>
 800c166:	aa44      	add	r2, sp, #272	@ 0x110
 800c168:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800c16c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800c244 <__kernel_rem_pio2f+0x2f8>
 800c170:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800c250 <__kernel_rem_pio2f+0x304>
 800c174:	2000      	movs	r0, #0
 800c176:	1ae2      	subs	r2, r4, r3
 800c178:	e0b1      	b.n	800c2de <__kernel_rem_pio2f+0x392>
 800c17a:	2602      	movs	r6, #2
 800c17c:	e78f      	b.n	800c09e <__kernel_rem_pio2f+0x152>
 800c17e:	f852 1b04 	ldr.w	r1, [r2], #4
 800c182:	b948      	cbnz	r0, 800c198 <__kernel_rem_pio2f+0x24c>
 800c184:	b121      	cbz	r1, 800c190 <__kernel_rem_pio2f+0x244>
 800c186:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800c18a:	f842 1c04 	str.w	r1, [r2, #-4]
 800c18e:	2101      	movs	r1, #1
 800c190:	f10e 0e01 	add.w	lr, lr, #1
 800c194:	4608      	mov	r0, r1
 800c196:	e787      	b.n	800c0a8 <__kernel_rem_pio2f+0x15c>
 800c198:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800c19c:	e7f5      	b.n	800c18a <__kernel_rem_pio2f+0x23e>
 800c19e:	f104 3cff 	add.w	ip, r4, #4294967295
 800c1a2:	aa08      	add	r2, sp, #32
 800c1a4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c1a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c1ac:	a908      	add	r1, sp, #32
 800c1ae:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800c1b2:	e781      	b.n	800c0b8 <__kernel_rem_pio2f+0x16c>
 800c1b4:	f104 3cff 	add.w	ip, r4, #4294967295
 800c1b8:	aa08      	add	r2, sp, #32
 800c1ba:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c1be:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800c1c2:	e7f3      	b.n	800c1ac <__kernel_rem_pio2f+0x260>
 800c1c4:	a908      	add	r1, sp, #32
 800c1c6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c1ca:	3801      	subs	r0, #1
 800c1cc:	430a      	orrs	r2, r1
 800c1ce:	e7ab      	b.n	800c128 <__kernel_rem_pio2f+0x1dc>
 800c1d0:	3201      	adds	r2, #1
 800c1d2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800c1d6:	2e00      	cmp	r6, #0
 800c1d8:	d0fa      	beq.n	800c1d0 <__kernel_rem_pio2f+0x284>
 800c1da:	9905      	ldr	r1, [sp, #20]
 800c1dc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800c1e0:	eb0d 0001 	add.w	r0, sp, r1
 800c1e4:	18e6      	adds	r6, r4, r3
 800c1e6:	a91c      	add	r1, sp, #112	@ 0x70
 800c1e8:	f104 0c01 	add.w	ip, r4, #1
 800c1ec:	384c      	subs	r0, #76	@ 0x4c
 800c1ee:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800c1f2:	4422      	add	r2, r4
 800c1f4:	4562      	cmp	r2, ip
 800c1f6:	da04      	bge.n	800c202 <__kernel_rem_pio2f+0x2b6>
 800c1f8:	4614      	mov	r4, r2
 800c1fa:	e70e      	b.n	800c01a <__kernel_rem_pio2f+0xce>
 800c1fc:	9804      	ldr	r0, [sp, #16]
 800c1fe:	2201      	movs	r2, #1
 800c200:	e7e7      	b.n	800c1d2 <__kernel_rem_pio2f+0x286>
 800c202:	9903      	ldr	r1, [sp, #12]
 800c204:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c208:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800c20c:	9105      	str	r1, [sp, #20]
 800c20e:	ee07 1a90 	vmov	s15, r1
 800c212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c216:	2400      	movs	r4, #0
 800c218:	ece6 7a01 	vstmia	r6!, {s15}
 800c21c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800c250 <__kernel_rem_pio2f+0x304>
 800c220:	46b1      	mov	r9, r6
 800c222:	455c      	cmp	r4, fp
 800c224:	dd04      	ble.n	800c230 <__kernel_rem_pio2f+0x2e4>
 800c226:	ece0 7a01 	vstmia	r0!, {s15}
 800c22a:	f10c 0c01 	add.w	ip, ip, #1
 800c22e:	e7e1      	b.n	800c1f4 <__kernel_rem_pio2f+0x2a8>
 800c230:	ecfe 6a01 	vldmia	lr!, {s13}
 800c234:	ed39 7a01 	vldmdb	r9!, {s14}
 800c238:	3401      	adds	r4, #1
 800c23a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c23e:	e7f0      	b.n	800c222 <__kernel_rem_pio2f+0x2d6>
 800c240:	0800ce7c 	.word	0x0800ce7c
 800c244:	0800ce50 	.word	0x0800ce50
 800c248:	43800000 	.word	0x43800000
 800c24c:	3b800000 	.word	0x3b800000
 800c250:	00000000 	.word	0x00000000
 800c254:	9b02      	ldr	r3, [sp, #8]
 800c256:	eeb0 0a48 	vmov.f32	s0, s16
 800c25a:	eba3 0008 	sub.w	r0, r3, r8
 800c25e:	f000 f8e7 	bl	800c430 <scalbnf>
 800c262:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800c248 <__kernel_rem_pio2f+0x2fc>
 800c266:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c26e:	db19      	blt.n	800c2a4 <__kernel_rem_pio2f+0x358>
 800c270:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800c24c <__kernel_rem_pio2f+0x300>
 800c274:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c278:	aa08      	add	r2, sp, #32
 800c27a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c27e:	3508      	adds	r5, #8
 800c280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c284:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c28c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c290:	ee10 3a10 	vmov	r3, s0
 800c294:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c298:	ee17 3a90 	vmov	r3, s15
 800c29c:	3401      	adds	r4, #1
 800c29e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c2a2:	e74c      	b.n	800c13e <__kernel_rem_pio2f+0x1f2>
 800c2a4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c2a8:	aa08      	add	r2, sp, #32
 800c2aa:	ee10 3a10 	vmov	r3, s0
 800c2ae:	e7f6      	b.n	800c29e <__kernel_rem_pio2f+0x352>
 800c2b0:	a808      	add	r0, sp, #32
 800c2b2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c2b6:	9001      	str	r0, [sp, #4]
 800c2b8:	ee07 0a90 	vmov	s15, r0
 800c2bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c2c6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c2ca:	ed62 7a01 	vstmdb	r2!, {s15}
 800c2ce:	e743      	b.n	800c158 <__kernel_rem_pio2f+0x20c>
 800c2d0:	ecfc 6a01 	vldmia	ip!, {s13}
 800c2d4:	ecb5 7a01 	vldmia	r5!, {s14}
 800c2d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c2dc:	3001      	adds	r0, #1
 800c2de:	4550      	cmp	r0, sl
 800c2e0:	dc01      	bgt.n	800c2e6 <__kernel_rem_pio2f+0x39a>
 800c2e2:	4282      	cmp	r2, r0
 800c2e4:	daf4      	bge.n	800c2d0 <__kernel_rem_pio2f+0x384>
 800c2e6:	a858      	add	r0, sp, #352	@ 0x160
 800c2e8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c2ec:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	e735      	b.n	800c160 <__kernel_rem_pio2f+0x214>
 800c2f4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c2f6:	2b02      	cmp	r3, #2
 800c2f8:	dc09      	bgt.n	800c30e <__kernel_rem_pio2f+0x3c2>
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	dc2b      	bgt.n	800c356 <__kernel_rem_pio2f+0x40a>
 800c2fe:	d044      	beq.n	800c38a <__kernel_rem_pio2f+0x43e>
 800c300:	f009 0007 	and.w	r0, r9, #7
 800c304:	b059      	add	sp, #356	@ 0x164
 800c306:	ecbd 8b04 	vpop	{d8-d9}
 800c30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c30e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c310:	2b03      	cmp	r3, #3
 800c312:	d1f5      	bne.n	800c300 <__kernel_rem_pio2f+0x3b4>
 800c314:	aa30      	add	r2, sp, #192	@ 0xc0
 800c316:	1f0b      	subs	r3, r1, #4
 800c318:	4413      	add	r3, r2
 800c31a:	461a      	mov	r2, r3
 800c31c:	4620      	mov	r0, r4
 800c31e:	2800      	cmp	r0, #0
 800c320:	f1a2 0204 	sub.w	r2, r2, #4
 800c324:	dc52      	bgt.n	800c3cc <__kernel_rem_pio2f+0x480>
 800c326:	4622      	mov	r2, r4
 800c328:	2a01      	cmp	r2, #1
 800c32a:	f1a3 0304 	sub.w	r3, r3, #4
 800c32e:	dc5d      	bgt.n	800c3ec <__kernel_rem_pio2f+0x4a0>
 800c330:	ab30      	add	r3, sp, #192	@ 0xc0
 800c332:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800c250 <__kernel_rem_pio2f+0x304>
 800c336:	440b      	add	r3, r1
 800c338:	2c01      	cmp	r4, #1
 800c33a:	dc67      	bgt.n	800c40c <__kernel_rem_pio2f+0x4c0>
 800c33c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800c340:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800c344:	2e00      	cmp	r6, #0
 800c346:	d167      	bne.n	800c418 <__kernel_rem_pio2f+0x4cc>
 800c348:	edc7 6a00 	vstr	s13, [r7]
 800c34c:	ed87 7a01 	vstr	s14, [r7, #4]
 800c350:	edc7 7a02 	vstr	s15, [r7, #8]
 800c354:	e7d4      	b.n	800c300 <__kernel_rem_pio2f+0x3b4>
 800c356:	ab30      	add	r3, sp, #192	@ 0xc0
 800c358:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800c250 <__kernel_rem_pio2f+0x304>
 800c35c:	440b      	add	r3, r1
 800c35e:	4622      	mov	r2, r4
 800c360:	2a00      	cmp	r2, #0
 800c362:	da24      	bge.n	800c3ae <__kernel_rem_pio2f+0x462>
 800c364:	b34e      	cbz	r6, 800c3ba <__kernel_rem_pio2f+0x46e>
 800c366:	eef1 7a47 	vneg.f32	s15, s14
 800c36a:	edc7 7a00 	vstr	s15, [r7]
 800c36e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800c372:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c376:	aa31      	add	r2, sp, #196	@ 0xc4
 800c378:	2301      	movs	r3, #1
 800c37a:	429c      	cmp	r4, r3
 800c37c:	da20      	bge.n	800c3c0 <__kernel_rem_pio2f+0x474>
 800c37e:	b10e      	cbz	r6, 800c384 <__kernel_rem_pio2f+0x438>
 800c380:	eef1 7a67 	vneg.f32	s15, s15
 800c384:	edc7 7a01 	vstr	s15, [r7, #4]
 800c388:	e7ba      	b.n	800c300 <__kernel_rem_pio2f+0x3b4>
 800c38a:	ab30      	add	r3, sp, #192	@ 0xc0
 800c38c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800c250 <__kernel_rem_pio2f+0x304>
 800c390:	440b      	add	r3, r1
 800c392:	2c00      	cmp	r4, #0
 800c394:	da05      	bge.n	800c3a2 <__kernel_rem_pio2f+0x456>
 800c396:	b10e      	cbz	r6, 800c39c <__kernel_rem_pio2f+0x450>
 800c398:	eef1 7a67 	vneg.f32	s15, s15
 800c39c:	edc7 7a00 	vstr	s15, [r7]
 800c3a0:	e7ae      	b.n	800c300 <__kernel_rem_pio2f+0x3b4>
 800c3a2:	ed33 7a01 	vldmdb	r3!, {s14}
 800c3a6:	3c01      	subs	r4, #1
 800c3a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c3ac:	e7f1      	b.n	800c392 <__kernel_rem_pio2f+0x446>
 800c3ae:	ed73 7a01 	vldmdb	r3!, {s15}
 800c3b2:	3a01      	subs	r2, #1
 800c3b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c3b8:	e7d2      	b.n	800c360 <__kernel_rem_pio2f+0x414>
 800c3ba:	eef0 7a47 	vmov.f32	s15, s14
 800c3be:	e7d4      	b.n	800c36a <__kernel_rem_pio2f+0x41e>
 800c3c0:	ecb2 7a01 	vldmia	r2!, {s14}
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c3ca:	e7d6      	b.n	800c37a <__kernel_rem_pio2f+0x42e>
 800c3cc:	edd2 7a00 	vldr	s15, [r2]
 800c3d0:	edd2 6a01 	vldr	s13, [r2, #4]
 800c3d4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c3d8:	3801      	subs	r0, #1
 800c3da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c3de:	ed82 7a00 	vstr	s14, [r2]
 800c3e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3e6:	edc2 7a01 	vstr	s15, [r2, #4]
 800c3ea:	e798      	b.n	800c31e <__kernel_rem_pio2f+0x3d2>
 800c3ec:	edd3 7a00 	vldr	s15, [r3]
 800c3f0:	edd3 6a01 	vldr	s13, [r3, #4]
 800c3f4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c3f8:	3a01      	subs	r2, #1
 800c3fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c3fe:	ed83 7a00 	vstr	s14, [r3]
 800c402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c406:	edc3 7a01 	vstr	s15, [r3, #4]
 800c40a:	e78d      	b.n	800c328 <__kernel_rem_pio2f+0x3dc>
 800c40c:	ed33 7a01 	vldmdb	r3!, {s14}
 800c410:	3c01      	subs	r4, #1
 800c412:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c416:	e78f      	b.n	800c338 <__kernel_rem_pio2f+0x3ec>
 800c418:	eef1 6a66 	vneg.f32	s13, s13
 800c41c:	eeb1 7a47 	vneg.f32	s14, s14
 800c420:	edc7 6a00 	vstr	s13, [r7]
 800c424:	ed87 7a01 	vstr	s14, [r7, #4]
 800c428:	eef1 7a67 	vneg.f32	s15, s15
 800c42c:	e790      	b.n	800c350 <__kernel_rem_pio2f+0x404>
 800c42e:	bf00      	nop

0800c430 <scalbnf>:
 800c430:	ee10 3a10 	vmov	r3, s0
 800c434:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c438:	d02b      	beq.n	800c492 <scalbnf+0x62>
 800c43a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c43e:	d302      	bcc.n	800c446 <scalbnf+0x16>
 800c440:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c444:	4770      	bx	lr
 800c446:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c44a:	d123      	bne.n	800c494 <scalbnf+0x64>
 800c44c:	4b24      	ldr	r3, [pc, #144]	@ (800c4e0 <scalbnf+0xb0>)
 800c44e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c4e4 <scalbnf+0xb4>
 800c452:	4298      	cmp	r0, r3
 800c454:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c458:	db17      	blt.n	800c48a <scalbnf+0x5a>
 800c45a:	ee10 3a10 	vmov	r3, s0
 800c45e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c462:	3a19      	subs	r2, #25
 800c464:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c468:	4288      	cmp	r0, r1
 800c46a:	dd15      	ble.n	800c498 <scalbnf+0x68>
 800c46c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c4e8 <scalbnf+0xb8>
 800c470:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c4ec <scalbnf+0xbc>
 800c474:	ee10 3a10 	vmov	r3, s0
 800c478:	eeb0 7a67 	vmov.f32	s14, s15
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	bfb8      	it	lt
 800c480:	eef0 7a66 	vmovlt.f32	s15, s13
 800c484:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c488:	4770      	bx	lr
 800c48a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c4f0 <scalbnf+0xc0>
 800c48e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c492:	4770      	bx	lr
 800c494:	0dd2      	lsrs	r2, r2, #23
 800c496:	e7e5      	b.n	800c464 <scalbnf+0x34>
 800c498:	4410      	add	r0, r2
 800c49a:	28fe      	cmp	r0, #254	@ 0xfe
 800c49c:	dce6      	bgt.n	800c46c <scalbnf+0x3c>
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	dd06      	ble.n	800c4b0 <scalbnf+0x80>
 800c4a2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c4a6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c4aa:	ee00 3a10 	vmov	s0, r3
 800c4ae:	4770      	bx	lr
 800c4b0:	f110 0f16 	cmn.w	r0, #22
 800c4b4:	da09      	bge.n	800c4ca <scalbnf+0x9a>
 800c4b6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c4f0 <scalbnf+0xc0>
 800c4ba:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c4f4 <scalbnf+0xc4>
 800c4be:	ee10 3a10 	vmov	r3, s0
 800c4c2:	eeb0 7a67 	vmov.f32	s14, s15
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	e7d9      	b.n	800c47e <scalbnf+0x4e>
 800c4ca:	3019      	adds	r0, #25
 800c4cc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c4d0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c4d4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c4f8 <scalbnf+0xc8>
 800c4d8:	ee07 3a90 	vmov	s15, r3
 800c4dc:	e7d7      	b.n	800c48e <scalbnf+0x5e>
 800c4de:	bf00      	nop
 800c4e0:	ffff3cb0 	.word	0xffff3cb0
 800c4e4:	4c000000 	.word	0x4c000000
 800c4e8:	7149f2ca 	.word	0x7149f2ca
 800c4ec:	f149f2ca 	.word	0xf149f2ca
 800c4f0:	0da24260 	.word	0x0da24260
 800c4f4:	8da24260 	.word	0x8da24260
 800c4f8:	33000000 	.word	0x33000000

0800c4fc <floorf>:
 800c4fc:	ee10 3a10 	vmov	r3, s0
 800c500:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c504:	3a7f      	subs	r2, #127	@ 0x7f
 800c506:	2a16      	cmp	r2, #22
 800c508:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c50c:	dc2b      	bgt.n	800c566 <floorf+0x6a>
 800c50e:	2a00      	cmp	r2, #0
 800c510:	da12      	bge.n	800c538 <floorf+0x3c>
 800c512:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c578 <floorf+0x7c>
 800c516:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c51a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c51e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c522:	dd06      	ble.n	800c532 <floorf+0x36>
 800c524:	2b00      	cmp	r3, #0
 800c526:	da24      	bge.n	800c572 <floorf+0x76>
 800c528:	2900      	cmp	r1, #0
 800c52a:	4b14      	ldr	r3, [pc, #80]	@ (800c57c <floorf+0x80>)
 800c52c:	bf08      	it	eq
 800c52e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c532:	ee00 3a10 	vmov	s0, r3
 800c536:	4770      	bx	lr
 800c538:	4911      	ldr	r1, [pc, #68]	@ (800c580 <floorf+0x84>)
 800c53a:	4111      	asrs	r1, r2
 800c53c:	420b      	tst	r3, r1
 800c53e:	d0fa      	beq.n	800c536 <floorf+0x3a>
 800c540:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800c578 <floorf+0x7c>
 800c544:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c548:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c550:	ddef      	ble.n	800c532 <floorf+0x36>
 800c552:	2b00      	cmp	r3, #0
 800c554:	bfbe      	ittt	lt
 800c556:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800c55a:	fa40 f202 	asrlt.w	r2, r0, r2
 800c55e:	189b      	addlt	r3, r3, r2
 800c560:	ea23 0301 	bic.w	r3, r3, r1
 800c564:	e7e5      	b.n	800c532 <floorf+0x36>
 800c566:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c56a:	d3e4      	bcc.n	800c536 <floorf+0x3a>
 800c56c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c570:	4770      	bx	lr
 800c572:	2300      	movs	r3, #0
 800c574:	e7dd      	b.n	800c532 <floorf+0x36>
 800c576:	bf00      	nop
 800c578:	7149f2ca 	.word	0x7149f2ca
 800c57c:	bf800000 	.word	0xbf800000
 800c580:	007fffff 	.word	0x007fffff

0800c584 <_init>:
 800c584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c586:	bf00      	nop
 800c588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c58a:	bc08      	pop	{r3}
 800c58c:	469e      	mov	lr, r3
 800c58e:	4770      	bx	lr

0800c590 <_fini>:
 800c590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c592:	bf00      	nop
 800c594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c596:	bc08      	pop	{r3}
 800c598:	469e      	mov	lr, r3
 800c59a:	4770      	bx	lr
