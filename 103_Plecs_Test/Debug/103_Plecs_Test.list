
103_Plecs_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004434  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004614  08004614  00005614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004688  08004688  00006210  2**0
                  CONTENTS
  4 .ARM          00000000  08004688  08004688  00006210  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004688  08004688  00006210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004688  08004688  00005688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800468c  0800468c  0000568c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000200  08004690  00006200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005774  20000210  080046a0  00006210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005984  080046a0  00006984  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc1a  00000000  00000000  0000623e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e8b  00000000  00000000  00021e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000a8a3  00000000  00000000  00026ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c0  00000000  00000000  00031588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ae  00000000  00000000  00032648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031378  00000000  00000000  000338f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023d5a  00000000  00000000  00064c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00155f4b  00000000  00000000  000889c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000093  00000000  00000000  001de913  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cc0  00000000  00000000  001de9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  001e1668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00005dfc  00000000  00000000  001e16e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000708  00000000  00000000  001e74e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000210 	.word	0x20000210
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800459c 	.word	0x0800459c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000214 	.word	0x20000214
 800021c:	0800459c 	.word	0x0800459c

08000220 <__gedf2>:
 8000220:	f04f 3cff 	mov.w	ip, #4294967295
 8000224:	e006      	b.n	8000234 <__cmpdf2+0x4>
 8000226:	bf00      	nop

08000228 <__ledf2>:
 8000228:	f04f 0c01 	mov.w	ip, #1
 800022c:	e002      	b.n	8000234 <__cmpdf2+0x4>
 800022e:	bf00      	nop

08000230 <__cmpdf2>:
 8000230:	f04f 0c01 	mov.w	ip, #1
 8000234:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000238:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800023c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000240:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000244:	bf18      	it	ne
 8000246:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800024a:	d01b      	beq.n	8000284 <__cmpdf2+0x54>
 800024c:	b001      	add	sp, #4
 800024e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000252:	bf0c      	ite	eq
 8000254:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000258:	ea91 0f03 	teqne	r1, r3
 800025c:	bf02      	ittt	eq
 800025e:	ea90 0f02 	teqeq	r0, r2
 8000262:	2000      	moveq	r0, #0
 8000264:	4770      	bxeq	lr
 8000266:	f110 0f00 	cmn.w	r0, #0
 800026a:	ea91 0f03 	teq	r1, r3
 800026e:	bf58      	it	pl
 8000270:	4299      	cmppl	r1, r3
 8000272:	bf08      	it	eq
 8000274:	4290      	cmpeq	r0, r2
 8000276:	bf2c      	ite	cs
 8000278:	17d8      	asrcs	r0, r3, #31
 800027a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800027e:	f040 0001 	orr.w	r0, r0, #1
 8000282:	4770      	bx	lr
 8000284:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000288:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800028c:	d102      	bne.n	8000294 <__cmpdf2+0x64>
 800028e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000292:	d107      	bne.n	80002a4 <__cmpdf2+0x74>
 8000294:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000298:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800029c:	d1d6      	bne.n	800024c <__cmpdf2+0x1c>
 800029e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80002a2:	d0d3      	beq.n	800024c <__cmpdf2+0x1c>
 80002a4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop

080002ac <__aeabi_cdrcmple>:
 80002ac:	4684      	mov	ip, r0
 80002ae:	4610      	mov	r0, r2
 80002b0:	4662      	mov	r2, ip
 80002b2:	468c      	mov	ip, r1
 80002b4:	4619      	mov	r1, r3
 80002b6:	4663      	mov	r3, ip
 80002b8:	e000      	b.n	80002bc <__aeabi_cdcmpeq>
 80002ba:	bf00      	nop

080002bc <__aeabi_cdcmpeq>:
 80002bc:	b501      	push	{r0, lr}
 80002be:	f7ff ffb7 	bl	8000230 <__cmpdf2>
 80002c2:	2800      	cmp	r0, #0
 80002c4:	bf48      	it	mi
 80002c6:	f110 0f00 	cmnmi.w	r0, #0
 80002ca:	bd01      	pop	{r0, pc}

080002cc <__aeabi_dcmpeq>:
 80002cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80002d0:	f7ff fff4 	bl	80002bc <__aeabi_cdcmpeq>
 80002d4:	bf0c      	ite	eq
 80002d6:	2001      	moveq	r0, #1
 80002d8:	2000      	movne	r0, #0
 80002da:	f85d fb08 	ldr.w	pc, [sp], #8
 80002de:	bf00      	nop

080002e0 <__aeabi_dcmplt>:
 80002e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80002e4:	f7ff ffea 	bl	80002bc <__aeabi_cdcmpeq>
 80002e8:	bf34      	ite	cc
 80002ea:	2001      	movcc	r0, #1
 80002ec:	2000      	movcs	r0, #0
 80002ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80002f2:	bf00      	nop

080002f4 <__aeabi_dcmple>:
 80002f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80002f8:	f7ff ffe0 	bl	80002bc <__aeabi_cdcmpeq>
 80002fc:	bf94      	ite	ls
 80002fe:	2001      	movls	r0, #1
 8000300:	2000      	movhi	r0, #0
 8000302:	f85d fb08 	ldr.w	pc, [sp], #8
 8000306:	bf00      	nop

08000308 <__aeabi_dcmpge>:
 8000308:	f84d ed08 	str.w	lr, [sp, #-8]!
 800030c:	f7ff ffce 	bl	80002ac <__aeabi_cdrcmple>
 8000310:	bf94      	ite	ls
 8000312:	2001      	movls	r0, #1
 8000314:	2000      	movhi	r0, #0
 8000316:	f85d fb08 	ldr.w	pc, [sp], #8
 800031a:	bf00      	nop

0800031c <__aeabi_dcmpgt>:
 800031c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000320:	f7ff ffc4 	bl	80002ac <__aeabi_cdrcmple>
 8000324:	bf34      	ite	cc
 8000326:	2001      	movcc	r0, #1
 8000328:	2000      	movcs	r0, #0
 800032a:	f85d fb08 	ldr.w	pc, [sp], #8
 800032e:	bf00      	nop

08000330 <Subsystem_initialize>:
#define sin sinf
#define cos cosf
extern void Subsystem_initHal();

void Subsystem_initialize(void)
{
 8000330:	b538      	push	{r3, r4, r5, lr}
   Subsystem_tickHi = 0;
   Subsystem_tickLo = 0;
   /* Initialize sub-task tick counters */
   Subsystem_subTaskTick[0] = 0;    /* [0, 0], [0.05, 0] */
 8000332:	4b05      	ldr	r3, [pc, #20]	@ (8000348 <Subsystem_initialize+0x18>)
 8000334:	2400      	movs	r4, #0
 8000336:	2500      	movs	r5, #0
 8000338:	e9c3 4500 	strd	r4, r5, [r3]
   Subsystem_subTaskTick[1] = 0;    /* [0, 0], [0.5, 0] */


   /* Target pre-initialization */
   Subsystem_initHal();
 800033c:	f000 f8e2 	bl	8000504 <Subsystem_initHal>


   /* Initialization for Pulse Generator : 'Subsystem/Pulse\nGenerator' */
   Subsystem_D_uint32_t[0] = 0;
 8000340:	4b02      	ldr	r3, [pc, #8]	@ (800034c <Subsystem_initialize+0x1c>)
 8000342:	e9c3 4500 	strd	r4, r5, [r3]

   /* Initialization for Pulse Generator : 'Subsystem/Pulse\nGenerator1' */
   Subsystem_D_uint32_t[1] = 0;
}
 8000346:	bd38      	pop	{r3, r4, r5, pc}
 8000348:	20000250 	.word	0x20000250
 800034c:	20000240 	.word	0x20000240

08000350 <Subsystem_step>:

void Subsystem_step(void)
{
 8000350:	b570      	push	{r4, r5, r6, lr}
   if (Subsystem_errorStatus)
 8000352:	4c3c      	ldr	r4, [pc, #240]	@ (8000444 <Subsystem_step+0xf4>)
 8000354:	6820      	ldr	r0, [r4, #0]
 8000356:	b100      	cbz	r0, 800035a <Subsystem_step+0xa>
         {
            Subsystem_subTaskTick[i] = 0;
         }
      }
   }
}
 8000358:	bd70      	pop	{r4, r5, r6, pc}
         Subsystem_subTaskHit[i] = (Subsystem_subTaskTick[i] == 0);
 800035a:	4e3b      	ldr	r6, [pc, #236]	@ (8000448 <Subsystem_step+0xf8>)
 800035c:	4d3b      	ldr	r5, [pc, #236]	@ (800044c <Subsystem_step+0xfc>)
 800035e:	6833      	ldr	r3, [r6, #0]
 8000360:	fab3 f383 	clz	r3, r3
 8000364:	4602      	mov	r2, r0
 8000366:	095b      	lsrs	r3, r3, #5
 8000368:	f363 0207 	bfi	r2, r3, #0, #8
 800036c:	6873      	ldr	r3, [r6, #4]
 800036e:	fab3 f383 	clz	r3, r3
 8000372:	095b      	lsrs	r3, r3, #5
 8000374:	f363 220f 	bfi	r2, r3, #8, #8
 8000378:	802a      	strh	r2, [r5, #0]
   Subsystem_B.DigitalIn = PLXHAL_DIO_get(0);
 800037a:	f000 f891 	bl	80004a0 <PLXHAL_DIO_get>
 800037e:	ee07 0a90 	vmov	s15, r0
 8000382:	4b33      	ldr	r3, [pc, #204]	@ (8000450 <Subsystem_step+0x100>)
   if (Subsystem_subTaskHit[0])
 8000384:	782a      	ldrb	r2, [r5, #0]
   Subsystem_B.DigitalIn = PLXHAL_DIO_get(0);
 8000386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800038a:	edc3 7a03 	vstr	s15, [r3, #12]
   if (Subsystem_subTaskHit[0])
 800038e:	2a00      	cmp	r2, #0
 8000390:	d14a      	bne.n	8000428 <Subsystem_step+0xd8>
    0.f) ? Subsystem_B.PulseGenerator : Subsystem_B.PulseGenerator1;
 8000392:	ed93 7a00 	vldr	s14, [r3]
   if (Subsystem_subTaskHit[1])
 8000396:	786a      	ldrb	r2, [r5, #1]
 8000398:	2a00      	cmp	r2, #0
 800039a:	d138      	bne.n	800040e <Subsystem_step+0xbe>
    0.f) ? Subsystem_B.PulseGenerator : Subsystem_B.PulseGenerator1;
 800039c:	edd3 7a01 	vldr	s15, [r3, #4]
 80003a0:	2800      	cmp	r0, #0
 80003a2:	bf18      	it	ne
 80003a4:	eef0 7a47 	vmovne.f32	s15, s14
   PLXHAL_DIO_set(0, Subsystem_B.Switch);
 80003a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80003ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003b0:	bf14      	ite	ne
 80003b2:	2101      	movne	r1, #1
 80003b4:	2100      	moveq	r1, #0
 80003b6:	2000      	movs	r0, #0
   Subsystem_B.Switch =
 80003b8:	edc3 7a02 	vstr	s15, [r3, #8]
   PLXHAL_DIO_set(0, Subsystem_B.Switch);
 80003bc:	f000 f884 	bl	80004c8 <PLXHAL_DIO_set>
   if (Subsystem_errorStatus)
 80003c0:	6823      	ldr	r3, [r4, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d1c8      	bne.n	8000358 <Subsystem_step+0x8>
   if (Subsystem_subTaskHit[0])
 80003c6:	782a      	ldrb	r2, [r5, #0]
 80003c8:	b132      	cbz	r2, 80003d8 <Subsystem_step+0x88>
      Subsystem_D_uint32_t[0] += 1;
 80003ca:	4922      	ldr	r1, [pc, #136]	@ (8000454 <Subsystem_step+0x104>)
 80003cc:	680a      	ldr	r2, [r1, #0]
 80003ce:	3201      	adds	r2, #1
 80003d0:	2a01      	cmp	r2, #1
 80003d2:	bf98      	it	ls
 80003d4:	4613      	movls	r3, r2
 80003d6:	600b      	str	r3, [r1, #0]
   if (Subsystem_subTaskHit[1])
 80003d8:	786b      	ldrb	r3, [r5, #1]
 80003da:	b133      	cbz	r3, 80003ea <Subsystem_step+0x9a>
      Subsystem_D_uint32_t[1] += 1;
 80003dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000454 <Subsystem_step+0x104>)
 80003de:	6853      	ldr	r3, [r2, #4]
 80003e0:	3301      	adds	r3, #1
      if (Subsystem_D_uint32_t[1] > 1)
 80003e2:	2b01      	cmp	r3, #1
         Subsystem_D_uint32_t[1] = 0;
 80003e4:	bf88      	it	hi
 80003e6:	2300      	movhi	r3, #0
 80003e8:	6053      	str	r3, [r2, #4]
         Subsystem_subTaskTick[i]++;
 80003ea:	e9d6 3200 	ldrd	r3, r2, [r6]
 80003ee:	3301      	adds	r3, #1
            Subsystem_subTaskTick[i] = 0;
 80003f0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
         Subsystem_subTaskTick[i]++;
 80003f4:	f102 0201 	add.w	r2, r2, #1
         if (Subsystem_subTaskTick[i] >= Subsystem_subTaskPeriod[i])
 80003f8:	f241 3187 	movw	r1, #4999	@ 0x1387
            Subsystem_subTaskTick[i] = 0;
 80003fc:	bf28      	it	cs
 80003fe:	2300      	movcs	r3, #0
         if (Subsystem_subTaskTick[i] >= Subsystem_subTaskPeriod[i])
 8000400:	428a      	cmp	r2, r1
 8000402:	6033      	str	r3, [r6, #0]
            Subsystem_subTaskTick[i] = 0;
 8000404:	bf8a      	itet	hi
 8000406:	2300      	movhi	r3, #0
         Subsystem_subTaskTick[i]++;
 8000408:	6072      	strls	r2, [r6, #4]
            Subsystem_subTaskTick[i] = 0;
 800040a:	6073      	strhi	r3, [r6, #4]
}
 800040c:	bd70      	pop	{r4, r5, r6, pc}
      Subsystem_B.PulseGenerator1 = Subsystem_D_uint32_t[1] < 1 ? 1.f : 0.f;
 800040e:	4a11      	ldr	r2, [pc, #68]	@ (8000454 <Subsystem_step+0x104>)
 8000410:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8000458 <Subsystem_step+0x108>
 8000414:	6852      	ldr	r2, [r2, #4]
 8000416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800041a:	2a00      	cmp	r2, #0
 800041c:	bf08      	it	eq
 800041e:	eef0 7a66 	vmoveq.f32	s15, s13
 8000422:	edc3 7a01 	vstr	s15, [r3, #4]
 8000426:	e7bb      	b.n	80003a0 <Subsystem_step+0x50>
      Subsystem_B.PulseGenerator = Subsystem_D_uint32_t[0] < 1 ? 1.f : 0.f;
 8000428:	4a0a      	ldr	r2, [pc, #40]	@ (8000454 <Subsystem_step+0x104>)
 800042a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000458 <Subsystem_step+0x108>
 800042e:	6812      	ldr	r2, [r2, #0]
 8000430:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8000434:	2a00      	cmp	r2, #0
 8000436:	bf08      	it	eq
 8000438:	eeb0 7a67 	vmoveq.f32	s14, s15
 800043c:	ed83 7a00 	vstr	s14, [r3]
 8000440:	e7a9      	b.n	8000396 <Subsystem_step+0x46>
 8000442:	bf00      	nop
 8000444:	2000022c 	.word	0x2000022c
 8000448:	20000250 	.word	0x20000250
 800044c:	20000248 	.word	0x20000248
 8000450:	20000230 	.word	0x20000230
 8000454:	20000240 	.word	0x20000240
 8000458:	00000000 	.word	0x00000000

0800045c <Subsystem_syncTimers>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800045c:	4a02      	ldr	r2, [pc, #8]	@ (8000468 <Subsystem_syncTimers+0xc>)
 800045e:	6813      	ldr	r3, [r2, #0]
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6013      	str	r3, [r2, #0]

/* Timer Synchronization Code */
void Subsystem_syncTimers(void)
{
   LL_TIM_EnableCounter(TIM3);
}
 8000466:	4770      	bx	lr
 8000468:	40000400 	.word	0x40000400

0800046c <Subsystem_background>:

/* Background tasks */
void Subsystem_background(void)
{

}
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop

08000470 <Subsystem_enableTasksInterrupt>:
{
 8000470:	b508      	push	{r3, lr}
   HAL_NVIC_SetPriority(TIM3_IRQn,
 8000472:	201d      	movs	r0, #29
 8000474:	2200      	movs	r2, #0
 8000476:	2105      	movs	r1, #5
 8000478:	f000 fd7e 	bl	8000f78 <HAL_NVIC_SetPriority>
}
 800047c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000480:	201d      	movs	r0, #29
 8000482:	f000 bdb5 	b.w	8000ff0 <HAL_NVIC_EnableIRQ>
 8000486:	bf00      	nop

08000488 <Tasks>:
{
 8000488:	b508      	push	{r3, lr}
   Subsystem_step();
 800048a:	f7ff ff61 	bl	8000350 <Subsystem_step>
   DISPR_sampleScopes();
 800048e:	f000 faa7 	bl	80009e0 <DISPR_sampleScopes>
   return HAL_NVIC_GetPendingIRQ(TIM3_IRQn);
 8000492:	201d      	movs	r0, #29
 8000494:	f000 fdba 	bl	800100c <HAL_NVIC_GetPendingIRQ>
}
 8000498:	3800      	subs	r0, #0
 800049a:	bf18      	it	ne
 800049c:	2001      	movne	r0, #1
 800049e:	bd08      	pop	{r3, pc}

080004a0 <PLXHAL_DIO_get>:
   return PLX_DIO_get(DinHandles[aHandle]);
 80004a0:	4b08      	ldr	r3, [pc, #32]	@ (80004c4 <PLXHAL_DIO_get+0x24>)
 80004a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
__STATIC_INLINE bool PLX_DIO_get(PLX_DIO_Handle_t aHandle)
{
	PLX_DIO_Obj_t *obj = (PLX_DIO_Obj_t *)aHandle;
	if(obj->activeHigh)
	{
		return ((obj->gpio->IDR & obj->pin) != 0x00U) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80004a6:	681a      	ldr	r2, [r3, #0]
	if(obj->activeHigh)
 80004a8:	7999      	ldrb	r1, [r3, #6]
		return ((obj->gpio->IDR & obj->pin) != 0x00U) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80004aa:	6912      	ldr	r2, [r2, #16]
 80004ac:	889b      	ldrh	r3, [r3, #4]
	if(obj->activeHigh)
 80004ae:	b121      	cbz	r1, 80004ba <PLXHAL_DIO_get+0x1a>
		return ((obj->gpio->IDR & obj->pin) != 0x00U) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80004b0:	421a      	tst	r2, r3
 80004b2:	bf14      	ite	ne
 80004b4:	2001      	movne	r0, #1
 80004b6:	2000      	moveq	r0, #0
 80004b8:	4770      	bx	lr
	}
	else
	{
		return ((obj->gpio->IDR & obj->pin) != 0x00U) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 80004ba:	421a      	tst	r2, r3
 80004bc:	bf0c      	ite	eq
 80004be:	2001      	moveq	r0, #1
 80004c0:	2000      	movne	r0, #0
}
 80004c2:	4770      	bx	lr
 80004c4:	200002ac 	.word	0x200002ac

080004c8 <PLXHAL_DIO_set>:
   PLX_DIO_set(DoutHandles[aHandle], aVal);
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <PLXHAL_DIO_set+0x1c>)
 80004ca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

__STATIC_INLINE void PLX_DIO_set(PLX_DIO_Handle_t aHandle, bool aVal)
{
	PLX_DIO_Obj_t *obj = (PLX_DIO_Obj_t *)aHandle;

	if(obj->activeHigh)
 80004ce:	7998      	ldrb	r0, [r3, #6]
	{
	  if(aVal != GPIO_PIN_RESET)
	  {
	    obj->gpio->BSRR = (uint32_t)obj->pin;
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	889b      	ldrh	r3, [r3, #4]
	if(obj->activeHigh)
 80004d4:	b110      	cbz	r0, 80004dc <PLXHAL_DIO_set+0x14>
	  if(aVal != GPIO_PIN_RESET)
 80004d6:	b119      	cbz	r1, 80004e0 <PLXHAL_DIO_set+0x18>
	}
	else
	{
	  if(aVal == GPIO_PIN_RESET)
	  {
	    obj->gpio->BSRR = (uint32_t)obj->pin;
 80004d8:	6193      	str	r3, [r2, #24]
 80004da:	4770      	bx	lr
	  if(aVal == GPIO_PIN_RESET)
 80004dc:	2900      	cmp	r1, #0
 80004de:	d0fb      	beq.n	80004d8 <PLXHAL_DIO_set+0x10>
	  }
	  else
	  {
	    obj->gpio->BRR = (uint32_t)obj->pin;
 80004e0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80004e2:	4770      	bx	lr
 80004e4:	200002a0 	.word	0x200002a0

080004e8 <TIM3_IRQHandler>:
{
 80004e8:	b508      	push	{r3, lr}
   if (PLX_TIM_processInt(TimerHandles[0]))
 80004ea:	4b05      	ldr	r3, [pc, #20]	@ (8000500 <TIM3_IRQHandler+0x18>)
 80004ec:	6818      	ldr	r0, [r3, #0]
 80004ee:	f000 fc85 	bl	8000dfc <PLX_TIM_processInt>
 80004f2:	b900      	cbnz	r0, 80004f6 <TIM3_IRQHandler+0xe>
}
 80004f4:	bd08      	pop	{r3, pc}
 80004f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      DISPR_dispatch();
 80004fa:	f000 ba81 	b.w	8000a00 <DISPR_dispatch>
 80004fe:	bf00      	nop
 8000500:	20000294 	.word	0x20000294

08000504 <Subsystem_initHal>:
/* HAL Initialization Code */
static bool HalInitialized = false;
void Subsystem_initHal()
{
 8000504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   if(HalInitialized == true)
 8000508:	4b8f      	ldr	r3, [pc, #572]	@ (8000748 <Subsystem_initHal+0x244>)
 800050a:	781c      	ldrb	r4, [r3, #0]
{
 800050c:	b0ac      	sub	sp, #176	@ 0xb0
   if(HalInitialized == true)
 800050e:	b114      	cbz	r4, 8000516 <Subsystem_initHal+0x12>
         PLX_GPIO_setGpioConfig(PLX_PORTA, &gpioInit);
      }

   }
   PLX_TIM_start(TimerHandles[0], 0);
}
 8000510:	b02c      	add	sp, #176	@ 0xb0
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	4d8d      	ldr	r5, [pc, #564]	@ (800074c <Subsystem_initHal+0x248>)
   RCC_ClkInitTypeDef RCC_ClkInitStruct = {
 8000518:	9407      	str	r4, [sp, #28]
   RCC_OscInitTypeDef RCC_OscInitStruct = {
 800051a:	4621      	mov	r1, r4
 800051c:	2238      	movs	r2, #56	@ 0x38
   HalInitialized = true;
 800051e:	2601      	movs	r6, #1
   RCC_OscInitTypeDef RCC_OscInitStruct = {
 8000520:	a808      	add	r0, sp, #32
   HalInitialized = true;
 8000522:	701e      	strb	r6, [r3, #0]
   RCC_ClkInitTypeDef RCC_ClkInitStruct = {
 8000524:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000528:	e9cd 4405 	strd	r4, r4, [sp, #20]
   RCC_OscInitTypeDef RCC_OscInitStruct = {
 800052c:	f004 f80a 	bl	8004544 <memset>
   RCC_PeriphCLKInitTypeDef PeriphClkInit = {
 8000530:	4621      	mov	r1, r4
 8000532:	2254      	movs	r2, #84	@ 0x54
 8000534:	a816      	add	r0, sp, #88	@ 0x58
 8000536:	f004 f805 	bl	8004544 <memset>
   __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800053c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000540:	65ab      	str	r3, [r5, #88]	@ 0x58
 8000542:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8000544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
   HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000548:	4620      	mov	r0, r4
   __HAL_RCC_PWR_CLK_ENABLE();
 800054a:	9302      	str	r3, [sp, #8]
 800054c:	9b02      	ldr	r3, [sp, #8]
   HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800054e:	f000 fd6f 	bl	8001030 <HAL_PWREx_ControlVoltageScaling>
   __HAL_RCC_PWR_CLK_DISABLE();
 8000552:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8000554:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000558:	65ab      	str	r3, [r5, #88]	@ 0x58
   RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800055a:	2340      	movs	r3, #64	@ 0x40
   RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800055c:	2402      	movs	r4, #2
   RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800055e:	930c      	str	r3, [sp, #48]	@ 0x30
   if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000560:	a808      	add	r0, sp, #32
   RCC_OscInitStruct.PLL.PLLN            = 85;
 8000562:	2355      	movs	r3, #85	@ 0x55
   RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8000564:	f44f 7780 	mov.w	r7, #256	@ 0x100
   RCC_OscInitStruct.PLL.PLLN            = 85;
 8000568:	2504      	movs	r5, #4
 800056a:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
   RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 800056e:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
   RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV2;
 8000572:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
   RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8000576:	9408      	str	r4, [sp, #32]
   RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8000578:	970b      	str	r7, [sp, #44]	@ 0x2c
   RCC_OscInitStruct.PLL.PLLR            = RCC_PLLR_DIV2;
 800057a:	9415      	str	r4, [sp, #84]	@ 0x54
   if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f000 fdca 	bl	8001114 <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	b108      	cbz	r0, 8000588 <Subsystem_initHal+0x84>
      PLX_ASSERT(0);
 8000584:	beff      	bkpt	0x00ff
 8000586:	e7fe      	b.n	8000586 <Subsystem_initHal+0x82>
   RCC_ClkInitStruct.APB1CLKDivider      = RCC_HCLK_DIV1;
 8000588:	e9cd 3305 	strd	r3, r3, [sp, #20]
   RCC_ClkInitStruct.APB2CLKDivider      = RCC_HCLK_DIV1;
 800058c:	9307      	str	r3, [sp, #28]
   RCC_ClkInitStruct.SYSCLKSource        = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	f04f 0903 	mov.w	r9, #3
 8000592:	230f      	movs	r3, #15
   if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000594:	a803      	add	r0, sp, #12
 8000596:	4629      	mov	r1, r5
   RCC_ClkInitStruct.SYSCLKSource        = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	e9cd 3903 	strd	r3, r9, [sp, #12]
   if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800059c:	f001 f834 	bl	8001608 <HAL_RCC_ClockConfig>
 80005a0:	b108      	cbz	r0, 80005a6 <Subsystem_initHal+0xa2>
      PLX_ASSERT(0);
 80005a2:	beff      	bkpt	0x00ff
 80005a4:	e7fe      	b.n	80005a4 <Subsystem_initHal+0xa0>
   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC12|
 80005a6:	f44f 2319 	mov.w	r3, #626688	@ 0x99000
 80005aa:	9316      	str	r3, [sp, #88]	@ 0x58
   PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80005ac:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 80005b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005b4:	e9cd 1327 	strd	r1, r3, [sp, #156]	@ 0x9c
   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005bc:	932a      	str	r3, [sp, #168]	@ 0xa8
   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005be:	a816      	add	r0, sp, #88	@ 0x58
   PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80005c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80005c4:	9324      	str	r3, [sp, #144]	@ 0x90
   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c6:	f001 f947 	bl	8001858 <HAL_RCCEx_PeriphCLKConfig>
 80005ca:	4680      	mov	r8, r0
 80005cc:	b948      	cbnz	r0, 80005e2 <Subsystem_initHal+0xde>
   SystemCoreClockUpdate();
 80005ce:	f000 fc5b 	bl	8000e88 <SystemCoreClockUpdate>
   PLX_ASSERT(SystemCoreClock == 170000000L);
 80005d2:	4b5f      	ldr	r3, [pc, #380]	@ (8000750 <Subsystem_initHal+0x24c>)
 80005d4:	f8d3 a000 	ldr.w	sl, [r3]
 80005d8:	4b5e      	ldr	r3, [pc, #376]	@ (8000754 <Subsystem_initHal+0x250>)
 80005da:	459a      	cmp	sl, r3
 80005dc:	d003      	beq.n	80005e6 <Subsystem_initHal+0xe2>
 80005de:	beff      	bkpt	0x00ff
 80005e0:	e7fe      	b.n	80005e0 <Subsystem_initHal+0xdc>
      PLX_ASSERT(0);
 80005e2:	beff      	bkpt	0x00ff
 80005e4:	e7fe      	b.n	80005e4 <Subsystem_initHal+0xe0>
   PLX_ASSERT( HAL_RCC_GetPCLK1Freq() == 170000000L);
 80005e6:	f001 f913 	bl	8001810 <HAL_RCC_GetPCLK1Freq>
 80005ea:	4550      	cmp	r0, sl
 80005ec:	d001      	beq.n	80005f2 <Subsystem_initHal+0xee>
 80005ee:	beff      	bkpt	0x00ff
 80005f0:	e7fe      	b.n	80005f0 <Subsystem_initHal+0xec>
      PLX_GPIO_sinit();
 80005f2:	f000 fa95 	bl	8000b20 <PLX_GPIO_sinit>
         gpioInit.Pin = LL_GPIO_PIN_13;
 80005f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
         PLX_GPIO_setGpioConfig(PLX_PORTC, &gpioInit);
 80005fa:	a916      	add	r1, sp, #88	@ 0x58
 80005fc:	4620      	mov	r0, r4
         gpioInit.Pin = LL_GPIO_PIN_13;
 80005fe:	9316      	str	r3, [sp, #88]	@ 0x58
         gpioInit.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000600:	e9cd 8417 	strd	r8, r4, [sp, #92]	@ 0x5c
         LL_GPIO_InitTypeDef gpioInit = {
 8000604:	e9cd 8819 	strd	r8, r8, [sp, #100]	@ 0x64
 8000608:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
         PLX_GPIO_setGpioConfig(PLX_PORTC, &gpioInit);
 800060c:	f000 fad6 	bl	8000bbc <PLX_GPIO_setGpioConfig>
   PilHandle = PIL_init(&PilObj, sizeof(PilObj));
 8000610:	f240 7144 	movw	r1, #1860	@ 0x744
 8000614:	4850      	ldr	r0, [pc, #320]	@ (8000758 <Subsystem_initHal+0x254>)
 8000616:	f8df a180 	ldr.w	sl, [pc, #384]	@ 8000798 <Subsystem_initHal+0x294>
 800061a:	f001 ff8f 	bl	800253c <PIL_init>
   PIL_setGuid(PilHandle, PIL_GUID_PTR);
 800061e:	494f      	ldr	r1, [pc, #316]	@ (800075c <Subsystem_initHal+0x258>)
   PilHandle = PIL_init(&PilObj, sizeof(PilObj));
 8000620:	f8ca 0000 	str.w	r0, [sl]
   PIL_setGuid(PilHandle, PIL_GUID_PTR);
 8000624:	f001 fe10 	bl	8002248 <PIL_setGuid>
   PIL_setChecksum(PilHandle, Subsystem_checksum);
 8000628:	4b4d      	ldr	r3, [pc, #308]	@ (8000760 <Subsystem_initHal+0x25c>)
 800062a:	f8da 0000 	ldr.w	r0, [sl]
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	f001 fe32 	bl	8002298 <PIL_setChecksum>
   PIL_setAndConfigScopeBuffer(PilHandle, (uint16_t *)&ScopeBuffer, 10008, 4);
 8000634:	f8da 0000 	ldr.w	r0, [sl]
 8000638:	494a      	ldr	r1, [pc, #296]	@ (8000764 <Subsystem_initHal+0x260>)
 800063a:	462b      	mov	r3, r5
 800063c:	f242 7218 	movw	r2, #10008	@ 0x2718
 8000640:	f001 feba 	bl	80023b8 <PIL_setAndConfigScopeBuffer>
   PIL_configureParallelCom(PilHandle, PARALLEL_COM_PROTOCOL,
 8000644:	463b      	mov	r3, r7
 8000646:	f8da 0000 	ldr.w	r0, [sl]
         TimerHandles[i] = PLX_TIM_init(&TimerObj[i], sizeof(TimerObj[i]));
 800064a:	4d47      	ldr	r5, [pc, #284]	@ (8000768 <Subsystem_initHal+0x264>)
   PIL_configureParallelCom(PilHandle, PARALLEL_COM_PROTOCOL,
 800064c:	4649      	mov	r1, r9
 800064e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000652:	f001 fea5 	bl	80023a0 <PIL_configureParallelCom>
         DinHandles[i] = PLX_DIO_init(&DinObj[i], sizeof(DinObj[i]));
 8000656:	2108      	movs	r1, #8
 8000658:	4844      	ldr	r0, [pc, #272]	@ (800076c <Subsystem_initHal+0x268>)
 800065a:	f000 f8a9 	bl	80007b0 <PLX_DIO_init>
 800065e:	4b44      	ldr	r3, [pc, #272]	@ (8000770 <Subsystem_initHal+0x26c>)
   PLX_DIO_configureIn(DinHandles[0], PLX_PORTC, 13, true);
 8000660:	220d      	movs	r2, #13
         DinHandles[i] = PLX_DIO_init(&DinObj[i], sizeof(DinObj[i]));
 8000662:	6018      	str	r0, [r3, #0]
   PLX_DIO_configureIn(DinHandles[0], PLX_PORTC, 13, true);
 8000664:	4621      	mov	r1, r4
 8000666:	4633      	mov	r3, r6
 8000668:	f000 f8a6 	bl	80007b8 <PLX_DIO_configureIn>
         DoutHandles[i] = PLX_DIO_init(&DoutObj[i], sizeof(DoutObj[i]));
 800066c:	2108      	movs	r1, #8
 800066e:	4841      	ldr	r0, [pc, #260]	@ (8000774 <Subsystem_initHal+0x270>)
 8000670:	f000 f89e 	bl	80007b0 <PLX_DIO_init>
 8000674:	4b40      	ldr	r3, [pc, #256]	@ (8000778 <Subsystem_initHal+0x274>)
   PLX_DIO_configureOut(DoutHandles[0], PLX_PORTA, 5, true);
 8000676:	2205      	movs	r2, #5
         DoutHandles[i] = PLX_DIO_init(&DoutObj[i], sizeof(DoutObj[i]));
 8000678:	6018      	str	r0, [r3, #0]
   PLX_DIO_configureOut(DoutHandles[0], PLX_PORTA, 5, true);
 800067a:	4641      	mov	r1, r8
 800067c:	4633      	mov	r3, r6
 800067e:	f000 f8a9 	bl	80007d4 <PLX_DIO_configureOut>
      PLX_TIM_sinit();
 8000682:	f000 faad 	bl	8000be0 <PLX_TIM_sinit>
         TimerHandles[i] = PLX_TIM_init(&TimerObj[i], sizeof(TimerObj[i]));
 8000686:	2124      	movs	r1, #36	@ 0x24
 8000688:	483c      	ldr	r0, [pc, #240]	@ (800077c <Subsystem_initHal+0x278>)
 800068a:	f000 fb01 	bl	8000c90 <PLX_TIM_init>
      PLX_TIM_setup(TimerHandles[0], PLX_TIM3, &initStruct, 0, 10000.000000);
 800068e:	4b3c      	ldr	r3, [pc, #240]	@ (8000780 <Subsystem_initHal+0x27c>)
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	4621      	mov	r1, r4
         TimerHandles[i] = PLX_TIM_init(&TimerObj[i], sizeof(TimerObj[i]));
 8000694:	6028      	str	r0, [r5, #0]
      PLX_TIM_setup(TimerHandles[0], PLX_TIM3, &initStruct, 0, 10000.000000);
 8000696:	aa16      	add	r2, sp, #88	@ 0x58
 8000698:	4643      	mov	r3, r8
      initStruct.Autoreload = 17000-1;
 800069a:	f244 2767 	movw	r7, #16999	@ 0x4267
      LL_TIM_InitTypeDef initStruct = {
 800069e:	e9cd 8816 	strd	r8, r8, [sp, #88]	@ 0x58
 80006a2:	e9cd 8819 	strd	r8, r8, [sp, #100]	@ 0x64
      initStruct.Autoreload = 17000-1;
 80006a6:	9718      	str	r7, [sp, #96]	@ 0x60
      PLX_TIM_setup(TimerHandles[0], PLX_TIM3, &initStruct, 0, 10000.000000);
 80006a8:	f000 faf6 	bl	8000c98 <PLX_TIM_setup>
typedef PLX_TIM_Obj_t *PLX_TIM_Handle_t;

__STATIC_INLINE TIM_TypeDef* PLX_TIM_getStmLLHandle(PLX_TIM_Handle_t aHandle)
{
	PLX_TIM_Obj_t *obj = (PLX_TIM_Obj_t *)aHandle;
	return obj->instance;
 80006ac:	682b      	ldr	r3, [r5, #0]
 80006ae:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_TIM_SLAVEMODE_COMBINED_GATEDRESET
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 80006b0:	689a      	ldr	r2, [r3, #8]
 80006b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80006b6:	f022 0207 	bic.w	r2, r2, #7
 80006ba:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_TIM_TS_ITR11
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 80006bc:	689a      	ldr	r2, [r3, #8]
 80006be:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80006c2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80006c6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80006c8:	685a      	ldr	r2, [r3, #4]
 80006ca:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80006ce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80006d2:	f042 0220 	orr.w	r2, r2, #32
 80006d6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80006d8:	685a      	ldr	r2, [r3, #4]
 80006da:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80006de:	605a      	str	r2, [r3, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80006e0:	689a      	ldr	r2, [r3, #8]
 80006e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80006e6:	609a      	str	r2, [r3, #8]
   DISPR_sinit();
 80006e8:	f000 f888 	bl	80007fc <DISPR_sinit>
   DISPR_configure((uint32_t)(17000), PilHandle, &TaskObj[0],
 80006ec:	4633      	mov	r3, r6
 80006ee:	f8da 1000 	ldr.w	r1, [sl]
 80006f2:	4a24      	ldr	r2, [pc, #144]	@ (8000784 <Subsystem_initHal+0x280>)
 80006f4:	f244 2068 	movw	r0, #17000	@ 0x4268
 80006f8:	f000 f88e 	bl	8000818 <DISPR_configure>
   DISPR_registerIdleTask(&Subsystem_background);
 80006fc:	4822      	ldr	r0, [pc, #136]	@ (8000788 <Subsystem_initHal+0x284>)
 80006fe:	f000 f8b1 	bl	8000864 <DISPR_registerIdleTask>
   DISPR_registerSyncCallback(&Subsystem_syncTimers);
 8000702:	4822      	ldr	r0, [pc, #136]	@ (800078c <Subsystem_initHal+0x288>)
 8000704:	f000 f8b4 	bl	8000870 <DISPR_registerSyncCallback>
   DISPR_registerEnableInterrupt(&Subsystem_enableTasksInterrupt);
 8000708:	4821      	ldr	r0, [pc, #132]	@ (8000790 <Subsystem_initHal+0x28c>)
 800070a:	f000 f8b7 	bl	800087c <DISPR_registerEnableInterrupt>
   DISPR_setPowerupDelay(10);
 800070e:	200a      	movs	r0, #10
 8000710:	f000 f8ba 	bl	8000888 <DISPR_setPowerupDelay>
      DISPR_registerTask(0, &Tasks, 17000L);
 8000714:	4640      	mov	r0, r8
 8000716:	491f      	ldr	r1, [pc, #124]	@ (8000794 <Subsystem_initHal+0x290>)
 8000718:	f244 2268 	movw	r2, #17000	@ 0x4268
 800071c:	f000 f8ba 	bl	8000894 <DISPR_registerTask>
         PLX_GPIO_setGpioConfig(PLX_PORTA, &gpioInit);
 8000720:	4640      	mov	r0, r8
 8000722:	a916      	add	r1, sp, #88	@ 0x58
         gpioInit.Pin = LL_GPIO_PIN_5;
 8000724:	2220      	movs	r2, #32
 8000726:	2301      	movs	r3, #1
         LL_GPIO_InitTypeDef gpioInit = {
 8000728:	e9cd 8819 	strd	r8, r8, [sp, #100]	@ 0x64
         gpioInit.Pin = LL_GPIO_PIN_5;
 800072c:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
         gpioInit.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000730:	9418      	str	r4, [sp, #96]	@ 0x60
         LL_GPIO_InitTypeDef gpioInit = {
 8000732:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
         PLX_GPIO_setGpioConfig(PLX_PORTA, &gpioInit);
 8000736:	f000 fa41 	bl	8000bbc <PLX_GPIO_setGpioConfig>
   PLX_TIM_start(TimerHandles[0], 0);
 800073a:	6828      	ldr	r0, [r5, #0]
 800073c:	4641      	mov	r1, r8
}
 800073e:	b02c      	add	sp, #176	@ 0xb0
 8000740:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   PLX_TIM_start(TimerHandles[0], 0);
 8000744:	f000 bb16 	b.w	8000d74 <PLX_TIM_start>
 8000748:	20000258 	.word	0x20000258
 800074c:	40021000 	.word	0x40021000
 8000750:	20000204 	.word	0x20000204
 8000754:	0a21fe80 	.word	0x0a21fe80
 8000758:	200050e4 	.word	0x200050e4
 800075c:	080045f4 	.word	0x080045f4
 8000760:	08004640 	.word	0x08004640
 8000764:	200002b0 	.word	0x200002b0
 8000768:	20000294 	.word	0x20000294
 800076c:	200002a4 	.word	0x200002a4
 8000770:	200002ac 	.word	0x200002ac
 8000774:	20000298 	.word	0x20000298
 8000778:	200002a0 	.word	0x200002a0
 800077c:	20000270 	.word	0x20000270
 8000780:	461c4000 	.word	0x461c4000
 8000784:	2000025c 	.word	0x2000025c
 8000788:	0800046d 	.word	0x0800046d
 800078c:	0800045d 	.word	0x0800045d
 8000790:	08000471 	.word	0x08000471
 8000794:	08000489 	.word	0x08000489
 8000798:	200050e0 	.word	0x200050e0

0800079c <main>:
#error TSP Version mismatch.
#endif
#endif

int main(void)
{
 800079c:	b508      	push	{r3, lr}
   HAL_Init();
 800079e:	f000 fbb7 	bl	8000f10 <HAL_Init>

   Subsystem_initialize();
 80007a2:	f7ff fdc5 	bl	8000330 <Subsystem_initialize>

   DISPR_start();
 80007a6:	f000 f8ad 	bl	8000904 <DISPR_start>
   //should never get here
   PLX_ASSERT(0);
 80007aa:	beff      	bkpt	0x00ff
 80007ac:	e7fe      	b.n	80007ac <main+0x10>
 80007ae:	bf00      	nop

080007b0 <PLX_DIO_init>:
		return((PLX_DIO_Handle_t)NULL);

	// set handle
	handle = (PLX_DIO_Handle_t)aMemory;

	return handle;
 80007b0:	2907      	cmp	r1, #7
}
 80007b2:	bf98      	it	ls
 80007b4:	2000      	movls	r0, #0
 80007b6:	4770      	bx	lr

080007b8 <PLX_DIO_configureIn>:

void PLX_DIO_configureIn(PLX_DIO_Handle_t aHandle, PLX_GPIO_Port_t aPort, uint16_t aPin, bool activeHigh)
{
 80007b8:	b538      	push	{r3, r4, r5, lr}
 80007ba:	4604      	mov	r4, r0
	PLX_DIO_Obj_t *obj = (PLX_DIO_Obj_t *)aHandle;

	obj->activeHigh = activeHigh;
 80007bc:	7183      	strb	r3, [r0, #6]
	obj->gpio = PLX_GPIO_getBase(aPort);
 80007be:	4608      	mov	r0, r1
{
 80007c0:	4615      	mov	r5, r2
	obj->gpio = PLX_GPIO_getBase(aPort);
 80007c2:	f000 fa05 	bl	8000bd0 <PLX_GPIO_getBase>
	obj->pin = (uint16_t)(0x0001 << aPin);
 80007c6:	2301      	movs	r3, #1
 80007c8:	fa03 f205 	lsl.w	r2, r3, r5
	obj->gpio = PLX_GPIO_getBase(aPort);
 80007cc:	6020      	str	r0, [r4, #0]
	obj->pin = (uint16_t)(0x0001 << aPin);
 80007ce:	80a2      	strh	r2, [r4, #4]
}
 80007d0:	bd38      	pop	{r3, r4, r5, pc}
 80007d2:	bf00      	nop

080007d4 <PLX_DIO_configureOut>:

void PLX_DIO_configureOut(PLX_DIO_Handle_t aHandle, PLX_GPIO_Port_t aPort, uint16_t aPin, bool activeHigh)
{
 80007d4:	b538      	push	{r3, r4, r5, lr}
 80007d6:	4604      	mov	r4, r0
	PLX_DIO_Obj_t *obj = (PLX_DIO_Obj_t *)aHandle;

	obj->activeHigh = activeHigh;
 80007d8:	7183      	strb	r3, [r0, #6]
	obj->gpio = PLX_GPIO_getBase(aPort);
 80007da:	4608      	mov	r0, r1
{
 80007dc:	4615      	mov	r5, r2
	obj->gpio = PLX_GPIO_getBase(aPort);
 80007de:	f000 f9f7 	bl	8000bd0 <PLX_GPIO_getBase>
	obj->pin = (uint16_t)(0x0001 << aPin);
 80007e2:	2301      	movs	r3, #1
	if(obj->activeHigh)
 80007e4:	79a1      	ldrb	r1, [r4, #6]
	obj->gpio = PLX_GPIO_getBase(aPort);
 80007e6:	6020      	str	r0, [r4, #0]
	obj->pin = (uint16_t)(0x0001 << aPin);
 80007e8:	fa03 f205 	lsl.w	r2, r3, r5
 80007ec:	80a2      	strh	r2, [r4, #4]
	    obj->gpio->BRR = (uint32_t)obj->pin;
 80007ee:	b292      	uxth	r2, r2
	if(obj->activeHigh)
 80007f0:	b109      	cbz	r1, 80007f6 <PLX_DIO_configureOut+0x22>
	    obj->gpio->BRR = (uint32_t)obj->pin;
 80007f2:	6282      	str	r2, [r0, #40]	@ 0x28

	PLX_DIO_set(aHandle, false);
}
 80007f4:	bd38      	pop	{r3, r4, r5, pc}
	    obj->gpio->BSRR = (uint32_t)obj->pin;
 80007f6:	6182      	str	r2, [r0, #24]
 80007f8:	bd38      	pop	{r3, r4, r5, pc}
 80007fa:	bf00      	nop

080007fc <DISPR_sinit>:
static void DISPR_tasks(void*);
#endif

void DISPR_sinit()
{
   DisprHandle = (DISPR_Handle_t)&DisprObj;
 80007fc:	4b04      	ldr	r3, [pc, #16]	@ (8000810 <DISPR_sinit+0x14>)
 80007fe:	4905      	ldr	r1, [pc, #20]	@ (8000814 <DISPR_sinit+0x18>)

   DISPR_Obj_t *obj = (DISPR_Obj_t *)DisprHandle;
   obj->numTasks = 0;
 8000800:	2200      	movs	r2, #0
   obj->idleTask = (DISPR_IdleTaskPtr_t)0;
 8000802:	e9c3 2203 	strd	r2, r2, [r3, #12]
   DisprHandle = (DISPR_Handle_t)&DisprObj;
 8000806:	600b      	str	r3, [r1, #0]
   obj->numTasks = 0;
 8000808:	811a      	strh	r2, [r3, #8]
   obj->syncCallback = (DISPR_SyncCallbackPtr_t)0;
   obj->enableInterrupt = (DISPR_EnableInterruptPtr_t)0;
 800080a:	615a      	str	r2, [r3, #20]
}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20005878 	.word	0x20005878
 8000814:	20005874 	.word	0x20005874

08000818 <DISPR_configure>:

void DISPR_configure(uint32_t aPeriodInSysClkTicks, PIL_Handle_t aPilHandle, DISPR_TaskObj_t *aTskMemory, uint16_t aNumTasks)
{
 8000818:	b530      	push	{r4, r5, lr}

   if (ARM_CM_DWT_CTRL != 0)  // See if DWT is available
 800081a:	4c10      	ldr	r4, [pc, #64]	@ (800085c <DISPR_configure+0x44>)
{
 800081c:	4605      	mov	r5, r0
 800081e:	4608      	mov	r0, r1
   if (ARM_CM_DWT_CTRL != 0)  // See if DWT is available
 8000820:	6821      	ldr	r1, [r4, #0]
 8000822:	b161      	cbz	r1, 800083e <DISPR_configure+0x26>
   {
      ARM_CM_DEMCR      |= 1 << 24;  // Set bit 24 to enable DWT (and ITM) features
      ARM_CM_DWT_CYCCNT  = 0;
      ARM_CM_DWT_CTRL   |= 1 << 0;   // Set bit 0 to enable cycle count register
 8000824:	f041 0101 	orr.w	r1, r1, #1
 8000828:	6021      	str	r1, [r4, #0]
      ARM_CM_DEMCR      |= 1 << 24;  // Set bit 24 to enable DWT (and ITM) features
 800082a:	f04f 2ee0 	mov.w	lr, #3758153728	@ 0xe000e000
      ARM_CM_DWT_CYCCNT  = 0;
 800082e:	2100      	movs	r1, #0
 8000830:	6061      	str	r1, [r4, #4]
      ARM_CM_DEMCR      |= 1 << 24;  // Set bit 24 to enable DWT (and ITM) features
 8000832:	f8de 1dfc 	ldr.w	r1, [lr, #3580]	@ 0xdfc
 8000836:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 800083a:	f8ce 1dfc 	str.w	r1, [lr, #3580]	@ 0xdfc
   }

   PLX_ASSERT(aNumTasks >= 1);
 800083e:	b90b      	cbnz	r3, 8000844 <DISPR_configure+0x2c>
 8000840:	beff      	bkpt	0x00ff
 8000842:	e7fe      	b.n	8000842 <DISPR_configure+0x2a>
   PLX_ASSERT(aNumTasks <= 16); // number of tasks limited by size of tasksReadyFlags
 8000844:	2b10      	cmp	r3, #16
 8000846:	d901      	bls.n	800084c <DISPR_configure+0x34>
 8000848:	beff      	bkpt	0x00ff
 800084a:	e7fe      	b.n	800084a <DISPR_configure+0x32>
   DISPR_Obj_t *obj = (DISPR_Obj_t *)DisprHandle;
 800084c:	4904      	ldr	r1, [pc, #16]	@ (8000860 <DISPR_configure+0x48>)
 800084e:	6809      	ldr	r1, [r1, #0]
   obj->periodInSysClkTicks = aPeriodInSysClkTicks;
 8000850:	600d      	str	r5, [r1, #0]
   obj->pilHandle = aPilHandle;
 8000852:	61c8      	str	r0, [r1, #28]
   obj->tskMemory = aTskMemory;
 8000854:	604a      	str	r2, [r1, #4]
   obj->numTasks = aNumTasks;
 8000856:	810b      	strh	r3, [r1, #8]
}
 8000858:	bd30      	pop	{r4, r5, pc}
 800085a:	bf00      	nop
 800085c:	e0001000 	.word	0xe0001000
 8000860:	20005874 	.word	0x20005874

08000864 <DISPR_registerIdleTask>:

void DISPR_registerIdleTask(DISPR_IdleTaskPtr_t aTsk)
{
   DISPR_Obj_t *obj = (DISPR_Obj_t *)DisprHandle;
   obj->idleTask = aTsk;
 8000864:	4b01      	ldr	r3, [pc, #4]	@ (800086c <DISPR_registerIdleTask+0x8>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	60d8      	str	r0, [r3, #12]
}
 800086a:	4770      	bx	lr
 800086c:	20005874 	.word	0x20005874

08000870 <DISPR_registerSyncCallback>:

void DISPR_registerSyncCallback(DISPR_SyncCallbackPtr_t aCallback)
{
   DISPR_Obj_t *obj = (DISPR_Obj_t *)DisprHandle;
   obj->syncCallback = aCallback;
 8000870:	4b01      	ldr	r3, [pc, #4]	@ (8000878 <DISPR_registerSyncCallback+0x8>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	6118      	str	r0, [r3, #16]
}
 8000876:	4770      	bx	lr
 8000878:	20005874 	.word	0x20005874

0800087c <DISPR_registerEnableInterrupt>:

void DISPR_registerEnableInterrupt(DISPR_EnableInterruptPtr_t aFcn)
{
   DISPR_Obj_t *obj = (DISPR_Obj_t *)DisprHandle;
   obj->enableInterrupt = aFcn;
 800087c:	4b01      	ldr	r3, [pc, #4]	@ (8000884 <DISPR_registerEnableInterrupt+0x8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	6158      	str	r0, [r3, #20]
}
 8000882:	4770      	bx	lr
 8000884:	20005874 	.word	0x20005874

08000888 <DISPR_setPowerupDelay>:

void DISPR_setPowerupDelay(uint16_t aTask1Ticks)
{
   DISPR_Obj_t *obj = (DISPR_Obj_t *)DisprHandle;
   obj->powerupDelayIntTask1Ticks = aTask1Ticks;
 8000888:	4b01      	ldr	r3, [pc, #4]	@ (8000890 <DISPR_setPowerupDelay+0x8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	8318      	strh	r0, [r3, #24]
}
 800088e:	4770      	bx	lr
 8000890:	20005874 	.word	0x20005874

08000894 <DISPR_registerTask>:

#ifdef PLX_BARE_METAL_SCHEDULER

void DISPR_registerTask(uint16_t aTaskId, DISPR_TaskPtr_t aTsk, uint32_t aPeriodInTimerTicks)
{
   DISPR_Obj_t *obj = (DISPR_Obj_t *)DisprHandle;
 8000894:	4b1a      	ldr	r3, [pc, #104]	@ (8000900 <DISPR_registerTask+0x6c>)
 8000896:	681b      	ldr	r3, [r3, #0]

   PLX_ASSERT(aTaskId < obj->numTasks);
 8000898:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800089c:	4584      	cmp	ip, r0
 800089e:	d801      	bhi.n	80008a4 <DISPR_registerTask+0x10>
 80008a0:	beff      	bkpt	0x00ff
 80008a2:	e7fe      	b.n	80008a2 <DISPR_registerTask+0xe>
{
 80008a4:	b570      	push	{r4, r5, r6, lr}
   if(aTaskId == 0)
   {
      // task 0 always called at dispatcher rate
      PLX_ASSERT(aPeriodInTimerTicks == obj->periodInSysClkTicks);
 80008a6:	681e      	ldr	r6, [r3, #0]
   if(aTaskId == 0)
 80008a8:	b1d8      	cbz	r0, 80008e2 <DISPR_registerTask+0x4e>
   obj->tskMemory[aTaskId].periodInSysClkTicks = aPeriodInTimerTicks;
   obj->tskMemory[aTaskId].tsk = aTsk;
   obj->tskMemory[aTaskId].mask = (1 << aTaskId);
   obj->tskMemory[aTaskId].timer = 0;
   obj->tskMemory[aTaskId].taskId = aTaskId;
   obj->tskMemory[aTaskId].periodInDisprTicks = (uint16_t)(aPeriodInTimerTicks/obj->periodInSysClkTicks);
 80008aa:	fbb2 fef6 	udiv	lr, r2, r6
   obj->tskMemory[aTaskId].periodInSysClkTicks = aPeriodInTimerTicks;
 80008ae:	685c      	ldr	r4, [r3, #4]
 80008b0:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80008b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   obj->tskMemory[aTaskId].timer = 0;
 80008b8:	f04f 0c00 	mov.w	ip, #0
   obj->tskMemory[aTaskId].tsk = aTsk;
 80008bc:	60d9      	str	r1, [r3, #12]
   obj->tskMemory[aTaskId].mask = (1 << aTaskId);
 80008be:	2101      	movs	r1, #1
 80008c0:	4081      	lsls	r1, r0
 80008c2:	8259      	strh	r1, [r3, #18]
   // only exact multiples allowed
   PLX_ASSERT(((uint32_t)obj->tskMemory[aTaskId].periodInDisprTicks*obj->periodInSysClkTicks) == aPeriodInTimerTicks);
 80008c4:	fa1f f18e 	uxth.w	r1, lr
 80008c8:	fb06 f101 	mul.w	r1, r6, r1
 80008cc:	4291      	cmp	r1, r2
   obj->tskMemory[aTaskId].periodInSysClkTicks = aPeriodInTimerTicks;
 80008ce:	605a      	str	r2, [r3, #4]
   obj->tskMemory[aTaskId].timer = 0;
 80008d0:	f8a3 c010 	strh.w	ip, [r3, #16]
   obj->tskMemory[aTaskId].taskId = aTaskId;
 80008d4:	f824 0025 	strh.w	r0, [r4, r5, lsl #2]
   obj->tskMemory[aTaskId].periodInDisprTicks = (uint16_t)(aPeriodInTimerTicks/obj->periodInSysClkTicks);
 80008d8:	f8a3 e008 	strh.w	lr, [r3, #8]
   PLX_ASSERT(((uint32_t)obj->tskMemory[aTaskId].periodInDisprTicks*obj->periodInSysClkTicks) == aPeriodInTimerTicks);
 80008dc:	d00f      	beq.n	80008fe <DISPR_registerTask+0x6a>
 80008de:	beff      	bkpt	0x00ff
 80008e0:	e7fe      	b.n	80008e0 <DISPR_registerTask+0x4c>
      PLX_ASSERT(aPeriodInTimerTicks == obj->periodInSysClkTicks);
 80008e2:	42b2      	cmp	r2, r6
 80008e4:	d001      	beq.n	80008ea <DISPR_registerTask+0x56>
 80008e6:	beff      	bkpt	0x00ff
 80008e8:	e7fe      	b.n	80008e8 <DISPR_registerTask+0x54>
   obj->tskMemory[aTaskId].periodInSysClkTicks = aPeriodInTimerTicks;
 80008ea:	685b      	ldr	r3, [r3, #4]
   obj->tskMemory[aTaskId].timer = 0;
 80008ec:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 80008f0:	e9c3 1403 	strd	r1, r4, [r3, #12]
   obj->tskMemory[aTaskId].periodInSysClkTicks = aPeriodInTimerTicks;
 80008f4:	605a      	str	r2, [r3, #4]
   obj->tskMemory[aTaskId].taskId = aTaskId;
 80008f6:	8018      	strh	r0, [r3, #0]
   obj->tskMemory[aTaskId].periodInDisprTicks = (uint16_t)(aPeriodInTimerTicks/obj->periodInSysClkTicks);
 80008f8:	fbb2 f2f2 	udiv	r2, r2, r2
 80008fc:	811a      	strh	r2, [r3, #8]
}
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	20005874 	.word	0x20005874

08000904 <DISPR_start>:
#endif

#ifdef PLX_BARE_METAL_SCHEDULER

void DISPR_start()
{
 8000904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   DISPR_Obj_t *obj = (DISPR_Obj_t *)DisprHandle;
 8000908:	4e33      	ldr	r6, [pc, #204]	@ (80009d8 <DISPR_start+0xd4>)
 800090a:	f8d6 8000 	ldr.w	r8, [r6]

   PLX_ASSERT(obj->numTasks > 0);
 800090e:	f8b8 2008 	ldrh.w	r2, [r8, #8]
{
 8000912:	ed2d 8b02 	vpush	{d8}
   PLX_ASSERT(obj->numTasks > 0);
 8000916:	b90a      	cbnz	r2, 800091c <DISPR_start+0x18>
 8000918:	beff      	bkpt	0x00ff
 800091a:	e7fe      	b.n	800091a <DISPR_start+0x16>
 800091c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8000920:	2114      	movs	r1, #20
 8000922:	fb01 3202 	mla	r2, r1, r2, r3
      obj->tskMemory[i].timer = 0;
 8000926:	2100      	movs	r1, #0
 8000928:	8219      	strh	r1, [r3, #16]
   for(i=0; i<obj->numTasks; i++){
 800092a:	3314      	adds	r3, #20
 800092c:	4293      	cmp	r3, r2
 800092e:	d1fb      	bne.n	8000928 <DISPR_start+0x24>

   DISPR_reset();

   obj->powerupCountdown = obj->powerupDelayIntTask1Ticks;
 8000930:	f8b8 3018 	ldrh.w	r3, [r8, #24]
 8000934:	f8a8 301a 	strh.w	r3, [r8, #26]

   __asm volatile ("cpsid i");
 8000938:	b672      	cpsid	i
   if(obj->enableInterrupt)
 800093a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800093e:	b103      	cbz	r3, 8000942 <DISPR_start+0x3e>
   {
      obj->enableInterrupt();
 8000940:	4798      	blx	r3
   }
   __asm volatile ("cpsie i");
 8000942:	b662      	cpsie	i

   if(obj->syncCallback)
 8000944:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8000948:	b103      	cbz	r3, 800094c <DISPR_start+0x48>
   {
      obj->syncCallback();
 800094a:	4798      	blx	r3
   }

   while(obj->powerupCountdown > 0)
 800094c:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 8000950:	b29b      	uxth	r3, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1fa      	bne.n	800094c <DISPR_start+0x48>
   float load = 0;
 8000956:	ed9f 8a21 	vldr	s16, [pc, #132]	@ 80009dc <DISPR_start+0xd8>
      load = (float)(100*tsD)/(float)(tsP);
 800095a:	2764      	movs	r7, #100	@ 0x64
      continue;
   }

   for(;;)
   {
      if(obj->pilHandle != 0)
 800095c:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8000960:	b108      	cbz	r0, 8000966 <DISPR_start+0x62>
      {
         PIL_backgroundCall(obj->pilHandle);
 8000962:	f001 fd91 	bl	8002488 <PIL_backgroundCall>
   DISPR_Obj_t *obj = (DISPR_Obj_t *)DisprHandle;
 8000966:	6833      	ldr	r3, [r6, #0]
   __asm volatile ("cpsid i");
 8000968:	b672      	cpsid	i
   int32_t ts1 = (int32_t)obj->timeStamp1;
 800096a:	e9d3 9209 	ldrd	r9, r2, [r3, #36]	@ 0x24
   int32_t ts2 = (int32_t)obj->timeStamp2;
 800096e:	f8d3 c02c 	ldr.w	ip, [r3, #44]	@ 0x2c
   int32_t ts3 = (int32_t)obj->timeStamp3;
 8000972:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
   __asm volatile ("cpsie i");
 8000974:	b662      	cpsie	i
   int32_t tsP = ts3 - ts1; // base task period
 8000976:	1aa9      	subs	r1, r5, r2
      load = (float)(100*tsD)/(float)(tsP);
 8000978:	ee07 1a90 	vmov	s15, r1
   int32_t tsD = ts2 - ts1; // base task duration
 800097c:	ebac 0402 	sub.w	r4, ip, r2
      load = (float)(100*tsD)/(float)(tsP);
 8000980:	fb07 f004 	mul.w	r0, r7, r4
 8000984:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000988:	ee07 0a90 	vmov	s15, r0
   if(tsB >= (int32_t)obj->periodInSysClkTicks){
 800098c:	f8d3 e000 	ldr.w	lr, [r3]
      load = (float)(100*tsD)/(float)(tsP);
 8000990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   if(tsP > 0)
 8000994:	2900      	cmp	r1, #0
      load = (float)(100*tsD)/(float)(tsP);
 8000996:	bfc8      	it	gt
 8000998:	ee87 7aa6 	vdivgt.f32	s14, s15, s13
 800099c:	4610      	mov	r0, r2
   float load = 0;
 800099e:	bfd8      	it	le
 80009a0:	eeb0 7a48 	vmovle.f32	s14, s16
   if(tsB >= (int32_t)obj->periodInSysClkTicks){
 80009a4:	4572      	cmp	r2, lr
      tsB -= obj->periodInSysClkTicks;
 80009a6:	bfa8      	it	ge
 80009a8:	eba2 000e 	subge.w	r0, r2, lr
   __asm volatile ("cpsid i");
 80009ac:	b672      	cpsid	i
   obj->timeStamp1Latched = ts1;
 80009ae:	e9c3 920e 	strd	r9, r2, [r3, #56]	@ 0x38
   obj->timeStamp3Latched = ts3;
 80009b2:	e9c3 c510 	strd	ip, r5, [r3, #64]	@ 0x40
   obj->timeStampBLatched = tsB;
 80009b6:	e9c3 0413 	strd	r0, r4, [r3, #76]	@ 0x4c
   obj->timeStampPLatched = tsP;
 80009ba:	6499      	str	r1, [r3, #72]	@ 0x48
   obj->task0LoadInPercent = load;
 80009bc:	ed83 7a08 	vstr	s14, [r3, #32]
   __asm volatile ("cpsie i");
 80009c0:	b662      	cpsie	i
      }
      DISPR_background();
      if(obj->idleTask)
 80009c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d0c8      	beq.n	800095c <DISPR_start+0x58>
      {
         obj->idleTask();
 80009ca:	4798      	blx	r3
      if(obj->pilHandle != 0)
 80009cc:	f8d8 001c 	ldr.w	r0, [r8, #28]
 80009d0:	2800      	cmp	r0, #0
 80009d2:	d1c6      	bne.n	8000962 <DISPR_start+0x5e>
 80009d4:	e7c7      	b.n	8000966 <DISPR_start+0x62>
 80009d6:	bf00      	nop
 80009d8:	20005874 	.word	0x20005874
 80009dc:	00000000 	.word	0x00000000

080009e0 <DISPR_sampleScopes>:

#ifdef PLX_BARE_METAL_SCHEDULER

void DISPR_sampleScopes()
{
   DISPR_Obj_t *obj = (DISPR_Obj_t *)DisprHandle;
 80009e0:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <DISPR_sampleScopes+0x18>)
{
 80009e2:	b510      	push	{r4, lr}
   DISPR_Obj_t *obj = (DISPR_Obj_t *)DisprHandle;
 80009e4:	681c      	ldr	r4, [r3, #0]
   if(obj->pilHandle != 0)
 80009e6:	69e0      	ldr	r0, [r4, #28]
 80009e8:	b108      	cbz	r0, 80009ee <DISPR_sampleScopes+0xe>
   {
      PIL_SCOPE_sample(obj->pilHandle);
 80009ea:	f001 fc29 	bl	8002240 <PIL_SCOPE_sample>
   }
   obj->timeStamp2Last = ARM_CM_DWT_CYCCNT; // end of task
 80009ee:	4b03      	ldr	r3, [pc, #12]	@ (80009fc <DISPR_sampleScopes+0x1c>)
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	6323      	str	r3, [r4, #48]	@ 0x30
}
 80009f4:	bd10      	pop	{r4, pc}
 80009f6:	bf00      	nop
 80009f8:	20005874 	.word	0x20005874
 80009fc:	e0001000 	.word	0xe0001000

08000a00 <DISPR_dispatch>:

void DISPR_dispatch()
{
   DISPR_Obj_t *obj = (DISPR_Obj_t *)DisprHandle;
 8000a00:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <DISPR_dispatch+0x80>)
{
 8000a02:	b570      	push	{r4, r5, r6, lr}
   DISPR_Obj_t *obj = (DISPR_Obj_t *)DisprHandle;
 8000a04:	681d      	ldr	r5, [r3, #0]

   // we return immediately if power-up delay has not yet expired
   if(obj->powerupCountdown > 0)
 8000a06:	8b6b      	ldrh	r3, [r5, #26]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d130      	bne.n	8000a70 <DISPR_dispatch+0x70>
   {
      obj->powerupCountdown--;
      return;
   }

   if(obj->pilHandle != 0)
 8000a0e:	69e8      	ldr	r0, [r5, #28]
 8000a10:	b108      	cbz	r0, 8000a16 <DISPR_dispatch+0x16>
   {
      PIL_beginInterruptCall(obj->pilHandle);
 8000a12:	f001 fcd9 	bl	80023c8 <PIL_beginInterruptCall>
   }

   obj->timeStamp1 = obj->timeStamp3; // last start of period
 8000a16:	e9d5 100c 	ldrd	r1, r0, [r5, #48]	@ 0x30
 8000a1a:	e9c5 010a 	strd	r0, r1, [r5, #40]	@ 0x28
   obj->timeStamp2 = obj->timeStamp2Last; // last end of task timestamp
   obj->timeStamp3 = ARM_CM_DWT_CYCCNT; // start of new period
 8000a1e:	4a19      	ldr	r2, [pc, #100]	@ (8000a84 <DISPR_dispatch+0x84>)
   // always dispatch base task since it has the same rate as the interrupt

   // check if interrupt is still active or pending, if yes --> overrun
   bool overrun;
   overrun = obj->tskMemory[0].tsk(obj->tskMemory[0].taskId);
 8000a20:	686b      	ldr	r3, [r5, #4]
   obj->timeStamp3 = ARM_CM_DWT_CYCCNT; // start of new period
 8000a22:	6851      	ldr	r1, [r2, #4]
   overrun = obj->tskMemory[0].tsk(obj->tskMemory[0].taskId);
 8000a24:	8818      	ldrh	r0, [r3, #0]
 8000a26:	68da      	ldr	r2, [r3, #12]
   obj->timeStamp3 = ARM_CM_DWT_CYCCNT; // start of new period
 8000a28:	6369      	str	r1, [r5, #52]	@ 0x34
   overrun = obj->tskMemory[0].tsk(obj->tskMemory[0].taskId);
 8000a2a:	4790      	blx	r2
   PLX_ASSERT(overrun == 0);
 8000a2c:	b9f0      	cbnz	r0, 8000a6c <DISPR_dispatch+0x6c>
   int i;
   // determine which tasks should be dispatched
   for(i=1; i<obj->numTasks; i++)
 8000a2e:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 8000a32:	f1bc 0f01 	cmp.w	ip, #1
 8000a36:	d918      	bls.n	8000a6a <DISPR_dispatch+0x6a>
   {
      if(obj->tskMemory[i].timer == 0)
 8000a38:	6868      	ldr	r0, [r5, #4]
   for(i=1; i<obj->numTasks; i++)
 8000a3a:	2401      	movs	r4, #1
      {
         overrun = obj->tskMemory[i].tsk(obj->tskMemory[i].taskId);
 8000a3c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
      if(obj->tskMemory[i].timer == 0)
 8000a40:	eb00 0281 	add.w	r2, r0, r1, lsl #2
   for(i=1; i<obj->numTasks; i++)
 8000a44:	3401      	adds	r4, #1
      if(obj->tskMemory[i].timer == 0)
 8000a46:	8a13      	ldrh	r3, [r2, #16]
 8000a48:	008e      	lsls	r6, r1, #2
 8000a4a:	b953      	cbnz	r3, 8000a62 <DISPR_dispatch+0x62>
         overrun = obj->tskMemory[i].tsk(obj->tskMemory[i].taskId);
 8000a4c:	68d3      	ldr	r3, [r2, #12]
 8000a4e:	f830 0021 	ldrh.w	r0, [r0, r1, lsl #2]
 8000a52:	4798      	blx	r3
         PLX_ASSERT(overrun == 0);
 8000a54:	b988      	cbnz	r0, 8000a7a <DISPR_dispatch+0x7a>
         obj->tskMemory[i].timer = obj->tskMemory[i].periodInDisprTicks;
 8000a56:	6868      	ldr	r0, [r5, #4]
   for(i=1; i<obj->numTasks; i++)
 8000a58:	f8b5 c008 	ldrh.w	ip, [r5, #8]
         obj->tskMemory[i].timer = obj->tskMemory[i].periodInDisprTicks;
 8000a5c:	1982      	adds	r2, r0, r6
 8000a5e:	8913      	ldrh	r3, [r2, #8]
 8000a60:	8213      	strh	r3, [r2, #16]
      }
      obj->tskMemory[i].timer--;
 8000a62:	3b01      	subs	r3, #1
   for(i=1; i<obj->numTasks; i++)
 8000a64:	45a4      	cmp	ip, r4
      obj->tskMemory[i].timer--;
 8000a66:	8213      	strh	r3, [r2, #16]
   for(i=1; i<obj->numTasks; i++)
 8000a68:	dce8      	bgt.n	8000a3c <DISPR_dispatch+0x3c>
   }
}
 8000a6a:	bd70      	pop	{r4, r5, r6, pc}
   PLX_ASSERT(overrun == 0);
 8000a6c:	beff      	bkpt	0x00ff
 8000a6e:	e7fe      	b.n	8000a6e <DISPR_dispatch+0x6e>
      obj->powerupCountdown--;
 8000a70:	8b6b      	ldrh	r3, [r5, #26]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	836b      	strh	r3, [r5, #26]
}
 8000a78:	bd70      	pop	{r4, r5, r6, pc}
         PLX_ASSERT(overrun == 0);
 8000a7a:	beff      	bkpt	0x00ff
 8000a7c:	e7fe      	b.n	8000a7c <DISPR_dispatch+0x7c>
 8000a7e:	bf00      	nop
 8000a80:	20005874 	.word	0x20005874
 8000a84:	e0001000 	.word	0xe0001000

08000a88 <HAL_InitTick>:

// For STM HAL tick - not sure if needed
static TIM_HandleTypeDef    DISPR_Tim7Handle;
// do not rename function - MAY BE CALLED MULTIPLE TIMES!
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b510      	push	{r4, lr}
 8000a8a:	4601      	mov	r1, r0
 8000a8c:	b082      	sub	sp, #8
#if defined(STM32G431xx)
   HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0);
   HAL_NVIC_EnableIRQ(TIM7_IRQn);
#elif defined(STM32G474xx)
   HAL_NVIC_SetPriority(TIM7_DAC_IRQn, TickPriority, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2037      	movs	r0, #55	@ 0x37
 8000a92:	f000 fa71 	bl	8000f78 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8000a96:	2037      	movs	r0, #55	@ 0x37
 8000a98:	f000 faaa 	bl	8000ff0 <HAL_NVIC_EnableIRQ>
#else
#error Unsupported chip.
#endif

   __HAL_RCC_TIM7_CLK_ENABLE();
 8000a9c:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <HAL_InitTick+0x68>)

   // compute the prescaler value to have TIMx counter clock equal to 1000 Hz
   uint32_t uwTimclock = HAL_RCC_GetPCLK1Freq();
   uint32_t uwPrescalerValue = (uint32_t)(uwTimclock / 10000) - 1;
   DISPR_Tim7Handle.Instance = TIM7;
 8000a9e:	4c15      	ldr	r4, [pc, #84]	@ (8000af4 <HAL_InitTick+0x6c>)
   __HAL_RCC_TIM7_CLK_ENABLE();
 8000aa0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000aa2:	f042 0220 	orr.w	r2, r2, #32
 8000aa6:	659a      	str	r2, [r3, #88]	@ 0x58
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aaa:	f003 0320 	and.w	r3, r3, #32
 8000aae:	9301      	str	r3, [sp, #4]
 8000ab0:	9b01      	ldr	r3, [sp, #4]
   uint32_t uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ab2:	f000 fead 	bl	8001810 <HAL_RCC_GetPCLK1Freq>
   uint32_t uwPrescalerValue = (uint32_t)(uwTimclock / 10000) - 1;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <HAL_InitTick+0x70>)
 8000ab8:	fba3 2300 	umull	r2, r3, r3, r0
 8000abc:	0b5b      	lsrs	r3, r3, #13
   DISPR_Tim7Handle.Instance = TIM7;
 8000abe:	480f      	ldr	r0, [pc, #60]	@ (8000afc <HAL_InitTick+0x74>)
 8000ac0:	6020      	str	r0, [r4, #0]
   DISPR_Tim7Handle.Init.Period            = 10 - 1;
   DISPR_Tim7Handle.Init.Prescaler         = uwPrescalerValue;
   DISPR_Tim7Handle.Init.ClockDivision     = 0;
 8000ac2:	2200      	movs	r2, #0
   uint32_t uwPrescalerValue = (uint32_t)(uwTimclock / 10000) - 1;
 8000ac4:	3b01      	subs	r3, #1
   DISPR_Tim7Handle.Init.Period            = 10 - 1;
 8000ac6:	2109      	movs	r1, #9
   DISPR_Tim7Handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
   DISPR_Tim7Handle.Init.RepetitionCounter = 0;
   DISPR_Tim7Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

   if(HAL_TIM_Base_Init(&DISPR_Tim7Handle) == HAL_OK)
 8000ac8:	4620      	mov	r0, r4
   DISPR_Tim7Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aca:	e9c4 2205 	strd	r2, r2, [r4, #20]
   DISPR_Tim7Handle.Init.Period            = 10 - 1;
 8000ace:	60e1      	str	r1, [r4, #12]
   DISPR_Tim7Handle.Init.Prescaler         = uwPrescalerValue;
 8000ad0:	6063      	str	r3, [r4, #4]
   DISPR_Tim7Handle.Init.ClockDivision     = 0;
 8000ad2:	6122      	str	r2, [r4, #16]
   DISPR_Tim7Handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8000ad4:	60a2      	str	r2, [r4, #8]
   if(HAL_TIM_Base_Init(&DISPR_Tim7Handle) == HAL_OK)
 8000ad6:	f001 f84d 	bl	8001b74 <HAL_TIM_Base_Init>
 8000ada:	b110      	cbz	r0, 8000ae2 <HAL_InitTick+0x5a>
   {
      // start the TIM time Base generation in interrupt mode
      return HAL_TIM_Base_Start_IT(&DISPR_Tim7Handle);
   }
   return HAL_ERROR;
}
 8000adc:	2001      	movs	r0, #1
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd10      	pop	{r4, pc}
      return HAL_TIM_Base_Start_IT(&DISPR_Tim7Handle);
 8000ae2:	4620      	mov	r0, r4
}
 8000ae4:	b002      	add	sp, #8
 8000ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return HAL_TIM_Base_Start_IT(&DISPR_Tim7Handle);
 8000aea:	f001 b8db 	b.w	8001ca4 <HAL_TIM_Base_Start_IT>
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000
 8000af4:	20005828 	.word	0x20005828
 8000af8:	d1b71759 	.word	0xd1b71759
 8000afc:	40001400 	.word	0x40001400

08000b00 <TIM7_DAC_IRQHandler>:
#endif
#if defined(STM32G474xx)
void TIM7_DAC_IRQHandler(void)
#endif
{
   if (__HAL_TIM_GET_FLAG(&DISPR_Tim7Handle, TIM_FLAG_UPDATE) != RESET)
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <TIM7_DAC_IRQHandler+0x1c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	691a      	ldr	r2, [r3, #16]
 8000b06:	07d1      	lsls	r1, r2, #31
 8000b08:	d502      	bpl.n	8000b10 <TIM7_DAC_IRQHandler+0x10>
   {
      if (__HAL_TIM_GET_IT_SOURCE(&DISPR_Tim7Handle, TIM_IT_UPDATE) != RESET)
 8000b0a:	68da      	ldr	r2, [r3, #12]
 8000b0c:	07d2      	lsls	r2, r2, #31
 8000b0e:	d400      	bmi.n	8000b12 <TIM7_DAC_IRQHandler+0x12>
      {
         __HAL_TIM_CLEAR_IT(&DISPR_Tim7Handle, TIM_IT_UPDATE);
         HAL_IncTick();
      }
   }
}
 8000b10:	4770      	bx	lr
         __HAL_TIM_CLEAR_IT(&DISPR_Tim7Handle, TIM_IT_UPDATE);
 8000b12:	f06f 0201 	mvn.w	r2, #1
 8000b16:	611a      	str	r2, [r3, #16]
         HAL_IncTick();
 8000b18:	f000 ba0a 	b.w	8000f30 <HAL_IncTick>
 8000b1c:	20005828 	.word	0x20005828

08000b20 <PLX_GPIO_sinit>:
#include "plx_gpio.h"

void PLX_GPIO_sinit()
{
   static bool firstCall = true;
   if(firstCall){
 8000b20:	4a24      	ldr	r2, [pc, #144]	@ (8000bb4 <PLX_GPIO_sinit+0x94>)
 8000b22:	7813      	ldrb	r3, [r2, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d044      	beq.n	8000bb2 <PLX_GPIO_sinit+0x92>
      firstCall = false;
      __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <PLX_GPIO_sinit+0x98>)
      firstCall = false;
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	7011      	strb	r1, [r2, #0]
      __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b30:	f042 0201 	orr.w	r2, r2, #1
 8000b34:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
{
 8000b38:	b088      	sub	sp, #32
      __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	f002 0201 	and.w	r2, r2, #1
 8000b3e:	9201      	str	r2, [sp, #4]
 8000b40:	9a01      	ldr	r2, [sp, #4]
      __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b44:	f042 0202 	orr.w	r2, r2, #2
 8000b48:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b4c:	f002 0202 	and.w	r2, r2, #2
 8000b50:	9202      	str	r2, [sp, #8]
 8000b52:	9a02      	ldr	r2, [sp, #8]
      __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b56:	f042 0204 	orr.w	r2, r2, #4
 8000b5a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b5e:	f002 0204 	and.w	r2, r2, #4
 8000b62:	9203      	str	r2, [sp, #12]
 8000b64:	9a03      	ldr	r2, [sp, #12]
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b68:	f042 0208 	orr.w	r2, r2, #8
 8000b6c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b70:	f002 0208 	and.w	r2, r2, #8
 8000b74:	9204      	str	r2, [sp, #16]
 8000b76:	9a04      	ldr	r2, [sp, #16]
    #ifdef GPIOE
      __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b7a:	f042 0210 	orr.w	r2, r2, #16
 8000b7e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b82:	f002 0210 	and.w	r2, r2, #16
 8000b86:	9205      	str	r2, [sp, #20]
 8000b88:	9a05      	ldr	r2, [sp, #20]
    #endif
      __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b8c:	f042 0220 	orr.w	r2, r2, #32
 8000b90:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b94:	f002 0220 	and.w	r2, r2, #32
 8000b98:	9206      	str	r2, [sp, #24]
 8000b9a:	9a06      	ldr	r2, [sp, #24]
    #ifdef  GPIOG
      __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ba2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000baa:	9307      	str	r3, [sp, #28]
 8000bac:	9b07      	ldr	r3, [sp, #28]
    #endif
    #ifdef GPIOH
      __HAL_RCC_GPIOH_CLK_ENABLE();
    #endif
   }
}
 8000bae:	b008      	add	sp, #32
 8000bb0:	4770      	bx	lr
 8000bb2:	4770      	bx	lr
 8000bb4:	20000200 	.word	0x20000200
 8000bb8:	40021000 	.word	0x40021000

08000bbc <PLX_GPIO_setGpioConfig>:
{
  LL_GPIO_Init(PLX_GPIO_getBase(aPort), aInitStruct);
}

GPIO_TypeDef *PLX_GPIO_getBase(PLX_GPIO_Port_t aPort){
  switch(aPort)
 8000bbc:	2806      	cmp	r0, #6
 8000bbe:	d804      	bhi.n	8000bca <PLX_GPIO_setGpioConfig+0xe>
  LL_GPIO_Init(PLX_GPIO_getBase(aPort), aInitStruct);
 8000bc0:	0280      	lsls	r0, r0, #10
 8000bc2:	f100 4090 	add.w	r0, r0, #1207959552	@ 0x48000000
 8000bc6:	f001 b8ad 	b.w	8001d24 <LL_GPIO_Init>
#ifdef  GPIOH
  case PLX_PORTH:
    return ((GPIO_TypeDef *) GPIOH_BASE);
#endif
  default:
    PLX_ASSERT(0);
 8000bca:	beff      	bkpt	0x00ff
 8000bcc:	e7fe      	b.n	8000bcc <PLX_GPIO_setGpioConfig+0x10>
 8000bce:	bf00      	nop

08000bd0 <PLX_GPIO_getBase>:
  switch(aPort)
 8000bd0:	2806      	cmp	r0, #6
 8000bd2:	d901      	bls.n	8000bd8 <PLX_GPIO_getBase+0x8>
    PLX_ASSERT(0);
 8000bd4:	beff      	bkpt	0x00ff
 8000bd6:	e7fe      	b.n	8000bd6 <PLX_GPIO_getBase+0x6>
  }
  return (GPIO_TypeDef *) 0;
}
 8000bd8:	0280      	lsls	r0, r0, #10
 8000bda:	f100 4090 	add.w	r0, r0, #1207959552	@ 0x48000000
 8000bde:	4770      	bx	lr

08000be0 <PLX_TIM_sinit>:

#include "stm32g4xx_ll_tim.h"

void PLX_TIM_sinit()
{
	__HAL_RCC_TIM1_CLK_ENABLE();
 8000be0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c8c <PLX_TIM_sinit+0xac>)
 8000be2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000be4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000be8:	661a      	str	r2, [r3, #96]	@ 0x60
 8000bea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 8000bec:	b08a      	sub	sp, #40	@ 0x28
	__HAL_RCC_TIM1_CLK_ENABLE();
 8000bee:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8000bf2:	9201      	str	r2, [sp, #4]
 8000bf4:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000bf6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000bf8:	f042 0201 	orr.w	r2, r2, #1
 8000bfc:	659a      	str	r2, [r3, #88]	@ 0x58
 8000bfe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c00:	f002 0201 	and.w	r2, r2, #1
 8000c04:	9202      	str	r2, [sp, #8]
 8000c06:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_TIM3_CLK_ENABLE();
 8000c08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c0a:	f042 0202 	orr.w	r2, r2, #2
 8000c0e:	659a      	str	r2, [r3, #88]	@ 0x58
 8000c10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c12:	f002 0202 	and.w	r2, r2, #2
 8000c16:	9203      	str	r2, [sp, #12]
 8000c18:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_TIM4_CLK_ENABLE();
 8000c1a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c1c:	f042 0204 	orr.w	r2, r2, #4
 8000c20:	659a      	str	r2, [r3, #88]	@ 0x58
 8000c22:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c24:	f002 0204 	and.w	r2, r2, #4
 8000c28:	9204      	str	r2, [sp, #16]
 8000c2a:	9a04      	ldr	r2, [sp, #16]
#ifdef TIM5
	__HAL_RCC_TIM5_CLK_ENABLE();
 8000c2c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c2e:	f042 0208 	orr.w	r2, r2, #8
 8000c32:	659a      	str	r2, [r3, #88]	@ 0x58
 8000c34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c36:	f002 0208 	and.w	r2, r2, #8
 8000c3a:	9205      	str	r2, [sp, #20]
 8000c3c:	9a05      	ldr	r2, [sp, #20]
#endif
	__HAL_RCC_TIM6_CLK_ENABLE();
 8000c3e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c40:	f042 0210 	orr.w	r2, r2, #16
 8000c44:	659a      	str	r2, [r3, #88]	@ 0x58
 8000c46:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c48:	f002 0210 	and.w	r2, r2, #16
 8000c4c:	9206      	str	r2, [sp, #24]
 8000c4e:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_TIM7_CLK_ENABLE();
 8000c50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c52:	f042 0220 	orr.w	r2, r2, #32
 8000c56:	659a      	str	r2, [r3, #88]	@ 0x58
 8000c58:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c5a:	f002 0220 	and.w	r2, r2, #32
 8000c5e:	9207      	str	r2, [sp, #28]
 8000c60:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_TIM8_CLK_ENABLE();
 8000c62:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000c68:	661a      	str	r2, [r3, #96]	@ 0x60
 8000c6a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c6c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8000c70:	9208      	str	r2, [sp, #32]
 8000c72:	9a08      	ldr	r2, [sp, #32]
#ifdef TIM20
	__HAL_RCC_TIM20_CLK_ENABLE();
 8000c74:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c76:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000c7a:	661a      	str	r2, [r3, #96]	@ 0x60
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c82:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
#endif
}
 8000c86:	b00a      	add	sp, #40	@ 0x28
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <PLX_TIM_init>:
		return((PLX_TIM_Handle_t)NULL);

	// set handle
	handle = (PLX_TIM_Handle_t)aMemory;

	return handle;
 8000c90:	2923      	cmp	r1, #35	@ 0x23
}
 8000c92:	bf98      	it	ls
 8000c94:	2000      	movls	r0, #0
 8000c96:	4770      	bx	lr

08000c98 <PLX_TIM_setup>:

void PLX_TIM_setup(PLX_TIM_Handle_t aHandle, PLX_TIM_Unit_t aUnit, LL_TIM_InitTypeDef *aInitDef, uint8_t aUseEnable, float aNomFreq)
{
 8000c98:	b570      	push	{r4, r5, r6, lr}
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	4615      	mov	r5, r2
 8000c9e:	461e      	mov	r6, r3
	PLX_TIM_Obj_t *obj = (PLX_TIM_Obj_t *)aHandle;

	obj->unit = aUnit;
 8000ca0:	7001      	strb	r1, [r0, #0]
	switch(obj->unit){
 8000ca2:	2908      	cmp	r1, #8
 8000ca4:	d853      	bhi.n	8000d4e <PLX_TIM_setup+0xb6>
 8000ca6:	e8df f001 	tbb	[pc, r1]
 8000caa:	4341      	.short	0x4341
 8000cac:	4e4c4a05 	.word	0x4e4c4a05
 8000cb0:	4650      	.short	0x4650
 8000cb2:	48          	.byte	0x48
 8000cb3:	00          	.byte	0x00
 8000cb4:	4827      	ldr	r0, [pc, #156]	@ (8000d54 <PLX_TIM_setup+0xbc>)
#endif
		default:
			PLX_ASSERT(0);
	}

	obj->period = aInitDef->Autoreload;
 8000cb6:	68ab      	ldr	r3, [r5, #8]
	LL_TIM_Init(obj->instance, aInitDef);
 8000cb8:	4629      	mov	r1, r5
	obj->period = aInitDef->Autoreload;
 8000cba:	e9c4 0301 	strd	r0, r3, [r4, #4]
	LL_TIM_Init(obj->instance, aInitDef);
 8000cbe:	f001 f8d7 	bl	8001e70 <LL_TIM_Init>
	LL_TIM_EnableARRPreload(obj->instance);
 8000cc2:	6860      	ldr	r0, [r4, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000cc4:	6803      	ldr	r3, [r0, #0]
 8000cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cca:	6003      	str	r3, [r0, #0]
	if (aUseEnable || !IS_TIM_BREAK_INSTANCE(obj->instance))
 8000ccc:	b9b6      	cbnz	r6, 8000cfc <PLX_TIM_setup+0x64>
 8000cce:	4b22      	ldr	r3, [pc, #136]	@ (8000d58 <PLX_TIM_setup+0xc0>)
 8000cd0:	4298      	cmp	r0, r3
 8000cd2:	d01d      	beq.n	8000d10 <PLX_TIM_setup+0x78>
 8000cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000cd8:	4298      	cmp	r0, r3
 8000cda:	d019      	beq.n	8000d10 <PLX_TIM_setup+0x78>
 8000cdc:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8000ce0:	4298      	cmp	r0, r3
 8000ce2:	d015      	beq.n	8000d10 <PLX_TIM_setup+0x78>
 8000ce4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	d011      	beq.n	8000d10 <PLX_TIM_setup+0x78>
 8000cec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000cf0:	4298      	cmp	r0, r3
 8000cf2:	d00d      	beq.n	8000d10 <PLX_TIM_setup+0x78>
 8000cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	d009      	beq.n	8000d10 <PLX_TIM_setup+0x78>
	{
	  obj->instance->CR2 |= TIM_CR2_CCPC;
 8000cfc:	6843      	ldr	r3, [r0, #4]
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6043      	str	r3, [r0, #4]
	  obj->instance->CR2 &= ~TIM_CR2_CCUS;
 8000d04:	6843      	ldr	r3, [r0, #4]
 8000d06:	f023 0304 	bic.w	r3, r3, #4
 8000d0a:	6043      	str	r3, [r0, #4]
	  obj->instance->CR2 |= TIM_COMMUTATION_SOFTWARE;
 8000d0c:	6843      	ldr	r3, [r0, #4]
 8000d0e:	6043      	str	r3, [r0, #4]
	}

	obj->counterMode = aInitDef->CounterMode;
 8000d10:	6869      	ldr	r1, [r5, #4]
 8000d12:	692a      	ldr	r2, [r5, #16]
	obj->repetitionCounter = aInitDef->RepetitionCounter;

	obj->configuredPwmChannelsMask = 0;
 8000d14:	2300      	movs	r3, #0
	obj->counterMode = aInitDef->CounterMode;
 8000d16:	e9c4 1203 	strd	r1, r2, [r4, #12]
	obj->configuredPwmChannelsMask = 0;
 8000d1a:	6163      	str	r3, [r4, #20]
	obj->configuredPwmNChannelsMask = 0;

	obj->timerClk = HAL_RCC_GetPCLK2Freq();
 8000d1c:	f000 fd8a 	bl	8001834 <HAL_RCC_GetPCLK2Freq>
	obj->nominalFrequency = aNomFreq;
 8000d20:	eddd 7a04 	vldr	s15, [sp, #16]
	obj->timerClk = HAL_RCC_GetPCLK2Freq();
 8000d24:	61e0      	str	r0, [r4, #28]
	obj->nominalFrequency = aNomFreq;
 8000d26:	edc4 7a08 	vstr	s15, [r4, #32]
	if (HAL_TIM_ConfigClockSource(&obj->timHandle, &sClockSourceConfig) != HAL_OK)
	{
		PLX_ASSERT(0);
	}
#endif
}
 8000d2a:	bd70      	pop	{r4, r5, r6, pc}
	switch(obj->unit){
 8000d2c:	480a      	ldr	r0, [pc, #40]	@ (8000d58 <PLX_TIM_setup+0xc0>)
 8000d2e:	e7c2      	b.n	8000cb6 <PLX_TIM_setup+0x1e>
 8000d30:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000d34:	e7bf      	b.n	8000cb6 <PLX_TIM_setup+0x1e>
			break;
 8000d36:	4809      	ldr	r0, [pc, #36]	@ (8000d5c <PLX_TIM_setup+0xc4>)
 8000d38:	e7bd      	b.n	8000cb6 <PLX_TIM_setup+0x1e>
      break;
 8000d3a:	4809      	ldr	r0, [pc, #36]	@ (8000d60 <PLX_TIM_setup+0xc8>)
 8000d3c:	e7bb      	b.n	8000cb6 <PLX_TIM_setup+0x1e>
			break;
 8000d3e:	4809      	ldr	r0, [pc, #36]	@ (8000d64 <PLX_TIM_setup+0xcc>)
 8000d40:	e7b9      	b.n	8000cb6 <PLX_TIM_setup+0x1e>
		  break;
 8000d42:	4809      	ldr	r0, [pc, #36]	@ (8000d68 <PLX_TIM_setup+0xd0>)
 8000d44:	e7b7      	b.n	8000cb6 <PLX_TIM_setup+0x1e>
			break;
 8000d46:	4809      	ldr	r0, [pc, #36]	@ (8000d6c <PLX_TIM_setup+0xd4>)
 8000d48:	e7b5      	b.n	8000cb6 <PLX_TIM_setup+0x1e>
			break;
 8000d4a:	4809      	ldr	r0, [pc, #36]	@ (8000d70 <PLX_TIM_setup+0xd8>)
 8000d4c:	e7b3      	b.n	8000cb6 <PLX_TIM_setup+0x1e>
			PLX_ASSERT(0);
 8000d4e:	beff      	bkpt	0x00ff
 8000d50:	e7fe      	b.n	8000d50 <PLX_TIM_setup+0xb8>
 8000d52:	bf00      	nop
 8000d54:	40000400 	.word	0x40000400
 8000d58:	40012c00 	.word	0x40012c00
 8000d5c:	40013400 	.word	0x40013400
 8000d60:	40015000 	.word	0x40015000
 8000d64:	40000800 	.word	0x40000800
 8000d68:	40000c00 	.word	0x40000c00
 8000d6c:	40001000 	.word	0x40001000
 8000d70:	40001400 	.word	0x40001400

08000d74 <PLX_TIM_start>:

void PLX_TIM_start(PLX_TIM_Handle_t aHandle, bool aDelayedRepetitionCounter){
	PLX_TIM_Obj_t *obj = (PLX_TIM_Obj_t *)aHandle;


	if(obj->configuredPwmChannelsMask & 0x1)
 8000d74:	f8b0 c014 	ldrh.w	ip, [r0, #20]
	{
		LL_TIM_CC_EnableChannel(obj->instance, LL_TIM_CHANNEL_CH1);
 8000d78:	6843      	ldr	r3, [r0, #4]
	if(obj->configuredPwmChannelsMask & 0x1)
 8000d7a:	f01c 0f01 	tst.w	ip, #1
 8000d7e:	d003      	beq.n	8000d88 <PLX_TIM_start+0x14>
  SET_BIT(TIMx->CCER, Channels);
 8000d80:	6a1a      	ldr	r2, [r3, #32]
 8000d82:	f042 0201 	orr.w	r2, r2, #1
 8000d86:	621a      	str	r2, [r3, #32]
	}
	if(obj->configuredPwmNChannelsMask & 0x1)
 8000d88:	8ac2      	ldrh	r2, [r0, #22]
 8000d8a:	07d0      	lsls	r0, r2, #31
 8000d8c:	d503      	bpl.n	8000d96 <PLX_TIM_start+0x22>
 8000d8e:	6a18      	ldr	r0, [r3, #32]
 8000d90:	f040 0004 	orr.w	r0, r0, #4
 8000d94:	6218      	str	r0, [r3, #32]
	{
		LL_TIM_CC_EnableChannel(obj->instance, LL_TIM_CHANNEL_CH1N);
	}
	if(obj->configuredPwmChannelsMask & 0x2)
 8000d96:	f01c 0f02 	tst.w	ip, #2
 8000d9a:	d003      	beq.n	8000da4 <PLX_TIM_start+0x30>
 8000d9c:	6a18      	ldr	r0, [r3, #32]
 8000d9e:	f040 0010 	orr.w	r0, r0, #16
 8000da2:	6218      	str	r0, [r3, #32]
	{
		LL_TIM_CC_EnableChannel(obj->instance, LL_TIM_CHANNEL_CH2);
	}
	if(obj->configuredPwmNChannelsMask & 0x2)
 8000da4:	0790      	lsls	r0, r2, #30
 8000da6:	d503      	bpl.n	8000db0 <PLX_TIM_start+0x3c>
 8000da8:	6a18      	ldr	r0, [r3, #32]
 8000daa:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8000dae:	6218      	str	r0, [r3, #32]
	{
		LL_TIM_CC_EnableChannel(obj->instance, LL_TIM_CHANNEL_CH2N);
	}
	if(obj->configuredPwmChannelsMask & 0x4)
 8000db0:	f01c 0f04 	tst.w	ip, #4
 8000db4:	d003      	beq.n	8000dbe <PLX_TIM_start+0x4a>
 8000db6:	6a18      	ldr	r0, [r3, #32]
 8000db8:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8000dbc:	6218      	str	r0, [r3, #32]
	{
		LL_TIM_CC_EnableChannel(obj->instance, LL_TIM_CHANNEL_CH3);
	}
	if(obj->configuredPwmNChannelsMask & 0x4)
 8000dbe:	0750      	lsls	r0, r2, #29
 8000dc0:	d503      	bpl.n	8000dca <PLX_TIM_start+0x56>
 8000dc2:	6a18      	ldr	r0, [r3, #32]
 8000dc4:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
 8000dc8:	6218      	str	r0, [r3, #32]
	{
		LL_TIM_CC_EnableChannel(obj->instance, LL_TIM_CHANNEL_CH3N);
	}
  if(obj->configuredPwmChannelsMask & 0x8)
 8000dca:	f01c 0f08 	tst.w	ip, #8
 8000dce:	d003      	beq.n	8000dd8 <PLX_TIM_start+0x64>
 8000dd0:	6a18      	ldr	r0, [r3, #32]
 8000dd2:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 8000dd6:	6218      	str	r0, [r3, #32]
  {
    LL_TIM_CC_EnableChannel(obj->instance, LL_TIM_CHANNEL_CH4);
  }
  if(obj->configuredPwmNChannelsMask & 0x8)
 8000dd8:	0712      	lsls	r2, r2, #28
 8000dda:	d503      	bpl.n	8000de4 <PLX_TIM_start+0x70>
 8000ddc:	6a1a      	ldr	r2, [r3, #32]
 8000dde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000de2:	621a      	str	r2, [r3, #32]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	f042 0201 	orr.w	r2, r2, #1
 8000dea:	60da      	str	r2, [r3, #12]
    LL_TIM_CC_EnableChannel(obj->instance, LL_TIM_CHANNEL_CH4N);
  }

	LL_TIM_EnableIT_UPDATE(obj->instance);

	if(aDelayedRepetitionCounter)
 8000dec:	b109      	cbz	r1, 8000df2 <PLX_TIM_start+0x7e>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000dee:	2200      	movs	r2, #0
 8000df0:	631a      	str	r2, [r3, #48]	@ 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000df2:	695a      	ldr	r2, [r3, #20]
 8000df4:	f042 0201 	orr.w	r2, r2, #1
 8000df8:	615a      	str	r2, [r3, #20]
	{
		LL_TIM_SetRepetitionCounter(obj->instance, 0);
	}
	LL_TIM_GenerateEvent_UPDATE(obj->instance);
}
 8000dfa:	4770      	bx	lr

08000dfc <PLX_TIM_processInt>:

bool PLX_TIM_processInt(PLX_TIM_Handle_t aHandle){

	PLX_TIM_Obj_t *obj = (PLX_TIM_Obj_t *)aHandle;

	if (LL_TIM_IsActiveFlag_UPDATE(obj->instance))
 8000dfc:	6843      	ldr	r3, [r0, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000dfe:	6918      	ldr	r0, [r3, #16]
 8000e00:	f010 0001 	ands.w	r0, r0, #1
 8000e04:	d007      	beq.n	8000e16 <PLX_TIM_processInt+0x1a>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8000e06:	68d8      	ldr	r0, [r3, #12]
 8000e08:	f010 0001 	ands.w	r0, r0, #1
 8000e0c:	d003      	beq.n	8000e16 <PLX_TIM_processInt+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000e0e:	f06f 0201 	mvn.w	r2, #1
 8000e12:	611a      	str	r2, [r3, #16]
	{
		if (LL_TIM_IsEnabledIT_UPDATE(obj->instance))
		{
			LL_TIM_ClearFlag_UPDATE(obj->instance);
			return true;
 8000e14:	2001      	movs	r0, #1
		}
	}
	return false;
}
 8000e16:	4770      	bx	lr

08000e18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e18:	480d      	ldr	r0, [pc, #52]	@ (8000e50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e1a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e1c:	480d      	ldr	r0, [pc, #52]	@ (8000e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e1e:	490e      	ldr	r1, [pc, #56]	@ (8000e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e20:	4a0e      	ldr	r2, [pc, #56]	@ (8000e5c <LoopForever+0xe>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a0b      	ldr	r2, [pc, #44]	@ (8000e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e34:	4c0b      	ldr	r4, [pc, #44]	@ (8000e64 <LoopForever+0x16>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e42:	f000 f813 	bl	8000e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e46:	f003 fb85 	bl	8004554 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e4a:	f7ff fca7 	bl	800079c <main>

08000e4e <LoopForever>:

LoopForever:
    b LoopForever
 8000e4e:	e7fe      	b.n	8000e4e <LoopForever>
  ldr   r0, =_estack
 8000e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e54:	20000200 	.word	0x20000200
  ldr r1, =_edata
 8000e58:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8000e5c:	08004690 	.word	0x08004690
  ldr r2, =_sbss
 8000e60:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8000e64:	20005984 	.word	0x20005984

08000e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC1_2_IRQHandler>
	...

08000e6c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <SystemInit+0x18>)
 8000e6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e72:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e76:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8000e7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e7e:	6099      	str	r1, [r3, #8]
#endif
}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp, pllvco, pllr, pllsource, pllm;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e88:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef8 <SystemCoreClockUpdate+0x70>)
 8000e8a:	6893      	ldr	r3, [r2, #8]
 8000e8c:	f003 030c 	and.w	r3, r3, #12
 8000e90:	2b08      	cmp	r3, #8
 8000e92:	d02d      	beq.n	8000ef0 <SystemCoreClockUpdate+0x68>
 8000e94:	2b0c      	cmp	r3, #12
 8000e96:	d00f      	beq.n	8000eb8 <SystemCoreClockUpdate+0x30>
 8000e98:	2b04      	cmp	r3, #4
 8000e9a:	d00a      	beq.n	8000eb2 <SystemCoreClockUpdate+0x2a>
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000e9c:	4917      	ldr	r1, [pc, #92]	@ (8000efc <SystemCoreClockUpdate+0x74>)
 8000e9e:	680b      	ldr	r3, [r1, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000ea0:	4a15      	ldr	r2, [pc, #84]	@ (8000ef8 <SystemCoreClockUpdate+0x70>)
 8000ea2:	4817      	ldr	r0, [pc, #92]	@ (8000f00 <SystemCoreClockUpdate+0x78>)
 8000ea4:	6892      	ldr	r2, [r2, #8]
 8000ea6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000eaa:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp;
 8000eac:	40d3      	lsrs	r3, r2
 8000eae:	600b      	str	r3, [r1, #0]
}
 8000eb0:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000eb2:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <SystemCoreClockUpdate+0x7c>)
 8000eb4:	4911      	ldr	r1, [pc, #68]	@ (8000efc <SystemCoreClockUpdate+0x74>)
 8000eb6:	e7f3      	b.n	8000ea0 <SystemCoreClockUpdate+0x18>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000eb8:	68d3      	ldr	r3, [r2, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1U ;
 8000eba:	68d0      	ldr	r0, [r2, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef8 <SystemCoreClockUpdate+0x70>)
 8000ebe:	490f      	ldr	r1, [pc, #60]	@ (8000efc <SystemCoreClockUpdate+0x74>)
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000ec0:	f003 0303 	and.w	r3, r3, #3
      if (pllsource == 0x02UL) /* HSI used as PLL clock source */
 8000ec4:	2b02      	cmp	r3, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1U ;
 8000ec6:	f3c0 1003 	ubfx	r0, r0, #4, #4
        pllvco = (HSI_VALUE / pllm);
 8000eca:	bf0c      	ite	eq
 8000ecc:	4b0d      	ldreq	r3, [pc, #52]	@ (8000f04 <SystemCoreClockUpdate+0x7c>)
        pllvco = (HSE_VALUE / pllm);
 8000ece:	4b0e      	ldrne	r3, [pc, #56]	@ (8000f08 <SystemCoreClockUpdate+0x80>)
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1U ;
 8000ed0:	3001      	adds	r0, #1
        pllvco = (HSE_VALUE / pllm);
 8000ed2:	fbb3 f0f0 	udiv	r0, r3, r0
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 8000ed6:	68d3      	ldr	r3, [r2, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1U) * 2U;
 8000ed8:	68d2      	ldr	r2, [r2, #12]
 8000eda:	f3c2 6241 	ubfx	r2, r2, #25, #2
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 8000ede:	f3c3 2306 	ubfx	r3, r3, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1U) * 2U;
 8000ee2:	3201      	adds	r2, #1
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 8000ee4:	fb00 f303 	mul.w	r3, r0, r3
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1U) * 2U;
 8000ee8:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllr;
 8000eea:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
 8000eee:	e7d7      	b.n	8000ea0 <SystemCoreClockUpdate+0x18>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ef0:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <SystemCoreClockUpdate+0x80>)
 8000ef2:	4902      	ldr	r1, [pc, #8]	@ (8000efc <SystemCoreClockUpdate+0x74>)
 8000ef4:	e7d4      	b.n	8000ea0 <SystemCoreClockUpdate+0x18>
 8000ef6:	bf00      	nop
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	20000204 	.word	0x20000204
 8000f00:	08004658 	.word	0x08004658
 8000f04:	00f42400 	.word	0x00f42400
 8000f08:	016e3600 	.word	0x016e3600

08000f0c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <HAL_Init>:
{
 8000f10:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f12:	2003      	movs	r0, #3
 8000f14:	f000 f81e 	bl	8000f54 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f18:	200f      	movs	r0, #15
 8000f1a:	f7ff fdb5 	bl	8000a88 <HAL_InitTick>
 8000f1e:	b110      	cbz	r0, 8000f26 <HAL_Init+0x16>
    status = HAL_ERROR;
 8000f20:	2401      	movs	r4, #1
}
 8000f22:	4620      	mov	r0, r4
 8000f24:	bd10      	pop	{r4, pc}
 8000f26:	4604      	mov	r4, r0
    HAL_MspInit();
 8000f28:	f7ff fff0 	bl	8000f0c <HAL_MspInit>
}
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	bd10      	pop	{r4, pc}

08000f30 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f30:	4a03      	ldr	r2, [pc, #12]	@ (8000f40 <HAL_IncTick+0x10>)
 8000f32:	4904      	ldr	r1, [pc, #16]	@ (8000f44 <HAL_IncTick+0x14>)
 8000f34:	6813      	ldr	r3, [r2, #0]
 8000f36:	6809      	ldr	r1, [r1, #0]
 8000f38:	440b      	add	r3, r1
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	200058cc 	.word	0x200058cc
 8000f44:	20000208 	.word	0x20000208

08000f48 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f48:	4b01      	ldr	r3, [pc, #4]	@ (8000f50 <HAL_GetTick+0x8>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	200058cc 	.word	0x200058cc

08000f54 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f54:	4907      	ldr	r1, [pc, #28]	@ (8000f74 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f56:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f58:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5a:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f62:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f64:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f66:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000f6e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe8 <HAL_NVIC_SetPriority+0x70>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f80:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f82:	f1c3 0e07 	rsb	lr, r3, #7
 8000f86:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8e:	bf28      	it	cs
 8000f90:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f94:	f1bc 0f06 	cmp.w	ip, #6
 8000f98:	d91c      	bls.n	8000fd4 <HAL_NVIC_SetPriority+0x5c>
 8000f9a:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	fa03 f30c 	lsl.w	r3, r3, ip
 8000fa6:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	fa03 f30e 	lsl.w	r3, r3, lr
 8000fb2:	ea21 0303 	bic.w	r3, r1, r3
 8000fb6:	fa03 f30c 	lsl.w	r3, r3, ip
 8000fba:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8000fbe:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000fc2:	db0a      	blt.n	8000fda <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000fc8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000fcc:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000fd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fd4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	4694      	mov	ip, r2
 8000fd8:	e7e7      	b.n	8000faa <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fda:	4a04      	ldr	r2, [pc, #16]	@ (8000fec <HAL_NVIC_SetPriority+0x74>)
 8000fdc:	f000 000f 	and.w	r0, r0, #15
 8000fe0:	4402      	add	r2, r0
 8000fe2:	7613      	strb	r3, [r2, #24]
 8000fe4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fe8:	e000ed00 	.word	0xe000ed00
 8000fec:	e000ecfc 	.word	0xe000ecfc

08000ff0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	db07      	blt.n	8001004 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff4:	0941      	lsrs	r1, r0, #5
 8000ff6:	4a04      	ldr	r2, [pc, #16]	@ (8001008 <HAL_NVIC_EnableIRQ+0x18>)
 8000ff8:	f000 001f 	and.w	r0, r0, #31
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	4083      	lsls	r3, r0
 8001000:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000e100 	.word	0xe000e100

0800100c <HAL_NVIC_GetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800100c:	2800      	cmp	r0, #0
 800100e:	db0b      	blt.n	8001028 <HAL_NVIC_GetPendingIRQ+0x1c>
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8001010:	0943      	lsrs	r3, r0, #5
 8001012:	4a06      	ldr	r2, [pc, #24]	@ (800102c <HAL_NVIC_GetPendingIRQ+0x20>)
 8001014:	3340      	adds	r3, #64	@ 0x40
 8001016:	f000 001f 	and.w	r0, r0, #31
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	fa23 f000 	lsr.w	r0, r3, r0
 8001022:	f000 0001 	and.w	r0, r0, #1
 8001026:	4770      	bx	lr
    return(0U);
 8001028:	2000      	movs	r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100

08001030 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001030:	4a35      	ldr	r2, [pc, #212]	@ (8001108 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8001032:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001034:	b960      	cbnz	r0, 8001050 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001036:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800103a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800103e:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001042:	d01b      	beq.n	800107c <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001044:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001048:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800104c:	2000      	movs	r0, #0
}
 800104e:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001050:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8001054:	d006      	beq.n	8001064 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001056:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800105a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800105e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001060:	2000      	movs	r0, #0
}
 8001062:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001064:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800106c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001070:	d029      	beq.n	80010c6 <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001076:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800107a:	e7f1      	b.n	8001060 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800107c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001080:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001084:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001086:	4821      	ldr	r0, [pc, #132]	@ (800110c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001088:	4921      	ldr	r1, [pc, #132]	@ (8001110 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800108a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800108e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001092:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001094:	6803      	ldr	r3, [r0, #0]
 8001096:	2032      	movs	r0, #50	@ 0x32
 8001098:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800109c:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800109e:	fba1 1303 	umull	r1, r3, r1, r3
 80010a2:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010a4:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010a6:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010aa:	d506      	bpl.n	80010ba <HAL_PWREx_ControlVoltageScaling+0x8a>
 80010ac:	e000      	b.n	80010b0 <HAL_PWREx_ControlVoltageScaling+0x80>
 80010ae:	b123      	cbz	r3, 80010ba <HAL_PWREx_ControlVoltageScaling+0x8a>
 80010b0:	6951      	ldr	r1, [r2, #20]
 80010b2:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80010b4:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010b8:	d4f9      	bmi.n	80010ae <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010ba:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	055b      	lsls	r3, r3, #21
 80010c0:	d5ce      	bpl.n	8001060 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 80010c2:	2003      	movs	r0, #3
 80010c4:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ca:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ce:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010d0:	480e      	ldr	r0, [pc, #56]	@ (800110c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80010d2:	490f      	ldr	r1, [pc, #60]	@ (8001110 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010dc:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010de:	6803      	ldr	r3, [r0, #0]
 80010e0:	2032      	movs	r0, #50	@ 0x32
 80010e2:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010e6:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010e8:	fba1 1303 	umull	r1, r3, r1, r3
 80010ec:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010ee:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010f0:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010f4:	d5e1      	bpl.n	80010ba <HAL_PWREx_ControlVoltageScaling+0x8a>
 80010f6:	e001      	b.n	80010fc <HAL_PWREx_ControlVoltageScaling+0xcc>
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0de      	beq.n	80010ba <HAL_PWREx_ControlVoltageScaling+0x8a>
 80010fc:	6951      	ldr	r1, [r2, #20]
 80010fe:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8001100:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001104:	d5d9      	bpl.n	80010ba <HAL_PWREx_ControlVoltageScaling+0x8a>
 8001106:	e7f7      	b.n	80010f8 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8001108:	40007000 	.word	0x40007000
 800110c:	20000204 	.word	0x20000204
 8001110:	431bde83 	.word	0x431bde83

08001114 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001114:	2800      	cmp	r0, #0
 8001116:	f000 8239 	beq.w	800158c <HAL_RCC_OscConfig+0x478>
{
 800111a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111e:	6803      	ldr	r3, [r0, #0]
 8001120:	07d9      	lsls	r1, r3, #31
{
 8001122:	b082      	sub	sp, #8
 8001124:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001126:	d512      	bpl.n	800114e <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001128:	49a3      	ldr	r1, [pc, #652]	@ (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 800112a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800112c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800112e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001132:	2a0c      	cmp	r2, #12
 8001134:	f000 80d6 	beq.w	80012e4 <HAL_RCC_OscConfig+0x1d0>
 8001138:	2a08      	cmp	r2, #8
 800113a:	f040 80d8 	bne.w	80012ee <HAL_RCC_OscConfig+0x1da>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800113e:	4a9e      	ldr	r2, [pc, #632]	@ (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001140:	6812      	ldr	r2, [r2, #0]
 8001142:	0392      	lsls	r2, r2, #14
 8001144:	d503      	bpl.n	800114e <HAL_RCC_OscConfig+0x3a>
 8001146:	6862      	ldr	r2, [r4, #4]
 8001148:	2a00      	cmp	r2, #0
 800114a:	f000 81a4 	beq.w	8001496 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114e:	079a      	lsls	r2, r3, #30
 8001150:	d522      	bpl.n	8001198 <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001152:	4a99      	ldr	r2, [pc, #612]	@ (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001154:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001156:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001158:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800115c:	2b0c      	cmp	r3, #12
 800115e:	f000 80fe 	beq.w	800135e <HAL_RCC_OscConfig+0x24a>
 8001162:	2b04      	cmp	r3, #4
 8001164:	f040 8100 	bne.w	8001368 <HAL_RCC_OscConfig+0x254>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001168:	4b93      	ldr	r3, [pc, #588]	@ (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	055b      	lsls	r3, r3, #21
 800116e:	d503      	bpl.n	8001178 <HAL_RCC_OscConfig+0x64>
 8001170:	68e3      	ldr	r3, [r4, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 818f 	beq.w	8001496 <HAL_RCC_OscConfig+0x382>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001178:	4a8f      	ldr	r2, [pc, #572]	@ (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 800117a:	6920      	ldr	r0, [r4, #16]
 800117c:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800117e:	498f      	ldr	r1, [pc, #572]	@ (80013bc <HAL_RCC_OscConfig+0x2a8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001180:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001184:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001188:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800118a:	6808      	ldr	r0, [r1, #0]
 800118c:	f7ff fc7c 	bl	8000a88 <HAL_InitTick>
 8001190:	2800      	cmp	r0, #0
 8001192:	f040 8180 	bne.w	8001496 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	071a      	lsls	r2, r3, #28
 800119a:	d519      	bpl.n	80011d0 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800119c:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800119e:	4d86      	ldr	r5, [pc, #536]	@ (80013b8 <HAL_RCC_OscConfig+0x2a4>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 80c8 	beq.w	8001336 <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_ENABLE();
 80011a6:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b2:	f7ff fec9 	bl	8000f48 <HAL_GetTick>
 80011b6:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011b8:	e005      	b.n	80011c6 <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ba:	f7ff fec5 	bl	8000f48 <HAL_GetTick>
 80011be:	1b80      	subs	r0, r0, r6
 80011c0:	2802      	cmp	r0, #2
 80011c2:	f200 8118 	bhi.w	80013f6 <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011c6:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80011ca:	079b      	lsls	r3, r3, #30
 80011cc:	d5f5      	bpl.n	80011ba <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ce:	6823      	ldr	r3, [r4, #0]
 80011d0:	075d      	lsls	r5, r3, #29
 80011d2:	d541      	bpl.n	8001258 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011d4:	4b78      	ldr	r3, [pc, #480]	@ (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 80011d6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80011d8:	00d0      	lsls	r0, r2, #3
 80011da:	f100 8110 	bmi.w	80013fe <HAL_RCC_OscConfig+0x2ea>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80011e0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80011e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80011e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80011f0:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011f2:	4e73      	ldr	r6, [pc, #460]	@ (80013c0 <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	6833      	ldr	r3, [r6, #0]
 80011f6:	05d9      	lsls	r1, r3, #23
 80011f8:	f140 812f 	bpl.w	800145a <HAL_RCC_OscConfig+0x346>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011fc:	68a3      	ldr	r3, [r4, #8]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	f000 80ff 	beq.w	8001402 <HAL_RCC_OscConfig+0x2ee>
 8001204:	2b05      	cmp	r3, #5
 8001206:	f000 8185 	beq.w	8001514 <HAL_RCC_OscConfig+0x400>
 800120a:	4e6b      	ldr	r6, [pc, #428]	@ (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 800120c:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8001210:	f022 0201 	bic.w	r2, r2, #1
 8001214:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 8001218:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 800121c:	f022 0204 	bic.w	r2, r2, #4
 8001220:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001224:	2b00      	cmp	r3, #0
 8001226:	f040 80f3 	bne.w	8001410 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800122a:	f7ff fe8d 	bl	8000f48 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800122e:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001232:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001234:	e005      	b.n	8001242 <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001236:	f7ff fe87 	bl	8000f48 <HAL_GetTick>
 800123a:	1bc0      	subs	r0, r0, r7
 800123c:	4540      	cmp	r0, r8
 800123e:	f200 80da 	bhi.w	80013f6 <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001242:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8001246:	0799      	lsls	r1, r3, #30
 8001248:	d4f5      	bmi.n	8001236 <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800124a:	b125      	cbz	r5, 8001256 <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800124c:	4a5a      	ldr	r2, [pc, #360]	@ (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 800124e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001254:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	069a      	lsls	r2, r3, #26
 800125a:	d518      	bpl.n	800128e <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800125c:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800125e:	4d56      	ldr	r5, [pc, #344]	@ (80013b8 <HAL_RCC_OscConfig+0x2a4>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80e6 	beq.w	8001432 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_HSI48_ENABLE();
 8001266:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001272:	f7ff fe69 	bl	8000f48 <HAL_GetTick>
 8001276:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001278:	e005      	b.n	8001286 <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800127a:	f7ff fe65 	bl	8000f48 <HAL_GetTick>
 800127e:	1b80      	subs	r0, r0, r6
 8001280:	2802      	cmp	r0, #2
 8001282:	f200 80b8 	bhi.w	80013f6 <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001286:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800128a:	079b      	lsls	r3, r3, #30
 800128c:	d5f5      	bpl.n	800127a <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800128e:	69e3      	ldr	r3, [r4, #28]
 8001290:	b323      	cbz	r3, 80012dc <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001292:	4d49      	ldr	r5, [pc, #292]	@ (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001294:	68aa      	ldr	r2, [r5, #8]
 8001296:	f002 020c 	and.w	r2, r2, #12
 800129a:	2a0c      	cmp	r2, #12
 800129c:	f000 8148 	beq.w	8001530 <HAL_RCC_OscConfig+0x41c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012a0:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a2:	682b      	ldr	r3, [r5, #0]
 80012a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012a8:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012aa:	f000 80f6 	beq.w	800149a <HAL_RCC_OscConfig+0x386>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80012ae:	68eb      	ldr	r3, [r5, #12]
 80012b0:	f023 0303 	bic.w	r3, r3, #3
 80012b4:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80012b6:	68eb      	ldr	r3, [r5, #12]
 80012b8:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80012bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012c0:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c2:	f7ff fe41 	bl	8000f48 <HAL_GetTick>
 80012c6:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012c8:	e005      	b.n	80012d6 <HAL_RCC_OscConfig+0x1c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ca:	f7ff fe3d 	bl	8000f48 <HAL_GetTick>
 80012ce:	1b00      	subs	r0, r0, r4
 80012d0:	2802      	cmp	r0, #2
 80012d2:	f200 8090 	bhi.w	80013f6 <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012d6:	682b      	ldr	r3, [r5, #0]
 80012d8:	019b      	lsls	r3, r3, #6
 80012da:	d4f6      	bmi.n	80012ca <HAL_RCC_OscConfig+0x1b6>
      }
    }
  }
  }

  return HAL_OK;
 80012dc:	2000      	movs	r0, #0
}
 80012de:	b002      	add	sp, #8
 80012e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012e4:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80012e8:	2903      	cmp	r1, #3
 80012ea:	f43f af28 	beq.w	800113e <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ee:	6863      	ldr	r3, [r4, #4]
 80012f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012f4:	d055      	beq.n	80013a2 <HAL_RCC_OscConfig+0x28e>
 80012f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012fa:	f000 80bf 	beq.w	800147c <HAL_RCC_OscConfig+0x368>
 80012fe:	4d2e      	ldr	r5, [pc, #184]	@ (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 8001300:	682a      	ldr	r2, [r5, #0]
 8001302:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001306:	602a      	str	r2, [r5, #0]
 8001308:	682a      	ldr	r2, [r5, #0]
 800130a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800130e:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001310:	2b00      	cmp	r3, #0
 8001312:	d14b      	bne.n	80013ac <HAL_RCC_OscConfig+0x298>
        tickstart = HAL_GetTick();
 8001314:	f7ff fe18 	bl	8000f48 <HAL_GetTick>
 8001318:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800131a:	e004      	b.n	8001326 <HAL_RCC_OscConfig+0x212>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fe14 	bl	8000f48 <HAL_GetTick>
 8001320:	1b80      	subs	r0, r0, r6
 8001322:	2864      	cmp	r0, #100	@ 0x64
 8001324:	d867      	bhi.n	80013f6 <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001326:	682b      	ldr	r3, [r5, #0]
 8001328:	0399      	lsls	r1, r3, #14
 800132a:	d4f7      	bmi.n	800131c <HAL_RCC_OscConfig+0x208>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132c:	6823      	ldr	r3, [r4, #0]
 800132e:	079a      	lsls	r2, r3, #30
 8001330:	f57f af32 	bpl.w	8001198 <HAL_RCC_OscConfig+0x84>
 8001334:	e70d      	b.n	8001152 <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 8001336:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800133a:	f023 0301 	bic.w	r3, r3, #1
 800133e:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8001342:	f7ff fe01 	bl	8000f48 <HAL_GetTick>
 8001346:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001348:	e004      	b.n	8001354 <HAL_RCC_OscConfig+0x240>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800134a:	f7ff fdfd 	bl	8000f48 <HAL_GetTick>
 800134e:	1b80      	subs	r0, r0, r6
 8001350:	2802      	cmp	r0, #2
 8001352:	d850      	bhi.n	80013f6 <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001354:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8001358:	079f      	lsls	r7, r3, #30
 800135a:	d4f6      	bmi.n	800134a <HAL_RCC_OscConfig+0x236>
 800135c:	e737      	b.n	80011ce <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800135e:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001362:	2a02      	cmp	r2, #2
 8001364:	f43f af00 	beq.w	8001168 <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001368:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 800136a:	4d13      	ldr	r5, [pc, #76]	@ (80013b8 <HAL_RCC_OscConfig+0x2a4>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800136c:	2b00      	cmp	r3, #0
 800136e:	d032      	beq.n	80013d6 <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_HSI_ENABLE();
 8001370:	682b      	ldr	r3, [r5, #0]
 8001372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001376:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001378:	f7ff fde6 	bl	8000f48 <HAL_GetTick>
 800137c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800137e:	e004      	b.n	800138a <HAL_RCC_OscConfig+0x276>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001380:	f7ff fde2 	bl	8000f48 <HAL_GetTick>
 8001384:	1b80      	subs	r0, r0, r6
 8001386:	2802      	cmp	r0, #2
 8001388:	d835      	bhi.n	80013f6 <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800138a:	682b      	ldr	r3, [r5, #0]
 800138c:	055f      	lsls	r7, r3, #21
 800138e:	d5f7      	bpl.n	8001380 <HAL_RCC_OscConfig+0x26c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001390:	686b      	ldr	r3, [r5, #4]
 8001392:	6922      	ldr	r2, [r4, #16]
 8001394:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001398:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800139c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800139e:	6823      	ldr	r3, [r4, #0]
 80013a0:	e6fa      	b.n	8001198 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a2:	4a05      	ldr	r2, [pc, #20]	@ (80013b8 <HAL_RCC_OscConfig+0x2a4>)
 80013a4:	6813      	ldr	r3, [r2, #0]
 80013a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013aa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80013ac:	f7ff fdcc 	bl	8000f48 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013b0:	4e01      	ldr	r6, [pc, #4]	@ (80013b8 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 80013b2:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013b4:	e00b      	b.n	80013ce <HAL_RCC_OscConfig+0x2ba>
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000
 80013bc:	2000020c 	.word	0x2000020c
 80013c0:	40007000 	.word	0x40007000
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff fdc0 	bl	8000f48 <HAL_GetTick>
 80013c8:	1b40      	subs	r0, r0, r5
 80013ca:	2864      	cmp	r0, #100	@ 0x64
 80013cc:	d813      	bhi.n	80013f6 <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ce:	6833      	ldr	r3, [r6, #0]
 80013d0:	039f      	lsls	r7, r3, #14
 80013d2:	d5f7      	bpl.n	80013c4 <HAL_RCC_OscConfig+0x2b0>
 80013d4:	e7aa      	b.n	800132c <HAL_RCC_OscConfig+0x218>
        __HAL_RCC_HSI_DISABLE();
 80013d6:	682b      	ldr	r3, [r5, #0]
 80013d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013dc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013de:	f7ff fdb3 	bl	8000f48 <HAL_GetTick>
 80013e2:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013e4:	682b      	ldr	r3, [r5, #0]
 80013e6:	0559      	lsls	r1, r3, #21
 80013e8:	f57f aed5 	bpl.w	8001196 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ec:	f7ff fdac 	bl	8000f48 <HAL_GetTick>
 80013f0:	1b80      	subs	r0, r0, r6
 80013f2:	2802      	cmp	r0, #2
 80013f4:	d9f6      	bls.n	80013e4 <HAL_RCC_OscConfig+0x2d0>
            return HAL_TIMEOUT;
 80013f6:	2003      	movs	r0, #3
}
 80013f8:	b002      	add	sp, #8
 80013fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 80013fe:	2500      	movs	r5, #0
 8001400:	e6f7      	b.n	80011f2 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001402:	4a63      	ldr	r2, [pc, #396]	@ (8001590 <HAL_RCC_OscConfig+0x47c>)
 8001404:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8001410:	f7ff fd9a 	bl	8000f48 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001414:	4f5e      	ldr	r7, [pc, #376]	@ (8001590 <HAL_RCC_OscConfig+0x47c>)
      tickstart = HAL_GetTick();
 8001416:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001418:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800141c:	e004      	b.n	8001428 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141e:	f7ff fd93 	bl	8000f48 <HAL_GetTick>
 8001422:	1b80      	subs	r0, r0, r6
 8001424:	4540      	cmp	r0, r8
 8001426:	d8e6      	bhi.n	80013f6 <HAL_RCC_OscConfig+0x2e2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001428:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800142c:	079b      	lsls	r3, r3, #30
 800142e:	d5f6      	bpl.n	800141e <HAL_RCC_OscConfig+0x30a>
 8001430:	e70b      	b.n	800124a <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 8001432:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800143e:	f7ff fd83 	bl	8000f48 <HAL_GetTick>
 8001442:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001444:	e004      	b.n	8001450 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001446:	f7ff fd7f 	bl	8000f48 <HAL_GetTick>
 800144a:	1b80      	subs	r0, r0, r6
 800144c:	2802      	cmp	r0, #2
 800144e:	d8d2      	bhi.n	80013f6 <HAL_RCC_OscConfig+0x2e2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001450:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8001454:	079f      	lsls	r7, r3, #30
 8001456:	d4f6      	bmi.n	8001446 <HAL_RCC_OscConfig+0x332>
 8001458:	e719      	b.n	800128e <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800145a:	6833      	ldr	r3, [r6, #0]
 800145c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001460:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001462:	f7ff fd71 	bl	8000f48 <HAL_GetTick>
 8001466:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001468:	6833      	ldr	r3, [r6, #0]
 800146a:	05da      	lsls	r2, r3, #23
 800146c:	f53f aec6 	bmi.w	80011fc <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001470:	f7ff fd6a 	bl	8000f48 <HAL_GetTick>
 8001474:	1bc0      	subs	r0, r0, r7
 8001476:	2802      	cmp	r0, #2
 8001478:	d9f6      	bls.n	8001468 <HAL_RCC_OscConfig+0x354>
 800147a:	e7bc      	b.n	80013f6 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001480:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001492:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001494:	e78a      	b.n	80013ac <HAL_RCC_OscConfig+0x298>
    return HAL_ERROR;
 8001496:	2001      	movs	r0, #1
 8001498:	e721      	b.n	80012de <HAL_RCC_OscConfig+0x1ca>
        tickstart = HAL_GetTick();
 800149a:	f7ff fd55 	bl	8000f48 <HAL_GetTick>
 800149e:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014a0:	e004      	b.n	80014ac <HAL_RCC_OscConfig+0x398>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a2:	f7ff fd51 	bl	8000f48 <HAL_GetTick>
 80014a6:	1b80      	subs	r0, r0, r6
 80014a8:	2802      	cmp	r0, #2
 80014aa:	d8a4      	bhi.n	80013f6 <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ac:	682b      	ldr	r3, [r5, #0]
 80014ae:	0199      	lsls	r1, r3, #6
 80014b0:	d4f7      	bmi.n	80014a2 <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014b2:	68e9      	ldr	r1, [r5, #12]
 80014b4:	4b37      	ldr	r3, [pc, #220]	@ (8001594 <HAL_RCC_OscConfig+0x480>)
 80014b6:	6a22      	ldr	r2, [r4, #32]
 80014b8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ba:	4e35      	ldr	r6, [pc, #212]	@ (8001590 <HAL_RCC_OscConfig+0x47c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014bc:	400b      	ands	r3, r1
 80014be:	4313      	orrs	r3, r2
 80014c0:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 80014c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80014c8:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80014cc:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 80014d0:	3801      	subs	r0, #1
 80014d2:	0849      	lsrs	r1, r1, #1
 80014d4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80014d8:	3901      	subs	r1, #1
 80014da:	0852      	lsrs	r2, r2, #1
 80014dc:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80014e0:	3a01      	subs	r2, #1
 80014e2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80014e6:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014ee:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014f0:	68eb      	ldr	r3, [r5, #12]
 80014f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014f6:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80014f8:	f7ff fd26 	bl	8000f48 <HAL_GetTick>
 80014fc:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014fe:	e005      	b.n	800150c <HAL_RCC_OscConfig+0x3f8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001500:	f7ff fd22 	bl	8000f48 <HAL_GetTick>
 8001504:	1b00      	subs	r0, r0, r4
 8001506:	2802      	cmp	r0, #2
 8001508:	f63f af75 	bhi.w	80013f6 <HAL_RCC_OscConfig+0x2e2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800150c:	6833      	ldr	r3, [r6, #0]
 800150e:	019a      	lsls	r2, r3, #6
 8001510:	d5f6      	bpl.n	8001500 <HAL_RCC_OscConfig+0x3ec>
 8001512:	e6e3      	b.n	80012dc <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001514:	4b1e      	ldr	r3, [pc, #120]	@ (8001590 <HAL_RCC_OscConfig+0x47c>)
 8001516:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800151a:	f042 0204 	orr.w	r2, r2, #4
 800151e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8001522:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001526:	f042 0201 	orr.w	r2, r2, #1
 800152a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800152e:	e76f      	b.n	8001410 <HAL_RCC_OscConfig+0x2fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001530:	2b01      	cmp	r3, #1
 8001532:	d0b0      	beq.n	8001496 <HAL_RCC_OscConfig+0x382>
      temp_pllckcfg = RCC->PLLCFGR;
 8001534:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001536:	6a22      	ldr	r2, [r4, #32]
 8001538:	f003 0103 	and.w	r1, r3, #3
 800153c:	4291      	cmp	r1, r2
 800153e:	d1aa      	bne.n	8001496 <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001540:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001542:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001546:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001548:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800154c:	d1a3      	bne.n	8001496 <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800154e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001550:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001554:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001558:	d19d      	bne.n	8001496 <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800155a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800155c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001560:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8001564:	d197      	bne.n	8001496 <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001566:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001568:	0852      	lsrs	r2, r2, #1
 800156a:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 800156e:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001570:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001574:	d18f      	bne.n	8001496 <HAL_RCC_OscConfig+0x382>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001576:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001578:	0852      	lsrs	r2, r2, #1
 800157a:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 800157e:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001580:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001584:	bf14      	ite	ne
 8001586:	2001      	movne	r0, #1
 8001588:	2000      	moveq	r0, #0
 800158a:	e6a8      	b.n	80012de <HAL_RCC_OscConfig+0x1ca>
    return HAL_ERROR;
 800158c:	2001      	movs	r0, #1
}
 800158e:	4770      	bx	lr
 8001590:	40021000 	.word	0x40021000
 8001594:	019f800c 	.word	0x019f800c

08001598 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001598:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <HAL_RCC_GetSysClockFreq+0x64>)
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	f002 020c 	and.w	r2, r2, #12
 80015a0:	2a04      	cmp	r2, #4
 80015a2:	d026      	beq.n	80015f2 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	f002 020c 	and.w	r2, r2, #12
 80015aa:	2a08      	cmp	r2, #8
 80015ac:	d023      	beq.n	80015f6 <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	f002 020c 	and.w	r2, r2, #12
 80015b4:	2a0c      	cmp	r2, #12
 80015b6:	d001      	beq.n	80015bc <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80015b8:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 80015ba:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015bc:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015be:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015c0:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015c2:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 80015c6:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015c8:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015cc:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015d0:	bf0c      	ite	eq
 80015d2:	4b0b      	ldreq	r3, [pc, #44]	@ (8001600 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015d4:	4b0b      	ldrne	r3, [pc, #44]	@ (8001604 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015d6:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80015dc:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <HAL_RCC_GetSysClockFreq+0x64>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80015e8:	3301      	adds	r3, #1
 80015ea:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80015ec:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80015f0:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80015f2:	4804      	ldr	r0, [pc, #16]	@ (8001604 <HAL_RCC_GetSysClockFreq+0x6c>)
 80015f4:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80015f6:	4802      	ldr	r0, [pc, #8]	@ (8001600 <HAL_RCC_GetSysClockFreq+0x68>)
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000
 8001600:	016e3600 	.word	0x016e3600
 8001604:	00f42400 	.word	0x00f42400

08001608 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001608:	2800      	cmp	r0, #0
 800160a:	f000 80ee 	beq.w	80017ea <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800160e:	4a78      	ldr	r2, [pc, #480]	@ (80017f0 <HAL_RCC_ClockConfig+0x1e8>)
{
 8001610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001614:	6813      	ldr	r3, [r2, #0]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	428b      	cmp	r3, r1
 800161c:	460d      	mov	r5, r1
 800161e:	4604      	mov	r4, r0
 8001620:	d20c      	bcs.n	800163c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001622:	6813      	ldr	r3, [r2, #0]
 8001624:	f023 030f 	bic.w	r3, r3, #15
 8001628:	430b      	orrs	r3, r1
 800162a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800162c:	6813      	ldr	r3, [r2, #0]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	428b      	cmp	r3, r1
 8001634:	d002      	beq.n	800163c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8001636:	2001      	movs	r0, #1
}
 8001638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	07df      	lsls	r7, r3, #31
 8001640:	d569      	bpl.n	8001716 <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001642:	6867      	ldr	r7, [r4, #4]
 8001644:	2f03      	cmp	r7, #3
 8001646:	f000 80a0 	beq.w	800178a <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164a:	4b6a      	ldr	r3, [pc, #424]	@ (80017f4 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164c:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164e:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001650:	f000 8097 	beq.w	8001782 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001654:	055b      	lsls	r3, r3, #21
 8001656:	d5ee      	bpl.n	8001636 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001658:	f7ff ff9e 	bl	8001598 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800165c:	4b66      	ldr	r3, [pc, #408]	@ (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 800165e:	4298      	cmp	r0, r3
 8001660:	f240 80c0 	bls.w	80017e4 <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001664:	4a63      	ldr	r2, [pc, #396]	@ (80017f4 <HAL_RCC_ClockConfig+0x1ec>)
 8001666:	6893      	ldr	r3, [r2, #8]
 8001668:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800166c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001670:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001672:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001676:	4e5f      	ldr	r6, [pc, #380]	@ (80017f4 <HAL_RCC_ClockConfig+0x1ec>)
 8001678:	68b3      	ldr	r3, [r6, #8]
 800167a:	f023 0303 	bic.w	r3, r3, #3
 800167e:	433b      	orrs	r3, r7
 8001680:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001682:	f7ff fc61 	bl	8000f48 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001686:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800168a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168c:	e004      	b.n	8001698 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800168e:	f7ff fc5b 	bl	8000f48 <HAL_GetTick>
 8001692:	1bc0      	subs	r0, r0, r7
 8001694:	4540      	cmp	r0, r8
 8001696:	d871      	bhi.n	800177c <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001698:	68b3      	ldr	r3, [r6, #8]
 800169a:	6862      	ldr	r2, [r4, #4]
 800169c:	f003 030c 	and.w	r3, r3, #12
 80016a0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80016a4:	d1f3      	bne.n	800168e <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a6:	6823      	ldr	r3, [r4, #0]
 80016a8:	079f      	lsls	r7, r3, #30
 80016aa:	d436      	bmi.n	800171a <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 80016ac:	f1b9 0f00 	cmp.w	r9, #0
 80016b0:	d003      	beq.n	80016ba <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80016b2:	68b3      	ldr	r3, [r6, #8]
 80016b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80016b8:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016ba:	4e4d      	ldr	r6, [pc, #308]	@ (80017f0 <HAL_RCC_ClockConfig+0x1e8>)
 80016bc:	6833      	ldr	r3, [r6, #0]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	42ab      	cmp	r3, r5
 80016c4:	d846      	bhi.n	8001754 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	075a      	lsls	r2, r3, #29
 80016ca:	d506      	bpl.n	80016da <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016cc:	4949      	ldr	r1, [pc, #292]	@ (80017f4 <HAL_RCC_ClockConfig+0x1ec>)
 80016ce:	68e0      	ldr	r0, [r4, #12]
 80016d0:	688a      	ldr	r2, [r1, #8]
 80016d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80016d6:	4302      	orrs	r2, r0
 80016d8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016da:	071b      	lsls	r3, r3, #28
 80016dc:	d507      	bpl.n	80016ee <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016de:	4a45      	ldr	r2, [pc, #276]	@ (80017f4 <HAL_RCC_ClockConfig+0x1ec>)
 80016e0:	6921      	ldr	r1, [r4, #16]
 80016e2:	6893      	ldr	r3, [r2, #8]
 80016e4:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80016e8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80016ec:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016ee:	f7ff ff53 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 80016f2:	4a40      	ldr	r2, [pc, #256]	@ (80017f4 <HAL_RCC_ClockConfig+0x1ec>)
 80016f4:	4c41      	ldr	r4, [pc, #260]	@ (80017fc <HAL_RCC_ClockConfig+0x1f4>)
 80016f6:	6892      	ldr	r2, [r2, #8]
 80016f8:	4941      	ldr	r1, [pc, #260]	@ (8001800 <HAL_RCC_ClockConfig+0x1f8>)
 80016fa:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80016fe:	4603      	mov	r3, r0
 8001700:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8001702:	4840      	ldr	r0, [pc, #256]	@ (8001804 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001704:	f002 021f 	and.w	r2, r2, #31
 8001708:	40d3      	lsrs	r3, r2
 800170a:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 800170c:	6800      	ldr	r0, [r0, #0]
}
 800170e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8001712:	f7ff b9b9 	b.w	8000a88 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001716:	079e      	lsls	r6, r3, #30
 8001718:	d5cf      	bpl.n	80016ba <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800171a:	0758      	lsls	r0, r3, #29
 800171c:	d504      	bpl.n	8001728 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800171e:	4935      	ldr	r1, [pc, #212]	@ (80017f4 <HAL_RCC_ClockConfig+0x1ec>)
 8001720:	688a      	ldr	r2, [r1, #8]
 8001722:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001726:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001728:	0719      	lsls	r1, r3, #28
 800172a:	d506      	bpl.n	800173a <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800172c:	4a31      	ldr	r2, [pc, #196]	@ (80017f4 <HAL_RCC_ClockConfig+0x1ec>)
 800172e:	6893      	ldr	r3, [r2, #8]
 8001730:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001734:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001738:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800173a:	4a2e      	ldr	r2, [pc, #184]	@ (80017f4 <HAL_RCC_ClockConfig+0x1ec>)
 800173c:	68a1      	ldr	r1, [r4, #8]
 800173e:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001740:	4e2b      	ldr	r6, [pc, #172]	@ (80017f0 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001742:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001746:	430b      	orrs	r3, r1
 8001748:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800174a:	6833      	ldr	r3, [r6, #0]
 800174c:	f003 030f 	and.w	r3, r3, #15
 8001750:	42ab      	cmp	r3, r5
 8001752:	d9b8      	bls.n	80016c6 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001754:	6833      	ldr	r3, [r6, #0]
 8001756:	f023 030f 	bic.w	r3, r3, #15
 800175a:	432b      	orrs	r3, r5
 800175c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800175e:	f7ff fbf3 	bl	8000f48 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001762:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8001766:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001768:	6833      	ldr	r3, [r6, #0]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	42ab      	cmp	r3, r5
 8001770:	d0a9      	beq.n	80016c6 <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001772:	f7ff fbe9 	bl	8000f48 <HAL_GetTick>
 8001776:	1bc0      	subs	r0, r0, r7
 8001778:	4540      	cmp	r0, r8
 800177a:	d9f5      	bls.n	8001768 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 800177c:	2003      	movs	r0, #3
}
 800177e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001782:	039a      	lsls	r2, r3, #14
 8001784:	f53f af68 	bmi.w	8001658 <HAL_RCC_ClockConfig+0x50>
 8001788:	e755      	b.n	8001636 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800178a:	4a1a      	ldr	r2, [pc, #104]	@ (80017f4 <HAL_RCC_ClockConfig+0x1ec>)
 800178c:	6811      	ldr	r1, [r2, #0]
 800178e:	0188      	lsls	r0, r1, #6
 8001790:	f57f af51 	bpl.w	8001636 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001794:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001796:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001798:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 800179a:	4e17      	ldr	r6, [pc, #92]	@ (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800179c:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 80017a0:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017a2:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017a6:	bf0c      	ite	eq
 80017a8:	4817      	ldreq	r0, [pc, #92]	@ (8001808 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017aa:	4818      	ldrne	r0, [pc, #96]	@ (800180c <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017ac:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017ae:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017b2:	4810      	ldr	r0, [pc, #64]	@ (80017f4 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017b4:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80017b8:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017bc:	68c1      	ldr	r1, [r0, #12]
 80017be:	f3c1 6141 	ubfx	r1, r1, #25, #2
 80017c2:	3101      	adds	r1, #1
 80017c4:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 80017c6:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 80017ca:	42b2      	cmp	r2, r6
 80017cc:	d90a      	bls.n	80017e4 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017ce:	6882      	ldr	r2, [r0, #8]
 80017d0:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 80017d4:	f43f af46 	beq.w	8001664 <HAL_RCC_ClockConfig+0x5c>
 80017d8:	0799      	lsls	r1, r3, #30
 80017da:	d503      	bpl.n	80017e4 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017dc:	68a3      	ldr	r3, [r4, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f43f af40 	beq.w	8001664 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80017e4:	f04f 0900 	mov.w	r9, #0
 80017e8:	e745      	b.n	8001676 <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 80017ea:	2001      	movs	r0, #1
}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40022000 	.word	0x40022000
 80017f4:	40021000 	.word	0x40021000
 80017f8:	04c4b400 	.word	0x04c4b400
 80017fc:	08004658 	.word	0x08004658
 8001800:	20000204 	.word	0x20000204
 8001804:	2000020c 	.word	0x2000020c
 8001808:	016e3600 	.word	0x016e3600
 800180c:	00f42400 	.word	0x00f42400

08001810 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001810:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001812:	4a06      	ldr	r2, [pc, #24]	@ (800182c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001814:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001816:	4906      	ldr	r1, [pc, #24]	@ (8001830 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001818:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800181c:	6808      	ldr	r0, [r1, #0]
 800181e:	5cd3      	ldrb	r3, [r2, r3]
 8001820:	f003 031f 	and.w	r3, r3, #31
}
 8001824:	40d8      	lsrs	r0, r3
 8001826:	4770      	bx	lr
 8001828:	40021000 	.word	0x40021000
 800182c:	08004650 	.word	0x08004650
 8001830:	20000204 	.word	0x20000204

08001834 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001834:	4b05      	ldr	r3, [pc, #20]	@ (800184c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001836:	4a06      	ldr	r2, [pc, #24]	@ (8001850 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001838:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800183a:	4906      	ldr	r1, [pc, #24]	@ (8001854 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800183c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001840:	6808      	ldr	r0, [r1, #0]
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	f003 031f 	and.w	r3, r3, #31
}
 8001848:	40d8      	lsrs	r0, r3
 800184a:	4770      	bx	lr
 800184c:	40021000 	.word	0x40021000
 8001850:	08004650 	.word	0x08004650
 8001854:	20000204 	.word	0x20000204

08001858 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800185c:	6803      	ldr	r3, [r0, #0]
{
 800185e:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001860:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 8001864:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001866:	d052      	beq.n	800190e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001868:	4bac      	ldr	r3, [pc, #688]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800186a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800186c:	00d5      	lsls	r5, r2, #3
 800186e:	f140 813a 	bpl.w	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
    FlagStatus       pwrclkchanged = RESET;
 8001872:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001874:	4daa      	ldr	r5, [pc, #680]	@ (8001b20 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001876:	682b      	ldr	r3, [r5, #0]
 8001878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800187c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800187e:	f7ff fb63 	bl	8000f48 <HAL_GetTick>
 8001882:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001884:	e005      	b.n	8001892 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001886:	f7ff fb5f 	bl	8000f48 <HAL_GetTick>
 800188a:	1b83      	subs	r3, r0, r6
 800188c:	2b02      	cmp	r3, #2
 800188e:	f200 8135 	bhi.w	8001afc <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001892:	682b      	ldr	r3, [r5, #0]
 8001894:	05d8      	lsls	r0, r3, #23
 8001896:	d5f6      	bpl.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001898:	4da0      	ldr	r5, [pc, #640]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800189a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800189c:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80018a0:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80018a4:	d026      	beq.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d024      	beq.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80018aa:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80018ae:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80018b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b6:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80018ba:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80018be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018c2:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80018c6:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80018ca:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 80018cc:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80018d0:	d510      	bpl.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d2:	f7ff fb39 	bl	8000f48 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d6:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80018da:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018dc:	e005      	b.n	80018ea <HAL_RCCEx_PeriphCLKConfig+0x92>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff fb33 	bl	8000f48 <HAL_GetTick>
 80018e2:	1b80      	subs	r0, r0, r6
 80018e4:	4540      	cmp	r0, r8
 80018e6:	f200 8109 	bhi.w	8001afc <HAL_RCCEx_PeriphCLKConfig+0x2a4>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ea:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80018ee:	079b      	lsls	r3, r3, #30
 80018f0:	d5f5      	bpl.n	80018de <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018f2:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80018f4:	4989      	ldr	r1, [pc, #548]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80018f6:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 80018fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018fe:	4313      	orrs	r3, r2
 8001900:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001904:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001906:	2000      	movs	r0, #0
    if(pwrclkchanged == SET)
 8001908:	2f00      	cmp	r7, #0
 800190a:	f040 80fc 	bne.w	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800190e:	07dd      	lsls	r5, r3, #31
 8001910:	d508      	bpl.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001912:	4982      	ldr	r1, [pc, #520]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001914:	6865      	ldr	r5, [r4, #4]
 8001916:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800191a:	f022 0203 	bic.w	r2, r2, #3
 800191e:	432a      	orrs	r2, r5
 8001920:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001924:	0799      	lsls	r1, r3, #30
 8001926:	d508      	bpl.n	800193a <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001928:	497c      	ldr	r1, [pc, #496]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800192a:	68a5      	ldr	r5, [r4, #8]
 800192c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8001930:	f022 020c 	bic.w	r2, r2, #12
 8001934:	432a      	orrs	r2, r5
 8001936:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800193a:	075a      	lsls	r2, r3, #29
 800193c:	d508      	bpl.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800193e:	4977      	ldr	r1, [pc, #476]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001940:	68e5      	ldr	r5, [r4, #12]
 8001942:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8001946:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800194a:	432a      	orrs	r2, r5
 800194c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001950:	071f      	lsls	r7, r3, #28
 8001952:	d508      	bpl.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001954:	4971      	ldr	r1, [pc, #452]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001956:	6925      	ldr	r5, [r4, #16]
 8001958:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800195c:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8001960:	432a      	orrs	r2, r5
 8001962:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001966:	06de      	lsls	r6, r3, #27
 8001968:	d508      	bpl.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800196a:	496c      	ldr	r1, [pc, #432]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800196c:	6965      	ldr	r5, [r4, #20]
 800196e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8001972:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001976:	432a      	orrs	r2, r5
 8001978:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800197c:	069d      	lsls	r5, r3, #26
 800197e:	d508      	bpl.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001980:	4966      	ldr	r1, [pc, #408]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001982:	69a5      	ldr	r5, [r4, #24]
 8001984:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8001988:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800198c:	432a      	orrs	r2, r5
 800198e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001992:	0659      	lsls	r1, r3, #25
 8001994:	d508      	bpl.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001996:	4961      	ldr	r1, [pc, #388]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001998:	69e5      	ldr	r5, [r4, #28]
 800199a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800199e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80019a2:	432a      	orrs	r2, r5
 80019a4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80019a8:	061a      	lsls	r2, r3, #24
 80019aa:	d508      	bpl.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80019ac:	495b      	ldr	r1, [pc, #364]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80019ae:	6a25      	ldr	r5, [r4, #32]
 80019b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80019b4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80019b8:	432a      	orrs	r2, r5
 80019ba:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80019be:	05df      	lsls	r7, r3, #23
 80019c0:	d508      	bpl.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80019c2:	4956      	ldr	r1, [pc, #344]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80019c4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80019c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80019ca:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80019ce:	432a      	orrs	r2, r5
 80019d0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80019d4:	039e      	lsls	r6, r3, #14
 80019d6:	d508      	bpl.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80019d8:	4950      	ldr	r1, [pc, #320]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80019da:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80019dc:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 80019e0:	f022 0203 	bic.w	r2, r2, #3
 80019e4:	432a      	orrs	r2, r5
 80019e6:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80019ea:	059d      	lsls	r5, r3, #22
 80019ec:	d508      	bpl.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80019ee:	494b      	ldr	r1, [pc, #300]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80019f0:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80019f2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80019f6:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80019fa:	432a      	orrs	r2, r5
 80019fc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001a00:	0559      	lsls	r1, r3, #21
 8001a02:	d50b      	bpl.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a04:	4945      	ldr	r1, [pc, #276]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001a06:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8001a08:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8001a0c:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8001a10:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001a12:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a16:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001a1a:	d07a      	beq.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001a1c:	051a      	lsls	r2, r3, #20
 8001a1e:	d50b      	bpl.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001a20:	493e      	ldr	r1, [pc, #248]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001a22:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8001a24:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8001a28:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8001a2c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001a2e:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001a32:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001a36:	d075      	beq.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001a38:	04df      	lsls	r7, r3, #19
 8001a3a:	d50b      	bpl.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001a3c:	4937      	ldr	r1, [pc, #220]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001a3e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8001a40:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8001a44:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001a48:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001a4a:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001a4e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001a52:	d06c      	beq.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001a54:	049e      	lsls	r6, r3, #18
 8001a56:	d50b      	bpl.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a58:	4930      	ldr	r1, [pc, #192]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001a5a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8001a5c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8001a60:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8001a64:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001a66:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a6a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001a6e:	d063      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001a70:	045d      	lsls	r5, r3, #17
 8001a72:	d50b      	bpl.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001a74:	4929      	ldr	r1, [pc, #164]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001a76:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8001a78:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8001a7c:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8001a80:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001a82:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001a86:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001a8a:	d05a      	beq.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001a8c:	0419      	lsls	r1, r3, #16
 8001a8e:	d50b      	bpl.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001a90:	4922      	ldr	r1, [pc, #136]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001a92:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 8001a94:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8001a98:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a9c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001a9e:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001aa2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001aa6:	d051      	beq.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8001aa8:	03da      	lsls	r2, r3, #15
 8001aaa:	d50b      	bpl.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8001aac:	491b      	ldr	r1, [pc, #108]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001aae:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8001ab0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8001ab4:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8001ab8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8001aba:	f1b5 4f80 	cmp.w	r5, #1073741824	@ 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8001abe:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8001ac2:	d048      	beq.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001ac4:	035b      	lsls	r3, r3, #13
 8001ac6:	d50b      	bpl.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001ac8:	4a14      	ldr	r2, [pc, #80]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001aca:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8001acc:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8001ad0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001ad4:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8001ad6:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001ada:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8001ade:	d03f      	beq.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x308>
  }

#endif /* QUADSPI */

  return status;
}
 8001ae0:	b002      	add	sp, #8
 8001ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ae8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001aec:	659a      	str	r2, [r3, #88]	@ 0x58
 8001aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af4:	9301      	str	r3, [sp, #4]
 8001af6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001af8:	2701      	movs	r7, #1
 8001afa:	e6bb      	b.n	8001874 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001afc:	6823      	ldr	r3, [r4, #0]
        status = ret;
 8001afe:	2003      	movs	r0, #3
    if(pwrclkchanged == SET)
 8001b00:	2f00      	cmp	r7, #0
 8001b02:	f43f af04 	beq.w	800190e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b06:	4905      	ldr	r1, [pc, #20]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001b08:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8001b0a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001b0e:	658a      	str	r2, [r1, #88]	@ 0x58
 8001b10:	e6fd      	b.n	800190e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b12:	68ca      	ldr	r2, [r1, #12]
 8001b14:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001b18:	60ca      	str	r2, [r1, #12]
 8001b1a:	e77f      	b.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b24:	68ca      	ldr	r2, [r1, #12]
 8001b26:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001b2a:	60ca      	str	r2, [r1, #12]
 8001b2c:	e784      	b.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b2e:	68ca      	ldr	r2, [r1, #12]
 8001b30:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001b34:	60ca      	str	r2, [r1, #12]
 8001b36:	e78d      	b.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b38:	68ca      	ldr	r2, [r1, #12]
 8001b3a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001b3e:	60ca      	str	r2, [r1, #12]
 8001b40:	e796      	b.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x218>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b42:	68ca      	ldr	r2, [r1, #12]
 8001b44:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001b48:	60ca      	str	r2, [r1, #12]
 8001b4a:	e79f      	b.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001b4c:	68ca      	ldr	r2, [r1, #12]
 8001b4e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001b52:	60ca      	str	r2, [r1, #12]
 8001b54:	e7a8      	b.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001b56:	68ca      	ldr	r2, [r1, #12]
 8001b58:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001b5c:	60ca      	str	r2, [r1, #12]
 8001b5e:	e7b1      	b.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b60:	68d3      	ldr	r3, [r2, #12]
 8001b62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	b002      	add	sp, #8
 8001b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b6e:	bf00      	nop

08001b70 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop

08001b74 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001b74:	2800      	cmp	r0, #0
 8001b76:	f000 8091 	beq.w	8001c9c <HAL_TIM_Base_Init+0x128>
{
 8001b7a:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8001b7c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001b80:	4604      	mov	r4, r0
 8001b82:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d075      	beq.n	8001c76 <HAL_TIM_Base_Init+0x102>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b8a:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b8c:	4944      	ldr	r1, [pc, #272]	@ (8001ca0 <HAL_TIM_Base_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b94:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8001b96:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b98:	d059      	beq.n	8001c4e <HAL_TIM_Base_Init+0xda>
 8001b9a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001b9e:	d029      	beq.n	8001bf4 <HAL_TIM_Base_Init+0x80>
 8001ba0:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 8001ba4:	428a      	cmp	r2, r1
 8001ba6:	d025      	beq.n	8001bf4 <HAL_TIM_Base_Init+0x80>
 8001ba8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8001bac:	428a      	cmp	r2, r1
 8001bae:	d021      	beq.n	8001bf4 <HAL_TIM_Base_Init+0x80>
 8001bb0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8001bb4:	428a      	cmp	r2, r1
 8001bb6:	d01d      	beq.n	8001bf4 <HAL_TIM_Base_Init+0x80>
 8001bb8:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 8001bbc:	428a      	cmp	r2, r1
 8001bbe:	d046      	beq.n	8001c4e <HAL_TIM_Base_Init+0xda>
 8001bc0:	f501 51e0 	add.w	r1, r1, #7168	@ 0x1c00
 8001bc4:	428a      	cmp	r2, r1
 8001bc6:	d042      	beq.n	8001c4e <HAL_TIM_Base_Init+0xda>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bc8:	f5a1 5180 	sub.w	r1, r1, #4096	@ 0x1000
 8001bcc:	428a      	cmp	r2, r1
 8001bce:	d057      	beq.n	8001c80 <HAL_TIM_Base_Init+0x10c>
 8001bd0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8001bd4:	428a      	cmp	r2, r1
 8001bd6:	d053      	beq.n	8001c80 <HAL_TIM_Base_Init+0x10c>
 8001bd8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8001bdc:	428a      	cmp	r2, r1
 8001bde:	d04f      	beq.n	8001c80 <HAL_TIM_Base_Init+0x10c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001be0:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001be2:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001be4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001be6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bea:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001bec:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bee:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001bf0:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bf2:	e010      	b.n	8001c16 <HAL_TIM_Base_Init+0xa2>
    tmpcr1 |= Structure->CounterMode;
 8001bf4:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bf6:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001bfc:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c02:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c04:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c0a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c0c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8001c0e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8001c10:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c12:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001c14:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c16:	2301      	movs	r3, #1
 8001c18:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c1a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c1e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001c22:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001c26:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001c2a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8001c2e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001c32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c36:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001c3a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8001c3e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8001c42:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8001c46:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001c4a:	2000      	movs	r0, #0
}
 8001c4c:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8001c4e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c50:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001c56:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c5c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c5e:	69a1      	ldr	r1, [r4, #24]
 8001c60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c64:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8001c66:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c68:	68e3      	ldr	r3, [r4, #12]
 8001c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001c6c:	6863      	ldr	r3, [r4, #4]
 8001c6e:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001c70:	6963      	ldr	r3, [r4, #20]
 8001c72:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c74:	e7cf      	b.n	8001c16 <HAL_TIM_Base_Init+0xa2>
    htim->Lock = HAL_UNLOCKED;
 8001c76:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001c7a:	f7ff ff79 	bl	8001b70 <HAL_TIM_Base_MspInit>
 8001c7e:	e784      	b.n	8001b8a <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c80:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c82:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c88:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c8e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c90:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8001c92:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8001c94:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c96:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001c98:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c9a:	e7e9      	b.n	8001c70 <HAL_TIM_Base_Init+0xfc>
    return HAL_ERROR;
 8001c9c:	2001      	movs	r0, #1
}
 8001c9e:	4770      	bx	lr
 8001ca0:	40012c00 	.word	0x40012c00

08001ca4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001ca4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d132      	bne.n	8001d12 <HAL_TIM_Base_Start_IT+0x6e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cac:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cae:	491a      	ldr	r1, [pc, #104]	@ (8001d18 <HAL_TIM_Base_Start_IT+0x74>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cb6:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cb8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cc0:	d019      	beq.n	8001cf6 <HAL_TIM_Base_Start_IT+0x52>
 8001cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cc6:	d016      	beq.n	8001cf6 <HAL_TIM_Base_Start_IT+0x52>
 8001cc8:	4a14      	ldr	r2, [pc, #80]	@ (8001d1c <HAL_TIM_Base_Start_IT+0x78>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <HAL_TIM_Base_Start_IT+0x52>
 8001cce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00f      	beq.n	8001cf6 <HAL_TIM_Base_Start_IT+0x52>
 8001cd6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00b      	beq.n	8001cf6 <HAL_TIM_Base_Start_IT+0x52>
 8001cde:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d007      	beq.n	8001cf6 <HAL_TIM_Base_Start_IT+0x52>
 8001ce6:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d003      	beq.n	8001cf6 <HAL_TIM_Base_Start_IT+0x52>
 8001cee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d107      	bne.n	8001d06 <HAL_TIM_Base_Start_IT+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf6:	6899      	ldr	r1, [r3, #8]
 8001cf8:	4a09      	ldr	r2, [pc, #36]	@ (8001d20 <HAL_TIM_Base_Start_IT+0x7c>)
 8001cfa:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cfc:	2a06      	cmp	r2, #6
 8001cfe:	d006      	beq.n	8001d0e <HAL_TIM_Base_Start_IT+0x6a>
 8001d00:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8001d04:	d003      	beq.n	8001d0e <HAL_TIM_Base_Start_IT+0x6a>
      __HAL_TIM_ENABLE(htim);
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	f042 0201 	orr.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001d0e:	2000      	movs	r0, #0
 8001d10:	4770      	bx	lr
    return HAL_ERROR;
 8001d12:	2001      	movs	r0, #1
}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40012c00 	.word	0x40012c00
 8001d1c:	40000400 	.word	0x40000400
 8001d20:	00010007 	.word	0x00010007

08001d24 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001d28:	680c      	ldr	r4, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	fa94 f2a4 	rbit	r2, r4
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001d2e:	684d      	ldr	r5, [r1, #4]
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001d30:	fab2 f282 	clz	r2, r2
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001d34:	fa34 f302 	lsrs.w	r3, r4, r2
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001d38:	f105 36ff 	add.w	r6, r5, #4294967295
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001d3c:	d074      	beq.n	8001e28 <LL_GPIO_Init+0x104>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8001d3e:	f04f 0e01 	mov.w	lr, #1
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001d42:	f04f 0c03 	mov.w	ip, #3
 8001d46:	e003      	b.n	8001d50 <LL_GPIO_Init+0x2c>
    pinpos++;
 8001d48:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001d4a:	fa34 f302 	lsrs.w	r3, r4, r2
 8001d4e:	d06b      	beq.n	8001e28 <LL_GPIO_Init+0x104>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8001d50:	fa0e f302 	lsl.w	r3, lr, r2
    if (currentpin != 0x00u)
 8001d54:	4023      	ands	r3, r4
 8001d56:	d0f7      	beq.n	8001d48 <LL_GPIO_Init+0x24>
 8001d58:	f8d0 9000 	ldr.w	r9, [r0]
 8001d5c:	fa93 f8a3 	rbit	r8, r3
 8001d60:	fab8 f888 	clz	r8, r8
 8001d64:	fa93 f7a3 	rbit	r7, r3
 8001d68:	fab7 f787 	clz	r7, r7
 8001d6c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8001d70:	fa0c f808 	lsl.w	r8, ip, r8
 8001d74:	007f      	lsls	r7, r7, #1
 8001d76:	ea29 0908 	bic.w	r9, r9, r8
 8001d7a:	fa05 f707 	lsl.w	r7, r5, r7
 8001d7e:	ea49 0707 	orr.w	r7, r9, r7
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001d82:	2e01      	cmp	r6, #1
 8001d84:	6007      	str	r7, [r0, #0]
 8001d86:	d816      	bhi.n	8001db6 <LL_GPIO_Init+0x92>
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001d88:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8001d8c:	fa93 f7a3 	rbit	r7, r3
 8001d90:	fab7 f787 	clz	r7, r7
 8001d94:	fa93 f9a3 	rbit	r9, r3
 8001d98:	007f      	lsls	r7, r7, #1
 8001d9a:	fa0c f707 	lsl.w	r7, ip, r7
 8001d9e:	ea28 0a07 	bic.w	sl, r8, r7
 8001da2:	fab9 f989 	clz	r9, r9
 8001da6:	688f      	ldr	r7, [r1, #8]
 8001da8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8001dac:	fa07 f809 	lsl.w	r8, r7, r9
 8001db0:	ea4a 0708 	orr.w	r7, sl, r8
 8001db4:	6087      	str	r7, [r0, #8]
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001db6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8001dba:	fa93 f7a3 	rbit	r7, r3
 8001dbe:	fab7 f787 	clz	r7, r7
 8001dc2:	fa93 f9a3 	rbit	r9, r3
 8001dc6:	007f      	lsls	r7, r7, #1
 8001dc8:	fa0c f707 	lsl.w	r7, ip, r7
 8001dcc:	ea28 0807 	bic.w	r8, r8, r7
 8001dd0:	fab9 f989 	clz	r9, r9
 8001dd4:	690f      	ldr	r7, [r1, #16]
 8001dd6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8001dda:	fa07 f909 	lsl.w	r9, r7, r9
 8001dde:	ea48 0709 	orr.w	r7, r8, r9
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001de2:	2d02      	cmp	r5, #2
 8001de4:	60c7      	str	r7, [r0, #12]
 8001de6:	d1af      	bne.n	8001d48 <LL_GPIO_Init+0x24>
        if (currentpin < LL_GPIO_PIN_8)
 8001de8:	2bff      	cmp	r3, #255	@ 0xff
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001dea:	f8d1 8014 	ldr.w	r8, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001dee:	ea4f 2713 	mov.w	r7, r3, lsr #8
        if (currentpin < LL_GPIO_PIN_8)
 8001df2:	d826      	bhi.n	8001e42 <LL_GPIO_Init+0x11e>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001df4:	6a07      	ldr	r7, [r0, #32]
 8001df6:	fa93 f9a3 	rbit	r9, r3
 8001dfa:	fab9 f989 	clz	r9, r9
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	fa08 f303 	lsl.w	r3, r8, r3
 8001e0c:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8001e10:	f04f 080f 	mov.w	r8, #15
 8001e14:	fa08 f809 	lsl.w	r8, r8, r9
 8001e18:	ea27 0708 	bic.w	r7, r7, r8
    pinpos++;
 8001e1c:	3201      	adds	r2, #1
 8001e1e:	431f      	orrs	r7, r3
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001e20:	fa34 f302 	lsrs.w	r3, r4, r2
 8001e24:	6207      	str	r7, [r0, #32]
 8001e26:	d193      	bne.n	8001d50 <LL_GPIO_Init+0x2c>
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001e28:	2e01      	cmp	r6, #1
 8001e2a:	d807      	bhi.n	8001e3c <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001e2c:	6843      	ldr	r3, [r0, #4]
 8001e2e:	68ca      	ldr	r2, [r1, #12]
 8001e30:	ea23 0304 	bic.w	r3, r3, r4
 8001e34:	fb02 f404 	mul.w	r4, r2, r4
 8001e38:	4323      	orrs	r3, r4
 8001e3a:	6043      	str	r3, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001e42:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001e44:	fa97 f9a7 	rbit	r9, r7
 8001e48:	fab9 f989 	clz	r9, r9
 8001e4c:	fa97 f7a7 	rbit	r7, r7
 8001e50:	fab7 f787 	clz	r7, r7
 8001e54:	00bf      	lsls	r7, r7, #2
 8001e56:	fa08 f807 	lsl.w	r8, r8, r7
 8001e5a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8001e5e:	270f      	movs	r7, #15
 8001e60:	fa07 f709 	lsl.w	r7, r7, r9
 8001e64:	ea23 0307 	bic.w	r3, r3, r7
 8001e68:	ea43 0308 	orr.w	r3, r3, r8
 8001e6c:	6243      	str	r3, [r0, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001e6e:	e76b      	b.n	8001d48 <LL_GPIO_Init+0x24>

08001e70 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001e70:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e72:	4d32      	ldr	r5, [pc, #200]	@ (8001f3c <LL_TIM_Init+0xcc>)

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001e74:	688c      	ldr	r4, [r1, #8]
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001e76:	6803      	ldr	r3, [r0, #0]

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001e78:	880a      	ldrh	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e7a:	42a8      	cmp	r0, r5
 8001e7c:	d049      	beq.n	8001f12 <LL_TIM_Init+0xa2>
 8001e7e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001e82:	d023      	beq.n	8001ecc <LL_TIM_Init+0x5c>
 8001e84:	f5a5 3594 	sub.w	r5, r5, #75776	@ 0x12800
 8001e88:	42a8      	cmp	r0, r5
 8001e8a:	d01f      	beq.n	8001ecc <LL_TIM_Init+0x5c>
 8001e8c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001e90:	42a8      	cmp	r0, r5
 8001e92:	d01b      	beq.n	8001ecc <LL_TIM_Init+0x5c>
 8001e94:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001e98:	42a8      	cmp	r0, r5
 8001e9a:	d017      	beq.n	8001ecc <LL_TIM_Init+0x5c>
 8001e9c:	f505 3594 	add.w	r5, r5, #75776	@ 0x12800
 8001ea0:	42a8      	cmp	r0, r5
 8001ea2:	d036      	beq.n	8001f12 <LL_TIM_Init+0xa2>
 8001ea4:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 8001ea8:	42a8      	cmp	r0, r5
 8001eaa:	d032      	beq.n	8001f12 <LL_TIM_Init+0xa2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eac:	f5a5 5580 	sub.w	r5, r5, #4096	@ 0x1000
 8001eb0:	42a8      	cmp	r0, r5
 8001eb2:	d032      	beq.n	8001f1a <LL_TIM_Init+0xaa>
 8001eb4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001eb8:	42a8      	cmp	r0, r5
 8001eba:	d02e      	beq.n	8001f1a <LL_TIM_Init+0xaa>
 8001ebc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001ec0:	42a8      	cmp	r0, r5
 8001ec2:	d032      	beq.n	8001f2a <LL_TIM_Init+0xba>
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001ec4:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001ec6:	62c4      	str	r4, [r0, #44]	@ 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8001ec8:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eca:	e01b      	b.n	8001f04 <LL_TIM_Init+0x94>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001ecc:	684d      	ldr	r5, [r1, #4]
 8001ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ed2:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001ed4:	68cd      	ldr	r5, [r1, #12]
 8001ed6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001eda:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001edc:	6003      	str	r3, [r0, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ede:	4b18      	ldr	r3, [pc, #96]	@ (8001f40 <LL_TIM_Init+0xd0>)
  WRITE_REG(TIMx->ARR, AutoReload);
 8001ee0:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8001ee2:	4298      	cmp	r0, r3
  WRITE_REG(TIMx->PSC, Prescaler);
 8001ee4:	6282      	str	r2, [r0, #40]	@ 0x28
 8001ee6:	d00b      	beq.n	8001f00 <LL_TIM_Init+0x90>
 8001ee8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001eec:	4298      	cmp	r0, r3
 8001eee:	d007      	beq.n	8001f00 <LL_TIM_Init+0x90>
 8001ef0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ef4:	4298      	cmp	r0, r3
 8001ef6:	d003      	beq.n	8001f00 <LL_TIM_Init+0x90>
 8001ef8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001efc:	4298      	cmp	r0, r3
 8001efe:	d101      	bne.n	8001f04 <LL_TIM_Init+0x94>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001f00:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001f02:	6303      	str	r3, [r0, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001f04:	6943      	ldr	r3, [r0, #20]
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8001f0c:	bc30      	pop	{r4, r5}
 8001f0e:	2000      	movs	r0, #0
 8001f10:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001f12:	684d      	ldr	r5, [r1, #4]
 8001f14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f18:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001f1a:	68cd      	ldr	r5, [r1, #12]
 8001f1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f20:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001f22:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001f24:	62c4      	str	r4, [r0, #44]	@ 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8001f26:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f28:	e7ea      	b.n	8001f00 <LL_TIM_Init+0x90>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001f2a:	68cd      	ldr	r5, [r1, #12]
 8001f2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f30:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001f32:	4d04      	ldr	r5, [pc, #16]	@ (8001f44 <LL_TIM_Init+0xd4>)
 8001f34:	602b      	str	r3, [r5, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001f36:	62ec      	str	r4, [r5, #44]	@ 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8001f38:	62aa      	str	r2, [r5, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f3a:	e7e1      	b.n	8001f00 <LL_TIM_Init+0x90>
 8001f3c:	40012c00 	.word	0x40012c00
 8001f40:	40014000 	.word	0x40014000
 8001f44:	40014800 	.word	0x40014800

08001f48 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f48:	6842      	ldr	r2, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8001f4a:	6803      	ldr	r3, [r0, #0]
{
 8001f4c:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f4e:	6894      	ldr	r4, [r2, #8]
	( pxList->uxNumberOfItems )++;
 8001f50:	3301      	adds	r3, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f52:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f56:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f58:	6091      	str	r1, [r2, #8]
}
 8001f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8001f5e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001f60:	6003      	str	r3, [r0, #0]
}
 8001f62:	4770      	bx	lr

08001f64 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001f64:	6903      	ldr	r3, [r0, #16]
{
 8001f66:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f68:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f6c:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f6e:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8001f70:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f72:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f74:	bf08      	it	eq
 8001f76:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8001f78:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 8001f7e:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8001f80:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8001f82:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001f84:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8001f86:	6818      	ldr	r0, [r3, #0]
}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop

08001f8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f90:	4b4d      	ldr	r3, [pc, #308]	@ (80020c8 <xTaskIncrementTick+0x13c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
{
 8001f94:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d147      	bne.n	800202a <xTaskIncrementTick+0x9e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80020cc <xTaskIncrementTick+0x140>)
 8001f9c:	681d      	ldr	r5, [r3, #0]
 8001f9e:	3501      	adds	r5, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001fa0:	601d      	str	r5, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001fa2:	2d00      	cmp	r5, #0
 8001fa4:	d04f      	beq.n	8002046 <xTaskIncrementTick+0xba>
 8001fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80020d0 <xTaskIncrementTick+0x144>)
 8001fa8:	9301      	str	r3, [sp, #4]

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	42ab      	cmp	r3, r5
 8001fae:	d862      	bhi.n	8002076 <xTaskIncrementTick+0xea>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fb0:	4e48      	ldr	r6, [pc, #288]	@ (80020d4 <xTaskIncrementTick+0x148>)
 8001fb2:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 80020ec <xTaskIncrementTick+0x160>
 8001fb6:	6833      	ldr	r3, [r6, #0]
 8001fb8:	f8df 9134 	ldr.w	r9, [pc, #308]	@ 80020f0 <xTaskIncrementTick+0x164>
 8001fbc:	681c      	ldr	r4, [r3, #0]
 8001fbe:	2c00      	cmp	r4, #0
 8001fc0:	d073      	beq.n	80020aa <xTaskIncrementTick+0x11e>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001fc2:	4f45      	ldr	r7, [pc, #276]	@ (80020d8 <xTaskIncrementTick+0x14c>)
BaseType_t xSwitchRequired = pdFALSE;
 8001fc4:	2400      	movs	r4, #0
 8001fc6:	e022      	b.n	800200e <xTaskIncrementTick+0x82>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fc8:	f7ff ffcc 	bl	8001f64 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001fcc:	f8db 2028 	ldr.w	r2, [fp, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001fd0:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001fd4:	b10a      	cbz	r2, 8001fda <xTaskIncrementTick+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001fd6:	f7ff ffc5 	bl	8001f64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001fda:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	4082      	lsls	r2, r0
 8001fe4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	4651      	mov	r1, sl
 8001fec:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8001ff0:	603a      	str	r2, [r7, #0]
 8001ff2:	f7ff ffa9 	bl	8001f48 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ff6:	f8d9 3000 	ldr.w	r3, [r9]
 8001ffa:	f8db 202c 	ldr.w	r2, [fp, #44]	@ 0x2c
 8001ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
						{
							xSwitchRequired = pdTRUE;
 8002000:	429a      	cmp	r2, r3
 8002002:	bf28      	it	cs
 8002004:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002006:	6833      	ldr	r3, [r6, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d04d      	beq.n	80020aa <xTaskIncrementTick+0x11e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800200e:	6833      	ldr	r3, [r6, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002016:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800201a:	f10b 0a04 	add.w	sl, fp, #4
					if( xConstTickCount < xItemValue )
 800201e:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002020:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 8002022:	d2d1      	bcs.n	8001fc8 <xTaskIncrementTick+0x3c>
						xNextTaskUnblockTime = xItemValue;
 8002024:	9b01      	ldr	r3, [sp, #4]
 8002026:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002028:	e02a      	b.n	8002080 <xTaskIncrementTick+0xf4>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800202a:	4a2c      	ldr	r2, [pc, #176]	@ (80020dc <xTaskIncrementTick+0x150>)
 800202c:	6813      	ldr	r3, [r2, #0]
 800202e:	3301      	adds	r3, #1
BaseType_t xSwitchRequired = pdFALSE;
 8002030:	2400      	movs	r4, #0
		++uxPendedTicks;
 8002032:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002034:	4b2a      	ldr	r3, [pc, #168]	@ (80020e0 <xTaskIncrementTick+0x154>)
 8002036:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
 8002038:	2b00      	cmp	r3, #0
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 800203a:	bf0c      	ite	eq
 800203c:	4620      	moveq	r0, r4
 800203e:	2001      	movne	r0, #1
 8002040:	b003      	add	sp, #12
 8002042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8002046:	4b23      	ldr	r3, [pc, #140]	@ (80020d4 <xTaskIncrementTick+0x148>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	bb22      	cbnz	r2, 8002098 <xTaskIncrementTick+0x10c>
 800204e:	4a25      	ldr	r2, [pc, #148]	@ (80020e4 <xTaskIncrementTick+0x158>)
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	6811      	ldr	r1, [r2, #0]
 8002054:	6019      	str	r1, [r3, #0]
 8002056:	4924      	ldr	r1, [pc, #144]	@ (80020e8 <xTaskIncrementTick+0x15c>)
 8002058:	6010      	str	r0, [r2, #0]
 800205a:	680a      	ldr	r2, [r1, #0]
 800205c:	3201      	adds	r2, #1
 800205e:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	bb32      	cbnz	r2, 80020b4 <xTaskIncrementTick+0x128>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002066:	4b1a      	ldr	r3, [pc, #104]	@ (80020d0 <xTaskIncrementTick+0x144>)
 8002068:	9301      	str	r3, [sp, #4]
 800206a:	461a      	mov	r2, r3
 800206c:	f04f 33ff 	mov.w	r3, #4294967295
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4613      	mov	r3, r2
 8002074:	e799      	b.n	8001faa <xTaskIncrementTick+0x1e>
 8002076:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 80020ec <xTaskIncrementTick+0x160>
 800207a:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 80020f0 <xTaskIncrementTick+0x164>
BaseType_t xSwitchRequired = pdFALSE;
 800207e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002080:	f8d9 3000 	ldr.w	r3, [r9]
 8002084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002086:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	f858 3003 	ldr.w	r3, [r8, r3]
				xSwitchRequired = pdTRUE;
 8002090:	2b02      	cmp	r3, #2
 8002092:	bf28      	it	cs
 8002094:	2401      	movcs	r4, #1
 8002096:	e7cd      	b.n	8002034 <xTaskIncrementTick+0xa8>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800209c:	f383 8811 	msr	BASEPRI, r3
 80020a0:	f3bf 8f6f 	isb	sy
 80020a4:	f3bf 8f4f 	dsb	sy
			taskSWITCH_DELAYED_LISTS();
 80020a8:	e7fe      	b.n	80020a8 <xTaskIncrementTick+0x11c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020aa:	9a01      	ldr	r2, [sp, #4]
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295
 80020b0:	6013      	str	r3, [r2, #0]
					break;
 80020b2:	e7e5      	b.n	8002080 <xTaskIncrementTick+0xf4>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020b4:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80020b6:	4a06      	ldr	r2, [pc, #24]	@ (80020d0 <xTaskIncrementTick+0x144>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020b8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80020ba:	9201      	str	r2, [sp, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	4613      	mov	r3, r2
	}
}
 80020c4:	e771      	b.n	8001faa <xTaskIncrementTick+0x1e>
 80020c6:	bf00      	nop
 80020c8:	200058d0 	.word	0x200058d0
 80020cc:	200058e8 	.word	0x200058e8
 80020d0:	200058d4 	.word	0x200058d4
 80020d4:	200058f0 	.word	0x200058f0
 80020d8:	200058e4 	.word	0x200058e4
 80020dc:	200058e0 	.word	0x200058e0
 80020e0:	200058dc 	.word	0x200058dc
 80020e4:	200058ec 	.word	0x200058ec
 80020e8:	200058d8 	.word	0x200058d8
 80020ec:	200058f4 	.word	0x200058f4
 80020f0:	20005980 	.word	0x20005980

080020f4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020f4:	4b16      	ldr	r3, [pc, #88]	@ (8002150 <vTaskSwitchContext+0x5c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	b11b      	cbz	r3, 8002102 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80020fa:	4b16      	ldr	r3, [pc, #88]	@ (8002154 <vTaskSwitchContext+0x60>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8002102:	4914      	ldr	r1, [pc, #80]	@ (8002154 <vTaskSwitchContext+0x60>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002104:	4a14      	ldr	r2, [pc, #80]	@ (8002158 <vTaskSwitchContext+0x64>)
		xYieldPending = pdFALSE;
 8002106:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002108:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f1c3 031f 	rsb	r3, r3, #31
 8002114:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002118:	4910      	ldr	r1, [pc, #64]	@ (800215c <vTaskSwitchContext+0x68>)
 800211a:	009a      	lsls	r2, r3, #2
 800211c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8002120:	5888      	ldr	r0, [r1, r2]
 8002122:	b940      	cbnz	r0, 8002136 <vTaskSwitchContext+0x42>
	__asm volatile
 8002124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002128:	f383 8811 	msr	BASEPRI, r3
 800212c:	f3bf 8f6f 	isb	sy
 8002130:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8002134:	e7fe      	b.n	8002134 <vTaskSwitchContext+0x40>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002136:	6858      	ldr	r0, [r3, #4]
 8002138:	3208      	adds	r2, #8
 800213a:	6840      	ldr	r0, [r0, #4]
 800213c:	6058      	str	r0, [r3, #4]
 800213e:	440a      	add	r2, r1
 8002140:	4290      	cmp	r0, r2
 8002142:	bf04      	itt	eq
 8002144:	6840      	ldreq	r0, [r0, #4]
 8002146:	6058      	streq	r0, [r3, #4]
 8002148:	4b05      	ldr	r3, [pc, #20]	@ (8002160 <vTaskSwitchContext+0x6c>)
 800214a:	68c2      	ldr	r2, [r0, #12]
 800214c:	601a      	str	r2, [r3, #0]
}
 800214e:	4770      	bx	lr
 8002150:	200058d0 	.word	0x200058d0
 8002154:	200058dc 	.word	0x200058dc
 8002158:	200058e4 	.word	0x200058e4
 800215c:	200058f4 	.word	0x200058f4
 8002160:	20005980 	.word	0x20005980
	...

08002170 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002170:	4b07      	ldr	r3, [pc, #28]	@ (8002190 <pxCurrentTCBConst2>)
 8002172:	6819      	ldr	r1, [r3, #0]
 8002174:	6808      	ldr	r0, [r1, #0]
 8002176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800217a:	f380 8809 	msr	PSP, r0
 800217e:	f3bf 8f6f 	isb	sy
 8002182:	f04f 0000 	mov.w	r0, #0
 8002186:	f380 8811 	msr	BASEPRI, r0
 800218a:	4770      	bx	lr
 800218c:	f3af 8000 	nop.w

08002190 <pxCurrentTCBConst2>:
 8002190:	20005980 	.word	0x20005980
	...

080021a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80021a0:	f3ef 8009 	mrs	r0, PSP
 80021a4:	f3bf 8f6f 	isb	sy
 80021a8:	4b15      	ldr	r3, [pc, #84]	@ (8002200 <pxCurrentTCBConst>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	f01e 0f10 	tst.w	lr, #16
 80021b0:	bf08      	it	eq
 80021b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80021b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021ba:	6010      	str	r0, [r2, #0]
 80021bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80021c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80021c4:	f380 8811 	msr	BASEPRI, r0
 80021c8:	f3bf 8f4f 	dsb	sy
 80021cc:	f3bf 8f6f 	isb	sy
 80021d0:	f7ff ff90 	bl	80020f4 <vTaskSwitchContext>
 80021d4:	f04f 0000 	mov.w	r0, #0
 80021d8:	f380 8811 	msr	BASEPRI, r0
 80021dc:	bc09      	pop	{r0, r3}
 80021de:	6819      	ldr	r1, [r3, #0]
 80021e0:	6808      	ldr	r0, [r1, #0]
 80021e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021e6:	f01e 0f10 	tst.w	lr, #16
 80021ea:	bf08      	it	eq
 80021ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80021f0:	f380 8809 	msr	PSP, r0
 80021f4:	f3bf 8f6f 	isb	sy
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	f3af 8000 	nop.w

08002200 <pxCurrentTCBConst>:
 8002200:	20005980 	.word	0x20005980

08002204 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002204:	b508      	push	{r3, lr}
 8002206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800220a:	f383 8811 	msr	BASEPRI, r3
 800220e:	f3bf 8f6f 	isb	sy
 8002212:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002216:	f7ff feb9 	bl	8001f8c <xTaskIncrementTick>
 800221a:	b128      	cbz	r0, 8002228 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800221c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002220:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002224:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002228:	2300      	movs	r3, #0
 800222a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800222e:	bd08      	pop	{r3, pc}

08002230 <PIL_defaultPILAction>:
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop

08002234 <PIL_defaultPILBackgroundComm>:
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop

08002238 <PIL_parallelComPoll>:
 8002238:	f8d0 052c 	ldr.w	r0, [r0, #1324]	@ 0x52c
 800223c:	f002 b8a8 	b.w	8004390 <PIL_PBRIDGE_poll>

08002240 <PIL_SCOPE_sample>:
 8002240:	f8d0 0500 	ldr.w	r0, [r0, #1280]	@ 0x500
 8002244:	f000 bf80 	b.w	8003148 <PIL_SCOPE_sample_p>

08002248 <PIL_setGuid>:
 8002248:	b321      	cbz	r1, 8002294 <PIL_setGuid+0x4c>
 800224a:	b500      	push	{lr}
 800224c:	780b      	ldrb	r3, [r1, #0]
 800224e:	784a      	ldrb	r2, [r1, #1]
 8002250:	f891 e002 	ldrb.w	lr, [r1, #2]
 8002254:	f891 c004 	ldrb.w	ip, [r1, #4]
 8002258:	f8d0 020c 	ldr.w	r0, [r0, #524]	@ 0x20c
 800225c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8002260:	78cb      	ldrb	r3, [r1, #3]
 8002262:	b083      	sub	sp, #12
 8002264:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8002268:	f8ad 2000 	strh.w	r2, [sp]
 800226c:	f891 e006 	ldrb.w	lr, [r1, #6]
 8002270:	794a      	ldrb	r2, [r1, #5]
 8002272:	f8ad 3002 	strh.w	r3, [sp, #2]
 8002276:	79cb      	ldrb	r3, [r1, #7]
 8002278:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 800227c:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8002280:	4669      	mov	r1, sp
 8002282:	f8ad 2004 	strh.w	r2, [sp, #4]
 8002286:	f8ad 3006 	strh.w	r3, [sp, #6]
 800228a:	f000 fe25 	bl	8002ed8 <PIL_RA_setGuid>
 800228e:	b003      	add	sp, #12
 8002290:	f85d fb04 	ldr.w	pc, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop

08002298 <PIL_setChecksum>:
 8002298:	b510      	push	{r4, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	f101 0c04 	add.w	ip, r1, #4
 80022a0:	f10d 0e04 	add.w	lr, sp, #4
 80022a4:	312c      	adds	r1, #44	@ 0x2c
 80022a6:	e051      	b.n	800234c <PIL_setChecksum+0xb4>
 80022a8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80022ac:	2a05      	cmp	r2, #5
 80022ae:	bf9a      	itte	ls
 80022b0:	f1a3 0237 	subls.w	r2, r3, #55	@ 0x37
 80022b4:	b2d2      	uxtbls	r2, r2
 80022b6:	f003 020f 	andhi.w	r2, r3, #15
 80022ba:	f81c 4c03 	ldrb.w	r4, [ip, #-3]
 80022be:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b09      	cmp	r3, #9
 80022c6:	d90c      	bls.n	80022e2 <PIL_setChecksum+0x4a>
 80022c8:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d962      	bls.n	8002396 <PIL_setChecksum+0xfe>
 80022d0:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	bf9a      	itte	ls
 80022d8:	f1a4 0337 	subls.w	r3, r4, #55	@ 0x37
 80022dc:	b2db      	uxtbls	r3, r3
 80022de:	f004 030f 	andhi.w	r3, r4, #15
 80022e2:	f81c 4c02 	ldrb.w	r4, [ip, #-2]
 80022e6:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
 80022ea:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b09      	cmp	r3, #9
 80022f2:	d90c      	bls.n	800230e <PIL_setChecksum+0x76>
 80022f4:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 80022f8:	2b05      	cmp	r3, #5
 80022fa:	d936      	bls.n	800236a <PIL_setChecksum+0xd2>
 80022fc:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 8002300:	2b05      	cmp	r3, #5
 8002302:	bf9a      	itte	ls
 8002304:	f1a4 0337 	subls.w	r3, r4, #55	@ 0x37
 8002308:	b2db      	uxtbls	r3, r3
 800230a:	f004 030f 	andhi.w	r3, r4, #15
 800230e:	f81c 4c01 	ldrb.w	r4, [ip, #-1]
 8002312:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002316:	f1a4 0230 	sub.w	r2, r4, #48	@ 0x30
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	2a09      	cmp	r2, #9
 800231e:	b21b      	sxth	r3, r3
 8002320:	d90c      	bls.n	800233c <PIL_setChecksum+0xa4>
 8002322:	f1a4 0261 	sub.w	r2, r4, #97	@ 0x61
 8002326:	2a05      	cmp	r2, #5
 8002328:	d923      	bls.n	8002372 <PIL_setChecksum+0xda>
 800232a:	f1a4 0241 	sub.w	r2, r4, #65	@ 0x41
 800232e:	2a05      	cmp	r2, #5
 8002330:	bf9a      	itte	ls
 8002332:	f1a4 0237 	subls.w	r2, r4, #55	@ 0x37
 8002336:	b2d2      	uxtbls	r2, r2
 8002338:	f004 020f 	andhi.w	r2, r4, #15
 800233c:	f10c 0c04 	add.w	ip, ip, #4
 8002340:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8002344:	4561      	cmp	r1, ip
 8002346:	f82e 3b02 	strh.w	r3, [lr], #2
 800234a:	d01d      	beq.n	8002388 <PIL_setChecksum+0xf0>
 800234c:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 8002350:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	2a09      	cmp	r2, #9
 8002358:	d9af      	bls.n	80022ba <PIL_setChecksum+0x22>
 800235a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800235e:	2a05      	cmp	r2, #5
 8002360:	d8a2      	bhi.n	80022a8 <PIL_setChecksum+0x10>
 8002362:	f1a3 0257 	sub.w	r2, r3, #87	@ 0x57
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	e7a7      	b.n	80022ba <PIL_setChecksum+0x22>
 800236a:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 800236e:	b2db      	uxtb	r3, r3
 8002370:	e7cd      	b.n	800230e <PIL_setChecksum+0x76>
 8002372:	f1a4 0257 	sub.w	r2, r4, #87	@ 0x57
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	f10c 0c04 	add.w	ip, ip, #4
 800237c:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8002380:	4561      	cmp	r1, ip
 8002382:	f82e 3b02 	strh.w	r3, [lr], #2
 8002386:	d1e1      	bne.n	800234c <PIL_setChecksum+0xb4>
 8002388:	f8d0 020c 	ldr.w	r0, [r0, #524]	@ 0x20c
 800238c:	a901      	add	r1, sp, #4
 800238e:	f000 fdb9 	bl	8002f04 <PIL_RA_setChecksum>
 8002392:	b006      	add	sp, #24
 8002394:	bd10      	pop	{r4, pc}
 8002396:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 800239a:	b2db      	uxtb	r3, r3
 800239c:	e7a1      	b.n	80022e2 <PIL_setChecksum+0x4a>
 800239e:	bf00      	nop

080023a0 <PIL_configureParallelCom>:
 80023a0:	b510      	push	{r4, lr}
 80023a2:	4604      	mov	r4, r0
 80023a4:	f8d0 052c 	ldr.w	r0, [r0, #1324]	@ 0x52c
 80023a8:	f001 ffc8 	bl	800433c <PIL_PBRIDGE_setProtocol>
 80023ac:	b108      	cbz	r0, 80023b2 <PIL_configureParallelCom+0x12>
 80023ae:	4b01      	ldr	r3, [pc, #4]	@ (80023b4 <PIL_configureParallelCom+0x14>)
 80023b0:	6023      	str	r3, [r4, #0]
 80023b2:	bd10      	pop	{r4, pc}
 80023b4:	08002239 	.word	0x08002239

080023b8 <PIL_setAndConfigScopeBuffer>:
 80023b8:	2900      	cmp	r1, #0
 80023ba:	f8d0 0500 	ldr.w	r0, [r0, #1280]	@ 0x500
 80023be:	bf04      	itt	eq
 80023c0:	460b      	moveq	r3, r1
 80023c2:	460a      	moveq	r2, r1
 80023c4:	f000 beb4 	b.w	8003130 <PIL_SCOPE_setBuffer>

080023c8 <PIL_beginInterruptCall>:
 80023c8:	b570      	push	{r4, r5, r6, lr}
 80023ca:	4604      	mov	r4, r0
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8d0 04a8 	ldr.w	r0, [r0, #1192]	@ 0x4a8
 80023d2:	7463      	strb	r3, [r4, #17]
 80023d4:	f000 f9e6 	bl	80027a4 <PIL_PROBES_getActualPilMode>
 80023d8:	2802      	cmp	r0, #2
 80023da:	d004      	beq.n	80023e6 <PIL_beginInterruptCall+0x1e>
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	4620      	mov	r0, r4
 80023e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80023e4:	4718      	bx	r3
 80023e6:	6963      	ldr	r3, [r4, #20]
 80023e8:	2105      	movs	r1, #5
 80023ea:	4620      	mov	r0, r4
 80023ec:	4798      	blx	r3
 80023ee:	f8d4 04a8 	ldr.w	r0, [r4, #1192]	@ 0x4a8
 80023f2:	f000 f9db 	bl	80027ac <PIL_PROBES_getPreviousPilMode>
 80023f6:	2801      	cmp	r0, #1
 80023f8:	d103      	bne.n	8002402 <PIL_beginInterruptCall+0x3a>
 80023fa:	6963      	ldr	r3, [r4, #20]
 80023fc:	2103      	movs	r1, #3
 80023fe:	4620      	mov	r0, r4
 8002400:	4798      	blx	r3
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	4620      	mov	r0, r4
 8002406:	4798      	blx	r3
 8002408:	69a3      	ldr	r3, [r4, #24]
 800240a:	4620      	mov	r0, r4
 800240c:	4798      	blx	r3
 800240e:	f8d4 020c 	ldr.w	r0, [r4, #524]	@ 0x20c
 8002412:	f000 fdab 	bl	8002f6c <PIL_RA_pollLinkRsp>
 8002416:	4605      	mov	r5, r0
 8002418:	2800      	cmp	r0, #0
 800241a:	d1f2      	bne.n	8002402 <PIL_beginInterruptCall+0x3a>
 800241c:	f8d4 020c 	ldr.w	r0, [r4, #524]	@ 0x20c
 8002420:	f000 fdd4 	bl	8002fcc <PIL_RA_pollLinkReq>
 8002424:	f8d4 04a8 	ldr.w	r0, [r4, #1192]	@ 0x4a8
 8002428:	f000 f9be 	bl	80027a8 <PIL_PROBES_getDesiredPilMode>
 800242c:	4601      	mov	r1, r0
 800242e:	2901      	cmp	r1, #1
 8002430:	f8d4 04a8 	ldr.w	r0, [r4, #1192]	@ 0x4a8
 8002434:	d020      	beq.n	8002478 <PIL_beginInterruptCall+0xb0>
 8002436:	f000 f9bd 	bl	80027b4 <PIL_PROBES_getDesiredPilStep>
 800243a:	4605      	mov	r5, r0
 800243c:	f8d4 04a8 	ldr.w	r0, [r4, #1192]	@ 0x4a8
 8002440:	f000 f9b6 	bl	80027b0 <PIL_PROBES_getActualPilStep>
 8002444:	4285      	cmp	r5, r0
 8002446:	d0dc      	beq.n	8002402 <PIL_beginInterruptCall+0x3a>
 8002448:	f8d4 54a8 	ldr.w	r5, [r4, #1192]	@ 0x4a8
 800244c:	4628      	mov	r0, r5
 800244e:	f000 f9a9 	bl	80027a4 <PIL_PROBES_getActualPilMode>
 8002452:	4601      	mov	r1, r0
 8002454:	4628      	mov	r0, r5
 8002456:	f000 f99f 	bl	8002798 <PIL_PROBES_setActualPilMode>
 800245a:	f8d4 54a8 	ldr.w	r5, [r4, #1192]	@ 0x4a8
 800245e:	4628      	mov	r0, r5
 8002460:	f000 f9a8 	bl	80027b4 <PIL_PROBES_getDesiredPilStep>
 8002464:	4601      	mov	r1, r0
 8002466:	4628      	mov	r0, r5
 8002468:	f000 f99a 	bl	80027a0 <PIL_PROBES_setActualPilStep>
 800246c:	6963      	ldr	r3, [r4, #20]
 800246e:	4620      	mov	r0, r4
 8002470:	2106      	movs	r1, #6
 8002472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002476:	4718      	bx	r3
 8002478:	f000 f98e 	bl	8002798 <PIL_PROBES_setActualPilMode>
 800247c:	6963      	ldr	r3, [r4, #20]
 800247e:	7425      	strb	r5, [r4, #16]
 8002480:	2104      	movs	r1, #4
 8002482:	4620      	mov	r0, r4
 8002484:	4798      	blx	r3
 8002486:	e7f1      	b.n	800246c <PIL_beginInterruptCall+0xa4>

08002488 <PIL_backgroundCall>:
 8002488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800248c:	4604      	mov	r4, r0
 800248e:	f8d0 04a8 	ldr.w	r0, [r0, #1192]	@ 0x4a8
 8002492:	f000 f987 	bl	80027a4 <PIL_PROBES_getActualPilMode>
 8002496:	2802      	cmp	r0, #2
 8002498:	d00f      	beq.n	80024ba <PIL_backgroundCall+0x32>
 800249a:	4620      	mov	r0, r4
 800249c:	69a3      	ldr	r3, [r4, #24]
 800249e:	4798      	blx	r3
 80024a0:	f8d4 020c 	ldr.w	r0, [r4, #524]	@ 0x20c
 80024a4:	f000 fd62 	bl	8002f6c <PIL_RA_pollLinkRsp>
 80024a8:	b330      	cbz	r0, 80024f8 <PIL_backgroundCall+0x70>
 80024aa:	f8d4 04a8 	ldr.w	r0, [r4, #1192]	@ 0x4a8
 80024ae:	f000 f979 	bl	80027a4 <PIL_PROBES_getActualPilMode>
 80024b2:	4605      	mov	r5, r0
 80024b4:	b188      	cbz	r0, 80024da <PIL_backgroundCall+0x52>
 80024b6:	2801      	cmp	r0, #1
 80024b8:	d001      	beq.n	80024be <PIL_backgroundCall+0x36>
 80024ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024be:	f8d4 04a8 	ldr.w	r0, [r4, #1192]	@ 0x4a8
 80024c2:	f000 f971 	bl	80027a8 <PIL_PROBES_getDesiredPilMode>
 80024c6:	b9e0      	cbnz	r0, 8002502 <PIL_backgroundCall+0x7a>
 80024c8:	7f23      	ldrb	r3, [r4, #28]
 80024ca:	b9d3      	cbnz	r3, 8002502 <PIL_backgroundCall+0x7a>
 80024cc:	6963      	ldr	r3, [r4, #20]
 80024ce:	7725      	strb	r5, [r4, #28]
 80024d0:	4629      	mov	r1, r5
 80024d2:	4620      	mov	r0, r4
 80024d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024d8:	4718      	bx	r3
 80024da:	f8d4 04a8 	ldr.w	r0, [r4, #1192]	@ 0x4a8
 80024de:	f000 f963 	bl	80027a8 <PIL_PROBES_getDesiredPilMode>
 80024e2:	2801      	cmp	r0, #1
 80024e4:	d1e9      	bne.n	80024ba <PIL_backgroundCall+0x32>
 80024e6:	7f21      	ldrb	r1, [r4, #28]
 80024e8:	2900      	cmp	r1, #0
 80024ea:	d1e6      	bne.n	80024ba <PIL_backgroundCall+0x32>
 80024ec:	7720      	strb	r0, [r4, #28]
 80024ee:	6963      	ldr	r3, [r4, #20]
 80024f0:	4620      	mov	r0, r4
 80024f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024f6:	4718      	bx	r3
 80024f8:	f8d4 020c 	ldr.w	r0, [r4, #524]	@ 0x20c
 80024fc:	f000 fd66 	bl	8002fcc <PIL_RA_pollLinkReq>
 8002500:	e7d3      	b.n	80024aa <PIL_backgroundCall+0x22>
 8002502:	f8d4 04a8 	ldr.w	r0, [r4, #1192]	@ 0x4a8
 8002506:	f000 f94f 	bl	80027a8 <PIL_PROBES_getDesiredPilMode>
 800250a:	2802      	cmp	r0, #2
 800250c:	4605      	mov	r5, r0
 800250e:	d1d4      	bne.n	80024ba <PIL_backgroundCall+0x32>
 8002510:	f001 fcba 	bl	8003e88 <PIL_DisableInt>
 8002514:	2701      	movs	r7, #1
 8002516:	4606      	mov	r6, r0
 8002518:	4629      	mov	r1, r5
 800251a:	f8d4 04a8 	ldr.w	r0, [r4, #1192]	@ 0x4a8
 800251e:	f000 f93b 	bl	8002798 <PIL_PROBES_setActualPilMode>
 8002522:	6963      	ldr	r3, [r4, #20]
 8002524:	7427      	strb	r7, [r4, #16]
 8002526:	4629      	mov	r1, r5
 8002528:	4620      	mov	r0, r4
 800252a:	4798      	blx	r3
 800252c:	7467      	strb	r7, [r4, #17]
 800252e:	4630      	mov	r0, r6
 8002530:	f001 fcae 	bl	8003e90 <PIL_RestoreInt>
 8002534:	7c63      	ldrb	r3, [r4, #17]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0bf      	beq.n	80024ba <PIL_backgroundCall+0x32>
 800253a:	e7fe      	b.n	800253a <PIL_backgroundCall+0xb2>

0800253c <PIL_init>:
 800253c:	f5b1 6fa6 	cmp.w	r1, #1328	@ 0x530
 8002540:	d34e      	bcc.n	80025e0 <PIL_init+0xa4>
 8002542:	b538      	push	{r3, r4, r5, lr}
 8002544:	4a27      	ldr	r2, [pc, #156]	@ (80025e4 <PIL_init+0xa8>)
 8002546:	4b28      	ldr	r3, [pc, #160]	@ (80025e8 <PIL_init+0xac>)
 8002548:	2500      	movs	r5, #0
 800254a:	4604      	mov	r4, r0
 800254c:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8002550:	7705      	strb	r5, [r0, #28]
 8002552:	f44f 71f6 	mov.w	r1, #492	@ 0x1ec
 8002556:	3020      	adds	r0, #32
 8002558:	f000 fc96 	bl	8002e88 <PIL_RA_init>
 800255c:	21c0      	movs	r1, #192	@ 0xc0
 800255e:	f8c4 020c 	str.w	r0, [r4, #524]	@ 0x20c
 8002562:	f504 7004 	add.w	r0, r4, #528	@ 0x210
 8002566:	f001 fc95 	bl	8003e94 <PIL_BSRVS_init>
 800256a:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 800256e:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
 8002572:	f504 7035 	add.w	r0, r4, #724	@ 0x2d4
 8002576:	f000 f8ff 	bl	8002778 <PIL_PROBES_init>
 800257a:	2150      	movs	r1, #80	@ 0x50
 800257c:	f8c4 04a8 	str.w	r0, [r4, #1192]	@ 0x4a8
 8002580:	f504 6096 	add.w	r0, r4, #1200	@ 0x4b0
 8002584:	f000 fdb2 	bl	80030ec <PIL_SCOPE_init>
 8002588:	2128      	movs	r1, #40	@ 0x28
 800258a:	f8c4 0500 	str.w	r0, [r4, #1280]	@ 0x500
 800258e:	f204 5004 	addw	r0, r4, #1284	@ 0x504
 8002592:	f001 fecd 	bl	8004330 <PIL_PBRIDGE_init>
 8002596:	f8d4 1208 	ldr.w	r1, [r4, #520]	@ 0x208
 800259a:	f8c4 052c 	str.w	r0, [r4, #1324]	@ 0x52c
 800259e:	f001 fecb 	bl	8004338 <PIL_PBRIDGE_configure>
 80025a2:	f8d4 22d0 	ldr.w	r2, [r4, #720]	@ 0x2d0
 80025a6:	f8d4 020c 	ldr.w	r0, [r4, #524]	@ 0x20c
 80025aa:	4910      	ldr	r1, [pc, #64]	@ (80025ec <PIL_init+0xb0>)
 80025ac:	f000 fcd0 	bl	8002f50 <PIL_RA_registerService>
 80025b0:	f8d4 24a8 	ldr.w	r2, [r4, #1192]	@ 0x4a8
 80025b4:	f8d4 020c 	ldr.w	r0, [r4, #524]	@ 0x20c
 80025b8:	490d      	ldr	r1, [pc, #52]	@ (80025f0 <PIL_init+0xb4>)
 80025ba:	f000 fcc9 	bl	8002f50 <PIL_RA_registerService>
 80025be:	f8d4 2500 	ldr.w	r2, [r4, #1280]	@ 0x500
 80025c2:	f8d4 020c 	ldr.w	r0, [r4, #524]	@ 0x20c
 80025c6:	490b      	ldr	r1, [pc, #44]	@ (80025f4 <PIL_init+0xb8>)
 80025c8:	f000 fcc2 	bl	8002f50 <PIL_RA_registerService>
 80025cc:	490a      	ldr	r1, [pc, #40]	@ (80025f8 <PIL_init+0xbc>)
 80025ce:	4a0b      	ldr	r2, [pc, #44]	@ (80025fc <PIL_init+0xc0>)
 80025d0:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
 80025d4:	8225      	strh	r5, [r4, #16]
 80025d6:	e9c4 1202 	strd	r1, r2, [r4, #8]
 80025da:	6063      	str	r3, [r4, #4]
 80025dc:	4620      	mov	r0, r4
 80025de:	bd38      	pop	{r3, r4, r5, pc}
 80025e0:	2000      	movs	r0, #0
 80025e2:	4770      	bx	lr
 80025e4:	08002231 	.word	0x08002231
 80025e8:	08002235 	.word	0x08002235
 80025ec:	08003ead 	.word	0x08003ead
 80025f0:	080027b9 	.word	0x080027b9
 80025f4:	080032b1 	.word	0x080032b1
 80025f8:	0800380d 	.word	0x0800380d
 80025fc:	08003805 	.word	0x08003805

08002600 <PIL_PROBES_packReadProbeMsg>:
 8002600:	4b5c      	ldr	r3, [pc, #368]	@ (8002774 <PIL_PROBES_packReadProbeMsg+0x174>)
 8002602:	f8c1 3002 	str.w	r3, [r1, #2]
 8002606:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800260a:	f8b0 31d2 	ldrh.w	r3, [r0, #466]	@ 0x1d2
 800260e:	f8b0 51d0 	ldrh.w	r5, [r0, #464]	@ 0x1d0
 8002612:	42ab      	cmp	r3, r5
 8002614:	f000 8098 	beq.w	8002748 <PIL_PROBES_packReadProbeMsg+0x148>
 8002618:	8944      	ldrh	r4, [r0, #10]
 800261a:	ea4f 1203 	mov.w	r2, r3, lsl #4
 800261e:	eb02 3284 	add.w	r2, r2, r4, lsl #14
 8002622:	f102 0201 	add.w	r2, r2, #1
 8002626:	80ca      	strh	r2, [r1, #6]
 8002628:	f080 80a0 	bcs.w	800276c <PIL_PROBES_packReadProbeMsg+0x16c>
 800262c:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8002630:	f8b2 4154 	ldrh.w	r4, [r2, #340]	@ 0x154
 8002634:	2c1a      	cmp	r4, #26
 8002636:	f300 8099 	bgt.w	800276c <PIL_PROBES_packReadProbeMsg+0x16c>
 800263a:	f103 0c01 	add.w	ip, r3, #1
 800263e:	fa1f fc8c 	uxth.w	ip, ip
 8002642:	f04f 0e03 	mov.w	lr, #3
 8002646:	f500 76aa 	add.w	r6, r0, #340	@ 0x154
 800264a:	332a      	adds	r3, #42	@ 0x2a
 800264c:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
 8002650:	2c00      	cmp	r4, #0
 8002652:	d058      	beq.n	8002706 <PIL_PROBES_packReadProbeMsg+0x106>
 8002654:	1e67      	subs	r7, r4, #1
 8002656:	f10e 0801 	add.w	r8, lr, #1
 800265a:	2f09      	cmp	r7, #9
 800265c:	eb01 0248 	add.w	r2, r1, r8, lsl #1
 8002660:	d966      	bls.n	8002730 <PIL_PROBES_packReadProbeMsg+0x130>
 8002662:	1c9f      	adds	r7, r3, #2
 8002664:	42ba      	cmp	r2, r7
 8002666:	d063      	beq.n	8002730 <PIL_PROBES_packReadProbeMsg+0x130>
 8002668:	f8d3 9000 	ldr.w	r9, [r3]
 800266c:	f841 9018 	str.w	r9, [r1, r8, lsl #1]
 8002670:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8002674:	f8c2 8004 	str.w	r8, [r2, #4]
 8002678:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800267c:	f8c2 8008 	str.w	r8, [r2, #8]
 8002680:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8002684:	f8c2 800c 	str.w	r8, [r2, #12]
 8002688:	0867      	lsrs	r7, r4, #1
 800268a:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800268e:	f8c2 8010 	str.w	r8, [r2, #16]
 8002692:	2f05      	cmp	r7, #5
 8002694:	d02b      	beq.n	80026ee <PIL_PROBES_packReadProbeMsg+0xee>
 8002696:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800269a:	f8c2 8014 	str.w	r8, [r2, #20]
 800269e:	2f06      	cmp	r7, #6
 80026a0:	d025      	beq.n	80026ee <PIL_PROBES_packReadProbeMsg+0xee>
 80026a2:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80026a6:	f8c2 8018 	str.w	r8, [r2, #24]
 80026aa:	2f07      	cmp	r7, #7
 80026ac:	d01f      	beq.n	80026ee <PIL_PROBES_packReadProbeMsg+0xee>
 80026ae:	f8d3 801c 	ldr.w	r8, [r3, #28]
 80026b2:	f8c2 801c 	str.w	r8, [r2, #28]
 80026b6:	2f08      	cmp	r7, #8
 80026b8:	d019      	beq.n	80026ee <PIL_PROBES_packReadProbeMsg+0xee>
 80026ba:	f8d3 8020 	ldr.w	r8, [r3, #32]
 80026be:	f8c2 8020 	str.w	r8, [r2, #32]
 80026c2:	2f09      	cmp	r7, #9
 80026c4:	d013      	beq.n	80026ee <PIL_PROBES_packReadProbeMsg+0xee>
 80026c6:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 80026ca:	f8c2 8024 	str.w	r8, [r2, #36]	@ 0x24
 80026ce:	2f0a      	cmp	r7, #10
 80026d0:	d00d      	beq.n	80026ee <PIL_PROBES_packReadProbeMsg+0xee>
 80026d2:	f8d3 8028 	ldr.w	r8, [r3, #40]	@ 0x28
 80026d6:	f8c2 8028 	str.w	r8, [r2, #40]	@ 0x28
 80026da:	2f0b      	cmp	r7, #11
 80026dc:	d007      	beq.n	80026ee <PIL_PROBES_packReadProbeMsg+0xee>
 80026de:	f8d3 802c 	ldr.w	r8, [r3, #44]	@ 0x2c
 80026e2:	f8c2 802c 	str.w	r8, [r2, #44]	@ 0x2c
 80026e6:	2f0c      	cmp	r7, #12
 80026e8:	bf1c      	itt	ne
 80026ea:	6b1f      	ldrne	r7, [r3, #48]	@ 0x30
 80026ec:	6317      	strne	r7, [r2, #48]	@ 0x30
 80026ee:	f024 0701 	bic.w	r7, r4, #1
 80026f2:	42bc      	cmp	r4, r7
 80026f4:	eb07 020e 	add.w	r2, r7, lr
 80026f8:	d004      	beq.n	8002704 <PIL_PROBES_packReadProbeMsg+0x104>
 80026fa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80026fe:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 8002702:	8053      	strh	r3, [r2, #2]
 8002704:	44a6      	add	lr, r4
 8002706:	fa1f f38c 	uxth.w	r3, ip
 800270a:	429d      	cmp	r5, r3
 800270c:	f8a0 31d2 	strh.w	r3, [r0, #466]	@ 0x1d2
 8002710:	d924      	bls.n	800275c <PIL_PROBES_packReadProbeMsg+0x15c>
 8002712:	f836 403c 	ldrh.w	r4, [r6, ip, lsl #3]
 8002716:	eb04 020e 	add.w	r2, r4, lr
 800271a:	2a1d      	cmp	r2, #29
 800271c:	4663      	mov	r3, ip
 800271e:	f10c 0c01 	add.w	ip, ip, #1
 8002722:	dd92      	ble.n	800264a <PIL_PROBES_packReadProbeMsg+0x4a>
 8002724:	fa1f fe8e 	uxth.w	lr, lr
 8002728:	f8a1 e000 	strh.w	lr, [r1]
 800272c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002730:	eb03 0844 	add.w	r8, r3, r4, lsl #1
 8002734:	f1a8 0802 	sub.w	r8, r8, #2
 8002738:	3b02      	subs	r3, #2
 800273a:	f833 7f02 	ldrh.w	r7, [r3, #2]!
 800273e:	f822 7b02 	strh.w	r7, [r2], #2
 8002742:	4543      	cmp	r3, r8
 8002744:	d1f9      	bne.n	800273a <PIL_PROBES_packReadProbeMsg+0x13a>
 8002746:	e7dd      	b.n	8002704 <PIL_PROBES_packReadProbeMsg+0x104>
 8002748:	8943      	ldrh	r3, [r0, #10]
 800274a:	2201      	movs	r2, #1
 800274c:	2003      	movs	r0, #3
 800274e:	039b      	lsls	r3, r3, #14
 8002750:	80cb      	strh	r3, [r1, #6]
 8002752:	8008      	strh	r0, [r1, #0]
 8002754:	f881 203e 	strb.w	r2, [r1, #62]	@ 0x3e
 8002758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800275c:	f8a1 e000 	strh.w	lr, [r1]
 8002760:	d1e4      	bne.n	800272c <PIL_PROBES_packReadProbeMsg+0x12c>
 8002762:	2301      	movs	r3, #1
 8002764:	f881 303e 	strb.w	r3, [r1, #62]	@ 0x3e
 8002768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800276c:	f04f 0e03 	mov.w	lr, #3
 8002770:	e7da      	b.n	8002728 <PIL_PROBES_packReadProbeMsg+0x128>
 8002772:	bf00      	nop
 8002774:	000c0072 	.word	0x000c0072

08002778 <PIL_PROBES_init>:
 8002778:	f5b1 7fea 	cmp.w	r1, #468	@ 0x1d4
 800277c:	d309      	bcc.n	8002792 <PIL_PROBES_init+0x1a>
 800277e:	2300      	movs	r3, #0
 8002780:	6003      	str	r3, [r0, #0]
 8002782:	7183      	strb	r3, [r0, #6]
 8002784:	8083      	strh	r3, [r0, #4]
 8002786:	6083      	str	r3, [r0, #8]
 8002788:	f8a0 31d0 	strh.w	r3, [r0, #464]	@ 0x1d0
 800278c:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002790:	4770      	bx	lr
 8002792:	2000      	movs	r0, #0
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop

08002798 <PIL_PROBES_setActualPilMode>:
 8002798:	7943      	ldrb	r3, [r0, #5]
 800279a:	7183      	strb	r3, [r0, #6]
 800279c:	7141      	strb	r1, [r0, #5]
 800279e:	4770      	bx	lr

080027a0 <PIL_PROBES_setActualPilStep>:
 80027a0:	8141      	strh	r1, [r0, #10]
 80027a2:	4770      	bx	lr

080027a4 <PIL_PROBES_getActualPilMode>:
 80027a4:	7940      	ldrb	r0, [r0, #5]
 80027a6:	4770      	bx	lr

080027a8 <PIL_PROBES_getDesiredPilMode>:
 80027a8:	7900      	ldrb	r0, [r0, #4]
 80027aa:	4770      	bx	lr

080027ac <PIL_PROBES_getPreviousPilMode>:
 80027ac:	7980      	ldrb	r0, [r0, #6]
 80027ae:	4770      	bx	lr

080027b0 <PIL_PROBES_getActualPilStep>:
 80027b0:	8940      	ldrh	r0, [r0, #10]
 80027b2:	4770      	bx	lr

080027b4 <PIL_PROBES_getDesiredPilStep>:
 80027b4:	8900      	ldrh	r0, [r0, #8]
 80027b6:	4770      	bx	lr

080027b8 <PIL_PROBES_messageHandler>:
 80027b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027bc:	4603      	mov	r3, r0
 80027be:	4614      	mov	r4, r2
 80027c0:	b1b9      	cbz	r1, 80027f2 <PIL_PROBES_messageHandler+0x3a>
 80027c2:	884a      	ldrh	r2, [r1, #2]
 80027c4:	2a32      	cmp	r2, #50	@ 0x32
 80027c6:	d002      	beq.n	80027ce <PIL_PROBES_messageHandler+0x16>
 80027c8:	2000      	movs	r0, #0
 80027ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027ce:	888a      	ldrh	r2, [r1, #4]
 80027d0:	2a0c      	cmp	r2, #12
 80027d2:	d846      	bhi.n	8002862 <PIL_PROBES_messageHandler+0xaa>
 80027d4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80027d8:	00450064 	.word	0x00450064
 80027dc:	0076006d 	.word	0x0076006d
 80027e0:	00c001ac 	.word	0x00c001ac
 80027e4:	008900cf 	.word	0x008900cf
 80027e8:	00450045 	.word	0x00450045
 80027ec:	012d00b1 	.word	0x012d00b1
 80027f0:	014b      	.short	0x014b
 80027f2:	7802      	ldrb	r2, [r0, #0]
 80027f4:	2a00      	cmp	r2, #0
 80027f6:	d03f      	beq.n	8002878 <PIL_PROBES_messageHandler+0xc0>
 80027f8:	7942      	ldrb	r2, [r0, #5]
 80027fa:	2a02      	cmp	r2, #2
 80027fc:	d14b      	bne.n	8002896 <PIL_PROBES_messageHandler+0xde>
 80027fe:	f8b0 214c 	ldrh.w	r2, [r0, #332]	@ 0x14c
 8002802:	7001      	strb	r1, [r0, #0]
 8002804:	b322      	cbz	r2, 8002850 <PIL_PROBES_messageHandler+0x98>
 8002806:	2601      	movs	r6, #1
 8002808:	8ac2      	ldrh	r2, [r0, #22]
 800280a:	b14a      	cbz	r2, 8002820 <PIL_PROBES_messageHandler+0x68>
 800280c:	68c2      	ldr	r2, [r0, #12]
 800280e:	f1a2 0c02 	sub.w	ip, r2, #2
 8002812:	2200      	movs	r2, #0
 8002814:	f82c 6f02 	strh.w	r6, [ip, #2]!
 8002818:	8ac5      	ldrh	r5, [r0, #22]
 800281a:	3201      	adds	r2, #1
 800281c:	42aa      	cmp	r2, r5
 800281e:	dbf9      	blt.n	8002814 <PIL_PROBES_messageHandler+0x5c>
 8002820:	8a82      	ldrh	r2, [r0, #20]
 8002822:	b172      	cbz	r2, 8002842 <PIL_PROBES_messageHandler+0x8a>
 8002824:	6902      	ldr	r2, [r0, #16]
 8002826:	f1a2 0e02 	sub.w	lr, r2, #2
 800282a:	69c2      	ldr	r2, [r0, #28]
 800282c:	f1a2 0c02 	sub.w	ip, r2, #2
 8002830:	2200      	movs	r2, #0
 8002832:	f83e 5f02 	ldrh.w	r5, [lr, #2]!
 8002836:	f82c 5f02 	strh.w	r5, [ip, #2]!
 800283a:	8a85      	ldrh	r5, [r0, #20]
 800283c:	3201      	adds	r2, #1
 800283e:	42aa      	cmp	r2, r5
 8002840:	dbf7      	blt.n	8002832 <PIL_PROBES_messageHandler+0x7a>
 8002842:	f8b3 214c 	ldrh.w	r2, [r3, #332]	@ 0x14c
 8002846:	3101      	adds	r1, #1
 8002848:	4291      	cmp	r1, r2
 800284a:	f100 0014 	add.w	r0, r0, #20
 800284e:	dbdb      	blt.n	8002808 <PIL_PROBES_messageHandler+0x50>
 8002850:	4618      	mov	r0, r3
 8002852:	4621      	mov	r1, r4
 8002854:	f7ff fed4 	bl	8002600 <PIL_PROBES_packReadProbeMsg>
 8002858:	8820      	ldrh	r0, [r4, #0]
 800285a:	3800      	subs	r0, #0
 800285c:	bf18      	it	ne
 800285e:	2001      	movne	r0, #1
 8002860:	e7b3      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 8002862:	237f      	movs	r3, #127	@ 0x7f
 8002864:	8063      	strh	r3, [r4, #2]
 8002866:	8849      	ldrh	r1, [r1, #2]
 8002868:	2212      	movs	r2, #18
 800286a:	2303      	movs	r3, #3
 800286c:	80a1      	strh	r1, [r4, #4]
 800286e:	80e2      	strh	r2, [r4, #6]
 8002870:	8023      	strh	r3, [r4, #0]
 8002872:	2001      	movs	r0, #1
 8002874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002878:	7881      	ldrb	r1, [r0, #2]
 800287a:	b121      	cbz	r1, 8002886 <PIL_PROBES_messageHandler+0xce>
 800287c:	8945      	ldrh	r5, [r0, #10]
 800287e:	8901      	ldrh	r1, [r0, #8]
 8002880:	428d      	cmp	r5, r1
 8002882:	f000 8217 	beq.w	8002cb4 <PIL_PROBES_messageHandler+0x4fc>
 8002886:	7858      	ldrb	r0, [r3, #1]
 8002888:	2800      	cmp	r0, #0
 800288a:	f000 818b 	beq.w	8002ba4 <PIL_PROBES_messageHandler+0x3ec>
 800288e:	795a      	ldrb	r2, [r3, #5]
 8002890:	2a01      	cmp	r2, #1
 8002892:	f000 8243 	beq.w	8002d1c <PIL_PROBES_messageHandler+0x564>
 8002896:	8820      	ldrh	r0, [r4, #0]
 8002898:	3800      	subs	r0, #0
 800289a:	bf18      	it	ne
 800289c:	2001      	movne	r0, #1
 800289e:	e794      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 80028a0:	4a9f      	ldr	r2, [pc, #636]	@ (8002b20 <PIL_PROBES_messageHandler+0x368>)
 80028a2:	6022      	str	r2, [r4, #0]
 80028a4:	2110      	movs	r1, #16
 80028a6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80028aa:	8121      	strh	r1, [r4, #8]
 80028ac:	6063      	str	r3, [r4, #4]
 80028ae:	2001      	movs	r0, #1
 80028b0:	e78b      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 80028b2:	88cb      	ldrh	r3, [r1, #6]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	f000 818c 	beq.w	8002bd2 <PIL_PROBES_messageHandler+0x41a>
 80028ba:	237f      	movs	r3, #127	@ 0x7f
 80028bc:	8063      	strh	r3, [r4, #2]
 80028be:	8849      	ldrh	r1, [r1, #2]
 80028c0:	2213      	movs	r2, #19
 80028c2:	e7d2      	b.n	800286a <PIL_PROBES_messageHandler+0xb2>
 80028c4:	88cb      	ldrh	r3, [r1, #6]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d1f7      	bne.n	80028ba <PIL_PROBES_messageHandler+0x102>
 80028ca:	8908      	ldrh	r0, [r1, #8]
 80028cc:	894b      	ldrh	r3, [r1, #10]
 80028ce:	898a      	ldrh	r2, [r1, #12]
 80028d0:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 80028d4:	b11a      	cbz	r2, 80028de <PIL_PROBES_messageHandler+0x126>
 80028d6:	0052      	lsls	r2, r2, #1
 80028d8:	2100      	movs	r1, #0
 80028da:	f001 fe33 	bl	8004544 <memset>
 80028de:	4b91      	ldr	r3, [pc, #580]	@ (8002b24 <PIL_PROBES_messageHandler+0x36c>)
 80028e0:	6023      	str	r3, [r4, #0]
 80028e2:	2203      	movs	r2, #3
 80028e4:	80a2      	strh	r2, [r4, #4]
 80028e6:	2001      	movs	r0, #1
 80028e8:	e76f      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 80028ea:	7818      	ldrb	r0, [r3, #0]
 80028ec:	785a      	ldrb	r2, [r3, #1]
 80028ee:	4302      	orrs	r2, r0
 80028f0:	d12d      	bne.n	800294e <PIL_PROBES_messageHandler+0x196>
 80028f2:	789a      	ldrb	r2, [r3, #2]
 80028f4:	bb5a      	cbnz	r2, 800294e <PIL_PROBES_messageHandler+0x196>
 80028f6:	f8b3 21d0 	ldrh.w	r2, [r3, #464]	@ 0x1d0
 80028fa:	2a0f      	cmp	r2, #15
 80028fc:	f200 814d 	bhi.w	8002b9a <PIL_PROBES_messageHandler+0x3e2>
 8002900:	88c8      	ldrh	r0, [r1, #6]
 8002902:	2802      	cmp	r0, #2
 8002904:	d1d9      	bne.n	80028ba <PIL_PROBES_messageHandler+0x102>
 8002906:	890e      	ldrh	r6, [r1, #8]
 8002908:	8948      	ldrh	r0, [r1, #10]
 800290a:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800290e:	eb00 4006 	add.w	r0, r0, r6, lsl #16
 8002912:	f8c5 0150 	str.w	r0, [r5, #336]	@ 0x150
 8002916:	8988      	ldrh	r0, [r1, #12]
 8002918:	0840      	lsrs	r0, r0, #1
 800291a:	281b      	cmp	r0, #27
 800291c:	f8a5 0154 	strh.w	r0, [r5, #340]	@ 0x154
 8002920:	f200 813b 	bhi.w	8002b9a <PIL_PROBES_messageHandler+0x3e2>
 8002924:	3201      	adds	r2, #1
 8002926:	b292      	uxth	r2, r2
 8002928:	497f      	ldr	r1, [pc, #508]	@ (8002b28 <PIL_PROBES_messageHandler+0x370>)
 800292a:	f8a3 21d0 	strh.w	r2, [r3, #464]	@ 0x1d0
 800292e:	2507      	movs	r5, #7
 8002930:	2001      	movs	r0, #1
 8002932:	80a5      	strh	r5, [r4, #4]
 8002934:	80e2      	strh	r2, [r4, #6]
 8002936:	6021      	str	r1, [r4, #0]
 8002938:	e747      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 800293a:	7818      	ldrb	r0, [r3, #0]
 800293c:	785a      	ldrb	r2, [r3, #1]
 800293e:	4302      	orrs	r2, r0
 8002940:	d105      	bne.n	800294e <PIL_PROBES_messageHandler+0x196>
 8002942:	789f      	ldrb	r7, [r3, #2]
 8002944:	b91f      	cbnz	r7, 800294e <PIL_PROBES_messageHandler+0x196>
 8002946:	795a      	ldrb	r2, [r3, #5]
 8002948:	2a02      	cmp	r2, #2
 800294a:	f000 81c0 	beq.w	8002cce <PIL_PROBES_messageHandler+0x516>
 800294e:	237f      	movs	r3, #127	@ 0x7f
 8002950:	8063      	strh	r3, [r4, #2]
 8002952:	8849      	ldrh	r1, [r1, #2]
 8002954:	2222      	movs	r2, #34	@ 0x22
 8002956:	e788      	b.n	800286a <PIL_PROBES_messageHandler+0xb2>
 8002958:	7958      	ldrb	r0, [r3, #5]
 800295a:	2801      	cmp	r0, #1
 800295c:	d1f7      	bne.n	800294e <PIL_PROBES_messageHandler+0x196>
 800295e:	2200      	movs	r2, #0
 8002960:	7118      	strb	r0, [r3, #4]
 8002962:	f8a3 21d0 	strh.w	r2, [r3, #464]	@ 0x1d0
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
 800296c:	2105      	movs	r1, #5
 800296e:	4b6d      	ldr	r3, [pc, #436]	@ (8002b24 <PIL_PROBES_messageHandler+0x36c>)
 8002970:	80a1      	strh	r1, [r4, #4]
 8002972:	6023      	str	r3, [r4, #0]
 8002974:	e729      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 8002976:	7818      	ldrb	r0, [r3, #0]
 8002978:	785a      	ldrb	r2, [r3, #1]
 800297a:	4302      	orrs	r2, r0
 800297c:	d1e7      	bne.n	800294e <PIL_PROBES_messageHandler+0x196>
 800297e:	789a      	ldrb	r2, [r3, #2]
 8002980:	2a00      	cmp	r2, #0
 8002982:	d1e4      	bne.n	800294e <PIL_PROBES_messageHandler+0x196>
 8002984:	f8b3 714c 	ldrh.w	r7, [r3, #332]	@ 0x14c
 8002988:	2f0f      	cmp	r7, #15
 800298a:	f200 8106 	bhi.w	8002b9a <PIL_PROBES_messageHandler+0x3e2>
 800298e:	88ca      	ldrh	r2, [r1, #6]
 8002990:	2a02      	cmp	r2, #2
 8002992:	d192      	bne.n	80028ba <PIL_PROBES_messageHandler+0x102>
 8002994:	890d      	ldrh	r5, [r1, #8]
 8002996:	8948      	ldrh	r0, [r1, #10]
 8002998:	8ace      	ldrh	r6, [r1, #22]
 800299a:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
 800299e:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
 80029a2:	eb07 0287 	add.w	r2, r7, r7, lsl #2
 80029a6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80029aa:	eb00 4005 	add.w	r0, r0, r5, lsl #16
 80029ae:	61d0      	str	r0, [r2, #28]
 80029b0:	8a0d      	ldrh	r5, [r1, #16]
 80029b2:	8a48      	ldrh	r0, [r1, #18]
 80029b4:	0876      	lsrs	r6, r6, #1
 80029b6:	eb00 4005 	add.w	r0, r0, r5, lsl #16
 80029ba:	6110      	str	r0, [r2, #16]
 80029bc:	eb0e 450c 	add.w	r5, lr, ip, lsl #16
 80029c0:	8a88      	ldrh	r0, [r1, #20]
 80029c2:	82d0      	strh	r0, [r2, #22]
 80029c4:	2e1b      	cmp	r6, #27
 80029c6:	8296      	strh	r6, [r2, #20]
 80029c8:	60d5      	str	r5, [r2, #12]
 80029ca:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 80029ce:	f200 80e4 	bhi.w	8002b9a <PIL_PROBES_messageHandler+0x3e2>
 80029d2:	f93c c00e 	ldrsh.w	ip, [ip, lr]
 80029d6:	f8a2 c018 	strh.w	ip, [r2, #24]
 80029da:	2801      	cmp	r0, #1
 80029dc:	d916      	bls.n	8002a0c <PIL_PROBES_messageHandler+0x254>
 80029de:	3802      	subs	r0, #2
 80029e0:	b280      	uxth	r0, r0
 80029e2:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 80029e6:	1caa      	adds	r2, r5, #2
 80029e8:	3004      	adds	r0, #4
 80029ea:	e001      	b.n	80029f0 <PIL_PROBES_messageHandler+0x238>
 80029ec:	4282      	cmp	r2, r0
 80029ee:	d00d      	beq.n	8002a0c <PIL_PROBES_messageHandler+0x254>
 80029f0:	f9b2 5000 	ldrsh.w	r5, [r2]
 80029f4:	4565      	cmp	r5, ip
 80029f6:	f102 0202 	add.w	r2, r2, #2
 80029fa:	d0f7      	beq.n	80029ec <PIL_PROBES_messageHandler+0x234>
 80029fc:	227f      	movs	r2, #127	@ 0x7f
 80029fe:	8062      	strh	r2, [r4, #2]
 8002a00:	884a      	ldrh	r2, [r1, #2]
 8002a02:	80a2      	strh	r2, [r4, #4]
 8002a04:	2222      	movs	r2, #34	@ 0x22
 8002a06:	80e2      	strh	r2, [r4, #6]
 8002a08:	2203      	movs	r2, #3
 8002a0a:	8022      	strh	r2, [r4, #0]
 8002a0c:	f1bc 0f00 	cmp.w	ip, #0
 8002a10:	d19d      	bne.n	800294e <PIL_PROBES_messageHandler+0x196>
 8002a12:	f8b3 114e 	ldrh.w	r1, [r3, #334]	@ 0x14e
 8002a16:	1c7a      	adds	r2, r7, #1
 8002a18:	b292      	uxth	r2, r2
 8002a1a:	440e      	add	r6, r1
 8002a1c:	2506      	movs	r5, #6
 8002a1e:	4942      	ldr	r1, [pc, #264]	@ (8002b28 <PIL_PROBES_messageHandler+0x370>)
 8002a20:	f8a3 614e 	strh.w	r6, [r3, #334]	@ 0x14e
 8002a24:	f8a3 214c 	strh.w	r2, [r3, #332]	@ 0x14c
 8002a28:	2001      	movs	r0, #1
 8002a2a:	80a5      	strh	r5, [r4, #4]
 8002a2c:	80e2      	strh	r2, [r4, #6]
 8002a2e:	6021      	str	r1, [r4, #0]
 8002a30:	e6cb      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 8002a32:	795a      	ldrb	r2, [r3, #5]
 8002a34:	2a02      	cmp	r2, #2
 8002a36:	f000 80ab 	beq.w	8002b90 <PIL_PROBES_messageHandler+0x3d8>
 8002a3a:	78dd      	ldrb	r5, [r3, #3]
 8002a3c:	2d00      	cmp	r5, #0
 8002a3e:	f040 80a7 	bne.w	8002b90 <PIL_PROBES_messageHandler+0x3d8>
 8002a42:	88c8      	ldrh	r0, [r1, #6]
 8002a44:	2801      	cmp	r0, #1
 8002a46:	f000 8190 	beq.w	8002d6a <PIL_PROBES_messageHandler+0x5b2>
 8002a4a:	2802      	cmp	r0, #2
 8002a4c:	f000 8186 	beq.w	8002d5c <PIL_PROBES_messageHandler+0x5a4>
 8002a50:	2800      	cmp	r0, #0
 8002a52:	f47f af7c 	bne.w	800294e <PIL_PROBES_messageHandler+0x196>
 8002a56:	2a00      	cmp	r2, #0
 8002a58:	4934      	ldr	r1, [pc, #208]	@ (8002b2c <PIL_PROBES_messageHandler+0x374>)
 8002a5a:	f8c4 1002 	str.w	r1, [r4, #2]
 8002a5e:	bf0c      	ite	eq
 8002a60:	2202      	moveq	r2, #2
 8002a62:	2201      	movne	r2, #1
 8002a64:	2303      	movs	r3, #3
 8002a66:	80e2      	strh	r2, [r4, #6]
 8002a68:	8023      	strh	r3, [r4, #0]
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	e6ad      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 8002a6e:	7818      	ldrb	r0, [r3, #0]
 8002a70:	785a      	ldrb	r2, [r3, #1]
 8002a72:	4302      	orrs	r2, r0
 8002a74:	f47f af6b 	bne.w	800294e <PIL_PROBES_messageHandler+0x196>
 8002a78:	789a      	ldrb	r2, [r3, #2]
 8002a7a:	2a00      	cmp	r2, #0
 8002a7c:	f47f af67 	bne.w	800294e <PIL_PROBES_messageHandler+0x196>
 8002a80:	f893 e005 	ldrb.w	lr, [r3, #5]
 8002a84:	f10e 32ff 	add.w	r2, lr, #4294967295
 8002a88:	2a01      	cmp	r2, #1
 8002a8a:	f63f af60 	bhi.w	800294e <PIL_PROBES_messageHandler+0x196>
 8002a8e:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8002a92:	f01c 0f0e 	tst.w	ip, #14
 8002a96:	f040 814a 	bne.w	8002d2e <PIL_PROBES_messageHandler+0x576>
 8002a9a:	f01c 020f 	ands.w	r2, ip, #15
 8002a9e:	ea4f 379c 	mov.w	r7, ip, lsr #14
 8002aa2:	f000 8149 	beq.w	8002d38 <PIL_PROBES_messageHandler+0x580>
 8002aa6:	f8b3 514c 	ldrh.w	r5, [r3, #332]	@ 0x14c
 8002aaa:	f3cc 1c09 	ubfx	ip, ip, #4, #10
 8002aae:	4565      	cmp	r5, ip
 8002ab0:	f67f af03 	bls.w	80028ba <PIL_PROBES_messageHandler+0x102>
 8002ab4:	f04f 0903 	mov.w	r9, #3
 8002ab8:	8808      	ldrh	r0, [r1, #0]
 8002aba:	4548      	cmp	r0, r9
 8002abc:	d923      	bls.n	8002b06 <PIL_PROBES_messageHandler+0x34e>
 8002abe:	eb0c 068c 	add.w	r6, ip, ip, lsl #2
 8002ac2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8002ac6:	8ab2      	ldrh	r2, [r6, #20]
 8002ac8:	eb02 0809 	add.w	r8, r2, r9
 8002acc:	4580      	cmp	r8, r0
 8002ace:	f73f aef4 	bgt.w	80028ba <PIL_PROBES_messageHandler+0x102>
 8002ad2:	f8d6 8010 	ldr.w	r8, [r6, #16]
 8002ad6:	b182      	cbz	r2, 8002afa <PIL_PROBES_messageHandler+0x342>
 8002ad8:	2500      	movs	r5, #0
 8002ada:	eb01 0049 	add.w	r0, r1, r9, lsl #1
 8002ade:	f109 0201 	add.w	r2, r9, #1
 8002ae2:	8840      	ldrh	r0, [r0, #2]
 8002ae4:	f828 0b02 	strh.w	r0, [r8], #2
 8002ae8:	3501      	adds	r5, #1
 8002aea:	8ab0      	ldrh	r0, [r6, #20]
 8002aec:	fa1f f982 	uxth.w	r9, r2
 8002af0:	b2aa      	uxth	r2, r5
 8002af2:	4290      	cmp	r0, r2
 8002af4:	d8f1      	bhi.n	8002ada <PIL_PROBES_messageHandler+0x322>
 8002af6:	f8b3 514c 	ldrh.w	r5, [r3, #332]	@ 0x14c
 8002afa:	f10c 0c01 	add.w	ip, ip, #1
 8002afe:	fa1f fc8c 	uxth.w	ip, ip
 8002b02:	45ac      	cmp	ip, r5
 8002b04:	d3d8      	bcc.n	8002ab8 <PIL_PROBES_messageHandler+0x300>
 8002b06:	4565      	cmp	r5, ip
 8002b08:	f000 8119 	beq.w	8002d3e <PIL_PROBES_messageHandler+0x586>
 8002b0c:	895b      	ldrh	r3, [r3, #10]
 8002b0e:	4a06      	ldr	r2, [pc, #24]	@ (8002b28 <PIL_PROBES_messageHandler+0x370>)
 8002b10:	6022      	str	r2, [r4, #0]
 8002b12:	210c      	movs	r1, #12
 8002b14:	039b      	lsls	r3, r3, #14
 8002b16:	80a1      	strh	r1, [r4, #4]
 8002b18:	80e3      	strh	r3, [r4, #6]
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	e655      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 8002b1e:	bf00      	nop
 8002b20:	00720004 	.word	0x00720004
 8002b24:	00720002 	.word	0x00720002
 8002b28:	00720003 	.word	0x00720003
 8002b2c:	000b0072 	.word	0x000b0072
 8002b30:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8002b34:	f1bc 0f02 	cmp.w	ip, #2
 8002b38:	f47f aebf 	bne.w	80028ba <PIL_PROBES_messageHandler+0x102>
 8002b3c:	890b      	ldrh	r3, [r1, #8]
 8002b3e:	894f      	ldrh	r7, [r1, #10]
 8002b40:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8002b44:	eb07 4703 	add.w	r7, r7, r3, lsl #16
 8002b48:	4ba4      	ldr	r3, [pc, #656]	@ (8002ddc <PIL_PROBES_messageHandler+0x624>)
 8002b4a:	f8c4 3002 	str.w	r3, [r4, #2]
 8002b4e:	f1be 0f00 	cmp.w	lr, #0
 8002b52:	f000 80a7 	beq.w	8002ca4 <PIL_PROBES_messageHandler+0x4ec>
 8002b56:	f10e 32ff 	add.w	r2, lr, #4294967295
 8002b5a:	b292      	uxth	r2, r2
 8002b5c:	f104 0008 	add.w	r0, r4, #8
 8002b60:	f06f 0105 	mvn.w	r1, #5
 8002b64:	1da3      	adds	r3, r4, #6
 8002b66:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8002b6a:	1b09      	subs	r1, r1, r4
 8002b6c:	2601      	movs	r6, #1
 8002b6e:	2500      	movs	r5, #0
 8002b70:	e004      	b.n	8002b7c <PIL_PROBES_messageHandler+0x3c4>
 8002b72:	801d      	strh	r5, [r3, #0]
 8002b74:	3302      	adds	r3, #2
 8002b76:	4283      	cmp	r3, r0
 8002b78:	f000 8094 	beq.w	8002ca4 <PIL_PROBES_messageHandler+0x4ec>
 8002b7c:	18fa      	adds	r2, r7, r3
 8002b7e:	5e52      	ldrsh	r2, [r2, r1]
 8002b80:	b122      	cbz	r2, 8002b8c <PIL_PROBES_messageHandler+0x3d4>
 8002b82:	2a01      	cmp	r2, #1
 8002b84:	d1f5      	bne.n	8002b72 <PIL_PROBES_messageHandler+0x3ba>
 8002b86:	f8a3 c000 	strh.w	ip, [r3]
 8002b8a:	e7f3      	b.n	8002b74 <PIL_PROBES_messageHandler+0x3bc>
 8002b8c:	801e      	strh	r6, [r3, #0]
 8002b8e:	e7f1      	b.n	8002b74 <PIL_PROBES_messageHandler+0x3bc>
 8002b90:	237f      	movs	r3, #127	@ 0x7f
 8002b92:	8063      	strh	r3, [r4, #2]
 8002b94:	8849      	ldrh	r1, [r1, #2]
 8002b96:	2218      	movs	r2, #24
 8002b98:	e667      	b.n	800286a <PIL_PROBES_messageHandler+0xb2>
 8002b9a:	237f      	movs	r3, #127	@ 0x7f
 8002b9c:	8063      	strh	r3, [r4, #2]
 8002b9e:	8849      	ldrh	r1, [r1, #2]
 8002ba0:	2216      	movs	r2, #22
 8002ba2:	e662      	b.n	800286a <PIL_PROBES_messageHandler+0xb2>
 8002ba4:	78d8      	ldrb	r0, [r3, #3]
 8002ba6:	2800      	cmp	r0, #0
 8002ba8:	f000 8082 	beq.w	8002cb0 <PIL_PROBES_messageHandler+0x4f8>
 8002bac:	7959      	ldrb	r1, [r3, #5]
 8002bae:	791a      	ldrb	r2, [r3, #4]
 8002bb0:	428a      	cmp	r2, r1
 8002bb2:	f47f ae70 	bne.w	8002896 <PIL_PROBES_messageHandler+0xde>
 8002bb6:	2a00      	cmp	r2, #0
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	70da      	strb	r2, [r3, #3]
 8002bbe:	4988      	ldr	r1, [pc, #544]	@ (8002de0 <PIL_PROBES_messageHandler+0x628>)
 8002bc0:	f8c4 1002 	str.w	r1, [r4, #2]
 8002bc4:	bf0c      	ite	eq
 8002bc6:	2202      	moveq	r2, #2
 8002bc8:	2201      	movne	r2, #1
 8002bca:	2303      	movs	r3, #3
 8002bcc:	80e2      	strh	r2, [r4, #6]
 8002bce:	8023      	strh	r3, [r4, #0]
 8002bd0:	e5fb      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 8002bd2:	8a4e      	ldrh	r6, [r1, #18]
 8002bd4:	890d      	ldrh	r5, [r1, #8]
 8002bd6:	8988      	ldrh	r0, [r1, #12]
 8002bd8:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8002bdc:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
 8002be0:	ea5f 0856 	movs.w	r8, r6, lsr #1
 8002be4:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8002be8:	ea4f 4300 	mov.w	r3, r0, lsl #16
 8002bec:	eb0c 4505 	add.w	r5, ip, r5, lsl #16
 8002bf0:	eb0e 4000 	add.w	r0, lr, r0, lsl #16
 8002bf4:	d050      	beq.n	8002c98 <PIL_PROBES_messageHandler+0x4e0>
 8002bf6:	f101 0216 	add.w	r2, r1, #22
 8002bfa:	42aa      	cmp	r2, r5
 8002bfc:	bf18      	it	ne
 8002bfe:	4282      	cmpne	r2, r0
 8002c00:	f108 37ff 	add.w	r7, r8, #4294967295
 8002c04:	b2bf      	uxth	r7, r7
 8002c06:	bf14      	ite	ne
 8002c08:	2201      	movne	r2, #1
 8002c0a:	2200      	moveq	r2, #0
 8002c0c:	2f08      	cmp	r7, #8
 8002c0e:	bf94      	ite	ls
 8002c10:	2200      	movls	r2, #0
 8002c12:	f002 0201 	andhi.w	r2, r2, #1
 8002c16:	2a00      	cmp	r2, #0
 8002c18:	f000 80ad 	beq.w	8002d76 <PIL_PROBES_messageHandler+0x5be>
 8002c1c:	1c82      	adds	r2, r0, #2
 8002c1e:	4295      	cmp	r5, r2
 8002c20:	f000 80a9 	beq.w	8002d76 <PIL_PROBES_messageHandler+0x5be>
 8002c24:	694a      	ldr	r2, [r1, #20]
 8002c26:	f843 200e 	str.w	r2, [r3, lr]
 8002c2a:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002c2e:	f849 300c 	str.w	r3, [r9, ip]
 8002c32:	698a      	ldr	r2, [r1, #24]
 8002c34:	6042      	str	r2, [r0, #4]
 8002c36:	606b      	str	r3, [r5, #4]
 8002c38:	69ca      	ldr	r2, [r1, #28]
 8002c3a:	6082      	str	r2, [r0, #8]
 8002c3c:	60ab      	str	r3, [r5, #8]
 8002c3e:	6a0a      	ldr	r2, [r1, #32]
 8002c40:	60c2      	str	r2, [r0, #12]
 8002c42:	08b6      	lsrs	r6, r6, #2
 8002c44:	60eb      	str	r3, [r5, #12]
 8002c46:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8002c48:	6102      	str	r2, [r0, #16]
 8002c4a:	2e05      	cmp	r6, #5
 8002c4c:	612b      	str	r3, [r5, #16]
 8002c4e:	d016      	beq.n	8002c7e <PIL_PROBES_messageHandler+0x4c6>
 8002c50:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8002c52:	6142      	str	r2, [r0, #20]
 8002c54:	2e06      	cmp	r6, #6
 8002c56:	616b      	str	r3, [r5, #20]
 8002c58:	d011      	beq.n	8002c7e <PIL_PROBES_messageHandler+0x4c6>
 8002c5a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8002c5c:	6182      	str	r2, [r0, #24]
 8002c5e:	2e07      	cmp	r6, #7
 8002c60:	61ab      	str	r3, [r5, #24]
 8002c62:	d00c      	beq.n	8002c7e <PIL_PROBES_messageHandler+0x4c6>
 8002c64:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8002c66:	61c2      	str	r2, [r0, #28]
 8002c68:	2e08      	cmp	r6, #8
 8002c6a:	61eb      	str	r3, [r5, #28]
 8002c6c:	d007      	beq.n	8002c7e <PIL_PROBES_messageHandler+0x4c6>
 8002c6e:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 8002c70:	6202      	str	r2, [r0, #32]
 8002c72:	2e09      	cmp	r6, #9
 8002c74:	622b      	str	r3, [r5, #32]
 8002c76:	d002      	beq.n	8002c7e <PIL_PROBES_messageHandler+0x4c6>
 8002c78:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
 8002c7a:	6242      	str	r2, [r0, #36]	@ 0x24
 8002c7c:	626b      	str	r3, [r5, #36]	@ 0x24
 8002c7e:	ebb8 0f46 	cmp.w	r8, r6, lsl #1
 8002c82:	ea4f 0346 	mov.w	r3, r6, lsl #1
 8002c86:	d007      	beq.n	8002c98 <PIL_PROBES_messageHandler+0x4e0>
 8002c88:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8002c8c:	8a8a      	ldrh	r2, [r1, #20]
 8002c8e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
 8002c98:	4b52      	ldr	r3, [pc, #328]	@ (8002de4 <PIL_PROBES_messageHandler+0x62c>)
 8002c9a:	6023      	str	r3, [r4, #0]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	80a2      	strh	r2, [r4, #4]
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	e592      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 8002ca4:	f10e 0e02 	add.w	lr, lr, #2
 8002ca8:	f8a4 e000 	strh.w	lr, [r4]
 8002cac:	2001      	movs	r0, #1
 8002cae:	e58c      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 8002cb0:	8020      	strh	r0, [r4, #0]
 8002cb2:	e58a      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 8002cb4:	7941      	ldrb	r1, [r0, #5]
 8002cb6:	2902      	cmp	r1, #2
 8002cb8:	f47f aded 	bne.w	8002896 <PIL_PROBES_messageHandler+0xde>
 8002cbc:	7082      	strb	r2, [r0, #2]
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	f7ff fc9e 	bl	8002600 <PIL_PROBES_packReadProbeMsg>
 8002cc4:	8820      	ldrh	r0, [r4, #0]
 8002cc6:	3800      	subs	r0, #0
 8002cc8:	bf18      	it	ne
 8002cca:	2001      	movne	r0, #1
 8002ccc:	e57d      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 8002cce:	f8b3 014c 	ldrh.w	r0, [r3, #332]	@ 0x14c
 8002cd2:	46bc      	mov	ip, r7
 8002cd4:	b920      	cbnz	r0, 8002ce0 <PIL_PROBES_messageHandler+0x528>
 8002cd6:	e01b      	b.n	8002d10 <PIL_PROBES_messageHandler+0x558>
 8002cd8:	3701      	adds	r7, #1
 8002cda:	b2ba      	uxth	r2, r7
 8002cdc:	4290      	cmp	r0, r2
 8002cde:	d917      	bls.n	8002d10 <PIL_PROBES_messageHandler+0x558>
 8002ce0:	b2b9      	uxth	r1, r7
 8002ce2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002ce6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8002cea:	f9b1 2018 	ldrsh.w	r2, [r1, #24]
 8002cee:	2a00      	cmp	r2, #0
 8002cf0:	d1f2      	bne.n	8002cd8 <PIL_PROBES_messageHandler+0x520>
 8002cf2:	8acd      	ldrh	r5, [r1, #22]
 8002cf4:	2d00      	cmp	r5, #0
 8002cf6:	d0ef      	beq.n	8002cd8 <PIL_PROBES_messageHandler+0x520>
 8002cf8:	68ce      	ldr	r6, [r1, #12]
 8002cfa:	b290      	uxth	r0, r2
 8002cfc:	3201      	adds	r2, #1
 8002cfe:	f826 c010 	strh.w	ip, [r6, r0, lsl #1]
 8002d02:	8acd      	ldrh	r5, [r1, #22]
 8002d04:	b290      	uxth	r0, r2
 8002d06:	4285      	cmp	r5, r0
 8002d08:	d8f7      	bhi.n	8002cfa <PIL_PROBES_messageHandler+0x542>
 8002d0a:	f8b3 014c 	ldrh.w	r0, [r3, #332]	@ 0x14c
 8002d0e:	e7e3      	b.n	8002cd8 <PIL_PROBES_messageHandler+0x520>
 8002d10:	2001      	movs	r0, #1
 8002d12:	2200      	movs	r2, #0
 8002d14:	7118      	strb	r0, [r3, #4]
 8002d16:	7058      	strb	r0, [r3, #1]
 8002d18:	8022      	strh	r2, [r4, #0]
 8002d1a:	e556      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	7059      	strb	r1, [r3, #1]
 8002d20:	4b30      	ldr	r3, [pc, #192]	@ (8002de4 <PIL_PROBES_messageHandler+0x62c>)
 8002d22:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 8002d26:	210a      	movs	r1, #10
 8002d28:	80a1      	strh	r1, [r4, #4]
 8002d2a:	6023      	str	r3, [r4, #0]
 8002d2c:	e54d      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 8002d2e:	237f      	movs	r3, #127	@ 0x7f
 8002d30:	8063      	strh	r3, [r4, #2]
 8002d32:	8849      	ldrh	r1, [r1, #2]
 8002d34:	2215      	movs	r2, #21
 8002d36:	e598      	b.n	800286a <PIL_PROBES_messageHandler+0xb2>
 8002d38:	8959      	ldrh	r1, [r3, #10]
 8002d3a:	42b9      	cmp	r1, r7
 8002d3c:	d03b      	beq.n	8002db6 <PIL_PROBES_messageHandler+0x5fe>
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f1be 0f02 	cmp.w	lr, #2
 8002d44:	811f      	strh	r7, [r3, #8]
 8002d46:	f8a3 21d2 	strh.w	r2, [r3, #466]	@ 0x1d2
 8002d4a:	d031      	beq.n	8002db0 <PIL_PROBES_messageHandler+0x5f8>
 8002d4c:	2102      	movs	r1, #2
 8002d4e:	2201      	movs	r2, #1
 8002d50:	7119      	strb	r1, [r3, #4]
 8002d52:	701a      	strb	r2, [r3, #0]
 8002d54:	2300      	movs	r3, #0
 8002d56:	8023      	strh	r3, [r4, #0]
 8002d58:	2001      	movs	r0, #1
 8002d5a:	e536      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 8002d5c:	bb1a      	cbnz	r2, 8002da6 <PIL_PROBES_messageHandler+0x5ee>
 8002d5e:	4a22      	ldr	r2, [pc, #136]	@ (8002de8 <PIL_PROBES_messageHandler+0x630>)
 8002d60:	4b22      	ldr	r3, [pc, #136]	@ (8002dec <PIL_PROBES_messageHandler+0x634>)
 8002d62:	6022      	str	r2, [r4, #0]
 8002d64:	6063      	str	r3, [r4, #4]
 8002d66:	2001      	movs	r0, #1
 8002d68:	e52f      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 8002d6a:	2a01      	cmp	r2, #1
 8002d6c:	d02a      	beq.n	8002dc4 <PIL_PROBES_messageHandler+0x60c>
 8002d6e:	7118      	strb	r0, [r3, #4]
 8002d70:	70d8      	strb	r0, [r3, #3]
 8002d72:	8025      	strh	r5, [r4, #0]
 8002d74:	e529      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 8002d76:	f06f 0311 	mvn.w	r3, #17
 8002d7a:	1a5b      	subs	r3, r3, r1
 8002d7c:	f101 0214 	add.w	r2, r1, #20
 8002d80:	f06f 0613 	mvn.w	r6, #19
 8002d84:	1a76      	subs	r6, r6, r1
 8002d86:	4403      	add	r3, r0
 8002d88:	eb02 0747 	add.w	r7, r2, r7, lsl #1
 8002d8c:	3112      	adds	r1, #18
 8002d8e:	f04f 0c01 	mov.w	ip, #1
 8002d92:	185a      	adds	r2, r3, r1
 8002d94:	f831 0f02 	ldrh.w	r0, [r1, #2]!
 8002d98:	8010      	strh	r0, [r2, #0]
 8002d9a:	186a      	adds	r2, r5, r1
 8002d9c:	42b9      	cmp	r1, r7
 8002d9e:	f822 c006 	strh.w	ip, [r2, r6]
 8002da2:	d1f6      	bne.n	8002d92 <PIL_PROBES_messageHandler+0x5da>
 8002da4:	e778      	b.n	8002c98 <PIL_PROBES_messageHandler+0x4e0>
 8002da6:	2001      	movs	r0, #1
 8002da8:	711d      	strb	r5, [r3, #4]
 8002daa:	70d8      	strb	r0, [r3, #3]
 8002dac:	8025      	strh	r5, [r4, #0]
 8002dae:	e50c      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 8002db0:	2201      	movs	r2, #1
 8002db2:	709a      	strb	r2, [r3, #2]
 8002db4:	e7ce      	b.n	8002d54 <PIL_PROBES_messageHandler+0x59c>
 8002db6:	f1be 0f02 	cmp.w	lr, #2
 8002dba:	d009      	beq.n	8002dd0 <PIL_PROBES_messageHandler+0x618>
 8002dbc:	8119      	strh	r1, [r3, #8]
 8002dbe:	f8a3 21d2 	strh.w	r2, [r3, #466]	@ 0x1d2
 8002dc2:	e7c3      	b.n	8002d4c <PIL_PROBES_messageHandler+0x594>
 8002dc4:	4908      	ldr	r1, [pc, #32]	@ (8002de8 <PIL_PROBES_messageHandler+0x630>)
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002df0 <PIL_PROBES_messageHandler+0x638>)
 8002dc8:	6021      	str	r1, [r4, #0]
 8002dca:	6063      	str	r3, [r4, #4]
 8002dcc:	4610      	mov	r0, r2
 8002dce:	e4fc      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	f7ff fc14 	bl	8002600 <PIL_PROBES_packReadProbeMsg>
 8002dd8:	2001      	movs	r0, #1
 8002dda:	e4f6      	b.n	80027ca <PIL_PROBES_messageHandler+0x12>
 8002ddc:	00040072 	.word	0x00040072
 8002de0:	000b0072 	.word	0x000b0072
 8002de4:	00720002 	.word	0x00720002
 8002de8:	00720003 	.word	0x00720003
 8002dec:	0002000b 	.word	0x0002000b
 8002df0:	0001000b 	.word	0x0001000b

08002df4 <PIL_RA_coreMessageHandler>:
 8002df4:	b121      	cbz	r1, 8002e00 <PIL_RA_coreMessageHandler+0xc>
 8002df6:	884b      	ldrh	r3, [r1, #2]
 8002df8:	2b06      	cmp	r3, #6
 8002dfa:	d007      	beq.n	8002e0c <PIL_RA_coreMessageHandler+0x18>
 8002dfc:	2b3e      	cmp	r3, #62	@ 0x3e
 8002dfe:	d001      	beq.n	8002e04 <PIL_RA_coreMessageHandler+0x10>
 8002e00:	2000      	movs	r0, #0
 8002e02:	4770      	bx	lr
 8002e04:	4b1d      	ldr	r3, [pc, #116]	@ (8002e7c <PIL_RA_coreMessageHandler+0x88>)
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	2001      	movs	r0, #1
 8002e0a:	4770      	bx	lr
 8002e0c:	491c      	ldr	r1, [pc, #112]	@ (8002e80 <PIL_RA_coreMessageHandler+0x8c>)
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002e84 <PIL_RA_coreMessageHandler+0x90>)
 8002e10:	f8c2 3006 	str.w	r3, [r2, #6]
 8002e14:	f8c2 1002 	str.w	r1, [r2, #2]
 8002e18:	6841      	ldr	r1, [r0, #4]
 8002e1a:	b510      	push	{r4, lr}
 8002e1c:	f100 030a 	add.w	r3, r0, #10
 8002e20:	6804      	ldr	r4, [r0, #0]
 8002e22:	f8c2 100e 	str.w	r1, [r2, #14]
 8002e26:	f102 0112 	add.w	r1, r2, #18
 8002e2a:	428b      	cmp	r3, r1
 8002e2c:	f8c2 400a 	str.w	r4, [r2, #10]
 8002e30:	d012      	beq.n	8002e58 <PIL_RA_coreMessageHandler+0x64>
 8002e32:	6883      	ldr	r3, [r0, #8]
 8002e34:	f8c2 3012 	str.w	r3, [r2, #18]
 8002e38:	68c3      	ldr	r3, [r0, #12]
 8002e3a:	f8c2 3016 	str.w	r3, [r2, #22]
 8002e3e:	6903      	ldr	r3, [r0, #16]
 8002e40:	f8c2 301a 	str.w	r3, [r2, #26]
 8002e44:	6943      	ldr	r3, [r0, #20]
 8002e46:	f8c2 301e 	str.w	r3, [r2, #30]
 8002e4a:	6983      	ldr	r3, [r0, #24]
 8002e4c:	f8c2 3022 	str.w	r3, [r2, #34]	@ 0x22
 8002e50:	2312      	movs	r3, #18
 8002e52:	8013      	strh	r3, [r2, #0]
 8002e54:	2001      	movs	r0, #1
 8002e56:	bd10      	pop	{r4, pc}
 8002e58:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8002e5c:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8002e60:	6901      	ldr	r1, [r0, #16]
 8002e62:	6943      	ldr	r3, [r0, #20]
 8002e64:	6980      	ldr	r0, [r0, #24]
 8002e66:	f8c2 0022 	str.w	r0, [r2, #34]	@ 0x22
 8002e6a:	f8c2 e012 	str.w	lr, [r2, #18]
 8002e6e:	f8c2 c016 	str.w	ip, [r2, #22]
 8002e72:	f8c2 101a 	str.w	r1, [r2, #26]
 8002e76:	f8c2 301e 	str.w	r3, [r2, #30]
 8002e7a:	e7e9      	b.n	8002e50 <PIL_RA_coreMessageHandler+0x5c>
 8002e7c:	007e0001 	.word	0x007e0001
 8002e80:	04000046 	.word	0x04000046
 8002e84:	0500001e 	.word	0x0500001e

08002e88 <PIL_RA_init>:
 8002e88:	f5b1 7ff6 	cmp.w	r1, #492	@ 0x1ec
 8002e8c:	d31f      	bcc.n	8002ece <PIL_RA_init+0x46>
 8002e8e:	b510      	push	{r4, lr}
 8002e90:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8002e94:	4604      	mov	r4, r0
 8002e96:	30c0      	adds	r0, #192	@ 0xc0
 8002e98:	f000 fc9a 	bl	80037d0 <PIL_SLINK_init>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ea2:	490c      	ldr	r1, [pc, #48]	@ (8002ed4 <PIL_RA_init+0x4c>)
 8002ea4:	60a3      	str	r3, [r4, #8]
 8002ea6:	60e3      	str	r3, [r4, #12]
 8002ea8:	6123      	str	r3, [r4, #16]
 8002eaa:	6163      	str	r3, [r4, #20]
 8002eac:	61a3      	str	r3, [r4, #24]
 8002eae:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8002eb0:	f8c4 01e8 	str.w	r0, [r4, #488]	@ 0x1e8
 8002eb4:	e9c4 3300 	strd	r3, r3, [r4]
 8002eb8:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8002ebc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ebe:	61e1      	str	r1, [r4, #28]
 8002ec0:	62e4      	str	r4, [r4, #44]	@ 0x2c
 8002ec2:	f8a4 3080 	strh.w	r3, [r4, #128]	@ 0x80
 8002ec6:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 8002eca:	4620      	mov	r0, r4
 8002ecc:	bd10      	pop	{r4, pc}
 8002ece:	2000      	movs	r0, #0
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	08002df5 	.word	0x08002df5

08002ed8 <PIL_RA_setGuid>:
 8002ed8:	ea41 0300 	orr.w	r3, r1, r0
 8002edc:	075b      	lsls	r3, r3, #29
 8002ede:	d108      	bne.n	8002ef2 <PIL_RA_setGuid+0x1a>
 8002ee0:	1c8b      	adds	r3, r1, #2
 8002ee2:	1ac3      	subs	r3, r0, r3
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d904      	bls.n	8002ef2 <PIL_RA_setGuid+0x1a>
 8002ee8:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002eec:	e9c0 2300 	strd	r2, r3, [r0]
 8002ef0:	4770      	bx	lr
 8002ef2:	880b      	ldrh	r3, [r1, #0]
 8002ef4:	8003      	strh	r3, [r0, #0]
 8002ef6:	884b      	ldrh	r3, [r1, #2]
 8002ef8:	8043      	strh	r3, [r0, #2]
 8002efa:	888b      	ldrh	r3, [r1, #4]
 8002efc:	8083      	strh	r3, [r0, #4]
 8002efe:	88cb      	ldrh	r3, [r1, #6]
 8002f00:	80c3      	strh	r3, [r0, #6]
 8002f02:	4770      	bx	lr

08002f04 <PIL_RA_setChecksum>:
 8002f04:	1c8a      	adds	r2, r1, #2
 8002f06:	f100 0308 	add.w	r3, r0, #8
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d00a      	beq.n	8002f24 <PIL_RA_setChecksum+0x20>
 8002f0e:	680b      	ldr	r3, [r1, #0]
 8002f10:	6083      	str	r3, [r0, #8]
 8002f12:	684b      	ldr	r3, [r1, #4]
 8002f14:	60c3      	str	r3, [r0, #12]
 8002f16:	688b      	ldr	r3, [r1, #8]
 8002f18:	6103      	str	r3, [r0, #16]
 8002f1a:	68cb      	ldr	r3, [r1, #12]
 8002f1c:	6143      	str	r3, [r0, #20]
 8002f1e:	690b      	ldr	r3, [r1, #16]
 8002f20:	6183      	str	r3, [r0, #24]
 8002f22:	4770      	bx	lr
 8002f24:	880b      	ldrh	r3, [r1, #0]
 8002f26:	8103      	strh	r3, [r0, #8]
 8002f28:	884b      	ldrh	r3, [r1, #2]
 8002f2a:	8143      	strh	r3, [r0, #10]
 8002f2c:	888b      	ldrh	r3, [r1, #4]
 8002f2e:	8183      	strh	r3, [r0, #12]
 8002f30:	88cb      	ldrh	r3, [r1, #6]
 8002f32:	81c3      	strh	r3, [r0, #14]
 8002f34:	890b      	ldrh	r3, [r1, #8]
 8002f36:	8203      	strh	r3, [r0, #16]
 8002f38:	894b      	ldrh	r3, [r1, #10]
 8002f3a:	8243      	strh	r3, [r0, #18]
 8002f3c:	898b      	ldrh	r3, [r1, #12]
 8002f3e:	8283      	strh	r3, [r0, #20]
 8002f40:	89cb      	ldrh	r3, [r1, #14]
 8002f42:	82c3      	strh	r3, [r0, #22]
 8002f44:	8a0b      	ldrh	r3, [r1, #16]
 8002f46:	8303      	strh	r3, [r0, #24]
 8002f48:	8a4b      	ldrh	r3, [r1, #18]
 8002f4a:	8343      	strh	r3, [r0, #26]
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop

08002f50 <PIL_RA_registerService>:
 8002f50:	f9b0 303e 	ldrsh.w	r3, [r0, #62]	@ 0x3e
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	dc07      	bgt.n	8002f68 <PIL_RA_registerService+0x18>
 8002f58:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f8cc 101c 	str.w	r1, [ip, #28]
 8002f62:	f8cc 202c 	str.w	r2, [ip, #44]	@ 0x2c
 8002f66:	87c3      	strh	r3, [r0, #62]	@ 0x3e
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop

08002f6c <PIL_RA_pollLinkRsp>:
 8002f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f70:	4605      	mov	r5, r0
 8002f72:	f8d0 01e8 	ldr.w	r0, [r0, #488]	@ 0x1e8
 8002f76:	f000 fc6f 	bl	8003858 <PIL_SLINK_outBufIsEmpty>
 8002f7a:	b1c0      	cbz	r0, 8002fae <PIL_RA_pollLinkRsp+0x42>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	4606      	mov	r6, r0
 8002f80:	f8a5 3040 	strh.w	r3, [r5, #64]	@ 0x40
 8002f84:	f885 307e 	strb.w	r3, [r5, #126]	@ 0x7e
 8002f88:	f105 041c 	add.w	r4, r5, #28
 8002f8c:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
 8002f90:	f105 0740 	add.w	r7, r5, #64	@ 0x40
 8002f94:	f854 3b04 	ldr.w	r3, [r4], #4
 8002f98:	463a      	mov	r2, r7
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	b113      	cbz	r3, 8002fa4 <PIL_RA_pollLinkRsp+0x38>
 8002f9e:	68e0      	ldr	r0, [r4, #12]
 8002fa0:	4798      	blx	r3
 8002fa2:	b908      	cbnz	r0, 8002fa8 <PIL_RA_pollLinkRsp+0x3c>
 8002fa4:	4544      	cmp	r4, r8
 8002fa6:	d1f5      	bne.n	8002f94 <PIL_RA_pollLinkRsp+0x28>
 8002fa8:	f8b5 3040 	ldrh.w	r3, [r5, #64]	@ 0x40
 8002fac:	b91b      	cbnz	r3, 8002fb6 <PIL_RA_pollLinkRsp+0x4a>
 8002fae:	2600      	movs	r6, #0
 8002fb0:	4630      	mov	r0, r6
 8002fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fb6:	f8d5 01e8 	ldr.w	r0, [r5, #488]	@ 0x1e8
 8002fba:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
 8002fbe:	f105 0140 	add.w	r1, r5, #64	@ 0x40
 8002fc2:	f000 fc4d 	bl	8003860 <PIL_SLINK_send>
 8002fc6:	4630      	mov	r0, r6
 8002fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002fcc <PIL_RA_pollLinkReq>:
 8002fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fd0:	4606      	mov	r6, r0
 8002fd2:	2500      	movs	r5, #0
 8002fd4:	f826 5f80 	strh.w	r5, [r6, #128]!
 8002fd8:	b082      	sub	sp, #8
 8002fda:	4604      	mov	r4, r0
 8002fdc:	f10d 0207 	add.w	r2, sp, #7
 8002fe0:	f8d0 01e8 	ldr.w	r0, [r0, #488]	@ 0x1e8
 8002fe4:	f88d 5007 	strb.w	r5, [sp, #7]
 8002fe8:	4631      	mov	r1, r6
 8002fea:	f000 fdb3 	bl	8003b54 <PIL_SLINK_receive>
 8002fee:	f8b4 0080 	ldrh.w	r0, [r4, #128]	@ 0x80
 8002ff2:	b128      	cbz	r0, 8003000 <PIL_RA_pollLinkReq+0x34>
 8002ff4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002ff8:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d003      	beq.n	8003006 <PIL_RA_pollLinkReq+0x3a>
 8002ffe:	4628      	mov	r0, r5
 8003000:	b002      	add	sp, #8
 8003002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003006:	f8a4 5040 	strh.w	r5, [r4, #64]	@ 0x40
 800300a:	f884 507e 	strb.w	r5, [r4, #126]	@ 0x7e
 800300e:	f104 0740 	add.w	r7, r4, #64	@ 0x40
 8003012:	f104 051c 	add.w	r5, r4, #28
 8003016:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800301a:	f855 3b04 	ldr.w	r3, [r5], #4
 800301e:	463a      	mov	r2, r7
 8003020:	b11b      	cbz	r3, 800302a <PIL_RA_pollLinkReq+0x5e>
 8003022:	68e8      	ldr	r0, [r5, #12]
 8003024:	4631      	mov	r1, r6
 8003026:	4798      	blx	r3
 8003028:	b908      	cbnz	r0, 800302e <PIL_RA_pollLinkReq+0x62>
 800302a:	4545      	cmp	r5, r8
 800302c:	d1f5      	bne.n	800301a <PIL_RA_pollLinkReq+0x4e>
 800302e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 8003032:	b91b      	cbnz	r3, 800303c <PIL_RA_pollLinkReq+0x70>
 8003034:	2001      	movs	r0, #1
 8003036:	b002      	add	sp, #8
 8003038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800303c:	f8d4 01e8 	ldr.w	r0, [r4, #488]	@ 0x1e8
 8003040:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003044:	4639      	mov	r1, r7
 8003046:	f000 fc0b 	bl	8003860 <PIL_SLINK_send>
 800304a:	2001      	movs	r0, #1
 800304c:	e7d8      	b.n	8003000 <PIL_RA_pollLinkReq+0x34>
 800304e:	bf00      	nop

08003050 <PIL_SCOPE_compareTrigger>:
 8003050:	b510      	push	{r4, lr}
 8003052:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003056:	3b03      	subs	r3, #3
 8003058:	4604      	mov	r4, r0
 800305a:	2b05      	cmp	r3, #5
 800305c:	d843      	bhi.n	80030e6 <PIL_SCOPE_compareTrigger+0x96>
 800305e:	e8df f003 	tbb	[pc, r3]
 8003062:	1b13      	.short	0x1b13
 8003064:	03352d25 	.word	0x03352d25
 8003068:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800306a:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800306e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003072:	f7fd f949 	bl	8000308 <__aeabi_dcmpge>
 8003076:	3800      	subs	r0, #0
 8003078:	bf18      	it	ne
 800307a:	2001      	movne	r0, #1
 800307c:	7ca3      	ldrb	r3, [r4, #18]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d001      	beq.n	8003086 <PIL_SCOPE_compareTrigger+0x36>
 8003082:	f080 0001 	eor.w	r0, r0, #1
 8003086:	bd10      	pop	{r4, pc}
 8003088:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800308a:	8b03      	ldrh	r3, [r0, #24]
 800308c:	8810      	ldrh	r0, [r2, #0]
 800308e:	4298      	cmp	r0, r3
 8003090:	bf34      	ite	cc
 8003092:	2000      	movcc	r0, #0
 8003094:	2001      	movcs	r0, #1
 8003096:	e7f1      	b.n	800307c <PIL_SCOPE_compareTrigger+0x2c>
 8003098:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800309a:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 800309e:	f9b2 0000 	ldrsh.w	r0, [r2]
 80030a2:	4298      	cmp	r0, r3
 80030a4:	bfb4      	ite	lt
 80030a6:	2000      	movlt	r0, #0
 80030a8:	2001      	movge	r0, #1
 80030aa:	e7e7      	b.n	800307c <PIL_SCOPE_compareTrigger+0x2c>
 80030ac:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80030ae:	6983      	ldr	r3, [r0, #24]
 80030b0:	6810      	ldr	r0, [r2, #0]
 80030b2:	4298      	cmp	r0, r3
 80030b4:	bf34      	ite	cc
 80030b6:	2000      	movcc	r0, #0
 80030b8:	2001      	movcs	r0, #1
 80030ba:	e7df      	b.n	800307c <PIL_SCOPE_compareTrigger+0x2c>
 80030bc:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80030be:	6983      	ldr	r3, [r0, #24]
 80030c0:	6810      	ldr	r0, [r2, #0]
 80030c2:	4298      	cmp	r0, r3
 80030c4:	bfb4      	ite	lt
 80030c6:	2000      	movlt	r0, #0
 80030c8:	2001      	movge	r0, #1
 80030ca:	e7d7      	b.n	800307c <PIL_SCOPE_compareTrigger+0x2c>
 80030cc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80030ce:	edd0 7a06 	vldr	s15, [r0, #24]
 80030d2:	ed93 7a00 	vldr	s14, [r3]
 80030d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030de:	bfac      	ite	ge
 80030e0:	2001      	movge	r0, #1
 80030e2:	2000      	movlt	r0, #0
 80030e4:	e7ca      	b.n	800307c <PIL_SCOPE_compareTrigger+0x2c>
 80030e6:	2000      	movs	r0, #0
 80030e8:	bd10      	pop	{r4, pc}
 80030ea:	bf00      	nop

080030ec <PIL_SCOPE_init>:
 80030ec:	294f      	cmp	r1, #79	@ 0x4f
 80030ee:	d91d      	bls.n	800312c <PIL_SCOPE_init+0x40>
 80030f0:	b538      	push	{r3, r4, r5, lr}
 80030f2:	4604      	mov	r4, r0
 80030f4:	2500      	movs	r5, #0
 80030f6:	8205      	strh	r5, [r0, #16]
 80030f8:	7205      	strb	r5, [r0, #8]
 80030fa:	f880 5044 	strb.w	r5, [r0, #68]	@ 0x44
 80030fe:	6485      	str	r5, [r0, #72]	@ 0x48
 8003100:	f000 fec2 	bl	8003e88 <PIL_DisableInt>
 8003104:	2201      	movs	r2, #1
 8003106:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003108:	7222      	strb	r2, [r4, #8]
 800310a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800310e:	80e5      	strh	r5, [r4, #6]
 8003110:	f8c4 5036 	str.w	r5, [r4, #54]	@ 0x36
 8003114:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8003118:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
 800311c:	f8a4 2040 	strh.w	r2, [r4, #64]	@ 0x40
 8003120:	b103      	cbz	r3, 8003124 <PIL_SCOPE_init+0x38>
 8003122:	801d      	strh	r5, [r3, #0]
 8003124:	f000 feb4 	bl	8003e90 <PIL_RestoreInt>
 8003128:	4620      	mov	r0, r4
 800312a:	bd38      	pop	{r3, r4, r5, pc}
 800312c:	2000      	movs	r0, #0
 800312e:	4770      	bx	lr

08003130 <PIL_SCOPE_setBuffer>:
 8003130:	b410      	push	{r4}
 8003132:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
 8003136:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800313a:	60c4      	str	r4, [r0, #12]
 800313c:	8083      	strh	r3, [r0, #4]
 800313e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003142:	6001      	str	r1, [r0, #0]
 8003144:	8202      	strh	r2, [r0, #16]
 8003146:	4770      	bx	lr

08003148 <PIL_SCOPE_sample_p>:
 8003148:	8a03      	ldrh	r3, [r0, #16]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d043      	beq.n	80031d6 <PIL_SCOPE_sample_p+0x8e>
 800314e:	b570      	push	{r4, r5, r6, lr}
 8003150:	7a03      	ldrb	r3, [r0, #8]
 8003152:	1e9a      	subs	r2, r3, #2
 8003154:	2a01      	cmp	r2, #1
 8003156:	4604      	mov	r4, r0
 8003158:	d909      	bls.n	800316e <PIL_SCOPE_sample_p+0x26>
 800315a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800315c:	b132      	cbz	r2, 800316c <PIL_SCOPE_sample_p+0x24>
 800315e:	7a23      	ldrb	r3, [r4, #8]
 8003160:	f1a3 0303 	sub.w	r3, r3, #3
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	8013      	strh	r3, [r2, #0]
 800316c:	bd70      	pop	{r4, r5, r6, pc}
 800316e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8003170:	3a01      	subs	r2, #1
 8003172:	b292      	uxth	r2, r2
 8003174:	8582      	strh	r2, [r0, #44]	@ 0x2c
 8003176:	2a00      	cmp	r2, #0
 8003178:	d1f8      	bne.n	800316c <PIL_SCOPE_sample_p+0x24>
 800317a:	8d42      	ldrh	r2, [r0, #42]	@ 0x2a
 800317c:	8582      	strh	r2, [r0, #44]	@ 0x2c
 800317e:	2b02      	cmp	r3, #2
 8003180:	d02a      	beq.n	80031d8 <PIL_SCOPE_sample_p+0x90>
 8003182:	2b03      	cmp	r3, #3
 8003184:	d039      	beq.n	80031fa <PIL_SCOPE_sample_p+0xb2>
 8003186:	88e3      	ldrh	r3, [r4, #6]
 8003188:	b193      	cbz	r3, 80031b0 <PIL_SCOPE_sample_p+0x68>
 800318a:	6826      	ldr	r6, [r4, #0]
 800318c:	68e5      	ldr	r5, [r4, #12]
 800318e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003190:	2200      	movs	r2, #0
 8003192:	b291      	uxth	r1, r2
 8003194:	3201      	adds	r2, #1
 8003196:	f856 0021 	ldr.w	r0, [r6, r1, lsl #2]
 800319a:	8800      	ldrh	r0, [r0, #0]
 800319c:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
 80031a0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80031a2:	88e0      	ldrh	r0, [r4, #6]
 80031a4:	b291      	uxth	r1, r2
 80031a6:	3301      	adds	r3, #1
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	4288      	cmp	r0, r1
 80031ac:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80031ae:	d8f0      	bhi.n	8003192 <PIL_SCOPE_sample_p+0x4a>
 80031b0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80031b2:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
 80031b4:	3301      	adds	r3, #1
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	429a      	cmp	r2, r3
 80031ba:	8723      	strh	r3, [r4, #56]	@ 0x38
 80031bc:	d1cd      	bne.n	800315a <PIL_SCOPE_sample_p+0x12>
 80031be:	2200      	movs	r2, #0
 80031c0:	2301      	movs	r3, #1
 80031c2:	f8c4 2036 	str.w	r2, [r4, #54]	@ 0x36
 80031c6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
 80031ca:	4620      	mov	r0, r4
 80031cc:	f7ff ff40 	bl	8003050 <PIL_SCOPE_compareTrigger>
 80031d0:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
 80031d4:	e7c1      	b.n	800315a <PIL_SCOPE_sample_p+0x12>
 80031d6:	4770      	bx	lr
 80031d8:	7c83      	ldrb	r3, [r0, #18]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0d3      	beq.n	8003186 <PIL_SCOPE_sample_p+0x3e>
 80031de:	f890 2035 	ldrb.w	r2, [r0, #53]	@ 0x35
 80031e2:	2a00      	cmp	r2, #0
 80031e4:	d0cf      	beq.n	8003186 <PIL_SCOPE_sample_p+0x3e>
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d019      	beq.n	800321e <PIL_SCOPE_sample_p+0xd6>
 80031ea:	f7ff ff31 	bl	8003050 <PIL_SCOPE_compareTrigger>
 80031ee:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80031f2:	b98b      	cbnz	r3, 8003218 <PIL_SCOPE_sample_p+0xd0>
 80031f4:	b180      	cbz	r0, 8003218 <PIL_SCOPE_sample_p+0xd0>
 80031f6:	2303      	movs	r3, #3
 80031f8:	7223      	strb	r3, [r4, #8]
 80031fa:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 80031fe:	2b00      	cmp	r3, #0
 8003200:	dd02      	ble.n	8003208 <PIL_SCOPE_sample_p+0xc0>
 8003202:	3b01      	subs	r3, #1
 8003204:	8623      	strh	r3, [r4, #48]	@ 0x30
 8003206:	e7be      	b.n	8003186 <PIL_SCOPE_sample_p+0x3e>
 8003208:	2204      	movs	r2, #4
 800320a:	2301      	movs	r3, #1
 800320c:	7222      	strb	r2, [r4, #8]
 800320e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8003212:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
 8003216:	bd70      	pop	{r4, r5, r6, pc}
 8003218:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
 800321c:	e7b3      	b.n	8003186 <PIL_SCOPE_sample_p+0x3e>
 800321e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003222:	3b03      	subs	r3, #3
 8003224:	2b05      	cmp	r3, #5
 8003226:	d8ae      	bhi.n	8003186 <PIL_SCOPE_sample_p+0x3e>
 8003228:	e8df f003 	tbb	[pc, r3]
 800322c:	1f28313c 	.word	0x1f28313c
 8003230:	0310      	.short	0x0310
 8003232:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8003234:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8003238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800323c:	f7fd f846 	bl	80002cc <__aeabi_dcmpeq>
 8003240:	3800      	subs	r0, #0
 8003242:	bf18      	it	ne
 8003244:	2001      	movne	r0, #1
 8003246:	2800      	cmp	r0, #0
 8003248:	d1d5      	bne.n	80031f6 <PIL_SCOPE_sample_p+0xae>
 800324a:	e79c      	b.n	8003186 <PIL_SCOPE_sample_p+0x3e>
 800324c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800324e:	edd0 7a06 	vldr	s15, [r0, #24]
 8003252:	ed93 7a00 	vldr	s14, [r3]
 8003256:	eeb4 7a67 	vcmp.f32	s14, s15
 800325a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325e:	bf0c      	ite	eq
 8003260:	2001      	moveq	r0, #1
 8003262:	2000      	movne	r0, #0
 8003264:	2800      	cmp	r0, #0
 8003266:	d1c6      	bne.n	80031f6 <PIL_SCOPE_sample_p+0xae>
 8003268:	e78d      	b.n	8003186 <PIL_SCOPE_sample_p+0x3e>
 800326a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800326c:	6983      	ldr	r3, [r0, #24]
 800326e:	6810      	ldr	r0, [r2, #0]
 8003270:	1ac3      	subs	r3, r0, r3
 8003272:	4258      	negs	r0, r3
 8003274:	4158      	adcs	r0, r3
 8003276:	2800      	cmp	r0, #0
 8003278:	d1bd      	bne.n	80031f6 <PIL_SCOPE_sample_p+0xae>
 800327a:	e784      	b.n	8003186 <PIL_SCOPE_sample_p+0x3e>
 800327c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800327e:	6982      	ldr	r2, [r0, #24]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	1a9a      	subs	r2, r3, r2
 8003284:	4253      	negs	r3, r2
 8003286:	4153      	adcs	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1b4      	bne.n	80031f6 <PIL_SCOPE_sample_p+0xae>
 800328c:	e77b      	b.n	8003186 <PIL_SCOPE_sample_p+0x3e>
 800328e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003290:	f9b0 2018 	ldrsh.w	r2, [r0, #24]
 8003294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003298:	1a99      	subs	r1, r3, r2
 800329a:	424b      	negs	r3, r1
 800329c:	414b      	adcs	r3, r1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1a9      	bne.n	80031f6 <PIL_SCOPE_sample_p+0xae>
 80032a2:	e770      	b.n	8003186 <PIL_SCOPE_sample_p+0x3e>
 80032a4:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80032a6:	8b03      	ldrh	r3, [r0, #24]
 80032a8:	8812      	ldrh	r2, [r2, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d0a3      	beq.n	80031f6 <PIL_SCOPE_sample_p+0xae>
 80032ae:	e76a      	b.n	8003186 <PIL_SCOPE_sample_p+0x3e>

080032b0 <PIL_SCOPE_messageHandler>:
 80032b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032b4:	4604      	mov	r4, r0
 80032b6:	b083      	sub	sp, #12
 80032b8:	4691      	mov	r9, r2
 80032ba:	b199      	cbz	r1, 80032e4 <PIL_SCOPE_messageHandler+0x34>
 80032bc:	884b      	ldrh	r3, [r1, #2]
 80032be:	2b31      	cmp	r3, #49	@ 0x31
 80032c0:	d003      	beq.n	80032ca <PIL_SCOPE_messageHandler+0x1a>
 80032c2:	2000      	movs	r0, #0
 80032c4:	b003      	add	sp, #12
 80032c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032ca:	888b      	ldrh	r3, [r1, #4]
 80032cc:	2b0f      	cmp	r3, #15
 80032ce:	d845      	bhi.n	800335c <PIL_SCOPE_messageHandler+0xac>
 80032d0:	e8df f003 	tbb	[pc, r3]
 80032d4:	a76e7c60 	.word	0xa76e7c60
 80032d8:	44444444 	.word	0x44444444
 80032dc:	44444444 	.word	0x44444444
 80032e0:	b4874444 	.word	0xb4874444
 80032e4:	f890 003a 	ldrb.w	r0, [r0, #58]	@ 0x3a
 80032e8:	2800      	cmp	r0, #0
 80032ea:	d147      	bne.n	800337c <PIL_SCOPE_messageHandler+0xcc>
 80032ec:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f340 80f8 	ble.w	80034e6 <PIL_SCOPE_messageHandler+0x236>
 80032f6:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 80032fa:	f8b4 e042 	ldrh.w	lr, [r4, #66]	@ 0x42
 80032fe:	3b01      	subs	r3, #1
 8003300:	f10c 0003 	add.w	r0, ip, #3
 8003304:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 8003308:	b280      	uxth	r0, r0
 800330a:	2371      	movs	r3, #113	@ 0x71
 800330c:	8053      	strh	r3, [r2, #2]
 800330e:	2803      	cmp	r0, #3
 8003310:	f04f 0305 	mov.w	r3, #5
 8003314:	8010      	strh	r0, [r2, #0]
 8003316:	f8a2 e006 	strh.w	lr, [r2, #6]
 800331a:	8093      	strh	r3, [r2, #4]
 800331c:	d90e      	bls.n	800333c <PIL_SCOPE_messageHandler+0x8c>
 800331e:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8003320:	68e5      	ldr	r5, [r4, #12]
 8003322:	449c      	add	ip, r3
 8003324:	3206      	adds	r2, #6
 8003326:	fa1f fc8c 	uxth.w	ip, ip
 800332a:	1c59      	adds	r1, r3, #1
 800332c:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8003330:	f822 3f02 	strh.w	r3, [r2, #2]!
 8003334:	b28b      	uxth	r3, r1
 8003336:	459c      	cmp	ip, r3
 8003338:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 800333a:	d1f6      	bne.n	800332a <PIL_SCOPE_messageHandler+0x7a>
 800333c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800333e:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
 8003340:	3301      	adds	r3, #1
 8003342:	b29b      	uxth	r3, r3
 8003344:	f10e 0e01 	add.w	lr, lr, #1
 8003348:	429a      	cmp	r2, r3
 800334a:	f8a4 e042 	strh.w	lr, [r4, #66]	@ 0x42
 800334e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8003350:	f000 811c 	beq.w	800358c <PIL_SCOPE_messageHandler+0x2dc>
 8003354:	3800      	subs	r0, #0
 8003356:	bf18      	it	ne
 8003358:	2001      	movne	r0, #1
 800335a:	e7b3      	b.n	80032c4 <PIL_SCOPE_messageHandler+0x14>
 800335c:	237f      	movs	r3, #127	@ 0x7f
 800335e:	f8a9 3002 	strh.w	r3, [r9, #2]
 8003362:	8848      	ldrh	r0, [r1, #2]
 8003364:	2112      	movs	r1, #18
 8003366:	2303      	movs	r3, #3
 8003368:	f8a9 0004 	strh.w	r0, [r9, #4]
 800336c:	2001      	movs	r0, #1
 800336e:	f8a9 1006 	strh.w	r1, [r9, #6]
 8003372:	f8a9 3000 	strh.w	r3, [r9]
 8003376:	b003      	add	sp, #12
 8003378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800337c:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 8003380:	f884 103a 	strb.w	r1, [r4, #58]	@ 0x3a
 8003384:	2b00      	cmp	r3, #0
 8003386:	f040 8086 	bne.w	8003496 <PIL_SCOPE_messageHandler+0x1e6>
 800338a:	8810      	ldrh	r0, [r2, #0]
 800338c:	3800      	subs	r0, #0
 800338e:	bf18      	it	ne
 8003390:	2001      	movne	r0, #1
 8003392:	e797      	b.n	80032c4 <PIL_SCOPE_messageHandler+0x14>
 8003394:	8883      	ldrh	r3, [r0, #4]
 8003396:	f8a9 3006 	strh.w	r3, [r9, #6]
 800339a:	2100      	movs	r1, #0
 800339c:	f8a9 1004 	strh.w	r1, [r9, #4]
 80033a0:	8a01      	ldrh	r1, [r0, #16]
 80033a2:	4ba8      	ldr	r3, [pc, #672]	@ (8003644 <PIL_SCOPE_messageHandler+0x394>)
 80033a4:	f8a9 1008 	strh.w	r1, [r9, #8]
 80033a8:	f8c9 3000 	str.w	r3, [r9]
 80033ac:	2001      	movs	r0, #1
 80033ae:	e789      	b.n	80032c4 <PIL_SCOPE_messageHandler+0x14>
 80033b0:	88cb      	ldrh	r3, [r1, #6]
 80033b2:	b12b      	cbz	r3, 80033c0 <PIL_SCOPE_messageHandler+0x110>
 80033b4:	88c5      	ldrh	r5, [r0, #6]
 80033b6:	b11d      	cbz	r5, 80033c0 <PIL_SCOPE_messageHandler+0x110>
 80033b8:	7a00      	ldrb	r0, [r0, #8]
 80033ba:	2801      	cmp	r0, #1
 80033bc:	f000 80f5 	beq.w	80035aa <PIL_SCOPE_messageHandler+0x2fa>
 80033c0:	237f      	movs	r3, #127	@ 0x7f
 80033c2:	f8a9 3002 	strh.w	r3, [r9, #2]
 80033c6:	8848      	ldrh	r0, [r1, #2]
 80033c8:	2122      	movs	r1, #34	@ 0x22
 80033ca:	e7cc      	b.n	8003366 <PIL_SCOPE_messageHandler+0xb6>
 80033cc:	88cb      	ldrh	r3, [r1, #6]
 80033ce:	b2d8      	uxtb	r0, r3
 80033d0:	2802      	cmp	r0, #2
 80033d2:	f000 8093 	beq.w	80034fc <PIL_SCOPE_messageHandler+0x24c>
 80033d6:	237f      	movs	r3, #127	@ 0x7f
 80033d8:	f8a9 3002 	strh.w	r3, [r9, #2]
 80033dc:	8848      	ldrh	r0, [r1, #2]
 80033de:	2113      	movs	r1, #19
 80033e0:	e7c1      	b.n	8003366 <PIL_SCOPE_messageHandler+0xb6>
 80033e2:	88c3      	ldrh	r3, [r0, #6]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0eb      	beq.n	80033c0 <PIL_SCOPE_messageHandler+0x110>
 80033e8:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0e8      	beq.n	80033c0 <PIL_SCOPE_messageHandler+0x110>
 80033ee:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 80033f0:	88ce      	ldrh	r6, [r1, #6]
 80033f2:	8603      	strh	r3, [r0, #48]	@ 0x30
 80033f4:	2501      	movs	r5, #1
 80033f6:	2300      	movs	r3, #0
 80033f8:	8683      	strh	r3, [r0, #52]	@ 0x34
 80033fa:	f8c0 3036 	str.w	r3, [r0, #54]	@ 0x36
 80033fe:	8585      	strh	r5, [r0, #44]	@ 0x2c
 8003400:	f7ff fe26 	bl	8003050 <PIL_SCOPE_compareTrigger>
 8003404:	2e00      	cmp	r6, #0
 8003406:	bf0c      	ite	eq
 8003408:	2302      	moveq	r3, #2
 800340a:	2303      	movne	r3, #3
 800340c:	7223      	strb	r3, [r4, #8]
 800340e:	210e      	movs	r1, #14
 8003410:	4b8d      	ldr	r3, [pc, #564]	@ (8003648 <PIL_SCOPE_messageHandler+0x398>)
 8003412:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
 8003416:	f8a9 1004 	strh.w	r1, [r9, #4]
 800341a:	f8c9 3000 	str.w	r3, [r9]
 800341e:	4628      	mov	r0, r5
 8003420:	e750      	b.n	80032c4 <PIL_SCOPE_messageHandler+0x14>
 8003422:	7a03      	ldrb	r3, [r0, #8]
 8003424:	2b02      	cmp	r3, #2
 8003426:	bf04      	itt	eq
 8003428:	2303      	moveq	r3, #3
 800342a:	7203      	strbeq	r3, [r0, #8]
 800342c:	2103      	movs	r1, #3
 800342e:	4b86      	ldr	r3, [pc, #536]	@ (8003648 <PIL_SCOPE_messageHandler+0x398>)
 8003430:	f8a9 1004 	strh.w	r1, [r9, #4]
 8003434:	f8c9 3000 	str.w	r3, [r9]
 8003438:	2001      	movs	r0, #1
 800343a:	e743      	b.n	80032c4 <PIL_SCOPE_messageHandler+0x14>
 800343c:	9101      	str	r1, [sp, #4]
 800343e:	f000 fd23 	bl	8003e88 <PIL_DisableInt>
 8003442:	f04f 0c01 	mov.w	ip, #1
 8003446:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8003448:	f884 c008 	strb.w	ip, [r4, #8]
 800344c:	2300      	movs	r3, #0
 800344e:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8003452:	9901      	ldr	r1, [sp, #4]
 8003454:	80e3      	strh	r3, [r4, #6]
 8003456:	f8c4 3036 	str.w	r3, [r4, #54]	@ 0x36
 800345a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800345e:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
 8003462:	f8a4 c040 	strh.w	ip, [r4, #64]	@ 0x40
 8003466:	b105      	cbz	r5, 800346a <PIL_SCOPE_messageHandler+0x1ba>
 8003468:	802b      	strh	r3, [r5, #0]
 800346a:	9101      	str	r1, [sp, #4]
 800346c:	f000 fd10 	bl	8003e90 <PIL_RestoreInt>
 8003470:	4b75      	ldr	r3, [pc, #468]	@ (8003648 <PIL_SCOPE_messageHandler+0x398>)
 8003472:	9901      	ldr	r1, [sp, #4]
 8003474:	f8c9 3000 	str.w	r3, [r9]
 8003478:	880b      	ldrh	r3, [r1, #0]
 800347a:	2000      	movs	r0, #0
 800347c:	2b02      	cmp	r3, #2
 800347e:	f8a9 0004 	strh.w	r0, [r9, #4]
 8003482:	d903      	bls.n	800348c <PIL_SCOPE_messageHandler+0x1dc>
 8003484:	88c8      	ldrh	r0, [r1, #6]
 8003486:	2801      	cmp	r0, #1
 8003488:	f000 808c 	beq.w	80035a4 <PIL_SCOPE_messageHandler+0x2f4>
 800348c:	2300      	movs	r3, #0
 800348e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003492:	2001      	movs	r0, #1
 8003494:	e716      	b.n	80032c4 <PIL_SCOPE_messageHandler+0x14>
 8003496:	f894 1035 	ldrb.w	r1, [r4, #53]	@ 0x35
 800349a:	2900      	cmp	r1, #0
 800349c:	d06f      	beq.n	800357e <PIL_SCOPE_messageHandler+0x2ce>
 800349e:	8de5      	ldrh	r5, [r4, #46]	@ 0x2e
 80034a0:	f8d4 0036 	ldr.w	r0, [r4, #54]	@ 0x36
 80034a4:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80034a6:	f8a4 5040 	strh.w	r5, [r4, #64]	@ 0x40
 80034aa:	63e0      	str	r0, [r4, #60]	@ 0x3c
 80034ac:	8e60      	ldrh	r0, [r4, #50]	@ 0x32
 80034ae:	4e67      	ldr	r6, [pc, #412]	@ (800364c <PIL_SCOPE_messageHandler+0x39c>)
 80034b0:	1b40      	subs	r0, r0, r5
 80034b2:	f8a4 0042 	strh.w	r0, [r4, #66]	@ 0x42
 80034b6:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 80034ba:	f8c9 6002 	str.w	r6, [r9, #2]
 80034be:	2800      	cmp	r0, #0
 80034c0:	d058      	beq.n	8003574 <PIL_SCOPE_messageHandler+0x2c4>
 80034c2:	68e3      	ldr	r3, [r4, #12]
 80034c4:	f8a9 3008 	strh.w	r3, [r9, #8]
 80034c8:	0c1b      	lsrs	r3, r3, #16
 80034ca:	f8a9 3006 	strh.w	r3, [r9, #6]
 80034ce:	2306      	movs	r3, #6
 80034d0:	f8a9 3000 	strh.w	r3, [r9]
 80034d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034d8:	f8a9 500a 	strh.w	r5, [r9, #10]
 80034dc:	f8a9 100c 	strh.w	r1, [r9, #12]
 80034e0:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 80034e4:	e6ee      	b.n	80032c4 <PIL_SCOPE_messageHandler+0x14>
 80034e6:	d14f      	bne.n	8003588 <PIL_SCOPE_messageHandler+0x2d8>
 80034e8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80034ec:	4b56      	ldr	r3, [pc, #344]	@ (8003648 <PIL_SCOPE_messageHandler+0x398>)
 80034ee:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40
 80034f2:	2106      	movs	r1, #6
 80034f4:	2001      	movs	r0, #1
 80034f6:	8091      	strh	r1, [r2, #4]
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	e6e3      	b.n	80032c4 <PIL_SCOPE_messageHandler+0x14>
 80034fc:	8908      	ldrh	r0, [r1, #8]
 80034fe:	894d      	ldrh	r5, [r1, #10]
 8003500:	041b      	lsls	r3, r3, #16
 8003502:	ea4f 4c00 	mov.w	ip, r0, lsl #16
 8003506:	7a23      	ldrb	r3, [r4, #8]
 8003508:	eb05 4600 	add.w	r6, r5, r0, lsl #16
 800350c:	bf48      	it	mi
 800350e:	f85c 6005 	ldrmi.w	r6, [ip, r5]
 8003512:	898d      	ldrh	r5, [r1, #12]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d01a      	beq.n	800354e <PIL_SCOPE_messageHandler+0x29e>
 8003518:	9101      	str	r1, [sp, #4]
 800351a:	f000 fcb5 	bl	8003e88 <PIL_DisableInt>
 800351e:	f04f 0c01 	mov.w	ip, #1
 8003522:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
 8003524:	f884 c008 	strb.w	ip, [r4, #8]
 8003528:	2300      	movs	r3, #0
 800352a:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 800352e:	9901      	ldr	r1, [sp, #4]
 8003530:	80e3      	strh	r3, [r4, #6]
 8003532:	f8c4 3036 	str.w	r3, [r4, #54]	@ 0x36
 8003536:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800353a:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
 800353e:	f8a4 c040 	strh.w	ip, [r4, #64]	@ 0x40
 8003542:	b107      	cbz	r7, 8003546 <PIL_SCOPE_messageHandler+0x296>
 8003544:	803b      	strh	r3, [r7, #0]
 8003546:	9101      	str	r1, [sp, #4]
 8003548:	f000 fca2 	bl	8003e90 <PIL_RestoreInt>
 800354c:	9901      	ldr	r1, [sp, #4]
 800354e:	88e3      	ldrh	r3, [r4, #6]
 8003550:	88a0      	ldrh	r0, [r4, #4]
 8003552:	4298      	cmp	r0, r3
 8003554:	d920      	bls.n	8003598 <PIL_SCOPE_messageHandler+0x2e8>
 8003556:	6822      	ldr	r2, [r4, #0]
 8003558:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 800355c:	2501      	movs	r5, #1
 800355e:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
 8003562:	1958      	adds	r0, r3, r5
 8003564:	4b38      	ldr	r3, [pc, #224]	@ (8003648 <PIL_SCOPE_messageHandler+0x398>)
 8003566:	80e0      	strh	r0, [r4, #6]
 8003568:	4628      	mov	r0, r5
 800356a:	f8a9 5004 	strh.w	r5, [r9, #4]
 800356e:	f8c9 3000 	str.w	r3, [r9]
 8003572:	e6a7      	b.n	80032c4 <PIL_SCOPE_messageHandler+0x14>
 8003574:	2102      	movs	r1, #2
 8003576:	f8a9 1000 	strh.w	r1, [r9]
 800357a:	4618      	mov	r0, r3
 800357c:	e6a2      	b.n	80032c4 <PIL_SCOPE_messageHandler+0x14>
 800357e:	8f25      	ldrh	r5, [r4, #56]	@ 0x38
 8003580:	f8a4 5040 	strh.w	r5, [r4, #64]	@ 0x40
 8003584:	63e1      	str	r1, [r4, #60]	@ 0x3c
 8003586:	e791      	b.n	80034ac <PIL_SCOPE_messageHandler+0x1fc>
 8003588:	8010      	strh	r0, [r2, #0]
 800358a:	e69b      	b.n	80032c4 <PIL_SCOPE_messageHandler+0x14>
 800358c:	2300      	movs	r3, #0
 800358e:	1ac0      	subs	r0, r0, r3
 8003590:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8003592:	bf18      	it	ne
 8003594:	2001      	movne	r0, #1
 8003596:	e695      	b.n	80032c4 <PIL_SCOPE_messageHandler+0x14>
 8003598:	237f      	movs	r3, #127	@ 0x7f
 800359a:	f8a9 3002 	strh.w	r3, [r9, #2]
 800359e:	8848      	ldrh	r0, [r1, #2]
 80035a0:	2116      	movs	r1, #22
 80035a2:	e6e0      	b.n	8003366 <PIL_SCOPE_messageHandler+0xb6>
 80035a4:	f884 0044 	strb.w	r0, [r4, #68]	@ 0x44
 80035a8:	e68c      	b.n	80032c4 <PIL_SCOPE_messageHandler+0x14>
 80035aa:	880e      	ldrh	r6, [r1, #0]
 80035ac:	890f      	ldrh	r7, [r1, #8]
 80035ae:	2e04      	cmp	r6, #4
 80035b0:	d824      	bhi.n	80035fc <PIL_SCOPE_messageHandler+0x34c>
 80035b2:	8560      	strh	r0, [r4, #42]	@ 0x2a
 80035b4:	2000      	movs	r0, #0
 80035b6:	74a0      	strb	r0, [r4, #18]
 80035b8:	8a26      	ldrh	r6, [r4, #16]
 80035ba:	fbb6 f0f5 	udiv	r0, r6, r5
 80035be:	4298      	cmp	r0, r3
 80035c0:	85e0      	strh	r0, [r4, #46]	@ 0x2e
 80035c2:	d937      	bls.n	8003634 <PIL_SCOPE_messageHandler+0x384>
 80035c4:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 80035c6:	b23f      	sxth	r7, r7
 80035c8:	2300      	movs	r3, #0
 80035ca:	f367 030f 	bfi	r3, r7, #0, #16
 80035ce:	2100      	movs	r1, #0
 80035d0:	f367 431f 	bfi	r3, r7, #16, #16
 80035d4:	2501      	movs	r5, #1
 80035d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80035d8:	86a1      	strh	r1, [r4, #52]	@ 0x34
 80035da:	f8c4 1036 	str.w	r1, [r4, #54]	@ 0x36
 80035de:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 80035e0:	4620      	mov	r0, r4
 80035e2:	f7ff fd35 	bl	8003050 <PIL_SCOPE_compareTrigger>
 80035e6:	2302      	movs	r3, #2
 80035e8:	4917      	ldr	r1, [pc, #92]	@ (8003648 <PIL_SCOPE_messageHandler+0x398>)
 80035ea:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
 80035ee:	7223      	strb	r3, [r4, #8]
 80035f0:	4628      	mov	r0, r5
 80035f2:	f8a9 3004 	strh.w	r3, [r9, #4]
 80035f6:	f8c9 1000 	str.w	r1, [r9]
 80035fa:	e663      	b.n	80032c4 <PIL_SCOPE_messageHandler+0x14>
 80035fc:	7b0a      	ldrb	r2, [r1, #12]
 80035fe:	f8b1 e00a 	ldrh.w	lr, [r1, #10]
 8003602:	f8a4 e02a 	strh.w	lr, [r4, #42]	@ 0x2a
 8003606:	74a2      	strb	r2, [r4, #18]
 8003608:	2a00      	cmp	r2, #0
 800360a:	d0d5      	beq.n	80035b8 <PIL_SCOPE_messageHandler+0x308>
 800360c:	f891 c00e 	ldrb.w	ip, [r1, #14]
 8003610:	f8b1 800e 	ldrh.w	r8, [r1, #14]
 8003614:	f1bc 0f02 	cmp.w	ip, #2
 8003618:	d01a      	beq.n	8003650 <PIL_SCOPE_messageHandler+0x3a0>
 800361a:	237f      	movs	r3, #127	@ 0x7f
 800361c:	f8a9 3002 	strh.w	r3, [r9, #2]
 8003620:	884c      	ldrh	r4, [r1, #2]
 8003622:	f8a9 4004 	strh.w	r4, [r9, #4]
 8003626:	2113      	movs	r1, #19
 8003628:	2303      	movs	r3, #3
 800362a:	f8a9 1006 	strh.w	r1, [r9, #6]
 800362e:	f8a9 3000 	strh.w	r3, [r9]
 8003632:	e647      	b.n	80032c4 <PIL_SCOPE_messageHandler+0x14>
 8003634:	42b5      	cmp	r5, r6
 8003636:	d9c6      	bls.n	80035c6 <PIL_SCOPE_messageHandler+0x316>
 8003638:	237f      	movs	r3, #127	@ 0x7f
 800363a:	f8a9 3002 	strh.w	r3, [r9, #2]
 800363e:	8848      	ldrh	r0, [r1, #2]
 8003640:	2111      	movs	r1, #17
 8003642:	e690      	b.n	8003366 <PIL_SCOPE_messageHandler+0xb6>
 8003644:	00710004 	.word	0x00710004
 8003648:	00710002 	.word	0x00710002
 800364c:	00040071 	.word	0x00040071
 8003650:	8a08      	ldrh	r0, [r1, #16]
 8003652:	f8b1 c012 	ldrh.w	ip, [r1, #18]
 8003656:	ea4f 4e00 	mov.w	lr, r0, lsl #16
 800365a:	f418 4f00 	tst.w	r8, #32768	@ 0x8000
 800365e:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
 8003662:	bf18      	it	ne
 8003664:	f85e 000c 	ldrne.w	r0, [lr, ip]
 8003668:	6260      	str	r0, [r4, #36]	@ 0x24
 800366a:	7d08      	ldrb	r0, [r1, #20]
 800366c:	f884 0020 	strb.w	r0, [r4, #32]
 8003670:	3803      	subs	r0, #3
 8003672:	2805      	cmp	r0, #5
 8003674:	f63f aeaf 	bhi.w	80033d6 <PIL_SCOPE_messageHandler+0x126>
 8003678:	2e0e      	cmp	r6, #14
 800367a:	f63f aeac 	bhi.w	80033d6 <PIL_SCOPE_messageHandler+0x126>
 800367e:	f104 0c18 	add.w	ip, r4, #24
 8003682:	200a      	movs	r0, #10
 8003684:	4286      	cmp	r6, r0
 8003686:	f100 0001 	add.w	r0, r0, #1
 800368a:	dd95      	ble.n	80035b8 <PIL_SCOPE_messageHandler+0x308>
 800368c:	f831 e010 	ldrh.w	lr, [r1, r0, lsl #1]
 8003690:	f82c eb02 	strh.w	lr, [ip], #2
 8003694:	e7f6      	b.n	8003684 <PIL_SCOPE_messageHandler+0x3d4>
 8003696:	bf00      	nop

08003698 <PIL_SLINK_byteIn>:
 8003698:	f8b0 c048 	ldrh.w	ip, [r0, #72]	@ 0x48
 800369c:	090a      	lsrs	r2, r1, #4
 800369e:	b510      	push	{r4, lr}
 80036a0:	ea82 321c 	eor.w	r2, r2, ip, lsr #12
 80036a4:	4c18      	ldr	r4, [pc, #96]	@ (8003708 <PIL_SLINK_byteIn+0x70>)
 80036a6:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 80036aa:	f890 2046 	ldrb.w	r2, [r0, #70]	@ 0x46
 80036ae:	ea83 130c 	eor.w	r3, r3, ip, lsl #4
 80036b2:	fa1f fc83 	uxth.w	ip, r3
 80036b6:	ea81 3313 	eor.w	r3, r1, r3, lsr #12
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80036c2:	ea83 130c 	eor.w	r3, r3, ip, lsl #4
 80036c6:	f8a0 3048 	strh.w	r3, [r0, #72]	@ 0x48
 80036ca:	1c53      	adds	r3, r2, #1
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b44      	cmp	r3, #68	@ 0x44
 80036d0:	5481      	strb	r1, [r0, r2]
 80036d2:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
 80036d6:	d915      	bls.n	8003704 <PIL_SLINK_byteIn+0x6c>
 80036d8:	2300      	movs	r3, #0
 80036da:	f04f 32ff 	mov.w	r2, #4294967295
 80036de:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
 80036e2:	f8a0 3046 	strh.w	r3, [r0, #70]	@ 0x46
 80036e6:	6482      	str	r2, [r0, #72]	@ 0x48
 80036e8:	f100 04b8 	add.w	r4, r0, #184	@ 0xb8
 80036ec:	21ff      	movs	r1, #255	@ 0xff
 80036ee:	4620      	mov	r0, r4
 80036f0:	f000 feee 	bl	80044d0 <PIL_RBUF_push>
 80036f4:	2800      	cmp	r0, #0
 80036f6:	d0f9      	beq.n	80036ec <PIL_SLINK_byteIn+0x54>
 80036f8:	21fc      	movs	r1, #252	@ 0xfc
 80036fa:	4620      	mov	r0, r4
 80036fc:	f000 fee8 	bl	80044d0 <PIL_RBUF_push>
 8003700:	2800      	cmp	r0, #0
 8003702:	d0f9      	beq.n	80036f8 <PIL_SLINK_byteIn+0x60>
 8003704:	bd10      	pop	{r4, pc}
 8003706:	bf00      	nop
 8003708:	08004668 	.word	0x08004668

0800370c <PIL_SLINK_putInt>:
 800370c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003710:	0a0f      	lsrs	r7, r1, #8
 8003712:	2fff      	cmp	r7, #255	@ 0xff
 8003714:	460c      	mov	r4, r1
 8003716:	4605      	mov	r5, r0
 8003718:	f100 06b8 	add.w	r6, r0, #184	@ 0xb8
 800371c:	d03c      	beq.n	8003798 <PIL_SLINK_putInt+0x8c>
 800371e:	f8b5 104a 	ldrh.w	r1, [r5, #74]	@ 0x4a
 8003722:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 80037cc <PIL_SLINK_putInt+0xc0>
 8003726:	0b22      	lsrs	r2, r4, #12
 8003728:	ea82 3211 	eor.w	r2, r2, r1, lsr #12
 800372c:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
 8003730:	ea83 1301 	eor.w	r3, r3, r1, lsl #4
 8003734:	ea87 3213 	eor.w	r2, r7, r3, lsr #12
 8003738:	f002 020f 	and.w	r2, r2, #15
 800373c:	b29b      	uxth	r3, r3
 800373e:	f838 2012 	ldrh.w	r2, [r8, r2, lsl #1]
 8003742:	ea82 1303 	eor.w	r3, r2, r3, lsl #4
 8003746:	f8a5 304a 	strh.w	r3, [r5, #74]	@ 0x4a
 800374a:	b23f      	sxth	r7, r7
 800374c:	4639      	mov	r1, r7
 800374e:	4630      	mov	r0, r6
 8003750:	f000 febe 	bl	80044d0 <PIL_RBUF_push>
 8003754:	2800      	cmp	r0, #0
 8003756:	d0f9      	beq.n	800374c <PIL_SLINK_putInt+0x40>
 8003758:	b2e4      	uxtb	r4, r4
 800375a:	2cff      	cmp	r4, #255	@ 0xff
 800375c:	d029      	beq.n	80037b2 <PIL_SLINK_putInt+0xa6>
 800375e:	f8b5 104a 	ldrh.w	r1, [r5, #74]	@ 0x4a
 8003762:	0922      	lsrs	r2, r4, #4
 8003764:	ea82 3211 	eor.w	r2, r2, r1, lsr #12
 8003768:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
 800376c:	ea83 1301 	eor.w	r3, r3, r1, lsl #4
 8003770:	ea84 3213 	eor.w	r2, r4, r3, lsr #12
 8003774:	f002 020f 	and.w	r2, r2, #15
 8003778:	b29b      	uxth	r3, r3
 800377a:	f838 2012 	ldrh.w	r2, [r8, r2, lsl #1]
 800377e:	ea82 1303 	eor.w	r3, r2, r3, lsl #4
 8003782:	b224      	sxth	r4, r4
 8003784:	f8a5 304a 	strh.w	r3, [r5, #74]	@ 0x4a
 8003788:	4621      	mov	r1, r4
 800378a:	4630      	mov	r0, r6
 800378c:	f000 fea0 	bl	80044d0 <PIL_RBUF_push>
 8003790:	2800      	cmp	r0, #0
 8003792:	d0f9      	beq.n	8003788 <PIL_SLINK_putInt+0x7c>
 8003794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003798:	21ff      	movs	r1, #255	@ 0xff
 800379a:	4630      	mov	r0, r6
 800379c:	f000 fe98 	bl	80044d0 <PIL_RBUF_push>
 80037a0:	2800      	cmp	r0, #0
 80037a2:	d1bc      	bne.n	800371e <PIL_SLINK_putInt+0x12>
 80037a4:	21ff      	movs	r1, #255	@ 0xff
 80037a6:	4630      	mov	r0, r6
 80037a8:	f000 fe92 	bl	80044d0 <PIL_RBUF_push>
 80037ac:	2800      	cmp	r0, #0
 80037ae:	d1b6      	bne.n	800371e <PIL_SLINK_putInt+0x12>
 80037b0:	e7f2      	b.n	8003798 <PIL_SLINK_putInt+0x8c>
 80037b2:	21ff      	movs	r1, #255	@ 0xff
 80037b4:	4630      	mov	r0, r6
 80037b6:	f000 fe8b 	bl	80044d0 <PIL_RBUF_push>
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d1cf      	bne.n	800375e <PIL_SLINK_putInt+0x52>
 80037be:	21ff      	movs	r1, #255	@ 0xff
 80037c0:	4630      	mov	r0, r6
 80037c2:	f000 fe85 	bl	80044d0 <PIL_RBUF_push>
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d1c9      	bne.n	800375e <PIL_SLINK_putInt+0x52>
 80037ca:	e7f2      	b.n	80037b2 <PIL_SLINK_putInt+0xa6>
 80037cc:	08004668 	.word	0x08004668

080037d0 <PIL_SLINK_init>:
 80037d0:	f5b1 7f93 	cmp.w	r1, #294	@ 0x126
 80037d4:	d314      	bcc.n	8003800 <PIL_SLINK_init+0x30>
 80037d6:	b510      	push	{r4, lr}
 80037d8:	4604      	mov	r4, r0
 80037da:	2300      	movs	r3, #0
 80037dc:	f04f 32ff 	mov.w	r2, #4294967295
 80037e0:	f884 3124 	strb.w	r3, [r4, #292]	@ 0x124
 80037e4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80037e8:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 80037ec:	64a2      	str	r2, [r4, #72]	@ 0x48
 80037ee:	304c      	adds	r0, #76	@ 0x4c
 80037f0:	f000 fe62 	bl	80044b8 <PIL_RBUF_reset>
 80037f4:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 80037f8:	f000 fe5e 	bl	80044b8 <PIL_RBUF_reset>
 80037fc:	4620      	mov	r0, r4
 80037fe:	bd10      	pop	{r4, pc}
 8003800:	2000      	movs	r0, #0
 8003802:	4770      	bx	lr

08003804 <PIL_SLINK_in>:
 8003804:	304c      	adds	r0, #76	@ 0x4c
 8003806:	f000 be63 	b.w	80044d0 <PIL_RBUF_push>
 800380a:	bf00      	nop

0800380c <PIL_SLINK_out>:
 800380c:	b530      	push	{r4, r5, lr}
 800380e:	b083      	sub	sp, #12
 8003810:	4604      	mov	r4, r0
 8003812:	460d      	mov	r5, r1
 8003814:	30b8      	adds	r0, #184	@ 0xb8
 8003816:	f10d 0106 	add.w	r1, sp, #6
 800381a:	f000 fe79 	bl	8004510 <PIL_RBUF_pop>
 800381e:	b170      	cbz	r0, 800383e <PIL_SLINK_out+0x32>
 8003820:	f894 3124 	ldrb.w	r3, [r4, #292]	@ 0x124
 8003824:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8003828:	b15b      	cbz	r3, 8003842 <PIL_SLINK_out+0x36>
 800382a:	2afe      	cmp	r2, #254	@ 0xfe
 800382c:	d00d      	beq.n	800384a <PIL_SLINK_out+0x3e>
 800382e:	2af5      	cmp	r2, #245	@ 0xf5
 8003830:	bf0c      	ite	eq
 8003832:	2003      	moveq	r0, #3
 8003834:	2001      	movne	r0, #1
 8003836:	2300      	movs	r3, #0
 8003838:	f884 3124 	strb.w	r3, [r4, #292]	@ 0x124
 800383c:	802a      	strh	r2, [r5, #0]
 800383e:	b003      	add	sp, #12
 8003840:	bd30      	pop	{r4, r5, pc}
 8003842:	2aff      	cmp	r2, #255	@ 0xff
 8003844:	d003      	beq.n	800384e <PIL_SLINK_out+0x42>
 8003846:	2001      	movs	r0, #1
 8003848:	e7f8      	b.n	800383c <PIL_SLINK_out+0x30>
 800384a:	2002      	movs	r0, #2
 800384c:	e7f3      	b.n	8003836 <PIL_SLINK_out+0x2a>
 800384e:	2301      	movs	r3, #1
 8003850:	f884 3124 	strb.w	r3, [r4, #292]	@ 0x124
 8003854:	4618      	mov	r0, r3
 8003856:	e7f1      	b.n	800383c <PIL_SLINK_out+0x30>

08003858 <PIL_SLINK_outBufIsEmpty>:
 8003858:	30b8      	adds	r0, #184	@ 0xb8
 800385a:	f000 be33 	b.w	80044c4 <PIL_RBUF_isEmpty>
 800385e:	bf00      	nop

08003860 <PIL_SLINK_send>:
 8003860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003864:	880b      	ldrh	r3, [r1, #0]
 8003866:	b083      	sub	sp, #12
 8003868:	2b01      	cmp	r3, #1
 800386a:	4689      	mov	r9, r1
 800386c:	4606      	mov	r6, r0
 800386e:	9201      	str	r2, [sp, #4]
 8003870:	d968      	bls.n	8003944 <PIL_SLINK_send+0xe4>
 8003872:	4fb7      	ldr	r7, [pc, #732]	@ (8003b50 <PIL_SLINK_send+0x2f0>)
 8003874:	f100 05b8 	add.w	r5, r0, #184	@ 0xb8
 8003878:	f04f 0802 	mov.w	r8, #2
 800387c:	e041      	b.n	8003902 <PIL_SLINK_send+0xa2>
 800387e:	f8b6 004a 	ldrh.w	r0, [r6, #74]	@ 0x4a
 8003882:	0b22      	lsrs	r2, r4, #12
 8003884:	ea82 3210 	eor.w	r2, r2, r0, lsr #12
 8003888:	fa0f fa8b 	sxth.w	sl, fp
 800388c:	f837 3012 	ldrh.w	r3, [r7, r2, lsl #1]
 8003890:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
 8003894:	ea8b 3b13 	eor.w	fp, fp, r3, lsr #12
 8003898:	f00b 0b0f 	and.w	fp, fp, #15
 800389c:	b29b      	uxth	r3, r3
 800389e:	f837 201b 	ldrh.w	r2, [r7, fp, lsl #1]
 80038a2:	ea82 1303 	eor.w	r3, r2, r3, lsl #4
 80038a6:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 80038aa:	4651      	mov	r1, sl
 80038ac:	4628      	mov	r0, r5
 80038ae:	f000 fe0f 	bl	80044d0 <PIL_RBUF_push>
 80038b2:	2800      	cmp	r0, #0
 80038b4:	d0f9      	beq.n	80038aa <PIL_SLINK_send+0x4a>
 80038b6:	b2e4      	uxtb	r4, r4
 80038b8:	2cff      	cmp	r4, #255	@ 0xff
 80038ba:	d036      	beq.n	800392a <PIL_SLINK_send+0xca>
 80038bc:	f8b6 104a 	ldrh.w	r1, [r6, #74]	@ 0x4a
 80038c0:	0922      	lsrs	r2, r4, #4
 80038c2:	ea82 3211 	eor.w	r2, r2, r1, lsr #12
 80038c6:	fa0f fb84 	sxth.w	fp, r4
 80038ca:	f837 3012 	ldrh.w	r3, [r7, r2, lsl #1]
 80038ce:	ea83 1301 	eor.w	r3, r3, r1, lsl #4
 80038d2:	ea84 3413 	eor.w	r4, r4, r3, lsr #12
 80038d6:	f004 040f 	and.w	r4, r4, #15
 80038da:	b29b      	uxth	r3, r3
 80038dc:	f837 2014 	ldrh.w	r2, [r7, r4, lsl #1]
 80038e0:	ea82 1303 	eor.w	r3, r2, r3, lsl #4
 80038e4:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 80038e8:	4659      	mov	r1, fp
 80038ea:	4628      	mov	r0, r5
 80038ec:	f000 fdf0 	bl	80044d0 <PIL_RBUF_push>
 80038f0:	2800      	cmp	r0, #0
 80038f2:	d0f9      	beq.n	80038e8 <PIL_SLINK_send+0x88>
 80038f4:	f8b9 3000 	ldrh.w	r3, [r9]
 80038f8:	4543      	cmp	r3, r8
 80038fa:	f108 0201 	add.w	r2, r8, #1
 80038fe:	dd24      	ble.n	800394a <PIL_SLINK_send+0xea>
 8003900:	4690      	mov	r8, r2
 8003902:	f839 4018 	ldrh.w	r4, [r9, r8, lsl #1]
 8003906:	ea4f 2b14 	mov.w	fp, r4, lsr #8
 800390a:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 800390e:	d1b6      	bne.n	800387e <PIL_SLINK_send+0x1e>
 8003910:	21ff      	movs	r1, #255	@ 0xff
 8003912:	4628      	mov	r0, r5
 8003914:	f000 fddc 	bl	80044d0 <PIL_RBUF_push>
 8003918:	2800      	cmp	r0, #0
 800391a:	d1b0      	bne.n	800387e <PIL_SLINK_send+0x1e>
 800391c:	21ff      	movs	r1, #255	@ 0xff
 800391e:	4628      	mov	r0, r5
 8003920:	f000 fdd6 	bl	80044d0 <PIL_RBUF_push>
 8003924:	2800      	cmp	r0, #0
 8003926:	d1aa      	bne.n	800387e <PIL_SLINK_send+0x1e>
 8003928:	e7f2      	b.n	8003910 <PIL_SLINK_send+0xb0>
 800392a:	21ff      	movs	r1, #255	@ 0xff
 800392c:	4628      	mov	r0, r5
 800392e:	f000 fdcf 	bl	80044d0 <PIL_RBUF_push>
 8003932:	2800      	cmp	r0, #0
 8003934:	d1c2      	bne.n	80038bc <PIL_SLINK_send+0x5c>
 8003936:	21ff      	movs	r1, #255	@ 0xff
 8003938:	4628      	mov	r0, r5
 800393a:	f000 fdc9 	bl	80044d0 <PIL_RBUF_push>
 800393e:	2800      	cmp	r0, #0
 8003940:	d1bc      	bne.n	80038bc <PIL_SLINK_send+0x5c>
 8003942:	e7f2      	b.n	800392a <PIL_SLINK_send+0xca>
 8003944:	4f82      	ldr	r7, [pc, #520]	@ (8003b50 <PIL_SLINK_send+0x2f0>)
 8003946:	f100 05b8 	add.w	r5, r0, #184	@ 0xb8
 800394a:	f8b9 4002 	ldrh.w	r4, [r9, #2]
 800394e:	f899 803e 	ldrb.w	r8, [r9, #62]	@ 0x3e
 8003952:	2cff      	cmp	r4, #255	@ 0xff
 8003954:	f000 80c5 	beq.w	8003ae2 <PIL_SLINK_send+0x282>
 8003958:	f8b6 104a 	ldrh.w	r1, [r6, #74]	@ 0x4a
 800395c:	0922      	lsrs	r2, r4, #4
 800395e:	ea82 3211 	eor.w	r2, r2, r1, lsr #12
 8003962:	f837 3012 	ldrh.w	r3, [r7, r2, lsl #1]
 8003966:	ea83 1301 	eor.w	r3, r3, r1, lsl #4
 800396a:	ea84 3213 	eor.w	r2, r4, r3, lsr #12
 800396e:	f002 020f 	and.w	r2, r2, #15
 8003972:	b29b      	uxth	r3, r3
 8003974:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8003978:	ea82 1303 	eor.w	r3, r2, r3, lsl #4
 800397c:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 8003980:	b2e4      	uxtb	r4, r4
 8003982:	4621      	mov	r1, r4
 8003984:	4628      	mov	r0, r5
 8003986:	f000 fda3 	bl	80044d0 <PIL_RBUF_push>
 800398a:	2800      	cmp	r0, #0
 800398c:	d0f9      	beq.n	8003982 <PIL_SLINK_send+0x122>
 800398e:	9b01      	ldr	r3, [sp, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	f040 80b5 	bne.w	8003b00 <PIL_SLINK_send+0x2a0>
 8003996:	f8b6 404a 	ldrh.w	r4, [r6, #74]	@ 0x4a
 800399a:	ea4f 2914 	mov.w	r9, r4, lsr #8
 800399e:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80039a2:	f000 8090 	beq.w	8003ac6 <PIL_SLINK_send+0x266>
 80039a6:	4622      	mov	r2, r4
 80039a8:	2300      	movs	r3, #0
 80039aa:	ea83 1302 	eor.w	r3, r3, r2, lsl #4
 80039ae:	ea89 3213 	eor.w	r2, r9, r3, lsr #12
 80039b2:	f002 020f 	and.w	r2, r2, #15
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80039bc:	ea82 1303 	eor.w	r3, r2, r3, lsl #4
 80039c0:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 80039c4:	fa0f f989 	sxth.w	r9, r9
 80039c8:	4649      	mov	r1, r9
 80039ca:	4628      	mov	r0, r5
 80039cc:	f000 fd80 	bl	80044d0 <PIL_RBUF_push>
 80039d0:	2800      	cmp	r0, #0
 80039d2:	d0f9      	beq.n	80039c8 <PIL_SLINK_send+0x168>
 80039d4:	b2e4      	uxtb	r4, r4
 80039d6:	2cff      	cmp	r4, #255	@ 0xff
 80039d8:	d068      	beq.n	8003aac <PIL_SLINK_send+0x24c>
 80039da:	f8b6 104a 	ldrh.w	r1, [r6, #74]	@ 0x4a
 80039de:	0922      	lsrs	r2, r4, #4
 80039e0:	ea82 3211 	eor.w	r2, r2, r1, lsr #12
 80039e4:	f837 3012 	ldrh.w	r3, [r7, r2, lsl #1]
 80039e8:	ea83 1301 	eor.w	r3, r3, r1, lsl #4
 80039ec:	ea84 3213 	eor.w	r2, r4, r3, lsr #12
 80039f0:	f002 020f 	and.w	r2, r2, #15
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80039fa:	ea82 1303 	eor.w	r3, r2, r3, lsl #4
 80039fe:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 8003a02:	b224      	sxth	r4, r4
 8003a04:	4621      	mov	r1, r4
 8003a06:	4628      	mov	r0, r5
 8003a08:	f000 fd62 	bl	80044d0 <PIL_RBUF_push>
 8003a0c:	2800      	cmp	r0, #0
 8003a0e:	d0f9      	beq.n	8003a04 <PIL_SLINK_send+0x1a4>
 8003a10:	21ff      	movs	r1, #255	@ 0xff
 8003a12:	4628      	mov	r0, r5
 8003a14:	f000 fd5c 	bl	80044d0 <PIL_RBUF_push>
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	d0f9      	beq.n	8003a10 <PIL_SLINK_send+0x1b0>
 8003a1c:	9b01      	ldr	r3, [sp, #4]
 8003a1e:	b31b      	cbz	r3, 8003a68 <PIL_SLINK_send+0x208>
 8003a20:	21f3      	movs	r1, #243	@ 0xf3
 8003a22:	4628      	mov	r0, r5
 8003a24:	f000 fd54 	bl	80044d0 <PIL_RBUF_push>
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	d0f9      	beq.n	8003a20 <PIL_SLINK_send+0x1c0>
 8003a2c:	f1b8 0f00 	cmp.w	r8, #0
 8003a30:	d023      	beq.n	8003a7a <PIL_SLINK_send+0x21a>
 8003a32:	f9bd a004 	ldrsh.w	sl, [sp, #4]
 8003a36:	4651      	mov	r1, sl
 8003a38:	4628      	mov	r0, r5
 8003a3a:	f000 fd49 	bl	80044d0 <PIL_RBUF_push>
 8003a3e:	2800      	cmp	r0, #0
 8003a40:	d0f9      	beq.n	8003a36 <PIL_SLINK_send+0x1d6>
 8003a42:	21ff      	movs	r1, #255	@ 0xff
 8003a44:	4628      	mov	r0, r5
 8003a46:	f000 fd43 	bl	80044d0 <PIL_RBUF_push>
 8003a4a:	2800      	cmp	r0, #0
 8003a4c:	d0f9      	beq.n	8003a42 <PIL_SLINK_send+0x1e2>
 8003a4e:	21f5      	movs	r1, #245	@ 0xf5
 8003a50:	4628      	mov	r0, r5
 8003a52:	f000 fd3d 	bl	80044d0 <PIL_RBUF_push>
 8003a56:	2800      	cmp	r0, #0
 8003a58:	d0f9      	beq.n	8003a4e <PIL_SLINK_send+0x1ee>
 8003a5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a5e:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 8003a62:	b003      	add	sp, #12
 8003a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a68:	21fe      	movs	r1, #254	@ 0xfe
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	f000 fd30 	bl	80044d0 <PIL_RBUF_push>
 8003a70:	2800      	cmp	r0, #0
 8003a72:	d0f9      	beq.n	8003a68 <PIL_SLINK_send+0x208>
 8003a74:	f1b8 0f00 	cmp.w	r8, #0
 8003a78:	d1db      	bne.n	8003a32 <PIL_SLINK_send+0x1d2>
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	f000 fd27 	bl	80044d0 <PIL_RBUF_push>
 8003a82:	2800      	cmp	r0, #0
 8003a84:	d0f9      	beq.n	8003a7a <PIL_SLINK_send+0x21a>
 8003a86:	21ff      	movs	r1, #255	@ 0xff
 8003a88:	4628      	mov	r0, r5
 8003a8a:	f000 fd21 	bl	80044d0 <PIL_RBUF_push>
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d0f9      	beq.n	8003a86 <PIL_SLINK_send+0x226>
 8003a92:	21f4      	movs	r1, #244	@ 0xf4
 8003a94:	4628      	mov	r0, r5
 8003a96:	f000 fd1b 	bl	80044d0 <PIL_RBUF_push>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d0f9      	beq.n	8003a92 <PIL_SLINK_send+0x232>
 8003a9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003aa2:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 8003aa6:	b003      	add	sp, #12
 8003aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aac:	21ff      	movs	r1, #255	@ 0xff
 8003aae:	4628      	mov	r0, r5
 8003ab0:	f000 fd0e 	bl	80044d0 <PIL_RBUF_push>
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	d190      	bne.n	80039da <PIL_SLINK_send+0x17a>
 8003ab8:	21ff      	movs	r1, #255	@ 0xff
 8003aba:	4628      	mov	r0, r5
 8003abc:	f000 fd08 	bl	80044d0 <PIL_RBUF_push>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	d18a      	bne.n	80039da <PIL_SLINK_send+0x17a>
 8003ac4:	e7f2      	b.n	8003aac <PIL_SLINK_send+0x24c>
 8003ac6:	21ff      	movs	r1, #255	@ 0xff
 8003ac8:	4628      	mov	r0, r5
 8003aca:	f000 fd01 	bl	80044d0 <PIL_RBUF_push>
 8003ace:	2800      	cmp	r0, #0
 8003ad0:	d0f9      	beq.n	8003ac6 <PIL_SLINK_send+0x266>
 8003ad2:	f8b6 204a 	ldrh.w	r2, [r6, #74]	@ 0x4a
 8003ad6:	0b13      	lsrs	r3, r2, #12
 8003ad8:	f083 030f 	eor.w	r3, r3, #15
 8003adc:	f937 3013 	ldrsh.w	r3, [r7, r3, lsl #1]
 8003ae0:	e763      	b.n	80039aa <PIL_SLINK_send+0x14a>
 8003ae2:	21ff      	movs	r1, #255	@ 0xff
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	f000 fcf3 	bl	80044d0 <PIL_RBUF_push>
 8003aea:	2800      	cmp	r0, #0
 8003aec:	f47f af34 	bne.w	8003958 <PIL_SLINK_send+0xf8>
 8003af0:	21ff      	movs	r1, #255	@ 0xff
 8003af2:	4628      	mov	r0, r5
 8003af4:	f000 fcec 	bl	80044d0 <PIL_RBUF_push>
 8003af8:	2800      	cmp	r0, #0
 8003afa:	f47f af2d 	bne.w	8003958 <PIL_SLINK_send+0xf8>
 8003afe:	e7f0      	b.n	8003ae2 <PIL_SLINK_send+0x282>
 8003b00:	2bff      	cmp	r3, #255	@ 0xff
 8003b02:	b29c      	uxth	r4, r3
 8003b04:	d01d      	beq.n	8003b42 <PIL_SLINK_send+0x2e2>
 8003b06:	f8b6 204a 	ldrh.w	r2, [r6, #74]	@ 0x4a
 8003b0a:	9901      	ldr	r1, [sp, #4]
 8003b0c:	0924      	lsrs	r4, r4, #4
 8003b0e:	ea84 3412 	eor.w	r4, r4, r2, lsr #12
 8003b12:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 8003b16:	ea83 1302 	eor.w	r3, r3, r2, lsl #4
 8003b1a:	ea81 3213 	eor.w	r2, r1, r3, lsr #12
 8003b1e:	f002 020f 	and.w	r2, r2, #15
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8003b28:	ea82 1303 	eor.w	r3, r2, r3, lsl #4
 8003b2c:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 8003b30:	b20c      	sxth	r4, r1
 8003b32:	4621      	mov	r1, r4
 8003b34:	4628      	mov	r0, r5
 8003b36:	f000 fccb 	bl	80044d0 <PIL_RBUF_push>
 8003b3a:	2800      	cmp	r0, #0
 8003b3c:	f47f af2b 	bne.w	8003996 <PIL_SLINK_send+0x136>
 8003b40:	e7f7      	b.n	8003b32 <PIL_SLINK_send+0x2d2>
 8003b42:	21ff      	movs	r1, #255	@ 0xff
 8003b44:	4628      	mov	r0, r5
 8003b46:	f000 fcc3 	bl	80044d0 <PIL_RBUF_push>
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	d1db      	bne.n	8003b06 <PIL_SLINK_send+0x2a6>
 8003b4e:	e7f8      	b.n	8003b42 <PIL_SLINK_send+0x2e2>
 8003b50:	08004668 	.word	0x08004668

08003b54 <PIL_SLINK_receive>:
 8003b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	460e      	mov	r6, r1
 8003b5e:	304c      	adds	r0, #76	@ 0x4c
 8003b60:	f10d 010e 	add.w	r1, sp, #14
 8003b64:	4615      	mov	r5, r2
 8003b66:	f000 fcd3 	bl	8004510 <PIL_RBUF_pop>
 8003b6a:	b1c8      	cbz	r0, 8003ba0 <PIL_SLINK_receive+0x4c>
 8003b6c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8003b70:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8003b74:	b2d9      	uxtb	r1, r3
 8003b76:	b1b2      	cbz	r2, 8003ba6 <PIL_SLINK_receive+0x52>
 8003b78:	29ff      	cmp	r1, #255	@ 0xff
 8003b7a:	d031      	beq.n	8003be0 <PIL_SLINK_receive+0x8c>
 8003b7c:	29f4      	cmp	r1, #244	@ 0xf4
 8003b7e:	d007      	beq.n	8003b90 <PIL_SLINK_receive+0x3c>
 8003b80:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 8003b84:	b9ea      	cbnz	r2, 8003bc2 <PIL_SLINK_receive+0x6e>
 8003b86:	29fe      	cmp	r1, #254	@ 0xfe
 8003b88:	f000 80ff 	beq.w	8003d8a <PIL_SLINK_receive+0x236>
 8003b8c:	29f3      	cmp	r1, #243	@ 0xf3
 8003b8e:	d02e      	beq.n	8003bee <PIL_SLINK_receive+0x9a>
 8003b90:	2300      	movs	r3, #0
 8003b92:	f04f 32ff 	mov.w	r2, #4294967295
 8003b96:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003b9a:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8003b9e:	64a2      	str	r2, [r4, #72]	@ 0x48
 8003ba0:	b005      	add	sp, #20
 8003ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba6:	29ff      	cmp	r1, #255	@ 0xff
 8003ba8:	d105      	bne.n	8003bb6 <PIL_SLINK_receive+0x62>
 8003baa:	2301      	movs	r3, #1
 8003bac:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003bb0:	b005      	add	sp, #20
 8003bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	f7ff fd6e 	bl	8003698 <PIL_SLINK_byteIn>
 8003bbc:	b005      	add	sp, #20
 8003bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc2:	f104 05b8 	add.w	r5, r4, #184	@ 0xb8
 8003bc6:	21ff      	movs	r1, #255	@ 0xff
 8003bc8:	4628      	mov	r0, r5
 8003bca:	f000 fc81 	bl	80044d0 <PIL_RBUF_push>
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	d0f9      	beq.n	8003bc6 <PIL_SLINK_receive+0x72>
 8003bd2:	21fd      	movs	r1, #253	@ 0xfd
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	f000 fc7b 	bl	80044d0 <PIL_RBUF_push>
 8003bda:	2800      	cmp	r0, #0
 8003bdc:	d1d8      	bne.n	8003b90 <PIL_SLINK_receive+0x3c>
 8003bde:	e7f8      	b.n	8003bd2 <PIL_SLINK_receive+0x7e>
 8003be0:	4620      	mov	r0, r4
 8003be2:	f7ff fd59 	bl	8003698 <PIL_SLINK_byteIn>
 8003be6:	2300      	movs	r3, #0
 8003be8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003bec:	e7d8      	b.n	8003ba0 <PIL_SLINK_receive+0x4c>
 8003bee:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8003bf2:	3b04      	subs	r3, #4
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	18e2      	adds	r2, r4, r3
 8003bf8:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8003bfc:	7853      	ldrb	r3, [r2, #1]
 8003bfe:	702b      	strb	r3, [r5, #0]
 8003c00:	f894 c046 	ldrb.w	ip, [r4, #70]	@ 0x46
 8003c04:	f814 300c 	ldrb.w	r3, [r4, ip]
 8003c08:	2b05      	cmp	r3, #5
 8003c0a:	d0c1      	beq.n	8003b90 <PIL_SLINK_receive+0x3c>
 8003c0c:	b299      	uxth	r1, r3
 8003c0e:	2201      	movs	r2, #1
 8003c10:	8071      	strh	r1, [r6, #2]
 8003c12:	8032      	strh	r2, [r6, #0]
 8003c14:	f894 3047 	ldrb.w	r3, [r4, #71]	@ 0x47
 8003c18:	4563      	cmp	r3, ip
 8003c1a:	d213      	bcs.n	8003c44 <PIL_SLINK_receive+0xf0>
 8003c1c:	1c59      	adds	r1, r3, #1
 8003c1e:	b2c9      	uxtb	r1, r1
 8003c20:	5ce0      	ldrb	r0, [r4, r3]
 8003c22:	5c61      	ldrb	r1, [r4, r1]
 8003c24:	3302      	adds	r3, #2
 8003c26:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	eb06 0042 	add.w	r0, r6, r2, lsl #1
 8003c30:	4563      	cmp	r3, ip
 8003c32:	f102 0201 	add.w	r2, r2, #1
 8003c36:	8041      	strh	r1, [r0, #2]
 8003c38:	b292      	uxth	r2, r2
 8003c3a:	d3ef      	bcc.n	8003c1c <PIL_SLINK_receive+0xc8>
 8003c3c:	8032      	strh	r2, [r6, #0]
 8003c3e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
 8003c42:	8871      	ldrh	r1, [r6, #2]
 8003c44:	2300      	movs	r3, #0
 8003c46:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003c4a:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8003c4e:	2907      	cmp	r1, #7
 8003c50:	f04f 33ff 	mov.w	r3, #4294967295
 8003c54:	64a3      	str	r3, [r4, #72]	@ 0x48
 8003c56:	d1a3      	bne.n	8003ba0 <PIL_SLINK_receive+0x4c>
 8003c58:	f8b6 900c 	ldrh.w	r9, [r6, #12]
 8003c5c:	f1b9 0f35 	cmp.w	r9, #53	@ 0x35
 8003c60:	d99e      	bls.n	8003ba0 <PIL_SLINK_receive+0x4c>
 8003c62:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8003c66:	ea4f 0149 	mov.w	r1, r9, lsl #1
 8003c6a:	88f3      	ldrh	r3, [r6, #6]
 8003c6c:	8937      	ldrh	r7, [r6, #8]
 8003c6e:	3109      	adds	r1, #9
 8003c70:	b289      	uxth	r1, r1
 8003c72:	4620      	mov	r0, r4
 8003c74:	eb07 4703 	add.w	r7, r7, r3, lsl #16
 8003c78:	f7ff fd48 	bl	800370c <PIL_SLINK_putInt>
 8003c7c:	f895 a000 	ldrb.w	sl, [r5]
 8003c80:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8003c84:	fa1f f58a 	uxth.w	r5, sl
 8003c88:	f104 08b8 	add.w	r8, r4, #184	@ 0xb8
 8003c8c:	d076      	beq.n	8003d7c <PIL_SLINK_receive+0x228>
 8003c8e:	f8b4 204a 	ldrh.w	r2, [r4, #74]	@ 0x4a
 8003c92:	092b      	lsrs	r3, r5, #4
 8003c94:	ea83 3312 	eor.w	r3, r3, r2, lsr #12
 8003c98:	4d7a      	ldr	r5, [pc, #488]	@ (8003e84 <PIL_SLINK_receive+0x330>)
 8003c9a:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8003c9e:	ea83 1302 	eor.w	r3, r3, r2, lsl #4
 8003ca2:	ea8a 3213 	eor.w	r2, sl, r3, lsr #12
 8003ca6:	f002 020f 	and.w	r2, r2, #15
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8003cb0:	ea82 1303 	eor.w	r3, r2, r3, lsl #4
 8003cb4:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8003cb8:	fa0f fa8a 	sxth.w	sl, sl
 8003cbc:	4651      	mov	r1, sl
 8003cbe:	4640      	mov	r0, r8
 8003cc0:	f000 fc06 	bl	80044d0 <PIL_RBUF_push>
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	d0f9      	beq.n	8003cbc <PIL_SLINK_receive+0x168>
 8003cc8:	f8b4 104a 	ldrh.w	r1, [r4, #74]	@ 0x4a
 8003ccc:	4620      	mov	r0, r4
 8003cce:	f7ff fd1d 	bl	800370c <PIL_SLINK_putInt>
 8003cd2:	21ff      	movs	r1, #255	@ 0xff
 8003cd4:	4640      	mov	r0, r8
 8003cd6:	f000 fbfb 	bl	80044d0 <PIL_RBUF_push>
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	d0f9      	beq.n	8003cd2 <PIL_SLINK_receive+0x17e>
 8003cde:	21f6      	movs	r1, #246	@ 0xf6
 8003ce0:	4640      	mov	r0, r8
 8003ce2:	f000 fbf5 	bl	80044d0 <PIL_RBUF_push>
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d0f9      	beq.n	8003cde <PIL_SLINK_receive+0x18a>
 8003cea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003cee:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f106 0a04 	add.w	sl, r6, #4
 8003cf8:	f106 0b0a 	add.w	fp, r6, #10
 8003cfc:	f83a 1b02 	ldrh.w	r1, [sl], #2
 8003d00:	0b0b      	lsrs	r3, r1, #12
 8003d02:	ea83 3312 	eor.w	r3, r3, r2, lsr #12
 8003d06:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8003d0a:	ea83 1302 	eor.w	r3, r3, r2, lsl #4
 8003d0e:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8003d12:	f3c1 2203 	ubfx	r2, r1, #8, #4
 8003d16:	4042      	eors	r2, r0
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8003d1e:	ea82 1303 	eor.w	r3, r2, r3, lsl #4
 8003d22:	0a09      	lsrs	r1, r1, #8
 8003d24:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8003d28:	4640      	mov	r0, r8
 8003d2a:	9101      	str	r1, [sp, #4]
 8003d2c:	f000 fbd0 	bl	80044d0 <PIL_RBUF_push>
 8003d30:	9901      	ldr	r1, [sp, #4]
 8003d32:	2800      	cmp	r0, #0
 8003d34:	d0f8      	beq.n	8003d28 <PIL_SLINK_receive+0x1d4>
 8003d36:	f81a 1c02 	ldrb.w	r1, [sl, #-2]
 8003d3a:	f8b4 204a 	ldrh.w	r2, [r4, #74]	@ 0x4a
 8003d3e:	090b      	lsrs	r3, r1, #4
 8003d40:	ea83 3312 	eor.w	r3, r3, r2, lsr #12
 8003d44:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8003d48:	ea83 1302 	eor.w	r3, r3, r2, lsl #4
 8003d4c:	ea81 3213 	eor.w	r2, r1, r3, lsr #12
 8003d50:	f002 020f 	and.w	r2, r2, #15
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8003d5a:	ea82 1303 	eor.w	r3, r2, r3, lsl #4
 8003d5e:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8003d62:	b209      	sxth	r1, r1
 8003d64:	4640      	mov	r0, r8
 8003d66:	9101      	str	r1, [sp, #4]
 8003d68:	f000 fbb2 	bl	80044d0 <PIL_RBUF_push>
 8003d6c:	9901      	ldr	r1, [sp, #4]
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	d0f8      	beq.n	8003d64 <PIL_SLINK_receive+0x210>
 8003d72:	45da      	cmp	sl, fp
 8003d74:	d013      	beq.n	8003d9e <PIL_SLINK_receive+0x24a>
 8003d76:	f8b4 204a 	ldrh.w	r2, [r4, #74]	@ 0x4a
 8003d7a:	e7bf      	b.n	8003cfc <PIL_SLINK_receive+0x1a8>
 8003d7c:	21ff      	movs	r1, #255	@ 0xff
 8003d7e:	4640      	mov	r0, r8
 8003d80:	f000 fba6 	bl	80044d0 <PIL_RBUF_push>
 8003d84:	2800      	cmp	r0, #0
 8003d86:	d182      	bne.n	8003c8e <PIL_SLINK_receive+0x13a>
 8003d88:	e7f8      	b.n	8003d7c <PIL_SLINK_receive+0x228>
 8003d8a:	702a      	strb	r2, [r5, #0]
 8003d8c:	f894 c046 	ldrb.w	ip, [r4, #70]	@ 0x46
 8003d90:	f1ac 0c03 	sub.w	ip, ip, #3
 8003d94:	fa5f fc8c 	uxtb.w	ip, ip
 8003d98:	f884 c046 	strb.w	ip, [r4, #70]	@ 0x46
 8003d9c:	e732      	b.n	8003c04 <PIL_SLINK_receive+0xb0>
 8003d9e:	eb07 0949 	add.w	r9, r7, r9, lsl #1
 8003da2:	8839      	ldrh	r1, [r7, #0]
 8003da4:	f8b4 004a 	ldrh.w	r0, [r4, #74]	@ 0x4a
 8003da8:	0b0a      	lsrs	r2, r1, #12
 8003daa:	ea82 3210 	eor.w	r2, r2, r0, lsr #12
 8003dae:	ea4f 2a11 	mov.w	sl, r1, lsr #8
 8003db2:	f835 3012 	ldrh.w	r3, [r5, r2, lsl #1]
 8003db6:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
 8003dba:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8003dbe:	f3c1 2203 	ubfx	r2, r1, #8, #4
 8003dc2:	4042      	eors	r2, r0
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8003dca:	ea82 1303 	eor.w	r3, r2, r3, lsl #4
 8003dce:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8003dd2:	4651      	mov	r1, sl
 8003dd4:	4640      	mov	r0, r8
 8003dd6:	f000 fb7b 	bl	80044d0 <PIL_RBUF_push>
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	d0f9      	beq.n	8003dd2 <PIL_SLINK_receive+0x27e>
 8003dde:	7839      	ldrb	r1, [r7, #0]
 8003de0:	f8b4 004a 	ldrh.w	r0, [r4, #74]	@ 0x4a
 8003de4:	090a      	lsrs	r2, r1, #4
 8003de6:	ea82 3210 	eor.w	r2, r2, r0, lsr #12
 8003dea:	fa0f fa81 	sxth.w	sl, r1
 8003dee:	f835 3012 	ldrh.w	r3, [r5, r2, lsl #1]
 8003df2:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
 8003df6:	ea81 3213 	eor.w	r2, r1, r3, lsr #12
 8003dfa:	f002 020f 	and.w	r2, r2, #15
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8003e04:	ea82 1303 	eor.w	r3, r2, r3, lsl #4
 8003e08:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8003e0c:	4651      	mov	r1, sl
 8003e0e:	4640      	mov	r0, r8
 8003e10:	f000 fb5e 	bl	80044d0 <PIL_RBUF_push>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	d0f9      	beq.n	8003e0c <PIL_SLINK_receive+0x2b8>
 8003e18:	3702      	adds	r7, #2
 8003e1a:	454f      	cmp	r7, r9
 8003e1c:	d1c1      	bne.n	8003da2 <PIL_SLINK_receive+0x24e>
 8003e1e:	f8b4 204a 	ldrh.w	r2, [r4, #74]	@ 0x4a
 8003e22:	0b13      	lsrs	r3, r2, #12
 8003e24:	f083 0304 	eor.w	r3, r3, #4
 8003e28:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8003e2c:	ea83 1302 	eor.w	r3, r3, r2, lsl #4
 8003e30:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8003e34:	f082 0207 	eor.w	r2, r2, #7
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8003e3e:	ea82 1303 	eor.w	r3, r2, r3, lsl #4
 8003e42:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8003e46:	2147      	movs	r1, #71	@ 0x47
 8003e48:	4640      	mov	r0, r8
 8003e4a:	f000 fb41 	bl	80044d0 <PIL_RBUF_push>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d0f9      	beq.n	8003e46 <PIL_SLINK_receive+0x2f2>
 8003e52:	f8b4 504a 	ldrh.w	r5, [r4, #74]	@ 0x4a
 8003e56:	0a2d      	lsrs	r5, r5, #8
 8003e58:	4629      	mov	r1, r5
 8003e5a:	4640      	mov	r0, r8
 8003e5c:	f000 fb38 	bl	80044d0 <PIL_RBUF_push>
 8003e60:	2800      	cmp	r0, #0
 8003e62:	d0f9      	beq.n	8003e58 <PIL_SLINK_receive+0x304>
 8003e64:	f894 504a 	ldrb.w	r5, [r4, #74]	@ 0x4a
 8003e68:	4629      	mov	r1, r5
 8003e6a:	4640      	mov	r0, r8
 8003e6c:	f000 fb30 	bl	80044d0 <PIL_RBUF_push>
 8003e70:	2800      	cmp	r0, #0
 8003e72:	d0f9      	beq.n	8003e68 <PIL_SLINK_receive+0x314>
 8003e74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f8a4 204a 	strh.w	r2, [r4, #74]	@ 0x4a
 8003e7e:	8033      	strh	r3, [r6, #0]
 8003e80:	e68e      	b.n	8003ba0 <PIL_SLINK_receive+0x4c>
 8003e82:	bf00      	nop
 8003e84:	08004668 	.word	0x08004668

08003e88 <PIL_DisableInt>:
 8003e88:	b672      	cpsid	i
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop

08003e90 <PIL_RestoreInt>:
 8003e90:	b662      	cpsie	i
 8003e92:	4770      	bx	lr

08003e94 <PIL_BSRVS_init>:
 8003e94:	29bf      	cmp	r1, #191	@ 0xbf
 8003e96:	d906      	bls.n	8003ea6 <PIL_BSRVS_init+0x12>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	6003      	str	r3, [r0, #0]
 8003e9c:	f8a0 30b8 	strh.w	r3, [r0, #184]	@ 0xb8
 8003ea0:	f880 30ba 	strb.w	r3, [r0, #186]	@ 0xba
 8003ea4:	4770      	bx	lr
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop

08003eac <PIL_BSRVS_messageHandler>:
 8003eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003eb0:	4604      	mov	r4, r0
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	2900      	cmp	r1, #0
 8003eb6:	f000 8170 	beq.w	800419a <PIL_BSRVS_messageHandler+0x2ee>
 8003eba:	884b      	ldrh	r3, [r1, #2]
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d008      	beq.n	8003ed2 <PIL_BSRVS_messageHandler+0x26>
 8003ec0:	2b30      	cmp	r3, #48	@ 0x30
 8003ec2:	f000 8082 	beq.w	8003fca <PIL_BSRVS_messageHandler+0x11e>
 8003ec6:	2b07      	cmp	r3, #7
 8003ec8:	d013      	beq.n	8003ef2 <PIL_BSRVS_messageHandler+0x46>
 8003eca:	2000      	movs	r0, #0
 8003ecc:	b003      	add	sp, #12
 8003ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ed2:	888b      	ldrh	r3, [r1, #4]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	f000 8087 	beq.w	8003fe8 <PIL_BSRVS_messageHandler+0x13c>
 8003eda:	237f      	movs	r3, #127	@ 0x7f
 8003edc:	8053      	strh	r3, [r2, #2]
 8003ede:	8848      	ldrh	r0, [r1, #2]
 8003ee0:	2113      	movs	r1, #19
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	8090      	strh	r0, [r2, #4]
 8003ee6:	2001      	movs	r0, #1
 8003ee8:	80d1      	strh	r1, [r2, #6]
 8003eea:	8013      	strh	r3, [r2, #0]
 8003eec:	b003      	add	sp, #12
 8003eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ef2:	8888      	ldrh	r0, [r1, #4]
 8003ef4:	b2c3      	uxtb	r3, r0
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d1ef      	bne.n	8003eda <PIL_BSRVS_messageHandler+0x2e>
 8003efa:	88cb      	ldrh	r3, [r1, #6]
 8003efc:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8003f00:	898c      	ldrh	r4, [r1, #12]
 8003f02:	8090      	strh	r0, [r2, #4]
 8003f04:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8003f08:	80d3      	strh	r3, [r2, #6]
 8003f0a:	041e      	lsls	r6, r3, #16
 8003f0c:	2047      	movs	r0, #71	@ 0x47
 8003f0e:	2900      	cmp	r1, #0
 8003f10:	ea4f 0554 	mov.w	r5, r4, lsr #1
 8003f14:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
 8003f18:	f8a2 c008 	strh.w	ip, [r2, #8]
 8003f1c:	bfb8      	it	lt
 8003f1e:	f85c 3006 	ldrlt.w	r3, [ip, r6]
 8003f22:	8050      	strh	r0, [r2, #2]
 8003f24:	2d00      	cmp	r5, #0
 8003f26:	d04c      	beq.n	8003fc2 <PIL_BSRVS_messageHandler+0x116>
 8003f28:	f102 010a 	add.w	r1, r2, #10
 8003f2c:	1c9e      	adds	r6, r3, #2
 8003f2e:	1e68      	subs	r0, r5, #1
 8003f30:	42b1      	cmp	r1, r6
 8003f32:	b280      	uxth	r0, r0
 8003f34:	f000 81b6 	beq.w	80042a4 <PIL_BSRVS_messageHandler+0x3f8>
 8003f38:	2809      	cmp	r0, #9
 8003f3a:	f240 81b3 	bls.w	80042a4 <PIL_BSRVS_messageHandler+0x3f8>
 8003f3e:	6819      	ldr	r1, [r3, #0]
 8003f40:	f8c2 100a 	str.w	r1, [r2, #10]
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	f8c2 100e 	str.w	r1, [r2, #14]
 8003f4a:	6899      	ldr	r1, [r3, #8]
 8003f4c:	f8c2 1012 	str.w	r1, [r2, #18]
 8003f50:	68d9      	ldr	r1, [r3, #12]
 8003f52:	f8c2 1016 	str.w	r1, [r2, #22]
 8003f56:	08a0      	lsrs	r0, r4, #2
 8003f58:	6919      	ldr	r1, [r3, #16]
 8003f5a:	f8c2 101a 	str.w	r1, [r2, #26]
 8003f5e:	2805      	cmp	r0, #5
 8003f60:	d025      	beq.n	8003fae <PIL_BSRVS_messageHandler+0x102>
 8003f62:	6959      	ldr	r1, [r3, #20]
 8003f64:	f8c2 101e 	str.w	r1, [r2, #30]
 8003f68:	2806      	cmp	r0, #6
 8003f6a:	d020      	beq.n	8003fae <PIL_BSRVS_messageHandler+0x102>
 8003f6c:	6999      	ldr	r1, [r3, #24]
 8003f6e:	f8c2 1022 	str.w	r1, [r2, #34]	@ 0x22
 8003f72:	2807      	cmp	r0, #7
 8003f74:	d01b      	beq.n	8003fae <PIL_BSRVS_messageHandler+0x102>
 8003f76:	69d9      	ldr	r1, [r3, #28]
 8003f78:	f8c2 1026 	str.w	r1, [r2, #38]	@ 0x26
 8003f7c:	2808      	cmp	r0, #8
 8003f7e:	d016      	beq.n	8003fae <PIL_BSRVS_messageHandler+0x102>
 8003f80:	6a19      	ldr	r1, [r3, #32]
 8003f82:	f8c2 102a 	str.w	r1, [r2, #42]	@ 0x2a
 8003f86:	2809      	cmp	r0, #9
 8003f88:	d011      	beq.n	8003fae <PIL_BSRVS_messageHandler+0x102>
 8003f8a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003f8c:	f8c2 102e 	str.w	r1, [r2, #46]	@ 0x2e
 8003f90:	280a      	cmp	r0, #10
 8003f92:	d00c      	beq.n	8003fae <PIL_BSRVS_messageHandler+0x102>
 8003f94:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003f96:	f8c2 1032 	str.w	r1, [r2, #50]	@ 0x32
 8003f9a:	280b      	cmp	r0, #11
 8003f9c:	d007      	beq.n	8003fae <PIL_BSRVS_messageHandler+0x102>
 8003f9e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003fa0:	f8c2 1036 	str.w	r1, [r2, #54]	@ 0x36
 8003fa4:	280c      	cmp	r0, #12
 8003fa6:	bf1c      	itt	ne
 8003fa8:	6b19      	ldrne	r1, [r3, #48]	@ 0x30
 8003faa:	f8c2 103a 	strne.w	r1, [r2, #58]	@ 0x3a
 8003fae:	ebb5 0f40 	cmp.w	r5, r0, lsl #1
 8003fb2:	ea4f 0140 	mov.w	r1, r0, lsl #1
 8003fb6:	d004      	beq.n	8003fc2 <PIL_BSRVS_messageHandler+0x116>
 8003fb8:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8003fbc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003fc0:	8143      	strh	r3, [r0, #10]
 8003fc2:	3504      	adds	r5, #4
 8003fc4:	8015      	strh	r5, [r2, #0]
 8003fc6:	2001      	movs	r0, #1
 8003fc8:	e780      	b.n	8003ecc <PIL_BSRVS_messageHandler+0x20>
 8003fca:	888b      	ldrh	r3, [r1, #4]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	f000 80c3 	beq.w	8004158 <PIL_BSRVS_messageHandler+0x2ac>
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	f000 80aa 	beq.w	800412c <PIL_BSRVS_messageHandler+0x280>
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 80b6 	beq.w	800414a <PIL_BSRVS_messageHandler+0x29e>
 8003fde:	237f      	movs	r3, #127	@ 0x7f
 8003fe0:	8053      	strh	r3, [r2, #2]
 8003fe2:	8848      	ldrh	r0, [r1, #2]
 8003fe4:	2112      	movs	r1, #18
 8003fe6:	e77c      	b.n	8003ee2 <PIL_BSRVS_messageHandler+0x36>
 8003fe8:	6803      	ldr	r3, [r0, #0]
 8003fea:	88ce      	ldrh	r6, [r1, #6]
 8003fec:	f8b1 8008 	ldrh.w	r8, [r1, #8]
 8003ff0:	894d      	ldrh	r5, [r1, #10]
 8003ff2:	898f      	ldrh	r7, [r1, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8152 	beq.w	800429e <PIL_BSRVS_messageHandler+0x3f2>
 8003ffa:	2001      	movs	r0, #1
 8003ffc:	e9cd 1200 	strd	r1, r2, [sp]
 8004000:	4798      	blx	r3
 8004002:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004006:	2800      	cmp	r0, #0
 8004008:	f000 80d3 	beq.w	80041b2 <PIL_BSRVS_messageHandler+0x306>
 800400c:	88c8      	ldrh	r0, [r1, #6]
 800400e:	890b      	ldrh	r3, [r1, #8]
 8004010:	8113      	strh	r3, [r2, #8]
 8004012:	2348      	movs	r3, #72	@ 0x48
 8004014:	80d0      	strh	r0, [r2, #6]
 8004016:	8053      	strh	r3, [r2, #2]
 8004018:	ea4f 4e06 	mov.w	lr, r6, lsl #16
 800401c:	2302      	movs	r3, #2
 800401e:	eb08 4006 	add.w	r0, r8, r6, lsl #16
 8004022:	087e      	lsrs	r6, r7, #1
 8004024:	8093      	strh	r3, [r2, #4]
 8004026:	d076      	beq.n	8004116 <PIL_BSRVS_messageHandler+0x26a>
 8004028:	f106 3cff 	add.w	ip, r6, #4294967295
 800402c:	fa1f fc8c 	uxth.w	ip, ip
 8004030:	f101 0310 	add.w	r3, r1, #16
 8004034:	4298      	cmp	r0, r3
 8004036:	bf18      	it	ne
 8004038:	f1bc 0f06 	cmpne.w	ip, #6
 800403c:	f240 814b 	bls.w	80042d6 <PIL_BSRVS_messageHandler+0x42a>
 8004040:	f102 030a 	add.w	r3, r2, #10
 8004044:	f100 0902 	add.w	r9, r0, #2
 8004048:	454b      	cmp	r3, r9
 800404a:	f000 8144 	beq.w	80042d6 <PIL_BSRVS_messageHandler+0x42a>
 800404e:	f8d1 300e 	ldr.w	r3, [r1, #14]
 8004052:	f848 300e 	str.w	r3, [r8, lr]
 8004056:	f8c2 300a 	str.w	r3, [r2, #10]
 800405a:	f8d1 3012 	ldr.w	r3, [r1, #18]
 800405e:	6043      	str	r3, [r0, #4]
 8004060:	f8c2 300e 	str.w	r3, [r2, #14]
 8004064:	f8d1 3016 	ldr.w	r3, [r1, #22]
 8004068:	6083      	str	r3, [r0, #8]
 800406a:	ea4f 0c97 	mov.w	ip, r7, lsr #2
 800406e:	f8c2 3012 	str.w	r3, [r2, #18]
 8004072:	f8d1 301a 	ldr.w	r3, [r1, #26]
 8004076:	60c3      	str	r3, [r0, #12]
 8004078:	f1bc 0f04 	cmp.w	ip, #4
 800407c:	f8c2 3016 	str.w	r3, [r2, #22]
 8004080:	d03c      	beq.n	80040fc <PIL_BSRVS_messageHandler+0x250>
 8004082:	f8d1 301e 	ldr.w	r3, [r1, #30]
 8004086:	6103      	str	r3, [r0, #16]
 8004088:	f1bc 0f05 	cmp.w	ip, #5
 800408c:	f8c2 301a 	str.w	r3, [r2, #26]
 8004090:	d034      	beq.n	80040fc <PIL_BSRVS_messageHandler+0x250>
 8004092:	f8d1 3022 	ldr.w	r3, [r1, #34]	@ 0x22
 8004096:	6143      	str	r3, [r0, #20]
 8004098:	f1bc 0f06 	cmp.w	ip, #6
 800409c:	f8c2 301e 	str.w	r3, [r2, #30]
 80040a0:	d02c      	beq.n	80040fc <PIL_BSRVS_messageHandler+0x250>
 80040a2:	f8d1 3026 	ldr.w	r3, [r1, #38]	@ 0x26
 80040a6:	6183      	str	r3, [r0, #24]
 80040a8:	f1bc 0f07 	cmp.w	ip, #7
 80040ac:	f8c2 3022 	str.w	r3, [r2, #34]	@ 0x22
 80040b0:	d024      	beq.n	80040fc <PIL_BSRVS_messageHandler+0x250>
 80040b2:	f8d1 302a 	ldr.w	r3, [r1, #42]	@ 0x2a
 80040b6:	61c3      	str	r3, [r0, #28]
 80040b8:	f1bc 0f08 	cmp.w	ip, #8
 80040bc:	f8c2 3026 	str.w	r3, [r2, #38]	@ 0x26
 80040c0:	d01c      	beq.n	80040fc <PIL_BSRVS_messageHandler+0x250>
 80040c2:	f8d1 302e 	ldr.w	r3, [r1, #46]	@ 0x2e
 80040c6:	6203      	str	r3, [r0, #32]
 80040c8:	f1bc 0f09 	cmp.w	ip, #9
 80040cc:	f8c2 302a 	str.w	r3, [r2, #42]	@ 0x2a
 80040d0:	d014      	beq.n	80040fc <PIL_BSRVS_messageHandler+0x250>
 80040d2:	f8d1 3032 	ldr.w	r3, [r1, #50]	@ 0x32
 80040d6:	6243      	str	r3, [r0, #36]	@ 0x24
 80040d8:	f1bc 0f0a 	cmp.w	ip, #10
 80040dc:	f8c2 302e 	str.w	r3, [r2, #46]	@ 0x2e
 80040e0:	d00c      	beq.n	80040fc <PIL_BSRVS_messageHandler+0x250>
 80040e2:	f8d1 3036 	ldr.w	r3, [r1, #54]	@ 0x36
 80040e6:	6283      	str	r3, [r0, #40]	@ 0x28
 80040e8:	f1bc 0f0b 	cmp.w	ip, #11
 80040ec:	f8c2 3032 	str.w	r3, [r2, #50]	@ 0x32
 80040f0:	d004      	beq.n	80040fc <PIL_BSRVS_messageHandler+0x250>
 80040f2:	f8d1 303a 	ldr.w	r3, [r1, #58]	@ 0x3a
 80040f6:	62c3      	str	r3, [r0, #44]	@ 0x2c
 80040f8:	f8c2 3036 	str.w	r3, [r2, #54]	@ 0x36
 80040fc:	ebb6 0f4c 	cmp.w	r6, ip, lsl #1
 8004100:	ea4f 034c 	mov.w	r3, ip, lsl #1
 8004104:	d007      	beq.n	8004116 <PIL_BSRVS_messageHandler+0x26a>
 8004106:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800410a:	89c9      	ldrh	r1, [r1, #14]
 800410c:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
 8004110:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8004114:	8159      	strh	r1, [r3, #10]
 8004116:	3604      	adds	r6, #4
 8004118:	8016      	strh	r6, [r2, #0]
 800411a:	2d00      	cmp	r5, #0
 800411c:	d14e      	bne.n	80041bc <PIL_BSRVS_messageHandler+0x310>
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d04b      	beq.n	80041bc <PIL_BSRVS_messageHandler+0x310>
 8004124:	4628      	mov	r0, r5
 8004126:	4798      	blx	r3
 8004128:	2001      	movs	r0, #1
 800412a:	e6cf      	b.n	8003ecc <PIL_BSRVS_messageHandler+0x20>
 800412c:	f8b0 00b8 	ldrh.w	r0, [r0, #184]	@ 0xb8
 8004130:	2800      	cmp	r0, #0
 8004132:	d039      	beq.n	80041a8 <PIL_BSRVS_messageHandler+0x2fc>
 8004134:	2003      	movs	r0, #3
 8004136:	f884 00ba 	strb.w	r0, [r4, #186]	@ 0xba
 800413a:	497a      	ldr	r1, [pc, #488]	@ (8004324 <PIL_BSRVS_messageHandler+0x478>)
 800413c:	2000      	movs	r0, #0
 800413e:	f8a4 00bc 	strh.w	r0, [r4, #188]	@ 0xbc
 8004142:	2001      	movs	r0, #1
 8004144:	8093      	strh	r3, [r2, #4]
 8004146:	6011      	str	r1, [r2, #0]
 8004148:	e6c0      	b.n	8003ecc <PIL_BSRVS_messageHandler+0x20>
 800414a:	4977      	ldr	r1, [pc, #476]	@ (8004328 <PIL_BSRVS_messageHandler+0x47c>)
 800414c:	6011      	str	r1, [r2, #0]
 800414e:	f44f 13f0 	mov.w	r3, #1966080	@ 0x1e0000
 8004152:	6053      	str	r3, [r2, #4]
 8004154:	2001      	movs	r0, #1
 8004156:	e6b9      	b.n	8003ecc <PIL_BSRVS_messageHandler+0x20>
 8004158:	88c8      	ldrh	r0, [r1, #6]
 800415a:	2802      	cmp	r0, #2
 800415c:	f47f aebd 	bne.w	8003eda <PIL_BSRVS_messageHandler+0x2e>
 8004160:	f894 00ba 	ldrb.w	r0, [r4, #186]	@ 0xba
 8004164:	890f      	ldrh	r7, [r1, #8]
 8004166:	894d      	ldrh	r5, [r1, #10]
 8004168:	89ce      	ldrh	r6, [r1, #14]
 800416a:	2801      	cmp	r0, #1
 800416c:	f000 80a6 	beq.w	80042bc <PIL_BSRVS_messageHandler+0x410>
 8004170:	f884 30ba 	strb.w	r3, [r4, #186]	@ 0xba
 8004174:	2100      	movs	r1, #0
 8004176:	eb04 0041 	add.w	r0, r4, r1, lsl #1
 800417a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800417e:	eb05 4507 	add.w	r5, r5, r7, lsl #16
 8004182:	0876      	lsrs	r6, r6, #1
 8004184:	f8a0 607c 	strh.w	r6, [r0, #124]	@ 0x7c
 8004188:	604d      	str	r5, [r1, #4]
 800418a:	4866      	ldr	r0, [pc, #408]	@ (8004324 <PIL_BSRVS_messageHandler+0x478>)
 800418c:	f8a4 30b8 	strh.w	r3, [r4, #184]	@ 0xb8
 8004190:	2101      	movs	r1, #1
 8004192:	6010      	str	r0, [r2, #0]
 8004194:	8091      	strh	r1, [r2, #4]
 8004196:	4608      	mov	r0, r1
 8004198:	e698      	b.n	8003ecc <PIL_BSRVS_messageHandler+0x20>
 800419a:	f890 30ba 	ldrb.w	r3, [r0, #186]	@ 0xba
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d00e      	beq.n	80041c0 <PIL_BSRVS_messageHandler+0x314>
 80041a2:	8011      	strh	r1, [r2, #0]
 80041a4:	4608      	mov	r0, r1
 80041a6:	e691      	b.n	8003ecc <PIL_BSRVS_messageHandler+0x20>
 80041a8:	237f      	movs	r3, #127	@ 0x7f
 80041aa:	8053      	strh	r3, [r2, #2]
 80041ac:	8848      	ldrh	r0, [r1, #2]
 80041ae:	2122      	movs	r1, #34	@ 0x22
 80041b0:	e697      	b.n	8003ee2 <PIL_BSRVS_messageHandler+0x36>
 80041b2:	237f      	movs	r3, #127	@ 0x7f
 80041b4:	8053      	strh	r3, [r2, #2]
 80041b6:	8848      	ldrh	r0, [r1, #2]
 80041b8:	2118      	movs	r1, #24
 80041ba:	e692      	b.n	8003ee2 <PIL_BSRVS_messageHandler+0x36>
 80041bc:	2001      	movs	r0, #1
 80041be:	e685      	b.n	8003ecc <PIL_BSRVS_messageHandler+0x20>
 80041c0:	f8b0 00bc 	ldrh.w	r0, [r0, #188]	@ 0xbc
 80041c4:	eb04 0180 	add.w	r1, r4, r0, lsl #2
 80041c8:	eb04 0340 	add.w	r3, r4, r0, lsl #1
 80041cc:	6849      	ldr	r1, [r1, #4]
 80041ce:	f8b3 507c 	ldrh.w	r5, [r3, #124]	@ 0x7c
 80041d2:	4b56      	ldr	r3, [pc, #344]	@ (800432c <PIL_BSRVS_messageHandler+0x480>)
 80041d4:	f8c2 3002 	str.w	r3, [r2, #2]
 80041d8:	0c0b      	lsrs	r3, r1, #16
 80041da:	8111      	strh	r1, [r2, #8]
 80041dc:	80d3      	strh	r3, [r2, #6]
 80041de:	2d00      	cmp	r5, #0
 80041e0:	d04e      	beq.n	8004280 <PIL_BSRVS_messageHandler+0x3d4>
 80041e2:	f102 060a 	add.w	r6, r2, #10
 80041e6:	1c8f      	adds	r7, r1, #2
 80041e8:	1e6b      	subs	r3, r5, #1
 80041ea:	42be      	cmp	r6, r7
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	f000 8088 	beq.w	8004302 <PIL_BSRVS_messageHandler+0x456>
 80041f2:	2b09      	cmp	r3, #9
 80041f4:	f240 8085 	bls.w	8004302 <PIL_BSRVS_messageHandler+0x456>
 80041f8:	680b      	ldr	r3, [r1, #0]
 80041fa:	f8c2 300a 	str.w	r3, [r2, #10]
 80041fe:	684b      	ldr	r3, [r1, #4]
 8004200:	f8c2 300e 	str.w	r3, [r2, #14]
 8004204:	688b      	ldr	r3, [r1, #8]
 8004206:	f8c2 3012 	str.w	r3, [r2, #18]
 800420a:	68cb      	ldr	r3, [r1, #12]
 800420c:	f8c2 3016 	str.w	r3, [r2, #22]
 8004210:	690b      	ldr	r3, [r1, #16]
 8004212:	f8c2 301a 	str.w	r3, [r2, #26]
 8004216:	086b      	lsrs	r3, r5, #1
 8004218:	2b05      	cmp	r3, #5
 800421a:	d025      	beq.n	8004268 <PIL_BSRVS_messageHandler+0x3bc>
 800421c:	694e      	ldr	r6, [r1, #20]
 800421e:	f8c2 601e 	str.w	r6, [r2, #30]
 8004222:	2b06      	cmp	r3, #6
 8004224:	d020      	beq.n	8004268 <PIL_BSRVS_messageHandler+0x3bc>
 8004226:	698e      	ldr	r6, [r1, #24]
 8004228:	f8c2 6022 	str.w	r6, [r2, #34]	@ 0x22
 800422c:	2b07      	cmp	r3, #7
 800422e:	d01b      	beq.n	8004268 <PIL_BSRVS_messageHandler+0x3bc>
 8004230:	69ce      	ldr	r6, [r1, #28]
 8004232:	f8c2 6026 	str.w	r6, [r2, #38]	@ 0x26
 8004236:	2b08      	cmp	r3, #8
 8004238:	d016      	beq.n	8004268 <PIL_BSRVS_messageHandler+0x3bc>
 800423a:	6a0e      	ldr	r6, [r1, #32]
 800423c:	f8c2 602a 	str.w	r6, [r2, #42]	@ 0x2a
 8004240:	2b09      	cmp	r3, #9
 8004242:	d011      	beq.n	8004268 <PIL_BSRVS_messageHandler+0x3bc>
 8004244:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 8004246:	f8c2 602e 	str.w	r6, [r2, #46]	@ 0x2e
 800424a:	2b0a      	cmp	r3, #10
 800424c:	d00c      	beq.n	8004268 <PIL_BSRVS_messageHandler+0x3bc>
 800424e:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
 8004250:	f8c2 6032 	str.w	r6, [r2, #50]	@ 0x32
 8004254:	2b0b      	cmp	r3, #11
 8004256:	d007      	beq.n	8004268 <PIL_BSRVS_messageHandler+0x3bc>
 8004258:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 800425a:	f8c2 6036 	str.w	r6, [r2, #54]	@ 0x36
 800425e:	2b0c      	cmp	r3, #12
 8004260:	bf1c      	itt	ne
 8004262:	6b0b      	ldrne	r3, [r1, #48]	@ 0x30
 8004264:	f8c2 303a 	strne.w	r3, [r2, #58]	@ 0x3a
 8004268:	f025 0601 	bic.w	r6, r5, #1
 800426c:	42ae      	cmp	r6, r5
 800426e:	b2b3      	uxth	r3, r6
 8004270:	d006      	beq.n	8004280 <PIL_BSRVS_messageHandler+0x3d4>
 8004272:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8004276:	3304      	adds	r3, #4
 8004278:	b29b      	uxth	r3, r3
 800427a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800427e:	8059      	strh	r1, [r3, #2]
 8004280:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	@ 0xb8
 8004284:	3001      	adds	r0, #1
 8004286:	b280      	uxth	r0, r0
 8004288:	3504      	adds	r5, #4
 800428a:	4283      	cmp	r3, r0
 800428c:	8015      	strh	r5, [r2, #0]
 800428e:	f8a4 00bc 	strh.w	r0, [r4, #188]	@ 0xbc
 8004292:	d893      	bhi.n	80041bc <PIL_BSRVS_messageHandler+0x310>
 8004294:	2302      	movs	r3, #2
 8004296:	f884 30ba 	strb.w	r3, [r4, #186]	@ 0xba
 800429a:	2001      	movs	r0, #1
 800429c:	e616      	b.n	8003ecc <PIL_BSRVS_messageHandler+0x20>
 800429e:	4643      	mov	r3, r8
 80042a0:	4630      	mov	r0, r6
 80042a2:	e6b5      	b.n	8004010 <PIL_BSRVS_messageHandler+0x164>
 80042a4:	1e99      	subs	r1, r3, #2
 80042a6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80042aa:	f102 0008 	add.w	r0, r2, #8
 80042ae:	f831 4f02 	ldrh.w	r4, [r1, #2]!
 80042b2:	f820 4f02 	strh.w	r4, [r0, #2]!
 80042b6:	4299      	cmp	r1, r3
 80042b8:	d1f9      	bne.n	80042ae <PIL_BSRVS_messageHandler+0x402>
 80042ba:	e682      	b.n	8003fc2 <PIL_BSRVS_messageHandler+0x116>
 80042bc:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	@ 0xb8
 80042c0:	2b1d      	cmp	r3, #29
 80042c2:	d92a      	bls.n	800431a <PIL_BSRVS_messageHandler+0x46e>
 80042c4:	237f      	movs	r3, #127	@ 0x7f
 80042c6:	8053      	strh	r3, [r2, #2]
 80042c8:	884c      	ldrh	r4, [r1, #2]
 80042ca:	8094      	strh	r4, [r2, #4]
 80042cc:	2116      	movs	r1, #22
 80042ce:	2303      	movs	r3, #3
 80042d0:	80d1      	strh	r1, [r2, #6]
 80042d2:	8013      	strh	r3, [r2, #0]
 80042d4:	e5fa      	b.n	8003ecc <PIL_BSRVS_messageHandler+0x20>
 80042d6:	f06f 030b 	mvn.w	r3, #11
 80042da:	1a5b      	subs	r3, r3, r1
 80042dc:	f101 0e0e 	add.w	lr, r1, #14
 80042e0:	4403      	add	r3, r0
 80042e2:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
 80042e6:	310c      	adds	r1, #12
 80042e8:	f102 0708 	add.w	r7, r2, #8
 80042ec:	eb03 0c01 	add.w	ip, r3, r1
 80042f0:	f831 0f02 	ldrh.w	r0, [r1, #2]!
 80042f4:	f8ac 0000 	strh.w	r0, [ip]
 80042f8:	4571      	cmp	r1, lr
 80042fa:	f827 0f02 	strh.w	r0, [r7, #2]!
 80042fe:	d1f5      	bne.n	80042ec <PIL_BSRVS_messageHandler+0x440>
 8004300:	e709      	b.n	8004116 <PIL_BSRVS_messageHandler+0x26a>
 8004302:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8004306:	f102 0608 	add.w	r6, r2, #8
 800430a:	3902      	subs	r1, #2
 800430c:	f831 7f02 	ldrh.w	r7, [r1, #2]!
 8004310:	f826 7f02 	strh.w	r7, [r6, #2]!
 8004314:	4299      	cmp	r1, r3
 8004316:	d1f9      	bne.n	800430c <PIL_BSRVS_messageHandler+0x460>
 8004318:	e7b2      	b.n	8004280 <PIL_BSRVS_messageHandler+0x3d4>
 800431a:	4619      	mov	r1, r3
 800431c:	3301      	adds	r3, #1
 800431e:	b29b      	uxth	r3, r3
 8004320:	e729      	b.n	8004176 <PIL_BSRVS_messageHandler+0x2ca>
 8004322:	bf00      	nop
 8004324:	00700002 	.word	0x00700002
 8004328:	00700003 	.word	0x00700003
 800432c:	00020047 	.word	0x00020047

08004330 <PIL_PBRIDGE_init>:
 8004330:	2927      	cmp	r1, #39	@ 0x27
 8004332:	bf98      	it	ls
 8004334:	2000      	movls	r0, #0
 8004336:	4770      	bx	lr

08004338 <PIL_PBRIDGE_configure>:
 8004338:	6001      	str	r1, [r0, #0]
 800433a:	4770      	bx	lr

0800433c <PIL_PBRIDGE_setProtocol>:
 800433c:	f101 3cff 	add.w	ip, r1, #4294967295
 8004340:	f1bc 0f02 	cmp.w	ip, #2
 8004344:	d821      	bhi.n	800438a <PIL_PBRIDGE_setProtocol+0x4e>
 8004346:	b410      	push	{r4}
 8004348:	1c54      	adds	r4, r2, #1
 800434a:	f1a3 0c02 	sub.w	ip, r3, #2
 800434e:	4423      	add	r3, r4
 8004350:	6143      	str	r3, [r0, #20]
 8004352:	3301      	adds	r3, #1
 8004354:	8101      	strh	r1, [r0, #8]
 8004356:	6183      	str	r3, [r0, #24]
 8004358:	1c91      	adds	r1, r2, #2
 800435a:	2300      	movs	r3, #0
 800435c:	61c2      	str	r2, [r0, #28]
 800435e:	f8a0 c024 	strh.w	ip, [r0, #36]	@ 0x24
 8004362:	60c4      	str	r4, [r0, #12]
 8004364:	6101      	str	r1, [r0, #16]
 8004366:	7053      	strb	r3, [r2, #1]
 8004368:	6942      	ldr	r2, [r0, #20]
 800436a:	7013      	strb	r3, [r2, #0]
 800436c:	8902      	ldrh	r2, [r0, #8]
 800436e:	2a02      	cmp	r2, #2
 8004370:	d007      	beq.n	8004382 <PIL_PBRIDGE_setProtocol+0x46>
 8004372:	69c2      	ldr	r2, [r0, #28]
 8004374:	7013      	strb	r3, [r2, #0]
 8004376:	2300      	movs	r3, #0
 8004378:	8403      	strh	r3, [r0, #32]
 800437a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800437e:	2001      	movs	r0, #1
 8004380:	4770      	bx	lr
 8004382:	69c3      	ldr	r3, [r0, #28]
 8004384:	2201      	movs	r2, #1
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	e7f5      	b.n	8004376 <PIL_PBRIDGE_setProtocol+0x3a>
 800438a:	2000      	movs	r0, #0
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop

08004390 <PIL_PBRIDGE_poll>:
 8004390:	b570      	push	{r4, r5, r6, lr}
 8004392:	8903      	ldrh	r3, [r0, #8]
 8004394:	2b02      	cmp	r3, #2
 8004396:	b082      	sub	sp, #8
 8004398:	4604      	mov	r4, r0
 800439a:	d005      	beq.n	80043a8 <PIL_PBRIDGE_poll+0x18>
 800439c:	f023 0302 	bic.w	r3, r3, #2
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d012      	beq.n	80043ca <PIL_PBRIDGE_poll+0x3a>
 80043a4:	b002      	add	sp, #8
 80043a6:	bd70      	pop	{r4, r5, r6, pc}
 80043a8:	69c3      	ldr	r3, [r0, #28]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	d060      	beq.n	8004474 <PIL_PBRIDGE_poll+0xe4>
 80043b2:	2a02      	cmp	r2, #2
 80043b4:	68c3      	ldr	r3, [r0, #12]
 80043b6:	d132      	bne.n	800441e <PIL_PBRIDGE_poll+0x8e>
 80043b8:	2500      	movs	r5, #0
 80043ba:	701d      	strb	r5, [r3, #0]
 80043bc:	6943      	ldr	r3, [r0, #20]
 80043be:	781e      	ldrb	r6, [r3, #0]
 80043c0:	bb0e      	cbnz	r6, 8004406 <PIL_PBRIDGE_poll+0x76>
 80043c2:	69c3      	ldr	r3, [r0, #28]
 80043c4:	2201      	movs	r2, #1
 80043c6:	701a      	strb	r2, [r3, #0]
 80043c8:	e7ec      	b.n	80043a4 <PIL_PBRIDGE_poll+0x14>
 80043ca:	69c2      	ldr	r2, [r0, #28]
 80043cc:	7813      	ldrb	r3, [r2, #0]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	b2d9      	uxtb	r1, r3
 80043d2:	d0e7      	beq.n	80043a4 <PIL_PBRIDGE_poll+0x14>
 80043d4:	2902      	cmp	r1, #2
 80043d6:	d009      	beq.n	80043ec <PIL_PBRIDGE_poll+0x5c>
 80043d8:	68c3      	ldr	r3, [r0, #12]
 80043da:	8c81      	ldrh	r1, [r0, #36]	@ 0x24
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	4299      	cmp	r1, r3
 80043e0:	d84b      	bhi.n	800447a <PIL_PBRIDGE_poll+0xea>
 80043e2:	2100      	movs	r1, #0
 80043e4:	2301      	movs	r3, #1
 80043e6:	8461      	strh	r1, [r4, #34]	@ 0x22
 80043e8:	7013      	strb	r3, [r2, #0]
 80043ea:	e7db      	b.n	80043a4 <PIL_PBRIDGE_poll+0x14>
 80043ec:	68c2      	ldr	r2, [r0, #12]
 80043ee:	2300      	movs	r3, #0
 80043f0:	7013      	strb	r3, [r2, #0]
 80043f2:	6942      	ldr	r2, [r0, #20]
 80043f4:	8c41      	ldrh	r1, [r0, #34]	@ 0x22
 80043f6:	7810      	ldrb	r0, [r2, #0]
 80043f8:	4281      	cmp	r1, r0
 80043fa:	d346      	bcc.n	800448a <PIL_PBRIDGE_poll+0xfa>
 80043fc:	7013      	strb	r3, [r2, #0]
 80043fe:	69e2      	ldr	r2, [r4, #28]
 8004400:	7013      	strb	r3, [r2, #0]
 8004402:	b002      	add	sp, #8
 8004404:	bd70      	pop	{r4, r5, r6, pc}
 8004406:	69a3      	ldr	r3, [r4, #24]
 8004408:	6820      	ldr	r0, [r4, #0]
 800440a:	5d59      	ldrb	r1, [r3, r5]
 800440c:	3501      	adds	r5, #1
 800440e:	f7ff f9f9 	bl	8003804 <PIL_SLINK_in>
 8004412:	b2ab      	uxth	r3, r5
 8004414:	429e      	cmp	r6, r3
 8004416:	d8f6      	bhi.n	8004406 <PIL_PBRIDGE_poll+0x76>
 8004418:	6962      	ldr	r2, [r4, #20]
 800441a:	2300      	movs	r3, #0
 800441c:	e7ee      	b.n	80043fc <PIL_PBRIDGE_poll+0x6c>
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1bd      	bne.n	80043a4 <PIL_PBRIDGE_poll+0x14>
 8004428:	6800      	ldr	r0, [r0, #0]
 800442a:	f10d 0106 	add.w	r1, sp, #6
 800442e:	f7ff f9ed 	bl	800380c <PIL_SLINK_out>
 8004432:	b280      	uxth	r0, r0
 8004434:	2800      	cmp	r0, #0
 8004436:	d0b5      	beq.n	80043a4 <PIL_PBRIDGE_poll+0x14>
 8004438:	8c23      	ldrh	r3, [r4, #32]
 800443a:	6922      	ldr	r2, [r4, #16]
 800443c:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8004440:	54d1      	strb	r1, [r2, r3]
 8004442:	8c23      	ldrh	r3, [r4, #32]
 8004444:	3301      	adds	r3, #1
 8004446:	2802      	cmp	r0, #2
 8004448:	f10d 0106 	add.w	r1, sp, #6
 800444c:	6820      	ldr	r0, [r4, #0]
 800444e:	8423      	strh	r3, [r4, #32]
 8004450:	bf08      	it	eq
 8004452:	2501      	moveq	r5, #1
 8004454:	f7ff f9da 	bl	800380c <PIL_SLINK_out>
 8004458:	b280      	uxth	r0, r0
 800445a:	2800      	cmp	r0, #0
 800445c:	d1ec      	bne.n	8004438 <PIL_PBRIDGE_poll+0xa8>
 800445e:	2d00      	cmp	r5, #0
 8004460:	d0a0      	beq.n	80043a4 <PIL_PBRIDGE_poll+0x14>
 8004462:	68e3      	ldr	r3, [r4, #12]
 8004464:	f894 2020 	ldrb.w	r2, [r4, #32]
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	69e3      	ldr	r3, [r4, #28]
 800446c:	2201      	movs	r2, #1
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	8420      	strh	r0, [r4, #32]
 8004472:	e797      	b.n	80043a4 <PIL_PBRIDGE_poll+0x14>
 8004474:	be00      	bkpt	0x0000
 8004476:	b002      	add	sp, #8
 8004478:	bd70      	pop	{r4, r5, r6, pc}
 800447a:	6800      	ldr	r0, [r0, #0]
 800447c:	f10d 0106 	add.w	r1, sp, #6
 8004480:	f7ff f9c4 	bl	800380c <PIL_SLINK_out>
 8004484:	b950      	cbnz	r0, 800449c <PIL_PBRIDGE_poll+0x10c>
 8004486:	69e2      	ldr	r2, [r4, #28]
 8004488:	e7ab      	b.n	80043e2 <PIL_PBRIDGE_poll+0x52>
 800448a:	69a3      	ldr	r3, [r4, #24]
 800448c:	6820      	ldr	r0, [r4, #0]
 800448e:	5c59      	ldrb	r1, [r3, r1]
 8004490:	f7ff f9b8 	bl	8003804 <PIL_SLINK_in>
 8004494:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8004496:	3301      	adds	r3, #1
 8004498:	8463      	strh	r3, [r4, #34]	@ 0x22
 800449a:	e783      	b.n	80043a4 <PIL_PBRIDGE_poll+0x14>
 800449c:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	54d1      	strb	r1, [r2, r3]
 80044aa:	68e2      	ldr	r2, [r4, #12]
 80044ac:	7813      	ldrb	r3, [r2, #0]
 80044ae:	3301      	adds	r3, #1
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	7013      	strb	r3, [r2, #0]
 80044b4:	e776      	b.n	80043a4 <PIL_PBRIDGE_poll+0x14>
 80044b6:	bf00      	nop

080044b8 <PIL_RBUF_reset>:
 80044b8:	2300      	movs	r3, #0
 80044ba:	6003      	str	r3, [r0, #0]
 80044bc:	8083      	strh	r3, [r0, #4]
 80044be:	7183      	strb	r3, [r0, #6]
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop

080044c4 <PIL_RBUF_isEmpty>:
 80044c4:	8880      	ldrh	r0, [r0, #4]
 80044c6:	fab0 f080 	clz	r0, r0
 80044ca:	0940      	lsrs	r0, r0, #5
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop

080044d0 <PIL_RBUF_push>:
 80044d0:	b538      	push	{r3, r4, r5, lr}
 80044d2:	8883      	ldrh	r3, [r0, #4]
 80044d4:	2b64      	cmp	r3, #100	@ 0x64
 80044d6:	4604      	mov	r4, r0
 80044d8:	d012      	beq.n	8004500 <PIL_RBUF_push+0x30>
 80044da:	460d      	mov	r5, r1
 80044dc:	f7ff fcd4 	bl	8003e88 <PIL_DisableInt>
 80044e0:	8863      	ldrh	r3, [r4, #2]
 80044e2:	18e2      	adds	r2, r4, r3
 80044e4:	3301      	adds	r3, #1
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b64      	cmp	r3, #100	@ 0x64
 80044ea:	71d5      	strb	r5, [r2, #7]
 80044ec:	bf08      	it	eq
 80044ee:	2300      	moveq	r3, #0
 80044f0:	8063      	strh	r3, [r4, #2]
 80044f2:	88a3      	ldrh	r3, [r4, #4]
 80044f4:	3301      	adds	r3, #1
 80044f6:	80a3      	strh	r3, [r4, #4]
 80044f8:	f7ff fcca 	bl	8003e90 <PIL_RestoreInt>
 80044fc:	2001      	movs	r0, #1
 80044fe:	bd38      	pop	{r3, r4, r5, pc}
 8004500:	f7ff fcc2 	bl	8003e88 <PIL_DisableInt>
 8004504:	2301      	movs	r3, #1
 8004506:	71a3      	strb	r3, [r4, #6]
 8004508:	f7ff fcc2 	bl	8003e90 <PIL_RestoreInt>
 800450c:	2000      	movs	r0, #0
 800450e:	bd38      	pop	{r3, r4, r5, pc}

08004510 <PIL_RBUF_pop>:
 8004510:	b538      	push	{r3, r4, r5, lr}
 8004512:	4604      	mov	r4, r0
 8004514:	8880      	ldrh	r0, [r0, #4]
 8004516:	b900      	cbnz	r0, 800451a <PIL_RBUF_pop+0xa>
 8004518:	bd38      	pop	{r3, r4, r5, pc}
 800451a:	460d      	mov	r5, r1
 800451c:	f7ff fcb4 	bl	8003e88 <PIL_DisableInt>
 8004520:	8823      	ldrh	r3, [r4, #0]
 8004522:	4423      	add	r3, r4
 8004524:	79db      	ldrb	r3, [r3, #7]
 8004526:	802b      	strh	r3, [r5, #0]
 8004528:	8823      	ldrh	r3, [r4, #0]
 800452a:	3301      	adds	r3, #1
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b64      	cmp	r3, #100	@ 0x64
 8004530:	bf08      	it	eq
 8004532:	2300      	moveq	r3, #0
 8004534:	8023      	strh	r3, [r4, #0]
 8004536:	88a3      	ldrh	r3, [r4, #4]
 8004538:	3b01      	subs	r3, #1
 800453a:	80a3      	strh	r3, [r4, #4]
 800453c:	f7ff fca8 	bl	8003e90 <PIL_RestoreInt>
 8004540:	2001      	movs	r0, #1
 8004542:	bd38      	pop	{r3, r4, r5, pc}

08004544 <memset>:
 8004544:	4402      	add	r2, r0
 8004546:	4603      	mov	r3, r0
 8004548:	4293      	cmp	r3, r2
 800454a:	d100      	bne.n	800454e <memset+0xa>
 800454c:	4770      	bx	lr
 800454e:	f803 1b01 	strb.w	r1, [r3], #1
 8004552:	e7f9      	b.n	8004548 <memset+0x4>

08004554 <__libc_init_array>:
 8004554:	b570      	push	{r4, r5, r6, lr}
 8004556:	4d0d      	ldr	r5, [pc, #52]	@ (800458c <__libc_init_array+0x38>)
 8004558:	4c0d      	ldr	r4, [pc, #52]	@ (8004590 <__libc_init_array+0x3c>)
 800455a:	1b64      	subs	r4, r4, r5
 800455c:	10a4      	asrs	r4, r4, #2
 800455e:	2600      	movs	r6, #0
 8004560:	42a6      	cmp	r6, r4
 8004562:	d109      	bne.n	8004578 <__libc_init_array+0x24>
 8004564:	4d0b      	ldr	r5, [pc, #44]	@ (8004594 <__libc_init_array+0x40>)
 8004566:	4c0c      	ldr	r4, [pc, #48]	@ (8004598 <__libc_init_array+0x44>)
 8004568:	f000 f818 	bl	800459c <_init>
 800456c:	1b64      	subs	r4, r4, r5
 800456e:	10a4      	asrs	r4, r4, #2
 8004570:	2600      	movs	r6, #0
 8004572:	42a6      	cmp	r6, r4
 8004574:	d105      	bne.n	8004582 <__libc_init_array+0x2e>
 8004576:	bd70      	pop	{r4, r5, r6, pc}
 8004578:	f855 3b04 	ldr.w	r3, [r5], #4
 800457c:	4798      	blx	r3
 800457e:	3601      	adds	r6, #1
 8004580:	e7ee      	b.n	8004560 <__libc_init_array+0xc>
 8004582:	f855 3b04 	ldr.w	r3, [r5], #4
 8004586:	4798      	blx	r3
 8004588:	3601      	adds	r6, #1
 800458a:	e7f2      	b.n	8004572 <__libc_init_array+0x1e>
 800458c:	08004688 	.word	0x08004688
 8004590:	08004688 	.word	0x08004688
 8004594:	08004688 	.word	0x08004688
 8004598:	0800468c 	.word	0x0800468c

0800459c <_init>:
 800459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459e:	bf00      	nop
 80045a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a2:	bc08      	pop	{r3}
 80045a4:	469e      	mov	lr, r3
 80045a6:	4770      	bx	lr

080045a8 <_fini>:
 80045a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045aa:	bf00      	nop
 80045ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ae:	bc08      	pop	{r3}
 80045b0:	469e      	mov	lr, r3
 80045b2:	4770      	bx	lr

080045b4 <PIL_D_ExtendedComTimingMs>:
 80045b4:	07d0                                        ..

080045b6 <PIL_D_ParallelComTimeoutMs>:
 80045b6:	03e8                                        ..

080045b8 <PIL_D_ParallelComBufferLength>:
 80045b8:	0100 0000                                   ....

080045bc <PIL_D_ParallelComBufferAddress>:
 80045bc:	0000 2000                                   ... 

080045c0 <PIL_D_ParallelComProtocol>:
 80045c0:	0003                                        ..

080045c2 <PIL_D_StationAddress>:
	...

080045c4 <PIL_D_FirmwareDescription>:
 80045c4:	5453 334d 2032 7250 6a6f 6365 0074          STM32 Project.

080045d2 <PIL_D_FrameworkVersion>:
 80045d2:	0500                                        ..

080045d4 <PIL_D_CompiledBy>:
 80045d4:	4c50 4345 2053 6f43 6564 0072               PLECS Coder.

080045e0 <PIL_D_CompiledDate>:
 80045e0:	3530 312f 2f34 3032 3432 3120 3a30 3934     05/14/2024 10:49
 80045f0:	4120 004d                                    AM.

080045f4 <PIL_D_Guid>:
 80045f4:	3c09 5e97 2ddb 40b8                         .<.^.-.@

080045fc <PIL_C_ExtMode_ExtModeSignals_Size>:
 80045fc:	0002 0000                                   ....

08004600 <PIL_C_ExtMode_ExtModeSignals_Ptr>:
 8004600:	4648 0800                                   HF..

08004604 <PIL_C_ExtMode_checksum_Ptr>:
 8004604:	4640 0800                                   @F..

08004608 <PIL_C_ExtMode_sampleTime_Ptr>:
 8004608:	4644 0800                                   DF..

0800460c <PIL_C_ExtMode_targetPointer_Size>:
 800460c:	0004 0000                                   ....

08004610 <PIL_C_ExtMode_targetFloat_Size>:
 8004610:	0004 0000                                   ....
