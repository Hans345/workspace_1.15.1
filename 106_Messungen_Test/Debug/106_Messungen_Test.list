
106_Messungen_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006950  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000088c  08006b30  08006b30  00007b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073bc  080073bc  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  080073bc  080073bc  000083bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073c4  080073c4  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073c4  080073c4  000083c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073c8  080073c8  000083c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080073cc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  20000064  08007430  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08007430  000093a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a72d  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003255  00000000  00000000  000237c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e0  00000000  00000000  00026a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001291  00000000  00000000  000281f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029821  00000000  00000000  00029489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bf8a  00000000  00000000  00052caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001157d4  00000000  00000000  0006ec34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00184408  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c40  00000000  00000000  0018444c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0018b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006b18 	.word	0x08006b18

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	08006b18 	.word	0x08006b18

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	4604      	mov	r4, r0
 80005c8:	4608      	mov	r0, r1
 80005ca:	4611      	mov	r1, r2
 80005cc:	461a      	mov	r2, r3
 80005ce:	4623      	mov	r3, r4
 80005d0:	80fb      	strh	r3, [r7, #6]
 80005d2:	4603      	mov	r3, r0
 80005d4:	80bb      	strh	r3, [r7, #4]
 80005d6:	460b      	mov	r3, r1
 80005d8:	807b      	strh	r3, [r7, #2]
 80005da:	4613      	mov	r3, r2
 80005dc:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80005de:	88f8      	ldrh	r0, [r7, #6]
 80005e0:	88b9      	ldrh	r1, [r7, #4]
 80005e2:	887a      	ldrh	r2, [r7, #2]
 80005e4:	883c      	ldrh	r4, [r7, #0]
 80005e6:	8b3b      	ldrh	r3, [r7, #24]
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	4623      	mov	r3, r4
 80005ec:	f000 fa88 	bl	8000b00 <ST7735_FillRectangle>
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd90      	pop	{r4, r7, pc}

080005f8 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af02      	add	r7, sp, #8
 80005fe:	4603      	mov	r3, r0
 8000600:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8000602:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <fillScreen+0x2c>)
 8000604:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000608:	4b07      	ldr	r3, [pc, #28]	@ (8000628 <fillScreen+0x30>)
 800060a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	460b      	mov	r3, r1
 8000614:	2100      	movs	r1, #0
 8000616:	2000      	movs	r0, #0
 8000618:	f7ff ffd2 	bl	80005c0 <fillRect>
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000080 	.word	0x20000080
 8000628:	20000082 	.word	0x20000082

0800062c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000636:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063a:	f002 ff91 	bl	8003560 <HAL_GPIO_WritePin>
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}

08000642 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000642:	b580      	push	{r7, lr}
 8000644:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000646:	2201      	movs	r2, #1
 8000648:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800064c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000650:	f002 ff86 	bl	8003560 <HAL_GPIO_WritePin>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <ST7735_Reset>:

void ST7735_Reset()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2140      	movs	r1, #64	@ 0x40
 8000660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000664:	f002 ff7c 	bl	8003560 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000668:	2005      	movs	r0, #5
 800066a:	f001 f8e1 	bl	8001830 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2140      	movs	r1, #64	@ 0x40
 8000672:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000676:	f002 ff73 	bl	8003560 <HAL_GPIO_WritePin>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000690:	4806      	ldr	r0, [pc, #24]	@ (80006ac <ST7735_WriteCommand+0x2c>)
 8000692:	f002 ff65 	bl	8003560 <HAL_GPIO_WritePin>
		{

		}
	#endif
	#ifdef WITHOUT_DMA
		HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000696:	1df9      	adds	r1, r7, #7
 8000698:	f04f 33ff 	mov.w	r3, #4294967295
 800069c:	2201      	movs	r2, #1
 800069e:	4804      	ldr	r0, [pc, #16]	@ (80006b0 <ST7735_WriteCommand+0x30>)
 80006a0:	f004 f883 	bl	80047aa <HAL_SPI_Transmit>
	#endif
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	48000400 	.word	0x48000400
 80006b0:	200000f8 	.word	0x200000f8

080006b4 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006c4:	4807      	ldr	r0, [pc, #28]	@ (80006e4 <ST7735_WriteData+0x30>)
 80006c6:	f002 ff4b 	bl	8003560 <HAL_GPIO_WritePin>
    	{

    	}
	#endif
	#ifdef WITHOUT_DMA
    	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	6879      	ldr	r1, [r7, #4]
 80006d4:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <ST7735_WriteData+0x34>)
 80006d6:	f004 f868 	bl	80047aa <HAL_SPI_Transmit>
	#endif
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	48000400 	.word	0x48000400
 80006e8:	200000f8 	.word	0x200000f8

080006ec <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	1c5a      	adds	r2, r3, #1
 80006f8:	607a      	str	r2, [r7, #4]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80006fe:	e034      	b.n	800076a <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	607a      	str	r2, [r7, #4]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800070a:	7afb      	ldrb	r3, [r7, #11]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ffb7 	bl	8000680 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	607a      	str	r2, [r7, #4]
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800071c:	7abb      	ldrb	r3, [r7, #10]
 800071e:	b29b      	uxth	r3, r3
 8000720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000724:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000726:	7abb      	ldrb	r3, [r7, #10]
 8000728:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800072c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800072e:	7abb      	ldrb	r3, [r7, #10]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d008      	beq.n	8000746 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000734:	7abb      	ldrb	r3, [r7, #10]
 8000736:	4619      	mov	r1, r3
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff ffbb 	bl	80006b4 <ST7735_WriteData>
            addr += numArgs;
 800073e:	7abb      	ldrb	r3, [r7, #10]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	4413      	add	r3, r2
 8000744:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000746:	89bb      	ldrh	r3, [r7, #12]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d00e      	beq.n	800076a <DisplayInit+0x7e>
            ms = *addr++;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	1c5a      	adds	r2, r3, #1
 8000750:	607a      	str	r2, [r7, #4]
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000756:	89bb      	ldrh	r3, [r7, #12]
 8000758:	2bff      	cmp	r3, #255	@ 0xff
 800075a:	d102      	bne.n	8000762 <DisplayInit+0x76>
 800075c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000760:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000762:	89bb      	ldrh	r3, [r7, #12]
 8000764:	4618      	mov	r0, r3
 8000766:	f001 f863 	bl	8001830 <HAL_Delay>
    while(numCommands--) {
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	1e5a      	subs	r2, r3, #1
 800076e:	73fa      	strb	r2, [r7, #15]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d1c5      	bne.n	8000700 <DisplayInit+0x14>
        }
    }
}
 8000774:	bf00      	nop
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	4604      	mov	r4, r0
 8000788:	4608      	mov	r0, r1
 800078a:	4611      	mov	r1, r2
 800078c:	461a      	mov	r2, r3
 800078e:	4623      	mov	r3, r4
 8000790:	71fb      	strb	r3, [r7, #7]
 8000792:	4603      	mov	r3, r0
 8000794:	71bb      	strb	r3, [r7, #6]
 8000796:	460b      	mov	r3, r1
 8000798:	717b      	strb	r3, [r7, #5]
 800079a:	4613      	mov	r3, r2
 800079c:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800079e:	202a      	movs	r0, #42	@ 0x2a
 80007a0:	f7ff ff6e 	bl	8000680 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80007a4:	2300      	movs	r3, #0
 80007a6:	733b      	strb	r3, [r7, #12]
 80007a8:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <ST7735_SetAddressWindow+0x88>)
 80007aa:	781a      	ldrb	r2, [r3, #0]
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4413      	add	r3, r2
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	737b      	strb	r3, [r7, #13]
 80007b4:	2300      	movs	r3, #0
 80007b6:	73bb      	strb	r3, [r7, #14]
 80007b8:	4b13      	ldr	r3, [pc, #76]	@ (8000808 <ST7735_SetAddressWindow+0x88>)
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	797b      	ldrb	r3, [r7, #5]
 80007be:	4413      	add	r3, r2
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2104      	movs	r1, #4
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ff72 	bl	80006b4 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80007d0:	202b      	movs	r0, #43	@ 0x2b
 80007d2:	f7ff ff55 	bl	8000680 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80007d6:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <ST7735_SetAddressWindow+0x8c>)
 80007d8:	781a      	ldrb	r2, [r3, #0]
 80007da:	79bb      	ldrb	r3, [r7, #6]
 80007dc:	4413      	add	r3, r2
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 80007e2:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <ST7735_SetAddressWindow+0x8c>)
 80007e4:	781a      	ldrb	r2, [r3, #0]
 80007e6:	793b      	ldrb	r3, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2104      	movs	r1, #4
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff5d 	bl	80006b4 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80007fa:	202c      	movs	r0, #44	@ 0x2c
 80007fc:	f7ff ff40 	bl	8000680 <ST7735_WriteCommand>
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	bd90      	pop	{r4, r7, pc}
 8000808:	20000087 	.word	0x20000087
 800080c:	20000088 	.word	0x20000088

08000810 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800081a:	f7ff ff07 	bl	800062c <ST7735_Select>
    ST7735_Reset();
 800081e:	f7ff ff1b 	bl	8000658 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000822:	480c      	ldr	r0, [pc, #48]	@ (8000854 <ST7735_Init+0x44>)
 8000824:	f7ff ff62 	bl	80006ec <DisplayInit>
    DisplayInit(init_cmds2);
 8000828:	480b      	ldr	r0, [pc, #44]	@ (8000858 <ST7735_Init+0x48>)
 800082a:	f7ff ff5f 	bl	80006ec <DisplayInit>
    DisplayInit(init_cmds3);
 800082e:	480b      	ldr	r0, [pc, #44]	@ (800085c <ST7735_Init+0x4c>)
 8000830:	f7ff ff5c 	bl	80006ec <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 8000834:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <ST7735_Init+0x50>)
 8000836:	2202      	movs	r2, #2
 8000838:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 800083a:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <ST7735_Init+0x54>)
 800083c:	2203      	movs	r2, #3
 800083e:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f810 	bl	8000868 <ST7735_SetRotation>
    ST7735_Unselect();
 8000848:	f7ff fefb 	bl	8000642 <ST7735_Unselect>

}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	08006b68 	.word	0x08006b68
 8000858:	08006ba0 	.word	0x08006ba0
 800085c:	08006bb0 	.word	0x08006bb0
 8000860:	20000085 	.word	0x20000085
 8000864:	20000086 	.word	0x20000086

08000868 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	f003 0303 	and.w	r3, r3, #3
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b33      	ldr	r3, [pc, #204]	@ (800094c <ST7735_SetRotation+0xe4>)
 8000880:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8000882:	4b32      	ldr	r3, [pc, #200]	@ (800094c <ST7735_SetRotation+0xe4>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b03      	cmp	r3, #3
 8000888:	d84e      	bhi.n	8000928 <ST7735_SetRotation+0xc0>
 800088a:	a201      	add	r2, pc, #4	@ (adr r2, 8000890 <ST7735_SetRotation+0x28>)
 800088c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000890:	080008a1 	.word	0x080008a1
 8000894:	080008c3 	.word	0x080008c3
 8000898:	080008e5 	.word	0x080008e5
 800089c:	08000907 	.word	0x08000907
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80008a0:	23c0      	movs	r3, #192	@ 0xc0
 80008a2:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80008a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000950 <ST7735_SetRotation+0xe8>)
 80008a6:	2280      	movs	r2, #128	@ 0x80
 80008a8:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80008aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000954 <ST7735_SetRotation+0xec>)
 80008ac:	2280      	movs	r2, #128	@ 0x80
 80008ae:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80008b0:	4b29      	ldr	r3, [pc, #164]	@ (8000958 <ST7735_SetRotation+0xf0>)
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	4b29      	ldr	r3, [pc, #164]	@ (800095c <ST7735_SetRotation+0xf4>)
 80008b6:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80008b8:	4b29      	ldr	r3, [pc, #164]	@ (8000960 <ST7735_SetRotation+0xf8>)
 80008ba:	781a      	ldrb	r2, [r3, #0]
 80008bc:	4b29      	ldr	r3, [pc, #164]	@ (8000964 <ST7735_SetRotation+0xfc>)
 80008be:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80008c0:	e032      	b.n	8000928 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80008c2:	23a0      	movs	r3, #160	@ 0xa0
 80008c4:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80008c6:	4b23      	ldr	r3, [pc, #140]	@ (8000954 <ST7735_SetRotation+0xec>)
 80008c8:	2280      	movs	r2, #128	@ 0x80
 80008ca:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80008cc:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <ST7735_SetRotation+0xe8>)
 80008ce:	2280      	movs	r2, #128	@ 0x80
 80008d0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80008d2:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <ST7735_SetRotation+0xf0>)
 80008d4:	781a      	ldrb	r2, [r3, #0]
 80008d6:	4b23      	ldr	r3, [pc, #140]	@ (8000964 <ST7735_SetRotation+0xfc>)
 80008d8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80008da:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <ST7735_SetRotation+0xf8>)
 80008dc:	781a      	ldrb	r2, [r3, #0]
 80008de:	4b1f      	ldr	r3, [pc, #124]	@ (800095c <ST7735_SetRotation+0xf4>)
 80008e0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80008e2:	e021      	b.n	8000928 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80008e4:	2300      	movs	r3, #0
 80008e6:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80008e8:	4b19      	ldr	r3, [pc, #100]	@ (8000950 <ST7735_SetRotation+0xe8>)
 80008ea:	2280      	movs	r2, #128	@ 0x80
 80008ec:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80008ee:	4b19      	ldr	r3, [pc, #100]	@ (8000954 <ST7735_SetRotation+0xec>)
 80008f0:	2280      	movs	r2, #128	@ 0x80
 80008f2:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80008f4:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <ST7735_SetRotation+0xf0>)
 80008f6:	781a      	ldrb	r2, [r3, #0]
 80008f8:	4b18      	ldr	r3, [pc, #96]	@ (800095c <ST7735_SetRotation+0xf4>)
 80008fa:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80008fc:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <ST7735_SetRotation+0xf8>)
 80008fe:	781a      	ldrb	r2, [r3, #0]
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <ST7735_SetRotation+0xfc>)
 8000902:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000904:	e010      	b.n	8000928 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000906:	2360      	movs	r3, #96	@ 0x60
 8000908:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800090a:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <ST7735_SetRotation+0xec>)
 800090c:	2280      	movs	r2, #128	@ 0x80
 800090e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <ST7735_SetRotation+0xe8>)
 8000912:	2280      	movs	r2, #128	@ 0x80
 8000914:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000916:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <ST7735_SetRotation+0xf0>)
 8000918:	781a      	ldrb	r2, [r3, #0]
 800091a:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <ST7735_SetRotation+0xfc>)
 800091c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800091e:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <ST7735_SetRotation+0xf8>)
 8000920:	781a      	ldrb	r2, [r3, #0]
 8000922:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <ST7735_SetRotation+0xf4>)
 8000924:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000926:	bf00      	nop
  }
  ST7735_Select();
 8000928:	f7ff fe80 	bl	800062c <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800092c:	2036      	movs	r0, #54	@ 0x36
 800092e:	f7ff fea7 	bl	8000680 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000932:	f107 030f 	add.w	r3, r7, #15
 8000936:	2101      	movs	r1, #1
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff febb 	bl	80006b4 <ST7735_WriteData>
  ST7735_Unselect();
 800093e:	f7ff fe80 	bl	8000642 <ST7735_Unselect>
}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000084 	.word	0x20000084
 8000950:	20000082 	.word	0x20000082
 8000954:	20000080 	.word	0x20000080
 8000958:	20000085 	.word	0x20000085
 800095c:	20000087 	.word	0x20000087
 8000960:	20000086 	.word	0x20000086
 8000964:	20000088 	.word	0x20000088

08000968 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000968:	b082      	sub	sp, #8
 800096a:	b590      	push	{r4, r7, lr}
 800096c:	b089      	sub	sp, #36	@ 0x24
 800096e:	af00      	add	r7, sp, #0
 8000970:	637b      	str	r3, [r7, #52]	@ 0x34
 8000972:	4603      	mov	r3, r0
 8000974:	80fb      	strh	r3, [r7, #6]
 8000976:	460b      	mov	r3, r1
 8000978:	80bb      	strh	r3, [r7, #4]
 800097a:	4613      	mov	r3, r2
 800097c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	b2d8      	uxtb	r0, r3
 8000982:	88bb      	ldrh	r3, [r7, #4]
 8000984:	b2d9      	uxtb	r1, r3
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800098e:	4413      	add	r3, r2
 8000990:	b2db      	uxtb	r3, r3
 8000992:	3b01      	subs	r3, #1
 8000994:	b2dc      	uxtb	r4, r3
 8000996:	88bb      	ldrh	r3, [r7, #4]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800099e:	4413      	add	r3, r2
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	3b01      	subs	r3, #1
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4622      	mov	r2, r4
 80009a8:	f7ff feea 	bl	8000780 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
 80009b0:	e043      	b.n	8000a3a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80009b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80009b4:	78fb      	ldrb	r3, [r7, #3]
 80009b6:	3b20      	subs	r3, #32
 80009b8:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80009bc:	fb01 f303 	mul.w	r3, r1, r3
 80009c0:	4619      	mov	r1, r3
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	440b      	add	r3, r1
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
 80009d2:	e029      	b.n	8000a28 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80009d4:	697a      	ldr	r2, [r7, #20]
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d00e      	beq.n	8000a02 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80009e4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80009e6:	0a1b      	lsrs	r3, r3, #8
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	743b      	strb	r3, [r7, #16]
 80009ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	2102      	movs	r1, #2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fe5a 	bl	80006b4 <ST7735_WriteData>
 8000a00:	e00f      	b.n	8000a22 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000a02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000a06:	0a1b      	lsrs	r3, r3, #8
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	733b      	strb	r3, [r7, #12]
 8000a0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000a16:	f107 030c 	add.w	r3, r7, #12
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fe49 	bl	80006b4 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	3301      	adds	r3, #1
 8000a26:	61bb      	str	r3, [r7, #24]
 8000a28:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d3cf      	bcc.n	80009d4 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	3301      	adds	r3, #1
 8000a38:	61fb      	str	r3, [r7, #28]
 8000a3a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000a3e:	461a      	mov	r2, r3
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d3b5      	bcc.n	80009b2 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000a46:	bf00      	nop
 8000a48:	bf00      	nop
 8000a4a:	3724      	adds	r7, #36	@ 0x24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000a52:	b002      	add	sp, #8
 8000a54:	4770      	bx	lr
	...

08000a58 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a58:	b082      	sub	sp, #8
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af04      	add	r7, sp, #16
 8000a60:	603a      	str	r2, [r7, #0]
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	4603      	mov	r3, r0
 8000a66:	80fb      	strh	r3, [r7, #6]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000a6c:	f7ff fdde 	bl	800062c <ST7735_Select>

    while(*str) {
 8000a70:	e033      	b.n	8000ada <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	7d3a      	ldrb	r2, [r7, #20]
 8000a76:	4413      	add	r3, r2
 8000a78:	4a1f      	ldr	r2, [pc, #124]	@ (8000af8 <ST7735_WriteString+0xa0>)
 8000a7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	db16      	blt.n	8000ab0 <ST7735_WriteString+0x58>
            x = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000a86:	7d7b      	ldrb	r3, [r7, #21]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	88bb      	ldrh	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000a90:	88bb      	ldrh	r3, [r7, #4]
 8000a92:	7d7a      	ldrb	r2, [r7, #21]
 8000a94:	4413      	add	r3, r2
 8000a96:	4a19      	ldr	r2, [pc, #100]	@ (8000afc <ST7735_WriteString+0xa4>)
 8000a98:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	da21      	bge.n	8000ae4 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b20      	cmp	r3, #32
 8000aa6:	d103      	bne.n	8000ab0 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	603b      	str	r3, [r7, #0]
                continue;
 8000aae:	e014      	b.n	8000ada <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	88b9      	ldrh	r1, [r7, #4]
 8000ab6:	88f8      	ldrh	r0, [r7, #6]
 8000ab8:	8c3b      	ldrh	r3, [r7, #32]
 8000aba:	9302      	str	r3, [sp, #8]
 8000abc:	8bbb      	ldrh	r3, [r7, #28]
 8000abe:	9301      	str	r3, [sp, #4]
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	f7ff ff4f 	bl	8000968 <ST7735_WriteChar>
        x += font.width;
 8000aca:	7d3b      	ldrb	r3, [r7, #20]
 8000acc:	461a      	mov	r2, r3
 8000ace:	88fb      	ldrh	r3, [r7, #6]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	80fb      	strh	r3, [r7, #6]
        str++;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d1c7      	bne.n	8000a72 <ST7735_WriteString+0x1a>
 8000ae2:	e000      	b.n	8000ae6 <ST7735_WriteString+0x8e>
                break;
 8000ae4:	bf00      	nop
    }

    ST7735_Unselect();
 8000ae6:	f7ff fdac 	bl	8000642 <ST7735_Unselect>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000af4:	b002      	add	sp, #8
 8000af6:	4770      	bx	lr
 8000af8:	20000080 	.word	0x20000080
 8000afc:	20000082 	.word	0x20000082

08000b00 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4604      	mov	r4, r0
 8000b08:	4608      	mov	r0, r1
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4623      	mov	r3, r4
 8000b10:	80fb      	strh	r3, [r7, #6]
 8000b12:	4603      	mov	r3, r0
 8000b14:	80bb      	strh	r3, [r7, #4]
 8000b16:	460b      	mov	r3, r1
 8000b18:	807b      	strh	r3, [r7, #2]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	4a38      	ldr	r2, [pc, #224]	@ (8000c04 <ST7735_FillRectangle+0x104>)
 8000b22:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b26:	4293      	cmp	r3, r2
 8000b28:	da67      	bge.n	8000bfa <ST7735_FillRectangle+0xfa>
 8000b2a:	88bb      	ldrh	r3, [r7, #4]
 8000b2c:	4a36      	ldr	r2, [pc, #216]	@ (8000c08 <ST7735_FillRectangle+0x108>)
 8000b2e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b32:	4293      	cmp	r3, r2
 8000b34:	da61      	bge.n	8000bfa <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 8000b36:	88fa      	ldrh	r2, [r7, #6]
 8000b38:	887b      	ldrh	r3, [r7, #2]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a31      	ldr	r2, [pc, #196]	@ (8000c04 <ST7735_FillRectangle+0x104>)
 8000b3e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b42:	4293      	cmp	r3, r2
 8000b44:	dd06      	ble.n	8000b54 <ST7735_FillRectangle+0x54>
 8000b46:	4b2f      	ldr	r3, [pc, #188]	@ (8000c04 <ST7735_FillRectangle+0x104>)
 8000b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	88fb      	ldrh	r3, [r7, #6]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000b54:	88ba      	ldrh	r2, [r7, #4]
 8000b56:	883b      	ldrh	r3, [r7, #0]
 8000b58:	4413      	add	r3, r2
 8000b5a:	4a2b      	ldr	r2, [pc, #172]	@ (8000c08 <ST7735_FillRectangle+0x108>)
 8000b5c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b60:	4293      	cmp	r3, r2
 8000b62:	dd06      	ble.n	8000b72 <ST7735_FillRectangle+0x72>
 8000b64:	4b28      	ldr	r3, [pc, #160]	@ (8000c08 <ST7735_FillRectangle+0x108>)
 8000b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	88bb      	ldrh	r3, [r7, #4]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000b72:	f7ff fd5b 	bl	800062c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	b2d8      	uxtb	r0, r3
 8000b7a:	88bb      	ldrh	r3, [r7, #4]
 8000b7c:	b2d9      	uxtb	r1, r3
 8000b7e:	88fb      	ldrh	r3, [r7, #6]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	4413      	add	r3, r2
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	b2dc      	uxtb	r4, r3
 8000b8e:	88bb      	ldrh	r3, [r7, #4]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	883b      	ldrh	r3, [r7, #0]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	4413      	add	r3, r2
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	4622      	mov	r2, r4
 8000ba0:	f7ff fdee 	bl	8000780 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000ba4:	8c3b      	ldrh	r3, [r7, #32]
 8000ba6:	0a1b      	lsrs	r3, r3, #8
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	733b      	strb	r3, [r7, #12]
 8000bae:	8c3b      	ldrh	r3, [r7, #32]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bba:	4814      	ldr	r0, [pc, #80]	@ (8000c0c <ST7735_FillRectangle+0x10c>)
 8000bbc:	f002 fcd0 	bl	8003560 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000bc0:	883b      	ldrh	r3, [r7, #0]
 8000bc2:	80bb      	strh	r3, [r7, #4]
 8000bc4:	e013      	b.n	8000bee <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	80fb      	strh	r3, [r7, #6]
 8000bca:	e00a      	b.n	8000be2 <ST7735_FillRectangle+0xe2>
				{

				}
			#endif
			#ifdef WITHOUT_DMA
				HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000bcc:	f107 010c 	add.w	r1, r7, #12
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	480e      	ldr	r0, [pc, #56]	@ (8000c10 <ST7735_FillRectangle+0x110>)
 8000bd8:	f003 fde7 	bl	80047aa <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	80fb      	strh	r3, [r7, #6]
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1f1      	bne.n	8000bcc <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 8000be8:	88bb      	ldrh	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	80bb      	strh	r3, [r7, #4]
 8000bee:	88bb      	ldrh	r3, [r7, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1e8      	bne.n	8000bc6 <ST7735_FillRectangle+0xc6>
			#endif
        }
    }

    ST7735_Unselect();
 8000bf4:	f7ff fd25 	bl	8000642 <ST7735_Unselect>
 8000bf8:	e000      	b.n	8000bfc <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 8000bfa:	bf00      	nop
}
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd90      	pop	{r4, r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000080 	.word	0x20000080
 8000c08:	20000082 	.word	0x20000082
 8000c0c:	48000400 	.word	0x48000400
 8000c10:	200000f8 	.word	0x200000f8

08000c14 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Interrupts *****************************************************************/
// GPIO Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	// Interrupt Routine
	switch (GPIO_Pin) {
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c24:	d007      	beq.n	8000c36 <HAL_GPIO_EXTI_Callback+0x22>
 8000c26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c2a:	dc18      	bgt.n	8000c5e <HAL_GPIO_EXTI_Callback+0x4a>
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d018      	beq.n	8000c62 <HAL_GPIO_EXTI_Callback+0x4e>
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d018      	beq.n	8000c66 <HAL_GPIO_EXTI_Callback+0x52>
	case Tast1_PIN: // Taster1 pressed
		break;
	case Tast2_PIN: // Taster2 pressed
		break;
	default:
		break;
 8000c34:	e013      	b.n	8000c5e <HAL_GPIO_EXTI_Callback+0x4a>
		switch (handler_state) {
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d002      	beq.n	8000c44 <HAL_GPIO_EXTI_Callback+0x30>
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d004      	beq.n	8000c4c <HAL_GPIO_EXTI_Callback+0x38>
 8000c42:	e007      	b.n	8000c54 <HAL_GPIO_EXTI_Callback+0x40>
			set_handler_state(ADC_Values);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f000 fd27 	bl	8001698 <set_handler_state>
			break;
 8000c4a:	e007      	b.n	8000c5c <HAL_GPIO_EXTI_Callback+0x48>
			set_handler_state(IDLE);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f000 fd23 	bl	8001698 <set_handler_state>
			break;
 8000c52:	e003      	b.n	8000c5c <HAL_GPIO_EXTI_Callback+0x48>
			set_handler_state(IDLE);
 8000c54:	2000      	movs	r0, #0
 8000c56:	f000 fd1f 	bl	8001698 <set_handler_state>
			break;
 8000c5a:	bf00      	nop
		break;
 8000c5c:	e004      	b.n	8000c68 <HAL_GPIO_EXTI_Callback+0x54>
		break;
 8000c5e:	bf00      	nop
 8000c60:	e002      	b.n	8000c68 <HAL_GPIO_EXTI_Callback+0x54>
		break;
 8000c62:	bf00      	nop
 8000c64:	e000      	b.n	8000c68 <HAL_GPIO_EXTI_Callback+0x54>
		break;
 8000c66:	bf00      	nop
	}
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000258 	.word	0x20000258

08000c74 <HAL_TIM_PeriodElapsedCallback>:

// Timer timeout Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

	// Überprüfe welcher Timer diese callback Funktion aufruft
	if (htim == &htim16) {
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a09      	ldr	r2, [pc, #36]	@ (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d10a      	bne.n	8000c9a <HAL_TIM_PeriodElapsedCallback+0x26>
		// Toggle PC3 alle 100ms
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8000c84:	2108      	movs	r1, #8
 8000c86:	4808      	ldr	r0, [pc, #32]	@ (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c88:	f002 fc82 	bl	8003590 <HAL_GPIO_TogglePin>
		// Handler Zeit um 100ms erhöhen
		if (handler_state == ADC_Values) {
 8000c8c:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d102      	bne.n	8000c9a <HAL_TIM_PeriodElapsedCallback+0x26>
			inc_handler_currentTime(100);
 8000c94:	2064      	movs	r0, #100	@ 0x64
 8000c96:	f000 fd1d 	bl	80016d4 <inc_handler_currentTime>
		}
	}
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	2000015c 	.word	0x2000015c
 8000ca8:	48000800 	.word	0x48000800
 8000cac:	20000258 	.word	0x20000258

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb4:	f000 fd4b 	bl	800174e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb8:	f000 f854 	bl	8000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbc:	f000 f9c8 	bl	8001050 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cc0:	f000 f914 	bl	8000eec <MX_SPI1_Init>
  MX_TIM16_Init();
 8000cc4:	f000 f950 	bl	8000f68 <MX_TIM16_Init>
  MX_ADC1_Init();
 8000cc8:	f000 f898 	bl	8000dfc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000ccc:	f000 f974 	bl	8000fb8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	// Display Init
	ST7735_Init(1);
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f7ff fd9d 	bl	8000810 <ST7735_Init>
	fillScreen(BLACK);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fc8e 	bl	80005f8 <fillScreen>

	// Start Timer 16
	HAL_TIM_Base_Start_IT(&htim16); // Starte Timer 16 im Interrupt Modus
 8000cdc:	481a      	ldr	r0, [pc, #104]	@ (8000d48 <main+0x98>)
 8000cde:	f004 f895 	bl	8004e0c <HAL_TIM_Base_Start_IT>

	// Set first State
	set_handler_state(IDLE);
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f000 fcd8 	bl	8001698 <set_handler_state>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Run StateMachine
		handler_task();
 8000ce8:	f000 fcca 	bl	8001680 <handler_task>
		// ADC
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8000cec:	2110      	movs	r1, #16
 8000cee:	4817      	ldr	r0, [pc, #92]	@ (8000d4c <main+0x9c>)
 8000cf0:	f002 fc4e 	bl	8003590 <HAL_GPIO_TogglePin>
		HAL_ADC_Start(&hadc1);
 8000cf4:	4816      	ldr	r0, [pc, #88]	@ (8000d50 <main+0xa0>)
 8000cf6:	f001 f9a5 	bl	8002044 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 20); // timeout 20ms
 8000cfa:	2114      	movs	r1, #20
 8000cfc:	4814      	ldr	r0, [pc, #80]	@ (8000d50 <main+0xa0>)
 8000cfe:	f001 fa85 	bl	800220c <HAL_ADC_PollForConversion>
		poti1_V = HAL_ADC_GetValue(&hadc1);
 8000d02:	4813      	ldr	r0, [pc, #76]	@ (8000d50 <main+0xa0>)
 8000d04:	f001 fb88 	bl	8002418 <HAL_ADC_GetValue>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <main+0xa4>)
 8000d0e:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8000d10:	2110      	movs	r1, #16
 8000d12:	480e      	ldr	r0, [pc, #56]	@ (8000d4c <main+0x9c>)
 8000d14:	f002 fc3c 	bl	8003590 <HAL_GPIO_TogglePin>
		// Print ADC Value in Console
		sprintf(msg, "Poti1 Voltage: %hu \r\n", poti1_V);
 8000d18:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <main+0xa4>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	490e      	ldr	r1, [pc, #56]	@ (8000d58 <main+0xa8>)
 8000d20:	480e      	ldr	r0, [pc, #56]	@ (8000d5c <main+0xac>)
 8000d22:	f005 fa59 	bl	80061d8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000d26:	480d      	ldr	r0, [pc, #52]	@ (8000d5c <main+0xac>)
 8000d28:	f7ff fa7a 	bl	8000220 <strlen>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
 8000d34:	4909      	ldr	r1, [pc, #36]	@ (8000d5c <main+0xac>)
 8000d36:	480a      	ldr	r0, [pc, #40]	@ (8000d60 <main+0xb0>)
 8000d38:	f004 fba2 	bl	8005480 <HAL_UART_Transmit>
		HAL_Delay(500);
 8000d3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d40:	f000 fd76 	bl	8001830 <HAL_Delay>
		handler_task();
 8000d44:	bf00      	nop
 8000d46:	e7cf      	b.n	8000ce8 <main+0x38>
 8000d48:	2000015c 	.word	0x2000015c
 8000d4c:	48000800 	.word	0x48000800
 8000d50:	2000008c 	.word	0x2000008c
 8000d54:	2000023c 	.word	0x2000023c
 8000d58:	08006b30 	.word	0x08006b30
 8000d5c:	20000240 	.word	0x20000240
 8000d60:	200001a8 	.word	0x200001a8

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b094      	sub	sp, #80	@ 0x50
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 0318 	add.w	r3, r7, #24
 8000d6e:	2238      	movs	r2, #56	@ 0x38
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f005 fa50 	bl	8006218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d86:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d8a:	f002 fc33 	bl	80035f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d98:	2340      	movs	r3, #64	@ 0x40
 8000d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000da0:	2302      	movs	r3, #2
 8000da2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000da4:	2304      	movs	r3, #4
 8000da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000da8:	234b      	movs	r3, #75	@ 0x4b
 8000daa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db8:	f107 0318 	add.w	r3, r7, #24
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 fccd 	bl	800375c <HAL_RCC_OscConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000dc8:	f000 f9fc 	bl	80011c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dcc:	230f      	movs	r3, #15
 8000dce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2104      	movs	r1, #4
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 ffcb 	bl	8003d80 <HAL_RCC_ClockConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000df0:	f000 f9e8 	bl	80011c4 <Error_Handler>
  }
}
 8000df4:	bf00      	nop
 8000df6:	3750      	adds	r7, #80	@ 0x50
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08c      	sub	sp, #48	@ 0x30
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2220      	movs	r2, #32
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f005 f9ff 	bl	8006218 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e1a:	4b32      	ldr	r3, [pc, #200]	@ (8000ee4 <MX_ADC1_Init+0xe8>)
 8000e1c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e22:	4b30      	ldr	r3, [pc, #192]	@ (8000ee4 <MX_ADC1_Init+0xe8>)
 8000e24:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ee4 <MX_ADC1_Init+0xe8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e30:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee4 <MX_ADC1_Init+0xe8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e36:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee4 <MX_ADC1_Init+0xe8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e3c:	4b29      	ldr	r3, [pc, #164]	@ (8000ee4 <MX_ADC1_Init+0xe8>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e42:	4b28      	ldr	r3, [pc, #160]	@ (8000ee4 <MX_ADC1_Init+0xe8>)
 8000e44:	2204      	movs	r2, #4
 8000e46:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e48:	4b26      	ldr	r3, [pc, #152]	@ (8000ee4 <MX_ADC1_Init+0xe8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e4e:	4b25      	ldr	r3, [pc, #148]	@ (8000ee4 <MX_ADC1_Init+0xe8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000e54:	4b23      	ldr	r3, [pc, #140]	@ (8000ee4 <MX_ADC1_Init+0xe8>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ee4 <MX_ADC1_Init+0xe8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e62:	4b20      	ldr	r3, [pc, #128]	@ (8000ee4 <MX_ADC1_Init+0xe8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee4 <MX_ADC1_Init+0xe8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee4 <MX_ADC1_Init+0xe8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee4 <MX_ADC1_Init+0xe8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <MX_ADC1_Init+0xe8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e84:	4817      	ldr	r0, [pc, #92]	@ (8000ee4 <MX_ADC1_Init+0xe8>)
 8000e86:	f000 ff21 	bl	8001ccc <HAL_ADC_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000e90:	f000 f998 	bl	80011c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4811      	ldr	r0, [pc, #68]	@ (8000ee4 <MX_ADC1_Init+0xe8>)
 8000ea0:	f001 ffc4 	bl	8002e2c <HAL_ADCEx_MultiModeConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000eaa:	f000 f98b 	bl	80011c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <MX_ADC1_Init+0xec>)
 8000eb0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eb2:	2306      	movs	r3, #6
 8000eb4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eba:	237f      	movs	r3, #127	@ 0x7f
 8000ebc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4806      	ldr	r0, [pc, #24]	@ (8000ee4 <MX_ADC1_Init+0xe8>)
 8000ecc:	f001 fab2 	bl	8002434 <HAL_ADC_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000ed6:	f000 f975 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	3730      	adds	r7, #48	@ 0x30
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000008c 	.word	0x2000008c
 8000ee8:	04300002 	.word	0x04300002

08000eec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f60 <MX_SPI1_Init+0x74>)
 8000ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f64 <MX_SPI1_Init+0x78>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <MX_SPI1_Init+0x74>)
 8000ef8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000efc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000efe:	4b18      	ldr	r3, [pc, #96]	@ (8000f60 <MX_SPI1_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f04:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <MX_SPI1_Init+0x74>)
 8000f06:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000f0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <MX_SPI1_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f12:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <MX_SPI1_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f18:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <MX_SPI1_Init+0x74>)
 8000f1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <MX_SPI1_Init+0x74>)
 8000f22:	2210      	movs	r2, #16
 8000f24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <MX_SPI1_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <MX_SPI1_Init+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	@ (8000f60 <MX_SPI1_Init+0x74>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f38:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <MX_SPI1_Init+0x74>)
 8000f3a:	2207      	movs	r2, #7
 8000f3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f3e:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <MX_SPI1_Init+0x74>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <MX_SPI1_Init+0x74>)
 8000f46:	2208      	movs	r2, #8
 8000f48:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f4a:	4805      	ldr	r0, [pc, #20]	@ (8000f60 <MX_SPI1_Init+0x74>)
 8000f4c:	f003 fb82 	bl	8004654 <HAL_SPI_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f56:	f000 f935 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200000f8 	.word	0x200000f8
 8000f64:	40013000 	.word	0x40013000

08000f68 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000f6c:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <MX_TIM16_Init+0x48>)
 8000f6e:	4a11      	ldr	r2, [pc, #68]	@ (8000fb4 <MX_TIM16_Init+0x4c>)
 8000f70:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 15000 - 1;
 8000f72:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <MX_TIM16_Init+0x48>)
 8000f74:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8000f78:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb0 <MX_TIM16_Init+0x48>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8000f80:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <MX_TIM16_Init+0x48>)
 8000f82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f86:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f88:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <MX_TIM16_Init+0x48>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <MX_TIM16_Init+0x48>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <MX_TIM16_Init+0x48>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <MX_TIM16_Init+0x48>)
 8000f9c:	f003 fede 	bl	8004d5c <HAL_TIM_Base_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000fa6:	f000 f90d 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000015c 	.word	0x2000015c
 8000fb4:	40014400 	.word	0x40014400

08000fb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fbc:	4b22      	ldr	r3, [pc, #136]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000fbe:	4a23      	ldr	r2, [pc, #140]	@ (800104c <MX_USART2_UART_Init+0x94>)
 8000fc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fc2:	4b21      	ldr	r3, [pc, #132]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000fc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fca:	4b1f      	ldr	r3, [pc, #124]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000fde:	220c      	movs	r2, #12
 8000fe0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fee:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001000:	4811      	ldr	r0, [pc, #68]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8001002:	f004 f9ed 	bl	80053e0 <HAL_UART_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800100c:	f000 f8da 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001010:	2100      	movs	r1, #0
 8001012:	480d      	ldr	r0, [pc, #52]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8001014:	f005 f816 	bl	8006044 <HAL_UARTEx_SetTxFifoThreshold>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800101e:	f000 f8d1 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001022:	2100      	movs	r1, #0
 8001024:	4808      	ldr	r0, [pc, #32]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8001026:	f005 f84b 	bl	80060c0 <HAL_UARTEx_SetRxFifoThreshold>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001030:	f000 f8c8 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001034:	4804      	ldr	r0, [pc, #16]	@ (8001048 <MX_USART2_UART_Init+0x90>)
 8001036:	f004 ffcc 	bl	8005fd2 <HAL_UARTEx_DisableFifoMode>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001040:	f000 f8c0 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200001a8 	.word	0x200001a8
 800104c:	40004400 	.word	0x40004400

08001050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	@ 0x28
 8001054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	4b54      	ldr	r3, [pc, #336]	@ (80011b8 <MX_GPIO_Init+0x168>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106a:	4a53      	ldr	r2, [pc, #332]	@ (80011b8 <MX_GPIO_Init+0x168>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001072:	4b51      	ldr	r3, [pc, #324]	@ (80011b8 <MX_GPIO_Init+0x168>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800107e:	4b4e      	ldr	r3, [pc, #312]	@ (80011b8 <MX_GPIO_Init+0x168>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	4a4d      	ldr	r2, [pc, #308]	@ (80011b8 <MX_GPIO_Init+0x168>)
 8001084:	f043 0320 	orr.w	r3, r3, #32
 8001088:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108a:	4b4b      	ldr	r3, [pc, #300]	@ (80011b8 <MX_GPIO_Init+0x168>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	f003 0320 	and.w	r3, r3, #32
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b48      	ldr	r3, [pc, #288]	@ (80011b8 <MX_GPIO_Init+0x168>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109a:	4a47      	ldr	r2, [pc, #284]	@ (80011b8 <MX_GPIO_Init+0x168>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a2:	4b45      	ldr	r3, [pc, #276]	@ (80011b8 <MX_GPIO_Init+0x168>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	4b42      	ldr	r3, [pc, #264]	@ (80011b8 <MX_GPIO_Init+0x168>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	4a41      	ldr	r2, [pc, #260]	@ (80011b8 <MX_GPIO_Init+0x168>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ba:	4b3f      	ldr	r3, [pc, #252]	@ (80011b8 <MX_GPIO_Init+0x168>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Stg2_NMOS1_Pin|GPIO_PIN_3|GPIO_PIN_4|Stg2_NMOS4_Pin
 80010c6:	2200      	movs	r2, #0
 80010c8:	f640 41fc 	movw	r1, #3324	@ 0xcfc
 80010cc:	483b      	ldr	r0, [pc, #236]	@ (80011bc <MX_GPIO_Init+0x16c>)
 80010ce:	f002 fa47 	bl	8003560 <HAL_GPIO_WritePin>
                          |Stg3_NMOS1_Pin|Stg3_NMOS3_Pin|Stg3_NMOS2_Pin|Stg3_NMOS4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPI1_RST_Pin|Stg1_NMOS2_Pin|Stg1_NMOS1_Pin
 80010d2:	2200      	movs	r2, #0
 80010d4:	f648 31e0 	movw	r1, #35808	@ 0x8be0
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010dc:	f002 fa40 	bl	8003560 <HAL_GPIO_WritePin>
                          |Stg1_NMOS3_Pin|Stg2_NMOS3_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_DC_Pin|Stg1_NMOS4_Pin|Stg2_NMOS2_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 418c 	mov.w	r1, #17920	@ 0x4600
 80010e6:	4836      	ldr	r0, [pc, #216]	@ (80011c0 <MX_GPIO_Init+0x170>)
 80010e8:	f002 fa3a 	bl	8003560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_EXTI13_Pin */
  GPIO_InitStruct.Pin = B1_EXTI13_Pin;
 80010ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	482e      	ldr	r0, [pc, #184]	@ (80011bc <MX_GPIO_Init+0x16c>)
 8001104:	f002 f8aa 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pins : Stg2_NMOS1_Pin PC3 PC4 Stg2_NMOS4_Pin
                           Stg3_NMOS1_Pin Stg3_NMOS3_Pin Stg3_NMOS2_Pin Stg3_NMOS4_Pin */
  GPIO_InitStruct.Pin = Stg2_NMOS1_Pin|GPIO_PIN_3|GPIO_PIN_4|Stg2_NMOS4_Pin
 8001108:	f640 43fc 	movw	r3, #3324	@ 0xcfc
 800110c:	617b      	str	r3, [r7, #20]
                          |Stg3_NMOS1_Pin|Stg3_NMOS3_Pin|Stg3_NMOS2_Pin|Stg3_NMOS4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	4826      	ldr	r0, [pc, #152]	@ (80011bc <MX_GPIO_Init+0x16c>)
 8001122:	f002 f89b 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SPI1_RST_Pin Stg1_NMOS2_Pin Stg1_NMOS1_Pin
                           Stg1_NMOS3_Pin Stg2_NMOS3_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI1_RST_Pin|Stg1_NMOS2_Pin|Stg1_NMOS1_Pin
 8001126:	f648 33e0 	movw	r3, #35808	@ 0x8be0
 800112a:	617b      	str	r3, [r7, #20]
                          |Stg1_NMOS3_Pin|Stg2_NMOS3_Pin|SPI1_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001142:	f002 f88b 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pins : Tast1_EXTI1_Pin Tast2_EXTI2_Pin */
  GPIO_InitStruct.Pin = Tast1_EXTI1_Pin|Tast2_EXTI2_Pin;
 8001146:	2306      	movs	r3, #6
 8001148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800114a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800114e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001150:	2302      	movs	r3, #2
 8001152:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4819      	ldr	r0, [pc, #100]	@ (80011c0 <MX_GPIO_Init+0x170>)
 800115c:	f002 f87e 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_DC_Pin Stg1_NMOS4_Pin Stg2_NMOS2_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin|Stg1_NMOS4_Pin|Stg2_NMOS2_Pin;
 8001160:	f44f 438c 	mov.w	r3, #17920	@ 0x4600
 8001164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	2301      	movs	r3, #1
 8001168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	4811      	ldr	r0, [pc, #68]	@ (80011c0 <MX_GPIO_Init+0x170>)
 800117a:	f002 f86f 	bl	800325c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	2007      	movs	r0, #7
 8001184:	f002 f835 	bl	80031f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001188:	2007      	movs	r0, #7
 800118a:	f002 f84c 	bl	8003226 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2008      	movs	r0, #8
 8001194:	f002 f82d 	bl	80031f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001198:	2008      	movs	r0, #8
 800119a:	f002 f844 	bl	8003226 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	2028      	movs	r0, #40	@ 0x28
 80011a4:	f002 f825 	bl	80031f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011a8:	2028      	movs	r0, #40	@ 0x28
 80011aa:	f002 f83c 	bl	8003226 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ae:	bf00      	nop
 80011b0:	3728      	adds	r7, #40	@ 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48000800 	.word	0x48000800
 80011c0:	48000400 	.word	0x48000400

080011c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
}
 80011ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <Error_Handler+0x8>

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <HAL_MspInit+0x44>)
 80011d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011da:	4a0e      	ldr	r2, [pc, #56]	@ (8001214 <HAL_MspInit+0x44>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <HAL_MspInit+0x44>)
 80011e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <HAL_MspInit+0x44>)
 80011f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f2:	4a08      	ldr	r2, [pc, #32]	@ (8001214 <HAL_MspInit+0x44>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_MspInit+0x44>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001206:	f002 fa99 	bl	800373c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000

08001218 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b09e      	sub	sp, #120	@ 0x78
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	2254      	movs	r2, #84	@ 0x54
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f004 ffed 	bl	8006218 <memset>
  if(hadc->Instance==ADC1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001246:	d134      	bne.n	80012b2 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001248:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800124c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800124e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001252:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	4618      	mov	r0, r3
 800125a:	f002 ffad 	bl	80041b8 <HAL_RCCEx_PeriphCLKConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001264:	f7ff ffae 	bl	80011c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001268:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <HAL_ADC_MspInit+0xa4>)
 800126a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126c:	4a13      	ldr	r2, [pc, #76]	@ (80012bc <HAL_ADC_MspInit+0xa4>)
 800126e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001272:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001274:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <HAL_ADC_MspInit+0xa4>)
 8001276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001278:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001280:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <HAL_ADC_MspInit+0xa4>)
 8001282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001284:	4a0d      	ldr	r2, [pc, #52]	@ (80012bc <HAL_ADC_MspInit+0xa4>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128c:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <HAL_ADC_MspInit+0xa4>)
 800128e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC1_IN1_Poti1_Pin;
 8001298:	2301      	movs	r3, #1
 800129a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129c:	2303      	movs	r3, #3
 800129e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(ADC1_IN1_Poti1_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012a8:	4619      	mov	r1, r3
 80012aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ae:	f001 ffd5 	bl	800325c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012b2:	bf00      	nop
 80012b4:	3778      	adds	r7, #120	@ 0x78
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40021000 	.word	0x40021000

080012c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	@ 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a17      	ldr	r2, [pc, #92]	@ (800133c <HAL_SPI_MspInit+0x7c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d127      	bne.n	8001332 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012e2:	4b17      	ldr	r3, [pc, #92]	@ (8001340 <HAL_SPI_MspInit+0x80>)
 80012e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e6:	4a16      	ldr	r2, [pc, #88]	@ (8001340 <HAL_SPI_MspInit+0x80>)
 80012e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ee:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <HAL_SPI_MspInit+0x80>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <HAL_SPI_MspInit+0x80>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	4a10      	ldr	r2, [pc, #64]	@ (8001340 <HAL_SPI_MspInit+0x80>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <HAL_SPI_MspInit+0x80>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001312:	2328      	movs	r3, #40	@ 0x28
 8001314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001322:	2305      	movs	r3, #5
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	@ (8001344 <HAL_SPI_MspInit+0x84>)
 800132e:	f001 ff95 	bl	800325c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	@ 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40013000 	.word	0x40013000
 8001340:	40021000 	.word	0x40021000
 8001344:	48000400 	.word	0x48000400

08001348 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0d      	ldr	r2, [pc, #52]	@ (800138c <HAL_TIM_Base_MspInit+0x44>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d113      	bne.n	8001382 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800135a:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <HAL_TIM_Base_MspInit+0x48>)
 800135c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800135e:	4a0c      	ldr	r2, [pc, #48]	@ (8001390 <HAL_TIM_Base_MspInit+0x48>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001364:	6613      	str	r3, [r2, #96]	@ 0x60
 8001366:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <HAL_TIM_Base_MspInit+0x48>)
 8001368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800136a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	2019      	movs	r0, #25
 8001378:	f001 ff3b 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800137c:	2019      	movs	r0, #25
 800137e:	f001 ff52 	bl	8003226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40014400 	.word	0x40014400
 8001390:	40021000 	.word	0x40021000

08001394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b09e      	sub	sp, #120	@ 0x78
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	2254      	movs	r2, #84	@ 0x54
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f004 ff2f 	bl	8006218 <memset>
  if(huart->Instance==USART2)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a1f      	ldr	r2, [pc, #124]	@ (800143c <HAL_UART_MspInit+0xa8>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d136      	bne.n	8001432 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013c4:	2302      	movs	r3, #2
 80013c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 fef1 	bl	80041b8 <HAL_RCCEx_PeriphCLKConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013dc:	f7ff fef2 	bl	80011c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013e0:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <HAL_UART_MspInit+0xac>)
 80013e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e4:	4a16      	ldr	r2, [pc, #88]	@ (8001440 <HAL_UART_MspInit+0xac>)
 80013e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ec:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <HAL_UART_MspInit+0xac>)
 80013ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f8:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <HAL_UART_MspInit+0xac>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fc:	4a10      	ldr	r2, [pc, #64]	@ (8001440 <HAL_UART_MspInit+0xac>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001404:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <HAL_UART_MspInit+0xac>)
 8001406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001410:	230c      	movs	r3, #12
 8001412:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001420:	2307      	movs	r3, #7
 8001422:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001428:	4619      	mov	r1, r3
 800142a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800142e:	f001 ff15 	bl	800325c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3778      	adds	r7, #120	@ 0x78
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40004400 	.word	0x40004400
 8001440:	40021000 	.word	0x40021000

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <NMI_Handler+0x4>

0800144c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <MemManage_Handler+0x4>

0800145c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <UsageFault_Handler+0x4>

0800146c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149a:	f000 f9ab 	bl	80017f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Tast1_EXTI1_Pin);
 80014a6:	2002      	movs	r0, #2
 80014a8:	f002 f88c 	bl	80035c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Tast2_EXTI2_Pin);
 80014b4:	2004      	movs	r0, #4
 80014b6:	f002 f885 	bl	80035c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80014c4:	4802      	ldr	r0, [pc, #8]	@ (80014d0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80014c6:	f003 fd19 	bl	8004efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2000015c 	.word	0x2000015c

080014d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_EXTI13_Pin);
 80014d8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014dc:	f002 f872 	bl	80035c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ec:	4a14      	ldr	r2, [pc, #80]	@ (8001540 <_sbrk+0x5c>)
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <_sbrk+0x60>)
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f8:	4b13      	ldr	r3, [pc, #76]	@ (8001548 <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001500:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <_sbrk+0x64>)
 8001502:	4a12      	ldr	r2, [pc, #72]	@ (800154c <_sbrk+0x68>)
 8001504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	429a      	cmp	r2, r3
 8001512:	d207      	bcs.n	8001524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001514:	f004 fe88 	bl	8006228 <__errno>
 8001518:	4603      	mov	r3, r0
 800151a:	220c      	movs	r2, #12
 800151c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	e009      	b.n	8001538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001524:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152a:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	4a05      	ldr	r2, [pc, #20]	@ (8001548 <_sbrk+0x64>)
 8001534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001536:	68fb      	ldr	r3, [r7, #12]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20020000 	.word	0x20020000
 8001544:	00000400 	.word	0x00000400
 8001548:	20000254 	.word	0x20000254
 800154c:	200003a8 	.word	0x200003a8

08001550 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001554:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <SystemInit+0x20>)
 8001556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800155a:	4a05      	ldr	r2, [pc, #20]	@ (8001570 <SystemInit+0x20>)
 800155c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001560:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <enter_handler_state>:
/* VARIABLES ***********************************************************************************************************/
uint8_t handler_state;
uint8_t prev_handler_state;
uint16_t time_val = 0;

void enter_handler_state(int state) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af04      	add	r7, sp, #16
 800157a:	6078      	str	r0, [r7, #4]
	switch (state) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <enter_handler_state+0x16>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d01b      	beq.n	80015c0 <enter_handler_state+0x4c>
		ST7735_WriteString(0, 0, "State: ADC_Values", Font_7x10, GREEN, BLACK);
		// ADC
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 8001588:	e035      	b.n	80015f6 <enter_handler_state+0x82>
		HAL_GPIO_WritePin(LD2, LD2_PIN, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	2120      	movs	r1, #32
 800158e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001592:	f001 ffe5 	bl	8003560 <HAL_GPIO_WritePin>
		handler_state = IDLE;
 8001596:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <enter_handler_state+0x8c>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
		fillScreen(BLACK);
 800159c:	2000      	movs	r0, #0
 800159e:	f7ff f82b 	bl	80005f8 <fillScreen>
		ST7735_WriteString(0, 0, "State: IDLE", Font_7x10, GREEN, BLACK);
 80015a2:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <enter_handler_state+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	9202      	str	r2, [sp, #8]
 80015a8:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80015ac:	9201      	str	r2, [sp, #4]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	9200      	str	r2, [sp, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a14      	ldr	r2, [pc, #80]	@ (8001608 <enter_handler_state+0x94>)
 80015b6:	2100      	movs	r1, #0
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff fa4d 	bl	8000a58 <ST7735_WriteString>
		break;
 80015be:	e01a      	b.n	80015f6 <enter_handler_state+0x82>
		time_val = 0;
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <enter_handler_state+0x98>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2, LD2_PIN, GPIO_PIN_SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	2120      	movs	r1, #32
 80015ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ce:	f001 ffc7 	bl	8003560 <HAL_GPIO_WritePin>
		fillScreen(BLACK);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f7ff f810 	bl	80005f8 <fillScreen>
		ST7735_WriteString(0, 0, "State: ADC_Values", Font_7x10, GREEN, BLACK);
 80015d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <enter_handler_state+0x90>)
 80015da:	2200      	movs	r2, #0
 80015dc:	9202      	str	r2, [sp, #8]
 80015de:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80015e2:	9201      	str	r2, [sp, #4]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	9200      	str	r2, [sp, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a09      	ldr	r2, [pc, #36]	@ (8001610 <enter_handler_state+0x9c>)
 80015ec:	2100      	movs	r1, #0
 80015ee:	2000      	movs	r0, #0
 80015f0:	f7ff fa32 	bl	8000a58 <ST7735_WriteString>
		break;
 80015f4:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000258 	.word	0x20000258
 8001604:	20000000 	.word	0x20000000
 8001608:	08006b48 	.word	0x08006b48
 800160c:	2000025a 	.word	0x2000025a
 8001610:	08006b54 	.word	0x08006b54

08001614 <exec_handler_state>:

//-----------------------------------------------------------------------------------------------------------------------

void exec_handler_state(int state) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	switch (state) {
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d010      	beq.n	8001644 <exec_handler_state+0x30>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d000      	beq.n	800162a <exec_handler_state+0x16>
			time_val = 0;
		}
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 8001628:	e00f      	b.n	800164a <exec_handler_state+0x36>
		if (time_val > 250) {
 800162a:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <exec_handler_state+0x40>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	2bfa      	cmp	r3, #250	@ 0xfa
 8001630:	d90a      	bls.n	8001648 <exec_handler_state+0x34>
			HAL_GPIO_TogglePin(LD2, LD2_PIN);
 8001632:	2120      	movs	r1, #32
 8001634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001638:	f001 ffaa 	bl	8003590 <HAL_GPIO_TogglePin>
			time_val = 0;
 800163c:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <exec_handler_state+0x40>)
 800163e:	2200      	movs	r2, #0
 8001640:	801a      	strh	r2, [r3, #0]
		break;
 8001642:	e001      	b.n	8001648 <exec_handler_state+0x34>
		break;
 8001644:	bf00      	nop
 8001646:	e000      	b.n	800164a <exec_handler_state+0x36>
		break;
 8001648:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000025a 	.word	0x2000025a

08001658 <leave_handler_state>:

//-----------------------------------------------------------------------------------------------------------------------

void leave_handler_state(int state) {
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	switch (state) {
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <leave_handler_state+0x16>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d002      	beq.n	8001672 <leave_handler_state+0x1a>
		//--------------------------------------------------------------------------------------
	case ADC_Values:
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 800166c:	e002      	b.n	8001674 <leave_handler_state+0x1c>
		break;
 800166e:	bf00      	nop
 8001670:	e000      	b.n	8001674 <leave_handler_state+0x1c>
		break;
 8001672:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <handler_task>:

//-----------------------------------------------------------------------------------------------------------------------

void handler_task(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	exec_handler_state(handler_state);
 8001684:	4b03      	ldr	r3, [pc, #12]	@ (8001694 <handler_task+0x14>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ffc3 	bl	8001614 <exec_handler_state>
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000258 	.word	0x20000258

08001698 <set_handler_state>:

void set_handler_state(uint8_t state) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
	prev_handler_state = handler_state;
 80016a2:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <set_handler_state+0x34>)
 80016a4:	781a      	ldrb	r2, [r3, #0]
 80016a6:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <set_handler_state+0x38>)
 80016a8:	701a      	strb	r2, [r3, #0]
	handler_state = state;
 80016aa:	4a08      	ldr	r2, [pc, #32]	@ (80016cc <set_handler_state+0x34>)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	7013      	strb	r3, [r2, #0]
	leave_handler_state(prev_handler_state);
 80016b0:	4b07      	ldr	r3, [pc, #28]	@ (80016d0 <set_handler_state+0x38>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ffcf 	bl	8001658 <leave_handler_state>
	enter_handler_state(state);
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff59 	bl	8001574 <enter_handler_state>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000258 	.word	0x20000258
 80016d0:	20000259 	.word	0x20000259

080016d4 <inc_handler_currentTime>:

uint8_t get_handler_state(void) {
	return handler_state;
}

void inc_handler_currentTime(uint16_t dT) {
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	80fb      	strh	r3, [r7, #6]
	time_val = time_val + dT;
 80016de:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <inc_handler_currentTime+0x24>)
 80016e0:	881a      	ldrh	r2, [r3, #0]
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	4413      	add	r3, r2
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <inc_handler_currentTime+0x24>)
 80016ea:	801a      	strh	r2, [r3, #0]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	2000025a 	.word	0x2000025a

080016fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016fc:	480d      	ldr	r0, [pc, #52]	@ (8001734 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001700:	f7ff ff26 	bl	8001550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001704:	480c      	ldr	r0, [pc, #48]	@ (8001738 <LoopForever+0x6>)
  ldr r1, =_edata
 8001706:	490d      	ldr	r1, [pc, #52]	@ (800173c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001708:	4a0d      	ldr	r2, [pc, #52]	@ (8001740 <LoopForever+0xe>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0a      	ldr	r2, [pc, #40]	@ (8001744 <LoopForever+0x12>)
  ldr r4, =_ebss
 800171c:	4c0a      	ldr	r4, [pc, #40]	@ (8001748 <LoopForever+0x16>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800172a:	f004 fd83 	bl	8006234 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800172e:	f7ff fabf 	bl	8000cb0 <main>

08001732 <LoopForever>:

LoopForever:
    b LoopForever
 8001732:	e7fe      	b.n	8001732 <LoopForever>
  ldr   r0, =_estack
 8001734:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800173c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001740:	080073cc 	.word	0x080073cc
  ldr r2, =_sbss
 8001744:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001748:	200003a8 	.word	0x200003a8

0800174c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC1_2_IRQHandler>

0800174e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001758:	2003      	movs	r0, #3
 800175a:	f001 fd3f 	bl	80031dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800175e:	200f      	movs	r0, #15
 8001760:	f000 f80e 	bl	8001780 <HAL_InitTick>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	71fb      	strb	r3, [r7, #7]
 800176e:	e001      	b.n	8001774 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001770:	f7ff fd2e 	bl	80011d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001774:	79fb      	ldrb	r3, [r7, #7]

}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800178c:	4b16      	ldr	r3, [pc, #88]	@ (80017e8 <HAL_InitTick+0x68>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d022      	beq.n	80017da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001794:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <HAL_InitTick+0x6c>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b13      	ldr	r3, [pc, #76]	@ (80017e8 <HAL_InitTick+0x68>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a8:	4618      	mov	r0, r3
 80017aa:	f001 fd4a 	bl	8003242 <HAL_SYSTICK_Config>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10f      	bne.n	80017d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b0f      	cmp	r3, #15
 80017b8:	d809      	bhi.n	80017ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ba:	2200      	movs	r2, #0
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	f04f 30ff 	mov.w	r0, #4294967295
 80017c2:	f001 fd16 	bl	80031f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c6:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <HAL_InitTick+0x70>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	e007      	b.n	80017de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
 80017d2:	e004      	b.n	80017de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
 80017d8:	e001      	b.n	80017de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017de:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000010 	.word	0x20000010
 80017ec:	20000008 	.word	0x20000008
 80017f0:	2000000c 	.word	0x2000000c

080017f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f8:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <HAL_IncTick+0x1c>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <HAL_IncTick+0x20>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4413      	add	r3, r2
 8001802:	4a03      	ldr	r2, [pc, #12]	@ (8001810 <HAL_IncTick+0x1c>)
 8001804:	6013      	str	r3, [r2, #0]
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	2000025c 	.word	0x2000025c
 8001814:	20000010 	.word	0x20000010

08001818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;
 800181c:	4b03      	ldr	r3, [pc, #12]	@ (800182c <HAL_GetTick+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	2000025c 	.word	0x2000025c

08001830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001838:	f7ff ffee 	bl	8001818 <HAL_GetTick>
 800183c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001848:	d004      	beq.n	8001854 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800184a:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <HAL_Delay+0x40>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4413      	add	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001854:	bf00      	nop
 8001856:	f7ff ffdf 	bl	8001818 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	429a      	cmp	r2, r3
 8001864:	d8f7      	bhi.n	8001856 <HAL_Delay+0x26>
  {
  }
}
 8001866:	bf00      	nop
 8001868:	bf00      	nop
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000010 	.word	0x20000010

08001874 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	609a      	str	r2, [r3, #8]
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	609a      	str	r2, [r3, #8]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	3360      	adds	r3, #96	@ 0x60
 80018ee:	461a      	mov	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <LL_ADC_SetOffset+0x44>)
 80018fe:	4013      	ands	r3, r2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	4313      	orrs	r3, r2
 800190c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001914:	bf00      	nop
 8001916:	371c      	adds	r7, #28
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	03fff000 	.word	0x03fff000

08001924 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3360      	adds	r3, #96	@ 0x60
 8001932:	461a      	mov	r2, r3
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001950:	b480      	push	{r7}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3360      	adds	r3, #96	@ 0x60
 8001960:	461a      	mov	r2, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	431a      	orrs	r2, r3
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800197a:	bf00      	nop
 800197c:	371c      	adds	r7, #28
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001986:	b480      	push	{r7}
 8001988:	b087      	sub	sp, #28
 800198a:	af00      	add	r7, sp, #0
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3360      	adds	r3, #96	@ 0x60
 8001996:	461a      	mov	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	431a      	orrs	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80019b0:	bf00      	nop
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	3360      	adds	r3, #96	@ 0x60
 80019cc:	461a      	mov	r2, r3
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	431a      	orrs	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80019e6:	bf00      	nop
 80019e8:	371c      	adds	r7, #28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	615a      	str	r2, [r3, #20]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b087      	sub	sp, #28
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	3330      	adds	r3, #48	@ 0x30
 8001a4e:	461a      	mov	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	0a1b      	lsrs	r3, r3, #8
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	4413      	add	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	f003 031f 	and.w	r3, r3, #31
 8001a68:	211f      	movs	r1, #31
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	401a      	ands	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	0e9b      	lsrs	r3, r3, #26
 8001a76:	f003 011f 	and.w	r1, r3, #31
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f003 031f 	and.w	r3, r3, #31
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	431a      	orrs	r2, r3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a8a:	bf00      	nop
 8001a8c:	371c      	adds	r7, #28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b087      	sub	sp, #28
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3314      	adds	r3, #20
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	0e5b      	lsrs	r3, r3, #25
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	4413      	add	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	0d1b      	lsrs	r3, r3, #20
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	2107      	movs	r1, #7
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	401a      	ands	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	0d1b      	lsrs	r3, r3, #20
 8001ad0:	f003 031f 	and.w	r3, r3, #31
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	431a      	orrs	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ae0:	bf00      	nop
 8001ae2:	371c      	adds	r7, #28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b04:	43db      	mvns	r3, r3
 8001b06:	401a      	ands	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0318 	and.w	r3, r3, #24
 8001b0e:	4908      	ldr	r1, [pc, #32]	@ (8001b30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b10:	40d9      	lsrs	r1, r3
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	400b      	ands	r3, r1
 8001b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	0007ffff 	.word	0x0007ffff

08001b34 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 031f 	and.w	r3, r3, #31
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001b7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6093      	str	r3, [r2, #8]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ba0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ba4:	d101      	bne.n	8001baa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001bc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bcc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001bf4:	d101      	bne.n	8001bfa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c1c:	f043 0201 	orr.w	r2, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <LL_ADC_IsEnabled+0x18>
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <LL_ADC_IsEnabled+0x1a>
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c66:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c6a:	f043 0204 	orr.w	r2, r3, #4
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d101      	bne.n	8001c96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d101      	bne.n	8001cbc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ccc:	b590      	push	{r4, r7, lr}
 8001cce:	b089      	sub	sp, #36	@ 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e1a9      	b.n	800203a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d109      	bne.n	8001d08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff fa8f 	bl	8001218 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff3f 	bl	8001b90 <LL_ADC_IsDeepPowerDownEnabled>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d004      	beq.n	8001d22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff25 	bl	8001b6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff5a 	bl	8001be0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d115      	bne.n	8001d5e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff3e 	bl	8001bb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d3c:	4b9c      	ldr	r3, [pc, #624]	@ (8001fb0 <HAL_ADC_Init+0x2e4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	099b      	lsrs	r3, r3, #6
 8001d42:	4a9c      	ldr	r2, [pc, #624]	@ (8001fb4 <HAL_ADC_Init+0x2e8>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	099b      	lsrs	r3, r3, #6
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d50:	e002      	b.n	8001d58 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f9      	bne.n	8001d52 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff3c 	bl	8001be0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10d      	bne.n	8001d8a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d72:	f043 0210 	orr.w	r2, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ff75 	bl	8001c7e <LL_ADC_REG_IsConversionOngoing>
 8001d94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 8142 	bne.w	8002028 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f040 813e 	bne.w	8002028 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001db4:	f043 0202 	orr.w	r2, r3, #2
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff35 	bl	8001c30 <LL_ADC_IsEnabled>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d141      	bne.n	8001e50 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dd4:	d004      	beq.n	8001de0 <HAL_ADC_Init+0x114>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a77      	ldr	r2, [pc, #476]	@ (8001fb8 <HAL_ADC_Init+0x2ec>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d10f      	bne.n	8001e00 <HAL_ADC_Init+0x134>
 8001de0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001de4:	f7ff ff24 	bl	8001c30 <LL_ADC_IsEnabled>
 8001de8:	4604      	mov	r4, r0
 8001dea:	4873      	ldr	r0, [pc, #460]	@ (8001fb8 <HAL_ADC_Init+0x2ec>)
 8001dec:	f7ff ff20 	bl	8001c30 <LL_ADC_IsEnabled>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4323      	orrs	r3, r4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf0c      	ite	eq
 8001df8:	2301      	moveq	r3, #1
 8001dfa:	2300      	movne	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	e012      	b.n	8001e26 <HAL_ADC_Init+0x15a>
 8001e00:	486e      	ldr	r0, [pc, #440]	@ (8001fbc <HAL_ADC_Init+0x2f0>)
 8001e02:	f7ff ff15 	bl	8001c30 <LL_ADC_IsEnabled>
 8001e06:	4604      	mov	r4, r0
 8001e08:	486d      	ldr	r0, [pc, #436]	@ (8001fc0 <HAL_ADC_Init+0x2f4>)
 8001e0a:	f7ff ff11 	bl	8001c30 <LL_ADC_IsEnabled>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	431c      	orrs	r4, r3
 8001e12:	486c      	ldr	r0, [pc, #432]	@ (8001fc4 <HAL_ADC_Init+0x2f8>)
 8001e14:	f7ff ff0c 	bl	8001c30 <LL_ADC_IsEnabled>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4323      	orrs	r3, r4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d012      	beq.n	8001e50 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e32:	d004      	beq.n	8001e3e <HAL_ADC_Init+0x172>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a5f      	ldr	r2, [pc, #380]	@ (8001fb8 <HAL_ADC_Init+0x2ec>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_Init+0x176>
 8001e3e:	4a62      	ldr	r2, [pc, #392]	@ (8001fc8 <HAL_ADC_Init+0x2fc>)
 8001e40:	e000      	b.n	8001e44 <HAL_ADC_Init+0x178>
 8001e42:	4a62      	ldr	r2, [pc, #392]	@ (8001fcc <HAL_ADC_Init+0x300>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	f7ff fd12 	bl	8001874 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	7f5b      	ldrb	r3, [r3, #29]
 8001e54:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e5a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e60:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e66:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e6e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d106      	bne.n	8001e8c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e82:	3b01      	subs	r3, #1
 8001e84:	045b      	lsls	r3, r3, #17
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d009      	beq.n	8001ea8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e98:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	4b48      	ldr	r3, [pc, #288]	@ (8001fd0 <HAL_ADC_Init+0x304>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	69b9      	ldr	r1, [r7, #24]
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fee4 	bl	8001ca4 <LL_ADC_INJ_IsConversionOngoing>
 8001edc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d17f      	bne.n	8001fe4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d17c      	bne.n	8001fe4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eee:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ef6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f06:	f023 0302 	bic.w	r3, r3, #2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	69b9      	ldr	r1, [r7, #24]
 8001f10:	430b      	orrs	r3, r1
 8001f12:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d017      	beq.n	8001f4c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691a      	ldr	r2, [r3, #16]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001f2a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f34:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6911      	ldr	r1, [r2, #16]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001f4a:	e013      	b.n	8001f74 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001f5a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f70:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d12a      	bne.n	8001fd4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f88:	f023 0304 	bic.w	r3, r3, #4
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f94:	4311      	orrs	r1, r2
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f9a:	4311      	orrs	r1, r2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 0201 	orr.w	r2, r2, #1
 8001fac:	611a      	str	r2, [r3, #16]
 8001fae:	e019      	b.n	8001fe4 <HAL_ADC_Init+0x318>
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	053e2d63 	.word	0x053e2d63
 8001fb8:	50000100 	.word	0x50000100
 8001fbc:	50000400 	.word	0x50000400
 8001fc0:	50000500 	.word	0x50000500
 8001fc4:	50000600 	.word	0x50000600
 8001fc8:	50000300 	.word	0x50000300
 8001fcc:	50000700 	.word	0x50000700
 8001fd0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691a      	ldr	r2, [r3, #16]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0201 	bic.w	r2, r2, #1
 8001fe2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d10c      	bne.n	8002006 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	f023 010f 	bic.w	r1, r3, #15
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	1e5a      	subs	r2, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	631a      	str	r2, [r3, #48]	@ 0x30
 8002004:	e007      	b.n	8002016 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 020f 	bic.w	r2, r2, #15
 8002014:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201a:	f023 0303 	bic.w	r3, r3, #3
 800201e:	f043 0201 	orr.w	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002026:	e007      	b.n	8002038 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202c:	f043 0210 	orr.w	r2, r3, #16
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002038:	7ffb      	ldrb	r3, [r7, #31]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	@ 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd90      	pop	{r4, r7, pc}
 8002042:	bf00      	nop

08002044 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002054:	d004      	beq.n	8002060 <HAL_ADC_Start+0x1c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a67      	ldr	r2, [pc, #412]	@ (80021f8 <HAL_ADC_Start+0x1b4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d101      	bne.n	8002064 <HAL_ADC_Start+0x20>
 8002060:	4b66      	ldr	r3, [pc, #408]	@ (80021fc <HAL_ADC_Start+0x1b8>)
 8002062:	e000      	b.n	8002066 <HAL_ADC_Start+0x22>
 8002064:	4b66      	ldr	r3, [pc, #408]	@ (8002200 <HAL_ADC_Start+0x1bc>)
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fd64 	bl	8001b34 <LL_ADC_GetMultimode>
 800206c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fe03 	bl	8001c7e <LL_ADC_REG_IsConversionOngoing>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 80b4 	bne.w	80021e8 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_ADC_Start+0x4a>
 800208a:	2302      	movs	r3, #2
 800208c:	e0af      	b.n	80021ee <HAL_ADC_Start+0x1aa>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fe0c 	bl	8002cb4 <ADC_Enable>
 800209c:	4603      	mov	r3, r0
 800209e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 809b 	bne.w	80021de <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020b0:	f023 0301 	bic.w	r3, r3, #1
 80020b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a4d      	ldr	r2, [pc, #308]	@ (80021f8 <HAL_ADC_Start+0x1b4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d009      	beq.n	80020da <HAL_ADC_Start+0x96>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a4e      	ldr	r2, [pc, #312]	@ (8002204 <HAL_ADC_Start+0x1c0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d002      	beq.n	80020d6 <HAL_ADC_Start+0x92>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	e003      	b.n	80020de <HAL_ADC_Start+0x9a>
 80020d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002208 <HAL_ADC_Start+0x1c4>)
 80020d8:	e001      	b.n	80020de <HAL_ADC_Start+0x9a>
 80020da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d002      	beq.n	80020ec <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d105      	bne.n	80020f8 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002104:	d106      	bne.n	8002114 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800210a:	f023 0206 	bic.w	r2, r3, #6
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	661a      	str	r2, [r3, #96]	@ 0x60
 8002112:	e002      	b.n	800211a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	221c      	movs	r2, #28
 8002120:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a32      	ldr	r2, [pc, #200]	@ (80021f8 <HAL_ADC_Start+0x1b4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d009      	beq.n	8002148 <HAL_ADC_Start+0x104>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a32      	ldr	r2, [pc, #200]	@ (8002204 <HAL_ADC_Start+0x1c0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d002      	beq.n	8002144 <HAL_ADC_Start+0x100>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	e003      	b.n	800214c <HAL_ADC_Start+0x108>
 8002144:	4b30      	ldr	r3, [pc, #192]	@ (8002208 <HAL_ADC_Start+0x1c4>)
 8002146:	e001      	b.n	800214c <HAL_ADC_Start+0x108>
 8002148:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	4293      	cmp	r3, r2
 8002152:	d008      	beq.n	8002166 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b05      	cmp	r3, #5
 800215e:	d002      	beq.n	8002166 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2b09      	cmp	r3, #9
 8002164:	d114      	bne.n	8002190 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d007      	beq.n	8002184 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002178:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800217c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fd64 	bl	8001c56 <LL_ADC_REG_StartConversion>
 800218e:	e02d      	b.n	80021ec <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002194:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a15      	ldr	r2, [pc, #84]	@ (80021f8 <HAL_ADC_Start+0x1b4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d009      	beq.n	80021ba <HAL_ADC_Start+0x176>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a16      	ldr	r2, [pc, #88]	@ (8002204 <HAL_ADC_Start+0x1c0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d002      	beq.n	80021b6 <HAL_ADC_Start+0x172>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	e003      	b.n	80021be <HAL_ADC_Start+0x17a>
 80021b6:	4b14      	ldr	r3, [pc, #80]	@ (8002208 <HAL_ADC_Start+0x1c4>)
 80021b8:	e001      	b.n	80021be <HAL_ADC_Start+0x17a>
 80021ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021be:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00f      	beq.n	80021ec <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021dc:	e006      	b.n	80021ec <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80021e6:	e001      	b.n	80021ec <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021e8:	2302      	movs	r3, #2
 80021ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	50000100 	.word	0x50000100
 80021fc:	50000300 	.word	0x50000300
 8002200:	50000700 	.word	0x50000700
 8002204:	50000500 	.word	0x50000500
 8002208:	50000400 	.word	0x50000400

0800220c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800221e:	d004      	beq.n	800222a <HAL_ADC_PollForConversion+0x1e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a77      	ldr	r2, [pc, #476]	@ (8002404 <HAL_ADC_PollForConversion+0x1f8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d101      	bne.n	800222e <HAL_ADC_PollForConversion+0x22>
 800222a:	4b77      	ldr	r3, [pc, #476]	@ (8002408 <HAL_ADC_PollForConversion+0x1fc>)
 800222c:	e000      	b.n	8002230 <HAL_ADC_PollForConversion+0x24>
 800222e:	4b77      	ldr	r3, [pc, #476]	@ (800240c <HAL_ADC_PollForConversion+0x200>)
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fc7f 	bl	8001b34 <LL_ADC_GetMultimode>
 8002236:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2b08      	cmp	r3, #8
 800223e:	d102      	bne.n	8002246 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002240:	2308      	movs	r3, #8
 8002242:	61fb      	str	r3, [r7, #28]
 8002244:	e037      	b.n	80022b6 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b05      	cmp	r3, #5
 8002250:	d002      	beq.n	8002258 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b09      	cmp	r3, #9
 8002256:	d111      	bne.n	800227c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d007      	beq.n	8002276 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226a:	f043 0220 	orr.w	r2, r3, #32
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e0c1      	b.n	80023fa <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002276:	2304      	movs	r3, #4
 8002278:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800227a:	e01c      	b.n	80022b6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002284:	d004      	beq.n	8002290 <HAL_ADC_PollForConversion+0x84>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a5e      	ldr	r2, [pc, #376]	@ (8002404 <HAL_ADC_PollForConversion+0x1f8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d101      	bne.n	8002294 <HAL_ADC_PollForConversion+0x88>
 8002290:	4b5d      	ldr	r3, [pc, #372]	@ (8002408 <HAL_ADC_PollForConversion+0x1fc>)
 8002292:	e000      	b.n	8002296 <HAL_ADC_PollForConversion+0x8a>
 8002294:	4b5d      	ldr	r3, [pc, #372]	@ (800240c <HAL_ADC_PollForConversion+0x200>)
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fc5a 	bl	8001b50 <LL_ADC_GetMultiDMATransfer>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a6:	f043 0220 	orr.w	r2, r3, #32
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e0a3      	b.n	80023fa <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80022b2:	2304      	movs	r3, #4
 80022b4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80022b6:	f7ff faaf 	bl	8001818 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022bc:	e021      	b.n	8002302 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c4:	d01d      	beq.n	8002302 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80022c6:	f7ff faa7 	bl	8001818 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d302      	bcc.n	80022dc <HAL_ADC_PollForConversion+0xd0>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d112      	bne.n	8002302 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10b      	bne.n	8002302 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ee:	f043 0204 	orr.w	r2, r3, #4
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e07b      	b.n	80023fa <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0d6      	beq.n	80022be <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002314:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fb79 	bl	8001a18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d01c      	beq.n	8002366 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	7f5b      	ldrb	r3, [r3, #29]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d118      	bne.n	8002366 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b08      	cmp	r3, #8
 8002340:	d111      	bne.n	8002366 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002346:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002352:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235e:	f043 0201 	orr.w	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a26      	ldr	r2, [pc, #152]	@ (8002404 <HAL_ADC_PollForConversion+0x1f8>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d009      	beq.n	8002384 <HAL_ADC_PollForConversion+0x178>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a26      	ldr	r2, [pc, #152]	@ (8002410 <HAL_ADC_PollForConversion+0x204>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d002      	beq.n	8002380 <HAL_ADC_PollForConversion+0x174>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	e003      	b.n	8002388 <HAL_ADC_PollForConversion+0x17c>
 8002380:	4b24      	ldr	r3, [pc, #144]	@ (8002414 <HAL_ADC_PollForConversion+0x208>)
 8002382:	e001      	b.n	8002388 <HAL_ADC_PollForConversion+0x17c>
 8002384:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	4293      	cmp	r3, r2
 800238e:	d008      	beq.n	80023a2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2b05      	cmp	r3, #5
 800239a:	d002      	beq.n	80023a2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2b09      	cmp	r3, #9
 80023a0:	d104      	bne.n	80023ac <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	e014      	b.n	80023d6 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a14      	ldr	r2, [pc, #80]	@ (8002404 <HAL_ADC_PollForConversion+0x1f8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d009      	beq.n	80023ca <HAL_ADC_PollForConversion+0x1be>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a15      	ldr	r2, [pc, #84]	@ (8002410 <HAL_ADC_PollForConversion+0x204>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d002      	beq.n	80023c6 <HAL_ADC_PollForConversion+0x1ba>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	e003      	b.n	80023ce <HAL_ADC_PollForConversion+0x1c2>
 80023c6:	4b13      	ldr	r3, [pc, #76]	@ (8002414 <HAL_ADC_PollForConversion+0x208>)
 80023c8:	e001      	b.n	80023ce <HAL_ADC_PollForConversion+0x1c2>
 80023ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023ce:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d104      	bne.n	80023e6 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2208      	movs	r2, #8
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	e008      	b.n	80023f8 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d103      	bne.n	80023f8 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	220c      	movs	r2, #12
 80023f6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	50000100 	.word	0x50000100
 8002408:	50000300 	.word	0x50000300
 800240c:	50000700 	.word	0x50000700
 8002410:	50000500 	.word	0x50000500
 8002414:	50000400 	.word	0x50000400

08002418 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b0b6      	sub	sp, #216	@ 0xd8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800244e:	2b01      	cmp	r3, #1
 8002450:	d102      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x24>
 8002452:	2302      	movs	r3, #2
 8002454:	f000 bc13 	b.w	8002c7e <HAL_ADC_ConfigChannel+0x84a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fc0a 	bl	8001c7e <LL_ADC_REG_IsConversionOngoing>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	f040 83f3 	bne.w	8002c58 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6859      	ldr	r1, [r3, #4]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	f7ff fadd 	bl	8001a3e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fbf8 	bl	8001c7e <LL_ADC_REG_IsConversionOngoing>
 800248e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fc04 	bl	8001ca4 <LL_ADC_INJ_IsConversionOngoing>
 800249c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f040 81d9 	bne.w	800285c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 81d4 	bne.w	800285c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80024bc:	d10f      	bne.n	80024de <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2200      	movs	r2, #0
 80024c8:	4619      	mov	r1, r3
 80024ca:	f7ff fae4 	bl	8001a96 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fa8b 	bl	80019f2 <LL_ADC_SetSamplingTimeCommonConfig>
 80024dc:	e00e      	b.n	80024fc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6819      	ldr	r1, [r3, #0]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	461a      	mov	r2, r3
 80024ec:	f7ff fad3 	bl	8001a96 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2100      	movs	r1, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fa7b 	bl	80019f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	695a      	ldr	r2, [r3, #20]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	08db      	lsrs	r3, r3, #3
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b04      	cmp	r3, #4
 800251c:	d022      	beq.n	8002564 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	6919      	ldr	r1, [r3, #16]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800252e:	f7ff f9d5 	bl	80018dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6919      	ldr	r1, [r3, #16]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	461a      	mov	r2, r3
 8002540:	f7ff fa21 	bl	8001986 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002550:	2b01      	cmp	r3, #1
 8002552:	d102      	bne.n	800255a <HAL_ADC_ConfigChannel+0x126>
 8002554:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002558:	e000      	b.n	800255c <HAL_ADC_ConfigChannel+0x128>
 800255a:	2300      	movs	r3, #0
 800255c:	461a      	mov	r2, r3
 800255e:	f7ff fa2d 	bl	80019bc <LL_ADC_SetOffsetSaturation>
 8002562:	e17b      	b.n	800285c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2100      	movs	r1, #0
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff f9da 	bl	8001924 <LL_ADC_GetOffsetChannel>
 8002570:	4603      	mov	r3, r0
 8002572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10a      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x15c>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff f9cf 	bl	8001924 <LL_ADC_GetOffsetChannel>
 8002586:	4603      	mov	r3, r0
 8002588:	0e9b      	lsrs	r3, r3, #26
 800258a:	f003 021f 	and.w	r2, r3, #31
 800258e:	e01e      	b.n	80025ce <HAL_ADC_ConfigChannel+0x19a>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2100      	movs	r1, #0
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff f9c4 	bl	8001924 <LL_ADC_GetOffsetChannel>
 800259c:	4603      	mov	r3, r0
 800259e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80025be:	2320      	movs	r3, #32
 80025c0:	e004      	b.n	80025cc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80025c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x1b2>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	0e9b      	lsrs	r3, r3, #26
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	e018      	b.n	8002618 <HAL_ADC_ConfigChannel+0x1e4>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80025fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002602:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800260a:	2320      	movs	r3, #32
 800260c:	e004      	b.n	8002618 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800260e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002618:	429a      	cmp	r2, r3
 800261a:	d106      	bne.n	800262a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2200      	movs	r2, #0
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff f993 	bl	8001950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2101      	movs	r1, #1
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff f977 	bl	8001924 <LL_ADC_GetOffsetChannel>
 8002636:	4603      	mov	r3, r0
 8002638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x222>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2101      	movs	r1, #1
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff f96c 	bl	8001924 <LL_ADC_GetOffsetChannel>
 800264c:	4603      	mov	r3, r0
 800264e:	0e9b      	lsrs	r3, r3, #26
 8002650:	f003 021f 	and.w	r2, r3, #31
 8002654:	e01e      	b.n	8002694 <HAL_ADC_ConfigChannel+0x260>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2101      	movs	r1, #1
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff f961 	bl	8001924 <LL_ADC_GetOffsetChannel>
 8002662:	4603      	mov	r3, r0
 8002664:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002674:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002678:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800267c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002684:	2320      	movs	r3, #32
 8002686:	e004      	b.n	8002692 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002688:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800268c:	fab3 f383 	clz	r3, r3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269c:	2b00      	cmp	r3, #0
 800269e:	d105      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x278>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	0e9b      	lsrs	r3, r3, #26
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	e018      	b.n	80026de <HAL_ADC_ConfigChannel+0x2aa>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026b8:	fa93 f3a3 	rbit	r3, r3
 80026bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80026c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80026c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80026d0:	2320      	movs	r3, #32
 80026d2:	e004      	b.n	80026de <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80026d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026d8:	fab3 f383 	clz	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026de:	429a      	cmp	r2, r3
 80026e0:	d106      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2200      	movs	r2, #0
 80026e8:	2101      	movs	r1, #1
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff f930 	bl	8001950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2102      	movs	r1, #2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff f914 	bl	8001924 <LL_ADC_GetOffsetChannel>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10a      	bne.n	800271c <HAL_ADC_ConfigChannel+0x2e8>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2102      	movs	r1, #2
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff f909 	bl	8001924 <LL_ADC_GetOffsetChannel>
 8002712:	4603      	mov	r3, r0
 8002714:	0e9b      	lsrs	r3, r3, #26
 8002716:	f003 021f 	and.w	r2, r3, #31
 800271a:	e01e      	b.n	800275a <HAL_ADC_ConfigChannel+0x326>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2102      	movs	r1, #2
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff f8fe 	bl	8001924 <LL_ADC_GetOffsetChannel>
 8002728:	4603      	mov	r3, r0
 800272a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800273a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800273e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002742:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800274a:	2320      	movs	r3, #32
 800274c:	e004      	b.n	8002758 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800274e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002762:	2b00      	cmp	r3, #0
 8002764:	d105      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x33e>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	0e9b      	lsrs	r3, r3, #26
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	e016      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x36c>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800277e:	fa93 f3a3 	rbit	r3, r3
 8002782:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002784:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002786:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800278a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002792:	2320      	movs	r3, #32
 8002794:	e004      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002796:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d106      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2200      	movs	r2, #0
 80027aa:	2102      	movs	r1, #2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff f8cf 	bl	8001950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2103      	movs	r1, #3
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff f8b3 	bl	8001924 <LL_ADC_GetOffsetChannel>
 80027be:	4603      	mov	r3, r0
 80027c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10a      	bne.n	80027de <HAL_ADC_ConfigChannel+0x3aa>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2103      	movs	r1, #3
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff f8a8 	bl	8001924 <LL_ADC_GetOffsetChannel>
 80027d4:	4603      	mov	r3, r0
 80027d6:	0e9b      	lsrs	r3, r3, #26
 80027d8:	f003 021f 	and.w	r2, r3, #31
 80027dc:	e017      	b.n	800280e <HAL_ADC_ConfigChannel+0x3da>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2103      	movs	r1, #3
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff f89d 	bl	8001924 <LL_ADC_GetOffsetChannel>
 80027ea:	4603      	mov	r3, r0
 80027ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80027f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027f8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80027fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002800:	2320      	movs	r3, #32
 8002802:	e003      	b.n	800280c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002804:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002816:	2b00      	cmp	r3, #0
 8002818:	d105      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x3f2>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	0e9b      	lsrs	r3, r3, #26
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	e011      	b.n	800284a <HAL_ADC_ConfigChannel+0x416>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002834:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002836:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800283e:	2320      	movs	r3, #32
 8002840:	e003      	b.n	800284a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002842:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800284a:	429a      	cmp	r2, r3
 800284c:	d106      	bne.n	800285c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2200      	movs	r2, #0
 8002854:	2103      	movs	r1, #3
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff f87a 	bl	8001950 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff f9e5 	bl	8001c30 <LL_ADC_IsEnabled>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	f040 813d 	bne.w	8002ae8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6819      	ldr	r1, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	461a      	mov	r2, r3
 800287c:	f7ff f936 	bl	8001aec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4aa2      	ldr	r2, [pc, #648]	@ (8002b10 <HAL_ADC_ConfigChannel+0x6dc>)
 8002886:	4293      	cmp	r3, r2
 8002888:	f040 812e 	bne.w	8002ae8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10b      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x480>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	0e9b      	lsrs	r3, r3, #26
 80028a2:	3301      	adds	r3, #1
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	2b09      	cmp	r3, #9
 80028aa:	bf94      	ite	ls
 80028ac:	2301      	movls	r3, #1
 80028ae:	2300      	movhi	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	e019      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x4b4>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80028c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028c4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80028c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80028cc:	2320      	movs	r3, #32
 80028ce:	e003      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80028d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	3301      	adds	r3, #1
 80028da:	f003 031f 	and.w	r3, r3, #31
 80028de:	2b09      	cmp	r3, #9
 80028e0:	bf94      	ite	ls
 80028e2:	2301      	movls	r3, #1
 80028e4:	2300      	movhi	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d079      	beq.n	80029e0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d107      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x4d4>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	0e9b      	lsrs	r3, r3, #26
 80028fe:	3301      	adds	r3, #1
 8002900:	069b      	lsls	r3, r3, #26
 8002902:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002906:	e015      	b.n	8002934 <HAL_ADC_ConfigChannel+0x500>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002918:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800291a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002920:	2320      	movs	r3, #32
 8002922:	e003      	b.n	800292c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002926:	fab3 f383 	clz	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	3301      	adds	r3, #1
 800292e:	069b      	lsls	r3, r3, #26
 8002930:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800293c:	2b00      	cmp	r3, #0
 800293e:	d109      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x520>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	0e9b      	lsrs	r3, r3, #26
 8002946:	3301      	adds	r3, #1
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	2101      	movs	r1, #1
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	e017      	b.n	8002984 <HAL_ADC_ConfigChannel+0x550>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800295c:	fa93 f3a3 	rbit	r3, r3
 8002960:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002964:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800296c:	2320      	movs	r3, #32
 800296e:	e003      	b.n	8002978 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002970:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	3301      	adds	r3, #1
 800297a:	f003 031f 	and.w	r3, r3, #31
 800297e:	2101      	movs	r1, #1
 8002980:	fa01 f303 	lsl.w	r3, r1, r3
 8002984:	ea42 0103 	orr.w	r1, r2, r3
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10a      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x576>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	0e9b      	lsrs	r3, r3, #26
 800299a:	3301      	adds	r3, #1
 800299c:	f003 021f 	and.w	r2, r3, #31
 80029a0:	4613      	mov	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4413      	add	r3, r2
 80029a6:	051b      	lsls	r3, r3, #20
 80029a8:	e018      	b.n	80029dc <HAL_ADC_ConfigChannel+0x5a8>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80029b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80029bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80029c2:	2320      	movs	r3, #32
 80029c4:	e003      	b.n	80029ce <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80029c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	3301      	adds	r3, #1
 80029d0:	f003 021f 	and.w	r2, r3, #31
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029dc:	430b      	orrs	r3, r1
 80029de:	e07e      	b.n	8002ade <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d107      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x5c8>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	0e9b      	lsrs	r3, r3, #26
 80029f2:	3301      	adds	r3, #1
 80029f4:	069b      	lsls	r3, r3, #26
 80029f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029fa:	e015      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x5f4>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a04:	fa93 f3a3 	rbit	r3, r3
 8002a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a0c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002a14:	2320      	movs	r3, #32
 8002a16:	e003      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	3301      	adds	r3, #1
 8002a22:	069b      	lsls	r3, r3, #26
 8002a24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x614>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	0e9b      	lsrs	r3, r3, #26
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	2101      	movs	r1, #1
 8002a42:	fa01 f303 	lsl.w	r3, r1, r3
 8002a46:	e017      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x644>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	fa93 f3a3 	rbit	r3, r3
 8002a54:	61fb      	str	r3, [r7, #28]
  return result;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002a60:	2320      	movs	r3, #32
 8002a62:	e003      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	2101      	movs	r1, #1
 8002a74:	fa01 f303 	lsl.w	r3, r1, r3
 8002a78:	ea42 0103 	orr.w	r1, r2, r3
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10d      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x670>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	0e9b      	lsrs	r3, r3, #26
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f003 021f 	and.w	r2, r3, #31
 8002a94:	4613      	mov	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	3b1e      	subs	r3, #30
 8002a9c:	051b      	lsls	r3, r3, #20
 8002a9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002aa2:	e01b      	b.n	8002adc <HAL_ADC_ConfigChannel+0x6a8>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	fa93 f3a3 	rbit	r3, r3
 8002ab0:	613b      	str	r3, [r7, #16]
  return result;
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002abc:	2320      	movs	r3, #32
 8002abe:	e003      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	3301      	adds	r3, #1
 8002aca:	f003 021f 	and.w	r2, r3, #31
 8002ace:	4613      	mov	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3b1e      	subs	r3, #30
 8002ad6:	051b      	lsls	r3, r3, #20
 8002ad8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002adc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f7fe ffd7 	bl	8001a96 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	4b09      	ldr	r3, [pc, #36]	@ (8002b14 <HAL_ADC_ConfigChannel+0x6e0>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80be 	beq.w	8002c72 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002afe:	d004      	beq.n	8002b0a <HAL_ADC_ConfigChannel+0x6d6>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a04      	ldr	r2, [pc, #16]	@ (8002b18 <HAL_ADC_ConfigChannel+0x6e4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d10a      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x6ec>
 8002b0a:	4b04      	ldr	r3, [pc, #16]	@ (8002b1c <HAL_ADC_ConfigChannel+0x6e8>)
 8002b0c:	e009      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x6ee>
 8002b0e:	bf00      	nop
 8002b10:	407f0000 	.word	0x407f0000
 8002b14:	80080000 	.word	0x80080000
 8002b18:	50000100 	.word	0x50000100
 8002b1c:	50000300 	.word	0x50000300
 8002b20:	4b59      	ldr	r3, [pc, #356]	@ (8002c88 <HAL_ADC_ConfigChannel+0x854>)
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe fecc 	bl	80018c0 <LL_ADC_GetCommonPathInternalCh>
 8002b28:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a56      	ldr	r2, [pc, #344]	@ (8002c8c <HAL_ADC_ConfigChannel+0x858>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d004      	beq.n	8002b40 <HAL_ADC_ConfigChannel+0x70c>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a55      	ldr	r2, [pc, #340]	@ (8002c90 <HAL_ADC_ConfigChannel+0x85c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d13a      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d134      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b54:	d005      	beq.n	8002b62 <HAL_ADC_ConfigChannel+0x72e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a4e      	ldr	r2, [pc, #312]	@ (8002c94 <HAL_ADC_ConfigChannel+0x860>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	f040 8085 	bne.w	8002c6c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b6a:	d004      	beq.n	8002b76 <HAL_ADC_ConfigChannel+0x742>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a49      	ldr	r2, [pc, #292]	@ (8002c98 <HAL_ADC_ConfigChannel+0x864>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x746>
 8002b76:	4a49      	ldr	r2, [pc, #292]	@ (8002c9c <HAL_ADC_ConfigChannel+0x868>)
 8002b78:	e000      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x748>
 8002b7a:	4a43      	ldr	r2, [pc, #268]	@ (8002c88 <HAL_ADC_ConfigChannel+0x854>)
 8002b7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b84:	4619      	mov	r1, r3
 8002b86:	4610      	mov	r0, r2
 8002b88:	f7fe fe87 	bl	800189a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b8c:	4b44      	ldr	r3, [pc, #272]	@ (8002ca0 <HAL_ADC_ConfigChannel+0x86c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	099b      	lsrs	r3, r3, #6
 8002b92:	4a44      	ldr	r2, [pc, #272]	@ (8002ca4 <HAL_ADC_ConfigChannel+0x870>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	099b      	lsrs	r3, r3, #6
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ba6:	e002      	b.n	8002bae <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f9      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bb4:	e05a      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a3b      	ldr	r2, [pc, #236]	@ (8002ca8 <HAL_ADC_ConfigChannel+0x874>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d125      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d11f      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a31      	ldr	r2, [pc, #196]	@ (8002c98 <HAL_ADC_ConfigChannel+0x864>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d104      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x7ac>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a34      	ldr	r2, [pc, #208]	@ (8002cac <HAL_ADC_ConfigChannel+0x878>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d047      	beq.n	8002c70 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002be8:	d004      	beq.n	8002bf4 <HAL_ADC_ConfigChannel+0x7c0>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a2a      	ldr	r2, [pc, #168]	@ (8002c98 <HAL_ADC_ConfigChannel+0x864>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d101      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x7c4>
 8002bf4:	4a29      	ldr	r2, [pc, #164]	@ (8002c9c <HAL_ADC_ConfigChannel+0x868>)
 8002bf6:	e000      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x7c6>
 8002bf8:	4a23      	ldr	r2, [pc, #140]	@ (8002c88 <HAL_ADC_ConfigChannel+0x854>)
 8002bfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c02:	4619      	mov	r1, r3
 8002c04:	4610      	mov	r0, r2
 8002c06:	f7fe fe48 	bl	800189a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c0a:	e031      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a27      	ldr	r2, [pc, #156]	@ (8002cb0 <HAL_ADC_ConfigChannel+0x87c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d12d      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d127      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1c      	ldr	r2, [pc, #112]	@ (8002c98 <HAL_ADC_ConfigChannel+0x864>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d022      	beq.n	8002c72 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c34:	d004      	beq.n	8002c40 <HAL_ADC_ConfigChannel+0x80c>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a17      	ldr	r2, [pc, #92]	@ (8002c98 <HAL_ADC_ConfigChannel+0x864>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x810>
 8002c40:	4a16      	ldr	r2, [pc, #88]	@ (8002c9c <HAL_ADC_ConfigChannel+0x868>)
 8002c42:	e000      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x812>
 8002c44:	4a10      	ldr	r2, [pc, #64]	@ (8002c88 <HAL_ADC_ConfigChannel+0x854>)
 8002c46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4610      	mov	r0, r2
 8002c52:	f7fe fe22 	bl	800189a <LL_ADC_SetCommonPathInternalCh>
 8002c56:	e00c      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5c:	f043 0220 	orr.w	r2, r3, #32
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002c6a:	e002      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c6c:	bf00      	nop
 8002c6e:	e000      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c70:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c7a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	37d8      	adds	r7, #216	@ 0xd8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	50000700 	.word	0x50000700
 8002c8c:	c3210000 	.word	0xc3210000
 8002c90:	90c00010 	.word	0x90c00010
 8002c94:	50000600 	.word	0x50000600
 8002c98:	50000100 	.word	0x50000100
 8002c9c:	50000300 	.word	0x50000300
 8002ca0:	20000008 	.word	0x20000008
 8002ca4:	053e2d63 	.word	0x053e2d63
 8002ca8:	c7520000 	.word	0xc7520000
 8002cac:	50000500 	.word	0x50000500
 8002cb0:	cb840000 	.word	0xcb840000

08002cb4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe ffb3 	bl	8001c30 <LL_ADC_IsEnabled>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d176      	bne.n	8002dbe <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	4b3c      	ldr	r3, [pc, #240]	@ (8002dc8 <ADC_Enable+0x114>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00d      	beq.n	8002cfa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce2:	f043 0210 	orr.w	r2, r3, #16
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e062      	b.n	8002dc0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe ff82 	bl	8001c08 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d0c:	d004      	beq.n	8002d18 <ADC_Enable+0x64>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a2e      	ldr	r2, [pc, #184]	@ (8002dcc <ADC_Enable+0x118>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d101      	bne.n	8002d1c <ADC_Enable+0x68>
 8002d18:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd0 <ADC_Enable+0x11c>)
 8002d1a:	e000      	b.n	8002d1e <ADC_Enable+0x6a>
 8002d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd4 <ADC_Enable+0x120>)
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fdce 	bl	80018c0 <LL_ADC_GetCommonPathInternalCh>
 8002d24:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002d26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d013      	beq.n	8002d56 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002dd8 <ADC_Enable+0x124>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	099b      	lsrs	r3, r3, #6
 8002d34:	4a29      	ldr	r2, [pc, #164]	@ (8002ddc <ADC_Enable+0x128>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	099b      	lsrs	r3, r3, #6
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	4613      	mov	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d48:	e002      	b.n	8002d50 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f9      	bne.n	8002d4a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d56:	f7fe fd5f 	bl	8001818 <HAL_GetTick>
 8002d5a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d5c:	e028      	b.n	8002db0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe ff64 	bl	8001c30 <LL_ADC_IsEnabled>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d104      	bne.n	8002d78 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe ff48 	bl	8001c08 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d78:	f7fe fd4e 	bl	8001818 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d914      	bls.n	8002db0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d00d      	beq.n	8002db0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d98:	f043 0210 	orr.w	r2, r3, #16
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da4:	f043 0201 	orr.w	r2, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e007      	b.n	8002dc0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d1cf      	bne.n	8002d5e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	8000003f 	.word	0x8000003f
 8002dcc:	50000100 	.word	0x50000100
 8002dd0:	50000300 	.word	0x50000300
 8002dd4:	50000700 	.word	0x50000700
 8002dd8:	20000008 	.word	0x20000008
 8002ddc:	053e2d63 	.word	0x053e2d63

08002de0 <LL_ADC_IsEnabled>:
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <LL_ADC_IsEnabled+0x18>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <LL_ADC_IsEnabled+0x1a>
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d101      	bne.n	8002e1e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b0a1      	sub	sp, #132	@ 0x84
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e0e7      	b.n	800301a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002e52:	2300      	movs	r3, #0
 8002e54:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002e56:	2300      	movs	r3, #0
 8002e58:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e62:	d102      	bne.n	8002e6a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e64:	4b6f      	ldr	r3, [pc, #444]	@ (8003024 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	e009      	b.n	8002e7e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a6e      	ldr	r2, [pc, #440]	@ (8003028 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d102      	bne.n	8002e7a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002e74:	4b6d      	ldr	r3, [pc, #436]	@ (800302c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	e001      	b.n	8002e7e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10b      	bne.n	8002e9c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e88:	f043 0220 	orr.w	r2, r3, #32
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0be      	b.n	800301a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff ffb1 	bl	8002e06 <LL_ADC_REG_IsConversionOngoing>
 8002ea4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ffab 	bl	8002e06 <LL_ADC_REG_IsConversionOngoing>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f040 80a0 	bne.w	8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002eb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f040 809c 	bne.w	8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ec8:	d004      	beq.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a55      	ldr	r2, [pc, #340]	@ (8003024 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d101      	bne.n	8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002ed4:	4b56      	ldr	r3, [pc, #344]	@ (8003030 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002ed6:	e000      	b.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002ed8:	4b56      	ldr	r3, [pc, #344]	@ (8003034 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002eda:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d04b      	beq.n	8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ee4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	6859      	ldr	r1, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ef6:	035b      	lsls	r3, r3, #13
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	431a      	orrs	r2, r3
 8002efc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002efe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f08:	d004      	beq.n	8002f14 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a45      	ldr	r2, [pc, #276]	@ (8003024 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d10f      	bne.n	8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002f14:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f18:	f7ff ff62 	bl	8002de0 <LL_ADC_IsEnabled>
 8002f1c:	4604      	mov	r4, r0
 8002f1e:	4841      	ldr	r0, [pc, #260]	@ (8003024 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f20:	f7ff ff5e 	bl	8002de0 <LL_ADC_IsEnabled>
 8002f24:	4603      	mov	r3, r0
 8002f26:	4323      	orrs	r3, r4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	e012      	b.n	8002f5a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002f34:	483c      	ldr	r0, [pc, #240]	@ (8003028 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002f36:	f7ff ff53 	bl	8002de0 <LL_ADC_IsEnabled>
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	483b      	ldr	r0, [pc, #236]	@ (800302c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002f3e:	f7ff ff4f 	bl	8002de0 <LL_ADC_IsEnabled>
 8002f42:	4603      	mov	r3, r0
 8002f44:	431c      	orrs	r4, r3
 8002f46:	483c      	ldr	r0, [pc, #240]	@ (8003038 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002f48:	f7ff ff4a 	bl	8002de0 <LL_ADC_IsEnabled>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	4323      	orrs	r3, r4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d056      	beq.n	800300c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f66:	f023 030f 	bic.w	r3, r3, #15
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	6811      	ldr	r1, [r2, #0]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	6892      	ldr	r2, [r2, #8]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	431a      	orrs	r2, r3
 8002f76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f78:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f7a:	e047      	b.n	800300c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f86:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f90:	d004      	beq.n	8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a23      	ldr	r2, [pc, #140]	@ (8003024 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d10f      	bne.n	8002fbc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002f9c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002fa0:	f7ff ff1e 	bl	8002de0 <LL_ADC_IsEnabled>
 8002fa4:	4604      	mov	r4, r0
 8002fa6:	481f      	ldr	r0, [pc, #124]	@ (8003024 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fa8:	f7ff ff1a 	bl	8002de0 <LL_ADC_IsEnabled>
 8002fac:	4603      	mov	r3, r0
 8002fae:	4323      	orrs	r3, r4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	e012      	b.n	8002fe2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002fbc:	481a      	ldr	r0, [pc, #104]	@ (8003028 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002fbe:	f7ff ff0f 	bl	8002de0 <LL_ADC_IsEnabled>
 8002fc2:	4604      	mov	r4, r0
 8002fc4:	4819      	ldr	r0, [pc, #100]	@ (800302c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002fc6:	f7ff ff0b 	bl	8002de0 <LL_ADC_IsEnabled>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	431c      	orrs	r4, r3
 8002fce:	481a      	ldr	r0, [pc, #104]	@ (8003038 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002fd0:	f7ff ff06 	bl	8002de0 <LL_ADC_IsEnabled>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	4323      	orrs	r3, r4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d012      	beq.n	800300c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fe6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002fee:	f023 030f 	bic.w	r3, r3, #15
 8002ff2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002ff4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ff6:	e009      	b.n	800300c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffc:	f043 0220 	orr.w	r2, r3, #32
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800300a:	e000      	b.n	800300e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800300c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003016:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800301a:	4618      	mov	r0, r3
 800301c:	3784      	adds	r7, #132	@ 0x84
 800301e:	46bd      	mov	sp, r7
 8003020:	bd90      	pop	{r4, r7, pc}
 8003022:	bf00      	nop
 8003024:	50000100 	.word	0x50000100
 8003028:	50000400 	.word	0x50000400
 800302c:	50000500 	.word	0x50000500
 8003030:	50000300 	.word	0x50000300
 8003034:	50000700 	.word	0x50000700
 8003038:	50000600 	.word	0x50000600

0800303c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800304c:	4b0c      	ldr	r3, [pc, #48]	@ (8003080 <__NVIC_SetPriorityGrouping+0x44>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003058:	4013      	ands	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003064:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800306c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800306e:	4a04      	ldr	r2, [pc, #16]	@ (8003080 <__NVIC_SetPriorityGrouping+0x44>)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	60d3      	str	r3, [r2, #12]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003088:	4b04      	ldr	r3, [pc, #16]	@ (800309c <__NVIC_GetPriorityGrouping+0x18>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	f003 0307 	and.w	r3, r3, #7
}
 8003092:	4618      	mov	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	db0b      	blt.n	80030ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	f003 021f 	and.w	r2, r3, #31
 80030b8:	4907      	ldr	r1, [pc, #28]	@ (80030d8 <__NVIC_EnableIRQ+0x38>)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	2001      	movs	r0, #1
 80030c2:	fa00 f202 	lsl.w	r2, r0, r2
 80030c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e000e100 	.word	0xe000e100

080030dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	6039      	str	r1, [r7, #0]
 80030e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	db0a      	blt.n	8003106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	490c      	ldr	r1, [pc, #48]	@ (8003128 <__NVIC_SetPriority+0x4c>)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	0112      	lsls	r2, r2, #4
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	440b      	add	r3, r1
 8003100:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003104:	e00a      	b.n	800311c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4908      	ldr	r1, [pc, #32]	@ (800312c <__NVIC_SetPriority+0x50>)
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	3b04      	subs	r3, #4
 8003114:	0112      	lsls	r2, r2, #4
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	440b      	add	r3, r1
 800311a:	761a      	strb	r2, [r3, #24]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000e100 	.word	0xe000e100
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	@ 0x24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f1c3 0307 	rsb	r3, r3, #7
 800314a:	2b04      	cmp	r3, #4
 800314c:	bf28      	it	cs
 800314e:	2304      	movcs	r3, #4
 8003150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3304      	adds	r3, #4
 8003156:	2b06      	cmp	r3, #6
 8003158:	d902      	bls.n	8003160 <NVIC_EncodePriority+0x30>
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3b03      	subs	r3, #3
 800315e:	e000      	b.n	8003162 <NVIC_EncodePriority+0x32>
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003164:	f04f 32ff 	mov.w	r2, #4294967295
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43da      	mvns	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	401a      	ands	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003178:	f04f 31ff 	mov.w	r1, #4294967295
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	fa01 f303 	lsl.w	r3, r1, r3
 8003182:	43d9      	mvns	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003188:	4313      	orrs	r3, r2
         );
}
 800318a:	4618      	mov	r0, r3
 800318c:	3724      	adds	r7, #36	@ 0x24
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031a8:	d301      	bcc.n	80031ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031aa:	2301      	movs	r3, #1
 80031ac:	e00f      	b.n	80031ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ae:	4a0a      	ldr	r2, [pc, #40]	@ (80031d8 <SysTick_Config+0x40>)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031b6:	210f      	movs	r1, #15
 80031b8:	f04f 30ff 	mov.w	r0, #4294967295
 80031bc:	f7ff ff8e 	bl	80030dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031c0:	4b05      	ldr	r3, [pc, #20]	@ (80031d8 <SysTick_Config+0x40>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031c6:	4b04      	ldr	r3, [pc, #16]	@ (80031d8 <SysTick_Config+0x40>)
 80031c8:	2207      	movs	r2, #7
 80031ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	e000e010 	.word	0xe000e010

080031dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff ff29 	bl	800303c <__NVIC_SetPriorityGrouping>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b086      	sub	sp, #24
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	4603      	mov	r3, r0
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003200:	f7ff ff40 	bl	8003084 <__NVIC_GetPriorityGrouping>
 8003204:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	6978      	ldr	r0, [r7, #20]
 800320c:	f7ff ff90 	bl	8003130 <NVIC_EncodePriority>
 8003210:	4602      	mov	r2, r0
 8003212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff ff5f 	bl	80030dc <__NVIC_SetPriority>
}
 800321e:	bf00      	nop
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	4603      	mov	r3, r0
 800322e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff33 	bl	80030a0 <__NVIC_EnableIRQ>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff ffa4 	bl	8003198 <SysTick_Config>
 8003250:	4603      	mov	r3, r0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800326a:	e15a      	b.n	8003522 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2101      	movs	r1, #1
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	fa01 f303 	lsl.w	r3, r1, r3
 8003278:	4013      	ands	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 814c 	beq.w	800351c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d005      	beq.n	800329c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003298:	2b02      	cmp	r3, #2
 800329a:	d130      	bne.n	80032fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032d2:	2201      	movs	r2, #1
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4013      	ands	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	f003 0201 	and.w	r2, r3, #1
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b03      	cmp	r3, #3
 8003308:	d017      	beq.n	800333a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	2203      	movs	r2, #3
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d123      	bne.n	800338e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	08da      	lsrs	r2, r3, #3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3208      	adds	r2, #8
 800334e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003352:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	220f      	movs	r2, #15
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4013      	ands	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	691a      	ldr	r2, [r3, #16]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	08da      	lsrs	r2, r3, #3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3208      	adds	r2, #8
 8003388:	6939      	ldr	r1, [r7, #16]
 800338a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	2203      	movs	r2, #3
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4013      	ands	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0203 	and.w	r2, r3, #3
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80a6 	beq.w	800351c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d0:	4b5b      	ldr	r3, [pc, #364]	@ (8003540 <HAL_GPIO_Init+0x2e4>)
 80033d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d4:	4a5a      	ldr	r2, [pc, #360]	@ (8003540 <HAL_GPIO_Init+0x2e4>)
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	6613      	str	r3, [r2, #96]	@ 0x60
 80033dc:	4b58      	ldr	r3, [pc, #352]	@ (8003540 <HAL_GPIO_Init+0x2e4>)
 80033de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033e8:	4a56      	ldr	r2, [pc, #344]	@ (8003544 <HAL_GPIO_Init+0x2e8>)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	3302      	adds	r3, #2
 80033f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	220f      	movs	r2, #15
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4013      	ands	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003412:	d01f      	beq.n	8003454 <HAL_GPIO_Init+0x1f8>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a4c      	ldr	r2, [pc, #304]	@ (8003548 <HAL_GPIO_Init+0x2ec>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d019      	beq.n	8003450 <HAL_GPIO_Init+0x1f4>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a4b      	ldr	r2, [pc, #300]	@ (800354c <HAL_GPIO_Init+0x2f0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d013      	beq.n	800344c <HAL_GPIO_Init+0x1f0>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a4a      	ldr	r2, [pc, #296]	@ (8003550 <HAL_GPIO_Init+0x2f4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00d      	beq.n	8003448 <HAL_GPIO_Init+0x1ec>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a49      	ldr	r2, [pc, #292]	@ (8003554 <HAL_GPIO_Init+0x2f8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d007      	beq.n	8003444 <HAL_GPIO_Init+0x1e8>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a48      	ldr	r2, [pc, #288]	@ (8003558 <HAL_GPIO_Init+0x2fc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d101      	bne.n	8003440 <HAL_GPIO_Init+0x1e4>
 800343c:	2305      	movs	r3, #5
 800343e:	e00a      	b.n	8003456 <HAL_GPIO_Init+0x1fa>
 8003440:	2306      	movs	r3, #6
 8003442:	e008      	b.n	8003456 <HAL_GPIO_Init+0x1fa>
 8003444:	2304      	movs	r3, #4
 8003446:	e006      	b.n	8003456 <HAL_GPIO_Init+0x1fa>
 8003448:	2303      	movs	r3, #3
 800344a:	e004      	b.n	8003456 <HAL_GPIO_Init+0x1fa>
 800344c:	2302      	movs	r3, #2
 800344e:	e002      	b.n	8003456 <HAL_GPIO_Init+0x1fa>
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <HAL_GPIO_Init+0x1fa>
 8003454:	2300      	movs	r3, #0
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	f002 0203 	and.w	r2, r2, #3
 800345c:	0092      	lsls	r2, r2, #2
 800345e:	4093      	lsls	r3, r2
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003466:	4937      	ldr	r1, [pc, #220]	@ (8003544 <HAL_GPIO_Init+0x2e8>)
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	089b      	lsrs	r3, r3, #2
 800346c:	3302      	adds	r3, #2
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003474:	4b39      	ldr	r3, [pc, #228]	@ (800355c <HAL_GPIO_Init+0x300>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	43db      	mvns	r3, r3
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4013      	ands	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003498:	4a30      	ldr	r2, [pc, #192]	@ (800355c <HAL_GPIO_Init+0x300>)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800349e:	4b2f      	ldr	r3, [pc, #188]	@ (800355c <HAL_GPIO_Init+0x300>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	43db      	mvns	r3, r3
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4013      	ands	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034c2:	4a26      	ldr	r2, [pc, #152]	@ (800355c <HAL_GPIO_Init+0x300>)
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80034c8:	4b24      	ldr	r3, [pc, #144]	@ (800355c <HAL_GPIO_Init+0x300>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	43db      	mvns	r3, r3
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4013      	ands	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034ec:	4a1b      	ldr	r2, [pc, #108]	@ (800355c <HAL_GPIO_Init+0x300>)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80034f2:	4b1a      	ldr	r3, [pc, #104]	@ (800355c <HAL_GPIO_Init+0x300>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	43db      	mvns	r3, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003516:	4a11      	ldr	r2, [pc, #68]	@ (800355c <HAL_GPIO_Init+0x300>)
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	3301      	adds	r3, #1
 8003520:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	fa22 f303 	lsr.w	r3, r2, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	f47f ae9d 	bne.w	800326c <HAL_GPIO_Init+0x10>
  }
}
 8003532:	bf00      	nop
 8003534:	bf00      	nop
 8003536:	371c      	adds	r7, #28
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	40021000 	.word	0x40021000
 8003544:	40010000 	.word	0x40010000
 8003548:	48000400 	.word	0x48000400
 800354c:	48000800 	.word	0x48000800
 8003550:	48000c00 	.word	0x48000c00
 8003554:	48001000 	.word	0x48001000
 8003558:	48001400 	.word	0x48001400
 800355c:	40010400 	.word	0x40010400

08003560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	807b      	strh	r3, [r7, #2]
 800356c:	4613      	mov	r3, r2
 800356e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003570:	787b      	ldrb	r3, [r7, #1]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003576:	887a      	ldrh	r2, [r7, #2]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800357c:	e002      	b.n	8003584 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800357e:	887a      	ldrh	r2, [r7, #2]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035a2:	887a      	ldrh	r2, [r7, #2]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4013      	ands	r3, r2
 80035a8:	041a      	lsls	r2, r3, #16
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	43d9      	mvns	r1, r3
 80035ae:	887b      	ldrh	r3, [r7, #2]
 80035b0:	400b      	ands	r3, r1
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	619a      	str	r2, [r3, #24]
}
 80035b8:	bf00      	nop
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035ce:	4b08      	ldr	r3, [pc, #32]	@ (80035f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035d0:	695a      	ldr	r2, [r3, #20]
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d006      	beq.n	80035e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035da:	4a05      	ldr	r2, [pc, #20]	@ (80035f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035dc:	88fb      	ldrh	r3, [r7, #6]
 80035de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fd fb16 	bl	8000c14 <HAL_GPIO_EXTI_Callback>
  }
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40010400 	.word	0x40010400

080035f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d141      	bne.n	8003686 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003602:	4b4b      	ldr	r3, [pc, #300]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800360a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800360e:	d131      	bne.n	8003674 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003610:	4b47      	ldr	r3, [pc, #284]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003616:	4a46      	ldr	r2, [pc, #280]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003618:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800361c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003620:	4b43      	ldr	r3, [pc, #268]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003628:	4a41      	ldr	r2, [pc, #260]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800362a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800362e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003630:	4b40      	ldr	r3, [pc, #256]	@ (8003734 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2232      	movs	r2, #50	@ 0x32
 8003636:	fb02 f303 	mul.w	r3, r2, r3
 800363a:	4a3f      	ldr	r2, [pc, #252]	@ (8003738 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800363c:	fba2 2303 	umull	r2, r3, r2, r3
 8003640:	0c9b      	lsrs	r3, r3, #18
 8003642:	3301      	adds	r3, #1
 8003644:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003646:	e002      	b.n	800364e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3b01      	subs	r3, #1
 800364c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800364e:	4b38      	ldr	r3, [pc, #224]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800365a:	d102      	bne.n	8003662 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f2      	bne.n	8003648 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003662:	4b33      	ldr	r3, [pc, #204]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800366a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800366e:	d158      	bne.n	8003722 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e057      	b.n	8003724 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003674:	4b2e      	ldr	r3, [pc, #184]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800367a:	4a2d      	ldr	r2, [pc, #180]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003680:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003684:	e04d      	b.n	8003722 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800368c:	d141      	bne.n	8003712 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800368e:	4b28      	ldr	r3, [pc, #160]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800369a:	d131      	bne.n	8003700 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800369c:	4b24      	ldr	r3, [pc, #144]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036a2:	4a23      	ldr	r2, [pc, #140]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036ac:	4b20      	ldr	r3, [pc, #128]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003734 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2232      	movs	r2, #50	@ 0x32
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003738 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	0c9b      	lsrs	r3, r3, #18
 80036ce:	3301      	adds	r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036d2:	e002      	b.n	80036da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036da:	4b15      	ldr	r3, [pc, #84]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036e6:	d102      	bne.n	80036ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f2      	bne.n	80036d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036ee:	4b10      	ldr	r3, [pc, #64]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036fa:	d112      	bne.n	8003722 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e011      	b.n	8003724 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003700:	4b0b      	ldr	r3, [pc, #44]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003706:	4a0a      	ldr	r2, [pc, #40]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800370c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003710:	e007      	b.n	8003722 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003712:	4b07      	ldr	r3, [pc, #28]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800371a:	4a05      	ldr	r2, [pc, #20]	@ (8003730 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800371c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003720:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	40007000 	.word	0x40007000
 8003734:	20000008 	.word	0x20000008
 8003738:	431bde83 	.word	0x431bde83

0800373c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003740:	4b05      	ldr	r3, [pc, #20]	@ (8003758 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4a04      	ldr	r2, [pc, #16]	@ (8003758 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003746:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800374a:	6093      	str	r3, [r2, #8]
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40007000 	.word	0x40007000

0800375c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e2fe      	b.n	8003d6c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d075      	beq.n	8003866 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800377a:	4b97      	ldr	r3, [pc, #604]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003784:	4b94      	ldr	r3, [pc, #592]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b0c      	cmp	r3, #12
 8003792:	d102      	bne.n	800379a <HAL_RCC_OscConfig+0x3e>
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2b03      	cmp	r3, #3
 8003798:	d002      	beq.n	80037a0 <HAL_RCC_OscConfig+0x44>
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b08      	cmp	r3, #8
 800379e:	d10b      	bne.n	80037b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a0:	4b8d      	ldr	r3, [pc, #564]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d05b      	beq.n	8003864 <HAL_RCC_OscConfig+0x108>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d157      	bne.n	8003864 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e2d9      	b.n	8003d6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037c0:	d106      	bne.n	80037d0 <HAL_RCC_OscConfig+0x74>
 80037c2:	4b85      	ldr	r3, [pc, #532]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a84      	ldr	r2, [pc, #528]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80037c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e01d      	b.n	800380c <HAL_RCC_OscConfig+0xb0>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037d8:	d10c      	bne.n	80037f4 <HAL_RCC_OscConfig+0x98>
 80037da:	4b7f      	ldr	r3, [pc, #508]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a7e      	ldr	r2, [pc, #504]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80037e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	4b7c      	ldr	r3, [pc, #496]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a7b      	ldr	r2, [pc, #492]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e00b      	b.n	800380c <HAL_RCC_OscConfig+0xb0>
 80037f4:	4b78      	ldr	r3, [pc, #480]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a77      	ldr	r2, [pc, #476]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80037fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	4b75      	ldr	r3, [pc, #468]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a74      	ldr	r2, [pc, #464]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800380a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d013      	beq.n	800383c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fe f800 	bl	8001818 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800381c:	f7fd fffc 	bl	8001818 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	@ 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e29e      	b.n	8003d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800382e:	4b6a      	ldr	r3, [pc, #424]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0xc0>
 800383a:	e014      	b.n	8003866 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fd ffec 	bl	8001818 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003844:	f7fd ffe8 	bl	8001818 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b64      	cmp	r3, #100	@ 0x64
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e28a      	b.n	8003d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003856:	4b60      	ldr	r3, [pc, #384]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0xe8>
 8003862:	e000      	b.n	8003866 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d075      	beq.n	800395e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003872:	4b59      	ldr	r3, [pc, #356]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800387c:	4b56      	ldr	r3, [pc, #344]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0303 	and.w	r3, r3, #3
 8003884:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	2b0c      	cmp	r3, #12
 800388a:	d102      	bne.n	8003892 <HAL_RCC_OscConfig+0x136>
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d002      	beq.n	8003898 <HAL_RCC_OscConfig+0x13c>
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2b04      	cmp	r3, #4
 8003896:	d11f      	bne.n	80038d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003898:	4b4f      	ldr	r3, [pc, #316]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_OscConfig+0x154>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e25d      	b.n	8003d6c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b0:	4b49      	ldr	r3, [pc, #292]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	061b      	lsls	r3, r3, #24
 80038be:	4946      	ldr	r1, [pc, #280]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038c4:	4b45      	ldr	r3, [pc, #276]	@ (80039dc <HAL_RCC_OscConfig+0x280>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fd ff59 	bl	8001780 <HAL_InitTick>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d043      	beq.n	800395c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e249      	b.n	8003d6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d023      	beq.n	8003928 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038e0:	4b3d      	ldr	r3, [pc, #244]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a3c      	ldr	r2, [pc, #240]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80038e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fd ff94 	bl	8001818 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f4:	f7fd ff90 	bl	8001818 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e232      	b.n	8003d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003906:	4b34      	ldr	r3, [pc, #208]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003912:	4b31      	ldr	r3, [pc, #196]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	061b      	lsls	r3, r3, #24
 8003920:	492d      	ldr	r1, [pc, #180]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003922:	4313      	orrs	r3, r2
 8003924:	604b      	str	r3, [r1, #4]
 8003926:	e01a      	b.n	800395e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003928:	4b2b      	ldr	r3, [pc, #172]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a2a      	ldr	r2, [pc, #168]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 800392e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003934:	f7fd ff70 	bl	8001818 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393c:	f7fd ff6c 	bl	8001818 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e20e      	b.n	8003d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800394e:	4b22      	ldr	r3, [pc, #136]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x1e0>
 800395a:	e000      	b.n	800395e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800395c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d041      	beq.n	80039ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d01c      	beq.n	80039ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003972:	4b19      	ldr	r3, [pc, #100]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003978:	4a17      	ldr	r2, [pc, #92]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003982:	f7fd ff49 	bl	8001818 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398a:	f7fd ff45 	bl	8001818 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e1e7      	b.n	8003d6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800399c:	4b0e      	ldr	r3, [pc, #56]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 800399e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0ef      	beq.n	800398a <HAL_RCC_OscConfig+0x22e>
 80039aa:	e020      	b.n	80039ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ac:	4b0a      	ldr	r3, [pc, #40]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80039ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039b2:	4a09      	ldr	r2, [pc, #36]	@ (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80039b4:	f023 0301 	bic.w	r3, r3, #1
 80039b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039bc:	f7fd ff2c 	bl	8001818 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039c2:	e00d      	b.n	80039e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c4:	f7fd ff28 	bl	8001818 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d906      	bls.n	80039e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e1ca      	b.n	8003d6c <HAL_RCC_OscConfig+0x610>
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000
 80039dc:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039e0:	4b8c      	ldr	r3, [pc, #560]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 80039e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1ea      	bne.n	80039c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 80a6 	beq.w	8003b48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039fc:	2300      	movs	r3, #0
 80039fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a00:	4b84      	ldr	r3, [pc, #528]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_OscConfig+0x2b4>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <HAL_RCC_OscConfig+0x2b6>
 8003a10:	2300      	movs	r3, #0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00d      	beq.n	8003a32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a16:	4b7f      	ldr	r3, [pc, #508]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a20:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a22:	4b7c      	ldr	r3, [pc, #496]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a32:	4b79      	ldr	r3, [pc, #484]	@ (8003c18 <HAL_RCC_OscConfig+0x4bc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d118      	bne.n	8003a70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a3e:	4b76      	ldr	r3, [pc, #472]	@ (8003c18 <HAL_RCC_OscConfig+0x4bc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a75      	ldr	r2, [pc, #468]	@ (8003c18 <HAL_RCC_OscConfig+0x4bc>)
 8003a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a4a:	f7fd fee5 	bl	8001818 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a52:	f7fd fee1 	bl	8001818 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e183      	b.n	8003d6c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a64:	4b6c      	ldr	r3, [pc, #432]	@ (8003c18 <HAL_RCC_OscConfig+0x4bc>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f0      	beq.n	8003a52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d108      	bne.n	8003a8a <HAL_RCC_OscConfig+0x32e>
 8003a78:	4b66      	ldr	r3, [pc, #408]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7e:	4a65      	ldr	r2, [pc, #404]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a88:	e024      	b.n	8003ad4 <HAL_RCC_OscConfig+0x378>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b05      	cmp	r3, #5
 8003a90:	d110      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x358>
 8003a92:	4b60      	ldr	r3, [pc, #384]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a98:	4a5e      	ldr	r2, [pc, #376]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003a9a:	f043 0304 	orr.w	r3, r3, #4
 8003a9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003aa2:	4b5c      	ldr	r3, [pc, #368]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa8:	4a5a      	ldr	r2, [pc, #360]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ab2:	e00f      	b.n	8003ad4 <HAL_RCC_OscConfig+0x378>
 8003ab4:	4b57      	ldr	r3, [pc, #348]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aba:	4a56      	ldr	r2, [pc, #344]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003abc:	f023 0301 	bic.w	r3, r3, #1
 8003ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ac4:	4b53      	ldr	r3, [pc, #332]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aca:	4a52      	ldr	r2, [pc, #328]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003acc:	f023 0304 	bic.w	r3, r3, #4
 8003ad0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d016      	beq.n	8003b0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003adc:	f7fd fe9c 	bl	8001818 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae2:	e00a      	b.n	8003afa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae4:	f7fd fe98 	bl	8001818 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e138      	b.n	8003d6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003afa:	4b46      	ldr	r3, [pc, #280]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0ed      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x388>
 8003b08:	e015      	b.n	8003b36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0a:	f7fd fe85 	bl	8001818 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b10:	e00a      	b.n	8003b28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b12:	f7fd fe81 	bl	8001818 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e121      	b.n	8003d6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b28:	4b3a      	ldr	r3, [pc, #232]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1ed      	bne.n	8003b12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b36:	7ffb      	ldrb	r3, [r7, #31]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d105      	bne.n	8003b48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b3c:	4b35      	ldr	r3, [pc, #212]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b40:	4a34      	ldr	r2, [pc, #208]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003b42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b46:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d03c      	beq.n	8003bce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01c      	beq.n	8003b96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b62:	4a2c      	ldr	r2, [pc, #176]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6c:	f7fd fe54 	bl	8001818 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b74:	f7fd fe50 	bl	8001818 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e0f2      	b.n	8003d6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b86:	4b23      	ldr	r3, [pc, #140]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0ef      	beq.n	8003b74 <HAL_RCC_OscConfig+0x418>
 8003b94:	e01b      	b.n	8003bce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b96:	4b1f      	ldr	r3, [pc, #124]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003b9e:	f023 0301 	bic.w	r3, r3, #1
 8003ba2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba6:	f7fd fe37 	bl	8001818 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bae:	f7fd fe33 	bl	8001818 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e0d5      	b.n	8003d6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bc0:	4b14      	ldr	r3, [pc, #80]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1ef      	bne.n	8003bae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 80c9 	beq.w	8003d6a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 030c 	and.w	r3, r3, #12
 8003be0:	2b0c      	cmp	r3, #12
 8003be2:	f000 8083 	beq.w	8003cec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d15e      	bne.n	8003cac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bee:	4b09      	ldr	r3, [pc, #36]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a08      	ldr	r2, [pc, #32]	@ (8003c14 <HAL_RCC_OscConfig+0x4b8>)
 8003bf4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfa:	f7fd fe0d 	bl	8001818 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c00:	e00c      	b.n	8003c1c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c02:	f7fd fe09 	bl	8001818 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d905      	bls.n	8003c1c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e0ab      	b.n	8003d6c <HAL_RCC_OscConfig+0x610>
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c1c:	4b55      	ldr	r3, [pc, #340]	@ (8003d74 <HAL_RCC_OscConfig+0x618>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ec      	bne.n	8003c02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c28:	4b52      	ldr	r3, [pc, #328]	@ (8003d74 <HAL_RCC_OscConfig+0x618>)
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	4b52      	ldr	r3, [pc, #328]	@ (8003d78 <HAL_RCC_OscConfig+0x61c>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6a11      	ldr	r1, [r2, #32]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c38:	3a01      	subs	r2, #1
 8003c3a:	0112      	lsls	r2, r2, #4
 8003c3c:	4311      	orrs	r1, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003c42:	0212      	lsls	r2, r2, #8
 8003c44:	4311      	orrs	r1, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c4a:	0852      	lsrs	r2, r2, #1
 8003c4c:	3a01      	subs	r2, #1
 8003c4e:	0552      	lsls	r2, r2, #21
 8003c50:	4311      	orrs	r1, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c56:	0852      	lsrs	r2, r2, #1
 8003c58:	3a01      	subs	r2, #1
 8003c5a:	0652      	lsls	r2, r2, #25
 8003c5c:	4311      	orrs	r1, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c62:	06d2      	lsls	r2, r2, #27
 8003c64:	430a      	orrs	r2, r1
 8003c66:	4943      	ldr	r1, [pc, #268]	@ (8003d74 <HAL_RCC_OscConfig+0x618>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c6c:	4b41      	ldr	r3, [pc, #260]	@ (8003d74 <HAL_RCC_OscConfig+0x618>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a40      	ldr	r2, [pc, #256]	@ (8003d74 <HAL_RCC_OscConfig+0x618>)
 8003c72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c78:	4b3e      	ldr	r3, [pc, #248]	@ (8003d74 <HAL_RCC_OscConfig+0x618>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4a3d      	ldr	r2, [pc, #244]	@ (8003d74 <HAL_RCC_OscConfig+0x618>)
 8003c7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7fd fdc8 	bl	8001818 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8c:	f7fd fdc4 	bl	8001818 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e066      	b.n	8003d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c9e:	4b35      	ldr	r3, [pc, #212]	@ (8003d74 <HAL_RCC_OscConfig+0x618>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f0      	beq.n	8003c8c <HAL_RCC_OscConfig+0x530>
 8003caa:	e05e      	b.n	8003d6a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cac:	4b31      	ldr	r3, [pc, #196]	@ (8003d74 <HAL_RCC_OscConfig+0x618>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a30      	ldr	r2, [pc, #192]	@ (8003d74 <HAL_RCC_OscConfig+0x618>)
 8003cb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fd fdae 	bl	8001818 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc0:	f7fd fdaa 	bl	8001818 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e04c      	b.n	8003d6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cd2:	4b28      	ldr	r3, [pc, #160]	@ (8003d74 <HAL_RCC_OscConfig+0x618>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003cde:	4b25      	ldr	r3, [pc, #148]	@ (8003d74 <HAL_RCC_OscConfig+0x618>)
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	4924      	ldr	r1, [pc, #144]	@ (8003d74 <HAL_RCC_OscConfig+0x618>)
 8003ce4:	4b25      	ldr	r3, [pc, #148]	@ (8003d7c <HAL_RCC_OscConfig+0x620>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	60cb      	str	r3, [r1, #12]
 8003cea:	e03e      	b.n	8003d6a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e039      	b.n	8003d6c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8003d74 <HAL_RCC_OscConfig+0x618>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f003 0203 	and.w	r2, r3, #3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d12c      	bne.n	8003d66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d16:	3b01      	subs	r3, #1
 8003d18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d123      	bne.n	8003d66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d11b      	bne.n	8003d66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d113      	bne.n	8003d66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d48:	085b      	lsrs	r3, r3, #1
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d109      	bne.n	8003d66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d5c:	085b      	lsrs	r3, r3, #1
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d001      	beq.n	8003d6a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3720      	adds	r7, #32
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40021000 	.word	0x40021000
 8003d78:	019f800c 	.word	0x019f800c
 8003d7c:	feeefffc 	.word	0xfeeefffc

08003d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e11e      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d98:	4b91      	ldr	r3, [pc, #580]	@ (8003fe0 <HAL_RCC_ClockConfig+0x260>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 030f 	and.w	r3, r3, #15
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d910      	bls.n	8003dc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b8e      	ldr	r3, [pc, #568]	@ (8003fe0 <HAL_RCC_ClockConfig+0x260>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 020f 	bic.w	r2, r3, #15
 8003dae:	498c      	ldr	r1, [pc, #560]	@ (8003fe0 <HAL_RCC_ClockConfig+0x260>)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db6:	4b8a      	ldr	r3, [pc, #552]	@ (8003fe0 <HAL_RCC_ClockConfig+0x260>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d001      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e106      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d073      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d129      	bne.n	8003e30 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ddc:	4b81      	ldr	r3, [pc, #516]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0f4      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003dec:	f000 f99e 	bl	800412c <RCC_GetSysClockFreqFromPLLSource>
 8003df0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4a7c      	ldr	r2, [pc, #496]	@ (8003fe8 <HAL_RCC_ClockConfig+0x268>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d93f      	bls.n	8003e7a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003dfa:	4b7a      	ldr	r3, [pc, #488]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d009      	beq.n	8003e1a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d033      	beq.n	8003e7a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d12f      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e1a:	4b72      	ldr	r3, [pc, #456]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e22:	4a70      	ldr	r2, [pc, #448]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003e24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e2a:	2380      	movs	r3, #128	@ 0x80
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	e024      	b.n	8003e7a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d107      	bne.n	8003e48 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e38:	4b6a      	ldr	r3, [pc, #424]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d109      	bne.n	8003e58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0c6      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e48:	4b66      	ldr	r3, [pc, #408]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0be      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e58:	f000 f8ce 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8003e5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4a61      	ldr	r2, [pc, #388]	@ (8003fe8 <HAL_RCC_ClockConfig+0x268>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d909      	bls.n	8003e7a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e66:	4b5f      	ldr	r3, [pc, #380]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e6e:	4a5d      	ldr	r2, [pc, #372]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e76:	2380      	movs	r3, #128	@ 0x80
 8003e78:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e7a:	4b5a      	ldr	r3, [pc, #360]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f023 0203 	bic.w	r2, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	4957      	ldr	r1, [pc, #348]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e8c:	f7fd fcc4 	bl	8001818 <HAL_GetTick>
 8003e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	e00a      	b.n	8003eaa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e94:	f7fd fcc0 	bl	8001818 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e095      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	4b4e      	ldr	r3, [pc, #312]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 020c 	and.w	r2, r3, #12
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d1eb      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d023      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed4:	4b43      	ldr	r3, [pc, #268]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a42      	ldr	r2, [pc, #264]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003eda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ede:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d007      	beq.n	8003efc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003eec:	4b3d      	ldr	r3, [pc, #244]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ef4:	4a3b      	ldr	r2, [pc, #236]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003ef6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003efa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003efc:	4b39      	ldr	r3, [pc, #228]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	4936      	ldr	r1, [pc, #216]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	608b      	str	r3, [r1, #8]
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	2b80      	cmp	r3, #128	@ 0x80
 8003f14:	d105      	bne.n	8003f22 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f16:	4b33      	ldr	r3, [pc, #204]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	4a32      	ldr	r2, [pc, #200]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003f1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f20:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f22:	4b2f      	ldr	r3, [pc, #188]	@ (8003fe0 <HAL_RCC_ClockConfig+0x260>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d21d      	bcs.n	8003f6c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f30:	4b2b      	ldr	r3, [pc, #172]	@ (8003fe0 <HAL_RCC_ClockConfig+0x260>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f023 020f 	bic.w	r2, r3, #15
 8003f38:	4929      	ldr	r1, [pc, #164]	@ (8003fe0 <HAL_RCC_ClockConfig+0x260>)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f40:	f7fd fc6a 	bl	8001818 <HAL_GetTick>
 8003f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f46:	e00a      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f48:	f7fd fc66 	bl	8001818 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e03b      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5e:	4b20      	ldr	r3, [pc, #128]	@ (8003fe0 <HAL_RCC_ClockConfig+0x260>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d1ed      	bne.n	8003f48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f78:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	4917      	ldr	r1, [pc, #92]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f96:	4b13      	ldr	r3, [pc, #76]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	490f      	ldr	r1, [pc, #60]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003faa:	f000 f825 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe4 <HAL_RCC_ClockConfig+0x264>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	091b      	lsrs	r3, r3, #4
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	490c      	ldr	r1, [pc, #48]	@ (8003fec <HAL_RCC_ClockConfig+0x26c>)
 8003fbc:	5ccb      	ldrb	r3, [r1, r3]
 8003fbe:	f003 031f 	and.w	r3, r3, #31
 8003fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ff0 <HAL_RCC_ClockConfig+0x270>)
 8003fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fca:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff4 <HAL_RCC_ClockConfig+0x274>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fd fbd6 	bl	8001780 <HAL_InitTick>
 8003fd4:	4603      	mov	r3, r0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40022000 	.word	0x40022000
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	04c4b400 	.word	0x04c4b400
 8003fec:	08007348 	.word	0x08007348
 8003ff0:	20000008 	.word	0x20000008
 8003ff4:	2000000c 	.word	0x2000000c

08003ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	2b04      	cmp	r3, #4
 8004008:	d102      	bne.n	8004010 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800400a:	4b2a      	ldr	r3, [pc, #168]	@ (80040b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800400c:	613b      	str	r3, [r7, #16]
 800400e:	e047      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004010:	4b27      	ldr	r3, [pc, #156]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 030c 	and.w	r3, r3, #12
 8004018:	2b08      	cmp	r3, #8
 800401a:	d102      	bne.n	8004022 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800401c:	4b26      	ldr	r3, [pc, #152]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800401e:	613b      	str	r3, [r7, #16]
 8004020:	e03e      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004022:	4b23      	ldr	r3, [pc, #140]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b0c      	cmp	r3, #12
 800402c:	d136      	bne.n	800409c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800402e:	4b20      	ldr	r3, [pc, #128]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004038:	4b1d      	ldr	r3, [pc, #116]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	091b      	lsrs	r3, r3, #4
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	3301      	adds	r3, #1
 8004044:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b03      	cmp	r3, #3
 800404a:	d10c      	bne.n	8004066 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800404c:	4a1a      	ldr	r2, [pc, #104]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	fbb2 f3f3 	udiv	r3, r2, r3
 8004054:	4a16      	ldr	r2, [pc, #88]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004056:	68d2      	ldr	r2, [r2, #12]
 8004058:	0a12      	lsrs	r2, r2, #8
 800405a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800405e:	fb02 f303 	mul.w	r3, r2, r3
 8004062:	617b      	str	r3, [r7, #20]
      break;
 8004064:	e00c      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004066:	4a13      	ldr	r2, [pc, #76]	@ (80040b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	fbb2 f3f3 	udiv	r3, r2, r3
 800406e:	4a10      	ldr	r2, [pc, #64]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004070:	68d2      	ldr	r2, [r2, #12]
 8004072:	0a12      	lsrs	r2, r2, #8
 8004074:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004078:	fb02 f303 	mul.w	r3, r2, r3
 800407c:	617b      	str	r3, [r7, #20]
      break;
 800407e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004080:	4b0b      	ldr	r3, [pc, #44]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	0e5b      	lsrs	r3, r3, #25
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	3301      	adds	r3, #1
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	fbb2 f3f3 	udiv	r3, r2, r3
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	e001      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040a0:	693b      	ldr	r3, [r7, #16]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40021000 	.word	0x40021000
 80040b4:	00f42400 	.word	0x00f42400
 80040b8:	02dc6c00 	.word	0x02dc6c00

080040bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040c0:	4b03      	ldr	r3, [pc, #12]	@ (80040d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040c2:	681b      	ldr	r3, [r3, #0]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	20000008 	.word	0x20000008

080040d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040d8:	f7ff fff0 	bl	80040bc <HAL_RCC_GetHCLKFreq>
 80040dc:	4602      	mov	r2, r0
 80040de:	4b06      	ldr	r3, [pc, #24]	@ (80040f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	0a1b      	lsrs	r3, r3, #8
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	4904      	ldr	r1, [pc, #16]	@ (80040fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80040ea:	5ccb      	ldrb	r3, [r1, r3]
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40021000 	.word	0x40021000
 80040fc:	08007358 	.word	0x08007358

08004100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004104:	f7ff ffda 	bl	80040bc <HAL_RCC_GetHCLKFreq>
 8004108:	4602      	mov	r2, r0
 800410a:	4b06      	ldr	r3, [pc, #24]	@ (8004124 <HAL_RCC_GetPCLK2Freq+0x24>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	0adb      	lsrs	r3, r3, #11
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	4904      	ldr	r1, [pc, #16]	@ (8004128 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004120:	4618      	mov	r0, r3
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40021000 	.word	0x40021000
 8004128:	08007358 	.word	0x08007358

0800412c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004132:	4b1e      	ldr	r3, [pc, #120]	@ (80041ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800413c:	4b1b      	ldr	r3, [pc, #108]	@ (80041ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	091b      	lsrs	r3, r3, #4
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	3301      	adds	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	2b03      	cmp	r3, #3
 800414e:	d10c      	bne.n	800416a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004150:	4a17      	ldr	r2, [pc, #92]	@ (80041b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	fbb2 f3f3 	udiv	r3, r2, r3
 8004158:	4a14      	ldr	r2, [pc, #80]	@ (80041ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800415a:	68d2      	ldr	r2, [r2, #12]
 800415c:	0a12      	lsrs	r2, r2, #8
 800415e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004162:	fb02 f303 	mul.w	r3, r2, r3
 8004166:	617b      	str	r3, [r7, #20]
    break;
 8004168:	e00c      	b.n	8004184 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800416a:	4a12      	ldr	r2, [pc, #72]	@ (80041b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004172:	4a0e      	ldr	r2, [pc, #56]	@ (80041ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004174:	68d2      	ldr	r2, [r2, #12]
 8004176:	0a12      	lsrs	r2, r2, #8
 8004178:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800417c:	fb02 f303 	mul.w	r3, r2, r3
 8004180:	617b      	str	r3, [r7, #20]
    break;
 8004182:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004184:	4b09      	ldr	r3, [pc, #36]	@ (80041ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	0e5b      	lsrs	r3, r3, #25
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	3301      	adds	r3, #1
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	fbb2 f3f3 	udiv	r3, r2, r3
 800419c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800419e:	687b      	ldr	r3, [r7, #4]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	371c      	adds	r7, #28
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	40021000 	.word	0x40021000
 80041b0:	02dc6c00 	.word	0x02dc6c00
 80041b4:	00f42400 	.word	0x00f42400

080041b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041c0:	2300      	movs	r3, #0
 80041c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041c4:	2300      	movs	r3, #0
 80041c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 8098 	beq.w	8004306 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041d6:	2300      	movs	r3, #0
 80041d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041da:	4b43      	ldr	r3, [pc, #268]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10d      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e6:	4b40      	ldr	r3, [pc, #256]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ea:	4a3f      	ldr	r2, [pc, #252]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80041f2:	4b3d      	ldr	r3, [pc, #244]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041fa:	60bb      	str	r3, [r7, #8]
 80041fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041fe:	2301      	movs	r3, #1
 8004200:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004202:	4b3a      	ldr	r3, [pc, #232]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a39      	ldr	r2, [pc, #228]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800420c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800420e:	f7fd fb03 	bl	8001818 <HAL_GetTick>
 8004212:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004214:	e009      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004216:	f7fd faff 	bl	8001818 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d902      	bls.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	74fb      	strb	r3, [r7, #19]
        break;
 8004228:	e005      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800422a:	4b30      	ldr	r3, [pc, #192]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0ef      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004236:	7cfb      	ldrb	r3, [r7, #19]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d159      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800423c:	4b2a      	ldr	r3, [pc, #168]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004246:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d01e      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	429a      	cmp	r2, r3
 8004256:	d019      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004258:	4b23      	ldr	r3, [pc, #140]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800425e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004262:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004264:	4b20      	ldr	r3, [pc, #128]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426a:	4a1f      	ldr	r2, [pc, #124]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800426c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004270:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004274:	4b1c      	ldr	r3, [pc, #112]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427a:	4a1b      	ldr	r2, [pc, #108]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800427c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004284:	4a18      	ldr	r2, [pc, #96]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d016      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004296:	f7fd fabf 	bl	8001818 <HAL_GetTick>
 800429a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800429c:	e00b      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429e:	f7fd fabb 	bl	8001818 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d902      	bls.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	74fb      	strb	r3, [r7, #19]
            break;
 80042b4:	e006      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b6:	4b0c      	ldr	r3, [pc, #48]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0ec      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80042c4:	7cfb      	ldrb	r3, [r7, #19]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10b      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ca:	4b07      	ldr	r3, [pc, #28]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d8:	4903      	ldr	r1, [pc, #12]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80042e0:	e008      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042e2:	7cfb      	ldrb	r3, [r7, #19]
 80042e4:	74bb      	strb	r3, [r7, #18]
 80042e6:	e005      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042e8:	40021000 	.word	0x40021000
 80042ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f0:	7cfb      	ldrb	r3, [r7, #19]
 80042f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042f4:	7c7b      	ldrb	r3, [r7, #17]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d105      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042fa:	4ba7      	ldr	r3, [pc, #668]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042fe:	4aa6      	ldr	r2, [pc, #664]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004300:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004304:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004312:	4ba1      	ldr	r3, [pc, #644]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004318:	f023 0203 	bic.w	r2, r3, #3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	499d      	ldr	r1, [pc, #628]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004334:	4b98      	ldr	r3, [pc, #608]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433a:	f023 020c 	bic.w	r2, r3, #12
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	4995      	ldr	r1, [pc, #596]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004356:	4b90      	ldr	r3, [pc, #576]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	498c      	ldr	r1, [pc, #560]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004378:	4b87      	ldr	r3, [pc, #540]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800437e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	4984      	ldr	r1, [pc, #528]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800439a:	4b7f      	ldr	r3, [pc, #508]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	497b      	ldr	r1, [pc, #492]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043bc:	4b76      	ldr	r3, [pc, #472]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	4973      	ldr	r1, [pc, #460]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043de:	4b6e      	ldr	r3, [pc, #440]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	496a      	ldr	r1, [pc, #424]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004400:	4b65      	ldr	r3, [pc, #404]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004406:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	4962      	ldr	r1, [pc, #392]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004422:	4b5d      	ldr	r3, [pc, #372]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004428:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004430:	4959      	ldr	r1, [pc, #356]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004444:	4b54      	ldr	r3, [pc, #336]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004446:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800444a:	f023 0203 	bic.w	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004452:	4951      	ldr	r1, [pc, #324]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004466:	4b4c      	ldr	r3, [pc, #304]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004474:	4948      	ldr	r1, [pc, #288]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004484:	2b00      	cmp	r3, #0
 8004486:	d015      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004488:	4b43      	ldr	r3, [pc, #268]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004496:	4940      	ldr	r1, [pc, #256]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044a6:	d105      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4a3a      	ldr	r2, [pc, #232]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d015      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044c0:	4b35      	ldr	r3, [pc, #212]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ce:	4932      	ldr	r1, [pc, #200]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044de:	d105      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d015      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044f8:	4b27      	ldr	r3, [pc, #156]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004506:	4924      	ldr	r1, [pc, #144]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004512:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004516:	d105      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004518:	4b1f      	ldr	r3, [pc, #124]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	4a1e      	ldr	r2, [pc, #120]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004522:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d015      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004530:	4b19      	ldr	r3, [pc, #100]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004536:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800453e:	4916      	ldr	r1, [pc, #88]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800454e:	d105      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004550:	4b11      	ldr	r3, [pc, #68]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4a10      	ldr	r2, [pc, #64]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004556:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800455a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d019      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004568:	4b0b      	ldr	r3, [pc, #44]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	4908      	ldr	r1, [pc, #32]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004582:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004586:	d109      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004588:	4b03      	ldr	r3, [pc, #12]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	4a02      	ldr	r2, [pc, #8]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004592:	60d3      	str	r3, [r2, #12]
 8004594:	e002      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004596:	bf00      	nop
 8004598:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d015      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045a8:	4b29      	ldr	r3, [pc, #164]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b6:	4926      	ldr	r1, [pc, #152]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045c6:	d105      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045c8:	4b21      	ldr	r3, [pc, #132]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4a20      	ldr	r2, [pc, #128]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d015      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80045e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ee:	4918      	ldr	r1, [pc, #96]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045fe:	d105      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004600:	4b13      	ldr	r3, [pc, #76]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	4a12      	ldr	r2, [pc, #72]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004606:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800460a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d015      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004618:	4b0d      	ldr	r3, [pc, #52]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800461a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800461e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004626:	490a      	ldr	r1, [pc, #40]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004632:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004636:	d105      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004638:	4b05      	ldr	r3, [pc, #20]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4a04      	ldr	r2, [pc, #16]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800463e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004642:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004644:	7cbb      	ldrb	r3, [r7, #18]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40021000 	.word	0x40021000

08004654 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e09d      	b.n	80047a2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466a:	2b00      	cmp	r3, #0
 800466c:	d108      	bne.n	8004680 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004676:	d009      	beq.n	800468c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	61da      	str	r2, [r3, #28]
 800467e:	e005      	b.n	800468c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d106      	bne.n	80046ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fc fe0a 	bl	80012c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046cc:	d902      	bls.n	80046d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	e002      	b.n	80046da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80046d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80046e2:	d007      	beq.n	80046f4 <HAL_SPI_Init+0xa0>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046ec:	d002      	beq.n	80046f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004736:	ea42 0103 	orr.w	r1, r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	0c1b      	lsrs	r3, r3, #16
 8004750:	f003 0204 	and.w	r2, r3, #4
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004770:	ea42 0103 	orr.w	r1, r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004790:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b088      	sub	sp, #32
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	4613      	mov	r3, r2
 80047b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_SPI_Transmit+0x22>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e15f      	b.n	8004a8c <HAL_SPI_Transmit+0x2e2>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047d4:	f7fd f820 	bl	8001818 <HAL_GetTick>
 80047d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d002      	beq.n	80047f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
 80047ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047ee:	e148      	b.n	8004a82 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <HAL_SPI_Transmit+0x52>
 80047f6:	88fb      	ldrh	r3, [r7, #6]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d102      	bne.n	8004802 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004800:	e13f      	b.n	8004a82 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2203      	movs	r2, #3
 8004806:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	88fa      	ldrh	r2, [r7, #6]
 800481a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	88fa      	ldrh	r2, [r7, #6]
 8004820:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800484c:	d10f      	bne.n	800486e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800485c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800486c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004878:	2b40      	cmp	r3, #64	@ 0x40
 800487a:	d007      	beq.n	800488c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800488a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004894:	d94f      	bls.n	8004936 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <HAL_SPI_Transmit+0xfa>
 800489e:	8afb      	ldrh	r3, [r7, #22]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d142      	bne.n	800492a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a8:	881a      	ldrh	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b4:	1c9a      	adds	r2, r3, #2
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048c8:	e02f      	b.n	800492a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d112      	bne.n	80048fe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048dc:	881a      	ldrh	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e8:	1c9a      	adds	r2, r3, #2
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048fc:	e015      	b.n	800492a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048fe:	f7fc ff8b 	bl	8001818 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d803      	bhi.n	8004916 <HAL_SPI_Transmit+0x16c>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004914:	d102      	bne.n	800491c <HAL_SPI_Transmit+0x172>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d106      	bne.n	800492a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004928:	e0ab      	b.n	8004a82 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800492e:	b29b      	uxth	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1ca      	bne.n	80048ca <HAL_SPI_Transmit+0x120>
 8004934:	e080      	b.n	8004a38 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <HAL_SPI_Transmit+0x19a>
 800493e:	8afb      	ldrh	r3, [r7, #22]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d174      	bne.n	8004a2e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b01      	cmp	r3, #1
 800494c:	d912      	bls.n	8004974 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004952:	881a      	ldrh	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495e:	1c9a      	adds	r2, r3, #2
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004968:	b29b      	uxth	r3, r3
 800496a:	3b02      	subs	r3, #2
 800496c:	b29a      	uxth	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004972:	e05c      	b.n	8004a2e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	330c      	adds	r3, #12
 800497e:	7812      	ldrb	r2, [r2, #0]
 8004980:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800499a:	e048      	b.n	8004a2e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d12b      	bne.n	8004a02 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d912      	bls.n	80049da <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b8:	881a      	ldrh	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c4:	1c9a      	adds	r2, r3, #2
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b02      	subs	r3, #2
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049d8:	e029      	b.n	8004a2e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	330c      	adds	r3, #12
 80049e4:	7812      	ldrb	r2, [r2, #0]
 80049e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a00:	e015      	b.n	8004a2e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a02:	f7fc ff09 	bl	8001818 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d803      	bhi.n	8004a1a <HAL_SPI_Transmit+0x270>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d102      	bne.n	8004a20 <HAL_SPI_Transmit+0x276>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d106      	bne.n	8004a2e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004a2c:	e029      	b.n	8004a82 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1b1      	bne.n	800499c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	6839      	ldr	r1, [r7, #0]
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 f947 	bl	8004cd0 <SPI_EndRxTxTransaction>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10a      	bne.n	8004a6c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a56:	2300      	movs	r3, #0
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	77fb      	strb	r3, [r7, #31]
 8004a78:	e003      	b.n	8004a82 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004a8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3720      	adds	r7, #32
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004aa4:	f7fc feb8 	bl	8001818 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aac:	1a9b      	subs	r3, r3, r2
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ab4:	f7fc feb0 	bl	8001818 <HAL_GetTick>
 8004ab8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004aba:	4b39      	ldr	r3, [pc, #228]	@ (8004ba0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	015b      	lsls	r3, r3, #5
 8004ac0:	0d1b      	lsrs	r3, r3, #20
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	fb02 f303 	mul.w	r3, r2, r3
 8004ac8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aca:	e054      	b.n	8004b76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad2:	d050      	beq.n	8004b76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ad4:	f7fc fea0 	bl	8001818 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	69fa      	ldr	r2, [r7, #28]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d902      	bls.n	8004aea <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d13d      	bne.n	8004b66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004af8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b02:	d111      	bne.n	8004b28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b0c:	d004      	beq.n	8004b18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b16:	d107      	bne.n	8004b28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b30:	d10f      	bne.n	8004b52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e017      	b.n	8004b96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	bf0c      	ite	eq
 8004b86:	2301      	moveq	r3, #1
 8004b88:	2300      	movne	r3, #0
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	79fb      	ldrb	r3, [r7, #7]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d19b      	bne.n	8004acc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3720      	adds	r7, #32
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000008 	.word	0x20000008

08004ba4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	@ 0x28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004bb6:	f7fc fe2f 	bl	8001818 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bbe:	1a9b      	subs	r3, r3, r2
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004bc6:	f7fc fe27 	bl	8001818 <HAL_GetTick>
 8004bca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	330c      	adds	r3, #12
 8004bd2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004bd4:	4b3d      	ldr	r3, [pc, #244]	@ (8004ccc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	00da      	lsls	r2, r3, #3
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	0d1b      	lsrs	r3, r3, #20
 8004be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be6:	fb02 f303 	mul.w	r3, r2, r3
 8004bea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004bec:	e060      	b.n	8004cb0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004bf4:	d107      	bne.n	8004c06 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d104      	bne.n	8004c06 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c04:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d050      	beq.n	8004cb0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c0e:	f7fc fe03 	bl	8001818 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d902      	bls.n	8004c24 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d13d      	bne.n	8004ca0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c3c:	d111      	bne.n	8004c62 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c46:	d004      	beq.n	8004c52 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c50:	d107      	bne.n	8004c62 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c60:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c6a:	d10f      	bne.n	8004c8c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e010      	b.n	8004cc2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689a      	ldr	r2, [r3, #8]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d196      	bne.n	8004bee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3728      	adds	r7, #40	@ 0x28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000008 	.word	0x20000008

08004cd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f7ff ff5b 	bl	8004ba4 <SPI_WaitFifoStateUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d007      	beq.n	8004d04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cf8:	f043 0220 	orr.w	r2, r3, #32
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e027      	b.n	8004d54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2180      	movs	r1, #128	@ 0x80
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7ff fec0 	bl	8004a94 <SPI_WaitFlagStateUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d1e:	f043 0220 	orr.w	r2, r3, #32
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e014      	b.n	8004d54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f7ff ff34 	bl	8004ba4 <SPI_WaitFifoStateUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d007      	beq.n	8004d52 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d46:	f043 0220 	orr.w	r2, r3, #32
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e000      	b.n	8004d54 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e049      	b.n	8004e02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fc fae0 	bl	8001348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3304      	adds	r3, #4
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	f000 fa26 	bl	80051ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d001      	beq.n	8004e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e054      	b.n	8004ece <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a26      	ldr	r2, [pc, #152]	@ (8004edc <HAL_TIM_Base_Start_IT+0xd0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d022      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e4e:	d01d      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a22      	ldr	r2, [pc, #136]	@ (8004ee0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d018      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a21      	ldr	r2, [pc, #132]	@ (8004ee4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d013      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1f      	ldr	r2, [pc, #124]	@ (8004ee8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00e      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1e      	ldr	r2, [pc, #120]	@ (8004eec <HAL_TIM_Base_Start_IT+0xe0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d009      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ef0 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d004      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x80>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1b      	ldr	r2, [pc, #108]	@ (8004ef4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d115      	bne.n	8004eb8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	4b19      	ldr	r3, [pc, #100]	@ (8004ef8 <HAL_TIM_Base_Start_IT+0xec>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2b06      	cmp	r3, #6
 8004e9c:	d015      	beq.n	8004eca <HAL_TIM_Base_Start_IT+0xbe>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea4:	d011      	beq.n	8004eca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0201 	orr.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb6:	e008      	b.n	8004eca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	e000      	b.n	8004ecc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40012c00 	.word	0x40012c00
 8004ee0:	40000400 	.word	0x40000400
 8004ee4:	40000800 	.word	0x40000800
 8004ee8:	40000c00 	.word	0x40000c00
 8004eec:	40013400 	.word	0x40013400
 8004ef0:	40014000 	.word	0x40014000
 8004ef4:	40015000 	.word	0x40015000
 8004ef8:	00010007 	.word	0x00010007

08004efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d020      	beq.n	8004f60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01b      	beq.n	8004f60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f06f 0202 	mvn.w	r2, #2
 8004f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f931 	bl	80051ae <HAL_TIM_IC_CaptureCallback>
 8004f4c:	e005      	b.n	8004f5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f923 	bl	800519a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f934 	bl	80051c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d020      	beq.n	8004fac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01b      	beq.n	8004fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0204 	mvn.w	r2, #4
 8004f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2202      	movs	r2, #2
 8004f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f90b 	bl	80051ae <HAL_TIM_IC_CaptureCallback>
 8004f98:	e005      	b.n	8004fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f8fd 	bl	800519a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f90e 	bl	80051c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 0308 	and.w	r3, r3, #8
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d020      	beq.n	8004ff8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 0308 	and.w	r3, r3, #8
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d01b      	beq.n	8004ff8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0208 	mvn.w	r2, #8
 8004fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2204      	movs	r2, #4
 8004fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f8e5 	bl	80051ae <HAL_TIM_IC_CaptureCallback>
 8004fe4:	e005      	b.n	8004ff2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f8d7 	bl	800519a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f8e8 	bl	80051c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d020      	beq.n	8005044 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01b      	beq.n	8005044 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0210 	mvn.w	r2, #16
 8005014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2208      	movs	r2, #8
 800501a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f8bf 	bl	80051ae <HAL_TIM_IC_CaptureCallback>
 8005030:	e005      	b.n	800503e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f8b1 	bl	800519a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f8c2 	bl	80051c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00c      	beq.n	8005068 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d007      	beq.n	8005068 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0201 	mvn.w	r2, #1
 8005060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fb fe06 	bl	8000c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800506e:	2b00      	cmp	r3, #0
 8005070:	d104      	bne.n	800507c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00c      	beq.n	8005096 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800508e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f969 	bl	8005368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00c      	beq.n	80050ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d007      	beq.n	80050ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80050b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f961 	bl	800537c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00c      	beq.n	80050de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d007      	beq.n	80050de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f87c 	bl	80051d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00c      	beq.n	8005102 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f003 0320 	and.w	r3, r3, #32
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d007      	beq.n	8005102 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f06f 0220 	mvn.w	r2, #32
 80050fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f929 	bl	8005354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00c      	beq.n	8005126 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d007      	beq.n	8005126 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800511e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f935 	bl	8005390 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00c      	beq.n	800514a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d007      	beq.n	800514a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f92d 	bl	80053a4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00c      	beq.n	800516e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f925 	bl	80053b8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00c      	beq.n	8005192 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d007      	beq.n	8005192 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800518a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f91d 	bl	80053cc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005192:	bf00      	nop
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
	...

080051ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a4c      	ldr	r2, [pc, #304]	@ (8005330 <TIM_Base_SetConfig+0x144>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d017      	beq.n	8005234 <TIM_Base_SetConfig+0x48>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800520a:	d013      	beq.n	8005234 <TIM_Base_SetConfig+0x48>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a49      	ldr	r2, [pc, #292]	@ (8005334 <TIM_Base_SetConfig+0x148>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00f      	beq.n	8005234 <TIM_Base_SetConfig+0x48>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a48      	ldr	r2, [pc, #288]	@ (8005338 <TIM_Base_SetConfig+0x14c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00b      	beq.n	8005234 <TIM_Base_SetConfig+0x48>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a47      	ldr	r2, [pc, #284]	@ (800533c <TIM_Base_SetConfig+0x150>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d007      	beq.n	8005234 <TIM_Base_SetConfig+0x48>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a46      	ldr	r2, [pc, #280]	@ (8005340 <TIM_Base_SetConfig+0x154>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_Base_SetConfig+0x48>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a45      	ldr	r2, [pc, #276]	@ (8005344 <TIM_Base_SetConfig+0x158>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d108      	bne.n	8005246 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800523a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a39      	ldr	r2, [pc, #228]	@ (8005330 <TIM_Base_SetConfig+0x144>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d023      	beq.n	8005296 <TIM_Base_SetConfig+0xaa>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005254:	d01f      	beq.n	8005296 <TIM_Base_SetConfig+0xaa>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a36      	ldr	r2, [pc, #216]	@ (8005334 <TIM_Base_SetConfig+0x148>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d01b      	beq.n	8005296 <TIM_Base_SetConfig+0xaa>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a35      	ldr	r2, [pc, #212]	@ (8005338 <TIM_Base_SetConfig+0x14c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d017      	beq.n	8005296 <TIM_Base_SetConfig+0xaa>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a34      	ldr	r2, [pc, #208]	@ (800533c <TIM_Base_SetConfig+0x150>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d013      	beq.n	8005296 <TIM_Base_SetConfig+0xaa>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a33      	ldr	r2, [pc, #204]	@ (8005340 <TIM_Base_SetConfig+0x154>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00f      	beq.n	8005296 <TIM_Base_SetConfig+0xaa>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a33      	ldr	r2, [pc, #204]	@ (8005348 <TIM_Base_SetConfig+0x15c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00b      	beq.n	8005296 <TIM_Base_SetConfig+0xaa>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a32      	ldr	r2, [pc, #200]	@ (800534c <TIM_Base_SetConfig+0x160>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d007      	beq.n	8005296 <TIM_Base_SetConfig+0xaa>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a31      	ldr	r2, [pc, #196]	@ (8005350 <TIM_Base_SetConfig+0x164>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d003      	beq.n	8005296 <TIM_Base_SetConfig+0xaa>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a2c      	ldr	r2, [pc, #176]	@ (8005344 <TIM_Base_SetConfig+0x158>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d108      	bne.n	80052a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800529c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a18      	ldr	r2, [pc, #96]	@ (8005330 <TIM_Base_SetConfig+0x144>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d013      	beq.n	80052fc <TIM_Base_SetConfig+0x110>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005340 <TIM_Base_SetConfig+0x154>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00f      	beq.n	80052fc <TIM_Base_SetConfig+0x110>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a1a      	ldr	r2, [pc, #104]	@ (8005348 <TIM_Base_SetConfig+0x15c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00b      	beq.n	80052fc <TIM_Base_SetConfig+0x110>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a19      	ldr	r2, [pc, #100]	@ (800534c <TIM_Base_SetConfig+0x160>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d007      	beq.n	80052fc <TIM_Base_SetConfig+0x110>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a18      	ldr	r2, [pc, #96]	@ (8005350 <TIM_Base_SetConfig+0x164>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_Base_SetConfig+0x110>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a13      	ldr	r2, [pc, #76]	@ (8005344 <TIM_Base_SetConfig+0x158>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d103      	bne.n	8005304 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b01      	cmp	r3, #1
 8005314:	d105      	bne.n	8005322 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f023 0201 	bic.w	r2, r3, #1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	611a      	str	r2, [r3, #16]
  }
}
 8005322:	bf00      	nop
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	40012c00 	.word	0x40012c00
 8005334:	40000400 	.word	0x40000400
 8005338:	40000800 	.word	0x40000800
 800533c:	40000c00 	.word	0x40000c00
 8005340:	40013400 	.word	0x40013400
 8005344:	40015000 	.word	0x40015000
 8005348:	40014000 	.word	0x40014000
 800534c:	40014400 	.word	0x40014400
 8005350:	40014800 	.word	0x40014800

08005354 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e042      	b.n	8005478 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d106      	bne.n	800540a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7fb ffc5 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2224      	movs	r2, #36	@ 0x24
 800540e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0201 	bic.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fbb2 	bl	8005b94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f8b3 	bl	800559c <UART_SetConfig>
 8005436:	4603      	mov	r3, r0
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e01b      	b.n	8005478 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800544e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800545e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fc31 	bl	8005cd8 <UART_CheckIdleState>
 8005476:	4603      	mov	r3, r0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	@ 0x28
 8005484:	af02      	add	r7, sp, #8
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	4613      	mov	r3, r2
 800548e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005496:	2b20      	cmp	r3, #32
 8005498:	d17b      	bne.n	8005592 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <HAL_UART_Transmit+0x26>
 80054a0:	88fb      	ldrh	r3, [r7, #6]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e074      	b.n	8005594 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2221      	movs	r2, #33	@ 0x21
 80054b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054ba:	f7fc f9ad 	bl	8001818 <HAL_GetTick>
 80054be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	88fa      	ldrh	r2, [r7, #6]
 80054c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	88fa      	ldrh	r2, [r7, #6]
 80054cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054d8:	d108      	bne.n	80054ec <HAL_UART_Transmit+0x6c>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d104      	bne.n	80054ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	e003      	b.n	80054f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054f0:	2300      	movs	r3, #0
 80054f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054f4:	e030      	b.n	8005558 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2200      	movs	r2, #0
 80054fe:	2180      	movs	r1, #128	@ 0x80
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 fc93 	bl	8005e2c <UART_WaitOnFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e03d      	b.n	8005594 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10b      	bne.n	8005536 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800552c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	3302      	adds	r3, #2
 8005532:	61bb      	str	r3, [r7, #24]
 8005534:	e007      	b.n	8005546 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	781a      	ldrb	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	3301      	adds	r3, #1
 8005544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800555e:	b29b      	uxth	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1c8      	bne.n	80054f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2200      	movs	r2, #0
 800556c:	2140      	movs	r1, #64	@ 0x40
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 fc5c 	bl	8005e2c <UART_WaitOnFlagUntilTimeout>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d005      	beq.n	8005586 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2220      	movs	r2, #32
 800557e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e006      	b.n	8005594 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	e000      	b.n	8005594 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005592:	2302      	movs	r3, #2
  }
}
 8005594:	4618      	mov	r0, r3
 8005596:	3720      	adds	r7, #32
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800559c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055a0:	b08c      	sub	sp, #48	@ 0x30
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	431a      	orrs	r2, r3
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	431a      	orrs	r2, r3
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	4baa      	ldr	r3, [pc, #680]	@ (8005874 <UART_SetConfig+0x2d8>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	6812      	ldr	r2, [r2, #0]
 80055d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055d4:	430b      	orrs	r3, r1
 80055d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a9f      	ldr	r2, [pc, #636]	@ (8005878 <UART_SetConfig+0x2dc>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d004      	beq.n	8005608 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005604:	4313      	orrs	r3, r2
 8005606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005612:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	6812      	ldr	r2, [r2, #0]
 800561a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800561c:	430b      	orrs	r3, r1
 800561e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005626:	f023 010f 	bic.w	r1, r3, #15
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a90      	ldr	r2, [pc, #576]	@ (800587c <UART_SetConfig+0x2e0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d125      	bne.n	800568c <UART_SetConfig+0xf0>
 8005640:	4b8f      	ldr	r3, [pc, #572]	@ (8005880 <UART_SetConfig+0x2e4>)
 8005642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	2b03      	cmp	r3, #3
 800564c:	d81a      	bhi.n	8005684 <UART_SetConfig+0xe8>
 800564e:	a201      	add	r2, pc, #4	@ (adr r2, 8005654 <UART_SetConfig+0xb8>)
 8005650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005654:	08005665 	.word	0x08005665
 8005658:	08005675 	.word	0x08005675
 800565c:	0800566d 	.word	0x0800566d
 8005660:	0800567d 	.word	0x0800567d
 8005664:	2301      	movs	r3, #1
 8005666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800566a:	e116      	b.n	800589a <UART_SetConfig+0x2fe>
 800566c:	2302      	movs	r3, #2
 800566e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005672:	e112      	b.n	800589a <UART_SetConfig+0x2fe>
 8005674:	2304      	movs	r3, #4
 8005676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800567a:	e10e      	b.n	800589a <UART_SetConfig+0x2fe>
 800567c:	2308      	movs	r3, #8
 800567e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005682:	e10a      	b.n	800589a <UART_SetConfig+0x2fe>
 8005684:	2310      	movs	r3, #16
 8005686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800568a:	e106      	b.n	800589a <UART_SetConfig+0x2fe>
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a7c      	ldr	r2, [pc, #496]	@ (8005884 <UART_SetConfig+0x2e8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d138      	bne.n	8005708 <UART_SetConfig+0x16c>
 8005696:	4b7a      	ldr	r3, [pc, #488]	@ (8005880 <UART_SetConfig+0x2e4>)
 8005698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800569c:	f003 030c 	and.w	r3, r3, #12
 80056a0:	2b0c      	cmp	r3, #12
 80056a2:	d82d      	bhi.n	8005700 <UART_SetConfig+0x164>
 80056a4:	a201      	add	r2, pc, #4	@ (adr r2, 80056ac <UART_SetConfig+0x110>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	080056e1 	.word	0x080056e1
 80056b0:	08005701 	.word	0x08005701
 80056b4:	08005701 	.word	0x08005701
 80056b8:	08005701 	.word	0x08005701
 80056bc:	080056f1 	.word	0x080056f1
 80056c0:	08005701 	.word	0x08005701
 80056c4:	08005701 	.word	0x08005701
 80056c8:	08005701 	.word	0x08005701
 80056cc:	080056e9 	.word	0x080056e9
 80056d0:	08005701 	.word	0x08005701
 80056d4:	08005701 	.word	0x08005701
 80056d8:	08005701 	.word	0x08005701
 80056dc:	080056f9 	.word	0x080056f9
 80056e0:	2300      	movs	r3, #0
 80056e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056e6:	e0d8      	b.n	800589a <UART_SetConfig+0x2fe>
 80056e8:	2302      	movs	r3, #2
 80056ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ee:	e0d4      	b.n	800589a <UART_SetConfig+0x2fe>
 80056f0:	2304      	movs	r3, #4
 80056f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056f6:	e0d0      	b.n	800589a <UART_SetConfig+0x2fe>
 80056f8:	2308      	movs	r3, #8
 80056fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056fe:	e0cc      	b.n	800589a <UART_SetConfig+0x2fe>
 8005700:	2310      	movs	r3, #16
 8005702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005706:	e0c8      	b.n	800589a <UART_SetConfig+0x2fe>
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a5e      	ldr	r2, [pc, #376]	@ (8005888 <UART_SetConfig+0x2ec>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d125      	bne.n	800575e <UART_SetConfig+0x1c2>
 8005712:	4b5b      	ldr	r3, [pc, #364]	@ (8005880 <UART_SetConfig+0x2e4>)
 8005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005718:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800571c:	2b30      	cmp	r3, #48	@ 0x30
 800571e:	d016      	beq.n	800574e <UART_SetConfig+0x1b2>
 8005720:	2b30      	cmp	r3, #48	@ 0x30
 8005722:	d818      	bhi.n	8005756 <UART_SetConfig+0x1ba>
 8005724:	2b20      	cmp	r3, #32
 8005726:	d00a      	beq.n	800573e <UART_SetConfig+0x1a2>
 8005728:	2b20      	cmp	r3, #32
 800572a:	d814      	bhi.n	8005756 <UART_SetConfig+0x1ba>
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <UART_SetConfig+0x19a>
 8005730:	2b10      	cmp	r3, #16
 8005732:	d008      	beq.n	8005746 <UART_SetConfig+0x1aa>
 8005734:	e00f      	b.n	8005756 <UART_SetConfig+0x1ba>
 8005736:	2300      	movs	r3, #0
 8005738:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800573c:	e0ad      	b.n	800589a <UART_SetConfig+0x2fe>
 800573e:	2302      	movs	r3, #2
 8005740:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005744:	e0a9      	b.n	800589a <UART_SetConfig+0x2fe>
 8005746:	2304      	movs	r3, #4
 8005748:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800574c:	e0a5      	b.n	800589a <UART_SetConfig+0x2fe>
 800574e:	2308      	movs	r3, #8
 8005750:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005754:	e0a1      	b.n	800589a <UART_SetConfig+0x2fe>
 8005756:	2310      	movs	r3, #16
 8005758:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800575c:	e09d      	b.n	800589a <UART_SetConfig+0x2fe>
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a4a      	ldr	r2, [pc, #296]	@ (800588c <UART_SetConfig+0x2f0>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d125      	bne.n	80057b4 <UART_SetConfig+0x218>
 8005768:	4b45      	ldr	r3, [pc, #276]	@ (8005880 <UART_SetConfig+0x2e4>)
 800576a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800576e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005772:	2bc0      	cmp	r3, #192	@ 0xc0
 8005774:	d016      	beq.n	80057a4 <UART_SetConfig+0x208>
 8005776:	2bc0      	cmp	r3, #192	@ 0xc0
 8005778:	d818      	bhi.n	80057ac <UART_SetConfig+0x210>
 800577a:	2b80      	cmp	r3, #128	@ 0x80
 800577c:	d00a      	beq.n	8005794 <UART_SetConfig+0x1f8>
 800577e:	2b80      	cmp	r3, #128	@ 0x80
 8005780:	d814      	bhi.n	80057ac <UART_SetConfig+0x210>
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <UART_SetConfig+0x1f0>
 8005786:	2b40      	cmp	r3, #64	@ 0x40
 8005788:	d008      	beq.n	800579c <UART_SetConfig+0x200>
 800578a:	e00f      	b.n	80057ac <UART_SetConfig+0x210>
 800578c:	2300      	movs	r3, #0
 800578e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005792:	e082      	b.n	800589a <UART_SetConfig+0x2fe>
 8005794:	2302      	movs	r3, #2
 8005796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800579a:	e07e      	b.n	800589a <UART_SetConfig+0x2fe>
 800579c:	2304      	movs	r3, #4
 800579e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057a2:	e07a      	b.n	800589a <UART_SetConfig+0x2fe>
 80057a4:	2308      	movs	r3, #8
 80057a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057aa:	e076      	b.n	800589a <UART_SetConfig+0x2fe>
 80057ac:	2310      	movs	r3, #16
 80057ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057b2:	e072      	b.n	800589a <UART_SetConfig+0x2fe>
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a35      	ldr	r2, [pc, #212]	@ (8005890 <UART_SetConfig+0x2f4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d12a      	bne.n	8005814 <UART_SetConfig+0x278>
 80057be:	4b30      	ldr	r3, [pc, #192]	@ (8005880 <UART_SetConfig+0x2e4>)
 80057c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057cc:	d01a      	beq.n	8005804 <UART_SetConfig+0x268>
 80057ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057d2:	d81b      	bhi.n	800580c <UART_SetConfig+0x270>
 80057d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057d8:	d00c      	beq.n	80057f4 <UART_SetConfig+0x258>
 80057da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057de:	d815      	bhi.n	800580c <UART_SetConfig+0x270>
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <UART_SetConfig+0x250>
 80057e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057e8:	d008      	beq.n	80057fc <UART_SetConfig+0x260>
 80057ea:	e00f      	b.n	800580c <UART_SetConfig+0x270>
 80057ec:	2300      	movs	r3, #0
 80057ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057f2:	e052      	b.n	800589a <UART_SetConfig+0x2fe>
 80057f4:	2302      	movs	r3, #2
 80057f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057fa:	e04e      	b.n	800589a <UART_SetConfig+0x2fe>
 80057fc:	2304      	movs	r3, #4
 80057fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005802:	e04a      	b.n	800589a <UART_SetConfig+0x2fe>
 8005804:	2308      	movs	r3, #8
 8005806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800580a:	e046      	b.n	800589a <UART_SetConfig+0x2fe>
 800580c:	2310      	movs	r3, #16
 800580e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005812:	e042      	b.n	800589a <UART_SetConfig+0x2fe>
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a17      	ldr	r2, [pc, #92]	@ (8005878 <UART_SetConfig+0x2dc>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d13a      	bne.n	8005894 <UART_SetConfig+0x2f8>
 800581e:	4b18      	ldr	r3, [pc, #96]	@ (8005880 <UART_SetConfig+0x2e4>)
 8005820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005824:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005828:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800582c:	d01a      	beq.n	8005864 <UART_SetConfig+0x2c8>
 800582e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005832:	d81b      	bhi.n	800586c <UART_SetConfig+0x2d0>
 8005834:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005838:	d00c      	beq.n	8005854 <UART_SetConfig+0x2b8>
 800583a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800583e:	d815      	bhi.n	800586c <UART_SetConfig+0x2d0>
 8005840:	2b00      	cmp	r3, #0
 8005842:	d003      	beq.n	800584c <UART_SetConfig+0x2b0>
 8005844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005848:	d008      	beq.n	800585c <UART_SetConfig+0x2c0>
 800584a:	e00f      	b.n	800586c <UART_SetConfig+0x2d0>
 800584c:	2300      	movs	r3, #0
 800584e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005852:	e022      	b.n	800589a <UART_SetConfig+0x2fe>
 8005854:	2302      	movs	r3, #2
 8005856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800585a:	e01e      	b.n	800589a <UART_SetConfig+0x2fe>
 800585c:	2304      	movs	r3, #4
 800585e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005862:	e01a      	b.n	800589a <UART_SetConfig+0x2fe>
 8005864:	2308      	movs	r3, #8
 8005866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800586a:	e016      	b.n	800589a <UART_SetConfig+0x2fe>
 800586c:	2310      	movs	r3, #16
 800586e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005872:	e012      	b.n	800589a <UART_SetConfig+0x2fe>
 8005874:	cfff69f3 	.word	0xcfff69f3
 8005878:	40008000 	.word	0x40008000
 800587c:	40013800 	.word	0x40013800
 8005880:	40021000 	.word	0x40021000
 8005884:	40004400 	.word	0x40004400
 8005888:	40004800 	.word	0x40004800
 800588c:	40004c00 	.word	0x40004c00
 8005890:	40005000 	.word	0x40005000
 8005894:	2310      	movs	r3, #16
 8005896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4aae      	ldr	r2, [pc, #696]	@ (8005b58 <UART_SetConfig+0x5bc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	f040 8097 	bne.w	80059d4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d823      	bhi.n	80058f6 <UART_SetConfig+0x35a>
 80058ae:	a201      	add	r2, pc, #4	@ (adr r2, 80058b4 <UART_SetConfig+0x318>)
 80058b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b4:	080058d9 	.word	0x080058d9
 80058b8:	080058f7 	.word	0x080058f7
 80058bc:	080058e1 	.word	0x080058e1
 80058c0:	080058f7 	.word	0x080058f7
 80058c4:	080058e7 	.word	0x080058e7
 80058c8:	080058f7 	.word	0x080058f7
 80058cc:	080058f7 	.word	0x080058f7
 80058d0:	080058f7 	.word	0x080058f7
 80058d4:	080058ef 	.word	0x080058ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d8:	f7fe fbfc 	bl	80040d4 <HAL_RCC_GetPCLK1Freq>
 80058dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058de:	e010      	b.n	8005902 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058e0:	4b9e      	ldr	r3, [pc, #632]	@ (8005b5c <UART_SetConfig+0x5c0>)
 80058e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058e4:	e00d      	b.n	8005902 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058e6:	f7fe fb87 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 80058ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058ec:	e009      	b.n	8005902 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058f4:	e005      	b.n	8005902 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005900:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 8130 	beq.w	8005b6a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590e:	4a94      	ldr	r2, [pc, #592]	@ (8005b60 <UART_SetConfig+0x5c4>)
 8005910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005914:	461a      	mov	r2, r3
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	fbb3 f3f2 	udiv	r3, r3, r2
 800591c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	4613      	mov	r3, r2
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	4413      	add	r3, r2
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	429a      	cmp	r2, r3
 800592c:	d305      	bcc.n	800593a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	429a      	cmp	r2, r3
 8005938:	d903      	bls.n	8005942 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005940:	e113      	b.n	8005b6a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005944:	2200      	movs	r2, #0
 8005946:	60bb      	str	r3, [r7, #8]
 8005948:	60fa      	str	r2, [r7, #12]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594e:	4a84      	ldr	r2, [pc, #528]	@ (8005b60 <UART_SetConfig+0x5c4>)
 8005950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005954:	b29b      	uxth	r3, r3
 8005956:	2200      	movs	r2, #0
 8005958:	603b      	str	r3, [r7, #0]
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005960:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005964:	f7fa fcb4 	bl	80002d0 <__aeabi_uldivmod>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4610      	mov	r0, r2
 800596e:	4619      	mov	r1, r3
 8005970:	f04f 0200 	mov.w	r2, #0
 8005974:	f04f 0300 	mov.w	r3, #0
 8005978:	020b      	lsls	r3, r1, #8
 800597a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800597e:	0202      	lsls	r2, r0, #8
 8005980:	6979      	ldr	r1, [r7, #20]
 8005982:	6849      	ldr	r1, [r1, #4]
 8005984:	0849      	lsrs	r1, r1, #1
 8005986:	2000      	movs	r0, #0
 8005988:	460c      	mov	r4, r1
 800598a:	4605      	mov	r5, r0
 800598c:	eb12 0804 	adds.w	r8, r2, r4
 8005990:	eb43 0905 	adc.w	r9, r3, r5
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	469a      	mov	sl, r3
 800599c:	4693      	mov	fp, r2
 800599e:	4652      	mov	r2, sl
 80059a0:	465b      	mov	r3, fp
 80059a2:	4640      	mov	r0, r8
 80059a4:	4649      	mov	r1, r9
 80059a6:	f7fa fc93 	bl	80002d0 <__aeabi_uldivmod>
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	4613      	mov	r3, r2
 80059b0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059b8:	d308      	bcc.n	80059cc <UART_SetConfig+0x430>
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059c0:	d204      	bcs.n	80059cc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6a3a      	ldr	r2, [r7, #32]
 80059c8:	60da      	str	r2, [r3, #12]
 80059ca:	e0ce      	b.n	8005b6a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80059d2:	e0ca      	b.n	8005b6a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059dc:	d166      	bne.n	8005aac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80059de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80059e2:	2b08      	cmp	r3, #8
 80059e4:	d827      	bhi.n	8005a36 <UART_SetConfig+0x49a>
 80059e6:	a201      	add	r2, pc, #4	@ (adr r2, 80059ec <UART_SetConfig+0x450>)
 80059e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ec:	08005a11 	.word	0x08005a11
 80059f0:	08005a19 	.word	0x08005a19
 80059f4:	08005a21 	.word	0x08005a21
 80059f8:	08005a37 	.word	0x08005a37
 80059fc:	08005a27 	.word	0x08005a27
 8005a00:	08005a37 	.word	0x08005a37
 8005a04:	08005a37 	.word	0x08005a37
 8005a08:	08005a37 	.word	0x08005a37
 8005a0c:	08005a2f 	.word	0x08005a2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a10:	f7fe fb60 	bl	80040d4 <HAL_RCC_GetPCLK1Freq>
 8005a14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a16:	e014      	b.n	8005a42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a18:	f7fe fb72 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 8005a1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a1e:	e010      	b.n	8005a42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a20:	4b4e      	ldr	r3, [pc, #312]	@ (8005b5c <UART_SetConfig+0x5c0>)
 8005a22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a24:	e00d      	b.n	8005a42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a26:	f7fe fae7 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8005a2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a2c:	e009      	b.n	8005a42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a34:	e005      	b.n	8005a42 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 8090 	beq.w	8005b6a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4e:	4a44      	ldr	r2, [pc, #272]	@ (8005b60 <UART_SetConfig+0x5c4>)
 8005a50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a54:	461a      	mov	r2, r3
 8005a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a58:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a5c:	005a      	lsls	r2, r3, #1
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	085b      	lsrs	r3, r3, #1
 8005a64:	441a      	add	r2, r3
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	2b0f      	cmp	r3, #15
 8005a74:	d916      	bls.n	8005aa4 <UART_SetConfig+0x508>
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a7c:	d212      	bcs.n	8005aa4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	f023 030f 	bic.w	r3, r3, #15
 8005a86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	085b      	lsrs	r3, r3, #1
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	f003 0307 	and.w	r3, r3, #7
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	8bfb      	ldrh	r3, [r7, #30]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	8bfa      	ldrh	r2, [r7, #30]
 8005aa0:	60da      	str	r2, [r3, #12]
 8005aa2:	e062      	b.n	8005b6a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005aaa:	e05e      	b.n	8005b6a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005aac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d828      	bhi.n	8005b06 <UART_SetConfig+0x56a>
 8005ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8005abc <UART_SetConfig+0x520>)
 8005ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aba:	bf00      	nop
 8005abc:	08005ae1 	.word	0x08005ae1
 8005ac0:	08005ae9 	.word	0x08005ae9
 8005ac4:	08005af1 	.word	0x08005af1
 8005ac8:	08005b07 	.word	0x08005b07
 8005acc:	08005af7 	.word	0x08005af7
 8005ad0:	08005b07 	.word	0x08005b07
 8005ad4:	08005b07 	.word	0x08005b07
 8005ad8:	08005b07 	.word	0x08005b07
 8005adc:	08005aff 	.word	0x08005aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ae0:	f7fe faf8 	bl	80040d4 <HAL_RCC_GetPCLK1Freq>
 8005ae4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ae6:	e014      	b.n	8005b12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ae8:	f7fe fb0a 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 8005aec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005aee:	e010      	b.n	8005b12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005af0:	4b1a      	ldr	r3, [pc, #104]	@ (8005b5c <UART_SetConfig+0x5c0>)
 8005af2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005af4:	e00d      	b.n	8005b12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005af6:	f7fe fa7f 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8005afa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005afc:	e009      	b.n	8005b12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b04:	e005      	b.n	8005b12 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005b10:	bf00      	nop
    }

    if (pclk != 0U)
 8005b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d028      	beq.n	8005b6a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1c:	4a10      	ldr	r2, [pc, #64]	@ (8005b60 <UART_SetConfig+0x5c4>)
 8005b1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b22:	461a      	mov	r2, r3
 8005b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b26:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	441a      	add	r2, r3
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	2b0f      	cmp	r3, #15
 8005b40:	d910      	bls.n	8005b64 <UART_SetConfig+0x5c8>
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b48:	d20c      	bcs.n	8005b64 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	60da      	str	r2, [r3, #12]
 8005b54:	e009      	b.n	8005b6a <UART_SetConfig+0x5ce>
 8005b56:	bf00      	nop
 8005b58:	40008000 	.word	0x40008000
 8005b5c:	00f42400 	.word	0x00f42400
 8005b60:	08007360 	.word	0x08007360
      }
      else
      {
        ret = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2200      	movs	r2, #0
 8005b84:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005b86:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3730      	adds	r7, #48	@ 0x30
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005b94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00a      	beq.n	8005c02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c06:	f003 0304 	and.w	r3, r3, #4
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00a      	beq.n	8005c46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01a      	beq.n	8005caa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c92:	d10a      	bne.n	8005caa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	605a      	str	r2, [r3, #4]
  }
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b098      	sub	sp, #96	@ 0x60
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ce8:	f7fb fd96 	bl	8001818 <HAL_GetTick>
 8005cec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d12f      	bne.n	8005d5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d04:	2200      	movs	r2, #0
 8005d06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f88e 	bl	8005e2c <UART_WaitOnFlagUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d022      	beq.n	8005d5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	461a      	mov	r2, r3
 8005d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e6      	bne.n	8005d16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e063      	b.n	8005e24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0304 	and.w	r3, r3, #4
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d149      	bne.n	8005dfe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d72:	2200      	movs	r2, #0
 8005d74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f857 	bl	8005e2c <UART_WaitOnFlagUntilTimeout>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d03c      	beq.n	8005dfe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	623b      	str	r3, [r7, #32]
   return(result);
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005da2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005da4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1e6      	bne.n	8005d84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3308      	adds	r3, #8
 8005dbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f023 0301 	bic.w	r3, r3, #1
 8005dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3308      	adds	r3, #8
 8005dd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dd6:	61fa      	str	r2, [r7, #28]
 8005dd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	69b9      	ldr	r1, [r7, #24]
 8005ddc:	69fa      	ldr	r2, [r7, #28]
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	617b      	str	r3, [r7, #20]
   return(result);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e5      	bne.n	8005db6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e012      	b.n	8005e24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3758      	adds	r7, #88	@ 0x58
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	603b      	str	r3, [r7, #0]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e3c:	e04f      	b.n	8005ede <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e44:	d04b      	beq.n	8005ede <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e46:	f7fb fce7 	bl	8001818 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d302      	bcc.n	8005e5c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e04e      	b.n	8005efe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0304 	and.w	r3, r3, #4
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d037      	beq.n	8005ede <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2b80      	cmp	r3, #128	@ 0x80
 8005e72:	d034      	beq.n	8005ede <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2b40      	cmp	r3, #64	@ 0x40
 8005e78:	d031      	beq.n	8005ede <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d110      	bne.n	8005eaa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2208      	movs	r2, #8
 8005e8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 f838 	bl	8005f06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2208      	movs	r2, #8
 8005e9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e029      	b.n	8005efe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eb8:	d111      	bne.n	8005ede <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 f81e 	bl	8005f06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e00f      	b.n	8005efe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69da      	ldr	r2, [r3, #28]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	bf0c      	ite	eq
 8005eee:	2301      	moveq	r3, #1
 8005ef0:	2300      	movne	r3, #0
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	79fb      	ldrb	r3, [r7, #7]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d0a0      	beq.n	8005e3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b095      	sub	sp, #84	@ 0x54
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f16:	e853 3f00 	ldrex	r3, [r3]
 8005f1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f2e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f34:	e841 2300 	strex	r3, r2, [r1]
 8005f38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1e6      	bne.n	8005f0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	3308      	adds	r3, #8
 8005f46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	e853 3f00 	ldrex	r3, [r3]
 8005f4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f56:	f023 0301 	bic.w	r3, r3, #1
 8005f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3308      	adds	r3, #8
 8005f62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f6c:	e841 2300 	strex	r3, r2, [r1]
 8005f70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e3      	bne.n	8005f40 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d118      	bne.n	8005fb2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f023 0310 	bic.w	r3, r3, #16
 8005f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f9e:	61bb      	str	r3, [r7, #24]
 8005fa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	6979      	ldr	r1, [r7, #20]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	613b      	str	r3, [r7, #16]
   return(result);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e6      	bne.n	8005f80 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005fc6:	bf00      	nop
 8005fc8:	3754      	adds	r7, #84	@ 0x54
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_UARTEx_DisableFifoMode+0x16>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e027      	b.n	8006038 <HAL_UARTEx_DisableFifoMode+0x66>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2224      	movs	r2, #36	@ 0x24
 8005ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0201 	bic.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006016:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006058:	2302      	movs	r3, #2
 800605a:	e02d      	b.n	80060b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2224      	movs	r2, #36	@ 0x24
 8006068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0201 	bic.w	r2, r2, #1
 8006082:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f84f 	bl	800613c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d101      	bne.n	80060d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e02d      	b.n	8006134 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2224      	movs	r2, #36	@ 0x24
 80060e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0201 	bic.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f811 	bl	800613c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2220      	movs	r2, #32
 8006126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006148:	2b00      	cmp	r3, #0
 800614a:	d108      	bne.n	800615e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800615c:	e031      	b.n	80061c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800615e:	2308      	movs	r3, #8
 8006160:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006162:	2308      	movs	r3, #8
 8006164:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	0e5b      	lsrs	r3, r3, #25
 800616e:	b2db      	uxtb	r3, r3
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	0f5b      	lsrs	r3, r3, #29
 800617e:	b2db      	uxtb	r3, r3
 8006180:	f003 0307 	and.w	r3, r3, #7
 8006184:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006186:	7bbb      	ldrb	r3, [r7, #14]
 8006188:	7b3a      	ldrb	r2, [r7, #12]
 800618a:	4911      	ldr	r1, [pc, #68]	@ (80061d0 <UARTEx_SetNbDataToProcess+0x94>)
 800618c:	5c8a      	ldrb	r2, [r1, r2]
 800618e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006192:	7b3a      	ldrb	r2, [r7, #12]
 8006194:	490f      	ldr	r1, [pc, #60]	@ (80061d4 <UARTEx_SetNbDataToProcess+0x98>)
 8006196:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006198:	fb93 f3f2 	sdiv	r3, r3, r2
 800619c:	b29a      	uxth	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
 80061a6:	7b7a      	ldrb	r2, [r7, #13]
 80061a8:	4909      	ldr	r1, [pc, #36]	@ (80061d0 <UARTEx_SetNbDataToProcess+0x94>)
 80061aa:	5c8a      	ldrb	r2, [r1, r2]
 80061ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061b0:	7b7a      	ldrb	r2, [r7, #13]
 80061b2:	4908      	ldr	r1, [pc, #32]	@ (80061d4 <UARTEx_SetNbDataToProcess+0x98>)
 80061b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80061c2:	bf00      	nop
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	08007378 	.word	0x08007378
 80061d4:	08007380 	.word	0x08007380

080061d8 <siprintf>:
 80061d8:	b40e      	push	{r1, r2, r3}
 80061da:	b500      	push	{lr}
 80061dc:	b09c      	sub	sp, #112	@ 0x70
 80061de:	ab1d      	add	r3, sp, #116	@ 0x74
 80061e0:	9002      	str	r0, [sp, #8]
 80061e2:	9006      	str	r0, [sp, #24]
 80061e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80061e8:	4809      	ldr	r0, [pc, #36]	@ (8006210 <siprintf+0x38>)
 80061ea:	9107      	str	r1, [sp, #28]
 80061ec:	9104      	str	r1, [sp, #16]
 80061ee:	4909      	ldr	r1, [pc, #36]	@ (8006214 <siprintf+0x3c>)
 80061f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80061f4:	9105      	str	r1, [sp, #20]
 80061f6:	6800      	ldr	r0, [r0, #0]
 80061f8:	9301      	str	r3, [sp, #4]
 80061fa:	a902      	add	r1, sp, #8
 80061fc:	f000 f994 	bl	8006528 <_svfiprintf_r>
 8006200:	9b02      	ldr	r3, [sp, #8]
 8006202:	2200      	movs	r2, #0
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	b01c      	add	sp, #112	@ 0x70
 8006208:	f85d eb04 	ldr.w	lr, [sp], #4
 800620c:	b003      	add	sp, #12
 800620e:	4770      	bx	lr
 8006210:	20000014 	.word	0x20000014
 8006214:	ffff0208 	.word	0xffff0208

08006218 <memset>:
 8006218:	4402      	add	r2, r0
 800621a:	4603      	mov	r3, r0
 800621c:	4293      	cmp	r3, r2
 800621e:	d100      	bne.n	8006222 <memset+0xa>
 8006220:	4770      	bx	lr
 8006222:	f803 1b01 	strb.w	r1, [r3], #1
 8006226:	e7f9      	b.n	800621c <memset+0x4>

08006228 <__errno>:
 8006228:	4b01      	ldr	r3, [pc, #4]	@ (8006230 <__errno+0x8>)
 800622a:	6818      	ldr	r0, [r3, #0]
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	20000014 	.word	0x20000014

08006234 <__libc_init_array>:
 8006234:	b570      	push	{r4, r5, r6, lr}
 8006236:	4d0d      	ldr	r5, [pc, #52]	@ (800626c <__libc_init_array+0x38>)
 8006238:	4c0d      	ldr	r4, [pc, #52]	@ (8006270 <__libc_init_array+0x3c>)
 800623a:	1b64      	subs	r4, r4, r5
 800623c:	10a4      	asrs	r4, r4, #2
 800623e:	2600      	movs	r6, #0
 8006240:	42a6      	cmp	r6, r4
 8006242:	d109      	bne.n	8006258 <__libc_init_array+0x24>
 8006244:	4d0b      	ldr	r5, [pc, #44]	@ (8006274 <__libc_init_array+0x40>)
 8006246:	4c0c      	ldr	r4, [pc, #48]	@ (8006278 <__libc_init_array+0x44>)
 8006248:	f000 fc66 	bl	8006b18 <_init>
 800624c:	1b64      	subs	r4, r4, r5
 800624e:	10a4      	asrs	r4, r4, #2
 8006250:	2600      	movs	r6, #0
 8006252:	42a6      	cmp	r6, r4
 8006254:	d105      	bne.n	8006262 <__libc_init_array+0x2e>
 8006256:	bd70      	pop	{r4, r5, r6, pc}
 8006258:	f855 3b04 	ldr.w	r3, [r5], #4
 800625c:	4798      	blx	r3
 800625e:	3601      	adds	r6, #1
 8006260:	e7ee      	b.n	8006240 <__libc_init_array+0xc>
 8006262:	f855 3b04 	ldr.w	r3, [r5], #4
 8006266:	4798      	blx	r3
 8006268:	3601      	adds	r6, #1
 800626a:	e7f2      	b.n	8006252 <__libc_init_array+0x1e>
 800626c:	080073c4 	.word	0x080073c4
 8006270:	080073c4 	.word	0x080073c4
 8006274:	080073c4 	.word	0x080073c4
 8006278:	080073c8 	.word	0x080073c8

0800627c <__retarget_lock_acquire_recursive>:
 800627c:	4770      	bx	lr

0800627e <__retarget_lock_release_recursive>:
 800627e:	4770      	bx	lr

08006280 <_free_r>:
 8006280:	b538      	push	{r3, r4, r5, lr}
 8006282:	4605      	mov	r5, r0
 8006284:	2900      	cmp	r1, #0
 8006286:	d041      	beq.n	800630c <_free_r+0x8c>
 8006288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800628c:	1f0c      	subs	r4, r1, #4
 800628e:	2b00      	cmp	r3, #0
 8006290:	bfb8      	it	lt
 8006292:	18e4      	addlt	r4, r4, r3
 8006294:	f000 f8e0 	bl	8006458 <__malloc_lock>
 8006298:	4a1d      	ldr	r2, [pc, #116]	@ (8006310 <_free_r+0x90>)
 800629a:	6813      	ldr	r3, [r2, #0]
 800629c:	b933      	cbnz	r3, 80062ac <_free_r+0x2c>
 800629e:	6063      	str	r3, [r4, #4]
 80062a0:	6014      	str	r4, [r2, #0]
 80062a2:	4628      	mov	r0, r5
 80062a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062a8:	f000 b8dc 	b.w	8006464 <__malloc_unlock>
 80062ac:	42a3      	cmp	r3, r4
 80062ae:	d908      	bls.n	80062c2 <_free_r+0x42>
 80062b0:	6820      	ldr	r0, [r4, #0]
 80062b2:	1821      	adds	r1, r4, r0
 80062b4:	428b      	cmp	r3, r1
 80062b6:	bf01      	itttt	eq
 80062b8:	6819      	ldreq	r1, [r3, #0]
 80062ba:	685b      	ldreq	r3, [r3, #4]
 80062bc:	1809      	addeq	r1, r1, r0
 80062be:	6021      	streq	r1, [r4, #0]
 80062c0:	e7ed      	b.n	800629e <_free_r+0x1e>
 80062c2:	461a      	mov	r2, r3
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	b10b      	cbz	r3, 80062cc <_free_r+0x4c>
 80062c8:	42a3      	cmp	r3, r4
 80062ca:	d9fa      	bls.n	80062c2 <_free_r+0x42>
 80062cc:	6811      	ldr	r1, [r2, #0]
 80062ce:	1850      	adds	r0, r2, r1
 80062d0:	42a0      	cmp	r0, r4
 80062d2:	d10b      	bne.n	80062ec <_free_r+0x6c>
 80062d4:	6820      	ldr	r0, [r4, #0]
 80062d6:	4401      	add	r1, r0
 80062d8:	1850      	adds	r0, r2, r1
 80062da:	4283      	cmp	r3, r0
 80062dc:	6011      	str	r1, [r2, #0]
 80062de:	d1e0      	bne.n	80062a2 <_free_r+0x22>
 80062e0:	6818      	ldr	r0, [r3, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	6053      	str	r3, [r2, #4]
 80062e6:	4408      	add	r0, r1
 80062e8:	6010      	str	r0, [r2, #0]
 80062ea:	e7da      	b.n	80062a2 <_free_r+0x22>
 80062ec:	d902      	bls.n	80062f4 <_free_r+0x74>
 80062ee:	230c      	movs	r3, #12
 80062f0:	602b      	str	r3, [r5, #0]
 80062f2:	e7d6      	b.n	80062a2 <_free_r+0x22>
 80062f4:	6820      	ldr	r0, [r4, #0]
 80062f6:	1821      	adds	r1, r4, r0
 80062f8:	428b      	cmp	r3, r1
 80062fa:	bf04      	itt	eq
 80062fc:	6819      	ldreq	r1, [r3, #0]
 80062fe:	685b      	ldreq	r3, [r3, #4]
 8006300:	6063      	str	r3, [r4, #4]
 8006302:	bf04      	itt	eq
 8006304:	1809      	addeq	r1, r1, r0
 8006306:	6021      	streq	r1, [r4, #0]
 8006308:	6054      	str	r4, [r2, #4]
 800630a:	e7ca      	b.n	80062a2 <_free_r+0x22>
 800630c:	bd38      	pop	{r3, r4, r5, pc}
 800630e:	bf00      	nop
 8006310:	200003a4 	.word	0x200003a4

08006314 <sbrk_aligned>:
 8006314:	b570      	push	{r4, r5, r6, lr}
 8006316:	4e0f      	ldr	r6, [pc, #60]	@ (8006354 <sbrk_aligned+0x40>)
 8006318:	460c      	mov	r4, r1
 800631a:	6831      	ldr	r1, [r6, #0]
 800631c:	4605      	mov	r5, r0
 800631e:	b911      	cbnz	r1, 8006326 <sbrk_aligned+0x12>
 8006320:	f000 fba6 	bl	8006a70 <_sbrk_r>
 8006324:	6030      	str	r0, [r6, #0]
 8006326:	4621      	mov	r1, r4
 8006328:	4628      	mov	r0, r5
 800632a:	f000 fba1 	bl	8006a70 <_sbrk_r>
 800632e:	1c43      	adds	r3, r0, #1
 8006330:	d103      	bne.n	800633a <sbrk_aligned+0x26>
 8006332:	f04f 34ff 	mov.w	r4, #4294967295
 8006336:	4620      	mov	r0, r4
 8006338:	bd70      	pop	{r4, r5, r6, pc}
 800633a:	1cc4      	adds	r4, r0, #3
 800633c:	f024 0403 	bic.w	r4, r4, #3
 8006340:	42a0      	cmp	r0, r4
 8006342:	d0f8      	beq.n	8006336 <sbrk_aligned+0x22>
 8006344:	1a21      	subs	r1, r4, r0
 8006346:	4628      	mov	r0, r5
 8006348:	f000 fb92 	bl	8006a70 <_sbrk_r>
 800634c:	3001      	adds	r0, #1
 800634e:	d1f2      	bne.n	8006336 <sbrk_aligned+0x22>
 8006350:	e7ef      	b.n	8006332 <sbrk_aligned+0x1e>
 8006352:	bf00      	nop
 8006354:	200003a0 	.word	0x200003a0

08006358 <_malloc_r>:
 8006358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800635c:	1ccd      	adds	r5, r1, #3
 800635e:	f025 0503 	bic.w	r5, r5, #3
 8006362:	3508      	adds	r5, #8
 8006364:	2d0c      	cmp	r5, #12
 8006366:	bf38      	it	cc
 8006368:	250c      	movcc	r5, #12
 800636a:	2d00      	cmp	r5, #0
 800636c:	4606      	mov	r6, r0
 800636e:	db01      	blt.n	8006374 <_malloc_r+0x1c>
 8006370:	42a9      	cmp	r1, r5
 8006372:	d904      	bls.n	800637e <_malloc_r+0x26>
 8006374:	230c      	movs	r3, #12
 8006376:	6033      	str	r3, [r6, #0]
 8006378:	2000      	movs	r0, #0
 800637a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800637e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006454 <_malloc_r+0xfc>
 8006382:	f000 f869 	bl	8006458 <__malloc_lock>
 8006386:	f8d8 3000 	ldr.w	r3, [r8]
 800638a:	461c      	mov	r4, r3
 800638c:	bb44      	cbnz	r4, 80063e0 <_malloc_r+0x88>
 800638e:	4629      	mov	r1, r5
 8006390:	4630      	mov	r0, r6
 8006392:	f7ff ffbf 	bl	8006314 <sbrk_aligned>
 8006396:	1c43      	adds	r3, r0, #1
 8006398:	4604      	mov	r4, r0
 800639a:	d158      	bne.n	800644e <_malloc_r+0xf6>
 800639c:	f8d8 4000 	ldr.w	r4, [r8]
 80063a0:	4627      	mov	r7, r4
 80063a2:	2f00      	cmp	r7, #0
 80063a4:	d143      	bne.n	800642e <_malloc_r+0xd6>
 80063a6:	2c00      	cmp	r4, #0
 80063a8:	d04b      	beq.n	8006442 <_malloc_r+0xea>
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	4639      	mov	r1, r7
 80063ae:	4630      	mov	r0, r6
 80063b0:	eb04 0903 	add.w	r9, r4, r3
 80063b4:	f000 fb5c 	bl	8006a70 <_sbrk_r>
 80063b8:	4581      	cmp	r9, r0
 80063ba:	d142      	bne.n	8006442 <_malloc_r+0xea>
 80063bc:	6821      	ldr	r1, [r4, #0]
 80063be:	1a6d      	subs	r5, r5, r1
 80063c0:	4629      	mov	r1, r5
 80063c2:	4630      	mov	r0, r6
 80063c4:	f7ff ffa6 	bl	8006314 <sbrk_aligned>
 80063c8:	3001      	adds	r0, #1
 80063ca:	d03a      	beq.n	8006442 <_malloc_r+0xea>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	442b      	add	r3, r5
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	f8d8 3000 	ldr.w	r3, [r8]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	bb62      	cbnz	r2, 8006434 <_malloc_r+0xdc>
 80063da:	f8c8 7000 	str.w	r7, [r8]
 80063de:	e00f      	b.n	8006400 <_malloc_r+0xa8>
 80063e0:	6822      	ldr	r2, [r4, #0]
 80063e2:	1b52      	subs	r2, r2, r5
 80063e4:	d420      	bmi.n	8006428 <_malloc_r+0xd0>
 80063e6:	2a0b      	cmp	r2, #11
 80063e8:	d917      	bls.n	800641a <_malloc_r+0xc2>
 80063ea:	1961      	adds	r1, r4, r5
 80063ec:	42a3      	cmp	r3, r4
 80063ee:	6025      	str	r5, [r4, #0]
 80063f0:	bf18      	it	ne
 80063f2:	6059      	strne	r1, [r3, #4]
 80063f4:	6863      	ldr	r3, [r4, #4]
 80063f6:	bf08      	it	eq
 80063f8:	f8c8 1000 	streq.w	r1, [r8]
 80063fc:	5162      	str	r2, [r4, r5]
 80063fe:	604b      	str	r3, [r1, #4]
 8006400:	4630      	mov	r0, r6
 8006402:	f000 f82f 	bl	8006464 <__malloc_unlock>
 8006406:	f104 000b 	add.w	r0, r4, #11
 800640a:	1d23      	adds	r3, r4, #4
 800640c:	f020 0007 	bic.w	r0, r0, #7
 8006410:	1ac2      	subs	r2, r0, r3
 8006412:	bf1c      	itt	ne
 8006414:	1a1b      	subne	r3, r3, r0
 8006416:	50a3      	strne	r3, [r4, r2]
 8006418:	e7af      	b.n	800637a <_malloc_r+0x22>
 800641a:	6862      	ldr	r2, [r4, #4]
 800641c:	42a3      	cmp	r3, r4
 800641e:	bf0c      	ite	eq
 8006420:	f8c8 2000 	streq.w	r2, [r8]
 8006424:	605a      	strne	r2, [r3, #4]
 8006426:	e7eb      	b.n	8006400 <_malloc_r+0xa8>
 8006428:	4623      	mov	r3, r4
 800642a:	6864      	ldr	r4, [r4, #4]
 800642c:	e7ae      	b.n	800638c <_malloc_r+0x34>
 800642e:	463c      	mov	r4, r7
 8006430:	687f      	ldr	r7, [r7, #4]
 8006432:	e7b6      	b.n	80063a2 <_malloc_r+0x4a>
 8006434:	461a      	mov	r2, r3
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	42a3      	cmp	r3, r4
 800643a:	d1fb      	bne.n	8006434 <_malloc_r+0xdc>
 800643c:	2300      	movs	r3, #0
 800643e:	6053      	str	r3, [r2, #4]
 8006440:	e7de      	b.n	8006400 <_malloc_r+0xa8>
 8006442:	230c      	movs	r3, #12
 8006444:	6033      	str	r3, [r6, #0]
 8006446:	4630      	mov	r0, r6
 8006448:	f000 f80c 	bl	8006464 <__malloc_unlock>
 800644c:	e794      	b.n	8006378 <_malloc_r+0x20>
 800644e:	6005      	str	r5, [r0, #0]
 8006450:	e7d6      	b.n	8006400 <_malloc_r+0xa8>
 8006452:	bf00      	nop
 8006454:	200003a4 	.word	0x200003a4

08006458 <__malloc_lock>:
 8006458:	4801      	ldr	r0, [pc, #4]	@ (8006460 <__malloc_lock+0x8>)
 800645a:	f7ff bf0f 	b.w	800627c <__retarget_lock_acquire_recursive>
 800645e:	bf00      	nop
 8006460:	2000039c 	.word	0x2000039c

08006464 <__malloc_unlock>:
 8006464:	4801      	ldr	r0, [pc, #4]	@ (800646c <__malloc_unlock+0x8>)
 8006466:	f7ff bf0a 	b.w	800627e <__retarget_lock_release_recursive>
 800646a:	bf00      	nop
 800646c:	2000039c 	.word	0x2000039c

08006470 <__ssputs_r>:
 8006470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006474:	688e      	ldr	r6, [r1, #8]
 8006476:	461f      	mov	r7, r3
 8006478:	42be      	cmp	r6, r7
 800647a:	680b      	ldr	r3, [r1, #0]
 800647c:	4682      	mov	sl, r0
 800647e:	460c      	mov	r4, r1
 8006480:	4690      	mov	r8, r2
 8006482:	d82d      	bhi.n	80064e0 <__ssputs_r+0x70>
 8006484:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006488:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800648c:	d026      	beq.n	80064dc <__ssputs_r+0x6c>
 800648e:	6965      	ldr	r5, [r4, #20]
 8006490:	6909      	ldr	r1, [r1, #16]
 8006492:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006496:	eba3 0901 	sub.w	r9, r3, r1
 800649a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800649e:	1c7b      	adds	r3, r7, #1
 80064a0:	444b      	add	r3, r9
 80064a2:	106d      	asrs	r5, r5, #1
 80064a4:	429d      	cmp	r5, r3
 80064a6:	bf38      	it	cc
 80064a8:	461d      	movcc	r5, r3
 80064aa:	0553      	lsls	r3, r2, #21
 80064ac:	d527      	bpl.n	80064fe <__ssputs_r+0x8e>
 80064ae:	4629      	mov	r1, r5
 80064b0:	f7ff ff52 	bl	8006358 <_malloc_r>
 80064b4:	4606      	mov	r6, r0
 80064b6:	b360      	cbz	r0, 8006512 <__ssputs_r+0xa2>
 80064b8:	6921      	ldr	r1, [r4, #16]
 80064ba:	464a      	mov	r2, r9
 80064bc:	f000 fae8 	bl	8006a90 <memcpy>
 80064c0:	89a3      	ldrh	r3, [r4, #12]
 80064c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80064c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ca:	81a3      	strh	r3, [r4, #12]
 80064cc:	6126      	str	r6, [r4, #16]
 80064ce:	6165      	str	r5, [r4, #20]
 80064d0:	444e      	add	r6, r9
 80064d2:	eba5 0509 	sub.w	r5, r5, r9
 80064d6:	6026      	str	r6, [r4, #0]
 80064d8:	60a5      	str	r5, [r4, #8]
 80064da:	463e      	mov	r6, r7
 80064dc:	42be      	cmp	r6, r7
 80064de:	d900      	bls.n	80064e2 <__ssputs_r+0x72>
 80064e0:	463e      	mov	r6, r7
 80064e2:	6820      	ldr	r0, [r4, #0]
 80064e4:	4632      	mov	r2, r6
 80064e6:	4641      	mov	r1, r8
 80064e8:	f000 faa8 	bl	8006a3c <memmove>
 80064ec:	68a3      	ldr	r3, [r4, #8]
 80064ee:	1b9b      	subs	r3, r3, r6
 80064f0:	60a3      	str	r3, [r4, #8]
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	4433      	add	r3, r6
 80064f6:	6023      	str	r3, [r4, #0]
 80064f8:	2000      	movs	r0, #0
 80064fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064fe:	462a      	mov	r2, r5
 8006500:	f000 fad4 	bl	8006aac <_realloc_r>
 8006504:	4606      	mov	r6, r0
 8006506:	2800      	cmp	r0, #0
 8006508:	d1e0      	bne.n	80064cc <__ssputs_r+0x5c>
 800650a:	6921      	ldr	r1, [r4, #16]
 800650c:	4650      	mov	r0, sl
 800650e:	f7ff feb7 	bl	8006280 <_free_r>
 8006512:	230c      	movs	r3, #12
 8006514:	f8ca 3000 	str.w	r3, [sl]
 8006518:	89a3      	ldrh	r3, [r4, #12]
 800651a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800651e:	81a3      	strh	r3, [r4, #12]
 8006520:	f04f 30ff 	mov.w	r0, #4294967295
 8006524:	e7e9      	b.n	80064fa <__ssputs_r+0x8a>
	...

08006528 <_svfiprintf_r>:
 8006528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652c:	4698      	mov	r8, r3
 800652e:	898b      	ldrh	r3, [r1, #12]
 8006530:	061b      	lsls	r3, r3, #24
 8006532:	b09d      	sub	sp, #116	@ 0x74
 8006534:	4607      	mov	r7, r0
 8006536:	460d      	mov	r5, r1
 8006538:	4614      	mov	r4, r2
 800653a:	d510      	bpl.n	800655e <_svfiprintf_r+0x36>
 800653c:	690b      	ldr	r3, [r1, #16]
 800653e:	b973      	cbnz	r3, 800655e <_svfiprintf_r+0x36>
 8006540:	2140      	movs	r1, #64	@ 0x40
 8006542:	f7ff ff09 	bl	8006358 <_malloc_r>
 8006546:	6028      	str	r0, [r5, #0]
 8006548:	6128      	str	r0, [r5, #16]
 800654a:	b930      	cbnz	r0, 800655a <_svfiprintf_r+0x32>
 800654c:	230c      	movs	r3, #12
 800654e:	603b      	str	r3, [r7, #0]
 8006550:	f04f 30ff 	mov.w	r0, #4294967295
 8006554:	b01d      	add	sp, #116	@ 0x74
 8006556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655a:	2340      	movs	r3, #64	@ 0x40
 800655c:	616b      	str	r3, [r5, #20]
 800655e:	2300      	movs	r3, #0
 8006560:	9309      	str	r3, [sp, #36]	@ 0x24
 8006562:	2320      	movs	r3, #32
 8006564:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006568:	f8cd 800c 	str.w	r8, [sp, #12]
 800656c:	2330      	movs	r3, #48	@ 0x30
 800656e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800670c <_svfiprintf_r+0x1e4>
 8006572:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006576:	f04f 0901 	mov.w	r9, #1
 800657a:	4623      	mov	r3, r4
 800657c:	469a      	mov	sl, r3
 800657e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006582:	b10a      	cbz	r2, 8006588 <_svfiprintf_r+0x60>
 8006584:	2a25      	cmp	r2, #37	@ 0x25
 8006586:	d1f9      	bne.n	800657c <_svfiprintf_r+0x54>
 8006588:	ebba 0b04 	subs.w	fp, sl, r4
 800658c:	d00b      	beq.n	80065a6 <_svfiprintf_r+0x7e>
 800658e:	465b      	mov	r3, fp
 8006590:	4622      	mov	r2, r4
 8006592:	4629      	mov	r1, r5
 8006594:	4638      	mov	r0, r7
 8006596:	f7ff ff6b 	bl	8006470 <__ssputs_r>
 800659a:	3001      	adds	r0, #1
 800659c:	f000 80a7 	beq.w	80066ee <_svfiprintf_r+0x1c6>
 80065a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065a2:	445a      	add	r2, fp
 80065a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80065a6:	f89a 3000 	ldrb.w	r3, [sl]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 809f 	beq.w	80066ee <_svfiprintf_r+0x1c6>
 80065b0:	2300      	movs	r3, #0
 80065b2:	f04f 32ff 	mov.w	r2, #4294967295
 80065b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065ba:	f10a 0a01 	add.w	sl, sl, #1
 80065be:	9304      	str	r3, [sp, #16]
 80065c0:	9307      	str	r3, [sp, #28]
 80065c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80065c8:	4654      	mov	r4, sl
 80065ca:	2205      	movs	r2, #5
 80065cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065d0:	484e      	ldr	r0, [pc, #312]	@ (800670c <_svfiprintf_r+0x1e4>)
 80065d2:	f7f9 fe2d 	bl	8000230 <memchr>
 80065d6:	9a04      	ldr	r2, [sp, #16]
 80065d8:	b9d8      	cbnz	r0, 8006612 <_svfiprintf_r+0xea>
 80065da:	06d0      	lsls	r0, r2, #27
 80065dc:	bf44      	itt	mi
 80065de:	2320      	movmi	r3, #32
 80065e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065e4:	0711      	lsls	r1, r2, #28
 80065e6:	bf44      	itt	mi
 80065e8:	232b      	movmi	r3, #43	@ 0x2b
 80065ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065ee:	f89a 3000 	ldrb.w	r3, [sl]
 80065f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80065f4:	d015      	beq.n	8006622 <_svfiprintf_r+0xfa>
 80065f6:	9a07      	ldr	r2, [sp, #28]
 80065f8:	4654      	mov	r4, sl
 80065fa:	2000      	movs	r0, #0
 80065fc:	f04f 0c0a 	mov.w	ip, #10
 8006600:	4621      	mov	r1, r4
 8006602:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006606:	3b30      	subs	r3, #48	@ 0x30
 8006608:	2b09      	cmp	r3, #9
 800660a:	d94b      	bls.n	80066a4 <_svfiprintf_r+0x17c>
 800660c:	b1b0      	cbz	r0, 800663c <_svfiprintf_r+0x114>
 800660e:	9207      	str	r2, [sp, #28]
 8006610:	e014      	b.n	800663c <_svfiprintf_r+0x114>
 8006612:	eba0 0308 	sub.w	r3, r0, r8
 8006616:	fa09 f303 	lsl.w	r3, r9, r3
 800661a:	4313      	orrs	r3, r2
 800661c:	9304      	str	r3, [sp, #16]
 800661e:	46a2      	mov	sl, r4
 8006620:	e7d2      	b.n	80065c8 <_svfiprintf_r+0xa0>
 8006622:	9b03      	ldr	r3, [sp, #12]
 8006624:	1d19      	adds	r1, r3, #4
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	9103      	str	r1, [sp, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	bfbb      	ittet	lt
 800662e:	425b      	neglt	r3, r3
 8006630:	f042 0202 	orrlt.w	r2, r2, #2
 8006634:	9307      	strge	r3, [sp, #28]
 8006636:	9307      	strlt	r3, [sp, #28]
 8006638:	bfb8      	it	lt
 800663a:	9204      	strlt	r2, [sp, #16]
 800663c:	7823      	ldrb	r3, [r4, #0]
 800663e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006640:	d10a      	bne.n	8006658 <_svfiprintf_r+0x130>
 8006642:	7863      	ldrb	r3, [r4, #1]
 8006644:	2b2a      	cmp	r3, #42	@ 0x2a
 8006646:	d132      	bne.n	80066ae <_svfiprintf_r+0x186>
 8006648:	9b03      	ldr	r3, [sp, #12]
 800664a:	1d1a      	adds	r2, r3, #4
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	9203      	str	r2, [sp, #12]
 8006650:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006654:	3402      	adds	r4, #2
 8006656:	9305      	str	r3, [sp, #20]
 8006658:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800671c <_svfiprintf_r+0x1f4>
 800665c:	7821      	ldrb	r1, [r4, #0]
 800665e:	2203      	movs	r2, #3
 8006660:	4650      	mov	r0, sl
 8006662:	f7f9 fde5 	bl	8000230 <memchr>
 8006666:	b138      	cbz	r0, 8006678 <_svfiprintf_r+0x150>
 8006668:	9b04      	ldr	r3, [sp, #16]
 800666a:	eba0 000a 	sub.w	r0, r0, sl
 800666e:	2240      	movs	r2, #64	@ 0x40
 8006670:	4082      	lsls	r2, r0
 8006672:	4313      	orrs	r3, r2
 8006674:	3401      	adds	r4, #1
 8006676:	9304      	str	r3, [sp, #16]
 8006678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800667c:	4824      	ldr	r0, [pc, #144]	@ (8006710 <_svfiprintf_r+0x1e8>)
 800667e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006682:	2206      	movs	r2, #6
 8006684:	f7f9 fdd4 	bl	8000230 <memchr>
 8006688:	2800      	cmp	r0, #0
 800668a:	d036      	beq.n	80066fa <_svfiprintf_r+0x1d2>
 800668c:	4b21      	ldr	r3, [pc, #132]	@ (8006714 <_svfiprintf_r+0x1ec>)
 800668e:	bb1b      	cbnz	r3, 80066d8 <_svfiprintf_r+0x1b0>
 8006690:	9b03      	ldr	r3, [sp, #12]
 8006692:	3307      	adds	r3, #7
 8006694:	f023 0307 	bic.w	r3, r3, #7
 8006698:	3308      	adds	r3, #8
 800669a:	9303      	str	r3, [sp, #12]
 800669c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800669e:	4433      	add	r3, r6
 80066a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80066a2:	e76a      	b.n	800657a <_svfiprintf_r+0x52>
 80066a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80066a8:	460c      	mov	r4, r1
 80066aa:	2001      	movs	r0, #1
 80066ac:	e7a8      	b.n	8006600 <_svfiprintf_r+0xd8>
 80066ae:	2300      	movs	r3, #0
 80066b0:	3401      	adds	r4, #1
 80066b2:	9305      	str	r3, [sp, #20]
 80066b4:	4619      	mov	r1, r3
 80066b6:	f04f 0c0a 	mov.w	ip, #10
 80066ba:	4620      	mov	r0, r4
 80066bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066c0:	3a30      	subs	r2, #48	@ 0x30
 80066c2:	2a09      	cmp	r2, #9
 80066c4:	d903      	bls.n	80066ce <_svfiprintf_r+0x1a6>
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0c6      	beq.n	8006658 <_svfiprintf_r+0x130>
 80066ca:	9105      	str	r1, [sp, #20]
 80066cc:	e7c4      	b.n	8006658 <_svfiprintf_r+0x130>
 80066ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80066d2:	4604      	mov	r4, r0
 80066d4:	2301      	movs	r3, #1
 80066d6:	e7f0      	b.n	80066ba <_svfiprintf_r+0x192>
 80066d8:	ab03      	add	r3, sp, #12
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	462a      	mov	r2, r5
 80066de:	4b0e      	ldr	r3, [pc, #56]	@ (8006718 <_svfiprintf_r+0x1f0>)
 80066e0:	a904      	add	r1, sp, #16
 80066e2:	4638      	mov	r0, r7
 80066e4:	f3af 8000 	nop.w
 80066e8:	1c42      	adds	r2, r0, #1
 80066ea:	4606      	mov	r6, r0
 80066ec:	d1d6      	bne.n	800669c <_svfiprintf_r+0x174>
 80066ee:	89ab      	ldrh	r3, [r5, #12]
 80066f0:	065b      	lsls	r3, r3, #25
 80066f2:	f53f af2d 	bmi.w	8006550 <_svfiprintf_r+0x28>
 80066f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066f8:	e72c      	b.n	8006554 <_svfiprintf_r+0x2c>
 80066fa:	ab03      	add	r3, sp, #12
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	462a      	mov	r2, r5
 8006700:	4b05      	ldr	r3, [pc, #20]	@ (8006718 <_svfiprintf_r+0x1f0>)
 8006702:	a904      	add	r1, sp, #16
 8006704:	4638      	mov	r0, r7
 8006706:	f000 f879 	bl	80067fc <_printf_i>
 800670a:	e7ed      	b.n	80066e8 <_svfiprintf_r+0x1c0>
 800670c:	08007388 	.word	0x08007388
 8006710:	08007392 	.word	0x08007392
 8006714:	00000000 	.word	0x00000000
 8006718:	08006471 	.word	0x08006471
 800671c:	0800738e 	.word	0x0800738e

08006720 <_printf_common>:
 8006720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006724:	4616      	mov	r6, r2
 8006726:	4698      	mov	r8, r3
 8006728:	688a      	ldr	r2, [r1, #8]
 800672a:	690b      	ldr	r3, [r1, #16]
 800672c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006730:	4293      	cmp	r3, r2
 8006732:	bfb8      	it	lt
 8006734:	4613      	movlt	r3, r2
 8006736:	6033      	str	r3, [r6, #0]
 8006738:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800673c:	4607      	mov	r7, r0
 800673e:	460c      	mov	r4, r1
 8006740:	b10a      	cbz	r2, 8006746 <_printf_common+0x26>
 8006742:	3301      	adds	r3, #1
 8006744:	6033      	str	r3, [r6, #0]
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	0699      	lsls	r1, r3, #26
 800674a:	bf42      	ittt	mi
 800674c:	6833      	ldrmi	r3, [r6, #0]
 800674e:	3302      	addmi	r3, #2
 8006750:	6033      	strmi	r3, [r6, #0]
 8006752:	6825      	ldr	r5, [r4, #0]
 8006754:	f015 0506 	ands.w	r5, r5, #6
 8006758:	d106      	bne.n	8006768 <_printf_common+0x48>
 800675a:	f104 0a19 	add.w	sl, r4, #25
 800675e:	68e3      	ldr	r3, [r4, #12]
 8006760:	6832      	ldr	r2, [r6, #0]
 8006762:	1a9b      	subs	r3, r3, r2
 8006764:	42ab      	cmp	r3, r5
 8006766:	dc26      	bgt.n	80067b6 <_printf_common+0x96>
 8006768:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800676c:	6822      	ldr	r2, [r4, #0]
 800676e:	3b00      	subs	r3, #0
 8006770:	bf18      	it	ne
 8006772:	2301      	movne	r3, #1
 8006774:	0692      	lsls	r2, r2, #26
 8006776:	d42b      	bmi.n	80067d0 <_printf_common+0xb0>
 8006778:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800677c:	4641      	mov	r1, r8
 800677e:	4638      	mov	r0, r7
 8006780:	47c8      	blx	r9
 8006782:	3001      	adds	r0, #1
 8006784:	d01e      	beq.n	80067c4 <_printf_common+0xa4>
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	6922      	ldr	r2, [r4, #16]
 800678a:	f003 0306 	and.w	r3, r3, #6
 800678e:	2b04      	cmp	r3, #4
 8006790:	bf02      	ittt	eq
 8006792:	68e5      	ldreq	r5, [r4, #12]
 8006794:	6833      	ldreq	r3, [r6, #0]
 8006796:	1aed      	subeq	r5, r5, r3
 8006798:	68a3      	ldr	r3, [r4, #8]
 800679a:	bf0c      	ite	eq
 800679c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067a0:	2500      	movne	r5, #0
 80067a2:	4293      	cmp	r3, r2
 80067a4:	bfc4      	itt	gt
 80067a6:	1a9b      	subgt	r3, r3, r2
 80067a8:	18ed      	addgt	r5, r5, r3
 80067aa:	2600      	movs	r6, #0
 80067ac:	341a      	adds	r4, #26
 80067ae:	42b5      	cmp	r5, r6
 80067b0:	d11a      	bne.n	80067e8 <_printf_common+0xc8>
 80067b2:	2000      	movs	r0, #0
 80067b4:	e008      	b.n	80067c8 <_printf_common+0xa8>
 80067b6:	2301      	movs	r3, #1
 80067b8:	4652      	mov	r2, sl
 80067ba:	4641      	mov	r1, r8
 80067bc:	4638      	mov	r0, r7
 80067be:	47c8      	blx	r9
 80067c0:	3001      	adds	r0, #1
 80067c2:	d103      	bne.n	80067cc <_printf_common+0xac>
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295
 80067c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067cc:	3501      	adds	r5, #1
 80067ce:	e7c6      	b.n	800675e <_printf_common+0x3e>
 80067d0:	18e1      	adds	r1, r4, r3
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	2030      	movs	r0, #48	@ 0x30
 80067d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067da:	4422      	add	r2, r4
 80067dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067e4:	3302      	adds	r3, #2
 80067e6:	e7c7      	b.n	8006778 <_printf_common+0x58>
 80067e8:	2301      	movs	r3, #1
 80067ea:	4622      	mov	r2, r4
 80067ec:	4641      	mov	r1, r8
 80067ee:	4638      	mov	r0, r7
 80067f0:	47c8      	blx	r9
 80067f2:	3001      	adds	r0, #1
 80067f4:	d0e6      	beq.n	80067c4 <_printf_common+0xa4>
 80067f6:	3601      	adds	r6, #1
 80067f8:	e7d9      	b.n	80067ae <_printf_common+0x8e>
	...

080067fc <_printf_i>:
 80067fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006800:	7e0f      	ldrb	r7, [r1, #24]
 8006802:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006804:	2f78      	cmp	r7, #120	@ 0x78
 8006806:	4691      	mov	r9, r2
 8006808:	4680      	mov	r8, r0
 800680a:	460c      	mov	r4, r1
 800680c:	469a      	mov	sl, r3
 800680e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006812:	d807      	bhi.n	8006824 <_printf_i+0x28>
 8006814:	2f62      	cmp	r7, #98	@ 0x62
 8006816:	d80a      	bhi.n	800682e <_printf_i+0x32>
 8006818:	2f00      	cmp	r7, #0
 800681a:	f000 80d2 	beq.w	80069c2 <_printf_i+0x1c6>
 800681e:	2f58      	cmp	r7, #88	@ 0x58
 8006820:	f000 80b9 	beq.w	8006996 <_printf_i+0x19a>
 8006824:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006828:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800682c:	e03a      	b.n	80068a4 <_printf_i+0xa8>
 800682e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006832:	2b15      	cmp	r3, #21
 8006834:	d8f6      	bhi.n	8006824 <_printf_i+0x28>
 8006836:	a101      	add	r1, pc, #4	@ (adr r1, 800683c <_printf_i+0x40>)
 8006838:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800683c:	08006895 	.word	0x08006895
 8006840:	080068a9 	.word	0x080068a9
 8006844:	08006825 	.word	0x08006825
 8006848:	08006825 	.word	0x08006825
 800684c:	08006825 	.word	0x08006825
 8006850:	08006825 	.word	0x08006825
 8006854:	080068a9 	.word	0x080068a9
 8006858:	08006825 	.word	0x08006825
 800685c:	08006825 	.word	0x08006825
 8006860:	08006825 	.word	0x08006825
 8006864:	08006825 	.word	0x08006825
 8006868:	080069a9 	.word	0x080069a9
 800686c:	080068d3 	.word	0x080068d3
 8006870:	08006963 	.word	0x08006963
 8006874:	08006825 	.word	0x08006825
 8006878:	08006825 	.word	0x08006825
 800687c:	080069cb 	.word	0x080069cb
 8006880:	08006825 	.word	0x08006825
 8006884:	080068d3 	.word	0x080068d3
 8006888:	08006825 	.word	0x08006825
 800688c:	08006825 	.word	0x08006825
 8006890:	0800696b 	.word	0x0800696b
 8006894:	6833      	ldr	r3, [r6, #0]
 8006896:	1d1a      	adds	r2, r3, #4
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6032      	str	r2, [r6, #0]
 800689c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068a4:	2301      	movs	r3, #1
 80068a6:	e09d      	b.n	80069e4 <_printf_i+0x1e8>
 80068a8:	6833      	ldr	r3, [r6, #0]
 80068aa:	6820      	ldr	r0, [r4, #0]
 80068ac:	1d19      	adds	r1, r3, #4
 80068ae:	6031      	str	r1, [r6, #0]
 80068b0:	0606      	lsls	r6, r0, #24
 80068b2:	d501      	bpl.n	80068b8 <_printf_i+0xbc>
 80068b4:	681d      	ldr	r5, [r3, #0]
 80068b6:	e003      	b.n	80068c0 <_printf_i+0xc4>
 80068b8:	0645      	lsls	r5, r0, #25
 80068ba:	d5fb      	bpl.n	80068b4 <_printf_i+0xb8>
 80068bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068c0:	2d00      	cmp	r5, #0
 80068c2:	da03      	bge.n	80068cc <_printf_i+0xd0>
 80068c4:	232d      	movs	r3, #45	@ 0x2d
 80068c6:	426d      	negs	r5, r5
 80068c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068cc:	4859      	ldr	r0, [pc, #356]	@ (8006a34 <_printf_i+0x238>)
 80068ce:	230a      	movs	r3, #10
 80068d0:	e011      	b.n	80068f6 <_printf_i+0xfa>
 80068d2:	6821      	ldr	r1, [r4, #0]
 80068d4:	6833      	ldr	r3, [r6, #0]
 80068d6:	0608      	lsls	r0, r1, #24
 80068d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80068dc:	d402      	bmi.n	80068e4 <_printf_i+0xe8>
 80068de:	0649      	lsls	r1, r1, #25
 80068e0:	bf48      	it	mi
 80068e2:	b2ad      	uxthmi	r5, r5
 80068e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80068e6:	4853      	ldr	r0, [pc, #332]	@ (8006a34 <_printf_i+0x238>)
 80068e8:	6033      	str	r3, [r6, #0]
 80068ea:	bf14      	ite	ne
 80068ec:	230a      	movne	r3, #10
 80068ee:	2308      	moveq	r3, #8
 80068f0:	2100      	movs	r1, #0
 80068f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068f6:	6866      	ldr	r6, [r4, #4]
 80068f8:	60a6      	str	r6, [r4, #8]
 80068fa:	2e00      	cmp	r6, #0
 80068fc:	bfa2      	ittt	ge
 80068fe:	6821      	ldrge	r1, [r4, #0]
 8006900:	f021 0104 	bicge.w	r1, r1, #4
 8006904:	6021      	strge	r1, [r4, #0]
 8006906:	b90d      	cbnz	r5, 800690c <_printf_i+0x110>
 8006908:	2e00      	cmp	r6, #0
 800690a:	d04b      	beq.n	80069a4 <_printf_i+0x1a8>
 800690c:	4616      	mov	r6, r2
 800690e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006912:	fb03 5711 	mls	r7, r3, r1, r5
 8006916:	5dc7      	ldrb	r7, [r0, r7]
 8006918:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800691c:	462f      	mov	r7, r5
 800691e:	42bb      	cmp	r3, r7
 8006920:	460d      	mov	r5, r1
 8006922:	d9f4      	bls.n	800690e <_printf_i+0x112>
 8006924:	2b08      	cmp	r3, #8
 8006926:	d10b      	bne.n	8006940 <_printf_i+0x144>
 8006928:	6823      	ldr	r3, [r4, #0]
 800692a:	07df      	lsls	r7, r3, #31
 800692c:	d508      	bpl.n	8006940 <_printf_i+0x144>
 800692e:	6923      	ldr	r3, [r4, #16]
 8006930:	6861      	ldr	r1, [r4, #4]
 8006932:	4299      	cmp	r1, r3
 8006934:	bfde      	ittt	le
 8006936:	2330      	movle	r3, #48	@ 0x30
 8006938:	f806 3c01 	strble.w	r3, [r6, #-1]
 800693c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006940:	1b92      	subs	r2, r2, r6
 8006942:	6122      	str	r2, [r4, #16]
 8006944:	f8cd a000 	str.w	sl, [sp]
 8006948:	464b      	mov	r3, r9
 800694a:	aa03      	add	r2, sp, #12
 800694c:	4621      	mov	r1, r4
 800694e:	4640      	mov	r0, r8
 8006950:	f7ff fee6 	bl	8006720 <_printf_common>
 8006954:	3001      	adds	r0, #1
 8006956:	d14a      	bne.n	80069ee <_printf_i+0x1f2>
 8006958:	f04f 30ff 	mov.w	r0, #4294967295
 800695c:	b004      	add	sp, #16
 800695e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	f043 0320 	orr.w	r3, r3, #32
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	4833      	ldr	r0, [pc, #204]	@ (8006a38 <_printf_i+0x23c>)
 800696c:	2778      	movs	r7, #120	@ 0x78
 800696e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	6831      	ldr	r1, [r6, #0]
 8006976:	061f      	lsls	r7, r3, #24
 8006978:	f851 5b04 	ldr.w	r5, [r1], #4
 800697c:	d402      	bmi.n	8006984 <_printf_i+0x188>
 800697e:	065f      	lsls	r7, r3, #25
 8006980:	bf48      	it	mi
 8006982:	b2ad      	uxthmi	r5, r5
 8006984:	6031      	str	r1, [r6, #0]
 8006986:	07d9      	lsls	r1, r3, #31
 8006988:	bf44      	itt	mi
 800698a:	f043 0320 	orrmi.w	r3, r3, #32
 800698e:	6023      	strmi	r3, [r4, #0]
 8006990:	b11d      	cbz	r5, 800699a <_printf_i+0x19e>
 8006992:	2310      	movs	r3, #16
 8006994:	e7ac      	b.n	80068f0 <_printf_i+0xf4>
 8006996:	4827      	ldr	r0, [pc, #156]	@ (8006a34 <_printf_i+0x238>)
 8006998:	e7e9      	b.n	800696e <_printf_i+0x172>
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	f023 0320 	bic.w	r3, r3, #32
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	e7f6      	b.n	8006992 <_printf_i+0x196>
 80069a4:	4616      	mov	r6, r2
 80069a6:	e7bd      	b.n	8006924 <_printf_i+0x128>
 80069a8:	6833      	ldr	r3, [r6, #0]
 80069aa:	6825      	ldr	r5, [r4, #0]
 80069ac:	6961      	ldr	r1, [r4, #20]
 80069ae:	1d18      	adds	r0, r3, #4
 80069b0:	6030      	str	r0, [r6, #0]
 80069b2:	062e      	lsls	r6, r5, #24
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	d501      	bpl.n	80069bc <_printf_i+0x1c0>
 80069b8:	6019      	str	r1, [r3, #0]
 80069ba:	e002      	b.n	80069c2 <_printf_i+0x1c6>
 80069bc:	0668      	lsls	r0, r5, #25
 80069be:	d5fb      	bpl.n	80069b8 <_printf_i+0x1bc>
 80069c0:	8019      	strh	r1, [r3, #0]
 80069c2:	2300      	movs	r3, #0
 80069c4:	6123      	str	r3, [r4, #16]
 80069c6:	4616      	mov	r6, r2
 80069c8:	e7bc      	b.n	8006944 <_printf_i+0x148>
 80069ca:	6833      	ldr	r3, [r6, #0]
 80069cc:	1d1a      	adds	r2, r3, #4
 80069ce:	6032      	str	r2, [r6, #0]
 80069d0:	681e      	ldr	r6, [r3, #0]
 80069d2:	6862      	ldr	r2, [r4, #4]
 80069d4:	2100      	movs	r1, #0
 80069d6:	4630      	mov	r0, r6
 80069d8:	f7f9 fc2a 	bl	8000230 <memchr>
 80069dc:	b108      	cbz	r0, 80069e2 <_printf_i+0x1e6>
 80069de:	1b80      	subs	r0, r0, r6
 80069e0:	6060      	str	r0, [r4, #4]
 80069e2:	6863      	ldr	r3, [r4, #4]
 80069e4:	6123      	str	r3, [r4, #16]
 80069e6:	2300      	movs	r3, #0
 80069e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069ec:	e7aa      	b.n	8006944 <_printf_i+0x148>
 80069ee:	6923      	ldr	r3, [r4, #16]
 80069f0:	4632      	mov	r2, r6
 80069f2:	4649      	mov	r1, r9
 80069f4:	4640      	mov	r0, r8
 80069f6:	47d0      	blx	sl
 80069f8:	3001      	adds	r0, #1
 80069fa:	d0ad      	beq.n	8006958 <_printf_i+0x15c>
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	079b      	lsls	r3, r3, #30
 8006a00:	d413      	bmi.n	8006a2a <_printf_i+0x22e>
 8006a02:	68e0      	ldr	r0, [r4, #12]
 8006a04:	9b03      	ldr	r3, [sp, #12]
 8006a06:	4298      	cmp	r0, r3
 8006a08:	bfb8      	it	lt
 8006a0a:	4618      	movlt	r0, r3
 8006a0c:	e7a6      	b.n	800695c <_printf_i+0x160>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	4632      	mov	r2, r6
 8006a12:	4649      	mov	r1, r9
 8006a14:	4640      	mov	r0, r8
 8006a16:	47d0      	blx	sl
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d09d      	beq.n	8006958 <_printf_i+0x15c>
 8006a1c:	3501      	adds	r5, #1
 8006a1e:	68e3      	ldr	r3, [r4, #12]
 8006a20:	9903      	ldr	r1, [sp, #12]
 8006a22:	1a5b      	subs	r3, r3, r1
 8006a24:	42ab      	cmp	r3, r5
 8006a26:	dcf2      	bgt.n	8006a0e <_printf_i+0x212>
 8006a28:	e7eb      	b.n	8006a02 <_printf_i+0x206>
 8006a2a:	2500      	movs	r5, #0
 8006a2c:	f104 0619 	add.w	r6, r4, #25
 8006a30:	e7f5      	b.n	8006a1e <_printf_i+0x222>
 8006a32:	bf00      	nop
 8006a34:	08007399 	.word	0x08007399
 8006a38:	080073aa 	.word	0x080073aa

08006a3c <memmove>:
 8006a3c:	4288      	cmp	r0, r1
 8006a3e:	b510      	push	{r4, lr}
 8006a40:	eb01 0402 	add.w	r4, r1, r2
 8006a44:	d902      	bls.n	8006a4c <memmove+0x10>
 8006a46:	4284      	cmp	r4, r0
 8006a48:	4623      	mov	r3, r4
 8006a4a:	d807      	bhi.n	8006a5c <memmove+0x20>
 8006a4c:	1e43      	subs	r3, r0, #1
 8006a4e:	42a1      	cmp	r1, r4
 8006a50:	d008      	beq.n	8006a64 <memmove+0x28>
 8006a52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a5a:	e7f8      	b.n	8006a4e <memmove+0x12>
 8006a5c:	4402      	add	r2, r0
 8006a5e:	4601      	mov	r1, r0
 8006a60:	428a      	cmp	r2, r1
 8006a62:	d100      	bne.n	8006a66 <memmove+0x2a>
 8006a64:	bd10      	pop	{r4, pc}
 8006a66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a6e:	e7f7      	b.n	8006a60 <memmove+0x24>

08006a70 <_sbrk_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	4d06      	ldr	r5, [pc, #24]	@ (8006a8c <_sbrk_r+0x1c>)
 8006a74:	2300      	movs	r3, #0
 8006a76:	4604      	mov	r4, r0
 8006a78:	4608      	mov	r0, r1
 8006a7a:	602b      	str	r3, [r5, #0]
 8006a7c:	f7fa fd32 	bl	80014e4 <_sbrk>
 8006a80:	1c43      	adds	r3, r0, #1
 8006a82:	d102      	bne.n	8006a8a <_sbrk_r+0x1a>
 8006a84:	682b      	ldr	r3, [r5, #0]
 8006a86:	b103      	cbz	r3, 8006a8a <_sbrk_r+0x1a>
 8006a88:	6023      	str	r3, [r4, #0]
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
 8006a8c:	20000398 	.word	0x20000398

08006a90 <memcpy>:
 8006a90:	440a      	add	r2, r1
 8006a92:	4291      	cmp	r1, r2
 8006a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a98:	d100      	bne.n	8006a9c <memcpy+0xc>
 8006a9a:	4770      	bx	lr
 8006a9c:	b510      	push	{r4, lr}
 8006a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aa6:	4291      	cmp	r1, r2
 8006aa8:	d1f9      	bne.n	8006a9e <memcpy+0xe>
 8006aaa:	bd10      	pop	{r4, pc}

08006aac <_realloc_r>:
 8006aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab0:	4680      	mov	r8, r0
 8006ab2:	4615      	mov	r5, r2
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	b921      	cbnz	r1, 8006ac2 <_realloc_r+0x16>
 8006ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006abc:	4611      	mov	r1, r2
 8006abe:	f7ff bc4b 	b.w	8006358 <_malloc_r>
 8006ac2:	b92a      	cbnz	r2, 8006ad0 <_realloc_r+0x24>
 8006ac4:	f7ff fbdc 	bl	8006280 <_free_r>
 8006ac8:	2400      	movs	r4, #0
 8006aca:	4620      	mov	r0, r4
 8006acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ad0:	f000 f81a 	bl	8006b08 <_malloc_usable_size_r>
 8006ad4:	4285      	cmp	r5, r0
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	d802      	bhi.n	8006ae0 <_realloc_r+0x34>
 8006ada:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006ade:	d8f4      	bhi.n	8006aca <_realloc_r+0x1e>
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	4640      	mov	r0, r8
 8006ae4:	f7ff fc38 	bl	8006358 <_malloc_r>
 8006ae8:	4607      	mov	r7, r0
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d0ec      	beq.n	8006ac8 <_realloc_r+0x1c>
 8006aee:	42b5      	cmp	r5, r6
 8006af0:	462a      	mov	r2, r5
 8006af2:	4621      	mov	r1, r4
 8006af4:	bf28      	it	cs
 8006af6:	4632      	movcs	r2, r6
 8006af8:	f7ff ffca 	bl	8006a90 <memcpy>
 8006afc:	4621      	mov	r1, r4
 8006afe:	4640      	mov	r0, r8
 8006b00:	f7ff fbbe 	bl	8006280 <_free_r>
 8006b04:	463c      	mov	r4, r7
 8006b06:	e7e0      	b.n	8006aca <_realloc_r+0x1e>

08006b08 <_malloc_usable_size_r>:
 8006b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b0c:	1f18      	subs	r0, r3, #4
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	bfbc      	itt	lt
 8006b12:	580b      	ldrlt	r3, [r1, r0]
 8006b14:	18c0      	addlt	r0, r0, r3
 8006b16:	4770      	bx	lr

08006b18 <_init>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	bf00      	nop
 8006b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1e:	bc08      	pop	{r3}
 8006b20:	469e      	mov	lr, r3
 8006b22:	4770      	bx	lr

08006b24 <_fini>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	bf00      	nop
 8006b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2a:	bc08      	pop	{r3}
 8006b2c:	469e      	mov	lr, r3
 8006b2e:	4770      	bx	lr
