
106_Messungen_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a668  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cb8  0800a848  0800a848  0000b848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b500  0800b500  0000d1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b500  0800b500  0000c500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b508  0800b508  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b508  0800b508  0000c508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b50c  0800b50c  0000c50c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b510  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  200001e4  0800b6f4  0000d1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  0800b6f4  0000d71c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c2a2  00000000  00000000  0000d214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b6  00000000  00000000  000294b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  0002cb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013aa  00000000  00000000  0002e4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a845  00000000  00000000  0002f86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dbcd  00000000  00000000  0005a0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001174df  00000000  00000000  00077c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018f15b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e70  00000000  00000000  0018f1a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00197010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a830 	.word	0x0800a830

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800a830 	.word	0x0800a830

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
 8000f92:	460b      	mov	r3, r1
 8000f94:	80bb      	strh	r3, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	88b9      	ldrh	r1, [r7, #4]
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fab5 	bl	8001510 <ST7735_DrawPixel>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000fae:	b590      	push	{r4, r7, lr}
 8000fb0:	b085      	sub	sp, #20
 8000fb2:	af02      	add	r7, sp, #8
 8000fb4:	4604      	mov	r4, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4611      	mov	r1, r2
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4623      	mov	r3, r4
 8000fbe:	80fb      	strh	r3, [r7, #6]
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	80bb      	strh	r3, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000fcc:	88f8      	ldrh	r0, [r7, #6]
 8000fce:	88b9      	ldrh	r1, [r7, #4]
 8000fd0:	887a      	ldrh	r2, [r7, #2]
 8000fd2:	883c      	ldrh	r4, [r7, #0]
 8000fd4:	8b3b      	ldrh	r3, [r7, #24]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4623      	mov	r3, r4
 8000fda:	f000 fba3 	bl	8001724 <ST7735_FillRectangle>
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}

08000fe6 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	80fb      	strh	r3, [r7, #6]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	80bb      	strh	r3, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8000ff8:	887a      	ldrh	r2, [r7, #2]
 8000ffa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ffc0 	bl	8000f88 <drawPixel>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b089      	sub	sp, #36	@ 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	4604      	mov	r4, r0
 8001018:	4608      	mov	r0, r1
 800101a:	4611      	mov	r1, r2
 800101c:	461a      	mov	r2, r3
 800101e:	4623      	mov	r3, r4
 8001020:	80fb      	strh	r3, [r7, #6]
 8001022:	4603      	mov	r3, r0
 8001024:	80bb      	strh	r3, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]
 800102a:	4613      	mov	r3, r2
 800102c:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800102e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001032:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800103c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001040:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001048:	1acb      	subs	r3, r1, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	bfb8      	it	lt
 800104e:	425b      	neglt	r3, r3
 8001050:	429a      	cmp	r2, r3
 8001052:	bfcc      	ite	gt
 8001054:	2301      	movgt	r3, #1
 8001056:	2300      	movle	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	837b      	strh	r3, [r7, #26]
    if (steep) {
 800105c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00b      	beq.n	800107c <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	833b      	strh	r3, [r7, #24]
 8001068:	88bb      	ldrh	r3, [r7, #4]
 800106a:	80fb      	strh	r3, [r7, #6]
 800106c:	8b3b      	ldrh	r3, [r7, #24]
 800106e:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	82fb      	strh	r3, [r7, #22]
 8001074:	883b      	ldrh	r3, [r7, #0]
 8001076:	807b      	strh	r3, [r7, #2]
 8001078:	8afb      	ldrh	r3, [r7, #22]
 800107a:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 800107c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001080:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001084:	429a      	cmp	r2, r3
 8001086:	dd0b      	ble.n	80010a0 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	82bb      	strh	r3, [r7, #20]
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	80fb      	strh	r3, [r7, #6]
 8001090:	8abb      	ldrh	r3, [r7, #20]
 8001092:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8001094:	88bb      	ldrh	r3, [r7, #4]
 8001096:	827b      	strh	r3, [r7, #18]
 8001098:	883b      	ldrh	r3, [r7, #0]
 800109a:	80bb      	strh	r3, [r7, #4]
 800109c:	8a7b      	ldrh	r3, [r7, #18]
 800109e:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80010a0:	887a      	ldrh	r2, [r7, #2]
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 80010aa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80010ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bfb8      	it	lt
 80010b8:	425b      	neglt	r3, r3
 80010ba:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 80010bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010c0:	0fda      	lsrs	r2, r3, #31
 80010c2:	4413      	add	r3, r2
 80010c4:	105b      	asrs	r3, r3, #1
 80010c6:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 80010c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80010cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	da02      	bge.n	80010da <writeLine+0xca>
        ystep = 1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	83bb      	strh	r3, [r7, #28]
 80010d8:	e031      	b.n	800113e <writeLine+0x12e>
    } else {
        ystep = -1;
 80010da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010de:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 80010e0:	e02d      	b.n	800113e <writeLine+0x12e>
        if (steep) {
 80010e2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d008      	beq.n	80010fc <writeLine+0xec>
            writePixel(y0, x0, color);
 80010ea:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80010ec:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80010f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff76 	bl	8000fe6 <writePixel>
 80010fa:	e007      	b.n	800110c <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 80010fc:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80010fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff6d 	bl	8000fe6 <writePixel>
        }
        err -= dy;
 800110c:	8bfa      	ldrh	r2, [r7, #30]
 800110e:	89fb      	ldrh	r3, [r7, #14]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	b29b      	uxth	r3, r3
 8001114:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 8001116:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800111a:	2b00      	cmp	r3, #0
 800111c:	da09      	bge.n	8001132 <writeLine+0x122>
            y0 += ystep;
 800111e:	88ba      	ldrh	r2, [r7, #4]
 8001120:	8bbb      	ldrh	r3, [r7, #28]
 8001122:	4413      	add	r3, r2
 8001124:	b29b      	uxth	r3, r3
 8001126:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8001128:	8bfa      	ldrh	r2, [r7, #30]
 800112a:	8a3b      	ldrh	r3, [r7, #16]
 800112c:	4413      	add	r3, r2
 800112e:	b29b      	uxth	r3, r3
 8001130:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 8001132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001136:	b29b      	uxth	r3, r3
 8001138:	3301      	adds	r3, #1
 800113a:	b29b      	uxth	r3, r3
 800113c:	80fb      	strh	r3, [r7, #6]
 800113e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001142:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001146:	429a      	cmp	r2, r3
 8001148:	ddcb      	ble.n	80010e2 <writeLine+0xd2>
        }
    }
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	3724      	adds	r7, #36	@ 0x24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd90      	pop	{r4, r7, pc}

08001154 <drawFastHLine>:
void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
	writeLine(x, y, x, y + h - 1, color);
}
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b085      	sub	sp, #20
 8001158:	af02      	add	r7, sp, #8
 800115a:	4604      	mov	r4, r0
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4623      	mov	r3, r4
 8001164:	80fb      	strh	r3, [r7, #6]
 8001166:	4603      	mov	r3, r0
 8001168:	80bb      	strh	r3, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	807b      	strh	r3, [r7, #2]
 800116e:	4613      	mov	r3, r2
 8001170:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 8001172:	88fa      	ldrh	r2, [r7, #6]
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	4413      	add	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	3b01      	subs	r3, #1
 800117c:	b29b      	uxth	r3, r3
 800117e:	b21a      	sxth	r2, r3
 8001180:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001184:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001188:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800118c:	883b      	ldrh	r3, [r7, #0]
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	4623      	mov	r3, r4
 8001192:	f7ff ff3d 	bl	8001010 <writeLine>
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bd90      	pop	{r4, r7, pc}
	...

080011a0 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <fillScreen+0x2c>)
 80011ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011b0:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <fillScreen+0x30>)
 80011b2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	460b      	mov	r3, r1
 80011bc:	2100      	movs	r1, #0
 80011be:	2000      	movs	r0, #0
 80011c0:	f7ff fef5 	bl	8000fae <fillRect>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000200 	.word	0x20000200
 80011d0:	20000202 	.word	0x20000202

080011d4 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e2:	f003 fea3 	bl	8004f2c <HAL_GPIO_WritePin>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}

080011ea <ST7735_Unselect>:

void ST7735_Unselect()
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f8:	f003 fe98 	bl	8004f2c <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <ST7735_Reset>:

void ST7735_Reset()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2140      	movs	r1, #64	@ 0x40
 8001208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120c:	f003 fe8e 	bl	8004f2c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001210:	2005      	movs	r0, #5
 8001212:	f001 fe01 	bl	8002e18 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8001216:	2201      	movs	r2, #1
 8001218:	2140      	movs	r1, #64	@ 0x40
 800121a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800121e:	f003 fe85 	bl	8004f2c <HAL_GPIO_WritePin>
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001238:	4806      	ldr	r0, [pc, #24]	@ (8001254 <ST7735_WriteCommand+0x2c>)
 800123a:	f003 fe77 	bl	8004f2c <HAL_GPIO_WritePin>
		{

		}
	#endif
	#ifdef WITHOUT_DMA
		HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800123e:	1df9      	adds	r1, r7, #7
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	2201      	movs	r2, #1
 8001246:	4804      	ldr	r0, [pc, #16]	@ (8001258 <ST7735_WriteCommand+0x30>)
 8001248:	f004 ff95 	bl	8006176 <HAL_SPI_Transmit>
	#endif
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	48000400 	.word	0x48000400
 8001258:	200003a4 	.word	0x200003a4

0800125c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001266:	2201      	movs	r2, #1
 8001268:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800126c:	4807      	ldr	r0, [pc, #28]	@ (800128c <ST7735_WriteData+0x30>)
 800126e:	f003 fe5d 	bl	8004f2c <HAL_GPIO_WritePin>
    	{

    	}
	#endif
	#ifdef WITHOUT_DMA
    	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b29a      	uxth	r2, r3
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4804      	ldr	r0, [pc, #16]	@ (8001290 <ST7735_WriteData+0x34>)
 800127e:	f004 ff7a 	bl	8006176 <HAL_SPI_Transmit>
	#endif
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	48000400 	.word	0x48000400
 8001290:	200003a4 	.word	0x200003a4

08001294 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80012a6:	e034      	b.n	8001312 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80012b2:	7afb      	ldrb	r3, [r7, #11]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ffb7 	bl	8001228 <ST7735_WriteCommand>

        numArgs = *addr++;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	1c5a      	adds	r2, r3, #1
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80012c4:	7abb      	ldrb	r3, [r7, #10]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012cc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80012ce:	7abb      	ldrb	r3, [r7, #10]
 80012d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012d4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80012d6:	7abb      	ldrb	r3, [r7, #10]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80012dc:	7abb      	ldrb	r3, [r7, #10]
 80012de:	4619      	mov	r1, r3
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ffbb 	bl	800125c <ST7735_WriteData>
            addr += numArgs;
 80012e6:	7abb      	ldrb	r3, [r7, #10]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80012ee:	89bb      	ldrh	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00e      	beq.n	8001312 <DisplayInit+0x7e>
            ms = *addr++;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80012fe:	89bb      	ldrh	r3, [r7, #12]
 8001300:	2bff      	cmp	r3, #255	@ 0xff
 8001302:	d102      	bne.n	800130a <DisplayInit+0x76>
 8001304:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001308:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800130a:	89bb      	ldrh	r3, [r7, #12]
 800130c:	4618      	mov	r0, r3
 800130e:	f001 fd83 	bl	8002e18 <HAL_Delay>
    while(numCommands--) {
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	1e5a      	subs	r2, r3, #1
 8001316:	73fa      	strb	r2, [r7, #15]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1c5      	bne.n	80012a8 <DisplayInit+0x14>
        }
    }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	4604      	mov	r4, r0
 8001330:	4608      	mov	r0, r1
 8001332:	4611      	mov	r1, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4623      	mov	r3, r4
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	4603      	mov	r3, r0
 800133c:	71bb      	strb	r3, [r7, #6]
 800133e:	460b      	mov	r3, r1
 8001340:	717b      	strb	r3, [r7, #5]
 8001342:	4613      	mov	r3, r2
 8001344:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001346:	202a      	movs	r0, #42	@ 0x2a
 8001348:	f7ff ff6e 	bl	8001228 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800134c:	2300      	movs	r3, #0
 800134e:	733b      	strb	r3, [r7, #12]
 8001350:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <ST7735_SetAddressWindow+0x88>)
 8001352:	781a      	ldrb	r2, [r3, #0]
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4413      	add	r3, r2
 8001358:	b2db      	uxtb	r3, r3
 800135a:	737b      	strb	r3, [r7, #13]
 800135c:	2300      	movs	r3, #0
 800135e:	73bb      	strb	r3, [r7, #14]
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <ST7735_SetAddressWindow+0x88>)
 8001362:	781a      	ldrb	r2, [r3, #0]
 8001364:	797b      	ldrb	r3, [r7, #5]
 8001366:	4413      	add	r3, r2
 8001368:	b2db      	uxtb	r3, r3
 800136a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2104      	movs	r1, #4
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff72 	bl	800125c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001378:	202b      	movs	r0, #43	@ 0x2b
 800137a:	f7ff ff55 	bl	8001228 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800137e:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <ST7735_SetAddressWindow+0x8c>)
 8001380:	781a      	ldrb	r2, [r3, #0]
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	4413      	add	r3, r2
 8001386:	b2db      	uxtb	r3, r3
 8001388:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800138a:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <ST7735_SetAddressWindow+0x8c>)
 800138c:	781a      	ldrb	r2, [r3, #0]
 800138e:	793b      	ldrb	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	b2db      	uxtb	r3, r3
 8001394:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2104      	movs	r1, #4
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff5d 	bl	800125c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80013a2:	202c      	movs	r0, #44	@ 0x2c
 80013a4:	f7ff ff40 	bl	8001228 <ST7735_WriteCommand>
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	20000207 	.word	0x20000207
 80013b4:	20000208 	.word	0x20000208

080013b8 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 80013c2:	f7ff ff07 	bl	80011d4 <ST7735_Select>
    ST7735_Reset();
 80013c6:	f7ff ff1b 	bl	8001200 <ST7735_Reset>
    DisplayInit(init_cmds1);
 80013ca:	480c      	ldr	r0, [pc, #48]	@ (80013fc <ST7735_Init+0x44>)
 80013cc:	f7ff ff62 	bl	8001294 <DisplayInit>
    DisplayInit(init_cmds2);
 80013d0:	480b      	ldr	r0, [pc, #44]	@ (8001400 <ST7735_Init+0x48>)
 80013d2:	f7ff ff5f 	bl	8001294 <DisplayInit>
    DisplayInit(init_cmds3);
 80013d6:	480b      	ldr	r0, [pc, #44]	@ (8001404 <ST7735_Init+0x4c>)
 80013d8:	f7ff ff5c 	bl	8001294 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <ST7735_Init+0x50>)
 80013de:	2202      	movs	r2, #2
 80013e0:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <ST7735_Init+0x54>)
 80013e4:	2203      	movs	r2, #3
 80013e6:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f810 	bl	8001410 <ST7735_SetRotation>
    ST7735_Unselect();
 80013f0:	f7ff fefb 	bl	80011ea <ST7735_Unselect>

}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	0800a970 	.word	0x0800a970
 8001400:	0800a9a8 	.word	0x0800a9a8
 8001404:	0800a9b8 	.word	0x0800a9b8
 8001408:	20000205 	.word	0x20000205
 800140c:	20000206 	.word	0x20000206

08001410 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b33      	ldr	r3, [pc, #204]	@ (80014f4 <ST7735_SetRotation+0xe4>)
 8001428:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800142a:	4b32      	ldr	r3, [pc, #200]	@ (80014f4 <ST7735_SetRotation+0xe4>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d84e      	bhi.n	80014d0 <ST7735_SetRotation+0xc0>
 8001432:	a201      	add	r2, pc, #4	@ (adr r2, 8001438 <ST7735_SetRotation+0x28>)
 8001434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001438:	08001449 	.word	0x08001449
 800143c:	0800146b 	.word	0x0800146b
 8001440:	0800148d 	.word	0x0800148d
 8001444:	080014af 	.word	0x080014af
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001448:	23c0      	movs	r3, #192	@ 0xc0
 800144a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800144c:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001452:	4b2a      	ldr	r3, [pc, #168]	@ (80014fc <ST7735_SetRotation+0xec>)
 8001454:	2280      	movs	r2, #128	@ 0x80
 8001456:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8001458:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <ST7735_SetRotation+0xf0>)
 800145a:	781a      	ldrb	r2, [r3, #0]
 800145c:	4b29      	ldr	r3, [pc, #164]	@ (8001504 <ST7735_SetRotation+0xf4>)
 800145e:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8001460:	4b29      	ldr	r3, [pc, #164]	@ (8001508 <ST7735_SetRotation+0xf8>)
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	4b29      	ldr	r3, [pc, #164]	@ (800150c <ST7735_SetRotation+0xfc>)
 8001466:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001468:	e032      	b.n	80014d0 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800146a:	23a0      	movs	r3, #160	@ 0xa0
 800146c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800146e:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <ST7735_SetRotation+0xec>)
 8001470:	2280      	movs	r2, #128	@ 0x80
 8001472:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001474:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 8001476:	2280      	movs	r2, #128	@ 0x80
 8001478:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800147a:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <ST7735_SetRotation+0xf0>)
 800147c:	781a      	ldrb	r2, [r3, #0]
 800147e:	4b23      	ldr	r3, [pc, #140]	@ (800150c <ST7735_SetRotation+0xfc>)
 8001480:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001482:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <ST7735_SetRotation+0xf8>)
 8001484:	781a      	ldrb	r2, [r3, #0]
 8001486:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <ST7735_SetRotation+0xf4>)
 8001488:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800148a:	e021      	b.n	80014d0 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001490:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 8001492:	2280      	movs	r2, #128	@ 0x80
 8001494:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001496:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <ST7735_SetRotation+0xec>)
 8001498:	2280      	movs	r2, #128	@ 0x80
 800149a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 800149c:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <ST7735_SetRotation+0xf0>)
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <ST7735_SetRotation+0xf4>)
 80014a2:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80014a4:	4b18      	ldr	r3, [pc, #96]	@ (8001508 <ST7735_SetRotation+0xf8>)
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	4b18      	ldr	r3, [pc, #96]	@ (800150c <ST7735_SetRotation+0xfc>)
 80014aa:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80014ac:	e010      	b.n	80014d0 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80014ae:	2360      	movs	r3, #96	@ 0x60
 80014b0:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <ST7735_SetRotation+0xec>)
 80014b4:	2280      	movs	r2, #128	@ 0x80
 80014b6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <ST7735_SetRotation+0xf0>)
 80014c0:	781a      	ldrb	r2, [r3, #0]
 80014c2:	4b12      	ldr	r3, [pc, #72]	@ (800150c <ST7735_SetRotation+0xfc>)
 80014c4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <ST7735_SetRotation+0xf8>)
 80014c8:	781a      	ldrb	r2, [r3, #0]
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <ST7735_SetRotation+0xf4>)
 80014cc:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80014ce:	bf00      	nop
  }
  ST7735_Select();
 80014d0:	f7ff fe80 	bl	80011d4 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80014d4:	2036      	movs	r0, #54	@ 0x36
 80014d6:	f7ff fea7 	bl	8001228 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80014da:	f107 030f 	add.w	r3, r7, #15
 80014de:	2101      	movs	r1, #1
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff febb 	bl	800125c <ST7735_WriteData>
  ST7735_Unselect();
 80014e6:	f7ff fe80 	bl	80011ea <ST7735_Unselect>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000204 	.word	0x20000204
 80014f8:	20000202 	.word	0x20000202
 80014fc:	20000200 	.word	0x20000200
 8001500:	20000205 	.word	0x20000205
 8001504:	20000207 	.word	0x20000207
 8001508:	20000206 	.word	0x20000206
 800150c:	20000208 	.word	0x20000208

08001510 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
 800151a:	460b      	mov	r3, r1
 800151c:	80bb      	strh	r3, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <ST7735_DrawPixel+0x74>)
 8001526:	f9b2 2000 	ldrsh.w	r2, [r2]
 800152a:	4293      	cmp	r3, r2
 800152c:	da26      	bge.n	800157c <ST7735_DrawPixel+0x6c>
 800152e:	88bb      	ldrh	r3, [r7, #4]
 8001530:	4a15      	ldr	r2, [pc, #84]	@ (8001588 <ST7735_DrawPixel+0x78>)
 8001532:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001536:	4293      	cmp	r3, r2
 8001538:	da20      	bge.n	800157c <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 800153a:	f7ff fe4b 	bl	80011d4 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	b2d8      	uxtb	r0, r3
 8001542:	88bb      	ldrh	r3, [r7, #4]
 8001544:	b2d9      	uxtb	r1, r3
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	3301      	adds	r3, #1
 800154c:	b2da      	uxtb	r2, r3
 800154e:	88bb      	ldrh	r3, [r7, #4]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	3301      	adds	r3, #1
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f7ff fee7 	bl	8001328 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	b29b      	uxth	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	733b      	strb	r3, [r7, #12]
 8001564:	887b      	ldrh	r3, [r7, #2]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	2102      	movs	r1, #2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe73 	bl	800125c <ST7735_WriteData>

    ST7735_Unselect();
 8001576:	f7ff fe38 	bl	80011ea <ST7735_Unselect>
 800157a:	e000      	b.n	800157e <ST7735_DrawPixel+0x6e>
        return;
 800157c:	bf00      	nop
}
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000200 	.word	0x20000200
 8001588:	20000202 	.word	0x20000202

0800158c <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800158c:	b082      	sub	sp, #8
 800158e:	b590      	push	{r4, r7, lr}
 8001590:	b089      	sub	sp, #36	@ 0x24
 8001592:	af00      	add	r7, sp, #0
 8001594:	637b      	str	r3, [r7, #52]	@ 0x34
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
 800159a:	460b      	mov	r3, r1
 800159c:	80bb      	strh	r3, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	b2d8      	uxtb	r0, r3
 80015a6:	88bb      	ldrh	r3, [r7, #4]
 80015a8:	b2d9      	uxtb	r1, r3
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80015b2:	4413      	add	r3, r2
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b2dc      	uxtb	r4, r3
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80015c2:	4413      	add	r3, r2
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	3b01      	subs	r3, #1
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4622      	mov	r2, r4
 80015cc:	f7ff feac 	bl	8001328 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
 80015d4:	e043      	b.n	800165e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80015d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	3b20      	subs	r3, #32
 80015dc:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80015e0:	fb01 f303 	mul.w	r3, r1, r3
 80015e4:	4619      	mov	r1, r3
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	440b      	add	r3, r1
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	e029      	b.n	800164c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00e      	beq.n	8001626 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001608:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	b29b      	uxth	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	743b      	strb	r3, [r7, #16]
 8001612:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001614:	b2db      	uxtb	r3, r3
 8001616:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	2102      	movs	r1, #2
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fe1c 	bl	800125c <ST7735_WriteData>
 8001624:	e00f      	b.n	8001646 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001626:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	b29b      	uxth	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	733b      	strb	r3, [r7, #12]
 8001632:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001636:	b2db      	uxtb	r3, r3
 8001638:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	2102      	movs	r1, #2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fe0b 	bl	800125c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	3301      	adds	r3, #1
 800164a:	61bb      	str	r3, [r7, #24]
 800164c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001650:	461a      	mov	r2, r3
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4293      	cmp	r3, r2
 8001656:	d3cf      	bcc.n	80015f8 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	3301      	adds	r3, #1
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001662:	461a      	mov	r2, r3
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	4293      	cmp	r3, r2
 8001668:	d3b5      	bcc.n	80015d6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800166a:	bf00      	nop
 800166c:	bf00      	nop
 800166e:	3724      	adds	r7, #36	@ 0x24
 8001670:	46bd      	mov	sp, r7
 8001672:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001676:	b002      	add	sp, #8
 8001678:	4770      	bx	lr
	...

0800167c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800167c:	b082      	sub	sp, #8
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af04      	add	r7, sp, #16
 8001684:	603a      	str	r2, [r7, #0]
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	4603      	mov	r3, r0
 800168a:	80fb      	strh	r3, [r7, #6]
 800168c:	460b      	mov	r3, r1
 800168e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001690:	f7ff fda0 	bl	80011d4 <ST7735_Select>

    while(*str) {
 8001694:	e033      	b.n	80016fe <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	7d3a      	ldrb	r2, [r7, #20]
 800169a:	4413      	add	r3, r2
 800169c:	4a1f      	ldr	r2, [pc, #124]	@ (800171c <ST7735_WriteString+0xa0>)
 800169e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016a2:	4293      	cmp	r3, r2
 80016a4:	db16      	blt.n	80016d4 <ST7735_WriteString+0x58>
            x = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80016aa:	7d7b      	ldrb	r3, [r7, #21]
 80016ac:	461a      	mov	r2, r3
 80016ae:	88bb      	ldrh	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 80016b4:	88bb      	ldrh	r3, [r7, #4]
 80016b6:	7d7a      	ldrb	r2, [r7, #21]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a19      	ldr	r2, [pc, #100]	@ (8001720 <ST7735_WriteString+0xa4>)
 80016bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016c0:	4293      	cmp	r3, r2
 80016c2:	da21      	bge.n	8001708 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b20      	cmp	r3, #32
 80016ca:	d103      	bne.n	80016d4 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	603b      	str	r3, [r7, #0]
                continue;
 80016d2:	e014      	b.n	80016fe <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	781a      	ldrb	r2, [r3, #0]
 80016d8:	88b9      	ldrh	r1, [r7, #4]
 80016da:	88f8      	ldrh	r0, [r7, #6]
 80016dc:	8c3b      	ldrh	r3, [r7, #32]
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	8bbb      	ldrh	r3, [r7, #28]
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f7ff ff4f 	bl	800158c <ST7735_WriteChar>
        x += font.width;
 80016ee:	7d3b      	ldrb	r3, [r7, #20]
 80016f0:	461a      	mov	r2, r3
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	4413      	add	r3, r2
 80016f6:	80fb      	strh	r3, [r7, #6]
        str++;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	603b      	str	r3, [r7, #0]
    while(*str) {
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1c7      	bne.n	8001696 <ST7735_WriteString+0x1a>
 8001706:	e000      	b.n	800170a <ST7735_WriteString+0x8e>
                break;
 8001708:	bf00      	nop
    }

    ST7735_Unselect();
 800170a:	f7ff fd6e 	bl	80011ea <ST7735_Unselect>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001718:	b002      	add	sp, #8
 800171a:	4770      	bx	lr
 800171c:	20000200 	.word	0x20000200
 8001720:	20000202 	.word	0x20000202

08001724 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	4604      	mov	r4, r0
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4623      	mov	r3, r4
 8001734:	80fb      	strh	r3, [r7, #6]
 8001736:	4603      	mov	r3, r0
 8001738:	80bb      	strh	r3, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	807b      	strh	r3, [r7, #2]
 800173e:	4613      	mov	r3, r2
 8001740:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8001742:	88fb      	ldrh	r3, [r7, #6]
 8001744:	4a38      	ldr	r2, [pc, #224]	@ (8001828 <ST7735_FillRectangle+0x104>)
 8001746:	f9b2 2000 	ldrsh.w	r2, [r2]
 800174a:	4293      	cmp	r3, r2
 800174c:	da67      	bge.n	800181e <ST7735_FillRectangle+0xfa>
 800174e:	88bb      	ldrh	r3, [r7, #4]
 8001750:	4a36      	ldr	r2, [pc, #216]	@ (800182c <ST7735_FillRectangle+0x108>)
 8001752:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001756:	4293      	cmp	r3, r2
 8001758:	da61      	bge.n	800181e <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 800175a:	88fa      	ldrh	r2, [r7, #6]
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	4413      	add	r3, r2
 8001760:	4a31      	ldr	r2, [pc, #196]	@ (8001828 <ST7735_FillRectangle+0x104>)
 8001762:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001766:	4293      	cmp	r3, r2
 8001768:	dd06      	ble.n	8001778 <ST7735_FillRectangle+0x54>
 800176a:	4b2f      	ldr	r3, [pc, #188]	@ (8001828 <ST7735_FillRectangle+0x104>)
 800176c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001770:	b29a      	uxth	r2, r3
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8001778:	88ba      	ldrh	r2, [r7, #4]
 800177a:	883b      	ldrh	r3, [r7, #0]
 800177c:	4413      	add	r3, r2
 800177e:	4a2b      	ldr	r2, [pc, #172]	@ (800182c <ST7735_FillRectangle+0x108>)
 8001780:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001784:	4293      	cmp	r3, r2
 8001786:	dd06      	ble.n	8001796 <ST7735_FillRectangle+0x72>
 8001788:	4b28      	ldr	r3, [pc, #160]	@ (800182c <ST7735_FillRectangle+0x108>)
 800178a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178e:	b29a      	uxth	r2, r3
 8001790:	88bb      	ldrh	r3, [r7, #4]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001796:	f7ff fd1d 	bl	80011d4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	b2d8      	uxtb	r0, r3
 800179e:	88bb      	ldrh	r3, [r7, #4]
 80017a0:	b2d9      	uxtb	r1, r3
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	887b      	ldrh	r3, [r7, #2]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b2dc      	uxtb	r4, r3
 80017b2:	88bb      	ldrh	r3, [r7, #4]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	883b      	ldrh	r3, [r7, #0]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	3b01      	subs	r3, #1
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	4622      	mov	r2, r4
 80017c4:	f7ff fdb0 	bl	8001328 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80017c8:	8c3b      	ldrh	r3, [r7, #32]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	733b      	strb	r3, [r7, #12]
 80017d2:	8c3b      	ldrh	r3, [r7, #32]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017de:	4814      	ldr	r0, [pc, #80]	@ (8001830 <ST7735_FillRectangle+0x10c>)
 80017e0:	f003 fba4 	bl	8004f2c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80017e4:	883b      	ldrh	r3, [r7, #0]
 80017e6:	80bb      	strh	r3, [r7, #4]
 80017e8:	e013      	b.n	8001812 <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	80fb      	strh	r3, [r7, #6]
 80017ee:	e00a      	b.n	8001806 <ST7735_FillRectangle+0xe2>
				{

				}
			#endif
			#ifdef WITHOUT_DMA
				HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80017f0:	f107 010c 	add.w	r1, r7, #12
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
 80017f8:	2202      	movs	r2, #2
 80017fa:	480e      	ldr	r0, [pc, #56]	@ (8001834 <ST7735_FillRectangle+0x110>)
 80017fc:	f004 fcbb 	bl	8006176 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	3b01      	subs	r3, #1
 8001804:	80fb      	strh	r3, [r7, #6]
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f1      	bne.n	80017f0 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 800180c:	88bb      	ldrh	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	80bb      	strh	r3, [r7, #4]
 8001812:	88bb      	ldrh	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1e8      	bne.n	80017ea <ST7735_FillRectangle+0xc6>
			#endif
        }
    }

    ST7735_Unselect();
 8001818:	f7ff fce7 	bl	80011ea <ST7735_Unselect>
 800181c:	e000      	b.n	8001820 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 800181e:	bf00      	nop
}
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bd90      	pop	{r4, r7, pc}
 8001826:	bf00      	nop
 8001828:	20000200 	.word	0x20000200
 800182c:	20000202 	.word	0x20000202
 8001830:	48000400 	.word	0x48000400
 8001834:	200003a4 	.word	0x200003a4

08001838 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Interrupts *****************************************************************/
// GPIO Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af04      	add	r7, sp, #16
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	// Interrupt Routine
	switch (GPIO_Pin) {
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001848:	d008      	beq.n	800185c <HAL_GPIO_EXTI_Callback+0x24>
 800184a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800184e:	f300 8087 	bgt.w	8001960 <HAL_GPIO_EXTI_Callback+0x128>
 8001852:	2b02      	cmp	r3, #2
 8001854:	d016      	beq.n	8001884 <HAL_GPIO_EXTI_Callback+0x4c>
 8001856:	2b04      	cmp	r3, #4
 8001858:	d04b      	beq.n	80018f2 <HAL_GPIO_EXTI_Callback+0xba>
		// Console
		sprintf(msg_console, "Taster2 gedrückt! \r\n");
					HAL_UART_Transmit(&huart2, (uint8_t *)msg_console, strlen(msg_console), HAL_MAX_DELAY);
		break;
	default:
		break;
 800185a:	e081      	b.n	8001960 <HAL_GPIO_EXTI_Callback+0x128>
		switch (handler_state) {
 800185c:	4b43      	ldr	r3, [pc, #268]	@ (800196c <HAL_GPIO_EXTI_Callback+0x134>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <HAL_GPIO_EXTI_Callback+0x32>
 8001864:	2b01      	cmp	r3, #1
 8001866:	d004      	beq.n	8001872 <HAL_GPIO_EXTI_Callback+0x3a>
 8001868:	e007      	b.n	800187a <HAL_GPIO_EXTI_Callback+0x42>
			set_handler_state(ADC_Values);
 800186a:	2001      	movs	r0, #1
 800186c:	f001 f9fe 	bl	8002c6c <set_handler_state>
			break;
 8001870:	e007      	b.n	8001882 <HAL_GPIO_EXTI_Callback+0x4a>
			set_handler_state(IDLE);
 8001872:	2000      	movs	r0, #0
 8001874:	f001 f9fa 	bl	8002c6c <set_handler_state>
			break;
 8001878:	e003      	b.n	8001882 <HAL_GPIO_EXTI_Callback+0x4a>
			set_handler_state(IDLE);
 800187a:	2000      	movs	r0, #0
 800187c:	f001 f9f6 	bl	8002c6c <set_handler_state>
			break;
 8001880:	bf00      	nop
		break;
 8001882:	e06e      	b.n	8001962 <HAL_GPIO_EXTI_Callback+0x12a>
		ST7735_FillRectangle(0, 5*px_ofs2, 0, px_ofs2, BLACK);
 8001884:	4b3a      	ldr	r3, [pc, #232]	@ (8001970 <HAL_GPIO_EXTI_Callback+0x138>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	0092      	lsls	r2, r2, #2
 800188c:	4413      	add	r3, r2
 800188e:	b299      	uxth	r1, r3
 8001890:	4b37      	ldr	r3, [pc, #220]	@ (8001970 <HAL_GPIO_EXTI_Callback+0x138>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	2300      	movs	r3, #0
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	4613      	mov	r3, r2
 800189c:	2200      	movs	r2, #0
 800189e:	2000      	movs	r0, #0
 80018a0:	f7ff ff40 	bl	8001724 <ST7735_FillRectangle>
		sprintf(msg_display, "Taster1 gedrueckt!");
 80018a4:	4933      	ldr	r1, [pc, #204]	@ (8001974 <HAL_GPIO_EXTI_Callback+0x13c>)
 80018a6:	4834      	ldr	r0, [pc, #208]	@ (8001978 <HAL_GPIO_EXTI_Callback+0x140>)
 80018a8:	f006 fe96 	bl	80085d8 <siprintf>
		ST7735_WriteString(0, 5*px_ofs2, msg_display, Font_7x10, GREEN, BLACK);
 80018ac:	4b30      	ldr	r3, [pc, #192]	@ (8001970 <HAL_GPIO_EXTI_Callback+0x138>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	0092      	lsls	r2, r2, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	b299      	uxth	r1, r3
 80018b8:	4b30      	ldr	r3, [pc, #192]	@ (800197c <HAL_GPIO_EXTI_Callback+0x144>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	9202      	str	r2, [sp, #8]
 80018be:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80018c2:	9201      	str	r2, [sp, #4]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	9200      	str	r2, [sp, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001978 <HAL_GPIO_EXTI_Callback+0x140>)
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff fed5 	bl	800167c <ST7735_WriteString>
		sprintf(msg_console, "Taster1 gedrückt! \r\n");
 80018d2:	492b      	ldr	r1, [pc, #172]	@ (8001980 <HAL_GPIO_EXTI_Callback+0x148>)
 80018d4:	482b      	ldr	r0, [pc, #172]	@ (8001984 <HAL_GPIO_EXTI_Callback+0x14c>)
 80018d6:	f006 fe7f 	bl	80085d8 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t *)msg_console, strlen(msg_console), HAL_MAX_DELAY);
 80018da:	482a      	ldr	r0, [pc, #168]	@ (8001984 <HAL_GPIO_EXTI_Callback+0x14c>)
 80018dc:	f7fe fcf0 	bl	80002c0 <strlen>
 80018e0:	4603      	mov	r3, r0
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
 80018e8:	4926      	ldr	r1, [pc, #152]	@ (8001984 <HAL_GPIO_EXTI_Callback+0x14c>)
 80018ea:	4827      	ldr	r0, [pc, #156]	@ (8001988 <HAL_GPIO_EXTI_Callback+0x150>)
 80018ec:	f005 faae 	bl	8006e4c <HAL_UART_Transmit>
		break;
 80018f0:	e037      	b.n	8001962 <HAL_GPIO_EXTI_Callback+0x12a>
		ST7735_FillRectangle(0, 5*px_ofs2, 0, px_ofs2, BLACK);
 80018f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <HAL_GPIO_EXTI_Callback+0x138>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	0092      	lsls	r2, r2, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	b299      	uxth	r1, r3
 80018fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001970 <HAL_GPIO_EXTI_Callback+0x138>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	2300      	movs	r3, #0
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	4613      	mov	r3, r2
 800190a:	2200      	movs	r2, #0
 800190c:	2000      	movs	r0, #0
 800190e:	f7ff ff09 	bl	8001724 <ST7735_FillRectangle>
		sprintf(msg_display, "Taster2 gedrueckt!");
 8001912:	491e      	ldr	r1, [pc, #120]	@ (800198c <HAL_GPIO_EXTI_Callback+0x154>)
 8001914:	4818      	ldr	r0, [pc, #96]	@ (8001978 <HAL_GPIO_EXTI_Callback+0x140>)
 8001916:	f006 fe5f 	bl	80085d8 <siprintf>
		ST7735_WriteString(0, 5*px_ofs2, msg_display, Font_7x10, GREEN, BLACK);
 800191a:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <HAL_GPIO_EXTI_Callback+0x138>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	0092      	lsls	r2, r2, #2
 8001922:	4413      	add	r3, r2
 8001924:	b299      	uxth	r1, r3
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <HAL_GPIO_EXTI_Callback+0x144>)
 8001928:	2200      	movs	r2, #0
 800192a:	9202      	str	r2, [sp, #8]
 800192c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001930:	9201      	str	r2, [sp, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	9200      	str	r2, [sp, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0f      	ldr	r2, [pc, #60]	@ (8001978 <HAL_GPIO_EXTI_Callback+0x140>)
 800193a:	2000      	movs	r0, #0
 800193c:	f7ff fe9e 	bl	800167c <ST7735_WriteString>
		sprintf(msg_console, "Taster2 gedrückt! \r\n");
 8001940:	4913      	ldr	r1, [pc, #76]	@ (8001990 <HAL_GPIO_EXTI_Callback+0x158>)
 8001942:	4810      	ldr	r0, [pc, #64]	@ (8001984 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001944:	f006 fe48 	bl	80085d8 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t *)msg_console, strlen(msg_console), HAL_MAX_DELAY);
 8001948:	480e      	ldr	r0, [pc, #56]	@ (8001984 <HAL_GPIO_EXTI_Callback+0x14c>)
 800194a:	f7fe fcb9 	bl	80002c0 <strlen>
 800194e:	4603      	mov	r3, r0
 8001950:	b29a      	uxth	r2, r3
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	490b      	ldr	r1, [pc, #44]	@ (8001984 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001958:	480b      	ldr	r0, [pc, #44]	@ (8001988 <HAL_GPIO_EXTI_Callback+0x150>)
 800195a:	f005 fa77 	bl	8006e4c <HAL_UART_Transmit>
		break;
 800195e:	e000      	b.n	8001962 <HAL_GPIO_EXTI_Callback+0x12a>
		break;
 8001960:	bf00      	nop
	}
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200005b0 	.word	0x200005b0
 8001970:	20000008 	.word	0x20000008
 8001974:	0800a848 	.word	0x0800a848
 8001978:	20000594 	.word	0x20000594
 800197c:	20000000 	.word	0x20000000
 8001980:	0800a85c 	.word	0x0800a85c
 8001984:	20000544 	.word	0x20000544
 8001988:	200004a0 	.word	0x200004a0
 800198c:	0800a874 	.word	0x0800a874
 8001990:	0800a888 	.word	0x0800a888

08001994 <HAL_TIM_PeriodElapsedCallback>:

// Timer timeout Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001998:	b08a      	sub	sp, #40	@ 0x28
 800199a:	af06      	add	r7, sp, #24
 800199c:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800199e:	b672      	cpsid	i
}
 80019a0:	bf00      	nop

	__disable_irq();
	// Überprüfe welcher Timer diese callback Funktion aufruft
	// time_val um 100ms inkrementieren
	if (htim == &htim16) {
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a8a      	ldr	r2, [pc, #552]	@ (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d10c      	bne.n	80019c4 <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 80019aa:	2108      	movs	r1, #8
 80019ac:	4889      	ldr	r0, [pc, #548]	@ (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80019ae:	f003 fad5 	bl	8004f5c <HAL_GPIO_TogglePin>
		if (handler_state == ADC_Values) {
 80019b2:	4b89      	ldr	r3, [pc, #548]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	f040 8102 	bne.w	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x22c>
			inc_handler_currentTime(100);
 80019bc:	2064      	movs	r0, #100	@ 0x64
 80019be:	f001 f973 	bl	8002ca8 <inc_handler_currentTime>
 80019c2:	e0fd      	b.n	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x22c>
		}
	}
	// Display und Konsole alle 0.5s aktualisieren
	else if(htim == &htim17){
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a85      	ldr	r2, [pc, #532]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x248>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	f040 80f9 	bne.w	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x22c>
		switch (handler_state) {
 80019ce:	4b82      	ldr	r3, [pc, #520]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <HAL_TIM_PeriodElapsedCallback+0x48>
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d046      	beq.n	8001a68 <HAL_TIM_PeriodElapsedCallback+0xd4>
 80019da:	e0ed      	b.n	8001bb8 <HAL_TIM_PeriodElapsedCallback+0x224>
		case IDLE:
			ST7735_WriteString(0, px_ofs2, "Poti1: xx", Font_7x10, GREEN, BLACK);
 80019dc:	4b80      	ldr	r3, [pc, #512]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	4b80      	ldr	r3, [pc, #512]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	9202      	str	r2, [sp, #8]
 80019e8:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80019ec:	9201      	str	r2, [sp, #4]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	9200      	str	r2, [sp, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a7c      	ldr	r2, [pc, #496]	@ (8001be8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80019f6:	2000      	movs	r0, #0
 80019f8:	f7ff fe40 	bl	800167c <ST7735_WriteString>
			ST7735_WriteString(0, 2*px_ofs2, "Poti2: xx", Font_7x10, GREEN, BLACK);
 80019fc:	4b78      	ldr	r3, [pc, #480]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	b299      	uxth	r1, r3
 8001a04:	4b77      	ldr	r3, [pc, #476]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	9202      	str	r2, [sp, #8]
 8001a0a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001a0e:	9201      	str	r2, [sp, #4]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	9200      	str	r2, [sp, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a75      	ldr	r2, [pc, #468]	@ (8001bec <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f7ff fe2f 	bl	800167c <ST7735_WriteString>
			ST7735_WriteString(0, 3*px_ofs2, "BNC1: xx", Font_7x10, GREEN, BLACK);
 8001a1e:	4b70      	ldr	r3, [pc, #448]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	0052      	lsls	r2, r2, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	b299      	uxth	r1, r3
 8001a2a:	4b6e      	ldr	r3, [pc, #440]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	9202      	str	r2, [sp, #8]
 8001a30:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001a34:	9201      	str	r2, [sp, #4]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	9200      	str	r2, [sp, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a6c      	ldr	r2, [pc, #432]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff fe1c 	bl	800167c <ST7735_WriteString>
			ST7735_WriteString(0, 4*px_ofs2, "BNC2: xx", Font_7x10, GREEN, BLACK);
 8001a44:	4b66      	ldr	r3, [pc, #408]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	b299      	uxth	r1, r3
 8001a4c:	4b65      	ldr	r3, [pc, #404]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	9202      	str	r2, [sp, #8]
 8001a52:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001a56:	9201      	str	r2, [sp, #4]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	9200      	str	r2, [sp, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a65      	ldr	r2, [pc, #404]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7ff fe0b 	bl	800167c <ST7735_WriteString>
			break;
 8001a66:	e0ab      	b.n	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x22c>
		case ADC_Values:
			// Display
			adc_values* ptr = get_adc_values();
 8001a68:	f001 f932 	bl	8002cd0 <get_adc_values>
 8001a6c:	60f8      	str	r0, [r7, #12]
			sprintf(msg_display, "Poti1: %2.2fV", ptr->poti1_Vf);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd90 	bl	8000598 <__aeabi_f2d>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	495e      	ldr	r1, [pc, #376]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001a7e:	485f      	ldr	r0, [pc, #380]	@ (8001bfc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001a80:	f006 fdaa 	bl	80085d8 <siprintf>
			ST7735_WriteString(0, px_ofs2, msg_display, Font_7x10, GREEN, BLACK);
 8001a84:	4b56      	ldr	r3, [pc, #344]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4b56      	ldr	r3, [pc, #344]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	9202      	str	r2, [sp, #8]
 8001a90:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001a94:	9201      	str	r2, [sp, #4]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	9200      	str	r2, [sp, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a57      	ldr	r2, [pc, #348]	@ (8001bfc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f7ff fdec 	bl	800167c <ST7735_WriteString>
			sprintf(msg_display, "Poti2: %2.2fV", ptr->poti2_Vf);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd75 	bl	8000598 <__aeabi_f2d>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4953      	ldr	r1, [pc, #332]	@ (8001c00 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001ab4:	4851      	ldr	r0, [pc, #324]	@ (8001bfc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001ab6:	f006 fd8f 	bl	80085d8 <siprintf>
			ST7735_WriteString(0, 2*px_ofs2, msg_display, Font_7x10, GREEN, BLACK);
 8001aba:	4b49      	ldr	r3, [pc, #292]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	b299      	uxth	r1, r3
 8001ac2:	4b48      	ldr	r3, [pc, #288]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	9202      	str	r2, [sp, #8]
 8001ac8:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001acc:	9201      	str	r2, [sp, #4]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	9200      	str	r2, [sp, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a49      	ldr	r2, [pc, #292]	@ (8001bfc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff fdd0 	bl	800167c <ST7735_WriteString>
			sprintf(msg_display, "BNC1:  %2.2fV", ptr->bnc1_Vf);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fd59 	bl	8000598 <__aeabi_f2d>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4946      	ldr	r1, [pc, #280]	@ (8001c04 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001aec:	4843      	ldr	r0, [pc, #268]	@ (8001bfc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001aee:	f006 fd73 	bl	80085d8 <siprintf>
			ST7735_WriteString(0, 3*px_ofs2, msg_display, Font_7x10, GREEN, BLACK);
 8001af2:	4b3b      	ldr	r3, [pc, #236]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	0052      	lsls	r2, r2, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	b299      	uxth	r1, r3
 8001afe:	4b39      	ldr	r3, [pc, #228]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	9202      	str	r2, [sp, #8]
 8001b04:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001b08:	9201      	str	r2, [sp, #4]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	9200      	str	r2, [sp, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a3a      	ldr	r2, [pc, #232]	@ (8001bfc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001b12:	2000      	movs	r0, #0
 8001b14:	f7ff fdb2 	bl	800167c <ST7735_WriteString>
			sprintf(msg_display, "BNC2:  %2.2fV", ptr->bnc2_Vf);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fd3b 	bl	8000598 <__aeabi_f2d>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4938      	ldr	r1, [pc, #224]	@ (8001c08 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b28:	4834      	ldr	r0, [pc, #208]	@ (8001bfc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001b2a:	f006 fd55 	bl	80085d8 <siprintf>
			ST7735_WriteString(0, 4*px_ofs2, msg_display, Font_7x10, GREEN, BLACK);
 8001b2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	b299      	uxth	r1, r3
 8001b36:	4b2b      	ldr	r3, [pc, #172]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	9202      	str	r2, [sp, #8]
 8001b3c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001b40:	9201      	str	r2, [sp, #4]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	9200      	str	r2, [sp, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a2c      	ldr	r2, [pc, #176]	@ (8001bfc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff fd96 	bl	800167c <ST7735_WriteString>
			// Console
			sprintf(msg_console, "Poti1: %2.2fV | Poti2: %2.2fV | bnc1: %2.2fV | bnc2: %2.2fV \r\n",
					ptr->poti1_Vf, ptr->poti2_Vf, ptr->bnc1_Vf, ptr->bnc2_Vf);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
			sprintf(msg_console, "Poti1: %2.2fV | Poti2: %2.2fV | bnc1: %2.2fV | bnc2: %2.2fV \r\n",
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fd1f 	bl	8000598 <__aeabi_f2d>
 8001b5a:	4682      	mov	sl, r0
 8001b5c:	468b      	mov	fp, r1
					ptr->poti1_Vf, ptr->poti2_Vf, ptr->bnc1_Vf, ptr->bnc2_Vf);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	685b      	ldr	r3, [r3, #4]
			sprintf(msg_console, "Poti1: %2.2fV | Poti2: %2.2fV | bnc1: %2.2fV | bnc2: %2.2fV \r\n",
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fd18 	bl	8000598 <__aeabi_f2d>
 8001b68:	4604      	mov	r4, r0
 8001b6a:	460d      	mov	r5, r1
					ptr->poti1_Vf, ptr->poti2_Vf, ptr->bnc1_Vf, ptr->bnc2_Vf);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	689b      	ldr	r3, [r3, #8]
			sprintf(msg_console, "Poti1: %2.2fV | Poti2: %2.2fV | bnc1: %2.2fV | bnc2: %2.2fV \r\n",
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fd11 	bl	8000598 <__aeabi_f2d>
 8001b76:	4680      	mov	r8, r0
 8001b78:	4689      	mov	r9, r1
					ptr->poti1_Vf, ptr->poti2_Vf, ptr->bnc1_Vf, ptr->bnc2_Vf);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	68db      	ldr	r3, [r3, #12]
			sprintf(msg_console, "Poti1: %2.2fV | Poti2: %2.2fV | bnc1: %2.2fV | bnc2: %2.2fV \r\n",
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fd0a 	bl	8000598 <__aeabi_f2d>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b8c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001b90:	e9cd 4500 	strd	r4, r5, [sp]
 8001b94:	4652      	mov	r2, sl
 8001b96:	465b      	mov	r3, fp
 8001b98:	491c      	ldr	r1, [pc, #112]	@ (8001c0c <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b9a:	481d      	ldr	r0, [pc, #116]	@ (8001c10 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001b9c:	f006 fd1c 	bl	80085d8 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)msg_console, strlen(msg_console), HAL_MAX_DELAY);
 8001ba0:	481b      	ldr	r0, [pc, #108]	@ (8001c10 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ba2:	f7fe fb8d 	bl	80002c0 <strlen>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	4918      	ldr	r1, [pc, #96]	@ (8001c10 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001bb0:	4818      	ldr	r0, [pc, #96]	@ (8001c14 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001bb2:	f005 f94b 	bl	8006e4c <HAL_UART_Transmit>
			break;
 8001bb6:	e003      	b.n	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x22c>
		default:
			set_handler_state(IDLE);
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f001 f857 	bl	8002c6c <set_handler_state>
			break;
 8001bbe:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8001bc0:	b662      	cpsie	i
}
 8001bc2:	bf00      	nop
		}

	}
	__enable_irq();
}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000408 	.word	0x20000408
 8001bd4:	48000800 	.word	0x48000800
 8001bd8:	200005b0 	.word	0x200005b0
 8001bdc:	20000454 	.word	0x20000454
 8001be0:	20000008 	.word	0x20000008
 8001be4:	20000000 	.word	0x20000000
 8001be8:	0800a8a0 	.word	0x0800a8a0
 8001bec:	0800a8ac 	.word	0x0800a8ac
 8001bf0:	0800a8b8 	.word	0x0800a8b8
 8001bf4:	0800a8c4 	.word	0x0800a8c4
 8001bf8:	0800a8d0 	.word	0x0800a8d0
 8001bfc:	20000594 	.word	0x20000594
 8001c00:	0800a8e0 	.word	0x0800a8e0
 8001c04:	0800a8f0 	.word	0x0800a8f0
 8001c08:	0800a900 	.word	0x0800a900
 8001c0c:	0800a910 	.word	0x0800a910
 8001c10:	20000544 	.word	0x20000544
 8001c14:	200004a0 	.word	0x200004a0

08001c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c1c:	f001 f88b 	bl	8002d36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c20:	f000 f834 	bl	8001c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c24:	f000 fa94 	bl	8002150 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c28:	f000 fa54 	bl	80020d4 <MX_DMA_Init>
  MX_SPI1_Init();
 8001c2c:	f000 f978 	bl	8001f20 <MX_SPI1_Init>
  MX_TIM16_Init();
 8001c30:	f000 f9b4 	bl	8001f9c <MX_TIM16_Init>
  MX_ADC1_Init();
 8001c34:	f000 f876 	bl	8001d24 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001c38:	f000 fa00 	bl	800203c <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8001c3c:	f000 f9d6 	bl	8001fec <MX_TIM17_Init>
  MX_ADC2_Init();
 8001c40:	f000 f908 	bl	8001e54 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

	// Display Init
	ST7735_Init(1);
 8001c44:	2001      	movs	r0, #1
 8001c46:	f7ff fbb7 	bl	80013b8 <ST7735_Init>
	fillScreen(BLACK);
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f7ff faa8 	bl	80011a0 <fillScreen>

	// Start Timers im Interrupt Modus
	HAL_TIM_Base_Start_IT(&htim16);
 8001c50:	4809      	ldr	r0, [pc, #36]	@ (8001c78 <main+0x60>)
 8001c52:	f004 fdc1 	bl	80067d8 <HAL_TIM_Base_Start_IT>

	// Start ADC1 & ADC2 mit DMA transfer
	HAL_ADC_Start_DMA(&hadc1, AD_RES_BUFFER_ADC1, 3);
 8001c56:	2203      	movs	r2, #3
 8001c58:	4908      	ldr	r1, [pc, #32]	@ (8001c7c <main+0x64>)
 8001c5a:	4809      	ldr	r0, [pc, #36]	@ (8001c80 <main+0x68>)
 8001c5c:	f001 fcd8 	bl	8003610 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, AD_RES_BUFFER_ADC2, 1);
 8001c60:	2201      	movs	r2, #1
 8001c62:	4908      	ldr	r1, [pc, #32]	@ (8001c84 <main+0x6c>)
 8001c64:	4808      	ldr	r0, [pc, #32]	@ (8001c88 <main+0x70>)
 8001c66:	f001 fcd3 	bl	8003610 <HAL_ADC_Start_DMA>

	// Set first State
	set_handler_state(IDLE);
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f000 fffe 	bl	8002c6c <set_handler_state>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Run StateMachine
		handler_task();
 8001c70:	f000 fff0 	bl	8002c54 <handler_task>
 8001c74:	e7fc      	b.n	8001c70 <main+0x58>
 8001c76:	bf00      	nop
 8001c78:	20000408 	.word	0x20000408
 8001c7c:	20000534 	.word	0x20000534
 8001c80:	2000020c 	.word	0x2000020c
 8001c84:	20000540 	.word	0x20000540
 8001c88:	20000278 	.word	0x20000278

08001c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b094      	sub	sp, #80	@ 0x50
 8001c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c92:	f107 0318 	add.w	r3, r7, #24
 8001c96:	2238      	movs	r2, #56	@ 0x38
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f006 fcff 	bl	800869e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001cb2:	f003 f985 	bl	8004fc0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cc0:	2340      	movs	r3, #64	@ 0x40
 8001cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001ccc:	2304      	movs	r3, #4
 8001cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001cd0:	234b      	movs	r3, #75	@ 0x4b
 8001cd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce0:	f107 0318 	add.w	r3, r7, #24
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f003 fa1f 	bl	8005128 <HAL_RCC_OscConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001cf0:	f000 fae8 	bl	80022c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf4:	230f      	movs	r3, #15
 8001cf6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	2104      	movs	r1, #4
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f003 fd1d 	bl	800574c <HAL_RCC_ClockConfig>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001d18:	f000 fad4 	bl	80022c4 <Error_Handler>
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3750      	adds	r7, #80	@ 0x50
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08c      	sub	sp, #48	@ 0x30
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	2220      	movs	r2, #32
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f006 fcae 	bl	800869e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d42:	4b40      	ldr	r3, [pc, #256]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001d44:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001d48:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001d4c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d52:	4b3c      	ldr	r3, [pc, #240]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d58:	4b3a      	ldr	r3, [pc, #232]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001d5e:	4b39      	ldr	r3, [pc, #228]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d64:	4b37      	ldr	r3, [pc, #220]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d6a:	4b36      	ldr	r3, [pc, #216]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d70:	4b34      	ldr	r3, [pc, #208]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d76:	4b33      	ldr	r3, [pc, #204]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001d7c:	4b31      	ldr	r3, [pc, #196]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001d7e:	2203      	movs	r2, #3
 8001d80:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d82:	4b30      	ldr	r3, [pc, #192]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d90:	4b2c      	ldr	r3, [pc, #176]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d96:	4b2b      	ldr	r3, [pc, #172]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d9e:	4b29      	ldr	r3, [pc, #164]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001da4:	4b27      	ldr	r3, [pc, #156]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dac:	4825      	ldr	r0, [pc, #148]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001dae:	f001 fa73 	bl	8003298 <HAL_ADC_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001db8:	f000 fa84 	bl	80022c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001dc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	481f      	ldr	r0, [pc, #124]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001dc8:	f002 faa4 	bl	8004314 <HAL_ADCEx_MultiModeConfigChannel>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001dd2:	f000 fa77 	bl	80022c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e48 <MX_ADC1_Init+0x124>)
 8001dd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dda:	2306      	movs	r3, #6
 8001ddc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001dde:	2307      	movs	r3, #7
 8001de0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001de2:	237f      	movs	r3, #127	@ 0x7f
 8001de4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001de6:	2304      	movs	r3, #4
 8001de8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	4619      	mov	r1, r3
 8001df2:	4814      	ldr	r0, [pc, #80]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001df4:	f001 fcfe 	bl	80037f4 <HAL_ADC_ConfigChannel>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001dfe:	f000 fa61 	bl	80022c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <MX_ADC1_Init+0x128>)
 8001e04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001e06:	230c      	movs	r3, #12
 8001e08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	480d      	ldr	r0, [pc, #52]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001e10:	f001 fcf0 	bl	80037f4 <HAL_ADC_ConfigChannel>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001e1a:	f000 fa53 	bl	80022c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <MX_ADC1_Init+0x12c>)
 8001e20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001e22:	2312      	movs	r3, #18
 8001e24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4806      	ldr	r0, [pc, #24]	@ (8001e44 <MX_ADC1_Init+0x120>)
 8001e2c:	f001 fce2 	bl	80037f4 <HAL_ADC_ConfigChannel>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001e36:	f000 fa45 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	3730      	adds	r7, #48	@ 0x30
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000020c 	.word	0x2000020c
 8001e48:	04300002 	.word	0x04300002
 8001e4c:	08600004 	.word	0x08600004
 8001e50:	3ef08000 	.word	0x3ef08000

08001e54 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f006 fc1c 	bl	800869e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001e66:	4b2b      	ldr	r3, [pc, #172]	@ (8001f14 <MX_ADC2_Init+0xc0>)
 8001e68:	4a2b      	ldr	r2, [pc, #172]	@ (8001f18 <MX_ADC2_Init+0xc4>)
 8001e6a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e6c:	4b29      	ldr	r3, [pc, #164]	@ (8001f14 <MX_ADC2_Init+0xc0>)
 8001e6e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e72:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001e74:	4b27      	ldr	r3, [pc, #156]	@ (8001f14 <MX_ADC2_Init+0xc0>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e7a:	4b26      	ldr	r3, [pc, #152]	@ (8001f14 <MX_ADC2_Init+0xc0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001e80:	4b24      	ldr	r3, [pc, #144]	@ (8001f14 <MX_ADC2_Init+0xc0>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e86:	4b23      	ldr	r3, [pc, #140]	@ (8001f14 <MX_ADC2_Init+0xc0>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001e8c:	4b21      	ldr	r3, [pc, #132]	@ (8001f14 <MX_ADC2_Init+0xc0>)
 8001e8e:	2208      	movs	r2, #8
 8001e90:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001e92:	4b20      	ldr	r3, [pc, #128]	@ (8001f14 <MX_ADC2_Init+0xc0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001e98:	4b1e      	ldr	r3, [pc, #120]	@ (8001f14 <MX_ADC2_Init+0xc0>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f14 <MX_ADC2_Init+0xc0>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f14 <MX_ADC2_Init+0xc0>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eac:	4b19      	ldr	r3, [pc, #100]	@ (8001f14 <MX_ADC2_Init+0xc0>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eb2:	4b18      	ldr	r3, [pc, #96]	@ (8001f14 <MX_ADC2_Init+0xc0>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001eb8:	4b16      	ldr	r3, [pc, #88]	@ (8001f14 <MX_ADC2_Init+0xc0>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ec0:	4b14      	ldr	r3, [pc, #80]	@ (8001f14 <MX_ADC2_Init+0xc0>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001ec6:	4b13      	ldr	r3, [pc, #76]	@ (8001f14 <MX_ADC2_Init+0xc0>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001ece:	4811      	ldr	r0, [pc, #68]	@ (8001f14 <MX_ADC2_Init+0xc0>)
 8001ed0:	f001 f9e2 	bl	8003298 <HAL_ADC_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001eda:	f000 f9f3 	bl	80022c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001ede:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <MX_ADC2_Init+0xc8>)
 8001ee0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ee2:	2306      	movs	r3, #6
 8001ee4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001ee6:	2307      	movs	r3, #7
 8001ee8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001eea:	237f      	movs	r3, #127	@ 0x7f
 8001eec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001eee:	2304      	movs	r3, #4
 8001ef0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ef6:	463b      	mov	r3, r7
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4806      	ldr	r0, [pc, #24]	@ (8001f14 <MX_ADC2_Init+0xc0>)
 8001efc:	f001 fc7a 	bl	80037f4 <HAL_ADC_ConfigChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001f06:	f000 f9dd 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001f0a:	bf00      	nop
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000278 	.word	0x20000278
 8001f18:	50000100 	.word	0x50000100
 8001f1c:	47520000 	.word	0x47520000

08001f20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f24:	4b1b      	ldr	r3, [pc, #108]	@ (8001f94 <MX_SPI1_Init+0x74>)
 8001f26:	4a1c      	ldr	r2, [pc, #112]	@ (8001f98 <MX_SPI1_Init+0x78>)
 8001f28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f94 <MX_SPI1_Init+0x74>)
 8001f2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f32:	4b18      	ldr	r3, [pc, #96]	@ (8001f94 <MX_SPI1_Init+0x74>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f38:	4b16      	ldr	r3, [pc, #88]	@ (8001f94 <MX_SPI1_Init+0x74>)
 8001f3a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001f3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f40:	4b14      	ldr	r3, [pc, #80]	@ (8001f94 <MX_SPI1_Init+0x74>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f46:	4b13      	ldr	r3, [pc, #76]	@ (8001f94 <MX_SPI1_Init+0x74>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <MX_SPI1_Init+0x74>)
 8001f4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f52:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f54:	4b0f      	ldr	r3, [pc, #60]	@ (8001f94 <MX_SPI1_Init+0x74>)
 8001f56:	2210      	movs	r2, #16
 8001f58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f94 <MX_SPI1_Init+0x74>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <MX_SPI1_Init+0x74>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <MX_SPI1_Init+0x74>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <MX_SPI1_Init+0x74>)
 8001f6e:	2207      	movs	r2, #7
 8001f70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f72:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <MX_SPI1_Init+0x74>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f78:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <MX_SPI1_Init+0x74>)
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f7e:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <MX_SPI1_Init+0x74>)
 8001f80:	f004 f84e 	bl	8006020 <HAL_SPI_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f8a:	f000 f99b 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200003a4 	.word	0x200003a4
 8001f98:	40013000 	.word	0x40013000

08001f9c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001fa0:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <MX_TIM16_Init+0x48>)
 8001fa2:	4a11      	ldr	r2, [pc, #68]	@ (8001fe8 <MX_TIM16_Init+0x4c>)
 8001fa4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 15000 - 1;
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <MX_TIM16_Init+0x48>)
 8001fa8:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8001fac:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fae:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <MX_TIM16_Init+0x48>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <MX_TIM16_Init+0x48>)
 8001fb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fba:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbc:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <MX_TIM16_Init+0x48>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001fc2:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <MX_TIM16_Init+0x48>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc8:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <MX_TIM16_Init+0x48>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001fce:	4805      	ldr	r0, [pc, #20]	@ (8001fe4 <MX_TIM16_Init+0x48>)
 8001fd0:	f004 fbaa 	bl	8006728 <HAL_TIM_Base_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001fda:	f000 f973 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000408 	.word	0x20000408
 8001fe8:	40014400 	.word	0x40014400

08001fec <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001ff0:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <MX_TIM17_Init+0x48>)
 8001ff2:	4a11      	ldr	r2, [pc, #68]	@ (8002038 <MX_TIM17_Init+0x4c>)
 8001ff4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 15000-1;
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8002034 <MX_TIM17_Init+0x48>)
 8001ff8:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8001ffc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8002034 <MX_TIM17_Init+0x48>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 5000;
 8002004:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <MX_TIM17_Init+0x48>)
 8002006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200c:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <MX_TIM17_Init+0x48>)
 800200e:	2200      	movs	r2, #0
 8002010:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002012:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <MX_TIM17_Init+0x48>)
 8002014:	2200      	movs	r2, #0
 8002016:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002018:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <MX_TIM17_Init+0x48>)
 800201a:	2200      	movs	r2, #0
 800201c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800201e:	4805      	ldr	r0, [pc, #20]	@ (8002034 <MX_TIM17_Init+0x48>)
 8002020:	f004 fb82 	bl	8006728 <HAL_TIM_Base_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 800202a:	f000 f94b 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000454 	.word	0x20000454
 8002038:	40014800 	.word	0x40014800

0800203c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002040:	4b22      	ldr	r3, [pc, #136]	@ (80020cc <MX_USART2_UART_Init+0x90>)
 8002042:	4a23      	ldr	r2, [pc, #140]	@ (80020d0 <MX_USART2_UART_Init+0x94>)
 8002044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002046:	4b21      	ldr	r3, [pc, #132]	@ (80020cc <MX_USART2_UART_Init+0x90>)
 8002048:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800204c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	4b1f      	ldr	r3, [pc, #124]	@ (80020cc <MX_USART2_UART_Init+0x90>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002054:	4b1d      	ldr	r3, [pc, #116]	@ (80020cc <MX_USART2_UART_Init+0x90>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800205a:	4b1c      	ldr	r3, [pc, #112]	@ (80020cc <MX_USART2_UART_Init+0x90>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002060:	4b1a      	ldr	r3, [pc, #104]	@ (80020cc <MX_USART2_UART_Init+0x90>)
 8002062:	220c      	movs	r2, #12
 8002064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002066:	4b19      	ldr	r3, [pc, #100]	@ (80020cc <MX_USART2_UART_Init+0x90>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	4b17      	ldr	r3, [pc, #92]	@ (80020cc <MX_USART2_UART_Init+0x90>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002072:	4b16      	ldr	r3, [pc, #88]	@ (80020cc <MX_USART2_UART_Init+0x90>)
 8002074:	2200      	movs	r2, #0
 8002076:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002078:	4b14      	ldr	r3, [pc, #80]	@ (80020cc <MX_USART2_UART_Init+0x90>)
 800207a:	2200      	movs	r2, #0
 800207c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800207e:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <MX_USART2_UART_Init+0x90>)
 8002080:	2200      	movs	r2, #0
 8002082:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002084:	4811      	ldr	r0, [pc, #68]	@ (80020cc <MX_USART2_UART_Init+0x90>)
 8002086:	f004 fe91 	bl	8006dac <HAL_UART_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002090:	f000 f918 	bl	80022c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002094:	2100      	movs	r1, #0
 8002096:	480d      	ldr	r0, [pc, #52]	@ (80020cc <MX_USART2_UART_Init+0x90>)
 8002098:	f005 fcba 	bl	8007a10 <HAL_UARTEx_SetTxFifoThreshold>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80020a2:	f000 f90f 	bl	80022c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020a6:	2100      	movs	r1, #0
 80020a8:	4808      	ldr	r0, [pc, #32]	@ (80020cc <MX_USART2_UART_Init+0x90>)
 80020aa:	f005 fcef 	bl	8007a8c <HAL_UARTEx_SetRxFifoThreshold>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80020b4:	f000 f906 	bl	80022c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80020b8:	4804      	ldr	r0, [pc, #16]	@ (80020cc <MX_USART2_UART_Init+0x90>)
 80020ba:	f005 fc70 	bl	800799e <HAL_UARTEx_DisableFifoMode>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80020c4:	f000 f8fe 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	200004a0 	.word	0x200004a0
 80020d0:	40004400 	.word	0x40004400

080020d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80020da:	4b1c      	ldr	r3, [pc, #112]	@ (800214c <MX_DMA_Init+0x78>)
 80020dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020de:	4a1b      	ldr	r2, [pc, #108]	@ (800214c <MX_DMA_Init+0x78>)
 80020e0:	f043 0304 	orr.w	r3, r3, #4
 80020e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80020e6:	4b19      	ldr	r3, [pc, #100]	@ (800214c <MX_DMA_Init+0x78>)
 80020e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020f2:	4b16      	ldr	r3, [pc, #88]	@ (800214c <MX_DMA_Init+0x78>)
 80020f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f6:	4a15      	ldr	r2, [pc, #84]	@ (800214c <MX_DMA_Init+0x78>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80020fe:	4b13      	ldr	r3, [pc, #76]	@ (800214c <MX_DMA_Init+0x78>)
 8002100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <MX_DMA_Init+0x78>)
 800210c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800210e:	4a0f      	ldr	r2, [pc, #60]	@ (800214c <MX_DMA_Init+0x78>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	6493      	str	r3, [r2, #72]	@ 0x48
 8002116:	4b0d      	ldr	r3, [pc, #52]	@ (800214c <MX_DMA_Init+0x78>)
 8002118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002122:	2200      	movs	r2, #0
 8002124:	2100      	movs	r1, #0
 8002126:	200b      	movs	r0, #11
 8002128:	f002 fad7 	bl	80046da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800212c:	200b      	movs	r0, #11
 800212e:	f002 faee 	bl	800470e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2100      	movs	r1, #0
 8002136:	2038      	movs	r0, #56	@ 0x38
 8002138:	f002 facf 	bl	80046da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800213c:	2038      	movs	r0, #56	@ 0x38
 800213e:	f002 fae6 	bl	800470e <HAL_NVIC_EnableIRQ>

}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000

08002150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	@ 0x28
 8002154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
 8002164:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002166:	4b54      	ldr	r3, [pc, #336]	@ (80022b8 <MX_GPIO_Init+0x168>)
 8002168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216a:	4a53      	ldr	r2, [pc, #332]	@ (80022b8 <MX_GPIO_Init+0x168>)
 800216c:	f043 0304 	orr.w	r3, r3, #4
 8002170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002172:	4b51      	ldr	r3, [pc, #324]	@ (80022b8 <MX_GPIO_Init+0x168>)
 8002174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800217e:	4b4e      	ldr	r3, [pc, #312]	@ (80022b8 <MX_GPIO_Init+0x168>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002182:	4a4d      	ldr	r2, [pc, #308]	@ (80022b8 <MX_GPIO_Init+0x168>)
 8002184:	f043 0320 	orr.w	r3, r3, #32
 8002188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800218a:	4b4b      	ldr	r3, [pc, #300]	@ (80022b8 <MX_GPIO_Init+0x168>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	4b48      	ldr	r3, [pc, #288]	@ (80022b8 <MX_GPIO_Init+0x168>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219a:	4a47      	ldr	r2, [pc, #284]	@ (80022b8 <MX_GPIO_Init+0x168>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021a2:	4b45      	ldr	r3, [pc, #276]	@ (80022b8 <MX_GPIO_Init+0x168>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ae:	4b42      	ldr	r3, [pc, #264]	@ (80022b8 <MX_GPIO_Init+0x168>)
 80021b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b2:	4a41      	ldr	r2, [pc, #260]	@ (80022b8 <MX_GPIO_Init+0x168>)
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ba:	4b3f      	ldr	r3, [pc, #252]	@ (80022b8 <MX_GPIO_Init+0x168>)
 80021bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Stg2_NMOS1_Pin|GPIO_PIN_3|GPIO_PIN_4|Stg2_NMOS4_Pin
 80021c6:	2200      	movs	r2, #0
 80021c8:	f640 41fc 	movw	r1, #3324	@ 0xcfc
 80021cc:	483b      	ldr	r0, [pc, #236]	@ (80022bc <MX_GPIO_Init+0x16c>)
 80021ce:	f002 fead 	bl	8004f2c <HAL_GPIO_WritePin>
                          |Stg3_NMOS1_Pin|Stg3_NMOS3_Pin|Stg3_NMOS2_Pin|Stg3_NMOS4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPI1_RST_Pin|Stg1_NMOS2_Pin|Stg1_NMOS1_Pin
 80021d2:	2200      	movs	r2, #0
 80021d4:	f648 31e0 	movw	r1, #35808	@ 0x8be0
 80021d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021dc:	f002 fea6 	bl	8004f2c <HAL_GPIO_WritePin>
                          |Stg1_NMOS3_Pin|Stg2_NMOS3_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_DC_Pin|Stg1_NMOS4_Pin|Stg2_NMOS2_Pin, GPIO_PIN_RESET);
 80021e0:	2200      	movs	r2, #0
 80021e2:	f44f 418c 	mov.w	r1, #17920	@ 0x4600
 80021e6:	4836      	ldr	r0, [pc, #216]	@ (80022c0 <MX_GPIO_Init+0x170>)
 80021e8:	f002 fea0 	bl	8004f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_EXTI13_Pin */
  GPIO_InitStruct.Pin = B1_EXTI13_Pin;
 80021ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	4619      	mov	r1, r3
 8002202:	482e      	ldr	r0, [pc, #184]	@ (80022bc <MX_GPIO_Init+0x16c>)
 8002204:	f002 fd10 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : Stg2_NMOS1_Pin PC3 PC4 Stg2_NMOS4_Pin
                           Stg3_NMOS1_Pin Stg3_NMOS3_Pin Stg3_NMOS2_Pin Stg3_NMOS4_Pin */
  GPIO_InitStruct.Pin = Stg2_NMOS1_Pin|GPIO_PIN_3|GPIO_PIN_4|Stg2_NMOS4_Pin
 8002208:	f640 43fc 	movw	r3, #3324	@ 0xcfc
 800220c:	617b      	str	r3, [r7, #20]
                          |Stg3_NMOS1_Pin|Stg3_NMOS3_Pin|Stg3_NMOS2_Pin|Stg3_NMOS4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220e:	2301      	movs	r3, #1
 8002210:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	4619      	mov	r1, r3
 8002220:	4826      	ldr	r0, [pc, #152]	@ (80022bc <MX_GPIO_Init+0x16c>)
 8002222:	f002 fd01 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SPI1_RST_Pin Stg1_NMOS2_Pin Stg1_NMOS1_Pin
                           Stg1_NMOS3_Pin Stg2_NMOS3_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI1_RST_Pin|Stg1_NMOS2_Pin|Stg1_NMOS1_Pin
 8002226:	f648 33e0 	movw	r3, #35808	@ 0x8be0
 800222a:	617b      	str	r3, [r7, #20]
                          |Stg1_NMOS3_Pin|Stg2_NMOS3_Pin|SPI1_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222c:	2301      	movs	r3, #1
 800222e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4619      	mov	r1, r3
 800223e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002242:	f002 fcf1 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : Tast1_EXTI1_Pin Tast2_EXTI2_Pin */
  GPIO_InitStruct.Pin = Tast1_EXTI1_Pin|Tast2_EXTI2_Pin;
 8002246:	2306      	movs	r3, #6
 8002248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800224a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800224e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002250:	2302      	movs	r3, #2
 8002252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	4619      	mov	r1, r3
 800225a:	4819      	ldr	r0, [pc, #100]	@ (80022c0 <MX_GPIO_Init+0x170>)
 800225c:	f002 fce4 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_DC_Pin Stg1_NMOS4_Pin Stg2_NMOS2_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin|Stg1_NMOS4_Pin|Stg2_NMOS2_Pin;
 8002260:	f44f 438c 	mov.w	r3, #17920	@ 0x4600
 8002264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002266:	2301      	movs	r3, #1
 8002268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	4619      	mov	r1, r3
 8002278:	4811      	ldr	r0, [pc, #68]	@ (80022c0 <MX_GPIO_Init+0x170>)
 800227a:	f002 fcd5 	bl	8004c28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	2007      	movs	r0, #7
 8002284:	f002 fa29 	bl	80046da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002288:	2007      	movs	r0, #7
 800228a:	f002 fa40 	bl	800470e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	2008      	movs	r0, #8
 8002294:	f002 fa21 	bl	80046da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002298:	2008      	movs	r0, #8
 800229a:	f002 fa38 	bl	800470e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	2100      	movs	r1, #0
 80022a2:	2028      	movs	r0, #40	@ 0x28
 80022a4:	f002 fa19 	bl	80046da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022a8:	2028      	movs	r0, #40	@ 0x28
 80022aa:	f002 fa30 	bl	800470e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022ae:	bf00      	nop
 80022b0:	3728      	adds	r7, #40	@ 0x28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
 80022bc:	48000800 	.word	0x48000800
 80022c0:	48000400 	.word	0x48000400

080022c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022c8:	b672      	cpsid	i
}
 80022ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <Error_Handler+0x8>

080022d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <HAL_MspInit+0x44>)
 80022d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022da:	4a0e      	ldr	r2, [pc, #56]	@ (8002314 <HAL_MspInit+0x44>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80022e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <HAL_MspInit+0x44>)
 80022e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <HAL_MspInit+0x44>)
 80022f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f2:	4a08      	ldr	r2, [pc, #32]	@ (8002314 <HAL_MspInit+0x44>)
 80022f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80022fa:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <HAL_MspInit+0x44>)
 80022fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002306:	f002 feff 	bl	8005108 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000

08002318 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b0a2      	sub	sp, #136	@ 0x88
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002330:	f107 0320 	add.w	r3, r7, #32
 8002334:	2254      	movs	r2, #84	@ 0x54
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f006 f9b0 	bl	800869e <memset>
  if(hadc->Instance==ADC1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002346:	f040 8082 	bne.w	800244e <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800234a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800234e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002350:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002354:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002356:	f107 0320 	add.w	r3, r7, #32
 800235a:	4618      	mov	r0, r3
 800235c:	f003 fc12 	bl	8005b84 <HAL_RCCEx_PeriphCLKConfig>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8002366:	f7ff ffad 	bl	80022c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800236a:	4b72      	ldr	r3, [pc, #456]	@ (8002534 <HAL_ADC_MspInit+0x21c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	3301      	adds	r3, #1
 8002370:	4a70      	ldr	r2, [pc, #448]	@ (8002534 <HAL_ADC_MspInit+0x21c>)
 8002372:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002374:	4b6f      	ldr	r3, [pc, #444]	@ (8002534 <HAL_ADC_MspInit+0x21c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d10b      	bne.n	8002394 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800237c:	4b6e      	ldr	r3, [pc, #440]	@ (8002538 <HAL_ADC_MspInit+0x220>)
 800237e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002380:	4a6d      	ldr	r2, [pc, #436]	@ (8002538 <HAL_ADC_MspInit+0x220>)
 8002382:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002386:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002388:	4b6b      	ldr	r3, [pc, #428]	@ (8002538 <HAL_ADC_MspInit+0x220>)
 800238a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002394:	4b68      	ldr	r3, [pc, #416]	@ (8002538 <HAL_ADC_MspInit+0x220>)
 8002396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002398:	4a67      	ldr	r2, [pc, #412]	@ (8002538 <HAL_ADC_MspInit+0x220>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023a0:	4b65      	ldr	r3, [pc, #404]	@ (8002538 <HAL_ADC_MspInit+0x220>)
 80023a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ac:	4b62      	ldr	r3, [pc, #392]	@ (8002538 <HAL_ADC_MspInit+0x220>)
 80023ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b0:	4a61      	ldr	r2, [pc, #388]	@ (8002538 <HAL_ADC_MspInit+0x220>)
 80023b2:	f043 0302 	orr.w	r3, r3, #2
 80023b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023b8:	4b5f      	ldr	r3, [pc, #380]	@ (8002538 <HAL_ADC_MspInit+0x220>)
 80023ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ADC1_IN1_Poti1_Pin|ADC1_IN2_Poti2_Pin;
 80023c4:	2303      	movs	r3, #3
 80023c6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023c8:	2303      	movs	r3, #3
 80023ca:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80023d4:	4619      	mov	r1, r3
 80023d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023da:	f002 fc25 	bl	8004c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023de:	2301      	movs	r3, #1
 80023e0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023e2:	2303      	movs	r3, #3
 80023e4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ea:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80023ee:	4619      	mov	r1, r3
 80023f0:	4852      	ldr	r0, [pc, #328]	@ (800253c <HAL_ADC_MspInit+0x224>)
 80023f2:	f002 fc19 	bl	8004c28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80023f6:	4b52      	ldr	r3, [pc, #328]	@ (8002540 <HAL_ADC_MspInit+0x228>)
 80023f8:	4a52      	ldr	r2, [pc, #328]	@ (8002544 <HAL_ADC_MspInit+0x22c>)
 80023fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80023fc:	4b50      	ldr	r3, [pc, #320]	@ (8002540 <HAL_ADC_MspInit+0x228>)
 80023fe:	2205      	movs	r2, #5
 8002400:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002402:	4b4f      	ldr	r3, [pc, #316]	@ (8002540 <HAL_ADC_MspInit+0x228>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002408:	4b4d      	ldr	r3, [pc, #308]	@ (8002540 <HAL_ADC_MspInit+0x228>)
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800240e:	4b4c      	ldr	r3, [pc, #304]	@ (8002540 <HAL_ADC_MspInit+0x228>)
 8002410:	2280      	movs	r2, #128	@ 0x80
 8002412:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002414:	4b4a      	ldr	r3, [pc, #296]	@ (8002540 <HAL_ADC_MspInit+0x228>)
 8002416:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800241a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800241c:	4b48      	ldr	r3, [pc, #288]	@ (8002540 <HAL_ADC_MspInit+0x228>)
 800241e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002422:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002424:	4b46      	ldr	r3, [pc, #280]	@ (8002540 <HAL_ADC_MspInit+0x228>)
 8002426:	2220      	movs	r2, #32
 8002428:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800242a:	4b45      	ldr	r3, [pc, #276]	@ (8002540 <HAL_ADC_MspInit+0x228>)
 800242c:	2200      	movs	r2, #0
 800242e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002430:	4843      	ldr	r0, [pc, #268]	@ (8002540 <HAL_ADC_MspInit+0x228>)
 8002432:	f002 f987 	bl	8004744 <HAL_DMA_Init>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 800243c:	f7ff ff42 	bl	80022c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a3f      	ldr	r2, [pc, #252]	@ (8002540 <HAL_ADC_MspInit+0x228>)
 8002444:	655a      	str	r2, [r3, #84]	@ 0x54
 8002446:	4a3e      	ldr	r2, [pc, #248]	@ (8002540 <HAL_ADC_MspInit+0x228>)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800244c:	e06d      	b.n	800252a <HAL_ADC_MspInit+0x212>
  else if(hadc->Instance==ADC2)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a3d      	ldr	r2, [pc, #244]	@ (8002548 <HAL_ADC_MspInit+0x230>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d168      	bne.n	800252a <HAL_ADC_MspInit+0x212>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002458:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800245c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800245e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002462:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002464:	f107 0320 	add.w	r3, r7, #32
 8002468:	4618      	mov	r0, r3
 800246a:	f003 fb8b 	bl	8005b84 <HAL_RCCEx_PeriphCLKConfig>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_ADC_MspInit+0x160>
      Error_Handler();
 8002474:	f7ff ff26 	bl	80022c4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002478:	4b2e      	ldr	r3, [pc, #184]	@ (8002534 <HAL_ADC_MspInit+0x21c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3301      	adds	r3, #1
 800247e:	4a2d      	ldr	r2, [pc, #180]	@ (8002534 <HAL_ADC_MspInit+0x21c>)
 8002480:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002482:	4b2c      	ldr	r3, [pc, #176]	@ (8002534 <HAL_ADC_MspInit+0x21c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d10b      	bne.n	80024a2 <HAL_ADC_MspInit+0x18a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800248a:	4b2b      	ldr	r3, [pc, #172]	@ (8002538 <HAL_ADC_MspInit+0x220>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248e:	4a2a      	ldr	r2, [pc, #168]	@ (8002538 <HAL_ADC_MspInit+0x220>)
 8002490:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002496:	4b28      	ldr	r3, [pc, #160]	@ (8002538 <HAL_ADC_MspInit+0x220>)
 8002498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a2:	4b25      	ldr	r3, [pc, #148]	@ (8002538 <HAL_ADC_MspInit+0x220>)
 80024a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a6:	4a24      	ldr	r2, [pc, #144]	@ (8002538 <HAL_ADC_MspInit+0x220>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ae:	4b22      	ldr	r3, [pc, #136]	@ (8002538 <HAL_ADC_MspInit+0x220>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024ba:	2310      	movs	r3, #16
 80024bc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024be:	2303      	movs	r3, #3
 80024c0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80024ca:	4619      	mov	r1, r3
 80024cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024d0:	f002 fbaa 	bl	8004c28 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 80024d4:	4b1d      	ldr	r3, [pc, #116]	@ (800254c <HAL_ADC_MspInit+0x234>)
 80024d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002550 <HAL_ADC_MspInit+0x238>)
 80024d8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80024da:	4b1c      	ldr	r3, [pc, #112]	@ (800254c <HAL_ADC_MspInit+0x234>)
 80024dc:	2224      	movs	r2, #36	@ 0x24
 80024de:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024e0:	4b1a      	ldr	r3, [pc, #104]	@ (800254c <HAL_ADC_MspInit+0x234>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e6:	4b19      	ldr	r3, [pc, #100]	@ (800254c <HAL_ADC_MspInit+0x234>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80024ec:	4b17      	ldr	r3, [pc, #92]	@ (800254c <HAL_ADC_MspInit+0x234>)
 80024ee:	2280      	movs	r2, #128	@ 0x80
 80024f0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024f2:	4b16      	ldr	r3, [pc, #88]	@ (800254c <HAL_ADC_MspInit+0x234>)
 80024f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024f8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024fa:	4b14      	ldr	r3, [pc, #80]	@ (800254c <HAL_ADC_MspInit+0x234>)
 80024fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002500:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002502:	4b12      	ldr	r3, [pc, #72]	@ (800254c <HAL_ADC_MspInit+0x234>)
 8002504:	2220      	movs	r2, #32
 8002506:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002508:	4b10      	ldr	r3, [pc, #64]	@ (800254c <HAL_ADC_MspInit+0x234>)
 800250a:	2200      	movs	r2, #0
 800250c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800250e:	480f      	ldr	r0, [pc, #60]	@ (800254c <HAL_ADC_MspInit+0x234>)
 8002510:	f002 f918 	bl	8004744 <HAL_DMA_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_ADC_MspInit+0x206>
      Error_Handler();
 800251a:	f7ff fed3 	bl	80022c4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a0a      	ldr	r2, [pc, #40]	@ (800254c <HAL_ADC_MspInit+0x234>)
 8002522:	655a      	str	r2, [r3, #84]	@ 0x54
 8002524:	4a09      	ldr	r2, [pc, #36]	@ (800254c <HAL_ADC_MspInit+0x234>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800252a:	bf00      	nop
 800252c:	3788      	adds	r7, #136	@ 0x88
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200005a8 	.word	0x200005a8
 8002538:	40021000 	.word	0x40021000
 800253c:	48000400 	.word	0x48000400
 8002540:	200002e4 	.word	0x200002e4
 8002544:	40020008 	.word	0x40020008
 8002548:	50000100 	.word	0x50000100
 800254c:	20000344 	.word	0x20000344
 8002550:	40020408 	.word	0x40020408

08002554 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	@ 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a17      	ldr	r2, [pc, #92]	@ (80025d0 <HAL_SPI_MspInit+0x7c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d127      	bne.n	80025c6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002576:	4b17      	ldr	r3, [pc, #92]	@ (80025d4 <HAL_SPI_MspInit+0x80>)
 8002578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800257a:	4a16      	ldr	r2, [pc, #88]	@ (80025d4 <HAL_SPI_MspInit+0x80>)
 800257c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002580:	6613      	str	r3, [r2, #96]	@ 0x60
 8002582:	4b14      	ldr	r3, [pc, #80]	@ (80025d4 <HAL_SPI_MspInit+0x80>)
 8002584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002586:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800258e:	4b11      	ldr	r3, [pc, #68]	@ (80025d4 <HAL_SPI_MspInit+0x80>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002592:	4a10      	ldr	r2, [pc, #64]	@ (80025d4 <HAL_SPI_MspInit+0x80>)
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800259a:	4b0e      	ldr	r3, [pc, #56]	@ (80025d4 <HAL_SPI_MspInit+0x80>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80025a6:	2328      	movs	r3, #40	@ 0x28
 80025a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b2:	2300      	movs	r3, #0
 80025b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025b6:	2305      	movs	r3, #5
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	4619      	mov	r1, r3
 80025c0:	4805      	ldr	r0, [pc, #20]	@ (80025d8 <HAL_SPI_MspInit+0x84>)
 80025c2:	f002 fb31 	bl	8004c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025c6:	bf00      	nop
 80025c8:	3728      	adds	r7, #40	@ 0x28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40013000 	.word	0x40013000
 80025d4:	40021000 	.word	0x40021000
 80025d8:	48000400 	.word	0x48000400

080025dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002654 <HAL_TIM_Base_MspInit+0x78>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d114      	bne.n	8002618 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80025ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002658 <HAL_TIM_Base_MspInit+0x7c>)
 80025f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f2:	4a19      	ldr	r2, [pc, #100]	@ (8002658 <HAL_TIM_Base_MspInit+0x7c>)
 80025f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80025fa:	4b17      	ldr	r3, [pc, #92]	@ (8002658 <HAL_TIM_Base_MspInit+0x7c>)
 80025fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	2100      	movs	r1, #0
 800260a:	2019      	movs	r0, #25
 800260c:	f002 f865 	bl	80046da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002610:	2019      	movs	r0, #25
 8002612:	f002 f87c 	bl	800470e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002616:	e018      	b.n	800264a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a0f      	ldr	r2, [pc, #60]	@ (800265c <HAL_TIM_Base_MspInit+0x80>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d113      	bne.n	800264a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002622:	4b0d      	ldr	r3, [pc, #52]	@ (8002658 <HAL_TIM_Base_MspInit+0x7c>)
 8002624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002626:	4a0c      	ldr	r2, [pc, #48]	@ (8002658 <HAL_TIM_Base_MspInit+0x7c>)
 8002628:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800262c:	6613      	str	r3, [r2, #96]	@ 0x60
 800262e:	4b0a      	ldr	r3, [pc, #40]	@ (8002658 <HAL_TIM_Base_MspInit+0x7c>)
 8002630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002632:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	201a      	movs	r0, #26
 8002640:	f002 f84b 	bl	80046da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002644:	201a      	movs	r0, #26
 8002646:	f002 f862 	bl	800470e <HAL_NVIC_EnableIRQ>
}
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40014400 	.word	0x40014400
 8002658:	40021000 	.word	0x40021000
 800265c:	40014800 	.word	0x40014800

08002660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b09e      	sub	sp, #120	@ 0x78
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002678:	f107 0310 	add.w	r3, r7, #16
 800267c:	2254      	movs	r2, #84	@ 0x54
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f006 f80c 	bl	800869e <memset>
  if(huart->Instance==USART2)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a1f      	ldr	r2, [pc, #124]	@ (8002708 <HAL_UART_MspInit+0xa8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d136      	bne.n	80026fe <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002690:	2302      	movs	r3, #2
 8002692:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002694:	2300      	movs	r3, #0
 8002696:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002698:	f107 0310 	add.w	r3, r7, #16
 800269c:	4618      	mov	r0, r3
 800269e:	f003 fa71 	bl	8005b84 <HAL_RCCEx_PeriphCLKConfig>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026a8:	f7ff fe0c 	bl	80022c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ac:	4b17      	ldr	r3, [pc, #92]	@ (800270c <HAL_UART_MspInit+0xac>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b0:	4a16      	ldr	r2, [pc, #88]	@ (800270c <HAL_UART_MspInit+0xac>)
 80026b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80026b8:	4b14      	ldr	r3, [pc, #80]	@ (800270c <HAL_UART_MspInit+0xac>)
 80026ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c4:	4b11      	ldr	r3, [pc, #68]	@ (800270c <HAL_UART_MspInit+0xac>)
 80026c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c8:	4a10      	ldr	r2, [pc, #64]	@ (800270c <HAL_UART_MspInit+0xac>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026d0:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <HAL_UART_MspInit+0xac>)
 80026d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026dc:	230c      	movs	r3, #12
 80026de:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e8:	2300      	movs	r3, #0
 80026ea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026ec:	2307      	movs	r3, #7
 80026ee:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026f4:	4619      	mov	r1, r3
 80026f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026fa:	f002 fa95 	bl	8004c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026fe:	bf00      	nop
 8002700:	3778      	adds	r7, #120	@ 0x78
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40004400 	.word	0x40004400
 800270c:	40021000 	.word	0x40021000

08002710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <NMI_Handler+0x4>

08002718 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800271c:	bf00      	nop
 800271e:	e7fd      	b.n	800271c <HardFault_Handler+0x4>

08002720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <MemManage_Handler+0x4>

08002728 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800272c:	bf00      	nop
 800272e:	e7fd      	b.n	800272c <BusFault_Handler+0x4>

08002730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002734:	bf00      	nop
 8002736:	e7fd      	b.n	8002734 <UsageFault_Handler+0x4>

08002738 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002766:	f000 fb39 	bl	8002ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}

0800276e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Tast1_EXTI1_Pin);
 8002772:	2002      	movs	r0, #2
 8002774:	f002 fc0c 	bl	8004f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}

0800277c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Tast2_EXTI2_Pin);
 8002780:	2004      	movs	r0, #4
 8002782:	f002 fc05 	bl	8004f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002790:	4802      	ldr	r0, [pc, #8]	@ (800279c <DMA1_Channel1_IRQHandler+0x10>)
 8002792:	f002 f8fa 	bl	800498a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	200002e4 	.word	0x200002e4

080027a0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80027a4:	4802      	ldr	r0, [pc, #8]	@ (80027b0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80027a6:	f004 f88f 	bl	80068c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000408 	.word	0x20000408

080027b4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80027b8:	4802      	ldr	r0, [pc, #8]	@ (80027c4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80027ba:	f004 f885 	bl	80068c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000454 	.word	0x20000454

080027c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_EXTI13_Pin);
 80027cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80027d0:	f002 fbde 	bl	8004f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80027dc:	4802      	ldr	r0, [pc, #8]	@ (80027e8 <DMA2_Channel1_IRQHandler+0x10>)
 80027de:	f002 f8d4 	bl	800498a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000344 	.word	0x20000344

080027ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return 1;
 80027f0:	2301      	movs	r3, #1
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <_kill>:

int _kill(int pid, int sig)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002806:	f005 ff9d 	bl	8008744 <__errno>
 800280a:	4603      	mov	r3, r0
 800280c:	2216      	movs	r2, #22
 800280e:	601a      	str	r2, [r3, #0]
  return -1;
 8002810:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <_exit>:

void _exit (int status)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002824:	f04f 31ff 	mov.w	r1, #4294967295
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ffe7 	bl	80027fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800282e:	bf00      	nop
 8002830:	e7fd      	b.n	800282e <_exit+0x12>

08002832 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b086      	sub	sp, #24
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	e00a      	b.n	800285a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002844:	f3af 8000 	nop.w
 8002848:	4601      	mov	r1, r0
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	60ba      	str	r2, [r7, #8]
 8002850:	b2ca      	uxtb	r2, r1
 8002852:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	3301      	adds	r3, #1
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	429a      	cmp	r2, r3
 8002860:	dbf0      	blt.n	8002844 <_read+0x12>
  }

  return len;
 8002862:	687b      	ldr	r3, [r7, #4]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	e009      	b.n	8002892 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	60ba      	str	r2, [r7, #8]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3301      	adds	r3, #1
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	429a      	cmp	r2, r3
 8002898:	dbf1      	blt.n	800287e <_write+0x12>
  }
  return len;
 800289a:	687b      	ldr	r3, [r7, #4]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <_close>:

int _close(int file)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028cc:	605a      	str	r2, [r3, #4]
  return 0;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <_isatty>:

int _isatty(int file)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028e4:	2301      	movs	r3, #1
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b085      	sub	sp, #20
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002914:	4a14      	ldr	r2, [pc, #80]	@ (8002968 <_sbrk+0x5c>)
 8002916:	4b15      	ldr	r3, [pc, #84]	@ (800296c <_sbrk+0x60>)
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002920:	4b13      	ldr	r3, [pc, #76]	@ (8002970 <_sbrk+0x64>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002928:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <_sbrk+0x64>)
 800292a:	4a12      	ldr	r2, [pc, #72]	@ (8002974 <_sbrk+0x68>)
 800292c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800292e:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <_sbrk+0x64>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	429a      	cmp	r2, r3
 800293a:	d207      	bcs.n	800294c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800293c:	f005 ff02 	bl	8008744 <__errno>
 8002940:	4603      	mov	r3, r0
 8002942:	220c      	movs	r2, #12
 8002944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295
 800294a:	e009      	b.n	8002960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800294c:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <_sbrk+0x64>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002952:	4b07      	ldr	r3, [pc, #28]	@ (8002970 <_sbrk+0x64>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	4a05      	ldr	r2, [pc, #20]	@ (8002970 <_sbrk+0x64>)
 800295c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800295e:	68fb      	ldr	r3, [r7, #12]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20020000 	.word	0x20020000
 800296c:	00000400 	.word	0x00000400
 8002970:	200005ac 	.word	0x200005ac
 8002974:	20000720 	.word	0x20000720

08002978 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800297c:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <SystemInit+0x20>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002982:	4a05      	ldr	r2, [pc, #20]	@ (8002998 <SystemInit+0x20>)
 8002984:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002988:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <enter_handler_state>:
uint8_t px_ofs1 = 11;	// Offset in pixel

adc_raw_values adc_raw_values1;
adc_values adc_values1;

void enter_handler_state(int state) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af04      	add	r7, sp, #16
 80029a2:	6078      	str	r0, [r7, #4]
	switch (state) {
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <enter_handler_state+0x16>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d024      	beq.n	80029fa <enter_handler_state+0x5e>
		// Start Timer17 for updating values on Display
		HAL_TIM_Base_Start_IT(&htim17);
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 80029b0:	e04a      	b.n	8002a48 <enter_handler_state+0xac>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80029b2:	2200      	movs	r2, #0
 80029b4:	2120      	movs	r1, #32
 80029b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029ba:	f002 fab7 	bl	8004f2c <HAL_GPIO_WritePin>
		handler_state = IDLE;
 80029be:	4b24      	ldr	r3, [pc, #144]	@ (8002a50 <enter_handler_state+0xb4>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
		fillScreen(BLACK);
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7fe fbeb 	bl	80011a0 <fillScreen>
		ST7735_WriteString(0, 0, "State: IDLE", Font_7x10, GREEN, BLACK);
 80029ca:	4b22      	ldr	r3, [pc, #136]	@ (8002a54 <enter_handler_state+0xb8>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	9202      	str	r2, [sp, #8]
 80029d0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80029d4:	9201      	str	r2, [sp, #4]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	9200      	str	r2, [sp, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002a58 <enter_handler_state+0xbc>)
 80029de:	2100      	movs	r1, #0
 80029e0:	2000      	movs	r0, #0
 80029e2:	f7fe fe4b 	bl	800167c <ST7735_WriteString>
		drawFastHLine(0, px_ofs1, 128, WHITE);
 80029e6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a5c <enter_handler_state+0xc0>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	b219      	sxth	r1, r3
 80029ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029f0:	2280      	movs	r2, #128	@ 0x80
 80029f2:	2000      	movs	r0, #0
 80029f4:	f7fe fbae 	bl	8001154 <drawFastHLine>
		break;
 80029f8:	e026      	b.n	8002a48 <enter_handler_state+0xac>
		time_val = 0;
 80029fa:	4b19      	ldr	r3, [pc, #100]	@ (8002a60 <enter_handler_state+0xc4>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002a00:	2201      	movs	r2, #1
 8002a02:	2120      	movs	r1, #32
 8002a04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a08:	f002 fa90 	bl	8004f2c <HAL_GPIO_WritePin>
		fillScreen(BLACK);
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f7fe fbc7 	bl	80011a0 <fillScreen>
		ST7735_WriteString(0, 0, "State: ADC_Values", Font_7x10, GREEN, BLACK);
 8002a12:	4b10      	ldr	r3, [pc, #64]	@ (8002a54 <enter_handler_state+0xb8>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	9202      	str	r2, [sp, #8]
 8002a18:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002a1c:	9201      	str	r2, [sp, #4]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	9200      	str	r2, [sp, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a0f      	ldr	r2, [pc, #60]	@ (8002a64 <enter_handler_state+0xc8>)
 8002a26:	2100      	movs	r1, #0
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7fe fe27 	bl	800167c <ST7735_WriteString>
		drawFastHLine(0, px_ofs1, 128, WHITE);
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <enter_handler_state+0xc0>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	b219      	sxth	r1, r3
 8002a34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a38:	2280      	movs	r2, #128	@ 0x80
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f7fe fb8a 	bl	8001154 <drawFastHLine>
		HAL_TIM_Base_Start_IT(&htim17);
 8002a40:	4809      	ldr	r0, [pc, #36]	@ (8002a68 <enter_handler_state+0xcc>)
 8002a42:	f003 fec9 	bl	80067d8 <HAL_TIM_Base_Start_IT>
		break;
 8002a46:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	200005b0 	.word	0x200005b0
 8002a54:	20000000 	.word	0x20000000
 8002a58:	0800a950 	.word	0x0800a950
 8002a5c:	20000010 	.word	0x20000010
 8002a60:	200005b2 	.word	0x200005b2
 8002a64:	0800a95c 	.word	0x0800a95c
 8002a68:	20000454 	.word	0x20000454
 8002a6c:	00000000 	.word	0x00000000

08002a70 <exec_handler_state>:

//-----------------------------------------------------------------------------------------------------------------------

void exec_handler_state(int state) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	switch (state) {
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 80b9 	beq.w	8002bf2 <exec_handler_state+0x182>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d000      	beq.n	8002a88 <exec_handler_state+0x18>

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 8002a86:	e0b5      	b.n	8002bf4 <exec_handler_state+0x184>
		if (time_val > 250) {
 8002a88:	4b61      	ldr	r3, [pc, #388]	@ (8002c10 <exec_handler_state+0x1a0>)
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	2bfa      	cmp	r3, #250	@ 0xfa
 8002a8e:	d907      	bls.n	8002aa0 <exec_handler_state+0x30>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002a90:	2120      	movs	r1, #32
 8002a92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a96:	f002 fa61 	bl	8004f5c <HAL_GPIO_TogglePin>
			time_val = 0;
 8002a9a:	4b5d      	ldr	r3, [pc, #372]	@ (8002c10 <exec_handler_state+0x1a0>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8002aa0:	2110      	movs	r1, #16
 8002aa2:	485c      	ldr	r0, [pc, #368]	@ (8002c14 <exec_handler_state+0x1a4>)
 8002aa4:	f002 fa5a 	bl	8004f5c <HAL_GPIO_TogglePin>
		adc_raw_values1.poti1_V = (AD_RES_BUFFER_ADC1[0] << 4); // Map 12 Bit to 16 Bit values
 8002aa8:	4b5b      	ldr	r3, [pc, #364]	@ (8002c18 <exec_handler_state+0x1a8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	4b5a      	ldr	r3, [pc, #360]	@ (8002c1c <exec_handler_state+0x1ac>)
 8002ab4:	801a      	strh	r2, [r3, #0]
		adc_values1.poti1_Vf = (3.3*(float)adc_raw_values1.poti1_V)/65535;
 8002ab6:	4b59      	ldr	r3, [pc, #356]	@ (8002c1c <exec_handler_state+0x1ac>)
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	ee07 3a90 	vmov	s15, r3
 8002abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ac2:	ee17 0a90 	vmov	r0, s15
 8002ac6:	f7fd fd67 	bl	8000598 <__aeabi_f2d>
 8002aca:	a34d      	add	r3, pc, #308	@ (adr r3, 8002c00 <exec_handler_state+0x190>)
 8002acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad0:	f7fd fdba 	bl	8000648 <__aeabi_dmul>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	a34a      	add	r3, pc, #296	@ (adr r3, 8002c08 <exec_handler_state+0x198>)
 8002ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae2:	f7fd fedb 	bl	800089c <__aeabi_ddiv>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
 8002aee:	f7fe f883 	bl	8000bf8 <__aeabi_d2f>
 8002af2:	4603      	mov	r3, r0
 8002af4:	4a4a      	ldr	r2, [pc, #296]	@ (8002c20 <exec_handler_state+0x1b0>)
 8002af6:	6013      	str	r3, [r2, #0]
	    adc_raw_values1.poti2_V = (AD_RES_BUFFER_ADC1[1] << 4);
 8002af8:	4b47      	ldr	r3, [pc, #284]	@ (8002c18 <exec_handler_state+0x1a8>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	4b46      	ldr	r3, [pc, #280]	@ (8002c1c <exec_handler_state+0x1ac>)
 8002b04:	805a      	strh	r2, [r3, #2]
	    adc_values1.poti2_Vf = (3.3*(float)adc_raw_values1.poti2_V)/65535;
 8002b06:	4b45      	ldr	r3, [pc, #276]	@ (8002c1c <exec_handler_state+0x1ac>)
 8002b08:	885b      	ldrh	r3, [r3, #2]
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b12:	ee17 0a90 	vmov	r0, s15
 8002b16:	f7fd fd3f 	bl	8000598 <__aeabi_f2d>
 8002b1a:	a339      	add	r3, pc, #228	@ (adr r3, 8002c00 <exec_handler_state+0x190>)
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f7fd fd92 	bl	8000648 <__aeabi_dmul>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	a336      	add	r3, pc, #216	@ (adr r3, 8002c08 <exec_handler_state+0x198>)
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	f7fd feb3 	bl	800089c <__aeabi_ddiv>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f7fe f85b 	bl	8000bf8 <__aeabi_d2f>
 8002b42:	4603      	mov	r3, r0
 8002b44:	4a36      	ldr	r2, [pc, #216]	@ (8002c20 <exec_handler_state+0x1b0>)
 8002b46:	6053      	str	r3, [r2, #4]
	    adc_raw_values1.bnc1_V = (AD_RES_BUFFER_ADC1[2] << 4);
 8002b48:	4b33      	ldr	r3, [pc, #204]	@ (8002c18 <exec_handler_state+0x1a8>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	4b32      	ldr	r3, [pc, #200]	@ (8002c1c <exec_handler_state+0x1ac>)
 8002b54:	809a      	strh	r2, [r3, #4]
	    adc_values1.bnc1_Vf = (3.3*(float) adc_raw_values1.bnc1_V)/65535;
 8002b56:	4b31      	ldr	r3, [pc, #196]	@ (8002c1c <exec_handler_state+0x1ac>)
 8002b58:	889b      	ldrh	r3, [r3, #4]
 8002b5a:	ee07 3a90 	vmov	s15, r3
 8002b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b62:	ee17 0a90 	vmov	r0, s15
 8002b66:	f7fd fd17 	bl	8000598 <__aeabi_f2d>
 8002b6a:	a325      	add	r3, pc, #148	@ (adr r3, 8002c00 <exec_handler_state+0x190>)
 8002b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b70:	f7fd fd6a 	bl	8000648 <__aeabi_dmul>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	a322      	add	r3, pc, #136	@ (adr r3, 8002c08 <exec_handler_state+0x198>)
 8002b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b82:	f7fd fe8b 	bl	800089c <__aeabi_ddiv>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f7fe f833 	bl	8000bf8 <__aeabi_d2f>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4a22      	ldr	r2, [pc, #136]	@ (8002c20 <exec_handler_state+0x1b0>)
 8002b96:	6093      	str	r3, [r2, #8]
	    adc_raw_values1.bnc2_V = (AD_RES_BUFFER_ADC2[0] << 4);
 8002b98:	4b22      	ldr	r3, [pc, #136]	@ (8002c24 <exec_handler_state+0x1b4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c1c <exec_handler_state+0x1ac>)
 8002ba4:	80da      	strh	r2, [r3, #6]
	    adc_values1.bnc2_Vf = (3.3*(float) adc_raw_values1.bnc2_V)/65535;
 8002ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c1c <exec_handler_state+0x1ac>)
 8002ba8:	88db      	ldrh	r3, [r3, #6]
 8002baa:	ee07 3a90 	vmov	s15, r3
 8002bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb2:	ee17 0a90 	vmov	r0, s15
 8002bb6:	f7fd fcef 	bl	8000598 <__aeabi_f2d>
 8002bba:	a311      	add	r3, pc, #68	@ (adr r3, 8002c00 <exec_handler_state+0x190>)
 8002bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc0:	f7fd fd42 	bl	8000648 <__aeabi_dmul>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	a30e      	add	r3, pc, #56	@ (adr r3, 8002c08 <exec_handler_state+0x198>)
 8002bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd2:	f7fd fe63 	bl	800089c <__aeabi_ddiv>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4610      	mov	r0, r2
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f7fe f80b 	bl	8000bf8 <__aeabi_d2f>
 8002be2:	4603      	mov	r3, r0
 8002be4:	4a0e      	ldr	r2, [pc, #56]	@ (8002c20 <exec_handler_state+0x1b0>)
 8002be6:	60d3      	str	r3, [r2, #12]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8002be8:	2110      	movs	r1, #16
 8002bea:	480a      	ldr	r0, [pc, #40]	@ (8002c14 <exec_handler_state+0x1a4>)
 8002bec:	f002 f9b6 	bl	8004f5c <HAL_GPIO_TogglePin>
		break;
 8002bf0:	e000      	b.n	8002bf4 <exec_handler_state+0x184>
		break;
 8002bf2:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 8002bf4:	bf00      	nop
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	f3af 8000 	nop.w
 8002c00:	66666666 	.word	0x66666666
 8002c04:	400a6666 	.word	0x400a6666
 8002c08:	00000000 	.word	0x00000000
 8002c0c:	40efffe0 	.word	0x40efffe0
 8002c10:	200005b2 	.word	0x200005b2
 8002c14:	48000800 	.word	0x48000800
 8002c18:	20000534 	.word	0x20000534
 8002c1c:	200005b4 	.word	0x200005b4
 8002c20:	200005bc 	.word	0x200005bc
 8002c24:	20000540 	.word	0x20000540

08002c28 <leave_handler_state>:

//-----------------------------------------------------------------------------------------------------------------------

void leave_handler_state(int state) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	switch (state) {
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d007      	beq.n	8002c46 <leave_handler_state+0x1e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d000      	beq.n	8002c3e <leave_handler_state+0x16>
		// Stop Timer17 for updating values on Display
		HAL_TIM_Base_Start_IT(&htim17);
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 8002c3c:	e004      	b.n	8002c48 <leave_handler_state+0x20>
		HAL_TIM_Base_Start_IT(&htim17);
 8002c3e:	4804      	ldr	r0, [pc, #16]	@ (8002c50 <leave_handler_state+0x28>)
 8002c40:	f003 fdca 	bl	80067d8 <HAL_TIM_Base_Start_IT>
		break;
 8002c44:	e000      	b.n	8002c48 <leave_handler_state+0x20>
		break;
 8002c46:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000454 	.word	0x20000454

08002c54 <handler_task>:

//-----------------------------------------------------------------------------------------------------------------------

void handler_task(void) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
	exec_handler_state(handler_state);
 8002c58:	4b03      	ldr	r3, [pc, #12]	@ (8002c68 <handler_task+0x14>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ff07 	bl	8002a70 <exec_handler_state>
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200005b0 	.word	0x200005b0

08002c6c <set_handler_state>:

void set_handler_state(uint8_t state) {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
	prev_handler_state = handler_state;
 8002c76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca0 <set_handler_state+0x34>)
 8002c78:	781a      	ldrb	r2, [r3, #0]
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca4 <set_handler_state+0x38>)
 8002c7c:	701a      	strb	r2, [r3, #0]
	handler_state = state;
 8002c7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ca0 <set_handler_state+0x34>)
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	7013      	strb	r3, [r2, #0]
	leave_handler_state(prev_handler_state);
 8002c84:	4b07      	ldr	r3, [pc, #28]	@ (8002ca4 <set_handler_state+0x38>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ffcd 	bl	8002c28 <leave_handler_state>
	enter_handler_state(state);
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fe83 	bl	800299c <enter_handler_state>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	200005b0 	.word	0x200005b0
 8002ca4:	200005b1 	.word	0x200005b1

08002ca8 <inc_handler_currentTime>:

uint8_t get_handler_state(void) {
	return handler_state;
}

void inc_handler_currentTime(uint16_t dT) {
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	80fb      	strh	r3, [r7, #6]
	time_val = time_val + dT;
 8002cb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <inc_handler_currentTime+0x24>)
 8002cb4:	881a      	ldrh	r2, [r3, #0]
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	4413      	add	r3, r2
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	4b03      	ldr	r3, [pc, #12]	@ (8002ccc <inc_handler_currentTime+0x24>)
 8002cbe:	801a      	strh	r2, [r3, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	200005b2 	.word	0x200005b2

08002cd0 <get_adc_values>:

adc_values* get_adc_values(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
	return &adc_values1;
 8002cd4:	4b02      	ldr	r3, [pc, #8]	@ (8002ce0 <get_adc_values+0x10>)
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	200005bc 	.word	0x200005bc

08002ce4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ce4:	480d      	ldr	r0, [pc, #52]	@ (8002d1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ce6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ce8:	f7ff fe46 	bl	8002978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cec:	480c      	ldr	r0, [pc, #48]	@ (8002d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cee:	490d      	ldr	r1, [pc, #52]	@ (8002d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8002d28 <LoopForever+0xe>)
  movs r3, #0
 8002cf2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002cf4:	e002      	b.n	8002cfc <LoopCopyDataInit>

08002cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cfa:	3304      	adds	r3, #4

08002cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d00:	d3f9      	bcc.n	8002cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d02:	4a0a      	ldr	r2, [pc, #40]	@ (8002d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d04:	4c0a      	ldr	r4, [pc, #40]	@ (8002d30 <LoopForever+0x16>)
  movs r3, #0
 8002d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d08:	e001      	b.n	8002d0e <LoopFillZerobss>

08002d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d0c:	3204      	adds	r2, #4

08002d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d10:	d3fb      	bcc.n	8002d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d12:	f005 fd1d 	bl	8008750 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d16:	f7fe ff7f 	bl	8001c18 <main>

08002d1a <LoopForever>:

LoopForever:
    b LoopForever
 8002d1a:	e7fe      	b.n	8002d1a <LoopForever>
  ldr   r0, =_estack
 8002d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d24:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002d28:	0800b510 	.word	0x0800b510
  ldr r2, =_sbss
 8002d2c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002d30:	2000071c 	.word	0x2000071c

08002d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d34:	e7fe      	b.n	8002d34 <ADC1_2_IRQHandler>

08002d36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d40:	2003      	movs	r0, #3
 8002d42:	f001 fcbf 	bl	80046c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d46:	200f      	movs	r0, #15
 8002d48:	f000 f80e 	bl	8002d68 <HAL_InitTick>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	71fb      	strb	r3, [r7, #7]
 8002d56:	e001      	b.n	8002d5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d58:	f7ff faba 	bl	80022d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d5c:	79fb      	ldrb	r3, [r7, #7]

}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d74:	4b16      	ldr	r3, [pc, #88]	@ (8002dd0 <HAL_InitTick+0x68>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d022      	beq.n	8002dc2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d7c:	4b15      	ldr	r3, [pc, #84]	@ (8002dd4 <HAL_InitTick+0x6c>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	4b13      	ldr	r3, [pc, #76]	@ (8002dd0 <HAL_InitTick+0x68>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002d88:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	4618      	mov	r0, r3
 8002d92:	f001 fcca 	bl	800472a <HAL_SYSTICK_Config>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10f      	bne.n	8002dbc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b0f      	cmp	r3, #15
 8002da0:	d809      	bhi.n	8002db6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002da2:	2200      	movs	r2, #0
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	f04f 30ff 	mov.w	r0, #4294967295
 8002daa:	f001 fc96 	bl	80046da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002dae:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd8 <HAL_InitTick+0x70>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	e007      	b.n	8002dc6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
 8002dba:	e004      	b.n	8002dc6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	73fb      	strb	r3, [r7, #15]
 8002dc0:	e001      	b.n	8002dc6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000018 	.word	0x20000018
 8002dd4:	2000000c 	.word	0x2000000c
 8002dd8:	20000014 	.word	0x20000014

08002ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de0:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <HAL_IncTick+0x1c>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b05      	ldr	r3, [pc, #20]	@ (8002dfc <HAL_IncTick+0x20>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4413      	add	r3, r2
 8002dea:	4a03      	ldr	r2, [pc, #12]	@ (8002df8 <HAL_IncTick+0x1c>)
 8002dec:	6013      	str	r3, [r2, #0]
}
 8002dee:	bf00      	nop
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	200005cc 	.word	0x200005cc
 8002dfc:	20000018 	.word	0x20000018

08002e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return uwTick;
 8002e04:	4b03      	ldr	r3, [pc, #12]	@ (8002e14 <HAL_GetTick+0x14>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	200005cc 	.word	0x200005cc

08002e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e20:	f7ff ffee 	bl	8002e00 <HAL_GetTick>
 8002e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d004      	beq.n	8002e3c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e32:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <HAL_Delay+0x40>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4413      	add	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e3c:	bf00      	nop
 8002e3e:	f7ff ffdf 	bl	8002e00 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d8f7      	bhi.n	8002e3e <HAL_Delay+0x26>
  {
  }
}
 8002e4e:	bf00      	nop
 8002e50:	bf00      	nop
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000018 	.word	0x20000018

08002e5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	609a      	str	r2, [r3, #8]
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3360      	adds	r3, #96	@ 0x60
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <LL_ADC_SetOffset+0x44>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002efc:	bf00      	nop
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	03fff000 	.word	0x03fff000

08002f0c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3360      	adds	r3, #96	@ 0x60
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3360      	adds	r3, #96	@ 0x60
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f62:	bf00      	nop
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b087      	sub	sp, #28
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	3360      	adds	r3, #96	@ 0x60
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	431a      	orrs	r2, r3
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002f98:	bf00      	nop
 8002f9a:	371c      	adds	r7, #28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3360      	adds	r3, #96	@ 0x60
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002fce:	bf00      	nop
 8002fd0:	371c      	adds	r7, #28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	615a      	str	r2, [r3, #20]
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003026:	b480      	push	{r7}
 8003028:	b087      	sub	sp, #28
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3330      	adds	r3, #48	@ 0x30
 8003036:	461a      	mov	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	0a1b      	lsrs	r3, r3, #8
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	4413      	add	r3, r2
 8003044:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	211f      	movs	r1, #31
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	401a      	ands	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	0e9b      	lsrs	r3, r3, #26
 800305e:	f003 011f 	and.w	r1, r3, #31
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	fa01 f303 	lsl.w	r3, r1, r3
 800306c:	431a      	orrs	r2, r3
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003072:	bf00      	nop
 8003074:	371c      	adds	r7, #28
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800307e:	b480      	push	{r7}
 8003080:	b087      	sub	sp, #28
 8003082:	af00      	add	r7, sp, #0
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3314      	adds	r3, #20
 800308e:	461a      	mov	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	0e5b      	lsrs	r3, r3, #25
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	4413      	add	r3, r2
 800309c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	0d1b      	lsrs	r3, r3, #20
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	2107      	movs	r1, #7
 80030ac:	fa01 f303 	lsl.w	r3, r1, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	401a      	ands	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	0d1b      	lsrs	r3, r3, #20
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	431a      	orrs	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80030c8:	bf00      	nop
 80030ca:	371c      	adds	r7, #28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ec:	43db      	mvns	r3, r3
 80030ee:	401a      	ands	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f003 0318 	and.w	r3, r3, #24
 80030f6:	4908      	ldr	r1, [pc, #32]	@ (8003118 <LL_ADC_SetChannelSingleDiff+0x44>)
 80030f8:	40d9      	lsrs	r1, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	400b      	ands	r3, r1
 80030fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003102:	431a      	orrs	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800310a:	bf00      	nop
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	0007ffff 	.word	0x0007ffff

0800311c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 031f 	and.w	r3, r3, #31
}
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003148:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6093      	str	r3, [r2, #8]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800316c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003170:	d101      	bne.n	8003176 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003194:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003198:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031c0:	d101      	bne.n	80031c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031e8:	f043 0201 	orr.w	r2, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <LL_ADC_IsEnabled+0x18>
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <LL_ADC_IsEnabled+0x1a>
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003232:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003236:	f043 0204 	orr.w	r2, r3, #4
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b04      	cmp	r3, #4
 800325c:	d101      	bne.n	8003262 <LL_ADC_REG_IsConversionOngoing+0x18>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b08      	cmp	r3, #8
 8003282:	d101      	bne.n	8003288 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b089      	sub	sp, #36	@ 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e1a9      	b.n	8003606 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d109      	bne.n	80032d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff f829 	bl	8002318 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff ff3f 	bl	800315c <LL_ADC_IsDeepPowerDownEnabled>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d004      	beq.n	80032ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff25 	bl	8003138 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff ff5a 	bl	80031ac <LL_ADC_IsInternalRegulatorEnabled>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d115      	bne.n	800332a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff ff3e 	bl	8003184 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003308:	4b9c      	ldr	r3, [pc, #624]	@ (800357c <HAL_ADC_Init+0x2e4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	099b      	lsrs	r3, r3, #6
 800330e:	4a9c      	ldr	r2, [pc, #624]	@ (8003580 <HAL_ADC_Init+0x2e8>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	099b      	lsrs	r3, r3, #6
 8003316:	3301      	adds	r3, #1
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800331c:	e002      	b.n	8003324 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	3b01      	subs	r3, #1
 8003322:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f9      	bne.n	800331e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff ff3c 	bl	80031ac <LL_ADC_IsInternalRegulatorEnabled>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10d      	bne.n	8003356 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333e:	f043 0210 	orr.w	r2, r3, #16
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800334a:	f043 0201 	orr.w	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ff75 	bl	800324a <LL_ADC_REG_IsConversionOngoing>
 8003360:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	2b00      	cmp	r3, #0
 800336c:	f040 8142 	bne.w	80035f4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f040 813e 	bne.w	80035f4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003380:	f043 0202 	orr.w	r2, r3, #2
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ff35 	bl	80031fc <LL_ADC_IsEnabled>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d141      	bne.n	800341c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033a0:	d004      	beq.n	80033ac <HAL_ADC_Init+0x114>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a77      	ldr	r2, [pc, #476]	@ (8003584 <HAL_ADC_Init+0x2ec>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d10f      	bne.n	80033cc <HAL_ADC_Init+0x134>
 80033ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80033b0:	f7ff ff24 	bl	80031fc <LL_ADC_IsEnabled>
 80033b4:	4604      	mov	r4, r0
 80033b6:	4873      	ldr	r0, [pc, #460]	@ (8003584 <HAL_ADC_Init+0x2ec>)
 80033b8:	f7ff ff20 	bl	80031fc <LL_ADC_IsEnabled>
 80033bc:	4603      	mov	r3, r0
 80033be:	4323      	orrs	r3, r4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf0c      	ite	eq
 80033c4:	2301      	moveq	r3, #1
 80033c6:	2300      	movne	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	e012      	b.n	80033f2 <HAL_ADC_Init+0x15a>
 80033cc:	486e      	ldr	r0, [pc, #440]	@ (8003588 <HAL_ADC_Init+0x2f0>)
 80033ce:	f7ff ff15 	bl	80031fc <LL_ADC_IsEnabled>
 80033d2:	4604      	mov	r4, r0
 80033d4:	486d      	ldr	r0, [pc, #436]	@ (800358c <HAL_ADC_Init+0x2f4>)
 80033d6:	f7ff ff11 	bl	80031fc <LL_ADC_IsEnabled>
 80033da:	4603      	mov	r3, r0
 80033dc:	431c      	orrs	r4, r3
 80033de:	486c      	ldr	r0, [pc, #432]	@ (8003590 <HAL_ADC_Init+0x2f8>)
 80033e0:	f7ff ff0c 	bl	80031fc <LL_ADC_IsEnabled>
 80033e4:	4603      	mov	r3, r0
 80033e6:	4323      	orrs	r3, r4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d012      	beq.n	800341c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033fe:	d004      	beq.n	800340a <HAL_ADC_Init+0x172>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a5f      	ldr	r2, [pc, #380]	@ (8003584 <HAL_ADC_Init+0x2ec>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d101      	bne.n	800340e <HAL_ADC_Init+0x176>
 800340a:	4a62      	ldr	r2, [pc, #392]	@ (8003594 <HAL_ADC_Init+0x2fc>)
 800340c:	e000      	b.n	8003410 <HAL_ADC_Init+0x178>
 800340e:	4a62      	ldr	r2, [pc, #392]	@ (8003598 <HAL_ADC_Init+0x300>)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4619      	mov	r1, r3
 8003416:	4610      	mov	r0, r2
 8003418:	f7ff fd20 	bl	8002e5c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	7f5b      	ldrb	r3, [r3, #29]
 8003420:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003426:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800342c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003432:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800343a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003446:	2b01      	cmp	r3, #1
 8003448:	d106      	bne.n	8003458 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344e:	3b01      	subs	r3, #1
 8003450:	045b      	lsls	r3, r3, #17
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4313      	orrs	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d009      	beq.n	8003474 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	4b48      	ldr	r3, [pc, #288]	@ (800359c <HAL_ADC_Init+0x304>)
 800347c:	4013      	ands	r3, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6812      	ldr	r2, [r2, #0]
 8003482:	69b9      	ldr	r1, [r7, #24]
 8003484:	430b      	orrs	r3, r1
 8003486:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fee4 	bl	8003270 <LL_ADC_INJ_IsConversionOngoing>
 80034a8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d17f      	bne.n	80035b0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d17c      	bne.n	80035b0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80034ba:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80034c2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034d2:	f023 0302 	bic.w	r3, r3, #2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	69b9      	ldr	r1, [r7, #24]
 80034dc:	430b      	orrs	r3, r1
 80034de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d017      	beq.n	8003518 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691a      	ldr	r2, [r3, #16]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80034f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003500:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003504:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6911      	ldr	r1, [r2, #16]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6812      	ldr	r2, [r2, #0]
 8003510:	430b      	orrs	r3, r1
 8003512:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003516:	e013      	b.n	8003540 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003526:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003538:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800353c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003546:	2b01      	cmp	r3, #1
 8003548:	d12a      	bne.n	80035a0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003554:	f023 0304 	bic.w	r3, r3, #4
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003560:	4311      	orrs	r1, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003566:	4311      	orrs	r1, r2
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800356c:	430a      	orrs	r2, r1
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	611a      	str	r2, [r3, #16]
 800357a:	e019      	b.n	80035b0 <HAL_ADC_Init+0x318>
 800357c:	2000000c 	.word	0x2000000c
 8003580:	053e2d63 	.word	0x053e2d63
 8003584:	50000100 	.word	0x50000100
 8003588:	50000400 	.word	0x50000400
 800358c:	50000500 	.word	0x50000500
 8003590:	50000600 	.word	0x50000600
 8003594:	50000300 	.word	0x50000300
 8003598:	50000700 	.word	0x50000700
 800359c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691a      	ldr	r2, [r3, #16]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0201 	bic.w	r2, r2, #1
 80035ae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d10c      	bne.n	80035d2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035be:	f023 010f 	bic.w	r1, r3, #15
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	1e5a      	subs	r2, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80035d0:	e007      	b.n	80035e2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 020f 	bic.w	r2, r2, #15
 80035e0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e6:	f023 0303 	bic.w	r3, r3, #3
 80035ea:	f043 0201 	orr.w	r2, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035f2:	e007      	b.n	8003604 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f8:	f043 0210 	orr.w	r2, r3, #16
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003604:	7ffb      	ldrb	r3, [r7, #31]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3724      	adds	r7, #36	@ 0x24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd90      	pop	{r4, r7, pc}
 800360e:	bf00      	nop

08003610 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003624:	d004      	beq.n	8003630 <HAL_ADC_Start_DMA+0x20>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a5a      	ldr	r2, [pc, #360]	@ (8003794 <HAL_ADC_Start_DMA+0x184>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d101      	bne.n	8003634 <HAL_ADC_Start_DMA+0x24>
 8003630:	4b59      	ldr	r3, [pc, #356]	@ (8003798 <HAL_ADC_Start_DMA+0x188>)
 8003632:	e000      	b.n	8003636 <HAL_ADC_Start_DMA+0x26>
 8003634:	4b59      	ldr	r3, [pc, #356]	@ (800379c <HAL_ADC_Start_DMA+0x18c>)
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff fd70 	bl	800311c <LL_ADC_GetMultimode>
 800363c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fe01 	bl	800324a <LL_ADC_REG_IsConversionOngoing>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	f040 809b 	bne.w	8003786 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_ADC_Start_DMA+0x4e>
 800365a:	2302      	movs	r3, #2
 800365c:	e096      	b.n	800378c <HAL_ADC_Start_DMA+0x17c>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a4d      	ldr	r2, [pc, #308]	@ (80037a0 <HAL_ADC_Start_DMA+0x190>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d008      	beq.n	8003682 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2b05      	cmp	r3, #5
 800367a:	d002      	beq.n	8003682 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	2b09      	cmp	r3, #9
 8003680:	d17a      	bne.n	8003778 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 fcf6 	bl	8004074 <ADC_Enable>
 8003688:	4603      	mov	r3, r0
 800368a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800368c:	7dfb      	ldrb	r3, [r7, #23]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d16d      	bne.n	800376e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003696:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800369a:	f023 0301 	bic.w	r3, r3, #1
 800369e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a3a      	ldr	r2, [pc, #232]	@ (8003794 <HAL_ADC_Start_DMA+0x184>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d009      	beq.n	80036c4 <HAL_ADC_Start_DMA+0xb4>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a3b      	ldr	r2, [pc, #236]	@ (80037a4 <HAL_ADC_Start_DMA+0x194>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d002      	beq.n	80036c0 <HAL_ADC_Start_DMA+0xb0>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	e003      	b.n	80036c8 <HAL_ADC_Start_DMA+0xb8>
 80036c0:	4b39      	ldr	r3, [pc, #228]	@ (80037a8 <HAL_ADC_Start_DMA+0x198>)
 80036c2:	e001      	b.n	80036c8 <HAL_ADC_Start_DMA+0xb8>
 80036c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d002      	beq.n	80036d6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d105      	bne.n	80036e2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036da:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d006      	beq.n	80036fc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f2:	f023 0206 	bic.w	r2, r3, #6
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	661a      	str	r2, [r3, #96]	@ 0x60
 80036fa:	e002      	b.n	8003702 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003706:	4a29      	ldr	r2, [pc, #164]	@ (80037ac <HAL_ADC_Start_DMA+0x19c>)
 8003708:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800370e:	4a28      	ldr	r2, [pc, #160]	@ (80037b0 <HAL_ADC_Start_DMA+0x1a0>)
 8003710:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003716:	4a27      	ldr	r2, [pc, #156]	@ (80037b4 <HAL_ADC_Start_DMA+0x1a4>)
 8003718:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	221c      	movs	r2, #28
 8003720:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0210 	orr.w	r2, r2, #16
 8003738:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3340      	adds	r3, #64	@ 0x40
 8003754:	4619      	mov	r1, r3
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f001 f89b 	bl	8004894 <HAL_DMA_Start_IT>
 800375e:	4603      	mov	r3, r0
 8003760:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fd5b 	bl	8003222 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800376c:	e00d      	b.n	800378a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003776:	e008      	b.n	800378a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003784:	e001      	b.n	800378a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003786:	2302      	movs	r3, #2
 8003788:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800378a:	7dfb      	ldrb	r3, [r7, #23]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	50000100 	.word	0x50000100
 8003798:	50000300 	.word	0x50000300
 800379c:	50000700 	.word	0x50000700
 80037a0:	50000600 	.word	0x50000600
 80037a4:	50000500 	.word	0x50000500
 80037a8:	50000400 	.word	0x50000400
 80037ac:	080041a1 	.word	0x080041a1
 80037b0:	08004279 	.word	0x08004279
 80037b4:	08004295 	.word	0x08004295

080037b8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b0b6      	sub	sp, #216	@ 0xd8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800380e:	2b01      	cmp	r3, #1
 8003810:	d102      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x24>
 8003812:	2302      	movs	r3, #2
 8003814:	f000 bc13 	b.w	800403e <HAL_ADC_ConfigChannel+0x84a>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff fd10 	bl	800324a <LL_ADC_REG_IsConversionOngoing>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	f040 83f3 	bne.w	8004018 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	6859      	ldr	r1, [r3, #4]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	f7ff fbf1 	bl	8003026 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fcfe 	bl	800324a <LL_ADC_REG_IsConversionOngoing>
 800384e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fd0a 	bl	8003270 <LL_ADC_INJ_IsConversionOngoing>
 800385c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003860:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003864:	2b00      	cmp	r3, #0
 8003866:	f040 81d9 	bne.w	8003c1c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800386a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800386e:	2b00      	cmp	r3, #0
 8003870:	f040 81d4 	bne.w	8003c1c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800387c:	d10f      	bne.n	800389e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2200      	movs	r2, #0
 8003888:	4619      	mov	r1, r3
 800388a:	f7ff fbf8 	bl	800307e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fb9f 	bl	8002fda <LL_ADC_SetSamplingTimeCommonConfig>
 800389c:	e00e      	b.n	80038bc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6819      	ldr	r1, [r3, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f7ff fbe7 	bl	800307e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2100      	movs	r1, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff fb8f 	bl	8002fda <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	08db      	lsrs	r3, r3, #3
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d022      	beq.n	8003924 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6919      	ldr	r1, [r3, #16]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038ee:	f7ff fae9 	bl	8002ec4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6919      	ldr	r1, [r3, #16]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	461a      	mov	r2, r3
 8003900:	f7ff fb35 	bl	8002f6e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003910:	2b01      	cmp	r3, #1
 8003912:	d102      	bne.n	800391a <HAL_ADC_ConfigChannel+0x126>
 8003914:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003918:	e000      	b.n	800391c <HAL_ADC_ConfigChannel+0x128>
 800391a:	2300      	movs	r3, #0
 800391c:	461a      	mov	r2, r3
 800391e:	f7ff fb41 	bl	8002fa4 <LL_ADC_SetOffsetSaturation>
 8003922:	e17b      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2100      	movs	r1, #0
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff faee 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003930:	4603      	mov	r3, r0
 8003932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x15c>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fae3 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003946:	4603      	mov	r3, r0
 8003948:	0e9b      	lsrs	r3, r3, #26
 800394a:	f003 021f 	and.w	r2, r3, #31
 800394e:	e01e      	b.n	800398e <HAL_ADC_ConfigChannel+0x19a>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2100      	movs	r1, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff fad8 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 800395c:	4603      	mov	r3, r0
 800395e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003966:	fa93 f3a3 	rbit	r3, r3
 800396a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800396e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003972:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800397e:	2320      	movs	r3, #32
 8003980:	e004      	b.n	800398c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003982:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003986:	fab3 f383 	clz	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003996:	2b00      	cmp	r3, #0
 8003998:	d105      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x1b2>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	0e9b      	lsrs	r3, r3, #26
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	e018      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x1e4>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80039b2:	fa93 f3a3 	rbit	r3, r3
 80039b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80039ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80039c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80039ca:	2320      	movs	r3, #32
 80039cc:	e004      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80039ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80039d2:	fab3 f383 	clz	r3, r3
 80039d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039d8:	429a      	cmp	r2, r3
 80039da:	d106      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2200      	movs	r2, #0
 80039e2:	2100      	movs	r1, #0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff faa7 	bl	8002f38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2101      	movs	r1, #1
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fa8b 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x222>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2101      	movs	r1, #1
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff fa80 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	0e9b      	lsrs	r3, r3, #26
 8003a10:	f003 021f 	and.w	r2, r3, #31
 8003a14:	e01e      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x260>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff fa75 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a2c:	fa93 f3a3 	rbit	r3, r3
 8003a30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003a34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003a3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003a44:	2320      	movs	r3, #32
 8003a46:	e004      	b.n	8003a52 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003a48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a4c:	fab3 f383 	clz	r3, r3
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d105      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x278>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	0e9b      	lsrs	r3, r3, #26
 8003a66:	f003 031f 	and.w	r3, r3, #31
 8003a6a:	e018      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x2aa>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a78:	fa93 f3a3 	rbit	r3, r3
 8003a7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003a80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003a88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003a90:	2320      	movs	r3, #32
 8003a92:	e004      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a98:	fab3 f383 	clz	r3, r3
 8003a9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d106      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff fa44 	bl	8002f38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2102      	movs	r1, #2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff fa28 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10a      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x2e8>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2102      	movs	r1, #2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff fa1d 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	0e9b      	lsrs	r3, r3, #26
 8003ad6:	f003 021f 	and.w	r2, r3, #31
 8003ada:	e01e      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x326>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2102      	movs	r1, #2
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff fa12 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003afa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003afe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003b0a:	2320      	movs	r3, #32
 8003b0c:	e004      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003b0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b12:	fab3 f383 	clz	r3, r3
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d105      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x33e>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	0e9b      	lsrs	r3, r3, #26
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	e016      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x36c>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b3e:	fa93 f3a3 	rbit	r3, r3
 8003b42:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003b44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003b4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003b52:	2320      	movs	r3, #32
 8003b54:	e004      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003b56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b5a:	fab3 f383 	clz	r3, r3
 8003b5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d106      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff f9e3 	bl	8002f38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2103      	movs	r1, #3
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff f9c7 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10a      	bne.n	8003b9e <HAL_ADC_ConfigChannel+0x3aa>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2103      	movs	r1, #3
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff f9bc 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003b94:	4603      	mov	r3, r0
 8003b96:	0e9b      	lsrs	r3, r3, #26
 8003b98:	f003 021f 	and.w	r2, r3, #31
 8003b9c:	e017      	b.n	8003bce <HAL_ADC_ConfigChannel+0x3da>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2103      	movs	r1, #3
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff f9b1 	bl	8002f0c <LL_ADC_GetOffsetChannel>
 8003baa:	4603      	mov	r3, r0
 8003bac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bb0:	fa93 f3a3 	rbit	r3, r3
 8003bb4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003bb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bb8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003bba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003bc0:	2320      	movs	r3, #32
 8003bc2:	e003      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003bc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bc6:	fab3 f383 	clz	r3, r3
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d105      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x3f2>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	0e9b      	lsrs	r3, r3, #26
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	e011      	b.n	8003c0a <HAL_ADC_ConfigChannel+0x416>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bee:	fa93 f3a3 	rbit	r3, r3
 8003bf2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003bf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003bfe:	2320      	movs	r3, #32
 8003c00:	e003      	b.n	8003c0a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003c02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c04:	fab3 f383 	clz	r3, r3
 8003c08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d106      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2200      	movs	r2, #0
 8003c14:	2103      	movs	r1, #3
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff f98e 	bl	8002f38 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff faeb 	bl	80031fc <LL_ADC_IsEnabled>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f040 813d 	bne.w	8003ea8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	6819      	ldr	r1, [r3, #0]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f7ff fa4a 	bl	80030d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4aa2      	ldr	r2, [pc, #648]	@ (8003ed0 <HAL_ADC_ConfigChannel+0x6dc>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	f040 812e 	bne.w	8003ea8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10b      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x480>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	0e9b      	lsrs	r3, r3, #26
 8003c62:	3301      	adds	r3, #1
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	2b09      	cmp	r3, #9
 8003c6a:	bf94      	ite	ls
 8003c6c:	2301      	movls	r3, #1
 8003c6e:	2300      	movhi	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	e019      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x4b4>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c7c:	fa93 f3a3 	rbit	r3, r3
 8003c80:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003c82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c84:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003c86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003c8c:	2320      	movs	r3, #32
 8003c8e:	e003      	b.n	8003c98 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003c90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	3301      	adds	r3, #1
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	2b09      	cmp	r3, #9
 8003ca0:	bf94      	ite	ls
 8003ca2:	2301      	movls	r3, #1
 8003ca4:	2300      	movhi	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d079      	beq.n	8003da0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d107      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x4d4>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	0e9b      	lsrs	r3, r3, #26
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	069b      	lsls	r3, r3, #26
 8003cc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cc6:	e015      	b.n	8003cf4 <HAL_ADC_ConfigChannel+0x500>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cd0:	fa93 f3a3 	rbit	r3, r3
 8003cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cd8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003ce0:	2320      	movs	r3, #32
 8003ce2:	e003      	b.n	8003cec <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce6:	fab3 f383 	clz	r3, r3
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	3301      	adds	r3, #1
 8003cee:	069b      	lsls	r3, r3, #26
 8003cf0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d109      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x520>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	0e9b      	lsrs	r3, r3, #26
 8003d06:	3301      	adds	r3, #1
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d12:	e017      	b.n	8003d44 <HAL_ADC_ConfigChannel+0x550>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d24:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003d26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003d2c:	2320      	movs	r3, #32
 8003d2e:	e003      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003d30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d32:	fab3 f383 	clz	r3, r3
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	3301      	adds	r3, #1
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	2101      	movs	r1, #1
 8003d40:	fa01 f303 	lsl.w	r3, r1, r3
 8003d44:	ea42 0103 	orr.w	r1, r2, r3
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x576>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	0e9b      	lsrs	r3, r3, #26
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f003 021f 	and.w	r2, r3, #31
 8003d60:	4613      	mov	r3, r2
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	4413      	add	r3, r2
 8003d66:	051b      	lsls	r3, r3, #20
 8003d68:	e018      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x5a8>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d72:	fa93 f3a3 	rbit	r3, r3
 8003d76:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003d82:	2320      	movs	r3, #32
 8003d84:	e003      	b.n	8003d8e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d88:	fab3 f383 	clz	r3, r3
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	3301      	adds	r3, #1
 8003d90:	f003 021f 	and.w	r2, r3, #31
 8003d94:	4613      	mov	r3, r2
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	4413      	add	r3, r2
 8003d9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	e07e      	b.n	8003e9e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d107      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x5c8>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	0e9b      	lsrs	r3, r3, #26
 8003db2:	3301      	adds	r3, #1
 8003db4:	069b      	lsls	r3, r3, #26
 8003db6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dba:	e015      	b.n	8003de8 <HAL_ADC_ConfigChannel+0x5f4>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc4:	fa93 f3a3 	rbit	r3, r3
 8003dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dcc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003dd4:	2320      	movs	r3, #32
 8003dd6:	e003      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dda:	fab3 f383 	clz	r3, r3
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	3301      	adds	r3, #1
 8003de2:	069b      	lsls	r3, r3, #26
 8003de4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d109      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x614>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	0e9b      	lsrs	r3, r3, #26
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	f003 031f 	and.w	r3, r3, #31
 8003e00:	2101      	movs	r1, #1
 8003e02:	fa01 f303 	lsl.w	r3, r1, r3
 8003e06:	e017      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x644>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	fa93 f3a3 	rbit	r3, r3
 8003e14:	61fb      	str	r3, [r7, #28]
  return result;
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003e20:	2320      	movs	r3, #32
 8003e22:	e003      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e26:	fab3 f383 	clz	r3, r3
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	f003 031f 	and.w	r3, r3, #31
 8003e32:	2101      	movs	r1, #1
 8003e34:	fa01 f303 	lsl.w	r3, r1, r3
 8003e38:	ea42 0103 	orr.w	r1, r2, r3
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10d      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x670>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	0e9b      	lsrs	r3, r3, #26
 8003e4e:	3301      	adds	r3, #1
 8003e50:	f003 021f 	and.w	r2, r3, #31
 8003e54:	4613      	mov	r3, r2
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	4413      	add	r3, r2
 8003e5a:	3b1e      	subs	r3, #30
 8003e5c:	051b      	lsls	r3, r3, #20
 8003e5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e62:	e01b      	b.n	8003e9c <HAL_ADC_ConfigChannel+0x6a8>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	fa93 f3a3 	rbit	r3, r3
 8003e70:	613b      	str	r3, [r7, #16]
  return result;
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003e7c:	2320      	movs	r3, #32
 8003e7e:	e003      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	fab3 f383 	clz	r3, r3
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	3301      	adds	r3, #1
 8003e8a:	f003 021f 	and.w	r2, r3, #31
 8003e8e:	4613      	mov	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	4413      	add	r3, r2
 8003e94:	3b1e      	subs	r3, #30
 8003e96:	051b      	lsls	r3, r3, #20
 8003e98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e9c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	f7ff f8eb 	bl	800307e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b09      	ldr	r3, [pc, #36]	@ (8003ed4 <HAL_ADC_ConfigChannel+0x6e0>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80be 	beq.w	8004032 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ebe:	d004      	beq.n	8003eca <HAL_ADC_ConfigChannel+0x6d6>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a04      	ldr	r2, [pc, #16]	@ (8003ed8 <HAL_ADC_ConfigChannel+0x6e4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d10a      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0x6ec>
 8003eca:	4b04      	ldr	r3, [pc, #16]	@ (8003edc <HAL_ADC_ConfigChannel+0x6e8>)
 8003ecc:	e009      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x6ee>
 8003ece:	bf00      	nop
 8003ed0:	407f0000 	.word	0x407f0000
 8003ed4:	80080000 	.word	0x80080000
 8003ed8:	50000100 	.word	0x50000100
 8003edc:	50000300 	.word	0x50000300
 8003ee0:	4b59      	ldr	r3, [pc, #356]	@ (8004048 <HAL_ADC_ConfigChannel+0x854>)
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe ffe0 	bl	8002ea8 <LL_ADC_GetCommonPathInternalCh>
 8003ee8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a56      	ldr	r2, [pc, #344]	@ (800404c <HAL_ADC_ConfigChannel+0x858>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <HAL_ADC_ConfigChannel+0x70c>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a55      	ldr	r2, [pc, #340]	@ (8004050 <HAL_ADC_ConfigChannel+0x85c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d13a      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d134      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f14:	d005      	beq.n	8003f22 <HAL_ADC_ConfigChannel+0x72e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a4e      	ldr	r2, [pc, #312]	@ (8004054 <HAL_ADC_ConfigChannel+0x860>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	f040 8085 	bne.w	800402c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f2a:	d004      	beq.n	8003f36 <HAL_ADC_ConfigChannel+0x742>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a49      	ldr	r2, [pc, #292]	@ (8004058 <HAL_ADC_ConfigChannel+0x864>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d101      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x746>
 8003f36:	4a49      	ldr	r2, [pc, #292]	@ (800405c <HAL_ADC_ConfigChannel+0x868>)
 8003f38:	e000      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x748>
 8003f3a:	4a43      	ldr	r2, [pc, #268]	@ (8004048 <HAL_ADC_ConfigChannel+0x854>)
 8003f3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f44:	4619      	mov	r1, r3
 8003f46:	4610      	mov	r0, r2
 8003f48:	f7fe ff9b 	bl	8002e82 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f4c:	4b44      	ldr	r3, [pc, #272]	@ (8004060 <HAL_ADC_ConfigChannel+0x86c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	099b      	lsrs	r3, r3, #6
 8003f52:	4a44      	ldr	r2, [pc, #272]	@ (8004064 <HAL_ADC_ConfigChannel+0x870>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	099b      	lsrs	r3, r3, #6
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f66:	e002      	b.n	8003f6e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1f9      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f74:	e05a      	b.n	800402c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a3b      	ldr	r2, [pc, #236]	@ (8004068 <HAL_ADC_ConfigChannel+0x874>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d125      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d11f      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a31      	ldr	r2, [pc, #196]	@ (8004058 <HAL_ADC_ConfigChannel+0x864>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d104      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x7ac>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a34      	ldr	r2, [pc, #208]	@ (800406c <HAL_ADC_ConfigChannel+0x878>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d047      	beq.n	8004030 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fa8:	d004      	beq.n	8003fb4 <HAL_ADC_ConfigChannel+0x7c0>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a2a      	ldr	r2, [pc, #168]	@ (8004058 <HAL_ADC_ConfigChannel+0x864>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d101      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x7c4>
 8003fb4:	4a29      	ldr	r2, [pc, #164]	@ (800405c <HAL_ADC_ConfigChannel+0x868>)
 8003fb6:	e000      	b.n	8003fba <HAL_ADC_ConfigChannel+0x7c6>
 8003fb8:	4a23      	ldr	r2, [pc, #140]	@ (8004048 <HAL_ADC_ConfigChannel+0x854>)
 8003fba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	f7fe ff5c 	bl	8002e82 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fca:	e031      	b.n	8004030 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a27      	ldr	r2, [pc, #156]	@ (8004070 <HAL_ADC_ConfigChannel+0x87c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d12d      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d127      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8004058 <HAL_ADC_ConfigChannel+0x864>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d022      	beq.n	8004032 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ff4:	d004      	beq.n	8004000 <HAL_ADC_ConfigChannel+0x80c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a17      	ldr	r2, [pc, #92]	@ (8004058 <HAL_ADC_ConfigChannel+0x864>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d101      	bne.n	8004004 <HAL_ADC_ConfigChannel+0x810>
 8004000:	4a16      	ldr	r2, [pc, #88]	@ (800405c <HAL_ADC_ConfigChannel+0x868>)
 8004002:	e000      	b.n	8004006 <HAL_ADC_ConfigChannel+0x812>
 8004004:	4a10      	ldr	r2, [pc, #64]	@ (8004048 <HAL_ADC_ConfigChannel+0x854>)
 8004006:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800400a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800400e:	4619      	mov	r1, r3
 8004010:	4610      	mov	r0, r2
 8004012:	f7fe ff36 	bl	8002e82 <LL_ADC_SetCommonPathInternalCh>
 8004016:	e00c      	b.n	8004032 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401c:	f043 0220 	orr.w	r2, r3, #32
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800402a:	e002      	b.n	8004032 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800402c:	bf00      	nop
 800402e:	e000      	b.n	8004032 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004030:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800403a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800403e:	4618      	mov	r0, r3
 8004040:	37d8      	adds	r7, #216	@ 0xd8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	50000700 	.word	0x50000700
 800404c:	c3210000 	.word	0xc3210000
 8004050:	90c00010 	.word	0x90c00010
 8004054:	50000600 	.word	0x50000600
 8004058:	50000100 	.word	0x50000100
 800405c:	50000300 	.word	0x50000300
 8004060:	2000000c 	.word	0x2000000c
 8004064:	053e2d63 	.word	0x053e2d63
 8004068:	c7520000 	.word	0xc7520000
 800406c:	50000500 	.word	0x50000500
 8004070:	cb840000 	.word	0xcb840000

08004074 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800407c:	2300      	movs	r3, #0
 800407e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff f8b9 	bl	80031fc <LL_ADC_IsEnabled>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d176      	bne.n	800417e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	4b3c      	ldr	r3, [pc, #240]	@ (8004188 <ADC_Enable+0x114>)
 8004098:	4013      	ands	r3, r2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00d      	beq.n	80040ba <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a2:	f043 0210 	orr.w	r2, r3, #16
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ae:	f043 0201 	orr.w	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e062      	b.n	8004180 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff f888 	bl	80031d4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040cc:	d004      	beq.n	80040d8 <ADC_Enable+0x64>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a2e      	ldr	r2, [pc, #184]	@ (800418c <ADC_Enable+0x118>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d101      	bne.n	80040dc <ADC_Enable+0x68>
 80040d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004190 <ADC_Enable+0x11c>)
 80040da:	e000      	b.n	80040de <ADC_Enable+0x6a>
 80040dc:	4b2d      	ldr	r3, [pc, #180]	@ (8004194 <ADC_Enable+0x120>)
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fe fee2 	bl	8002ea8 <LL_ADC_GetCommonPathInternalCh>
 80040e4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80040e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d013      	beq.n	8004116 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004198 <ADC_Enable+0x124>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	099b      	lsrs	r3, r3, #6
 80040f4:	4a29      	ldr	r2, [pc, #164]	@ (800419c <ADC_Enable+0x128>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	099b      	lsrs	r3, r3, #6
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	4613      	mov	r3, r2
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004108:	e002      	b.n	8004110 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	3b01      	subs	r3, #1
 800410e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f9      	bne.n	800410a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004116:	f7fe fe73 	bl	8002e00 <HAL_GetTick>
 800411a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800411c:	e028      	b.n	8004170 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff f86a 	bl	80031fc <LL_ADC_IsEnabled>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d104      	bne.n	8004138 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff f84e 	bl	80031d4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004138:	f7fe fe62 	bl	8002e00 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d914      	bls.n	8004170 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b01      	cmp	r3, #1
 8004152:	d00d      	beq.n	8004170 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004158:	f043 0210 	orr.w	r2, r3, #16
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004164:	f043 0201 	orr.w	r2, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e007      	b.n	8004180 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b01      	cmp	r3, #1
 800417c:	d1cf      	bne.n	800411e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	8000003f 	.word	0x8000003f
 800418c:	50000100 	.word	0x50000100
 8004190:	50000300 	.word	0x50000300
 8004194:	50000700 	.word	0x50000700
 8004198:	2000000c 	.word	0x2000000c
 800419c:	053e2d63 	.word	0x053e2d63

080041a0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d14b      	bne.n	8004252 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041be:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d021      	beq.n	8004218 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fe ff11 	bl	8003000 <LL_ADC_REG_IsTriggerSourceSWStart>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d032      	beq.n	800424a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d12b      	bne.n	800424a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004202:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d11f      	bne.n	800424a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800420e:	f043 0201 	orr.w	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004216:	e018      	b.n	800424a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d111      	bne.n	800424a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800422a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004236:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d105      	bne.n	800424a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004242:	f043 0201 	orr.w	r2, r3, #1
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7ff fab4 	bl	80037b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004250:	e00e      	b.n	8004270 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004256:	f003 0310 	and.w	r3, r3, #16
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7ff fabe 	bl	80037e0 <HAL_ADC_ErrorCallback>
}
 8004264:	e004      	b.n	8004270 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800426a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4798      	blx	r3
}
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004284:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f7ff faa0 	bl	80037cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800428c:	bf00      	nop
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042b2:	f043 0204 	orr.w	r2, r3, #4
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f7ff fa90 	bl	80037e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042c0:	bf00      	nop
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <LL_ADC_IsEnabled>:
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <LL_ADC_IsEnabled+0x18>
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <LL_ADC_IsEnabled+0x1a>
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <LL_ADC_REG_IsConversionOngoing>:
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d101      	bne.n	8004306 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004314:	b590      	push	{r4, r7, lr}
 8004316:	b0a1      	sub	sp, #132	@ 0x84
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800432e:	2302      	movs	r3, #2
 8004330:	e0e7      	b.n	8004502 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800433a:	2300      	movs	r3, #0
 800433c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800433e:	2300      	movs	r3, #0
 8004340:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800434a:	d102      	bne.n	8004352 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800434c:	4b6f      	ldr	r3, [pc, #444]	@ (800450c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	e009      	b.n	8004366 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a6e      	ldr	r2, [pc, #440]	@ (8004510 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d102      	bne.n	8004362 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800435c:	4b6d      	ldr	r3, [pc, #436]	@ (8004514 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	e001      	b.n	8004366 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004362:	2300      	movs	r3, #0
 8004364:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10b      	bne.n	8004384 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004370:	f043 0220 	orr.w	r2, r3, #32
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0be      	b.n	8004502 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff ffb1 	bl	80042ee <LL_ADC_REG_IsConversionOngoing>
 800438c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff ffab 	bl	80042ee <LL_ADC_REG_IsConversionOngoing>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	f040 80a0 	bne.w	80044e0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80043a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f040 809c 	bne.w	80044e0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043b0:	d004      	beq.n	80043bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a55      	ldr	r2, [pc, #340]	@ (800450c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d101      	bne.n	80043c0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80043bc:	4b56      	ldr	r3, [pc, #344]	@ (8004518 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80043be:	e000      	b.n	80043c2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80043c0:	4b56      	ldr	r3, [pc, #344]	@ (800451c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80043c2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d04b      	beq.n	8004464 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80043cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	6859      	ldr	r1, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80043de:	035b      	lsls	r3, r3, #13
 80043e0:	430b      	orrs	r3, r1
 80043e2:	431a      	orrs	r2, r3
 80043e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043f0:	d004      	beq.n	80043fc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a45      	ldr	r2, [pc, #276]	@ (800450c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d10f      	bne.n	800441c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80043fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004400:	f7ff ff62 	bl	80042c8 <LL_ADC_IsEnabled>
 8004404:	4604      	mov	r4, r0
 8004406:	4841      	ldr	r0, [pc, #260]	@ (800450c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004408:	f7ff ff5e 	bl	80042c8 <LL_ADC_IsEnabled>
 800440c:	4603      	mov	r3, r0
 800440e:	4323      	orrs	r3, r4
 8004410:	2b00      	cmp	r3, #0
 8004412:	bf0c      	ite	eq
 8004414:	2301      	moveq	r3, #1
 8004416:	2300      	movne	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	e012      	b.n	8004442 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800441c:	483c      	ldr	r0, [pc, #240]	@ (8004510 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800441e:	f7ff ff53 	bl	80042c8 <LL_ADC_IsEnabled>
 8004422:	4604      	mov	r4, r0
 8004424:	483b      	ldr	r0, [pc, #236]	@ (8004514 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004426:	f7ff ff4f 	bl	80042c8 <LL_ADC_IsEnabled>
 800442a:	4603      	mov	r3, r0
 800442c:	431c      	orrs	r4, r3
 800442e:	483c      	ldr	r0, [pc, #240]	@ (8004520 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004430:	f7ff ff4a 	bl	80042c8 <LL_ADC_IsEnabled>
 8004434:	4603      	mov	r3, r0
 8004436:	4323      	orrs	r3, r4
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf0c      	ite	eq
 800443c:	2301      	moveq	r3, #1
 800443e:	2300      	movne	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d056      	beq.n	80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004446:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800444e:	f023 030f 	bic.w	r3, r3, #15
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	6811      	ldr	r1, [r2, #0]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	6892      	ldr	r2, [r2, #8]
 800445a:	430a      	orrs	r2, r1
 800445c:	431a      	orrs	r2, r3
 800445e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004460:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004462:	e047      	b.n	80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004464:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800446c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800446e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004478:	d004      	beq.n	8004484 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a23      	ldr	r2, [pc, #140]	@ (800450c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d10f      	bne.n	80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004484:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004488:	f7ff ff1e 	bl	80042c8 <LL_ADC_IsEnabled>
 800448c:	4604      	mov	r4, r0
 800448e:	481f      	ldr	r0, [pc, #124]	@ (800450c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004490:	f7ff ff1a 	bl	80042c8 <LL_ADC_IsEnabled>
 8004494:	4603      	mov	r3, r0
 8004496:	4323      	orrs	r3, r4
 8004498:	2b00      	cmp	r3, #0
 800449a:	bf0c      	ite	eq
 800449c:	2301      	moveq	r3, #1
 800449e:	2300      	movne	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	e012      	b.n	80044ca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80044a4:	481a      	ldr	r0, [pc, #104]	@ (8004510 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80044a6:	f7ff ff0f 	bl	80042c8 <LL_ADC_IsEnabled>
 80044aa:	4604      	mov	r4, r0
 80044ac:	4819      	ldr	r0, [pc, #100]	@ (8004514 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80044ae:	f7ff ff0b 	bl	80042c8 <LL_ADC_IsEnabled>
 80044b2:	4603      	mov	r3, r0
 80044b4:	431c      	orrs	r4, r3
 80044b6:	481a      	ldr	r0, [pc, #104]	@ (8004520 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80044b8:	f7ff ff06 	bl	80042c8 <LL_ADC_IsEnabled>
 80044bc:	4603      	mov	r3, r0
 80044be:	4323      	orrs	r3, r4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bf0c      	ite	eq
 80044c4:	2301      	moveq	r3, #1
 80044c6:	2300      	movne	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d012      	beq.n	80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80044ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80044d6:	f023 030f 	bic.w	r3, r3, #15
 80044da:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80044dc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044de:	e009      	b.n	80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e4:	f043 0220 	orr.w	r2, r3, #32
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80044f2:	e000      	b.n	80044f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80044fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004502:	4618      	mov	r0, r3
 8004504:	3784      	adds	r7, #132	@ 0x84
 8004506:	46bd      	mov	sp, r7
 8004508:	bd90      	pop	{r4, r7, pc}
 800450a:	bf00      	nop
 800450c:	50000100 	.word	0x50000100
 8004510:	50000400 	.word	0x50000400
 8004514:	50000500 	.word	0x50000500
 8004518:	50000300 	.word	0x50000300
 800451c:	50000700 	.word	0x50000700
 8004520:	50000600 	.word	0x50000600

08004524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004534:	4b0c      	ldr	r3, [pc, #48]	@ (8004568 <__NVIC_SetPriorityGrouping+0x44>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004540:	4013      	ands	r3, r2
 8004542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800454c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004556:	4a04      	ldr	r2, [pc, #16]	@ (8004568 <__NVIC_SetPriorityGrouping+0x44>)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	60d3      	str	r3, [r2, #12]
}
 800455c:	bf00      	nop
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	e000ed00 	.word	0xe000ed00

0800456c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004570:	4b04      	ldr	r3, [pc, #16]	@ (8004584 <__NVIC_GetPriorityGrouping+0x18>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	0a1b      	lsrs	r3, r3, #8
 8004576:	f003 0307 	and.w	r3, r3, #7
}
 800457a:	4618      	mov	r0, r3
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	e000ed00 	.word	0xe000ed00

08004588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	4603      	mov	r3, r0
 8004590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004596:	2b00      	cmp	r3, #0
 8004598:	db0b      	blt.n	80045b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800459a:	79fb      	ldrb	r3, [r7, #7]
 800459c:	f003 021f 	and.w	r2, r3, #31
 80045a0:	4907      	ldr	r1, [pc, #28]	@ (80045c0 <__NVIC_EnableIRQ+0x38>)
 80045a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	2001      	movs	r0, #1
 80045aa:	fa00 f202 	lsl.w	r2, r0, r2
 80045ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	e000e100 	.word	0xe000e100

080045c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	4603      	mov	r3, r0
 80045cc:	6039      	str	r1, [r7, #0]
 80045ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	db0a      	blt.n	80045ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	490c      	ldr	r1, [pc, #48]	@ (8004610 <__NVIC_SetPriority+0x4c>)
 80045de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e2:	0112      	lsls	r2, r2, #4
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	440b      	add	r3, r1
 80045e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045ec:	e00a      	b.n	8004604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	4908      	ldr	r1, [pc, #32]	@ (8004614 <__NVIC_SetPriority+0x50>)
 80045f4:	79fb      	ldrb	r3, [r7, #7]
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	3b04      	subs	r3, #4
 80045fc:	0112      	lsls	r2, r2, #4
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	440b      	add	r3, r1
 8004602:	761a      	strb	r2, [r3, #24]
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	e000e100 	.word	0xe000e100
 8004614:	e000ed00 	.word	0xe000ed00

08004618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004618:	b480      	push	{r7}
 800461a:	b089      	sub	sp, #36	@ 0x24
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f1c3 0307 	rsb	r3, r3, #7
 8004632:	2b04      	cmp	r3, #4
 8004634:	bf28      	it	cs
 8004636:	2304      	movcs	r3, #4
 8004638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	3304      	adds	r3, #4
 800463e:	2b06      	cmp	r3, #6
 8004640:	d902      	bls.n	8004648 <NVIC_EncodePriority+0x30>
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	3b03      	subs	r3, #3
 8004646:	e000      	b.n	800464a <NVIC_EncodePriority+0x32>
 8004648:	2300      	movs	r3, #0
 800464a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800464c:	f04f 32ff 	mov.w	r2, #4294967295
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	43da      	mvns	r2, r3
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	401a      	ands	r2, r3
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004660:	f04f 31ff 	mov.w	r1, #4294967295
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	fa01 f303 	lsl.w	r3, r1, r3
 800466a:	43d9      	mvns	r1, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004670:	4313      	orrs	r3, r2
         );
}
 8004672:	4618      	mov	r0, r3
 8004674:	3724      	adds	r7, #36	@ 0x24
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
	...

08004680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3b01      	subs	r3, #1
 800468c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004690:	d301      	bcc.n	8004696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004692:	2301      	movs	r3, #1
 8004694:	e00f      	b.n	80046b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004696:	4a0a      	ldr	r2, [pc, #40]	@ (80046c0 <SysTick_Config+0x40>)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3b01      	subs	r3, #1
 800469c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800469e:	210f      	movs	r1, #15
 80046a0:	f04f 30ff 	mov.w	r0, #4294967295
 80046a4:	f7ff ff8e 	bl	80045c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046a8:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <SysTick_Config+0x40>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046ae:	4b04      	ldr	r3, [pc, #16]	@ (80046c0 <SysTick_Config+0x40>)
 80046b0:	2207      	movs	r2, #7
 80046b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	e000e010 	.word	0xe000e010

080046c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7ff ff29 	bl	8004524 <__NVIC_SetPriorityGrouping>
}
 80046d2:	bf00      	nop
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b086      	sub	sp, #24
 80046de:	af00      	add	r7, sp, #0
 80046e0:	4603      	mov	r3, r0
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	607a      	str	r2, [r7, #4]
 80046e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046e8:	f7ff ff40 	bl	800456c <__NVIC_GetPriorityGrouping>
 80046ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	6978      	ldr	r0, [r7, #20]
 80046f4:	f7ff ff90 	bl	8004618 <NVIC_EncodePriority>
 80046f8:	4602      	mov	r2, r0
 80046fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046fe:	4611      	mov	r1, r2
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff ff5f 	bl	80045c4 <__NVIC_SetPriority>
}
 8004706:	bf00      	nop
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b082      	sub	sp, #8
 8004712:	af00      	add	r7, sp, #0
 8004714:	4603      	mov	r3, r0
 8004716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff ff33 	bl	8004588 <__NVIC_EnableIRQ>
}
 8004722:	bf00      	nop
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7ff ffa4 	bl	8004680 <SysTick_Config>
 8004738:	4603      	mov	r3, r0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e08d      	b.n	8004872 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	4b47      	ldr	r3, [pc, #284]	@ (800487c <HAL_DMA_Init+0x138>)
 800475e:	429a      	cmp	r2, r3
 8004760:	d80f      	bhi.n	8004782 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	4b45      	ldr	r3, [pc, #276]	@ (8004880 <HAL_DMA_Init+0x13c>)
 800476a:	4413      	add	r3, r2
 800476c:	4a45      	ldr	r2, [pc, #276]	@ (8004884 <HAL_DMA_Init+0x140>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	091b      	lsrs	r3, r3, #4
 8004774:	009a      	lsls	r2, r3, #2
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a42      	ldr	r2, [pc, #264]	@ (8004888 <HAL_DMA_Init+0x144>)
 800477e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004780:	e00e      	b.n	80047a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	4b40      	ldr	r3, [pc, #256]	@ (800488c <HAL_DMA_Init+0x148>)
 800478a:	4413      	add	r3, r2
 800478c:	4a3d      	ldr	r2, [pc, #244]	@ (8004884 <HAL_DMA_Init+0x140>)
 800478e:	fba2 2303 	umull	r2, r3, r2, r3
 8004792:	091b      	lsrs	r3, r3, #4
 8004794:	009a      	lsls	r2, r3, #2
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a3c      	ldr	r2, [pc, #240]	@ (8004890 <HAL_DMA_Init+0x14c>)
 800479e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80047b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80047c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f9b6 	bl	8004b64 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004800:	d102      	bne.n	8004808 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800481c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d010      	beq.n	8004848 <HAL_DMA_Init+0x104>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b04      	cmp	r3, #4
 800482c:	d80c      	bhi.n	8004848 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f9d6 	bl	8004be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004844:	605a      	str	r2, [r3, #4]
 8004846:	e008      	b.n	800485a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40020407 	.word	0x40020407
 8004880:	bffdfff8 	.word	0xbffdfff8
 8004884:	cccccccd 	.word	0xcccccccd
 8004888:	40020000 	.word	0x40020000
 800488c:	bffdfbf8 	.word	0xbffdfbf8
 8004890:	40020400 	.word	0x40020400

08004894 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_DMA_Start_IT+0x20>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e066      	b.n	8004982 <HAL_DMA_Start_IT+0xee>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d155      	bne.n	8004974 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0201 	bic.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	68b9      	ldr	r1, [r7, #8]
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f8fb 	bl	8004ae8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d008      	beq.n	800490c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f042 020e 	orr.w	r2, r2, #14
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e00f      	b.n	800492c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0204 	bic.w	r2, r2, #4
 800491a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 020a 	orr.w	r2, r2, #10
 800492a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004944:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004948:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494e:	2b00      	cmp	r3, #0
 8004950:	d007      	beq.n	8004962 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004960:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f042 0201 	orr.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	e005      	b.n	8004980 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800497c:	2302      	movs	r3, #2
 800497e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004980:	7dfb      	ldrb	r3, [r7, #23]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3718      	adds	r7, #24
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	2204      	movs	r2, #4
 80049ac:	409a      	lsls	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4013      	ands	r3, r2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d026      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x7a>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d021      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d107      	bne.n	80049de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0204 	bic.w	r2, r2, #4
 80049dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e2:	f003 021f 	and.w	r2, r3, #31
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ea:	2104      	movs	r1, #4
 80049ec:	fa01 f202 	lsl.w	r2, r1, r2
 80049f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d071      	beq.n	8004ade <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004a02:	e06c      	b.n	8004ade <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	409a      	lsls	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4013      	ands	r3, r2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d02e      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d029      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10b      	bne.n	8004a48 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 020a 	bic.w	r2, r2, #10
 8004a3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4c:	f003 021f 	and.w	r2, r3, #31
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a54:	2102      	movs	r1, #2
 8004a56:	fa01 f202 	lsl.w	r2, r1, r2
 8004a5a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d038      	beq.n	8004ade <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004a74:	e033      	b.n	8004ade <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	2208      	movs	r2, #8
 8004a80:	409a      	lsls	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4013      	ands	r3, r2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d02a      	beq.n	8004ae0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d025      	beq.n	8004ae0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 020e 	bic.w	r2, r2, #14
 8004aa2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa8:	f003 021f 	and.w	r2, r3, #31
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d004      	beq.n	8004ae0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004ade:	bf00      	nop
 8004ae0:	bf00      	nop
}
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004afe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d004      	beq.n	8004b12 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b10:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b16:	f003 021f 	and.w	r2, r3, #31
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1e:	2101      	movs	r1, #1
 8004b20:	fa01 f202 	lsl.w	r2, r1, r2
 8004b24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	2b10      	cmp	r3, #16
 8004b34:	d108      	bne.n	8004b48 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b46:	e007      	b.n	8004b58 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	60da      	str	r2, [r3, #12]
}
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	461a      	mov	r2, r3
 8004b72:	4b16      	ldr	r3, [pc, #88]	@ (8004bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d802      	bhi.n	8004b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004b78:	4b15      	ldr	r3, [pc, #84]	@ (8004bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	e001      	b.n	8004b82 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004b7e:	4b15      	ldr	r3, [pc, #84]	@ (8004bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004b80:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	3b08      	subs	r3, #8
 8004b8e:	4a12      	ldr	r2, [pc, #72]	@ (8004bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004b90:	fba2 2303 	umull	r2, r3, r2, r3
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9c:	089b      	lsrs	r3, r3, #2
 8004b9e:	009a      	lsls	r2, r3, #2
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a0b      	ldr	r2, [pc, #44]	@ (8004bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004bae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f003 031f 	and.w	r3, r3, #31
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	409a      	lsls	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	40020407 	.word	0x40020407
 8004bd0:	40020800 	.word	0x40020800
 8004bd4:	40020820 	.word	0x40020820
 8004bd8:	cccccccd 	.word	0xcccccccd
 8004bdc:	40020880 	.word	0x40020880

08004be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a08      	ldr	r2, [pc, #32]	@ (8004c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c02:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	f003 031f 	and.w	r3, r3, #31
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004c14:	bf00      	nop
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	1000823f 	.word	0x1000823f
 8004c24:	40020940 	.word	0x40020940

08004c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c36:	e15a      	b.n	8004eee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	fa01 f303 	lsl.w	r3, r1, r3
 8004c44:	4013      	ands	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 814c 	beq.w	8004ee8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f003 0303 	and.w	r3, r3, #3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d005      	beq.n	8004c68 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d130      	bne.n	8004cca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	2203      	movs	r2, #3
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4013      	ands	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	091b      	lsrs	r3, r3, #4
 8004cb4:	f003 0201 	and.w	r2, r3, #1
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d017      	beq.n	8004d06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	2203      	movs	r2, #3
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	43db      	mvns	r3, r3
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4013      	ands	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d123      	bne.n	8004d5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	08da      	lsrs	r2, r3, #3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3208      	adds	r2, #8
 8004d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	220f      	movs	r2, #15
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4013      	ands	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	691a      	ldr	r2, [r3, #16]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	08da      	lsrs	r2, r3, #3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3208      	adds	r2, #8
 8004d54:	6939      	ldr	r1, [r7, #16]
 8004d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	2203      	movs	r2, #3
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f003 0203 	and.w	r2, r3, #3
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 80a6 	beq.w	8004ee8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d9c:	4b5b      	ldr	r3, [pc, #364]	@ (8004f0c <HAL_GPIO_Init+0x2e4>)
 8004d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da0:	4a5a      	ldr	r2, [pc, #360]	@ (8004f0c <HAL_GPIO_Init+0x2e4>)
 8004da2:	f043 0301 	orr.w	r3, r3, #1
 8004da6:	6613      	str	r3, [r2, #96]	@ 0x60
 8004da8:	4b58      	ldr	r3, [pc, #352]	@ (8004f0c <HAL_GPIO_Init+0x2e4>)
 8004daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	60bb      	str	r3, [r7, #8]
 8004db2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004db4:	4a56      	ldr	r2, [pc, #344]	@ (8004f10 <HAL_GPIO_Init+0x2e8>)
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	089b      	lsrs	r3, r3, #2
 8004dba:	3302      	adds	r3, #2
 8004dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	220f      	movs	r2, #15
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004dde:	d01f      	beq.n	8004e20 <HAL_GPIO_Init+0x1f8>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a4c      	ldr	r2, [pc, #304]	@ (8004f14 <HAL_GPIO_Init+0x2ec>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d019      	beq.n	8004e1c <HAL_GPIO_Init+0x1f4>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a4b      	ldr	r2, [pc, #300]	@ (8004f18 <HAL_GPIO_Init+0x2f0>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d013      	beq.n	8004e18 <HAL_GPIO_Init+0x1f0>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a4a      	ldr	r2, [pc, #296]	@ (8004f1c <HAL_GPIO_Init+0x2f4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00d      	beq.n	8004e14 <HAL_GPIO_Init+0x1ec>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a49      	ldr	r2, [pc, #292]	@ (8004f20 <HAL_GPIO_Init+0x2f8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d007      	beq.n	8004e10 <HAL_GPIO_Init+0x1e8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a48      	ldr	r2, [pc, #288]	@ (8004f24 <HAL_GPIO_Init+0x2fc>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d101      	bne.n	8004e0c <HAL_GPIO_Init+0x1e4>
 8004e08:	2305      	movs	r3, #5
 8004e0a:	e00a      	b.n	8004e22 <HAL_GPIO_Init+0x1fa>
 8004e0c:	2306      	movs	r3, #6
 8004e0e:	e008      	b.n	8004e22 <HAL_GPIO_Init+0x1fa>
 8004e10:	2304      	movs	r3, #4
 8004e12:	e006      	b.n	8004e22 <HAL_GPIO_Init+0x1fa>
 8004e14:	2303      	movs	r3, #3
 8004e16:	e004      	b.n	8004e22 <HAL_GPIO_Init+0x1fa>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e002      	b.n	8004e22 <HAL_GPIO_Init+0x1fa>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <HAL_GPIO_Init+0x1fa>
 8004e20:	2300      	movs	r3, #0
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	f002 0203 	and.w	r2, r2, #3
 8004e28:	0092      	lsls	r2, r2, #2
 8004e2a:	4093      	lsls	r3, r2
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e32:	4937      	ldr	r1, [pc, #220]	@ (8004f10 <HAL_GPIO_Init+0x2e8>)
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	089b      	lsrs	r3, r3, #2
 8004e38:	3302      	adds	r3, #2
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e40:	4b39      	ldr	r3, [pc, #228]	@ (8004f28 <HAL_GPIO_Init+0x300>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e64:	4a30      	ldr	r2, [pc, #192]	@ (8004f28 <HAL_GPIO_Init+0x300>)
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8004f28 <HAL_GPIO_Init+0x300>)
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	43db      	mvns	r3, r3
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4013      	ands	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e8e:	4a26      	ldr	r2, [pc, #152]	@ (8004f28 <HAL_GPIO_Init+0x300>)
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004e94:	4b24      	ldr	r3, [pc, #144]	@ (8004f28 <HAL_GPIO_Init+0x300>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8004f28 <HAL_GPIO_Init+0x300>)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8004f28 <HAL_GPIO_Init+0x300>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ee2:	4a11      	ldr	r2, [pc, #68]	@ (8004f28 <HAL_GPIO_Init+0x300>)
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	3301      	adds	r3, #1
 8004eec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f47f ae9d 	bne.w	8004c38 <HAL_GPIO_Init+0x10>
  }
}
 8004efe:	bf00      	nop
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	40010000 	.word	0x40010000
 8004f14:	48000400 	.word	0x48000400
 8004f18:	48000800 	.word	0x48000800
 8004f1c:	48000c00 	.word	0x48000c00
 8004f20:	48001000 	.word	0x48001000
 8004f24:	48001400 	.word	0x48001400
 8004f28:	40010400 	.word	0x40010400

08004f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	807b      	strh	r3, [r7, #2]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f3c:	787b      	ldrb	r3, [r7, #1]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f42:	887a      	ldrh	r2, [r7, #2]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f48:	e002      	b.n	8004f50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f4a:	887a      	ldrh	r2, [r7, #2]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f6e:	887a      	ldrh	r2, [r7, #2]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4013      	ands	r3, r2
 8004f74:	041a      	lsls	r2, r3, #16
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	43d9      	mvns	r1, r3
 8004f7a:	887b      	ldrh	r3, [r7, #2]
 8004f7c:	400b      	ands	r3, r1
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	619a      	str	r2, [r3, #24]
}
 8004f84:	bf00      	nop
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f9a:	4b08      	ldr	r3, [pc, #32]	@ (8004fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f9c:	695a      	ldr	r2, [r3, #20]
 8004f9e:	88fb      	ldrh	r3, [r7, #6]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d006      	beq.n	8004fb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fa6:	4a05      	ldr	r2, [pc, #20]	@ (8004fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fa8:	88fb      	ldrh	r3, [r7, #6]
 8004faa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fac:	88fb      	ldrh	r3, [r7, #6]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fc fc42 	bl	8001838 <HAL_GPIO_EXTI_Callback>
  }
}
 8004fb4:	bf00      	nop
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40010400 	.word	0x40010400

08004fc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d141      	bne.n	8005052 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fce:	4b4b      	ldr	r3, [pc, #300]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fda:	d131      	bne.n	8005040 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fdc:	4b47      	ldr	r3, [pc, #284]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fe2:	4a46      	ldr	r2, [pc, #280]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fe8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fec:	4b43      	ldr	r3, [pc, #268]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ff4:	4a41      	ldr	r2, [pc, #260]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ffa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ffc:	4b40      	ldr	r3, [pc, #256]	@ (8005100 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2232      	movs	r2, #50	@ 0x32
 8005002:	fb02 f303 	mul.w	r3, r2, r3
 8005006:	4a3f      	ldr	r2, [pc, #252]	@ (8005104 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005008:	fba2 2303 	umull	r2, r3, r2, r3
 800500c:	0c9b      	lsrs	r3, r3, #18
 800500e:	3301      	adds	r3, #1
 8005010:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005012:	e002      	b.n	800501a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	3b01      	subs	r3, #1
 8005018:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800501a:	4b38      	ldr	r3, [pc, #224]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005026:	d102      	bne.n	800502e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f2      	bne.n	8005014 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800502e:	4b33      	ldr	r3, [pc, #204]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800503a:	d158      	bne.n	80050ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e057      	b.n	80050f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005040:	4b2e      	ldr	r3, [pc, #184]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005046:	4a2d      	ldr	r2, [pc, #180]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800504c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005050:	e04d      	b.n	80050ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005058:	d141      	bne.n	80050de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800505a:	4b28      	ldr	r3, [pc, #160]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005066:	d131      	bne.n	80050cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005068:	4b24      	ldr	r3, [pc, #144]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800506a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800506e:	4a23      	ldr	r2, [pc, #140]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005074:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005078:	4b20      	ldr	r3, [pc, #128]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005080:	4a1e      	ldr	r2, [pc, #120]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005082:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005086:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005088:	4b1d      	ldr	r3, [pc, #116]	@ (8005100 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2232      	movs	r2, #50	@ 0x32
 800508e:	fb02 f303 	mul.w	r3, r2, r3
 8005092:	4a1c      	ldr	r2, [pc, #112]	@ (8005104 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005094:	fba2 2303 	umull	r2, r3, r2, r3
 8005098:	0c9b      	lsrs	r3, r3, #18
 800509a:	3301      	adds	r3, #1
 800509c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800509e:	e002      	b.n	80050a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050a6:	4b15      	ldr	r3, [pc, #84]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050b2:	d102      	bne.n	80050ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f2      	bne.n	80050a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050ba:	4b10      	ldr	r3, [pc, #64]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050c6:	d112      	bne.n	80050ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e011      	b.n	80050f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050cc:	4b0b      	ldr	r3, [pc, #44]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050d2:	4a0a      	ldr	r2, [pc, #40]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80050dc:	e007      	b.n	80050ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050de:	4b07      	ldr	r3, [pc, #28]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050e6:	4a05      	ldr	r2, [pc, #20]	@ (80050fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	40007000 	.word	0x40007000
 8005100:	2000000c 	.word	0x2000000c
 8005104:	431bde83 	.word	0x431bde83

08005108 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800510c:	4b05      	ldr	r3, [pc, #20]	@ (8005124 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	4a04      	ldr	r2, [pc, #16]	@ (8005124 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005112:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005116:	6093      	str	r3, [r2, #8]
}
 8005118:	bf00      	nop
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40007000 	.word	0x40007000

08005128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e2fe      	b.n	8005738 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d075      	beq.n	8005232 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005146:	4b97      	ldr	r3, [pc, #604]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 030c 	and.w	r3, r3, #12
 800514e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005150:	4b94      	ldr	r3, [pc, #592]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b0c      	cmp	r3, #12
 800515e:	d102      	bne.n	8005166 <HAL_RCC_OscConfig+0x3e>
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2b03      	cmp	r3, #3
 8005164:	d002      	beq.n	800516c <HAL_RCC_OscConfig+0x44>
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	2b08      	cmp	r3, #8
 800516a:	d10b      	bne.n	8005184 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800516c:	4b8d      	ldr	r3, [pc, #564]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d05b      	beq.n	8005230 <HAL_RCC_OscConfig+0x108>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d157      	bne.n	8005230 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e2d9      	b.n	8005738 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800518c:	d106      	bne.n	800519c <HAL_RCC_OscConfig+0x74>
 800518e:	4b85      	ldr	r3, [pc, #532]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a84      	ldr	r2, [pc, #528]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 8005194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	e01d      	b.n	80051d8 <HAL_RCC_OscConfig+0xb0>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051a4:	d10c      	bne.n	80051c0 <HAL_RCC_OscConfig+0x98>
 80051a6:	4b7f      	ldr	r3, [pc, #508]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a7e      	ldr	r2, [pc, #504]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 80051ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	4b7c      	ldr	r3, [pc, #496]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a7b      	ldr	r2, [pc, #492]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 80051b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	e00b      	b.n	80051d8 <HAL_RCC_OscConfig+0xb0>
 80051c0:	4b78      	ldr	r3, [pc, #480]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a77      	ldr	r2, [pc, #476]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 80051c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	4b75      	ldr	r3, [pc, #468]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a74      	ldr	r2, [pc, #464]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 80051d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d013      	beq.n	8005208 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e0:	f7fd fe0e 	bl	8002e00 <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051e8:	f7fd fe0a 	bl	8002e00 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b64      	cmp	r3, #100	@ 0x64
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e29e      	b.n	8005738 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051fa:	4b6a      	ldr	r3, [pc, #424]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0f0      	beq.n	80051e8 <HAL_RCC_OscConfig+0xc0>
 8005206:	e014      	b.n	8005232 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005208:	f7fd fdfa 	bl	8002e00 <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005210:	f7fd fdf6 	bl	8002e00 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b64      	cmp	r3, #100	@ 0x64
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e28a      	b.n	8005738 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005222:	4b60      	ldr	r3, [pc, #384]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1f0      	bne.n	8005210 <HAL_RCC_OscConfig+0xe8>
 800522e:	e000      	b.n	8005232 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d075      	beq.n	800532a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800523e:	4b59      	ldr	r3, [pc, #356]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 030c 	and.w	r3, r3, #12
 8005246:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005248:	4b56      	ldr	r3, [pc, #344]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0303 	and.w	r3, r3, #3
 8005250:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	2b0c      	cmp	r3, #12
 8005256:	d102      	bne.n	800525e <HAL_RCC_OscConfig+0x136>
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2b02      	cmp	r3, #2
 800525c:	d002      	beq.n	8005264 <HAL_RCC_OscConfig+0x13c>
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	2b04      	cmp	r3, #4
 8005262:	d11f      	bne.n	80052a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005264:	4b4f      	ldr	r3, [pc, #316]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800526c:	2b00      	cmp	r3, #0
 800526e:	d005      	beq.n	800527c <HAL_RCC_OscConfig+0x154>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e25d      	b.n	8005738 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800527c:	4b49      	ldr	r3, [pc, #292]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	061b      	lsls	r3, r3, #24
 800528a:	4946      	ldr	r1, [pc, #280]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 800528c:	4313      	orrs	r3, r2
 800528e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005290:	4b45      	ldr	r3, [pc, #276]	@ (80053a8 <HAL_RCC_OscConfig+0x280>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4618      	mov	r0, r3
 8005296:	f7fd fd67 	bl	8002d68 <HAL_InitTick>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d043      	beq.n	8005328 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e249      	b.n	8005738 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d023      	beq.n	80052f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052ac:	4b3d      	ldr	r3, [pc, #244]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a3c      	ldr	r2, [pc, #240]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 80052b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b8:	f7fd fda2 	bl	8002e00 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052c0:	f7fd fd9e 	bl	8002e00 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e232      	b.n	8005738 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052d2:	4b34      	ldr	r3, [pc, #208]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0f0      	beq.n	80052c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052de:	4b31      	ldr	r3, [pc, #196]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	061b      	lsls	r3, r3, #24
 80052ec:	492d      	ldr	r1, [pc, #180]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	604b      	str	r3, [r1, #4]
 80052f2:	e01a      	b.n	800532a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052f4:	4b2b      	ldr	r3, [pc, #172]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a2a      	ldr	r2, [pc, #168]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 80052fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005300:	f7fd fd7e 	bl	8002e00 <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005308:	f7fd fd7a 	bl	8002e00 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e20e      	b.n	8005738 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800531a:	4b22      	ldr	r3, [pc, #136]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1f0      	bne.n	8005308 <HAL_RCC_OscConfig+0x1e0>
 8005326:	e000      	b.n	800532a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005328:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0308 	and.w	r3, r3, #8
 8005332:	2b00      	cmp	r3, #0
 8005334:	d041      	beq.n	80053ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d01c      	beq.n	8005378 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800533e:	4b19      	ldr	r3, [pc, #100]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 8005340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005344:	4a17      	ldr	r2, [pc, #92]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 8005346:	f043 0301 	orr.w	r3, r3, #1
 800534a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534e:	f7fd fd57 	bl	8002e00 <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005356:	f7fd fd53 	bl	8002e00 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e1e7      	b.n	8005738 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005368:	4b0e      	ldr	r3, [pc, #56]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 800536a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0ef      	beq.n	8005356 <HAL_RCC_OscConfig+0x22e>
 8005376:	e020      	b.n	80053ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005378:	4b0a      	ldr	r3, [pc, #40]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 800537a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800537e:	4a09      	ldr	r2, [pc, #36]	@ (80053a4 <HAL_RCC_OscConfig+0x27c>)
 8005380:	f023 0301 	bic.w	r3, r3, #1
 8005384:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005388:	f7fd fd3a 	bl	8002e00 <HAL_GetTick>
 800538c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800538e:	e00d      	b.n	80053ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005390:	f7fd fd36 	bl	8002e00 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d906      	bls.n	80053ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e1ca      	b.n	8005738 <HAL_RCC_OscConfig+0x610>
 80053a2:	bf00      	nop
 80053a4:	40021000 	.word	0x40021000
 80053a8:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053ac:	4b8c      	ldr	r3, [pc, #560]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 80053ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1ea      	bne.n	8005390 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 80a6 	beq.w	8005514 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053c8:	2300      	movs	r3, #0
 80053ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053cc:	4b84      	ldr	r3, [pc, #528]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 80053ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <HAL_RCC_OscConfig+0x2b4>
 80053d8:	2301      	movs	r3, #1
 80053da:	e000      	b.n	80053de <HAL_RCC_OscConfig+0x2b6>
 80053dc:	2300      	movs	r3, #0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00d      	beq.n	80053fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053e2:	4b7f      	ldr	r3, [pc, #508]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 80053e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e6:	4a7e      	ldr	r2, [pc, #504]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 80053e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80053ee:	4b7c      	ldr	r3, [pc, #496]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 80053f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053fa:	2301      	movs	r3, #1
 80053fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053fe:	4b79      	ldr	r3, [pc, #484]	@ (80055e4 <HAL_RCC_OscConfig+0x4bc>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005406:	2b00      	cmp	r3, #0
 8005408:	d118      	bne.n	800543c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800540a:	4b76      	ldr	r3, [pc, #472]	@ (80055e4 <HAL_RCC_OscConfig+0x4bc>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a75      	ldr	r2, [pc, #468]	@ (80055e4 <HAL_RCC_OscConfig+0x4bc>)
 8005410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005416:	f7fd fcf3 	bl	8002e00 <HAL_GetTick>
 800541a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800541c:	e008      	b.n	8005430 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800541e:	f7fd fcef 	bl	8002e00 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e183      	b.n	8005738 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005430:	4b6c      	ldr	r3, [pc, #432]	@ (80055e4 <HAL_RCC_OscConfig+0x4bc>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0f0      	beq.n	800541e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d108      	bne.n	8005456 <HAL_RCC_OscConfig+0x32e>
 8005444:	4b66      	ldr	r3, [pc, #408]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 8005446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800544a:	4a65      	ldr	r2, [pc, #404]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 800544c:	f043 0301 	orr.w	r3, r3, #1
 8005450:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005454:	e024      	b.n	80054a0 <HAL_RCC_OscConfig+0x378>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b05      	cmp	r3, #5
 800545c:	d110      	bne.n	8005480 <HAL_RCC_OscConfig+0x358>
 800545e:	4b60      	ldr	r3, [pc, #384]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 8005460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005464:	4a5e      	ldr	r2, [pc, #376]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 8005466:	f043 0304 	orr.w	r3, r3, #4
 800546a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800546e:	4b5c      	ldr	r3, [pc, #368]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 8005470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005474:	4a5a      	ldr	r2, [pc, #360]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 8005476:	f043 0301 	orr.w	r3, r3, #1
 800547a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800547e:	e00f      	b.n	80054a0 <HAL_RCC_OscConfig+0x378>
 8005480:	4b57      	ldr	r3, [pc, #348]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 8005482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005486:	4a56      	ldr	r2, [pc, #344]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 8005488:	f023 0301 	bic.w	r3, r3, #1
 800548c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005490:	4b53      	ldr	r3, [pc, #332]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 8005492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005496:	4a52      	ldr	r2, [pc, #328]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 8005498:	f023 0304 	bic.w	r3, r3, #4
 800549c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d016      	beq.n	80054d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a8:	f7fd fcaa 	bl	8002e00 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054ae:	e00a      	b.n	80054c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b0:	f7fd fca6 	bl	8002e00 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054be:	4293      	cmp	r3, r2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e138      	b.n	8005738 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c6:	4b46      	ldr	r3, [pc, #280]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 80054c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0ed      	beq.n	80054b0 <HAL_RCC_OscConfig+0x388>
 80054d4:	e015      	b.n	8005502 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d6:	f7fd fc93 	bl	8002e00 <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054dc:	e00a      	b.n	80054f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054de:	f7fd fc8f 	bl	8002e00 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e121      	b.n	8005738 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054f4:	4b3a      	ldr	r3, [pc, #232]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 80054f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1ed      	bne.n	80054de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005502:	7ffb      	ldrb	r3, [r7, #31]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d105      	bne.n	8005514 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005508:	4b35      	ldr	r3, [pc, #212]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 800550a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550c:	4a34      	ldr	r2, [pc, #208]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 800550e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005512:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0320 	and.w	r3, r3, #32
 800551c:	2b00      	cmp	r3, #0
 800551e:	d03c      	beq.n	800559a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01c      	beq.n	8005562 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005528:	4b2d      	ldr	r3, [pc, #180]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 800552a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800552e:	4a2c      	ldr	r2, [pc, #176]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 8005530:	f043 0301 	orr.w	r3, r3, #1
 8005534:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005538:	f7fd fc62 	bl	8002e00 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005540:	f7fd fc5e 	bl	8002e00 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e0f2      	b.n	8005738 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005552:	4b23      	ldr	r3, [pc, #140]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 8005554:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0ef      	beq.n	8005540 <HAL_RCC_OscConfig+0x418>
 8005560:	e01b      	b.n	800559a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005562:	4b1f      	ldr	r3, [pc, #124]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 8005564:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005568:	4a1d      	ldr	r2, [pc, #116]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 800556a:	f023 0301 	bic.w	r3, r3, #1
 800556e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005572:	f7fd fc45 	bl	8002e00 <HAL_GetTick>
 8005576:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005578:	e008      	b.n	800558c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800557a:	f7fd fc41 	bl	8002e00 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d901      	bls.n	800558c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e0d5      	b.n	8005738 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800558c:	4b14      	ldr	r3, [pc, #80]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 800558e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1ef      	bne.n	800557a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 80c9 	beq.w	8005736 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055a4:	4b0e      	ldr	r3, [pc, #56]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 030c 	and.w	r3, r3, #12
 80055ac:	2b0c      	cmp	r3, #12
 80055ae:	f000 8083 	beq.w	80056b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d15e      	bne.n	8005678 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ba:	4b09      	ldr	r3, [pc, #36]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a08      	ldr	r2, [pc, #32]	@ (80055e0 <HAL_RCC_OscConfig+0x4b8>)
 80055c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c6:	f7fd fc1b 	bl	8002e00 <HAL_GetTick>
 80055ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055cc:	e00c      	b.n	80055e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ce:	f7fd fc17 	bl	8002e00 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d905      	bls.n	80055e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e0ab      	b.n	8005738 <HAL_RCC_OscConfig+0x610>
 80055e0:	40021000 	.word	0x40021000
 80055e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055e8:	4b55      	ldr	r3, [pc, #340]	@ (8005740 <HAL_RCC_OscConfig+0x618>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1ec      	bne.n	80055ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055f4:	4b52      	ldr	r3, [pc, #328]	@ (8005740 <HAL_RCC_OscConfig+0x618>)
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	4b52      	ldr	r3, [pc, #328]	@ (8005744 <HAL_RCC_OscConfig+0x61c>)
 80055fa:	4013      	ands	r3, r2
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6a11      	ldr	r1, [r2, #32]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005604:	3a01      	subs	r2, #1
 8005606:	0112      	lsls	r2, r2, #4
 8005608:	4311      	orrs	r1, r2
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800560e:	0212      	lsls	r2, r2, #8
 8005610:	4311      	orrs	r1, r2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005616:	0852      	lsrs	r2, r2, #1
 8005618:	3a01      	subs	r2, #1
 800561a:	0552      	lsls	r2, r2, #21
 800561c:	4311      	orrs	r1, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005622:	0852      	lsrs	r2, r2, #1
 8005624:	3a01      	subs	r2, #1
 8005626:	0652      	lsls	r2, r2, #25
 8005628:	4311      	orrs	r1, r2
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800562e:	06d2      	lsls	r2, r2, #27
 8005630:	430a      	orrs	r2, r1
 8005632:	4943      	ldr	r1, [pc, #268]	@ (8005740 <HAL_RCC_OscConfig+0x618>)
 8005634:	4313      	orrs	r3, r2
 8005636:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005638:	4b41      	ldr	r3, [pc, #260]	@ (8005740 <HAL_RCC_OscConfig+0x618>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a40      	ldr	r2, [pc, #256]	@ (8005740 <HAL_RCC_OscConfig+0x618>)
 800563e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005642:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005644:	4b3e      	ldr	r3, [pc, #248]	@ (8005740 <HAL_RCC_OscConfig+0x618>)
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	4a3d      	ldr	r2, [pc, #244]	@ (8005740 <HAL_RCC_OscConfig+0x618>)
 800564a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800564e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005650:	f7fd fbd6 	bl	8002e00 <HAL_GetTick>
 8005654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005658:	f7fd fbd2 	bl	8002e00 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e066      	b.n	8005738 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800566a:	4b35      	ldr	r3, [pc, #212]	@ (8005740 <HAL_RCC_OscConfig+0x618>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0f0      	beq.n	8005658 <HAL_RCC_OscConfig+0x530>
 8005676:	e05e      	b.n	8005736 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005678:	4b31      	ldr	r3, [pc, #196]	@ (8005740 <HAL_RCC_OscConfig+0x618>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a30      	ldr	r2, [pc, #192]	@ (8005740 <HAL_RCC_OscConfig+0x618>)
 800567e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005684:	f7fd fbbc 	bl	8002e00 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800568c:	f7fd fbb8 	bl	8002e00 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e04c      	b.n	8005738 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800569e:	4b28      	ldr	r3, [pc, #160]	@ (8005740 <HAL_RCC_OscConfig+0x618>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1f0      	bne.n	800568c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80056aa:	4b25      	ldr	r3, [pc, #148]	@ (8005740 <HAL_RCC_OscConfig+0x618>)
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	4924      	ldr	r1, [pc, #144]	@ (8005740 <HAL_RCC_OscConfig+0x618>)
 80056b0:	4b25      	ldr	r3, [pc, #148]	@ (8005748 <HAL_RCC_OscConfig+0x620>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	60cb      	str	r3, [r1, #12]
 80056b6:	e03e      	b.n	8005736 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d101      	bne.n	80056c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e039      	b.n	8005738 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80056c4:	4b1e      	ldr	r3, [pc, #120]	@ (8005740 <HAL_RCC_OscConfig+0x618>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f003 0203 	and.w	r2, r3, #3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d12c      	bne.n	8005732 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e2:	3b01      	subs	r3, #1
 80056e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d123      	bne.n	8005732 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d11b      	bne.n	8005732 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005704:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005706:	429a      	cmp	r2, r3
 8005708:	d113      	bne.n	8005732 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005714:	085b      	lsrs	r3, r3, #1
 8005716:	3b01      	subs	r3, #1
 8005718:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800571a:	429a      	cmp	r2, r3
 800571c:	d109      	bne.n	8005732 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005728:	085b      	lsrs	r3, r3, #1
 800572a:	3b01      	subs	r3, #1
 800572c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800572e:	429a      	cmp	r2, r3
 8005730:	d001      	beq.n	8005736 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3720      	adds	r7, #32
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40021000 	.word	0x40021000
 8005744:	019f800c 	.word	0x019f800c
 8005748:	feeefffc 	.word	0xfeeefffc

0800574c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005756:	2300      	movs	r3, #0
 8005758:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e11e      	b.n	80059a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005764:	4b91      	ldr	r3, [pc, #580]	@ (80059ac <HAL_RCC_ClockConfig+0x260>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 030f 	and.w	r3, r3, #15
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d910      	bls.n	8005794 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005772:	4b8e      	ldr	r3, [pc, #568]	@ (80059ac <HAL_RCC_ClockConfig+0x260>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f023 020f 	bic.w	r2, r3, #15
 800577a:	498c      	ldr	r1, [pc, #560]	@ (80059ac <HAL_RCC_ClockConfig+0x260>)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	4313      	orrs	r3, r2
 8005780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005782:	4b8a      	ldr	r3, [pc, #552]	@ (80059ac <HAL_RCC_ClockConfig+0x260>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d001      	beq.n	8005794 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e106      	b.n	80059a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d073      	beq.n	8005888 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d129      	bne.n	80057fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057a8:	4b81      	ldr	r3, [pc, #516]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e0f4      	b.n	80059a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80057b8:	f000 f99e 	bl	8005af8 <RCC_GetSysClockFreqFromPLLSource>
 80057bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	4a7c      	ldr	r2, [pc, #496]	@ (80059b4 <HAL_RCC_ClockConfig+0x268>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d93f      	bls.n	8005846 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057c6:	4b7a      	ldr	r3, [pc, #488]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d009      	beq.n	80057e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d033      	beq.n	8005846 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d12f      	bne.n	8005846 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057e6:	4b72      	ldr	r3, [pc, #456]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057ee:	4a70      	ldr	r2, [pc, #448]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 80057f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057f6:	2380      	movs	r3, #128	@ 0x80
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	e024      	b.n	8005846 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b02      	cmp	r3, #2
 8005802:	d107      	bne.n	8005814 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005804:	4b6a      	ldr	r3, [pc, #424]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d109      	bne.n	8005824 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e0c6      	b.n	80059a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005814:	4b66      	ldr	r3, [pc, #408]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e0be      	b.n	80059a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005824:	f000 f8ce 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 8005828:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	4a61      	ldr	r2, [pc, #388]	@ (80059b4 <HAL_RCC_ClockConfig+0x268>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d909      	bls.n	8005846 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005832:	4b5f      	ldr	r3, [pc, #380]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800583a:	4a5d      	ldr	r2, [pc, #372]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 800583c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005840:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005842:	2380      	movs	r3, #128	@ 0x80
 8005844:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005846:	4b5a      	ldr	r3, [pc, #360]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f023 0203 	bic.w	r2, r3, #3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	4957      	ldr	r1, [pc, #348]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 8005854:	4313      	orrs	r3, r2
 8005856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005858:	f7fd fad2 	bl	8002e00 <HAL_GetTick>
 800585c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585e:	e00a      	b.n	8005876 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005860:	f7fd face 	bl	8002e00 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800586e:	4293      	cmp	r3, r2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e095      	b.n	80059a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005876:	4b4e      	ldr	r3, [pc, #312]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 020c 	and.w	r2, r3, #12
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	429a      	cmp	r2, r3
 8005886:	d1eb      	bne.n	8005860 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d023      	beq.n	80058dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d005      	beq.n	80058ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058a0:	4b43      	ldr	r3, [pc, #268]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	4a42      	ldr	r2, [pc, #264]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 80058a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0308 	and.w	r3, r3, #8
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d007      	beq.n	80058c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80058b8:	4b3d      	ldr	r3, [pc, #244]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058c0:	4a3b      	ldr	r2, [pc, #236]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 80058c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058c8:	4b39      	ldr	r3, [pc, #228]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	4936      	ldr	r1, [pc, #216]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	608b      	str	r3, [r1, #8]
 80058da:	e008      	b.n	80058ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2b80      	cmp	r3, #128	@ 0x80
 80058e0:	d105      	bne.n	80058ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80058e2:	4b33      	ldr	r3, [pc, #204]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	4a32      	ldr	r2, [pc, #200]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 80058e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058ee:	4b2f      	ldr	r3, [pc, #188]	@ (80059ac <HAL_RCC_ClockConfig+0x260>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d21d      	bcs.n	8005938 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058fc:	4b2b      	ldr	r3, [pc, #172]	@ (80059ac <HAL_RCC_ClockConfig+0x260>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f023 020f 	bic.w	r2, r3, #15
 8005904:	4929      	ldr	r1, [pc, #164]	@ (80059ac <HAL_RCC_ClockConfig+0x260>)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	4313      	orrs	r3, r2
 800590a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800590c:	f7fd fa78 	bl	8002e00 <HAL_GetTick>
 8005910:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005912:	e00a      	b.n	800592a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005914:	f7fd fa74 	bl	8002e00 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005922:	4293      	cmp	r3, r2
 8005924:	d901      	bls.n	800592a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e03b      	b.n	80059a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800592a:	4b20      	ldr	r3, [pc, #128]	@ (80059ac <HAL_RCC_ClockConfig+0x260>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	429a      	cmp	r2, r3
 8005936:	d1ed      	bne.n	8005914 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b00      	cmp	r3, #0
 8005942:	d008      	beq.n	8005956 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005944:	4b1a      	ldr	r3, [pc, #104]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	4917      	ldr	r1, [pc, #92]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 8005952:	4313      	orrs	r3, r2
 8005954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d009      	beq.n	8005976 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005962:	4b13      	ldr	r3, [pc, #76]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	490f      	ldr	r1, [pc, #60]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 8005972:	4313      	orrs	r3, r2
 8005974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005976:	f000 f825 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 800597a:	4602      	mov	r2, r0
 800597c:	4b0c      	ldr	r3, [pc, #48]	@ (80059b0 <HAL_RCC_ClockConfig+0x264>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	091b      	lsrs	r3, r3, #4
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	490c      	ldr	r1, [pc, #48]	@ (80059b8 <HAL_RCC_ClockConfig+0x26c>)
 8005988:	5ccb      	ldrb	r3, [r1, r3]
 800598a:	f003 031f 	and.w	r3, r3, #31
 800598e:	fa22 f303 	lsr.w	r3, r2, r3
 8005992:	4a0a      	ldr	r2, [pc, #40]	@ (80059bc <HAL_RCC_ClockConfig+0x270>)
 8005994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005996:	4b0a      	ldr	r3, [pc, #40]	@ (80059c0 <HAL_RCC_ClockConfig+0x274>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4618      	mov	r0, r3
 800599c:	f7fd f9e4 	bl	8002d68 <HAL_InitTick>
 80059a0:	4603      	mov	r3, r0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	40022000 	.word	0x40022000
 80059b0:	40021000 	.word	0x40021000
 80059b4:	04c4b400 	.word	0x04c4b400
 80059b8:	0800b150 	.word	0x0800b150
 80059bc:	2000000c 	.word	0x2000000c
 80059c0:	20000014 	.word	0x20000014

080059c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059ca:	4b2c      	ldr	r3, [pc, #176]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0xb8>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 030c 	and.w	r3, r3, #12
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d102      	bne.n	80059dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	e047      	b.n	8005a6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80059dc:	4b27      	ldr	r3, [pc, #156]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0xb8>)
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f003 030c 	and.w	r3, r3, #12
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d102      	bne.n	80059ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059e8:	4b26      	ldr	r3, [pc, #152]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059ea:	613b      	str	r3, [r7, #16]
 80059ec:	e03e      	b.n	8005a6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80059ee:	4b23      	ldr	r3, [pc, #140]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0xb8>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 030c 	and.w	r3, r3, #12
 80059f6:	2b0c      	cmp	r3, #12
 80059f8:	d136      	bne.n	8005a68 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059fa:	4b20      	ldr	r3, [pc, #128]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0xb8>)
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a04:	4b1d      	ldr	r3, [pc, #116]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	091b      	lsrs	r3, r3, #4
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	3301      	adds	r3, #1
 8005a10:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d10c      	bne.n	8005a32 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a18:	4a1a      	ldr	r2, [pc, #104]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a20:	4a16      	ldr	r2, [pc, #88]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a22:	68d2      	ldr	r2, [r2, #12]
 8005a24:	0a12      	lsrs	r2, r2, #8
 8005a26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a2a:	fb02 f303 	mul.w	r3, r2, r3
 8005a2e:	617b      	str	r3, [r7, #20]
      break;
 8005a30:	e00c      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a32:	4a13      	ldr	r2, [pc, #76]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3a:	4a10      	ldr	r2, [pc, #64]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a3c:	68d2      	ldr	r2, [r2, #12]
 8005a3e:	0a12      	lsrs	r2, r2, #8
 8005a40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a44:	fb02 f303 	mul.w	r3, r2, r3
 8005a48:	617b      	str	r3, [r7, #20]
      break;
 8005a4a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	0e5b      	lsrs	r3, r3, #25
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	3301      	adds	r3, #1
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a64:	613b      	str	r3, [r7, #16]
 8005a66:	e001      	b.n	8005a6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a6c:	693b      	ldr	r3, [r7, #16]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	371c      	adds	r7, #28
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40021000 	.word	0x40021000
 8005a80:	00f42400 	.word	0x00f42400
 8005a84:	02dc6c00 	.word	0x02dc6c00

08005a88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a8c:	4b03      	ldr	r3, [pc, #12]	@ (8005a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	2000000c 	.word	0x2000000c

08005aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005aa4:	f7ff fff0 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	4b06      	ldr	r3, [pc, #24]	@ (8005ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	0a1b      	lsrs	r3, r3, #8
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	4904      	ldr	r1, [pc, #16]	@ (8005ac8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ab6:	5ccb      	ldrb	r3, [r1, r3]
 8005ab8:	f003 031f 	and.w	r3, r3, #31
 8005abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	0800b160 	.word	0x0800b160

08005acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ad0:	f7ff ffda 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	4b06      	ldr	r3, [pc, #24]	@ (8005af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	0adb      	lsrs	r3, r3, #11
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	4904      	ldr	r1, [pc, #16]	@ (8005af4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ae2:	5ccb      	ldrb	r3, [r1, r3]
 8005ae4:	f003 031f 	and.w	r3, r3, #31
 8005ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40021000 	.word	0x40021000
 8005af4:	0800b160 	.word	0x0800b160

08005af8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005afe:	4b1e      	ldr	r3, [pc, #120]	@ (8005b78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b08:	4b1b      	ldr	r3, [pc, #108]	@ (8005b78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	091b      	lsrs	r3, r3, #4
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	3301      	adds	r3, #1
 8005b14:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d10c      	bne.n	8005b36 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b1c:	4a17      	ldr	r2, [pc, #92]	@ (8005b7c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b24:	4a14      	ldr	r2, [pc, #80]	@ (8005b78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b26:	68d2      	ldr	r2, [r2, #12]
 8005b28:	0a12      	lsrs	r2, r2, #8
 8005b2a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b2e:	fb02 f303 	mul.w	r3, r2, r3
 8005b32:	617b      	str	r3, [r7, #20]
    break;
 8005b34:	e00c      	b.n	8005b50 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b36:	4a12      	ldr	r2, [pc, #72]	@ (8005b80 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8005b78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b40:	68d2      	ldr	r2, [r2, #12]
 8005b42:	0a12      	lsrs	r2, r2, #8
 8005b44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b48:	fb02 f303 	mul.w	r3, r2, r3
 8005b4c:	617b      	str	r3, [r7, #20]
    break;
 8005b4e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b50:	4b09      	ldr	r3, [pc, #36]	@ (8005b78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	0e5b      	lsrs	r3, r3, #25
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b68:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005b6a:	687b      	ldr	r3, [r7, #4]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	371c      	adds	r7, #28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	02dc6c00 	.word	0x02dc6c00
 8005b80:	00f42400 	.word	0x00f42400

08005b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b90:	2300      	movs	r3, #0
 8005b92:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 8098 	beq.w	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ba6:	4b43      	ldr	r3, [pc, #268]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10d      	bne.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bb2:	4b40      	ldr	r3, [pc, #256]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb6:	4a3f      	ldr	r2, [pc, #252]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bbe:	4b3d      	ldr	r3, [pc, #244]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bc6:	60bb      	str	r3, [r7, #8]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bce:	4b3a      	ldr	r3, [pc, #232]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a39      	ldr	r2, [pc, #228]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bda:	f7fd f911 	bl	8002e00 <HAL_GetTick>
 8005bde:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005be0:	e009      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be2:	f7fd f90d 	bl	8002e00 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d902      	bls.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	74fb      	strb	r3, [r7, #19]
        break;
 8005bf4:	e005      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bf6:	4b30      	ldr	r3, [pc, #192]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0ef      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c02:	7cfb      	ldrb	r3, [r7, #19]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d159      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c08:	4b2a      	ldr	r3, [pc, #168]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c12:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d01e      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d019      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c24:	4b23      	ldr	r3, [pc, #140]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c30:	4b20      	ldr	r3, [pc, #128]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c36:	4a1f      	ldr	r2, [pc, #124]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c40:	4b1c      	ldr	r3, [pc, #112]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c46:	4a1b      	ldr	r2, [pc, #108]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c50:	4a18      	ldr	r2, [pc, #96]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d016      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c62:	f7fd f8cd 	bl	8002e00 <HAL_GetTick>
 8005c66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c68:	e00b      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c6a:	f7fd f8c9 	bl	8002e00 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d902      	bls.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	74fb      	strb	r3, [r7, #19]
            break;
 8005c80:	e006      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c82:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0ec      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005c90:	7cfb      	ldrb	r3, [r7, #19]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c96:	4b07      	ldr	r3, [pc, #28]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ca4:	4903      	ldr	r1, [pc, #12]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005cac:	e008      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cae:	7cfb      	ldrb	r3, [r7, #19]
 8005cb0:	74bb      	strb	r3, [r7, #18]
 8005cb2:	e005      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cbc:	7cfb      	ldrb	r3, [r7, #19]
 8005cbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cc0:	7c7b      	ldrb	r3, [r7, #17]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d105      	bne.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cc6:	4ba7      	ldr	r3, [pc, #668]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cca:	4aa6      	ldr	r2, [pc, #664]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ccc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cd0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cde:	4ba1      	ldr	r3, [pc, #644]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce4:	f023 0203 	bic.w	r2, r3, #3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	499d      	ldr	r1, [pc, #628]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00a      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d00:	4b98      	ldr	r3, [pc, #608]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d06:	f023 020c 	bic.w	r2, r3, #12
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	4995      	ldr	r1, [pc, #596]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0304 	and.w	r3, r3, #4
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00a      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d22:	4b90      	ldr	r3, [pc, #576]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	498c      	ldr	r1, [pc, #560]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0308 	and.w	r3, r3, #8
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00a      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d44:	4b87      	ldr	r3, [pc, #540]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	4984      	ldr	r1, [pc, #528]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0310 	and.w	r3, r3, #16
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d66:	4b7f      	ldr	r3, [pc, #508]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	497b      	ldr	r1, [pc, #492]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d88:	4b76      	ldr	r3, [pc, #472]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	4973      	ldr	r1, [pc, #460]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005daa:	4b6e      	ldr	r3, [pc, #440]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	496a      	ldr	r1, [pc, #424]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00a      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005dcc:	4b65      	ldr	r3, [pc, #404]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	4962      	ldr	r1, [pc, #392]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005dee:	4b5d      	ldr	r3, [pc, #372]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfc:	4959      	ldr	r1, [pc, #356]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e10:	4b54      	ldr	r3, [pc, #336]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e16:	f023 0203 	bic.w	r2, r3, #3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1e:	4951      	ldr	r1, [pc, #324]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e32:	4b4c      	ldr	r3, [pc, #304]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e38:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e40:	4948      	ldr	r1, [pc, #288]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d015      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e54:	4b43      	ldr	r3, [pc, #268]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e62:	4940      	ldr	r1, [pc, #256]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e72:	d105      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e74:	4b3b      	ldr	r3, [pc, #236]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	4a3a      	ldr	r2, [pc, #232]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d015      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e8c:	4b35      	ldr	r3, [pc, #212]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e92:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e9a:	4932      	ldr	r1, [pc, #200]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ea6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005eaa:	d105      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eac:	4b2d      	ldr	r3, [pc, #180]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	4a2c      	ldr	r2, [pc, #176]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eb6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d015      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ec4:	4b27      	ldr	r3, [pc, #156]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed2:	4924      	ldr	r1, [pc, #144]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ede:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ee2:	d105      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d015      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005efc:	4b19      	ldr	r3, [pc, #100]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f0a:	4916      	ldr	r1, [pc, #88]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f1a:	d105      	bne.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f1c:	4b11      	ldr	r3, [pc, #68]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	4a10      	ldr	r2, [pc, #64]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f26:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d019      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f34:	4b0b      	ldr	r3, [pc, #44]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f42:	4908      	ldr	r1, [pc, #32]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f52:	d109      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f54:	4b03      	ldr	r3, [pc, #12]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	4a02      	ldr	r2, [pc, #8]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f5e:	60d3      	str	r3, [r2, #12]
 8005f60:	e002      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005f62:	bf00      	nop
 8005f64:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d015      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f74:	4b29      	ldr	r3, [pc, #164]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f7a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f82:	4926      	ldr	r1, [pc, #152]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f92:	d105      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f94:	4b21      	ldr	r3, [pc, #132]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	4a20      	ldr	r2, [pc, #128]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f9e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d015      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005fac:	4b1b      	ldr	r3, [pc, #108]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fba:	4918      	ldr	r1, [pc, #96]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fca:	d105      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fcc:	4b13      	ldr	r3, [pc, #76]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	4a12      	ldr	r2, [pc, #72]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fd6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d015      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ff2:	490a      	ldr	r1, [pc, #40]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ffe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006002:	d105      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006004:	4b05      	ldr	r3, [pc, #20]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	4a04      	ldr	r2, [pc, #16]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800600a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800600e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006010:	7cbb      	ldrb	r3, [r7, #18]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40021000 	.word	0x40021000

08006020 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e09d      	b.n	800616e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006036:	2b00      	cmp	r3, #0
 8006038:	d108      	bne.n	800604c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006042:	d009      	beq.n	8006058 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	61da      	str	r2, [r3, #28]
 800604a:	e005      	b.n	8006058 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d106      	bne.n	8006078 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fc fa6e 	bl	8002554 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800608e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006098:	d902      	bls.n	80060a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	e002      	b.n	80060a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80060a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80060a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80060ae:	d007      	beq.n	80060c0 <HAL_SPI_Init+0xa0>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060b8:	d002      	beq.n	80060c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80060d0:	431a      	orrs	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	431a      	orrs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060f8:	431a      	orrs	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006102:	ea42 0103 	orr.w	r1, r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	0c1b      	lsrs	r3, r3, #16
 800611c:	f003 0204 	and.w	r2, r3, #4
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006124:	f003 0310 	and.w	r3, r3, #16
 8006128:	431a      	orrs	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800612e:	f003 0308 	and.w	r3, r3, #8
 8006132:	431a      	orrs	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800613c:	ea42 0103 	orr.w	r1, r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69da      	ldr	r2, [r3, #28]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800615c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b088      	sub	sp, #32
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	603b      	str	r3, [r7, #0]
 8006182:	4613      	mov	r3, r2
 8006184:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006190:	2b01      	cmp	r3, #1
 8006192:	d101      	bne.n	8006198 <HAL_SPI_Transmit+0x22>
 8006194:	2302      	movs	r3, #2
 8006196:	e15f      	b.n	8006458 <HAL_SPI_Transmit+0x2e2>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061a0:	f7fc fe2e 	bl	8002e00 <HAL_GetTick>
 80061a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d002      	beq.n	80061bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80061b6:	2302      	movs	r3, #2
 80061b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061ba:	e148      	b.n	800644e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <HAL_SPI_Transmit+0x52>
 80061c2:	88fb      	ldrh	r3, [r7, #6]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d102      	bne.n	80061ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061cc:	e13f      	b.n	800644e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2203      	movs	r2, #3
 80061d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	88fa      	ldrh	r2, [r7, #6]
 80061e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	88fa      	ldrh	r2, [r7, #6]
 80061ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006218:	d10f      	bne.n	800623a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006228:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006238:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006244:	2b40      	cmp	r3, #64	@ 0x40
 8006246:	d007      	beq.n	8006258 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006256:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006260:	d94f      	bls.n	8006302 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <HAL_SPI_Transmit+0xfa>
 800626a:	8afb      	ldrh	r3, [r7, #22]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d142      	bne.n	80062f6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006274:	881a      	ldrh	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006280:	1c9a      	adds	r2, r3, #2
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800628a:	b29b      	uxth	r3, r3
 800628c:	3b01      	subs	r3, #1
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006294:	e02f      	b.n	80062f6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d112      	bne.n	80062ca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a8:	881a      	ldrh	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b4:	1c9a      	adds	r2, r3, #2
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062c8:	e015      	b.n	80062f6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062ca:	f7fc fd99 	bl	8002e00 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d803      	bhi.n	80062e2 <HAL_SPI_Transmit+0x16c>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e0:	d102      	bne.n	80062e8 <HAL_SPI_Transmit+0x172>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d106      	bne.n	80062f6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80062f4:	e0ab      	b.n	800644e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1ca      	bne.n	8006296 <HAL_SPI_Transmit+0x120>
 8006300:	e080      	b.n	8006404 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <HAL_SPI_Transmit+0x19a>
 800630a:	8afb      	ldrh	r3, [r7, #22]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d174      	bne.n	80063fa <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b01      	cmp	r3, #1
 8006318:	d912      	bls.n	8006340 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631e:	881a      	ldrh	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632a:	1c9a      	adds	r2, r3, #2
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006334:	b29b      	uxth	r3, r3
 8006336:	3b02      	subs	r3, #2
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800633e:	e05c      	b.n	80063fa <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	330c      	adds	r3, #12
 800634a:	7812      	ldrb	r2, [r2, #0]
 800634c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006366:	e048      	b.n	80063fa <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b02      	cmp	r3, #2
 8006374:	d12b      	bne.n	80063ce <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800637a:	b29b      	uxth	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	d912      	bls.n	80063a6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006384:	881a      	ldrh	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006390:	1c9a      	adds	r2, r3, #2
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b02      	subs	r3, #2
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063a4:	e029      	b.n	80063fa <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	330c      	adds	r3, #12
 80063b0:	7812      	ldrb	r2, [r2, #0]
 80063b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	3b01      	subs	r3, #1
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063cc:	e015      	b.n	80063fa <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063ce:	f7fc fd17 	bl	8002e00 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d803      	bhi.n	80063e6 <HAL_SPI_Transmit+0x270>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e4:	d102      	bne.n	80063ec <HAL_SPI_Transmit+0x276>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d106      	bne.n	80063fa <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80063f8:	e029      	b.n	800644e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063fe:	b29b      	uxth	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1b1      	bne.n	8006368 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	6839      	ldr	r1, [r7, #0]
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 f947 	bl	800669c <SPI_EndRxTxTransaction>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2220      	movs	r2, #32
 8006418:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10a      	bne.n	8006438 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006422:	2300      	movs	r3, #0
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	613b      	str	r3, [r7, #16]
 8006436:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	77fb      	strb	r3, [r7, #31]
 8006444:	e003      	b.n	800644e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006456:	7ffb      	ldrb	r3, [r7, #31]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006470:	f7fc fcc6 	bl	8002e00 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006478:	1a9b      	subs	r3, r3, r2
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	4413      	add	r3, r2
 800647e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006480:	f7fc fcbe 	bl	8002e00 <HAL_GetTick>
 8006484:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006486:	4b39      	ldr	r3, [pc, #228]	@ (800656c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	015b      	lsls	r3, r3, #5
 800648c:	0d1b      	lsrs	r3, r3, #20
 800648e:	69fa      	ldr	r2, [r7, #28]
 8006490:	fb02 f303 	mul.w	r3, r2, r3
 8006494:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006496:	e054      	b.n	8006542 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649e:	d050      	beq.n	8006542 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064a0:	f7fc fcae 	bl	8002e00 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	69fa      	ldr	r2, [r7, #28]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d902      	bls.n	80064b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d13d      	bne.n	8006532 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80064c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064ce:	d111      	bne.n	80064f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064d8:	d004      	beq.n	80064e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064e2:	d107      	bne.n	80064f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064fc:	d10f      	bne.n	800651e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800651c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e017      	b.n	8006562 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	3b01      	subs	r3, #1
 8006540:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	4013      	ands	r3, r2
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	429a      	cmp	r2, r3
 8006550:	bf0c      	ite	eq
 8006552:	2301      	moveq	r3, #1
 8006554:	2300      	movne	r3, #0
 8006556:	b2db      	uxtb	r3, r3
 8006558:	461a      	mov	r2, r3
 800655a:	79fb      	ldrb	r3, [r7, #7]
 800655c:	429a      	cmp	r2, r3
 800655e:	d19b      	bne.n	8006498 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3720      	adds	r7, #32
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	2000000c 	.word	0x2000000c

08006570 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b08a      	sub	sp, #40	@ 0x28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800657e:	2300      	movs	r3, #0
 8006580:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006582:	f7fc fc3d 	bl	8002e00 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658a:	1a9b      	subs	r3, r3, r2
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	4413      	add	r3, r2
 8006590:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006592:	f7fc fc35 	bl	8002e00 <HAL_GetTick>
 8006596:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	330c      	adds	r3, #12
 800659e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80065a0:	4b3d      	ldr	r3, [pc, #244]	@ (8006698 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	4613      	mov	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	00da      	lsls	r2, r3, #3
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	0d1b      	lsrs	r3, r3, #20
 80065b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065b2:	fb02 f303 	mul.w	r3, r2, r3
 80065b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80065b8:	e060      	b.n	800667c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80065c0:	d107      	bne.n	80065d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d104      	bne.n	80065d2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80065d0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d8:	d050      	beq.n	800667c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065da:	f7fc fc11 	bl	8002e00 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d902      	bls.n	80065f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80065ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d13d      	bne.n	800666c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80065fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006608:	d111      	bne.n	800662e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006612:	d004      	beq.n	800661e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800661c:	d107      	bne.n	800662e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800662c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006636:	d10f      	bne.n	8006658 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006656:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e010      	b.n	800668e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	3b01      	subs	r3, #1
 800667a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689a      	ldr	r2, [r3, #8]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	4013      	ands	r3, r2
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	429a      	cmp	r2, r3
 800668a:	d196      	bne.n	80065ba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3728      	adds	r7, #40	@ 0x28
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	2000000c 	.word	0x2000000c

0800669c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f7ff ff5b 	bl	8006570 <SPI_WaitFifoStateUntilTimeout>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d007      	beq.n	80066d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066c4:	f043 0220 	orr.w	r2, r3, #32
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e027      	b.n	8006720 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2200      	movs	r2, #0
 80066d8:	2180      	movs	r1, #128	@ 0x80
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f7ff fec0 	bl	8006460 <SPI_WaitFlagStateUntilTimeout>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d007      	beq.n	80066f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ea:	f043 0220 	orr.w	r2, r3, #32
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e014      	b.n	8006720 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f7ff ff34 	bl	8006570 <SPI_WaitFifoStateUntilTimeout>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d007      	beq.n	800671e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006712:	f043 0220 	orr.w	r2, r3, #32
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e000      	b.n	8006720 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e049      	b.n	80067ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d106      	bne.n	8006754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7fb ff44 	bl	80025dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3304      	adds	r3, #4
 8006764:	4619      	mov	r1, r3
 8006766:	4610      	mov	r0, r2
 8006768:	f000 fa26 	bl	8006bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
	...

080067d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d001      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e054      	b.n	800689a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68da      	ldr	r2, [r3, #12]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0201 	orr.w	r2, r2, #1
 8006806:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a26      	ldr	r2, [pc, #152]	@ (80068a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d022      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x80>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800681a:	d01d      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x80>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a22      	ldr	r2, [pc, #136]	@ (80068ac <HAL_TIM_Base_Start_IT+0xd4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d018      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x80>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a21      	ldr	r2, [pc, #132]	@ (80068b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d013      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x80>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a1f      	ldr	r2, [pc, #124]	@ (80068b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00e      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x80>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a1e      	ldr	r2, [pc, #120]	@ (80068b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d009      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x80>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a1c      	ldr	r2, [pc, #112]	@ (80068bc <HAL_TIM_Base_Start_IT+0xe4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d004      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x80>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a1b      	ldr	r2, [pc, #108]	@ (80068c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d115      	bne.n	8006884 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	4b19      	ldr	r3, [pc, #100]	@ (80068c4 <HAL_TIM_Base_Start_IT+0xec>)
 8006860:	4013      	ands	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b06      	cmp	r3, #6
 8006868:	d015      	beq.n	8006896 <HAL_TIM_Base_Start_IT+0xbe>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006870:	d011      	beq.n	8006896 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f042 0201 	orr.w	r2, r2, #1
 8006880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006882:	e008      	b.n	8006896 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0201 	orr.w	r2, r2, #1
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	e000      	b.n	8006898 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006896:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	40012c00 	.word	0x40012c00
 80068ac:	40000400 	.word	0x40000400
 80068b0:	40000800 	.word	0x40000800
 80068b4:	40000c00 	.word	0x40000c00
 80068b8:	40013400 	.word	0x40013400
 80068bc:	40014000 	.word	0x40014000
 80068c0:	40015000 	.word	0x40015000
 80068c4:	00010007 	.word	0x00010007

080068c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d020      	beq.n	800692c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d01b      	beq.n	800692c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f06f 0202 	mvn.w	r2, #2
 80068fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f931 	bl	8006b7a <HAL_TIM_IC_CaptureCallback>
 8006918:	e005      	b.n	8006926 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f923 	bl	8006b66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f934 	bl	8006b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f003 0304 	and.w	r3, r3, #4
 8006932:	2b00      	cmp	r3, #0
 8006934:	d020      	beq.n	8006978 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01b      	beq.n	8006978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f06f 0204 	mvn.w	r2, #4
 8006948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2202      	movs	r2, #2
 800694e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f90b 	bl	8006b7a <HAL_TIM_IC_CaptureCallback>
 8006964:	e005      	b.n	8006972 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f8fd 	bl	8006b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f90e 	bl	8006b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	2b00      	cmp	r3, #0
 8006980:	d020      	beq.n	80069c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01b      	beq.n	80069c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0208 	mvn.w	r2, #8
 8006994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2204      	movs	r2, #4
 800699a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f8e5 	bl	8006b7a <HAL_TIM_IC_CaptureCallback>
 80069b0:	e005      	b.n	80069be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f8d7 	bl	8006b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f8e8 	bl	8006b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f003 0310 	and.w	r3, r3, #16
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d020      	beq.n	8006a10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f003 0310 	and.w	r3, r3, #16
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01b      	beq.n	8006a10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f06f 0210 	mvn.w	r2, #16
 80069e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2208      	movs	r2, #8
 80069e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f8bf 	bl	8006b7a <HAL_TIM_IC_CaptureCallback>
 80069fc:	e005      	b.n	8006a0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f8b1 	bl	8006b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f8c2 	bl	8006b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00c      	beq.n	8006a34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d007      	beq.n	8006a34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f06f 0201 	mvn.w	r2, #1
 8006a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fa ffb0 	bl	8001994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d104      	bne.n	8006a48 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00c      	beq.n	8006a62 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d007      	beq.n	8006a62 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f969 	bl	8006d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00c      	beq.n	8006a86 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d007      	beq.n	8006a86 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f961 	bl	8006d48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00c      	beq.n	8006aaa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d007      	beq.n	8006aaa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f87c 	bl	8006ba2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f003 0320 	and.w	r3, r3, #32
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00c      	beq.n	8006ace <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f003 0320 	and.w	r3, r3, #32
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d007      	beq.n	8006ace <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f06f 0220 	mvn.w	r2, #32
 8006ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f929 	bl	8006d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00c      	beq.n	8006af2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d007      	beq.n	8006af2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f935 	bl	8006d5c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00c      	beq.n	8006b16 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d007      	beq.n	8006b16 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f92d 	bl	8006d70 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00c      	beq.n	8006b3a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d007      	beq.n	8006b3a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f925 	bl	8006d84 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00c      	beq.n	8006b5e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d007      	beq.n	8006b5e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f91d 	bl	8006d98 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b5e:	bf00      	nop
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b6e:	bf00      	nop
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
	...

08006bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a4c      	ldr	r2, [pc, #304]	@ (8006cfc <TIM_Base_SetConfig+0x144>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d017      	beq.n	8006c00 <TIM_Base_SetConfig+0x48>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bd6:	d013      	beq.n	8006c00 <TIM_Base_SetConfig+0x48>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a49      	ldr	r2, [pc, #292]	@ (8006d00 <TIM_Base_SetConfig+0x148>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d00f      	beq.n	8006c00 <TIM_Base_SetConfig+0x48>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a48      	ldr	r2, [pc, #288]	@ (8006d04 <TIM_Base_SetConfig+0x14c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00b      	beq.n	8006c00 <TIM_Base_SetConfig+0x48>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a47      	ldr	r2, [pc, #284]	@ (8006d08 <TIM_Base_SetConfig+0x150>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d007      	beq.n	8006c00 <TIM_Base_SetConfig+0x48>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a46      	ldr	r2, [pc, #280]	@ (8006d0c <TIM_Base_SetConfig+0x154>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d003      	beq.n	8006c00 <TIM_Base_SetConfig+0x48>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a45      	ldr	r2, [pc, #276]	@ (8006d10 <TIM_Base_SetConfig+0x158>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d108      	bne.n	8006c12 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a39      	ldr	r2, [pc, #228]	@ (8006cfc <TIM_Base_SetConfig+0x144>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d023      	beq.n	8006c62 <TIM_Base_SetConfig+0xaa>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c20:	d01f      	beq.n	8006c62 <TIM_Base_SetConfig+0xaa>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a36      	ldr	r2, [pc, #216]	@ (8006d00 <TIM_Base_SetConfig+0x148>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d01b      	beq.n	8006c62 <TIM_Base_SetConfig+0xaa>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a35      	ldr	r2, [pc, #212]	@ (8006d04 <TIM_Base_SetConfig+0x14c>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d017      	beq.n	8006c62 <TIM_Base_SetConfig+0xaa>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a34      	ldr	r2, [pc, #208]	@ (8006d08 <TIM_Base_SetConfig+0x150>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d013      	beq.n	8006c62 <TIM_Base_SetConfig+0xaa>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a33      	ldr	r2, [pc, #204]	@ (8006d0c <TIM_Base_SetConfig+0x154>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d00f      	beq.n	8006c62 <TIM_Base_SetConfig+0xaa>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a33      	ldr	r2, [pc, #204]	@ (8006d14 <TIM_Base_SetConfig+0x15c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d00b      	beq.n	8006c62 <TIM_Base_SetConfig+0xaa>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a32      	ldr	r2, [pc, #200]	@ (8006d18 <TIM_Base_SetConfig+0x160>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d007      	beq.n	8006c62 <TIM_Base_SetConfig+0xaa>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a31      	ldr	r2, [pc, #196]	@ (8006d1c <TIM_Base_SetConfig+0x164>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d003      	beq.n	8006c62 <TIM_Base_SetConfig+0xaa>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a2c      	ldr	r2, [pc, #176]	@ (8006d10 <TIM_Base_SetConfig+0x158>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d108      	bne.n	8006c74 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	689a      	ldr	r2, [r3, #8]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a18      	ldr	r2, [pc, #96]	@ (8006cfc <TIM_Base_SetConfig+0x144>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d013      	beq.n	8006cc8 <TIM_Base_SetConfig+0x110>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8006d0c <TIM_Base_SetConfig+0x154>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d00f      	beq.n	8006cc8 <TIM_Base_SetConfig+0x110>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a1a      	ldr	r2, [pc, #104]	@ (8006d14 <TIM_Base_SetConfig+0x15c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00b      	beq.n	8006cc8 <TIM_Base_SetConfig+0x110>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a19      	ldr	r2, [pc, #100]	@ (8006d18 <TIM_Base_SetConfig+0x160>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d007      	beq.n	8006cc8 <TIM_Base_SetConfig+0x110>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a18      	ldr	r2, [pc, #96]	@ (8006d1c <TIM_Base_SetConfig+0x164>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d003      	beq.n	8006cc8 <TIM_Base_SetConfig+0x110>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a13      	ldr	r2, [pc, #76]	@ (8006d10 <TIM_Base_SetConfig+0x158>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d103      	bne.n	8006cd0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	691a      	ldr	r2, [r3, #16]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d105      	bne.n	8006cee <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f023 0201 	bic.w	r2, r3, #1
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	611a      	str	r2, [r3, #16]
  }
}
 8006cee:	bf00      	nop
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	40012c00 	.word	0x40012c00
 8006d00:	40000400 	.word	0x40000400
 8006d04:	40000800 	.word	0x40000800
 8006d08:	40000c00 	.word	0x40000c00
 8006d0c:	40013400 	.word	0x40013400
 8006d10:	40015000 	.word	0x40015000
 8006d14:	40014000 	.word	0x40014000
 8006d18:	40014400 	.word	0x40014400
 8006d1c:	40014800 	.word	0x40014800

08006d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e042      	b.n	8006e44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d106      	bne.n	8006dd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7fb fc45 	bl	8002660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2224      	movs	r2, #36	@ 0x24
 8006dda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0201 	bic.w	r2, r2, #1
 8006dec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fbb2 	bl	8007560 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f8b3 	bl	8006f68 <UART_SetConfig>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d101      	bne.n	8006e0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e01b      	b.n	8006e44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689a      	ldr	r2, [r3, #8]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f042 0201 	orr.w	r2, r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fc31 	bl	80076a4 <UART_CheckIdleState>
 8006e42:	4603      	mov	r3, r0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08a      	sub	sp, #40	@ 0x28
 8006e50:	af02      	add	r7, sp, #8
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	603b      	str	r3, [r7, #0]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e62:	2b20      	cmp	r3, #32
 8006e64:	d17b      	bne.n	8006f5e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <HAL_UART_Transmit+0x26>
 8006e6c:	88fb      	ldrh	r3, [r7, #6]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e074      	b.n	8006f60 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2221      	movs	r2, #33	@ 0x21
 8006e82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e86:	f7fb ffbb 	bl	8002e00 <HAL_GetTick>
 8006e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	88fa      	ldrh	r2, [r7, #6]
 8006e90:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	88fa      	ldrh	r2, [r7, #6]
 8006e98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ea4:	d108      	bne.n	8006eb8 <HAL_UART_Transmit+0x6c>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d104      	bne.n	8006eb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	61bb      	str	r3, [r7, #24]
 8006eb6:	e003      	b.n	8006ec0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ec0:	e030      	b.n	8006f24 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	2180      	movs	r1, #128	@ 0x80
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f000 fc93 	bl	80077f8 <UART_WaitOnFlagUntilTimeout>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2220      	movs	r2, #32
 8006edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e03d      	b.n	8006f60 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10b      	bne.n	8006f02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ef8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	3302      	adds	r3, #2
 8006efe:	61bb      	str	r3, [r7, #24]
 8006f00:	e007      	b.n	8006f12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	781a      	ldrb	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1c8      	bne.n	8006ec2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2200      	movs	r2, #0
 8006f38:	2140      	movs	r1, #64	@ 0x40
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 fc5c 	bl	80077f8 <UART_WaitOnFlagUntilTimeout>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d005      	beq.n	8006f52 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e006      	b.n	8006f60 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2220      	movs	r2, #32
 8006f56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e000      	b.n	8006f60 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006f5e:	2302      	movs	r3, #2
  }
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3720      	adds	r7, #32
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f6c:	b08c      	sub	sp, #48	@ 0x30
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	431a      	orrs	r2, r3
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	431a      	orrs	r2, r3
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	4baa      	ldr	r3, [pc, #680]	@ (8007240 <UART_SetConfig+0x2d8>)
 8006f98:	4013      	ands	r3, r2
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	6812      	ldr	r2, [r2, #0]
 8006f9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fa0:	430b      	orrs	r3, r1
 8006fa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a9f      	ldr	r2, [pc, #636]	@ (8007244 <UART_SetConfig+0x2dc>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d004      	beq.n	8006fd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006fde:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	6812      	ldr	r2, [r2, #0]
 8006fe6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fe8:	430b      	orrs	r3, r1
 8006fea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff2:	f023 010f 	bic.w	r1, r3, #15
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a90      	ldr	r2, [pc, #576]	@ (8007248 <UART_SetConfig+0x2e0>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d125      	bne.n	8007058 <UART_SetConfig+0xf0>
 800700c:	4b8f      	ldr	r3, [pc, #572]	@ (800724c <UART_SetConfig+0x2e4>)
 800700e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007012:	f003 0303 	and.w	r3, r3, #3
 8007016:	2b03      	cmp	r3, #3
 8007018:	d81a      	bhi.n	8007050 <UART_SetConfig+0xe8>
 800701a:	a201      	add	r2, pc, #4	@ (adr r2, 8007020 <UART_SetConfig+0xb8>)
 800701c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007020:	08007031 	.word	0x08007031
 8007024:	08007041 	.word	0x08007041
 8007028:	08007039 	.word	0x08007039
 800702c:	08007049 	.word	0x08007049
 8007030:	2301      	movs	r3, #1
 8007032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007036:	e116      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007038:	2302      	movs	r3, #2
 800703a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800703e:	e112      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007040:	2304      	movs	r3, #4
 8007042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007046:	e10e      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007048:	2308      	movs	r3, #8
 800704a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800704e:	e10a      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007050:	2310      	movs	r3, #16
 8007052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007056:	e106      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a7c      	ldr	r2, [pc, #496]	@ (8007250 <UART_SetConfig+0x2e8>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d138      	bne.n	80070d4 <UART_SetConfig+0x16c>
 8007062:	4b7a      	ldr	r3, [pc, #488]	@ (800724c <UART_SetConfig+0x2e4>)
 8007064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007068:	f003 030c 	and.w	r3, r3, #12
 800706c:	2b0c      	cmp	r3, #12
 800706e:	d82d      	bhi.n	80070cc <UART_SetConfig+0x164>
 8007070:	a201      	add	r2, pc, #4	@ (adr r2, 8007078 <UART_SetConfig+0x110>)
 8007072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007076:	bf00      	nop
 8007078:	080070ad 	.word	0x080070ad
 800707c:	080070cd 	.word	0x080070cd
 8007080:	080070cd 	.word	0x080070cd
 8007084:	080070cd 	.word	0x080070cd
 8007088:	080070bd 	.word	0x080070bd
 800708c:	080070cd 	.word	0x080070cd
 8007090:	080070cd 	.word	0x080070cd
 8007094:	080070cd 	.word	0x080070cd
 8007098:	080070b5 	.word	0x080070b5
 800709c:	080070cd 	.word	0x080070cd
 80070a0:	080070cd 	.word	0x080070cd
 80070a4:	080070cd 	.word	0x080070cd
 80070a8:	080070c5 	.word	0x080070c5
 80070ac:	2300      	movs	r3, #0
 80070ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070b2:	e0d8      	b.n	8007266 <UART_SetConfig+0x2fe>
 80070b4:	2302      	movs	r3, #2
 80070b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ba:	e0d4      	b.n	8007266 <UART_SetConfig+0x2fe>
 80070bc:	2304      	movs	r3, #4
 80070be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c2:	e0d0      	b.n	8007266 <UART_SetConfig+0x2fe>
 80070c4:	2308      	movs	r3, #8
 80070c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ca:	e0cc      	b.n	8007266 <UART_SetConfig+0x2fe>
 80070cc:	2310      	movs	r3, #16
 80070ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070d2:	e0c8      	b.n	8007266 <UART_SetConfig+0x2fe>
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a5e      	ldr	r2, [pc, #376]	@ (8007254 <UART_SetConfig+0x2ec>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d125      	bne.n	800712a <UART_SetConfig+0x1c2>
 80070de:	4b5b      	ldr	r3, [pc, #364]	@ (800724c <UART_SetConfig+0x2e4>)
 80070e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80070e8:	2b30      	cmp	r3, #48	@ 0x30
 80070ea:	d016      	beq.n	800711a <UART_SetConfig+0x1b2>
 80070ec:	2b30      	cmp	r3, #48	@ 0x30
 80070ee:	d818      	bhi.n	8007122 <UART_SetConfig+0x1ba>
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	d00a      	beq.n	800710a <UART_SetConfig+0x1a2>
 80070f4:	2b20      	cmp	r3, #32
 80070f6:	d814      	bhi.n	8007122 <UART_SetConfig+0x1ba>
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <UART_SetConfig+0x19a>
 80070fc:	2b10      	cmp	r3, #16
 80070fe:	d008      	beq.n	8007112 <UART_SetConfig+0x1aa>
 8007100:	e00f      	b.n	8007122 <UART_SetConfig+0x1ba>
 8007102:	2300      	movs	r3, #0
 8007104:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007108:	e0ad      	b.n	8007266 <UART_SetConfig+0x2fe>
 800710a:	2302      	movs	r3, #2
 800710c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007110:	e0a9      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007112:	2304      	movs	r3, #4
 8007114:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007118:	e0a5      	b.n	8007266 <UART_SetConfig+0x2fe>
 800711a:	2308      	movs	r3, #8
 800711c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007120:	e0a1      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007122:	2310      	movs	r3, #16
 8007124:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007128:	e09d      	b.n	8007266 <UART_SetConfig+0x2fe>
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a4a      	ldr	r2, [pc, #296]	@ (8007258 <UART_SetConfig+0x2f0>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d125      	bne.n	8007180 <UART_SetConfig+0x218>
 8007134:	4b45      	ldr	r3, [pc, #276]	@ (800724c <UART_SetConfig+0x2e4>)
 8007136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800713a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800713e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007140:	d016      	beq.n	8007170 <UART_SetConfig+0x208>
 8007142:	2bc0      	cmp	r3, #192	@ 0xc0
 8007144:	d818      	bhi.n	8007178 <UART_SetConfig+0x210>
 8007146:	2b80      	cmp	r3, #128	@ 0x80
 8007148:	d00a      	beq.n	8007160 <UART_SetConfig+0x1f8>
 800714a:	2b80      	cmp	r3, #128	@ 0x80
 800714c:	d814      	bhi.n	8007178 <UART_SetConfig+0x210>
 800714e:	2b00      	cmp	r3, #0
 8007150:	d002      	beq.n	8007158 <UART_SetConfig+0x1f0>
 8007152:	2b40      	cmp	r3, #64	@ 0x40
 8007154:	d008      	beq.n	8007168 <UART_SetConfig+0x200>
 8007156:	e00f      	b.n	8007178 <UART_SetConfig+0x210>
 8007158:	2300      	movs	r3, #0
 800715a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800715e:	e082      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007160:	2302      	movs	r3, #2
 8007162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007166:	e07e      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007168:	2304      	movs	r3, #4
 800716a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800716e:	e07a      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007170:	2308      	movs	r3, #8
 8007172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007176:	e076      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007178:	2310      	movs	r3, #16
 800717a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800717e:	e072      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a35      	ldr	r2, [pc, #212]	@ (800725c <UART_SetConfig+0x2f4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d12a      	bne.n	80071e0 <UART_SetConfig+0x278>
 800718a:	4b30      	ldr	r3, [pc, #192]	@ (800724c <UART_SetConfig+0x2e4>)
 800718c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007190:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007194:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007198:	d01a      	beq.n	80071d0 <UART_SetConfig+0x268>
 800719a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800719e:	d81b      	bhi.n	80071d8 <UART_SetConfig+0x270>
 80071a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071a4:	d00c      	beq.n	80071c0 <UART_SetConfig+0x258>
 80071a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071aa:	d815      	bhi.n	80071d8 <UART_SetConfig+0x270>
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <UART_SetConfig+0x250>
 80071b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071b4:	d008      	beq.n	80071c8 <UART_SetConfig+0x260>
 80071b6:	e00f      	b.n	80071d8 <UART_SetConfig+0x270>
 80071b8:	2300      	movs	r3, #0
 80071ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071be:	e052      	b.n	8007266 <UART_SetConfig+0x2fe>
 80071c0:	2302      	movs	r3, #2
 80071c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071c6:	e04e      	b.n	8007266 <UART_SetConfig+0x2fe>
 80071c8:	2304      	movs	r3, #4
 80071ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ce:	e04a      	b.n	8007266 <UART_SetConfig+0x2fe>
 80071d0:	2308      	movs	r3, #8
 80071d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071d6:	e046      	b.n	8007266 <UART_SetConfig+0x2fe>
 80071d8:	2310      	movs	r3, #16
 80071da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071de:	e042      	b.n	8007266 <UART_SetConfig+0x2fe>
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a17      	ldr	r2, [pc, #92]	@ (8007244 <UART_SetConfig+0x2dc>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d13a      	bne.n	8007260 <UART_SetConfig+0x2f8>
 80071ea:	4b18      	ldr	r3, [pc, #96]	@ (800724c <UART_SetConfig+0x2e4>)
 80071ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80071f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071f8:	d01a      	beq.n	8007230 <UART_SetConfig+0x2c8>
 80071fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071fe:	d81b      	bhi.n	8007238 <UART_SetConfig+0x2d0>
 8007200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007204:	d00c      	beq.n	8007220 <UART_SetConfig+0x2b8>
 8007206:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800720a:	d815      	bhi.n	8007238 <UART_SetConfig+0x2d0>
 800720c:	2b00      	cmp	r3, #0
 800720e:	d003      	beq.n	8007218 <UART_SetConfig+0x2b0>
 8007210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007214:	d008      	beq.n	8007228 <UART_SetConfig+0x2c0>
 8007216:	e00f      	b.n	8007238 <UART_SetConfig+0x2d0>
 8007218:	2300      	movs	r3, #0
 800721a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800721e:	e022      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007220:	2302      	movs	r3, #2
 8007222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007226:	e01e      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007228:	2304      	movs	r3, #4
 800722a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800722e:	e01a      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007230:	2308      	movs	r3, #8
 8007232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007236:	e016      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007238:	2310      	movs	r3, #16
 800723a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800723e:	e012      	b.n	8007266 <UART_SetConfig+0x2fe>
 8007240:	cfff69f3 	.word	0xcfff69f3
 8007244:	40008000 	.word	0x40008000
 8007248:	40013800 	.word	0x40013800
 800724c:	40021000 	.word	0x40021000
 8007250:	40004400 	.word	0x40004400
 8007254:	40004800 	.word	0x40004800
 8007258:	40004c00 	.word	0x40004c00
 800725c:	40005000 	.word	0x40005000
 8007260:	2310      	movs	r3, #16
 8007262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4aae      	ldr	r2, [pc, #696]	@ (8007524 <UART_SetConfig+0x5bc>)
 800726c:	4293      	cmp	r3, r2
 800726e:	f040 8097 	bne.w	80073a0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007272:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007276:	2b08      	cmp	r3, #8
 8007278:	d823      	bhi.n	80072c2 <UART_SetConfig+0x35a>
 800727a:	a201      	add	r2, pc, #4	@ (adr r2, 8007280 <UART_SetConfig+0x318>)
 800727c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007280:	080072a5 	.word	0x080072a5
 8007284:	080072c3 	.word	0x080072c3
 8007288:	080072ad 	.word	0x080072ad
 800728c:	080072c3 	.word	0x080072c3
 8007290:	080072b3 	.word	0x080072b3
 8007294:	080072c3 	.word	0x080072c3
 8007298:	080072c3 	.word	0x080072c3
 800729c:	080072c3 	.word	0x080072c3
 80072a0:	080072bb 	.word	0x080072bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072a4:	f7fe fbfc 	bl	8005aa0 <HAL_RCC_GetPCLK1Freq>
 80072a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072aa:	e010      	b.n	80072ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072ac:	4b9e      	ldr	r3, [pc, #632]	@ (8007528 <UART_SetConfig+0x5c0>)
 80072ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072b0:	e00d      	b.n	80072ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072b2:	f7fe fb87 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 80072b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072b8:	e009      	b.n	80072ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072c0:	e005      	b.n	80072ce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 8130 	beq.w	8007536 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072da:	4a94      	ldr	r2, [pc, #592]	@ (800752c <UART_SetConfig+0x5c4>)
 80072dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072e0:	461a      	mov	r2, r3
 80072e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80072e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	4613      	mov	r3, r2
 80072f0:	005b      	lsls	r3, r3, #1
 80072f2:	4413      	add	r3, r2
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d305      	bcc.n	8007306 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	429a      	cmp	r2, r3
 8007304:	d903      	bls.n	800730e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800730c:	e113      	b.n	8007536 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800730e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007310:	2200      	movs	r2, #0
 8007312:	60bb      	str	r3, [r7, #8]
 8007314:	60fa      	str	r2, [r7, #12]
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800731a:	4a84      	ldr	r2, [pc, #528]	@ (800752c <UART_SetConfig+0x5c4>)
 800731c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007320:	b29b      	uxth	r3, r3
 8007322:	2200      	movs	r2, #0
 8007324:	603b      	str	r3, [r7, #0]
 8007326:	607a      	str	r2, [r7, #4]
 8007328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800732c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007330:	f7f9 fcb2 	bl	8000c98 <__aeabi_uldivmod>
 8007334:	4602      	mov	r2, r0
 8007336:	460b      	mov	r3, r1
 8007338:	4610      	mov	r0, r2
 800733a:	4619      	mov	r1, r3
 800733c:	f04f 0200 	mov.w	r2, #0
 8007340:	f04f 0300 	mov.w	r3, #0
 8007344:	020b      	lsls	r3, r1, #8
 8007346:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800734a:	0202      	lsls	r2, r0, #8
 800734c:	6979      	ldr	r1, [r7, #20]
 800734e:	6849      	ldr	r1, [r1, #4]
 8007350:	0849      	lsrs	r1, r1, #1
 8007352:	2000      	movs	r0, #0
 8007354:	460c      	mov	r4, r1
 8007356:	4605      	mov	r5, r0
 8007358:	eb12 0804 	adds.w	r8, r2, r4
 800735c:	eb43 0905 	adc.w	r9, r3, r5
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	469a      	mov	sl, r3
 8007368:	4693      	mov	fp, r2
 800736a:	4652      	mov	r2, sl
 800736c:	465b      	mov	r3, fp
 800736e:	4640      	mov	r0, r8
 8007370:	4649      	mov	r1, r9
 8007372:	f7f9 fc91 	bl	8000c98 <__aeabi_uldivmod>
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	4613      	mov	r3, r2
 800737c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007384:	d308      	bcc.n	8007398 <UART_SetConfig+0x430>
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800738c:	d204      	bcs.n	8007398 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6a3a      	ldr	r2, [r7, #32]
 8007394:	60da      	str	r2, [r3, #12]
 8007396:	e0ce      	b.n	8007536 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800739e:	e0ca      	b.n	8007536 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073a8:	d166      	bne.n	8007478 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80073aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073ae:	2b08      	cmp	r3, #8
 80073b0:	d827      	bhi.n	8007402 <UART_SetConfig+0x49a>
 80073b2:	a201      	add	r2, pc, #4	@ (adr r2, 80073b8 <UART_SetConfig+0x450>)
 80073b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b8:	080073dd 	.word	0x080073dd
 80073bc:	080073e5 	.word	0x080073e5
 80073c0:	080073ed 	.word	0x080073ed
 80073c4:	08007403 	.word	0x08007403
 80073c8:	080073f3 	.word	0x080073f3
 80073cc:	08007403 	.word	0x08007403
 80073d0:	08007403 	.word	0x08007403
 80073d4:	08007403 	.word	0x08007403
 80073d8:	080073fb 	.word	0x080073fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073dc:	f7fe fb60 	bl	8005aa0 <HAL_RCC_GetPCLK1Freq>
 80073e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073e2:	e014      	b.n	800740e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073e4:	f7fe fb72 	bl	8005acc <HAL_RCC_GetPCLK2Freq>
 80073e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073ea:	e010      	b.n	800740e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073ec:	4b4e      	ldr	r3, [pc, #312]	@ (8007528 <UART_SetConfig+0x5c0>)
 80073ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073f0:	e00d      	b.n	800740e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073f2:	f7fe fae7 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 80073f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073f8:	e009      	b.n	800740e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007400:	e005      	b.n	800740e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007402:	2300      	movs	r3, #0
 8007404:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800740c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800740e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 8090 	beq.w	8007536 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800741a:	4a44      	ldr	r2, [pc, #272]	@ (800752c <UART_SetConfig+0x5c4>)
 800741c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007420:	461a      	mov	r2, r3
 8007422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007424:	fbb3 f3f2 	udiv	r3, r3, r2
 8007428:	005a      	lsls	r2, r3, #1
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	085b      	lsrs	r3, r3, #1
 8007430:	441a      	add	r2, r3
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	fbb2 f3f3 	udiv	r3, r2, r3
 800743a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	2b0f      	cmp	r3, #15
 8007440:	d916      	bls.n	8007470 <UART_SetConfig+0x508>
 8007442:	6a3b      	ldr	r3, [r7, #32]
 8007444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007448:	d212      	bcs.n	8007470 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	b29b      	uxth	r3, r3
 800744e:	f023 030f 	bic.w	r3, r3, #15
 8007452:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	085b      	lsrs	r3, r3, #1
 8007458:	b29b      	uxth	r3, r3
 800745a:	f003 0307 	and.w	r3, r3, #7
 800745e:	b29a      	uxth	r2, r3
 8007460:	8bfb      	ldrh	r3, [r7, #30]
 8007462:	4313      	orrs	r3, r2
 8007464:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	8bfa      	ldrh	r2, [r7, #30]
 800746c:	60da      	str	r2, [r3, #12]
 800746e:	e062      	b.n	8007536 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007476:	e05e      	b.n	8007536 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007478:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800747c:	2b08      	cmp	r3, #8
 800747e:	d828      	bhi.n	80074d2 <UART_SetConfig+0x56a>
 8007480:	a201      	add	r2, pc, #4	@ (adr r2, 8007488 <UART_SetConfig+0x520>)
 8007482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007486:	bf00      	nop
 8007488:	080074ad 	.word	0x080074ad
 800748c:	080074b5 	.word	0x080074b5
 8007490:	080074bd 	.word	0x080074bd
 8007494:	080074d3 	.word	0x080074d3
 8007498:	080074c3 	.word	0x080074c3
 800749c:	080074d3 	.word	0x080074d3
 80074a0:	080074d3 	.word	0x080074d3
 80074a4:	080074d3 	.word	0x080074d3
 80074a8:	080074cb 	.word	0x080074cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074ac:	f7fe faf8 	bl	8005aa0 <HAL_RCC_GetPCLK1Freq>
 80074b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074b2:	e014      	b.n	80074de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074b4:	f7fe fb0a 	bl	8005acc <HAL_RCC_GetPCLK2Freq>
 80074b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074ba:	e010      	b.n	80074de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007528 <UART_SetConfig+0x5c0>)
 80074be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074c0:	e00d      	b.n	80074de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074c2:	f7fe fa7f 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 80074c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074c8:	e009      	b.n	80074de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074d0:	e005      	b.n	80074de <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80074dc:	bf00      	nop
    }

    if (pclk != 0U)
 80074de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d028      	beq.n	8007536 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e8:	4a10      	ldr	r2, [pc, #64]	@ (800752c <UART_SetConfig+0x5c4>)
 80074ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074ee:	461a      	mov	r2, r3
 80074f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	085b      	lsrs	r3, r3, #1
 80074fc:	441a      	add	r2, r3
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	fbb2 f3f3 	udiv	r3, r2, r3
 8007506:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	2b0f      	cmp	r3, #15
 800750c:	d910      	bls.n	8007530 <UART_SetConfig+0x5c8>
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007514:	d20c      	bcs.n	8007530 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	b29a      	uxth	r2, r3
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	60da      	str	r2, [r3, #12]
 8007520:	e009      	b.n	8007536 <UART_SetConfig+0x5ce>
 8007522:	bf00      	nop
 8007524:	40008000 	.word	0x40008000
 8007528:	00f42400 	.word	0x00f42400
 800752c:	0800b168 	.word	0x0800b168
      }
      else
      {
        ret = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2201      	movs	r2, #1
 800753a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2201      	movs	r2, #1
 8007542:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2200      	movs	r2, #0
 800754a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2200      	movs	r2, #0
 8007550:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007552:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007556:	4618      	mov	r0, r3
 8007558:	3730      	adds	r7, #48	@ 0x30
 800755a:	46bd      	mov	sp, r7
 800755c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007560 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756c:	f003 0308 	and.w	r3, r3, #8
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00a      	beq.n	800758a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00a      	beq.n	80075ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00a      	beq.n	80075ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d2:	f003 0304 	and.w	r3, r3, #4
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	430a      	orrs	r2, r1
 80075ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f4:	f003 0310 	and.w	r3, r3, #16
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00a      	beq.n	8007612 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800763c:	2b00      	cmp	r3, #0
 800763e:	d01a      	beq.n	8007676 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	430a      	orrs	r2, r1
 8007654:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800765a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800765e:	d10a      	bne.n	8007676 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800767a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00a      	beq.n	8007698 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	605a      	str	r2, [r3, #4]
  }
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b098      	sub	sp, #96	@ 0x60
 80076a8:	af02      	add	r7, sp, #8
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076b4:	f7fb fba4 	bl	8002e00 <HAL_GetTick>
 80076b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0308 	and.w	r3, r3, #8
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d12f      	bne.n	8007728 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076d0:	2200      	movs	r2, #0
 80076d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f88e 	bl	80077f8 <UART_WaitOnFlagUntilTimeout>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d022      	beq.n	8007728 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ea:	e853 3f00 	ldrex	r3, [r3]
 80076ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	461a      	mov	r2, r3
 80076fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007700:	647b      	str	r3, [r7, #68]	@ 0x44
 8007702:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007704:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007706:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007708:	e841 2300 	strex	r3, r2, [r1]
 800770c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800770e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1e6      	bne.n	80076e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2220      	movs	r2, #32
 8007718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e063      	b.n	80077f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0304 	and.w	r3, r3, #4
 8007732:	2b04      	cmp	r3, #4
 8007734:	d149      	bne.n	80077ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007736:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800773e:	2200      	movs	r2, #0
 8007740:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f857 	bl	80077f8 <UART_WaitOnFlagUntilTimeout>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d03c      	beq.n	80077ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007758:	e853 3f00 	ldrex	r3, [r3]
 800775c:	623b      	str	r3, [r7, #32]
   return(result);
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007764:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800776e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007770:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007772:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007776:	e841 2300 	strex	r3, r2, [r1]
 800777a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800777c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1e6      	bne.n	8007750 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3308      	adds	r3, #8
 8007788:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	e853 3f00 	ldrex	r3, [r3]
 8007790:	60fb      	str	r3, [r7, #12]
   return(result);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f023 0301 	bic.w	r3, r3, #1
 8007798:	64bb      	str	r3, [r7, #72]	@ 0x48
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3308      	adds	r3, #8
 80077a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077a2:	61fa      	str	r2, [r7, #28]
 80077a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a6:	69b9      	ldr	r1, [r7, #24]
 80077a8:	69fa      	ldr	r2, [r7, #28]
 80077aa:	e841 2300 	strex	r3, r2, [r1]
 80077ae:	617b      	str	r3, [r7, #20]
   return(result);
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1e5      	bne.n	8007782 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2220      	movs	r2, #32
 80077ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e012      	b.n	80077f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2220      	movs	r2, #32
 80077d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3758      	adds	r7, #88	@ 0x58
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	603b      	str	r3, [r7, #0]
 8007804:	4613      	mov	r3, r2
 8007806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007808:	e04f      	b.n	80078aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007810:	d04b      	beq.n	80078aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007812:	f7fb faf5 	bl	8002e00 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	429a      	cmp	r2, r3
 8007820:	d302      	bcc.n	8007828 <UART_WaitOnFlagUntilTimeout+0x30>
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d101      	bne.n	800782c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e04e      	b.n	80078ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0304 	and.w	r3, r3, #4
 8007836:	2b00      	cmp	r3, #0
 8007838:	d037      	beq.n	80078aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	2b80      	cmp	r3, #128	@ 0x80
 800783e:	d034      	beq.n	80078aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2b40      	cmp	r3, #64	@ 0x40
 8007844:	d031      	beq.n	80078aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	f003 0308 	and.w	r3, r3, #8
 8007850:	2b08      	cmp	r3, #8
 8007852:	d110      	bne.n	8007876 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2208      	movs	r2, #8
 800785a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 f838 	bl	80078d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2208      	movs	r2, #8
 8007866:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e029      	b.n	80078ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	69db      	ldr	r3, [r3, #28]
 800787c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007880:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007884:	d111      	bne.n	80078aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800788e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 f81e 	bl	80078d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2220      	movs	r2, #32
 800789a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e00f      	b.n	80078ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	69da      	ldr	r2, [r3, #28]
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	4013      	ands	r3, r2
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	bf0c      	ite	eq
 80078ba:	2301      	moveq	r3, #1
 80078bc:	2300      	movne	r3, #0
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	461a      	mov	r2, r3
 80078c2:	79fb      	ldrb	r3, [r7, #7]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d0a0      	beq.n	800780a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b095      	sub	sp, #84	@ 0x54
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078e2:	e853 3f00 	ldrex	r3, [r3]
 80078e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80078fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007900:	e841 2300 	strex	r3, r2, [r1]
 8007904:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1e6      	bne.n	80078da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3308      	adds	r3, #8
 8007912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	e853 3f00 	ldrex	r3, [r3]
 800791a:	61fb      	str	r3, [r7, #28]
   return(result);
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007922:	f023 0301 	bic.w	r3, r3, #1
 8007926:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	3308      	adds	r3, #8
 800792e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007930:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007932:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007934:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007936:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007938:	e841 2300 	strex	r3, r2, [r1]
 800793c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800793e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e3      	bne.n	800790c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007948:	2b01      	cmp	r3, #1
 800794a:	d118      	bne.n	800797e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	e853 3f00 	ldrex	r3, [r3]
 8007958:	60bb      	str	r3, [r7, #8]
   return(result);
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f023 0310 	bic.w	r3, r3, #16
 8007960:	647b      	str	r3, [r7, #68]	@ 0x44
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800796a:	61bb      	str	r3, [r7, #24]
 800796c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	6979      	ldr	r1, [r7, #20]
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	e841 2300 	strex	r3, r2, [r1]
 8007976:	613b      	str	r3, [r7, #16]
   return(result);
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1e6      	bne.n	800794c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2220      	movs	r2, #32
 8007982:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007992:	bf00      	nop
 8007994:	3754      	adds	r7, #84	@ 0x54
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800799e:	b480      	push	{r7}
 80079a0:	b085      	sub	sp, #20
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d101      	bne.n	80079b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80079b0:	2302      	movs	r3, #2
 80079b2:	e027      	b.n	8007a04 <HAL_UARTEx_DisableFifoMode+0x66>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2224      	movs	r2, #36	@ 0x24
 80079c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f022 0201 	bic.w	r2, r2, #1
 80079da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80079e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2220      	movs	r2, #32
 80079f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d101      	bne.n	8007a28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a24:	2302      	movs	r3, #2
 8007a26:	e02d      	b.n	8007a84 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2224      	movs	r2, #36	@ 0x24
 8007a34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 0201 	bic.w	r2, r2, #1
 8007a4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	430a      	orrs	r2, r1
 8007a62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f84f 	bl	8007b08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2220      	movs	r2, #32
 8007a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d101      	bne.n	8007aa4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	e02d      	b.n	8007b00 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2224      	movs	r2, #36	@ 0x24
 8007ab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f022 0201 	bic.w	r2, r2, #1
 8007aca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f811 	bl	8007b08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2220      	movs	r2, #32
 8007af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d108      	bne.n	8007b2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b28:	e031      	b.n	8007b8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b2a:	2308      	movs	r3, #8
 8007b2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b2e:	2308      	movs	r3, #8
 8007b30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	0e5b      	lsrs	r3, r3, #25
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	f003 0307 	and.w	r3, r3, #7
 8007b40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	0f5b      	lsrs	r3, r3, #29
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	f003 0307 	and.w	r3, r3, #7
 8007b50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b52:	7bbb      	ldrb	r3, [r7, #14]
 8007b54:	7b3a      	ldrb	r2, [r7, #12]
 8007b56:	4911      	ldr	r1, [pc, #68]	@ (8007b9c <UARTEx_SetNbDataToProcess+0x94>)
 8007b58:	5c8a      	ldrb	r2, [r1, r2]
 8007b5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b5e:	7b3a      	ldrb	r2, [r7, #12]
 8007b60:	490f      	ldr	r1, [pc, #60]	@ (8007ba0 <UARTEx_SetNbDataToProcess+0x98>)
 8007b62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b64:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	7b7a      	ldrb	r2, [r7, #13]
 8007b74:	4909      	ldr	r1, [pc, #36]	@ (8007b9c <UARTEx_SetNbDataToProcess+0x94>)
 8007b76:	5c8a      	ldrb	r2, [r1, r2]
 8007b78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b7c:	7b7a      	ldrb	r2, [r7, #13]
 8007b7e:	4908      	ldr	r1, [pc, #32]	@ (8007ba0 <UARTEx_SetNbDataToProcess+0x98>)
 8007b80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b82:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007b8e:	bf00      	nop
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	0800b180 	.word	0x0800b180
 8007ba0:	0800b188 	.word	0x0800b188

08007ba4 <__cvt>:
 8007ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba8:	ec57 6b10 	vmov	r6, r7, d0
 8007bac:	2f00      	cmp	r7, #0
 8007bae:	460c      	mov	r4, r1
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	463b      	mov	r3, r7
 8007bb4:	bfbb      	ittet	lt
 8007bb6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007bba:	461f      	movlt	r7, r3
 8007bbc:	2300      	movge	r3, #0
 8007bbe:	232d      	movlt	r3, #45	@ 0x2d
 8007bc0:	700b      	strb	r3, [r1, #0]
 8007bc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bc4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007bc8:	4691      	mov	r9, r2
 8007bca:	f023 0820 	bic.w	r8, r3, #32
 8007bce:	bfbc      	itt	lt
 8007bd0:	4632      	movlt	r2, r6
 8007bd2:	4616      	movlt	r6, r2
 8007bd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007bd8:	d005      	beq.n	8007be6 <__cvt+0x42>
 8007bda:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007bde:	d100      	bne.n	8007be2 <__cvt+0x3e>
 8007be0:	3401      	adds	r4, #1
 8007be2:	2102      	movs	r1, #2
 8007be4:	e000      	b.n	8007be8 <__cvt+0x44>
 8007be6:	2103      	movs	r1, #3
 8007be8:	ab03      	add	r3, sp, #12
 8007bea:	9301      	str	r3, [sp, #4]
 8007bec:	ab02      	add	r3, sp, #8
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	ec47 6b10 	vmov	d0, r6, r7
 8007bf4:	4653      	mov	r3, sl
 8007bf6:	4622      	mov	r2, r4
 8007bf8:	f000 fe5a 	bl	80088b0 <_dtoa_r>
 8007bfc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c00:	4605      	mov	r5, r0
 8007c02:	d119      	bne.n	8007c38 <__cvt+0x94>
 8007c04:	f019 0f01 	tst.w	r9, #1
 8007c08:	d00e      	beq.n	8007c28 <__cvt+0x84>
 8007c0a:	eb00 0904 	add.w	r9, r0, r4
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2300      	movs	r3, #0
 8007c12:	4630      	mov	r0, r6
 8007c14:	4639      	mov	r1, r7
 8007c16:	f7f8 ff7f 	bl	8000b18 <__aeabi_dcmpeq>
 8007c1a:	b108      	cbz	r0, 8007c20 <__cvt+0x7c>
 8007c1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c20:	2230      	movs	r2, #48	@ 0x30
 8007c22:	9b03      	ldr	r3, [sp, #12]
 8007c24:	454b      	cmp	r3, r9
 8007c26:	d31e      	bcc.n	8007c66 <__cvt+0xc2>
 8007c28:	9b03      	ldr	r3, [sp, #12]
 8007c2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c2c:	1b5b      	subs	r3, r3, r5
 8007c2e:	4628      	mov	r0, r5
 8007c30:	6013      	str	r3, [r2, #0]
 8007c32:	b004      	add	sp, #16
 8007c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c3c:	eb00 0904 	add.w	r9, r0, r4
 8007c40:	d1e5      	bne.n	8007c0e <__cvt+0x6a>
 8007c42:	7803      	ldrb	r3, [r0, #0]
 8007c44:	2b30      	cmp	r3, #48	@ 0x30
 8007c46:	d10a      	bne.n	8007c5e <__cvt+0xba>
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	4639      	mov	r1, r7
 8007c50:	f7f8 ff62 	bl	8000b18 <__aeabi_dcmpeq>
 8007c54:	b918      	cbnz	r0, 8007c5e <__cvt+0xba>
 8007c56:	f1c4 0401 	rsb	r4, r4, #1
 8007c5a:	f8ca 4000 	str.w	r4, [sl]
 8007c5e:	f8da 3000 	ldr.w	r3, [sl]
 8007c62:	4499      	add	r9, r3
 8007c64:	e7d3      	b.n	8007c0e <__cvt+0x6a>
 8007c66:	1c59      	adds	r1, r3, #1
 8007c68:	9103      	str	r1, [sp, #12]
 8007c6a:	701a      	strb	r2, [r3, #0]
 8007c6c:	e7d9      	b.n	8007c22 <__cvt+0x7e>

08007c6e <__exponent>:
 8007c6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c70:	2900      	cmp	r1, #0
 8007c72:	bfba      	itte	lt
 8007c74:	4249      	neglt	r1, r1
 8007c76:	232d      	movlt	r3, #45	@ 0x2d
 8007c78:	232b      	movge	r3, #43	@ 0x2b
 8007c7a:	2909      	cmp	r1, #9
 8007c7c:	7002      	strb	r2, [r0, #0]
 8007c7e:	7043      	strb	r3, [r0, #1]
 8007c80:	dd29      	ble.n	8007cd6 <__exponent+0x68>
 8007c82:	f10d 0307 	add.w	r3, sp, #7
 8007c86:	461d      	mov	r5, r3
 8007c88:	270a      	movs	r7, #10
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007c90:	fb07 1416 	mls	r4, r7, r6, r1
 8007c94:	3430      	adds	r4, #48	@ 0x30
 8007c96:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	2c63      	cmp	r4, #99	@ 0x63
 8007c9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	dcf1      	bgt.n	8007c8a <__exponent+0x1c>
 8007ca6:	3130      	adds	r1, #48	@ 0x30
 8007ca8:	1e94      	subs	r4, r2, #2
 8007caa:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007cae:	1c41      	adds	r1, r0, #1
 8007cb0:	4623      	mov	r3, r4
 8007cb2:	42ab      	cmp	r3, r5
 8007cb4:	d30a      	bcc.n	8007ccc <__exponent+0x5e>
 8007cb6:	f10d 0309 	add.w	r3, sp, #9
 8007cba:	1a9b      	subs	r3, r3, r2
 8007cbc:	42ac      	cmp	r4, r5
 8007cbe:	bf88      	it	hi
 8007cc0:	2300      	movhi	r3, #0
 8007cc2:	3302      	adds	r3, #2
 8007cc4:	4403      	add	r3, r0
 8007cc6:	1a18      	subs	r0, r3, r0
 8007cc8:	b003      	add	sp, #12
 8007cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ccc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007cd0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007cd4:	e7ed      	b.n	8007cb2 <__exponent+0x44>
 8007cd6:	2330      	movs	r3, #48	@ 0x30
 8007cd8:	3130      	adds	r1, #48	@ 0x30
 8007cda:	7083      	strb	r3, [r0, #2]
 8007cdc:	70c1      	strb	r1, [r0, #3]
 8007cde:	1d03      	adds	r3, r0, #4
 8007ce0:	e7f1      	b.n	8007cc6 <__exponent+0x58>
	...

08007ce4 <_printf_float>:
 8007ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce8:	b08d      	sub	sp, #52	@ 0x34
 8007cea:	460c      	mov	r4, r1
 8007cec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007cf0:	4616      	mov	r6, r2
 8007cf2:	461f      	mov	r7, r3
 8007cf4:	4605      	mov	r5, r0
 8007cf6:	f000 fcdb 	bl	80086b0 <_localeconv_r>
 8007cfa:	6803      	ldr	r3, [r0, #0]
 8007cfc:	9304      	str	r3, [sp, #16]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7f8 fade 	bl	80002c0 <strlen>
 8007d04:	2300      	movs	r3, #0
 8007d06:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d08:	f8d8 3000 	ldr.w	r3, [r8]
 8007d0c:	9005      	str	r0, [sp, #20]
 8007d0e:	3307      	adds	r3, #7
 8007d10:	f023 0307 	bic.w	r3, r3, #7
 8007d14:	f103 0208 	add.w	r2, r3, #8
 8007d18:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d1c:	f8d4 b000 	ldr.w	fp, [r4]
 8007d20:	f8c8 2000 	str.w	r2, [r8]
 8007d24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d28:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007d2c:	9307      	str	r3, [sp, #28]
 8007d2e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d32:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007d36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d3a:	4b9c      	ldr	r3, [pc, #624]	@ (8007fac <_printf_float+0x2c8>)
 8007d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d40:	f7f8 ff1c 	bl	8000b7c <__aeabi_dcmpun>
 8007d44:	bb70      	cbnz	r0, 8007da4 <_printf_float+0xc0>
 8007d46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d4a:	4b98      	ldr	r3, [pc, #608]	@ (8007fac <_printf_float+0x2c8>)
 8007d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d50:	f7f8 fef6 	bl	8000b40 <__aeabi_dcmple>
 8007d54:	bb30      	cbnz	r0, 8007da4 <_printf_float+0xc0>
 8007d56:	2200      	movs	r2, #0
 8007d58:	2300      	movs	r3, #0
 8007d5a:	4640      	mov	r0, r8
 8007d5c:	4649      	mov	r1, r9
 8007d5e:	f7f8 fee5 	bl	8000b2c <__aeabi_dcmplt>
 8007d62:	b110      	cbz	r0, 8007d6a <_printf_float+0x86>
 8007d64:	232d      	movs	r3, #45	@ 0x2d
 8007d66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d6a:	4a91      	ldr	r2, [pc, #580]	@ (8007fb0 <_printf_float+0x2cc>)
 8007d6c:	4b91      	ldr	r3, [pc, #580]	@ (8007fb4 <_printf_float+0x2d0>)
 8007d6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007d72:	bf94      	ite	ls
 8007d74:	4690      	movls	r8, r2
 8007d76:	4698      	movhi	r8, r3
 8007d78:	2303      	movs	r3, #3
 8007d7a:	6123      	str	r3, [r4, #16]
 8007d7c:	f02b 0304 	bic.w	r3, fp, #4
 8007d80:	6023      	str	r3, [r4, #0]
 8007d82:	f04f 0900 	mov.w	r9, #0
 8007d86:	9700      	str	r7, [sp, #0]
 8007d88:	4633      	mov	r3, r6
 8007d8a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	4628      	mov	r0, r5
 8007d90:	f000 f9d2 	bl	8008138 <_printf_common>
 8007d94:	3001      	adds	r0, #1
 8007d96:	f040 808d 	bne.w	8007eb4 <_printf_float+0x1d0>
 8007d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9e:	b00d      	add	sp, #52	@ 0x34
 8007da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da4:	4642      	mov	r2, r8
 8007da6:	464b      	mov	r3, r9
 8007da8:	4640      	mov	r0, r8
 8007daa:	4649      	mov	r1, r9
 8007dac:	f7f8 fee6 	bl	8000b7c <__aeabi_dcmpun>
 8007db0:	b140      	cbz	r0, 8007dc4 <_printf_float+0xe0>
 8007db2:	464b      	mov	r3, r9
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	bfbc      	itt	lt
 8007db8:	232d      	movlt	r3, #45	@ 0x2d
 8007dba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007dbe:	4a7e      	ldr	r2, [pc, #504]	@ (8007fb8 <_printf_float+0x2d4>)
 8007dc0:	4b7e      	ldr	r3, [pc, #504]	@ (8007fbc <_printf_float+0x2d8>)
 8007dc2:	e7d4      	b.n	8007d6e <_printf_float+0x8a>
 8007dc4:	6863      	ldr	r3, [r4, #4]
 8007dc6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007dca:	9206      	str	r2, [sp, #24]
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	d13b      	bne.n	8007e48 <_printf_float+0x164>
 8007dd0:	2306      	movs	r3, #6
 8007dd2:	6063      	str	r3, [r4, #4]
 8007dd4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007dd8:	2300      	movs	r3, #0
 8007dda:	6022      	str	r2, [r4, #0]
 8007ddc:	9303      	str	r3, [sp, #12]
 8007dde:	ab0a      	add	r3, sp, #40	@ 0x28
 8007de0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007de4:	ab09      	add	r3, sp, #36	@ 0x24
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	6861      	ldr	r1, [r4, #4]
 8007dea:	ec49 8b10 	vmov	d0, r8, r9
 8007dee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007df2:	4628      	mov	r0, r5
 8007df4:	f7ff fed6 	bl	8007ba4 <__cvt>
 8007df8:	9b06      	ldr	r3, [sp, #24]
 8007dfa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007dfc:	2b47      	cmp	r3, #71	@ 0x47
 8007dfe:	4680      	mov	r8, r0
 8007e00:	d129      	bne.n	8007e56 <_printf_float+0x172>
 8007e02:	1cc8      	adds	r0, r1, #3
 8007e04:	db02      	blt.n	8007e0c <_printf_float+0x128>
 8007e06:	6863      	ldr	r3, [r4, #4]
 8007e08:	4299      	cmp	r1, r3
 8007e0a:	dd41      	ble.n	8007e90 <_printf_float+0x1ac>
 8007e0c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e10:	fa5f fa8a 	uxtb.w	sl, sl
 8007e14:	3901      	subs	r1, #1
 8007e16:	4652      	mov	r2, sl
 8007e18:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e1c:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e1e:	f7ff ff26 	bl	8007c6e <__exponent>
 8007e22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e24:	1813      	adds	r3, r2, r0
 8007e26:	2a01      	cmp	r2, #1
 8007e28:	4681      	mov	r9, r0
 8007e2a:	6123      	str	r3, [r4, #16]
 8007e2c:	dc02      	bgt.n	8007e34 <_printf_float+0x150>
 8007e2e:	6822      	ldr	r2, [r4, #0]
 8007e30:	07d2      	lsls	r2, r2, #31
 8007e32:	d501      	bpl.n	8007e38 <_printf_float+0x154>
 8007e34:	3301      	adds	r3, #1
 8007e36:	6123      	str	r3, [r4, #16]
 8007e38:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d0a2      	beq.n	8007d86 <_printf_float+0xa2>
 8007e40:	232d      	movs	r3, #45	@ 0x2d
 8007e42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e46:	e79e      	b.n	8007d86 <_printf_float+0xa2>
 8007e48:	9a06      	ldr	r2, [sp, #24]
 8007e4a:	2a47      	cmp	r2, #71	@ 0x47
 8007e4c:	d1c2      	bne.n	8007dd4 <_printf_float+0xf0>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1c0      	bne.n	8007dd4 <_printf_float+0xf0>
 8007e52:	2301      	movs	r3, #1
 8007e54:	e7bd      	b.n	8007dd2 <_printf_float+0xee>
 8007e56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e5a:	d9db      	bls.n	8007e14 <_printf_float+0x130>
 8007e5c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007e60:	d118      	bne.n	8007e94 <_printf_float+0x1b0>
 8007e62:	2900      	cmp	r1, #0
 8007e64:	6863      	ldr	r3, [r4, #4]
 8007e66:	dd0b      	ble.n	8007e80 <_printf_float+0x19c>
 8007e68:	6121      	str	r1, [r4, #16]
 8007e6a:	b913      	cbnz	r3, 8007e72 <_printf_float+0x18e>
 8007e6c:	6822      	ldr	r2, [r4, #0]
 8007e6e:	07d0      	lsls	r0, r2, #31
 8007e70:	d502      	bpl.n	8007e78 <_printf_float+0x194>
 8007e72:	3301      	adds	r3, #1
 8007e74:	440b      	add	r3, r1
 8007e76:	6123      	str	r3, [r4, #16]
 8007e78:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007e7a:	f04f 0900 	mov.w	r9, #0
 8007e7e:	e7db      	b.n	8007e38 <_printf_float+0x154>
 8007e80:	b913      	cbnz	r3, 8007e88 <_printf_float+0x1a4>
 8007e82:	6822      	ldr	r2, [r4, #0]
 8007e84:	07d2      	lsls	r2, r2, #31
 8007e86:	d501      	bpl.n	8007e8c <_printf_float+0x1a8>
 8007e88:	3302      	adds	r3, #2
 8007e8a:	e7f4      	b.n	8007e76 <_printf_float+0x192>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e7f2      	b.n	8007e76 <_printf_float+0x192>
 8007e90:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007e94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e96:	4299      	cmp	r1, r3
 8007e98:	db05      	blt.n	8007ea6 <_printf_float+0x1c2>
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	6121      	str	r1, [r4, #16]
 8007e9e:	07d8      	lsls	r0, r3, #31
 8007ea0:	d5ea      	bpl.n	8007e78 <_printf_float+0x194>
 8007ea2:	1c4b      	adds	r3, r1, #1
 8007ea4:	e7e7      	b.n	8007e76 <_printf_float+0x192>
 8007ea6:	2900      	cmp	r1, #0
 8007ea8:	bfd4      	ite	le
 8007eaa:	f1c1 0202 	rsble	r2, r1, #2
 8007eae:	2201      	movgt	r2, #1
 8007eb0:	4413      	add	r3, r2
 8007eb2:	e7e0      	b.n	8007e76 <_printf_float+0x192>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	055a      	lsls	r2, r3, #21
 8007eb8:	d407      	bmi.n	8007eca <_printf_float+0x1e6>
 8007eba:	6923      	ldr	r3, [r4, #16]
 8007ebc:	4642      	mov	r2, r8
 8007ebe:	4631      	mov	r1, r6
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	47b8      	blx	r7
 8007ec4:	3001      	adds	r0, #1
 8007ec6:	d12b      	bne.n	8007f20 <_printf_float+0x23c>
 8007ec8:	e767      	b.n	8007d9a <_printf_float+0xb6>
 8007eca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ece:	f240 80dd 	bls.w	800808c <_printf_float+0x3a8>
 8007ed2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f7f8 fe1d 	bl	8000b18 <__aeabi_dcmpeq>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	d033      	beq.n	8007f4a <_printf_float+0x266>
 8007ee2:	4a37      	ldr	r2, [pc, #220]	@ (8007fc0 <_printf_float+0x2dc>)
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	4628      	mov	r0, r5
 8007eea:	47b8      	blx	r7
 8007eec:	3001      	adds	r0, #1
 8007eee:	f43f af54 	beq.w	8007d9a <_printf_float+0xb6>
 8007ef2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007ef6:	4543      	cmp	r3, r8
 8007ef8:	db02      	blt.n	8007f00 <_printf_float+0x21c>
 8007efa:	6823      	ldr	r3, [r4, #0]
 8007efc:	07d8      	lsls	r0, r3, #31
 8007efe:	d50f      	bpl.n	8007f20 <_printf_float+0x23c>
 8007f00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f04:	4631      	mov	r1, r6
 8007f06:	4628      	mov	r0, r5
 8007f08:	47b8      	blx	r7
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	f43f af45 	beq.w	8007d9a <_printf_float+0xb6>
 8007f10:	f04f 0900 	mov.w	r9, #0
 8007f14:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f18:	f104 0a1a 	add.w	sl, r4, #26
 8007f1c:	45c8      	cmp	r8, r9
 8007f1e:	dc09      	bgt.n	8007f34 <_printf_float+0x250>
 8007f20:	6823      	ldr	r3, [r4, #0]
 8007f22:	079b      	lsls	r3, r3, #30
 8007f24:	f100 8103 	bmi.w	800812e <_printf_float+0x44a>
 8007f28:	68e0      	ldr	r0, [r4, #12]
 8007f2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f2c:	4298      	cmp	r0, r3
 8007f2e:	bfb8      	it	lt
 8007f30:	4618      	movlt	r0, r3
 8007f32:	e734      	b.n	8007d9e <_printf_float+0xba>
 8007f34:	2301      	movs	r3, #1
 8007f36:	4652      	mov	r2, sl
 8007f38:	4631      	mov	r1, r6
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	47b8      	blx	r7
 8007f3e:	3001      	adds	r0, #1
 8007f40:	f43f af2b 	beq.w	8007d9a <_printf_float+0xb6>
 8007f44:	f109 0901 	add.w	r9, r9, #1
 8007f48:	e7e8      	b.n	8007f1c <_printf_float+0x238>
 8007f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	dc39      	bgt.n	8007fc4 <_printf_float+0x2e0>
 8007f50:	4a1b      	ldr	r2, [pc, #108]	@ (8007fc0 <_printf_float+0x2dc>)
 8007f52:	2301      	movs	r3, #1
 8007f54:	4631      	mov	r1, r6
 8007f56:	4628      	mov	r0, r5
 8007f58:	47b8      	blx	r7
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	f43f af1d 	beq.w	8007d9a <_printf_float+0xb6>
 8007f60:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007f64:	ea59 0303 	orrs.w	r3, r9, r3
 8007f68:	d102      	bne.n	8007f70 <_printf_float+0x28c>
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	07d9      	lsls	r1, r3, #31
 8007f6e:	d5d7      	bpl.n	8007f20 <_printf_float+0x23c>
 8007f70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f74:	4631      	mov	r1, r6
 8007f76:	4628      	mov	r0, r5
 8007f78:	47b8      	blx	r7
 8007f7a:	3001      	adds	r0, #1
 8007f7c:	f43f af0d 	beq.w	8007d9a <_printf_float+0xb6>
 8007f80:	f04f 0a00 	mov.w	sl, #0
 8007f84:	f104 0b1a 	add.w	fp, r4, #26
 8007f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f8a:	425b      	negs	r3, r3
 8007f8c:	4553      	cmp	r3, sl
 8007f8e:	dc01      	bgt.n	8007f94 <_printf_float+0x2b0>
 8007f90:	464b      	mov	r3, r9
 8007f92:	e793      	b.n	8007ebc <_printf_float+0x1d8>
 8007f94:	2301      	movs	r3, #1
 8007f96:	465a      	mov	r2, fp
 8007f98:	4631      	mov	r1, r6
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	47b8      	blx	r7
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	f43f aefb 	beq.w	8007d9a <_printf_float+0xb6>
 8007fa4:	f10a 0a01 	add.w	sl, sl, #1
 8007fa8:	e7ee      	b.n	8007f88 <_printf_float+0x2a4>
 8007faa:	bf00      	nop
 8007fac:	7fefffff 	.word	0x7fefffff
 8007fb0:	0800b190 	.word	0x0800b190
 8007fb4:	0800b194 	.word	0x0800b194
 8007fb8:	0800b198 	.word	0x0800b198
 8007fbc:	0800b19c 	.word	0x0800b19c
 8007fc0:	0800b1a0 	.word	0x0800b1a0
 8007fc4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007fc6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007fca:	4553      	cmp	r3, sl
 8007fcc:	bfa8      	it	ge
 8007fce:	4653      	movge	r3, sl
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	4699      	mov	r9, r3
 8007fd4:	dc36      	bgt.n	8008044 <_printf_float+0x360>
 8007fd6:	f04f 0b00 	mov.w	fp, #0
 8007fda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fde:	f104 021a 	add.w	r2, r4, #26
 8007fe2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007fe4:	9306      	str	r3, [sp, #24]
 8007fe6:	eba3 0309 	sub.w	r3, r3, r9
 8007fea:	455b      	cmp	r3, fp
 8007fec:	dc31      	bgt.n	8008052 <_printf_float+0x36e>
 8007fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff0:	459a      	cmp	sl, r3
 8007ff2:	dc3a      	bgt.n	800806a <_printf_float+0x386>
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	07da      	lsls	r2, r3, #31
 8007ff8:	d437      	bmi.n	800806a <_printf_float+0x386>
 8007ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ffc:	ebaa 0903 	sub.w	r9, sl, r3
 8008000:	9b06      	ldr	r3, [sp, #24]
 8008002:	ebaa 0303 	sub.w	r3, sl, r3
 8008006:	4599      	cmp	r9, r3
 8008008:	bfa8      	it	ge
 800800a:	4699      	movge	r9, r3
 800800c:	f1b9 0f00 	cmp.w	r9, #0
 8008010:	dc33      	bgt.n	800807a <_printf_float+0x396>
 8008012:	f04f 0800 	mov.w	r8, #0
 8008016:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800801a:	f104 0b1a 	add.w	fp, r4, #26
 800801e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008020:	ebaa 0303 	sub.w	r3, sl, r3
 8008024:	eba3 0309 	sub.w	r3, r3, r9
 8008028:	4543      	cmp	r3, r8
 800802a:	f77f af79 	ble.w	8007f20 <_printf_float+0x23c>
 800802e:	2301      	movs	r3, #1
 8008030:	465a      	mov	r2, fp
 8008032:	4631      	mov	r1, r6
 8008034:	4628      	mov	r0, r5
 8008036:	47b8      	blx	r7
 8008038:	3001      	adds	r0, #1
 800803a:	f43f aeae 	beq.w	8007d9a <_printf_float+0xb6>
 800803e:	f108 0801 	add.w	r8, r8, #1
 8008042:	e7ec      	b.n	800801e <_printf_float+0x33a>
 8008044:	4642      	mov	r2, r8
 8008046:	4631      	mov	r1, r6
 8008048:	4628      	mov	r0, r5
 800804a:	47b8      	blx	r7
 800804c:	3001      	adds	r0, #1
 800804e:	d1c2      	bne.n	8007fd6 <_printf_float+0x2f2>
 8008050:	e6a3      	b.n	8007d9a <_printf_float+0xb6>
 8008052:	2301      	movs	r3, #1
 8008054:	4631      	mov	r1, r6
 8008056:	4628      	mov	r0, r5
 8008058:	9206      	str	r2, [sp, #24]
 800805a:	47b8      	blx	r7
 800805c:	3001      	adds	r0, #1
 800805e:	f43f ae9c 	beq.w	8007d9a <_printf_float+0xb6>
 8008062:	9a06      	ldr	r2, [sp, #24]
 8008064:	f10b 0b01 	add.w	fp, fp, #1
 8008068:	e7bb      	b.n	8007fe2 <_printf_float+0x2fe>
 800806a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800806e:	4631      	mov	r1, r6
 8008070:	4628      	mov	r0, r5
 8008072:	47b8      	blx	r7
 8008074:	3001      	adds	r0, #1
 8008076:	d1c0      	bne.n	8007ffa <_printf_float+0x316>
 8008078:	e68f      	b.n	8007d9a <_printf_float+0xb6>
 800807a:	9a06      	ldr	r2, [sp, #24]
 800807c:	464b      	mov	r3, r9
 800807e:	4442      	add	r2, r8
 8008080:	4631      	mov	r1, r6
 8008082:	4628      	mov	r0, r5
 8008084:	47b8      	blx	r7
 8008086:	3001      	adds	r0, #1
 8008088:	d1c3      	bne.n	8008012 <_printf_float+0x32e>
 800808a:	e686      	b.n	8007d9a <_printf_float+0xb6>
 800808c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008090:	f1ba 0f01 	cmp.w	sl, #1
 8008094:	dc01      	bgt.n	800809a <_printf_float+0x3b6>
 8008096:	07db      	lsls	r3, r3, #31
 8008098:	d536      	bpl.n	8008108 <_printf_float+0x424>
 800809a:	2301      	movs	r3, #1
 800809c:	4642      	mov	r2, r8
 800809e:	4631      	mov	r1, r6
 80080a0:	4628      	mov	r0, r5
 80080a2:	47b8      	blx	r7
 80080a4:	3001      	adds	r0, #1
 80080a6:	f43f ae78 	beq.w	8007d9a <_printf_float+0xb6>
 80080aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ae:	4631      	mov	r1, r6
 80080b0:	4628      	mov	r0, r5
 80080b2:	47b8      	blx	r7
 80080b4:	3001      	adds	r0, #1
 80080b6:	f43f ae70 	beq.w	8007d9a <_printf_float+0xb6>
 80080ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80080be:	2200      	movs	r2, #0
 80080c0:	2300      	movs	r3, #0
 80080c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080c6:	f7f8 fd27 	bl	8000b18 <__aeabi_dcmpeq>
 80080ca:	b9c0      	cbnz	r0, 80080fe <_printf_float+0x41a>
 80080cc:	4653      	mov	r3, sl
 80080ce:	f108 0201 	add.w	r2, r8, #1
 80080d2:	4631      	mov	r1, r6
 80080d4:	4628      	mov	r0, r5
 80080d6:	47b8      	blx	r7
 80080d8:	3001      	adds	r0, #1
 80080da:	d10c      	bne.n	80080f6 <_printf_float+0x412>
 80080dc:	e65d      	b.n	8007d9a <_printf_float+0xb6>
 80080de:	2301      	movs	r3, #1
 80080e0:	465a      	mov	r2, fp
 80080e2:	4631      	mov	r1, r6
 80080e4:	4628      	mov	r0, r5
 80080e6:	47b8      	blx	r7
 80080e8:	3001      	adds	r0, #1
 80080ea:	f43f ae56 	beq.w	8007d9a <_printf_float+0xb6>
 80080ee:	f108 0801 	add.w	r8, r8, #1
 80080f2:	45d0      	cmp	r8, sl
 80080f4:	dbf3      	blt.n	80080de <_printf_float+0x3fa>
 80080f6:	464b      	mov	r3, r9
 80080f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80080fc:	e6df      	b.n	8007ebe <_printf_float+0x1da>
 80080fe:	f04f 0800 	mov.w	r8, #0
 8008102:	f104 0b1a 	add.w	fp, r4, #26
 8008106:	e7f4      	b.n	80080f2 <_printf_float+0x40e>
 8008108:	2301      	movs	r3, #1
 800810a:	4642      	mov	r2, r8
 800810c:	e7e1      	b.n	80080d2 <_printf_float+0x3ee>
 800810e:	2301      	movs	r3, #1
 8008110:	464a      	mov	r2, r9
 8008112:	4631      	mov	r1, r6
 8008114:	4628      	mov	r0, r5
 8008116:	47b8      	blx	r7
 8008118:	3001      	adds	r0, #1
 800811a:	f43f ae3e 	beq.w	8007d9a <_printf_float+0xb6>
 800811e:	f108 0801 	add.w	r8, r8, #1
 8008122:	68e3      	ldr	r3, [r4, #12]
 8008124:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008126:	1a5b      	subs	r3, r3, r1
 8008128:	4543      	cmp	r3, r8
 800812a:	dcf0      	bgt.n	800810e <_printf_float+0x42a>
 800812c:	e6fc      	b.n	8007f28 <_printf_float+0x244>
 800812e:	f04f 0800 	mov.w	r8, #0
 8008132:	f104 0919 	add.w	r9, r4, #25
 8008136:	e7f4      	b.n	8008122 <_printf_float+0x43e>

08008138 <_printf_common>:
 8008138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800813c:	4616      	mov	r6, r2
 800813e:	4698      	mov	r8, r3
 8008140:	688a      	ldr	r2, [r1, #8]
 8008142:	690b      	ldr	r3, [r1, #16]
 8008144:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008148:	4293      	cmp	r3, r2
 800814a:	bfb8      	it	lt
 800814c:	4613      	movlt	r3, r2
 800814e:	6033      	str	r3, [r6, #0]
 8008150:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008154:	4607      	mov	r7, r0
 8008156:	460c      	mov	r4, r1
 8008158:	b10a      	cbz	r2, 800815e <_printf_common+0x26>
 800815a:	3301      	adds	r3, #1
 800815c:	6033      	str	r3, [r6, #0]
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	0699      	lsls	r1, r3, #26
 8008162:	bf42      	ittt	mi
 8008164:	6833      	ldrmi	r3, [r6, #0]
 8008166:	3302      	addmi	r3, #2
 8008168:	6033      	strmi	r3, [r6, #0]
 800816a:	6825      	ldr	r5, [r4, #0]
 800816c:	f015 0506 	ands.w	r5, r5, #6
 8008170:	d106      	bne.n	8008180 <_printf_common+0x48>
 8008172:	f104 0a19 	add.w	sl, r4, #25
 8008176:	68e3      	ldr	r3, [r4, #12]
 8008178:	6832      	ldr	r2, [r6, #0]
 800817a:	1a9b      	subs	r3, r3, r2
 800817c:	42ab      	cmp	r3, r5
 800817e:	dc26      	bgt.n	80081ce <_printf_common+0x96>
 8008180:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008184:	6822      	ldr	r2, [r4, #0]
 8008186:	3b00      	subs	r3, #0
 8008188:	bf18      	it	ne
 800818a:	2301      	movne	r3, #1
 800818c:	0692      	lsls	r2, r2, #26
 800818e:	d42b      	bmi.n	80081e8 <_printf_common+0xb0>
 8008190:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008194:	4641      	mov	r1, r8
 8008196:	4638      	mov	r0, r7
 8008198:	47c8      	blx	r9
 800819a:	3001      	adds	r0, #1
 800819c:	d01e      	beq.n	80081dc <_printf_common+0xa4>
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	6922      	ldr	r2, [r4, #16]
 80081a2:	f003 0306 	and.w	r3, r3, #6
 80081a6:	2b04      	cmp	r3, #4
 80081a8:	bf02      	ittt	eq
 80081aa:	68e5      	ldreq	r5, [r4, #12]
 80081ac:	6833      	ldreq	r3, [r6, #0]
 80081ae:	1aed      	subeq	r5, r5, r3
 80081b0:	68a3      	ldr	r3, [r4, #8]
 80081b2:	bf0c      	ite	eq
 80081b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081b8:	2500      	movne	r5, #0
 80081ba:	4293      	cmp	r3, r2
 80081bc:	bfc4      	itt	gt
 80081be:	1a9b      	subgt	r3, r3, r2
 80081c0:	18ed      	addgt	r5, r5, r3
 80081c2:	2600      	movs	r6, #0
 80081c4:	341a      	adds	r4, #26
 80081c6:	42b5      	cmp	r5, r6
 80081c8:	d11a      	bne.n	8008200 <_printf_common+0xc8>
 80081ca:	2000      	movs	r0, #0
 80081cc:	e008      	b.n	80081e0 <_printf_common+0xa8>
 80081ce:	2301      	movs	r3, #1
 80081d0:	4652      	mov	r2, sl
 80081d2:	4641      	mov	r1, r8
 80081d4:	4638      	mov	r0, r7
 80081d6:	47c8      	blx	r9
 80081d8:	3001      	adds	r0, #1
 80081da:	d103      	bne.n	80081e4 <_printf_common+0xac>
 80081dc:	f04f 30ff 	mov.w	r0, #4294967295
 80081e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081e4:	3501      	adds	r5, #1
 80081e6:	e7c6      	b.n	8008176 <_printf_common+0x3e>
 80081e8:	18e1      	adds	r1, r4, r3
 80081ea:	1c5a      	adds	r2, r3, #1
 80081ec:	2030      	movs	r0, #48	@ 0x30
 80081ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80081f2:	4422      	add	r2, r4
 80081f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80081f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80081fc:	3302      	adds	r3, #2
 80081fe:	e7c7      	b.n	8008190 <_printf_common+0x58>
 8008200:	2301      	movs	r3, #1
 8008202:	4622      	mov	r2, r4
 8008204:	4641      	mov	r1, r8
 8008206:	4638      	mov	r0, r7
 8008208:	47c8      	blx	r9
 800820a:	3001      	adds	r0, #1
 800820c:	d0e6      	beq.n	80081dc <_printf_common+0xa4>
 800820e:	3601      	adds	r6, #1
 8008210:	e7d9      	b.n	80081c6 <_printf_common+0x8e>
	...

08008214 <_printf_i>:
 8008214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008218:	7e0f      	ldrb	r7, [r1, #24]
 800821a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800821c:	2f78      	cmp	r7, #120	@ 0x78
 800821e:	4691      	mov	r9, r2
 8008220:	4680      	mov	r8, r0
 8008222:	460c      	mov	r4, r1
 8008224:	469a      	mov	sl, r3
 8008226:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800822a:	d807      	bhi.n	800823c <_printf_i+0x28>
 800822c:	2f62      	cmp	r7, #98	@ 0x62
 800822e:	d80a      	bhi.n	8008246 <_printf_i+0x32>
 8008230:	2f00      	cmp	r7, #0
 8008232:	f000 80d2 	beq.w	80083da <_printf_i+0x1c6>
 8008236:	2f58      	cmp	r7, #88	@ 0x58
 8008238:	f000 80b9 	beq.w	80083ae <_printf_i+0x19a>
 800823c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008240:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008244:	e03a      	b.n	80082bc <_printf_i+0xa8>
 8008246:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800824a:	2b15      	cmp	r3, #21
 800824c:	d8f6      	bhi.n	800823c <_printf_i+0x28>
 800824e:	a101      	add	r1, pc, #4	@ (adr r1, 8008254 <_printf_i+0x40>)
 8008250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008254:	080082ad 	.word	0x080082ad
 8008258:	080082c1 	.word	0x080082c1
 800825c:	0800823d 	.word	0x0800823d
 8008260:	0800823d 	.word	0x0800823d
 8008264:	0800823d 	.word	0x0800823d
 8008268:	0800823d 	.word	0x0800823d
 800826c:	080082c1 	.word	0x080082c1
 8008270:	0800823d 	.word	0x0800823d
 8008274:	0800823d 	.word	0x0800823d
 8008278:	0800823d 	.word	0x0800823d
 800827c:	0800823d 	.word	0x0800823d
 8008280:	080083c1 	.word	0x080083c1
 8008284:	080082eb 	.word	0x080082eb
 8008288:	0800837b 	.word	0x0800837b
 800828c:	0800823d 	.word	0x0800823d
 8008290:	0800823d 	.word	0x0800823d
 8008294:	080083e3 	.word	0x080083e3
 8008298:	0800823d 	.word	0x0800823d
 800829c:	080082eb 	.word	0x080082eb
 80082a0:	0800823d 	.word	0x0800823d
 80082a4:	0800823d 	.word	0x0800823d
 80082a8:	08008383 	.word	0x08008383
 80082ac:	6833      	ldr	r3, [r6, #0]
 80082ae:	1d1a      	adds	r2, r3, #4
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6032      	str	r2, [r6, #0]
 80082b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80082bc:	2301      	movs	r3, #1
 80082be:	e09d      	b.n	80083fc <_printf_i+0x1e8>
 80082c0:	6833      	ldr	r3, [r6, #0]
 80082c2:	6820      	ldr	r0, [r4, #0]
 80082c4:	1d19      	adds	r1, r3, #4
 80082c6:	6031      	str	r1, [r6, #0]
 80082c8:	0606      	lsls	r6, r0, #24
 80082ca:	d501      	bpl.n	80082d0 <_printf_i+0xbc>
 80082cc:	681d      	ldr	r5, [r3, #0]
 80082ce:	e003      	b.n	80082d8 <_printf_i+0xc4>
 80082d0:	0645      	lsls	r5, r0, #25
 80082d2:	d5fb      	bpl.n	80082cc <_printf_i+0xb8>
 80082d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80082d8:	2d00      	cmp	r5, #0
 80082da:	da03      	bge.n	80082e4 <_printf_i+0xd0>
 80082dc:	232d      	movs	r3, #45	@ 0x2d
 80082de:	426d      	negs	r5, r5
 80082e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082e4:	4859      	ldr	r0, [pc, #356]	@ (800844c <_printf_i+0x238>)
 80082e6:	230a      	movs	r3, #10
 80082e8:	e011      	b.n	800830e <_printf_i+0xfa>
 80082ea:	6821      	ldr	r1, [r4, #0]
 80082ec:	6833      	ldr	r3, [r6, #0]
 80082ee:	0608      	lsls	r0, r1, #24
 80082f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80082f4:	d402      	bmi.n	80082fc <_printf_i+0xe8>
 80082f6:	0649      	lsls	r1, r1, #25
 80082f8:	bf48      	it	mi
 80082fa:	b2ad      	uxthmi	r5, r5
 80082fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80082fe:	4853      	ldr	r0, [pc, #332]	@ (800844c <_printf_i+0x238>)
 8008300:	6033      	str	r3, [r6, #0]
 8008302:	bf14      	ite	ne
 8008304:	230a      	movne	r3, #10
 8008306:	2308      	moveq	r3, #8
 8008308:	2100      	movs	r1, #0
 800830a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800830e:	6866      	ldr	r6, [r4, #4]
 8008310:	60a6      	str	r6, [r4, #8]
 8008312:	2e00      	cmp	r6, #0
 8008314:	bfa2      	ittt	ge
 8008316:	6821      	ldrge	r1, [r4, #0]
 8008318:	f021 0104 	bicge.w	r1, r1, #4
 800831c:	6021      	strge	r1, [r4, #0]
 800831e:	b90d      	cbnz	r5, 8008324 <_printf_i+0x110>
 8008320:	2e00      	cmp	r6, #0
 8008322:	d04b      	beq.n	80083bc <_printf_i+0x1a8>
 8008324:	4616      	mov	r6, r2
 8008326:	fbb5 f1f3 	udiv	r1, r5, r3
 800832a:	fb03 5711 	mls	r7, r3, r1, r5
 800832e:	5dc7      	ldrb	r7, [r0, r7]
 8008330:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008334:	462f      	mov	r7, r5
 8008336:	42bb      	cmp	r3, r7
 8008338:	460d      	mov	r5, r1
 800833a:	d9f4      	bls.n	8008326 <_printf_i+0x112>
 800833c:	2b08      	cmp	r3, #8
 800833e:	d10b      	bne.n	8008358 <_printf_i+0x144>
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	07df      	lsls	r7, r3, #31
 8008344:	d508      	bpl.n	8008358 <_printf_i+0x144>
 8008346:	6923      	ldr	r3, [r4, #16]
 8008348:	6861      	ldr	r1, [r4, #4]
 800834a:	4299      	cmp	r1, r3
 800834c:	bfde      	ittt	le
 800834e:	2330      	movle	r3, #48	@ 0x30
 8008350:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008354:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008358:	1b92      	subs	r2, r2, r6
 800835a:	6122      	str	r2, [r4, #16]
 800835c:	f8cd a000 	str.w	sl, [sp]
 8008360:	464b      	mov	r3, r9
 8008362:	aa03      	add	r2, sp, #12
 8008364:	4621      	mov	r1, r4
 8008366:	4640      	mov	r0, r8
 8008368:	f7ff fee6 	bl	8008138 <_printf_common>
 800836c:	3001      	adds	r0, #1
 800836e:	d14a      	bne.n	8008406 <_printf_i+0x1f2>
 8008370:	f04f 30ff 	mov.w	r0, #4294967295
 8008374:	b004      	add	sp, #16
 8008376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	f043 0320 	orr.w	r3, r3, #32
 8008380:	6023      	str	r3, [r4, #0]
 8008382:	4833      	ldr	r0, [pc, #204]	@ (8008450 <_printf_i+0x23c>)
 8008384:	2778      	movs	r7, #120	@ 0x78
 8008386:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800838a:	6823      	ldr	r3, [r4, #0]
 800838c:	6831      	ldr	r1, [r6, #0]
 800838e:	061f      	lsls	r7, r3, #24
 8008390:	f851 5b04 	ldr.w	r5, [r1], #4
 8008394:	d402      	bmi.n	800839c <_printf_i+0x188>
 8008396:	065f      	lsls	r7, r3, #25
 8008398:	bf48      	it	mi
 800839a:	b2ad      	uxthmi	r5, r5
 800839c:	6031      	str	r1, [r6, #0]
 800839e:	07d9      	lsls	r1, r3, #31
 80083a0:	bf44      	itt	mi
 80083a2:	f043 0320 	orrmi.w	r3, r3, #32
 80083a6:	6023      	strmi	r3, [r4, #0]
 80083a8:	b11d      	cbz	r5, 80083b2 <_printf_i+0x19e>
 80083aa:	2310      	movs	r3, #16
 80083ac:	e7ac      	b.n	8008308 <_printf_i+0xf4>
 80083ae:	4827      	ldr	r0, [pc, #156]	@ (800844c <_printf_i+0x238>)
 80083b0:	e7e9      	b.n	8008386 <_printf_i+0x172>
 80083b2:	6823      	ldr	r3, [r4, #0]
 80083b4:	f023 0320 	bic.w	r3, r3, #32
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	e7f6      	b.n	80083aa <_printf_i+0x196>
 80083bc:	4616      	mov	r6, r2
 80083be:	e7bd      	b.n	800833c <_printf_i+0x128>
 80083c0:	6833      	ldr	r3, [r6, #0]
 80083c2:	6825      	ldr	r5, [r4, #0]
 80083c4:	6961      	ldr	r1, [r4, #20]
 80083c6:	1d18      	adds	r0, r3, #4
 80083c8:	6030      	str	r0, [r6, #0]
 80083ca:	062e      	lsls	r6, r5, #24
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	d501      	bpl.n	80083d4 <_printf_i+0x1c0>
 80083d0:	6019      	str	r1, [r3, #0]
 80083d2:	e002      	b.n	80083da <_printf_i+0x1c6>
 80083d4:	0668      	lsls	r0, r5, #25
 80083d6:	d5fb      	bpl.n	80083d0 <_printf_i+0x1bc>
 80083d8:	8019      	strh	r1, [r3, #0]
 80083da:	2300      	movs	r3, #0
 80083dc:	6123      	str	r3, [r4, #16]
 80083de:	4616      	mov	r6, r2
 80083e0:	e7bc      	b.n	800835c <_printf_i+0x148>
 80083e2:	6833      	ldr	r3, [r6, #0]
 80083e4:	1d1a      	adds	r2, r3, #4
 80083e6:	6032      	str	r2, [r6, #0]
 80083e8:	681e      	ldr	r6, [r3, #0]
 80083ea:	6862      	ldr	r2, [r4, #4]
 80083ec:	2100      	movs	r1, #0
 80083ee:	4630      	mov	r0, r6
 80083f0:	f7f7 ff16 	bl	8000220 <memchr>
 80083f4:	b108      	cbz	r0, 80083fa <_printf_i+0x1e6>
 80083f6:	1b80      	subs	r0, r0, r6
 80083f8:	6060      	str	r0, [r4, #4]
 80083fa:	6863      	ldr	r3, [r4, #4]
 80083fc:	6123      	str	r3, [r4, #16]
 80083fe:	2300      	movs	r3, #0
 8008400:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008404:	e7aa      	b.n	800835c <_printf_i+0x148>
 8008406:	6923      	ldr	r3, [r4, #16]
 8008408:	4632      	mov	r2, r6
 800840a:	4649      	mov	r1, r9
 800840c:	4640      	mov	r0, r8
 800840e:	47d0      	blx	sl
 8008410:	3001      	adds	r0, #1
 8008412:	d0ad      	beq.n	8008370 <_printf_i+0x15c>
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	079b      	lsls	r3, r3, #30
 8008418:	d413      	bmi.n	8008442 <_printf_i+0x22e>
 800841a:	68e0      	ldr	r0, [r4, #12]
 800841c:	9b03      	ldr	r3, [sp, #12]
 800841e:	4298      	cmp	r0, r3
 8008420:	bfb8      	it	lt
 8008422:	4618      	movlt	r0, r3
 8008424:	e7a6      	b.n	8008374 <_printf_i+0x160>
 8008426:	2301      	movs	r3, #1
 8008428:	4632      	mov	r2, r6
 800842a:	4649      	mov	r1, r9
 800842c:	4640      	mov	r0, r8
 800842e:	47d0      	blx	sl
 8008430:	3001      	adds	r0, #1
 8008432:	d09d      	beq.n	8008370 <_printf_i+0x15c>
 8008434:	3501      	adds	r5, #1
 8008436:	68e3      	ldr	r3, [r4, #12]
 8008438:	9903      	ldr	r1, [sp, #12]
 800843a:	1a5b      	subs	r3, r3, r1
 800843c:	42ab      	cmp	r3, r5
 800843e:	dcf2      	bgt.n	8008426 <_printf_i+0x212>
 8008440:	e7eb      	b.n	800841a <_printf_i+0x206>
 8008442:	2500      	movs	r5, #0
 8008444:	f104 0619 	add.w	r6, r4, #25
 8008448:	e7f5      	b.n	8008436 <_printf_i+0x222>
 800844a:	bf00      	nop
 800844c:	0800b1a2 	.word	0x0800b1a2
 8008450:	0800b1b3 	.word	0x0800b1b3

08008454 <std>:
 8008454:	2300      	movs	r3, #0
 8008456:	b510      	push	{r4, lr}
 8008458:	4604      	mov	r4, r0
 800845a:	e9c0 3300 	strd	r3, r3, [r0]
 800845e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008462:	6083      	str	r3, [r0, #8]
 8008464:	8181      	strh	r1, [r0, #12]
 8008466:	6643      	str	r3, [r0, #100]	@ 0x64
 8008468:	81c2      	strh	r2, [r0, #14]
 800846a:	6183      	str	r3, [r0, #24]
 800846c:	4619      	mov	r1, r3
 800846e:	2208      	movs	r2, #8
 8008470:	305c      	adds	r0, #92	@ 0x5c
 8008472:	f000 f914 	bl	800869e <memset>
 8008476:	4b0d      	ldr	r3, [pc, #52]	@ (80084ac <std+0x58>)
 8008478:	6263      	str	r3, [r4, #36]	@ 0x24
 800847a:	4b0d      	ldr	r3, [pc, #52]	@ (80084b0 <std+0x5c>)
 800847c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800847e:	4b0d      	ldr	r3, [pc, #52]	@ (80084b4 <std+0x60>)
 8008480:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008482:	4b0d      	ldr	r3, [pc, #52]	@ (80084b8 <std+0x64>)
 8008484:	6323      	str	r3, [r4, #48]	@ 0x30
 8008486:	4b0d      	ldr	r3, [pc, #52]	@ (80084bc <std+0x68>)
 8008488:	6224      	str	r4, [r4, #32]
 800848a:	429c      	cmp	r4, r3
 800848c:	d006      	beq.n	800849c <std+0x48>
 800848e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008492:	4294      	cmp	r4, r2
 8008494:	d002      	beq.n	800849c <std+0x48>
 8008496:	33d0      	adds	r3, #208	@ 0xd0
 8008498:	429c      	cmp	r4, r3
 800849a:	d105      	bne.n	80084a8 <std+0x54>
 800849c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084a4:	f000 b978 	b.w	8008798 <__retarget_lock_init_recursive>
 80084a8:	bd10      	pop	{r4, pc}
 80084aa:	bf00      	nop
 80084ac:	08008619 	.word	0x08008619
 80084b0:	0800863b 	.word	0x0800863b
 80084b4:	08008673 	.word	0x08008673
 80084b8:	08008697 	.word	0x08008697
 80084bc:	200005d0 	.word	0x200005d0

080084c0 <stdio_exit_handler>:
 80084c0:	4a02      	ldr	r2, [pc, #8]	@ (80084cc <stdio_exit_handler+0xc>)
 80084c2:	4903      	ldr	r1, [pc, #12]	@ (80084d0 <stdio_exit_handler+0x10>)
 80084c4:	4803      	ldr	r0, [pc, #12]	@ (80084d4 <stdio_exit_handler+0x14>)
 80084c6:	f000 b869 	b.w	800859c <_fwalk_sglue>
 80084ca:	bf00      	nop
 80084cc:	2000001c 	.word	0x2000001c
 80084d0:	0800a0f5 	.word	0x0800a0f5
 80084d4:	2000002c 	.word	0x2000002c

080084d8 <cleanup_stdio>:
 80084d8:	6841      	ldr	r1, [r0, #4]
 80084da:	4b0c      	ldr	r3, [pc, #48]	@ (800850c <cleanup_stdio+0x34>)
 80084dc:	4299      	cmp	r1, r3
 80084de:	b510      	push	{r4, lr}
 80084e0:	4604      	mov	r4, r0
 80084e2:	d001      	beq.n	80084e8 <cleanup_stdio+0x10>
 80084e4:	f001 fe06 	bl	800a0f4 <_fflush_r>
 80084e8:	68a1      	ldr	r1, [r4, #8]
 80084ea:	4b09      	ldr	r3, [pc, #36]	@ (8008510 <cleanup_stdio+0x38>)
 80084ec:	4299      	cmp	r1, r3
 80084ee:	d002      	beq.n	80084f6 <cleanup_stdio+0x1e>
 80084f0:	4620      	mov	r0, r4
 80084f2:	f001 fdff 	bl	800a0f4 <_fflush_r>
 80084f6:	68e1      	ldr	r1, [r4, #12]
 80084f8:	4b06      	ldr	r3, [pc, #24]	@ (8008514 <cleanup_stdio+0x3c>)
 80084fa:	4299      	cmp	r1, r3
 80084fc:	d004      	beq.n	8008508 <cleanup_stdio+0x30>
 80084fe:	4620      	mov	r0, r4
 8008500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008504:	f001 bdf6 	b.w	800a0f4 <_fflush_r>
 8008508:	bd10      	pop	{r4, pc}
 800850a:	bf00      	nop
 800850c:	200005d0 	.word	0x200005d0
 8008510:	20000638 	.word	0x20000638
 8008514:	200006a0 	.word	0x200006a0

08008518 <global_stdio_init.part.0>:
 8008518:	b510      	push	{r4, lr}
 800851a:	4b0b      	ldr	r3, [pc, #44]	@ (8008548 <global_stdio_init.part.0+0x30>)
 800851c:	4c0b      	ldr	r4, [pc, #44]	@ (800854c <global_stdio_init.part.0+0x34>)
 800851e:	4a0c      	ldr	r2, [pc, #48]	@ (8008550 <global_stdio_init.part.0+0x38>)
 8008520:	601a      	str	r2, [r3, #0]
 8008522:	4620      	mov	r0, r4
 8008524:	2200      	movs	r2, #0
 8008526:	2104      	movs	r1, #4
 8008528:	f7ff ff94 	bl	8008454 <std>
 800852c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008530:	2201      	movs	r2, #1
 8008532:	2109      	movs	r1, #9
 8008534:	f7ff ff8e 	bl	8008454 <std>
 8008538:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800853c:	2202      	movs	r2, #2
 800853e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008542:	2112      	movs	r1, #18
 8008544:	f7ff bf86 	b.w	8008454 <std>
 8008548:	20000708 	.word	0x20000708
 800854c:	200005d0 	.word	0x200005d0
 8008550:	080084c1 	.word	0x080084c1

08008554 <__sfp_lock_acquire>:
 8008554:	4801      	ldr	r0, [pc, #4]	@ (800855c <__sfp_lock_acquire+0x8>)
 8008556:	f000 b920 	b.w	800879a <__retarget_lock_acquire_recursive>
 800855a:	bf00      	nop
 800855c:	20000711 	.word	0x20000711

08008560 <__sfp_lock_release>:
 8008560:	4801      	ldr	r0, [pc, #4]	@ (8008568 <__sfp_lock_release+0x8>)
 8008562:	f000 b91b 	b.w	800879c <__retarget_lock_release_recursive>
 8008566:	bf00      	nop
 8008568:	20000711 	.word	0x20000711

0800856c <__sinit>:
 800856c:	b510      	push	{r4, lr}
 800856e:	4604      	mov	r4, r0
 8008570:	f7ff fff0 	bl	8008554 <__sfp_lock_acquire>
 8008574:	6a23      	ldr	r3, [r4, #32]
 8008576:	b11b      	cbz	r3, 8008580 <__sinit+0x14>
 8008578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800857c:	f7ff bff0 	b.w	8008560 <__sfp_lock_release>
 8008580:	4b04      	ldr	r3, [pc, #16]	@ (8008594 <__sinit+0x28>)
 8008582:	6223      	str	r3, [r4, #32]
 8008584:	4b04      	ldr	r3, [pc, #16]	@ (8008598 <__sinit+0x2c>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1f5      	bne.n	8008578 <__sinit+0xc>
 800858c:	f7ff ffc4 	bl	8008518 <global_stdio_init.part.0>
 8008590:	e7f2      	b.n	8008578 <__sinit+0xc>
 8008592:	bf00      	nop
 8008594:	080084d9 	.word	0x080084d9
 8008598:	20000708 	.word	0x20000708

0800859c <_fwalk_sglue>:
 800859c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085a0:	4607      	mov	r7, r0
 80085a2:	4688      	mov	r8, r1
 80085a4:	4614      	mov	r4, r2
 80085a6:	2600      	movs	r6, #0
 80085a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085ac:	f1b9 0901 	subs.w	r9, r9, #1
 80085b0:	d505      	bpl.n	80085be <_fwalk_sglue+0x22>
 80085b2:	6824      	ldr	r4, [r4, #0]
 80085b4:	2c00      	cmp	r4, #0
 80085b6:	d1f7      	bne.n	80085a8 <_fwalk_sglue+0xc>
 80085b8:	4630      	mov	r0, r6
 80085ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085be:	89ab      	ldrh	r3, [r5, #12]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d907      	bls.n	80085d4 <_fwalk_sglue+0x38>
 80085c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085c8:	3301      	adds	r3, #1
 80085ca:	d003      	beq.n	80085d4 <_fwalk_sglue+0x38>
 80085cc:	4629      	mov	r1, r5
 80085ce:	4638      	mov	r0, r7
 80085d0:	47c0      	blx	r8
 80085d2:	4306      	orrs	r6, r0
 80085d4:	3568      	adds	r5, #104	@ 0x68
 80085d6:	e7e9      	b.n	80085ac <_fwalk_sglue+0x10>

080085d8 <siprintf>:
 80085d8:	b40e      	push	{r1, r2, r3}
 80085da:	b500      	push	{lr}
 80085dc:	b09c      	sub	sp, #112	@ 0x70
 80085de:	ab1d      	add	r3, sp, #116	@ 0x74
 80085e0:	9002      	str	r0, [sp, #8]
 80085e2:	9006      	str	r0, [sp, #24]
 80085e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80085e8:	4809      	ldr	r0, [pc, #36]	@ (8008610 <siprintf+0x38>)
 80085ea:	9107      	str	r1, [sp, #28]
 80085ec:	9104      	str	r1, [sp, #16]
 80085ee:	4909      	ldr	r1, [pc, #36]	@ (8008614 <siprintf+0x3c>)
 80085f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085f4:	9105      	str	r1, [sp, #20]
 80085f6:	6800      	ldr	r0, [r0, #0]
 80085f8:	9301      	str	r3, [sp, #4]
 80085fa:	a902      	add	r1, sp, #8
 80085fc:	f001 fbfa 	bl	8009df4 <_svfiprintf_r>
 8008600:	9b02      	ldr	r3, [sp, #8]
 8008602:	2200      	movs	r2, #0
 8008604:	701a      	strb	r2, [r3, #0]
 8008606:	b01c      	add	sp, #112	@ 0x70
 8008608:	f85d eb04 	ldr.w	lr, [sp], #4
 800860c:	b003      	add	sp, #12
 800860e:	4770      	bx	lr
 8008610:	20000028 	.word	0x20000028
 8008614:	ffff0208 	.word	0xffff0208

08008618 <__sread>:
 8008618:	b510      	push	{r4, lr}
 800861a:	460c      	mov	r4, r1
 800861c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008620:	f000 f86c 	bl	80086fc <_read_r>
 8008624:	2800      	cmp	r0, #0
 8008626:	bfab      	itete	ge
 8008628:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800862a:	89a3      	ldrhlt	r3, [r4, #12]
 800862c:	181b      	addge	r3, r3, r0
 800862e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008632:	bfac      	ite	ge
 8008634:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008636:	81a3      	strhlt	r3, [r4, #12]
 8008638:	bd10      	pop	{r4, pc}

0800863a <__swrite>:
 800863a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800863e:	461f      	mov	r7, r3
 8008640:	898b      	ldrh	r3, [r1, #12]
 8008642:	05db      	lsls	r3, r3, #23
 8008644:	4605      	mov	r5, r0
 8008646:	460c      	mov	r4, r1
 8008648:	4616      	mov	r6, r2
 800864a:	d505      	bpl.n	8008658 <__swrite+0x1e>
 800864c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008650:	2302      	movs	r3, #2
 8008652:	2200      	movs	r2, #0
 8008654:	f000 f840 	bl	80086d8 <_lseek_r>
 8008658:	89a3      	ldrh	r3, [r4, #12]
 800865a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800865e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008662:	81a3      	strh	r3, [r4, #12]
 8008664:	4632      	mov	r2, r6
 8008666:	463b      	mov	r3, r7
 8008668:	4628      	mov	r0, r5
 800866a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800866e:	f000 b857 	b.w	8008720 <_write_r>

08008672 <__sseek>:
 8008672:	b510      	push	{r4, lr}
 8008674:	460c      	mov	r4, r1
 8008676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800867a:	f000 f82d 	bl	80086d8 <_lseek_r>
 800867e:	1c43      	adds	r3, r0, #1
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	bf15      	itete	ne
 8008684:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008686:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800868a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800868e:	81a3      	strheq	r3, [r4, #12]
 8008690:	bf18      	it	ne
 8008692:	81a3      	strhne	r3, [r4, #12]
 8008694:	bd10      	pop	{r4, pc}

08008696 <__sclose>:
 8008696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800869a:	f000 b80d 	b.w	80086b8 <_close_r>

0800869e <memset>:
 800869e:	4402      	add	r2, r0
 80086a0:	4603      	mov	r3, r0
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d100      	bne.n	80086a8 <memset+0xa>
 80086a6:	4770      	bx	lr
 80086a8:	f803 1b01 	strb.w	r1, [r3], #1
 80086ac:	e7f9      	b.n	80086a2 <memset+0x4>
	...

080086b0 <_localeconv_r>:
 80086b0:	4800      	ldr	r0, [pc, #0]	@ (80086b4 <_localeconv_r+0x4>)
 80086b2:	4770      	bx	lr
 80086b4:	20000168 	.word	0x20000168

080086b8 <_close_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	4d06      	ldr	r5, [pc, #24]	@ (80086d4 <_close_r+0x1c>)
 80086bc:	2300      	movs	r3, #0
 80086be:	4604      	mov	r4, r0
 80086c0:	4608      	mov	r0, r1
 80086c2:	602b      	str	r3, [r5, #0]
 80086c4:	f7fa f8ee 	bl	80028a4 <_close>
 80086c8:	1c43      	adds	r3, r0, #1
 80086ca:	d102      	bne.n	80086d2 <_close_r+0x1a>
 80086cc:	682b      	ldr	r3, [r5, #0]
 80086ce:	b103      	cbz	r3, 80086d2 <_close_r+0x1a>
 80086d0:	6023      	str	r3, [r4, #0]
 80086d2:	bd38      	pop	{r3, r4, r5, pc}
 80086d4:	2000070c 	.word	0x2000070c

080086d8 <_lseek_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4d07      	ldr	r5, [pc, #28]	@ (80086f8 <_lseek_r+0x20>)
 80086dc:	4604      	mov	r4, r0
 80086de:	4608      	mov	r0, r1
 80086e0:	4611      	mov	r1, r2
 80086e2:	2200      	movs	r2, #0
 80086e4:	602a      	str	r2, [r5, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	f7fa f903 	bl	80028f2 <_lseek>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	d102      	bne.n	80086f6 <_lseek_r+0x1e>
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	b103      	cbz	r3, 80086f6 <_lseek_r+0x1e>
 80086f4:	6023      	str	r3, [r4, #0]
 80086f6:	bd38      	pop	{r3, r4, r5, pc}
 80086f8:	2000070c 	.word	0x2000070c

080086fc <_read_r>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	4d07      	ldr	r5, [pc, #28]	@ (800871c <_read_r+0x20>)
 8008700:	4604      	mov	r4, r0
 8008702:	4608      	mov	r0, r1
 8008704:	4611      	mov	r1, r2
 8008706:	2200      	movs	r2, #0
 8008708:	602a      	str	r2, [r5, #0]
 800870a:	461a      	mov	r2, r3
 800870c:	f7fa f891 	bl	8002832 <_read>
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d102      	bne.n	800871a <_read_r+0x1e>
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	b103      	cbz	r3, 800871a <_read_r+0x1e>
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	bd38      	pop	{r3, r4, r5, pc}
 800871c:	2000070c 	.word	0x2000070c

08008720 <_write_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4d07      	ldr	r5, [pc, #28]	@ (8008740 <_write_r+0x20>)
 8008724:	4604      	mov	r4, r0
 8008726:	4608      	mov	r0, r1
 8008728:	4611      	mov	r1, r2
 800872a:	2200      	movs	r2, #0
 800872c:	602a      	str	r2, [r5, #0]
 800872e:	461a      	mov	r2, r3
 8008730:	f7fa f89c 	bl	800286c <_write>
 8008734:	1c43      	adds	r3, r0, #1
 8008736:	d102      	bne.n	800873e <_write_r+0x1e>
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	b103      	cbz	r3, 800873e <_write_r+0x1e>
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	bd38      	pop	{r3, r4, r5, pc}
 8008740:	2000070c 	.word	0x2000070c

08008744 <__errno>:
 8008744:	4b01      	ldr	r3, [pc, #4]	@ (800874c <__errno+0x8>)
 8008746:	6818      	ldr	r0, [r3, #0]
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	20000028 	.word	0x20000028

08008750 <__libc_init_array>:
 8008750:	b570      	push	{r4, r5, r6, lr}
 8008752:	4d0d      	ldr	r5, [pc, #52]	@ (8008788 <__libc_init_array+0x38>)
 8008754:	4c0d      	ldr	r4, [pc, #52]	@ (800878c <__libc_init_array+0x3c>)
 8008756:	1b64      	subs	r4, r4, r5
 8008758:	10a4      	asrs	r4, r4, #2
 800875a:	2600      	movs	r6, #0
 800875c:	42a6      	cmp	r6, r4
 800875e:	d109      	bne.n	8008774 <__libc_init_array+0x24>
 8008760:	4d0b      	ldr	r5, [pc, #44]	@ (8008790 <__libc_init_array+0x40>)
 8008762:	4c0c      	ldr	r4, [pc, #48]	@ (8008794 <__libc_init_array+0x44>)
 8008764:	f002 f864 	bl	800a830 <_init>
 8008768:	1b64      	subs	r4, r4, r5
 800876a:	10a4      	asrs	r4, r4, #2
 800876c:	2600      	movs	r6, #0
 800876e:	42a6      	cmp	r6, r4
 8008770:	d105      	bne.n	800877e <__libc_init_array+0x2e>
 8008772:	bd70      	pop	{r4, r5, r6, pc}
 8008774:	f855 3b04 	ldr.w	r3, [r5], #4
 8008778:	4798      	blx	r3
 800877a:	3601      	adds	r6, #1
 800877c:	e7ee      	b.n	800875c <__libc_init_array+0xc>
 800877e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008782:	4798      	blx	r3
 8008784:	3601      	adds	r6, #1
 8008786:	e7f2      	b.n	800876e <__libc_init_array+0x1e>
 8008788:	0800b508 	.word	0x0800b508
 800878c:	0800b508 	.word	0x0800b508
 8008790:	0800b508 	.word	0x0800b508
 8008794:	0800b50c 	.word	0x0800b50c

08008798 <__retarget_lock_init_recursive>:
 8008798:	4770      	bx	lr

0800879a <__retarget_lock_acquire_recursive>:
 800879a:	4770      	bx	lr

0800879c <__retarget_lock_release_recursive>:
 800879c:	4770      	bx	lr

0800879e <quorem>:
 800879e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a2:	6903      	ldr	r3, [r0, #16]
 80087a4:	690c      	ldr	r4, [r1, #16]
 80087a6:	42a3      	cmp	r3, r4
 80087a8:	4607      	mov	r7, r0
 80087aa:	db7e      	blt.n	80088aa <quorem+0x10c>
 80087ac:	3c01      	subs	r4, #1
 80087ae:	f101 0814 	add.w	r8, r1, #20
 80087b2:	00a3      	lsls	r3, r4, #2
 80087b4:	f100 0514 	add.w	r5, r0, #20
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087be:	9301      	str	r3, [sp, #4]
 80087c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087c8:	3301      	adds	r3, #1
 80087ca:	429a      	cmp	r2, r3
 80087cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80087d4:	d32e      	bcc.n	8008834 <quorem+0x96>
 80087d6:	f04f 0a00 	mov.w	sl, #0
 80087da:	46c4      	mov	ip, r8
 80087dc:	46ae      	mov	lr, r5
 80087de:	46d3      	mov	fp, sl
 80087e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80087e4:	b298      	uxth	r0, r3
 80087e6:	fb06 a000 	mla	r0, r6, r0, sl
 80087ea:	0c02      	lsrs	r2, r0, #16
 80087ec:	0c1b      	lsrs	r3, r3, #16
 80087ee:	fb06 2303 	mla	r3, r6, r3, r2
 80087f2:	f8de 2000 	ldr.w	r2, [lr]
 80087f6:	b280      	uxth	r0, r0
 80087f8:	b292      	uxth	r2, r2
 80087fa:	1a12      	subs	r2, r2, r0
 80087fc:	445a      	add	r2, fp
 80087fe:	f8de 0000 	ldr.w	r0, [lr]
 8008802:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008806:	b29b      	uxth	r3, r3
 8008808:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800880c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008810:	b292      	uxth	r2, r2
 8008812:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008816:	45e1      	cmp	r9, ip
 8008818:	f84e 2b04 	str.w	r2, [lr], #4
 800881c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008820:	d2de      	bcs.n	80087e0 <quorem+0x42>
 8008822:	9b00      	ldr	r3, [sp, #0]
 8008824:	58eb      	ldr	r3, [r5, r3]
 8008826:	b92b      	cbnz	r3, 8008834 <quorem+0x96>
 8008828:	9b01      	ldr	r3, [sp, #4]
 800882a:	3b04      	subs	r3, #4
 800882c:	429d      	cmp	r5, r3
 800882e:	461a      	mov	r2, r3
 8008830:	d32f      	bcc.n	8008892 <quorem+0xf4>
 8008832:	613c      	str	r4, [r7, #16]
 8008834:	4638      	mov	r0, r7
 8008836:	f001 f979 	bl	8009b2c <__mcmp>
 800883a:	2800      	cmp	r0, #0
 800883c:	db25      	blt.n	800888a <quorem+0xec>
 800883e:	4629      	mov	r1, r5
 8008840:	2000      	movs	r0, #0
 8008842:	f858 2b04 	ldr.w	r2, [r8], #4
 8008846:	f8d1 c000 	ldr.w	ip, [r1]
 800884a:	fa1f fe82 	uxth.w	lr, r2
 800884e:	fa1f f38c 	uxth.w	r3, ip
 8008852:	eba3 030e 	sub.w	r3, r3, lr
 8008856:	4403      	add	r3, r0
 8008858:	0c12      	lsrs	r2, r2, #16
 800885a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800885e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008862:	b29b      	uxth	r3, r3
 8008864:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008868:	45c1      	cmp	r9, r8
 800886a:	f841 3b04 	str.w	r3, [r1], #4
 800886e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008872:	d2e6      	bcs.n	8008842 <quorem+0xa4>
 8008874:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008878:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800887c:	b922      	cbnz	r2, 8008888 <quorem+0xea>
 800887e:	3b04      	subs	r3, #4
 8008880:	429d      	cmp	r5, r3
 8008882:	461a      	mov	r2, r3
 8008884:	d30b      	bcc.n	800889e <quorem+0x100>
 8008886:	613c      	str	r4, [r7, #16]
 8008888:	3601      	adds	r6, #1
 800888a:	4630      	mov	r0, r6
 800888c:	b003      	add	sp, #12
 800888e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008892:	6812      	ldr	r2, [r2, #0]
 8008894:	3b04      	subs	r3, #4
 8008896:	2a00      	cmp	r2, #0
 8008898:	d1cb      	bne.n	8008832 <quorem+0x94>
 800889a:	3c01      	subs	r4, #1
 800889c:	e7c6      	b.n	800882c <quorem+0x8e>
 800889e:	6812      	ldr	r2, [r2, #0]
 80088a0:	3b04      	subs	r3, #4
 80088a2:	2a00      	cmp	r2, #0
 80088a4:	d1ef      	bne.n	8008886 <quorem+0xe8>
 80088a6:	3c01      	subs	r4, #1
 80088a8:	e7ea      	b.n	8008880 <quorem+0xe2>
 80088aa:	2000      	movs	r0, #0
 80088ac:	e7ee      	b.n	800888c <quorem+0xee>
	...

080088b0 <_dtoa_r>:
 80088b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b4:	69c7      	ldr	r7, [r0, #28]
 80088b6:	b099      	sub	sp, #100	@ 0x64
 80088b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80088bc:	ec55 4b10 	vmov	r4, r5, d0
 80088c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80088c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80088c4:	4683      	mov	fp, r0
 80088c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80088c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088ca:	b97f      	cbnz	r7, 80088ec <_dtoa_r+0x3c>
 80088cc:	2010      	movs	r0, #16
 80088ce:	f000 fdfd 	bl	80094cc <malloc>
 80088d2:	4602      	mov	r2, r0
 80088d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80088d8:	b920      	cbnz	r0, 80088e4 <_dtoa_r+0x34>
 80088da:	4ba7      	ldr	r3, [pc, #668]	@ (8008b78 <_dtoa_r+0x2c8>)
 80088dc:	21ef      	movs	r1, #239	@ 0xef
 80088de:	48a7      	ldr	r0, [pc, #668]	@ (8008b7c <_dtoa_r+0x2cc>)
 80088e0:	f001 fc68 	bl	800a1b4 <__assert_func>
 80088e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80088e8:	6007      	str	r7, [r0, #0]
 80088ea:	60c7      	str	r7, [r0, #12]
 80088ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80088f0:	6819      	ldr	r1, [r3, #0]
 80088f2:	b159      	cbz	r1, 800890c <_dtoa_r+0x5c>
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	604a      	str	r2, [r1, #4]
 80088f8:	2301      	movs	r3, #1
 80088fa:	4093      	lsls	r3, r2
 80088fc:	608b      	str	r3, [r1, #8]
 80088fe:	4658      	mov	r0, fp
 8008900:	f000 feda 	bl	80096b8 <_Bfree>
 8008904:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008908:	2200      	movs	r2, #0
 800890a:	601a      	str	r2, [r3, #0]
 800890c:	1e2b      	subs	r3, r5, #0
 800890e:	bfb9      	ittee	lt
 8008910:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008914:	9303      	strlt	r3, [sp, #12]
 8008916:	2300      	movge	r3, #0
 8008918:	6033      	strge	r3, [r6, #0]
 800891a:	9f03      	ldr	r7, [sp, #12]
 800891c:	4b98      	ldr	r3, [pc, #608]	@ (8008b80 <_dtoa_r+0x2d0>)
 800891e:	bfbc      	itt	lt
 8008920:	2201      	movlt	r2, #1
 8008922:	6032      	strlt	r2, [r6, #0]
 8008924:	43bb      	bics	r3, r7
 8008926:	d112      	bne.n	800894e <_dtoa_r+0x9e>
 8008928:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800892a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800892e:	6013      	str	r3, [r2, #0]
 8008930:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008934:	4323      	orrs	r3, r4
 8008936:	f000 854d 	beq.w	80093d4 <_dtoa_r+0xb24>
 800893a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800893c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008b94 <_dtoa_r+0x2e4>
 8008940:	2b00      	cmp	r3, #0
 8008942:	f000 854f 	beq.w	80093e4 <_dtoa_r+0xb34>
 8008946:	f10a 0303 	add.w	r3, sl, #3
 800894a:	f000 bd49 	b.w	80093e0 <_dtoa_r+0xb30>
 800894e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008952:	2200      	movs	r2, #0
 8008954:	ec51 0b17 	vmov	r0, r1, d7
 8008958:	2300      	movs	r3, #0
 800895a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800895e:	f7f8 f8db 	bl	8000b18 <__aeabi_dcmpeq>
 8008962:	4680      	mov	r8, r0
 8008964:	b158      	cbz	r0, 800897e <_dtoa_r+0xce>
 8008966:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008968:	2301      	movs	r3, #1
 800896a:	6013      	str	r3, [r2, #0]
 800896c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800896e:	b113      	cbz	r3, 8008976 <_dtoa_r+0xc6>
 8008970:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008972:	4b84      	ldr	r3, [pc, #528]	@ (8008b84 <_dtoa_r+0x2d4>)
 8008974:	6013      	str	r3, [r2, #0]
 8008976:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008b98 <_dtoa_r+0x2e8>
 800897a:	f000 bd33 	b.w	80093e4 <_dtoa_r+0xb34>
 800897e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008982:	aa16      	add	r2, sp, #88	@ 0x58
 8008984:	a917      	add	r1, sp, #92	@ 0x5c
 8008986:	4658      	mov	r0, fp
 8008988:	f001 f980 	bl	8009c8c <__d2b>
 800898c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008990:	4681      	mov	r9, r0
 8008992:	2e00      	cmp	r6, #0
 8008994:	d077      	beq.n	8008a86 <_dtoa_r+0x1d6>
 8008996:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008998:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800899c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80089a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80089ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80089b0:	4619      	mov	r1, r3
 80089b2:	2200      	movs	r2, #0
 80089b4:	4b74      	ldr	r3, [pc, #464]	@ (8008b88 <_dtoa_r+0x2d8>)
 80089b6:	f7f7 fc8f 	bl	80002d8 <__aeabi_dsub>
 80089ba:	a369      	add	r3, pc, #420	@ (adr r3, 8008b60 <_dtoa_r+0x2b0>)
 80089bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c0:	f7f7 fe42 	bl	8000648 <__aeabi_dmul>
 80089c4:	a368      	add	r3, pc, #416	@ (adr r3, 8008b68 <_dtoa_r+0x2b8>)
 80089c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ca:	f7f7 fc87 	bl	80002dc <__adddf3>
 80089ce:	4604      	mov	r4, r0
 80089d0:	4630      	mov	r0, r6
 80089d2:	460d      	mov	r5, r1
 80089d4:	f7f7 fdce 	bl	8000574 <__aeabi_i2d>
 80089d8:	a365      	add	r3, pc, #404	@ (adr r3, 8008b70 <_dtoa_r+0x2c0>)
 80089da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089de:	f7f7 fe33 	bl	8000648 <__aeabi_dmul>
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	4620      	mov	r0, r4
 80089e8:	4629      	mov	r1, r5
 80089ea:	f7f7 fc77 	bl	80002dc <__adddf3>
 80089ee:	4604      	mov	r4, r0
 80089f0:	460d      	mov	r5, r1
 80089f2:	f7f8 f8d9 	bl	8000ba8 <__aeabi_d2iz>
 80089f6:	2200      	movs	r2, #0
 80089f8:	4607      	mov	r7, r0
 80089fa:	2300      	movs	r3, #0
 80089fc:	4620      	mov	r0, r4
 80089fe:	4629      	mov	r1, r5
 8008a00:	f7f8 f894 	bl	8000b2c <__aeabi_dcmplt>
 8008a04:	b140      	cbz	r0, 8008a18 <_dtoa_r+0x168>
 8008a06:	4638      	mov	r0, r7
 8008a08:	f7f7 fdb4 	bl	8000574 <__aeabi_i2d>
 8008a0c:	4622      	mov	r2, r4
 8008a0e:	462b      	mov	r3, r5
 8008a10:	f7f8 f882 	bl	8000b18 <__aeabi_dcmpeq>
 8008a14:	b900      	cbnz	r0, 8008a18 <_dtoa_r+0x168>
 8008a16:	3f01      	subs	r7, #1
 8008a18:	2f16      	cmp	r7, #22
 8008a1a:	d851      	bhi.n	8008ac0 <_dtoa_r+0x210>
 8008a1c:	4b5b      	ldr	r3, [pc, #364]	@ (8008b8c <_dtoa_r+0x2dc>)
 8008a1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a2a:	f7f8 f87f 	bl	8000b2c <__aeabi_dcmplt>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d048      	beq.n	8008ac4 <_dtoa_r+0x214>
 8008a32:	3f01      	subs	r7, #1
 8008a34:	2300      	movs	r3, #0
 8008a36:	9312      	str	r3, [sp, #72]	@ 0x48
 8008a38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008a3a:	1b9b      	subs	r3, r3, r6
 8008a3c:	1e5a      	subs	r2, r3, #1
 8008a3e:	bf44      	itt	mi
 8008a40:	f1c3 0801 	rsbmi	r8, r3, #1
 8008a44:	2300      	movmi	r3, #0
 8008a46:	9208      	str	r2, [sp, #32]
 8008a48:	bf54      	ite	pl
 8008a4a:	f04f 0800 	movpl.w	r8, #0
 8008a4e:	9308      	strmi	r3, [sp, #32]
 8008a50:	2f00      	cmp	r7, #0
 8008a52:	db39      	blt.n	8008ac8 <_dtoa_r+0x218>
 8008a54:	9b08      	ldr	r3, [sp, #32]
 8008a56:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008a58:	443b      	add	r3, r7
 8008a5a:	9308      	str	r3, [sp, #32]
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a62:	2b09      	cmp	r3, #9
 8008a64:	d864      	bhi.n	8008b30 <_dtoa_r+0x280>
 8008a66:	2b05      	cmp	r3, #5
 8008a68:	bfc4      	itt	gt
 8008a6a:	3b04      	subgt	r3, #4
 8008a6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a70:	f1a3 0302 	sub.w	r3, r3, #2
 8008a74:	bfcc      	ite	gt
 8008a76:	2400      	movgt	r4, #0
 8008a78:	2401      	movle	r4, #1
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d863      	bhi.n	8008b46 <_dtoa_r+0x296>
 8008a7e:	e8df f003 	tbb	[pc, r3]
 8008a82:	372a      	.short	0x372a
 8008a84:	5535      	.short	0x5535
 8008a86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008a8a:	441e      	add	r6, r3
 8008a8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008a90:	2b20      	cmp	r3, #32
 8008a92:	bfc1      	itttt	gt
 8008a94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008a98:	409f      	lslgt	r7, r3
 8008a9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008a9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008aa2:	bfd6      	itet	le
 8008aa4:	f1c3 0320 	rsble	r3, r3, #32
 8008aa8:	ea47 0003 	orrgt.w	r0, r7, r3
 8008aac:	fa04 f003 	lslle.w	r0, r4, r3
 8008ab0:	f7f7 fd50 	bl	8000554 <__aeabi_ui2d>
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008aba:	3e01      	subs	r6, #1
 8008abc:	9214      	str	r2, [sp, #80]	@ 0x50
 8008abe:	e777      	b.n	80089b0 <_dtoa_r+0x100>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e7b8      	b.n	8008a36 <_dtoa_r+0x186>
 8008ac4:	9012      	str	r0, [sp, #72]	@ 0x48
 8008ac6:	e7b7      	b.n	8008a38 <_dtoa_r+0x188>
 8008ac8:	427b      	negs	r3, r7
 8008aca:	930a      	str	r3, [sp, #40]	@ 0x28
 8008acc:	2300      	movs	r3, #0
 8008ace:	eba8 0807 	sub.w	r8, r8, r7
 8008ad2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ad4:	e7c4      	b.n	8008a60 <_dtoa_r+0x1b0>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ada:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	dc35      	bgt.n	8008b4c <_dtoa_r+0x29c>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	9307      	str	r3, [sp, #28]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008aea:	e00b      	b.n	8008b04 <_dtoa_r+0x254>
 8008aec:	2301      	movs	r3, #1
 8008aee:	e7f3      	b.n	8008ad8 <_dtoa_r+0x228>
 8008af0:	2300      	movs	r3, #0
 8008af2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008af4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008af6:	18fb      	adds	r3, r7, r3
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	3301      	adds	r3, #1
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	9307      	str	r3, [sp, #28]
 8008b00:	bfb8      	it	lt
 8008b02:	2301      	movlt	r3, #1
 8008b04:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008b08:	2100      	movs	r1, #0
 8008b0a:	2204      	movs	r2, #4
 8008b0c:	f102 0514 	add.w	r5, r2, #20
 8008b10:	429d      	cmp	r5, r3
 8008b12:	d91f      	bls.n	8008b54 <_dtoa_r+0x2a4>
 8008b14:	6041      	str	r1, [r0, #4]
 8008b16:	4658      	mov	r0, fp
 8008b18:	f000 fd8e 	bl	8009638 <_Balloc>
 8008b1c:	4682      	mov	sl, r0
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d13c      	bne.n	8008b9c <_dtoa_r+0x2ec>
 8008b22:	4b1b      	ldr	r3, [pc, #108]	@ (8008b90 <_dtoa_r+0x2e0>)
 8008b24:	4602      	mov	r2, r0
 8008b26:	f240 11af 	movw	r1, #431	@ 0x1af
 8008b2a:	e6d8      	b.n	80088de <_dtoa_r+0x2e>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e7e0      	b.n	8008af2 <_dtoa_r+0x242>
 8008b30:	2401      	movs	r4, #1
 8008b32:	2300      	movs	r3, #0
 8008b34:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008b38:	f04f 33ff 	mov.w	r3, #4294967295
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	9307      	str	r3, [sp, #28]
 8008b40:	2200      	movs	r2, #0
 8008b42:	2312      	movs	r3, #18
 8008b44:	e7d0      	b.n	8008ae8 <_dtoa_r+0x238>
 8008b46:	2301      	movs	r3, #1
 8008b48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b4a:	e7f5      	b.n	8008b38 <_dtoa_r+0x288>
 8008b4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	9307      	str	r3, [sp, #28]
 8008b52:	e7d7      	b.n	8008b04 <_dtoa_r+0x254>
 8008b54:	3101      	adds	r1, #1
 8008b56:	0052      	lsls	r2, r2, #1
 8008b58:	e7d8      	b.n	8008b0c <_dtoa_r+0x25c>
 8008b5a:	bf00      	nop
 8008b5c:	f3af 8000 	nop.w
 8008b60:	636f4361 	.word	0x636f4361
 8008b64:	3fd287a7 	.word	0x3fd287a7
 8008b68:	8b60c8b3 	.word	0x8b60c8b3
 8008b6c:	3fc68a28 	.word	0x3fc68a28
 8008b70:	509f79fb 	.word	0x509f79fb
 8008b74:	3fd34413 	.word	0x3fd34413
 8008b78:	0800b1d1 	.word	0x0800b1d1
 8008b7c:	0800b1e8 	.word	0x0800b1e8
 8008b80:	7ff00000 	.word	0x7ff00000
 8008b84:	0800b1a1 	.word	0x0800b1a1
 8008b88:	3ff80000 	.word	0x3ff80000
 8008b8c:	0800b2e0 	.word	0x0800b2e0
 8008b90:	0800b240 	.word	0x0800b240
 8008b94:	0800b1cd 	.word	0x0800b1cd
 8008b98:	0800b1a0 	.word	0x0800b1a0
 8008b9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ba0:	6018      	str	r0, [r3, #0]
 8008ba2:	9b07      	ldr	r3, [sp, #28]
 8008ba4:	2b0e      	cmp	r3, #14
 8008ba6:	f200 80a4 	bhi.w	8008cf2 <_dtoa_r+0x442>
 8008baa:	2c00      	cmp	r4, #0
 8008bac:	f000 80a1 	beq.w	8008cf2 <_dtoa_r+0x442>
 8008bb0:	2f00      	cmp	r7, #0
 8008bb2:	dd33      	ble.n	8008c1c <_dtoa_r+0x36c>
 8008bb4:	4bad      	ldr	r3, [pc, #692]	@ (8008e6c <_dtoa_r+0x5bc>)
 8008bb6:	f007 020f 	and.w	r2, r7, #15
 8008bba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bbe:	ed93 7b00 	vldr	d7, [r3]
 8008bc2:	05f8      	lsls	r0, r7, #23
 8008bc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008bc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008bcc:	d516      	bpl.n	8008bfc <_dtoa_r+0x34c>
 8008bce:	4ba8      	ldr	r3, [pc, #672]	@ (8008e70 <_dtoa_r+0x5c0>)
 8008bd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008bd8:	f7f7 fe60 	bl	800089c <__aeabi_ddiv>
 8008bdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008be0:	f004 040f 	and.w	r4, r4, #15
 8008be4:	2603      	movs	r6, #3
 8008be6:	4da2      	ldr	r5, [pc, #648]	@ (8008e70 <_dtoa_r+0x5c0>)
 8008be8:	b954      	cbnz	r4, 8008c00 <_dtoa_r+0x350>
 8008bea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bf2:	f7f7 fe53 	bl	800089c <__aeabi_ddiv>
 8008bf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bfa:	e028      	b.n	8008c4e <_dtoa_r+0x39e>
 8008bfc:	2602      	movs	r6, #2
 8008bfe:	e7f2      	b.n	8008be6 <_dtoa_r+0x336>
 8008c00:	07e1      	lsls	r1, r4, #31
 8008c02:	d508      	bpl.n	8008c16 <_dtoa_r+0x366>
 8008c04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008c0c:	f7f7 fd1c 	bl	8000648 <__aeabi_dmul>
 8008c10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c14:	3601      	adds	r6, #1
 8008c16:	1064      	asrs	r4, r4, #1
 8008c18:	3508      	adds	r5, #8
 8008c1a:	e7e5      	b.n	8008be8 <_dtoa_r+0x338>
 8008c1c:	f000 80d2 	beq.w	8008dc4 <_dtoa_r+0x514>
 8008c20:	427c      	negs	r4, r7
 8008c22:	4b92      	ldr	r3, [pc, #584]	@ (8008e6c <_dtoa_r+0x5bc>)
 8008c24:	4d92      	ldr	r5, [pc, #584]	@ (8008e70 <_dtoa_r+0x5c0>)
 8008c26:	f004 020f 	and.w	r2, r4, #15
 8008c2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c36:	f7f7 fd07 	bl	8000648 <__aeabi_dmul>
 8008c3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c3e:	1124      	asrs	r4, r4, #4
 8008c40:	2300      	movs	r3, #0
 8008c42:	2602      	movs	r6, #2
 8008c44:	2c00      	cmp	r4, #0
 8008c46:	f040 80b2 	bne.w	8008dae <_dtoa_r+0x4fe>
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1d3      	bne.n	8008bf6 <_dtoa_r+0x346>
 8008c4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f000 80b7 	beq.w	8008dc8 <_dtoa_r+0x518>
 8008c5a:	4b86      	ldr	r3, [pc, #536]	@ (8008e74 <_dtoa_r+0x5c4>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	4620      	mov	r0, r4
 8008c60:	4629      	mov	r1, r5
 8008c62:	f7f7 ff63 	bl	8000b2c <__aeabi_dcmplt>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	f000 80ae 	beq.w	8008dc8 <_dtoa_r+0x518>
 8008c6c:	9b07      	ldr	r3, [sp, #28]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f000 80aa 	beq.w	8008dc8 <_dtoa_r+0x518>
 8008c74:	9b00      	ldr	r3, [sp, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	dd37      	ble.n	8008cea <_dtoa_r+0x43a>
 8008c7a:	1e7b      	subs	r3, r7, #1
 8008c7c:	9304      	str	r3, [sp, #16]
 8008c7e:	4620      	mov	r0, r4
 8008c80:	4b7d      	ldr	r3, [pc, #500]	@ (8008e78 <_dtoa_r+0x5c8>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	4629      	mov	r1, r5
 8008c86:	f7f7 fcdf 	bl	8000648 <__aeabi_dmul>
 8008c8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c8e:	9c00      	ldr	r4, [sp, #0]
 8008c90:	3601      	adds	r6, #1
 8008c92:	4630      	mov	r0, r6
 8008c94:	f7f7 fc6e 	bl	8000574 <__aeabi_i2d>
 8008c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c9c:	f7f7 fcd4 	bl	8000648 <__aeabi_dmul>
 8008ca0:	4b76      	ldr	r3, [pc, #472]	@ (8008e7c <_dtoa_r+0x5cc>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f7f7 fb1a 	bl	80002dc <__adddf3>
 8008ca8:	4605      	mov	r5, r0
 8008caa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008cae:	2c00      	cmp	r4, #0
 8008cb0:	f040 808d 	bne.w	8008dce <_dtoa_r+0x51e>
 8008cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cb8:	4b71      	ldr	r3, [pc, #452]	@ (8008e80 <_dtoa_r+0x5d0>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f7f7 fb0c 	bl	80002d8 <__aeabi_dsub>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008cc8:	462a      	mov	r2, r5
 8008cca:	4633      	mov	r3, r6
 8008ccc:	f7f7 ff4c 	bl	8000b68 <__aeabi_dcmpgt>
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	f040 828b 	bne.w	80091ec <_dtoa_r+0x93c>
 8008cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cda:	462a      	mov	r2, r5
 8008cdc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ce0:	f7f7 ff24 	bl	8000b2c <__aeabi_dcmplt>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	f040 8128 	bne.w	8008f3a <_dtoa_r+0x68a>
 8008cea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008cee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008cf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f2c0 815a 	blt.w	8008fae <_dtoa_r+0x6fe>
 8008cfa:	2f0e      	cmp	r7, #14
 8008cfc:	f300 8157 	bgt.w	8008fae <_dtoa_r+0x6fe>
 8008d00:	4b5a      	ldr	r3, [pc, #360]	@ (8008e6c <_dtoa_r+0x5bc>)
 8008d02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d06:	ed93 7b00 	vldr	d7, [r3]
 8008d0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	ed8d 7b00 	vstr	d7, [sp]
 8008d12:	da03      	bge.n	8008d1c <_dtoa_r+0x46c>
 8008d14:	9b07      	ldr	r3, [sp, #28]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f340 8101 	ble.w	8008f1e <_dtoa_r+0x66e>
 8008d1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008d20:	4656      	mov	r6, sl
 8008d22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d26:	4620      	mov	r0, r4
 8008d28:	4629      	mov	r1, r5
 8008d2a:	f7f7 fdb7 	bl	800089c <__aeabi_ddiv>
 8008d2e:	f7f7 ff3b 	bl	8000ba8 <__aeabi_d2iz>
 8008d32:	4680      	mov	r8, r0
 8008d34:	f7f7 fc1e 	bl	8000574 <__aeabi_i2d>
 8008d38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d3c:	f7f7 fc84 	bl	8000648 <__aeabi_dmul>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4620      	mov	r0, r4
 8008d46:	4629      	mov	r1, r5
 8008d48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008d4c:	f7f7 fac4 	bl	80002d8 <__aeabi_dsub>
 8008d50:	f806 4b01 	strb.w	r4, [r6], #1
 8008d54:	9d07      	ldr	r5, [sp, #28]
 8008d56:	eba6 040a 	sub.w	r4, r6, sl
 8008d5a:	42a5      	cmp	r5, r4
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	f040 8117 	bne.w	8008f92 <_dtoa_r+0x6e2>
 8008d64:	f7f7 faba 	bl	80002dc <__adddf3>
 8008d68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	460d      	mov	r5, r1
 8008d70:	f7f7 fefa 	bl	8000b68 <__aeabi_dcmpgt>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	f040 80f9 	bne.w	8008f6c <_dtoa_r+0x6bc>
 8008d7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d7e:	4620      	mov	r0, r4
 8008d80:	4629      	mov	r1, r5
 8008d82:	f7f7 fec9 	bl	8000b18 <__aeabi_dcmpeq>
 8008d86:	b118      	cbz	r0, 8008d90 <_dtoa_r+0x4e0>
 8008d88:	f018 0f01 	tst.w	r8, #1
 8008d8c:	f040 80ee 	bne.w	8008f6c <_dtoa_r+0x6bc>
 8008d90:	4649      	mov	r1, r9
 8008d92:	4658      	mov	r0, fp
 8008d94:	f000 fc90 	bl	80096b8 <_Bfree>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	7033      	strb	r3, [r6, #0]
 8008d9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d9e:	3701      	adds	r7, #1
 8008da0:	601f      	str	r7, [r3, #0]
 8008da2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 831d 	beq.w	80093e4 <_dtoa_r+0xb34>
 8008daa:	601e      	str	r6, [r3, #0]
 8008dac:	e31a      	b.n	80093e4 <_dtoa_r+0xb34>
 8008dae:	07e2      	lsls	r2, r4, #31
 8008db0:	d505      	bpl.n	8008dbe <_dtoa_r+0x50e>
 8008db2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008db6:	f7f7 fc47 	bl	8000648 <__aeabi_dmul>
 8008dba:	3601      	adds	r6, #1
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	1064      	asrs	r4, r4, #1
 8008dc0:	3508      	adds	r5, #8
 8008dc2:	e73f      	b.n	8008c44 <_dtoa_r+0x394>
 8008dc4:	2602      	movs	r6, #2
 8008dc6:	e742      	b.n	8008c4e <_dtoa_r+0x39e>
 8008dc8:	9c07      	ldr	r4, [sp, #28]
 8008dca:	9704      	str	r7, [sp, #16]
 8008dcc:	e761      	b.n	8008c92 <_dtoa_r+0x3e2>
 8008dce:	4b27      	ldr	r3, [pc, #156]	@ (8008e6c <_dtoa_r+0x5bc>)
 8008dd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008dd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008dd6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008dda:	4454      	add	r4, sl
 8008ddc:	2900      	cmp	r1, #0
 8008dde:	d053      	beq.n	8008e88 <_dtoa_r+0x5d8>
 8008de0:	4928      	ldr	r1, [pc, #160]	@ (8008e84 <_dtoa_r+0x5d4>)
 8008de2:	2000      	movs	r0, #0
 8008de4:	f7f7 fd5a 	bl	800089c <__aeabi_ddiv>
 8008de8:	4633      	mov	r3, r6
 8008dea:	462a      	mov	r2, r5
 8008dec:	f7f7 fa74 	bl	80002d8 <__aeabi_dsub>
 8008df0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008df4:	4656      	mov	r6, sl
 8008df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dfa:	f7f7 fed5 	bl	8000ba8 <__aeabi_d2iz>
 8008dfe:	4605      	mov	r5, r0
 8008e00:	f7f7 fbb8 	bl	8000574 <__aeabi_i2d>
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e0c:	f7f7 fa64 	bl	80002d8 <__aeabi_dsub>
 8008e10:	3530      	adds	r5, #48	@ 0x30
 8008e12:	4602      	mov	r2, r0
 8008e14:	460b      	mov	r3, r1
 8008e16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e1a:	f806 5b01 	strb.w	r5, [r6], #1
 8008e1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e22:	f7f7 fe83 	bl	8000b2c <__aeabi_dcmplt>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d171      	bne.n	8008f0e <_dtoa_r+0x65e>
 8008e2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e2e:	4911      	ldr	r1, [pc, #68]	@ (8008e74 <_dtoa_r+0x5c4>)
 8008e30:	2000      	movs	r0, #0
 8008e32:	f7f7 fa51 	bl	80002d8 <__aeabi_dsub>
 8008e36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e3a:	f7f7 fe77 	bl	8000b2c <__aeabi_dcmplt>
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	f040 8095 	bne.w	8008f6e <_dtoa_r+0x6be>
 8008e44:	42a6      	cmp	r6, r4
 8008e46:	f43f af50 	beq.w	8008cea <_dtoa_r+0x43a>
 8008e4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8008e78 <_dtoa_r+0x5c8>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	f7f7 fbf9 	bl	8000648 <__aeabi_dmul>
 8008e56:	4b08      	ldr	r3, [pc, #32]	@ (8008e78 <_dtoa_r+0x5c8>)
 8008e58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e62:	f7f7 fbf1 	bl	8000648 <__aeabi_dmul>
 8008e66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e6a:	e7c4      	b.n	8008df6 <_dtoa_r+0x546>
 8008e6c:	0800b2e0 	.word	0x0800b2e0
 8008e70:	0800b2b8 	.word	0x0800b2b8
 8008e74:	3ff00000 	.word	0x3ff00000
 8008e78:	40240000 	.word	0x40240000
 8008e7c:	401c0000 	.word	0x401c0000
 8008e80:	40140000 	.word	0x40140000
 8008e84:	3fe00000 	.word	0x3fe00000
 8008e88:	4631      	mov	r1, r6
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	f7f7 fbdc 	bl	8000648 <__aeabi_dmul>
 8008e90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e94:	9415      	str	r4, [sp, #84]	@ 0x54
 8008e96:	4656      	mov	r6, sl
 8008e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e9c:	f7f7 fe84 	bl	8000ba8 <__aeabi_d2iz>
 8008ea0:	4605      	mov	r5, r0
 8008ea2:	f7f7 fb67 	bl	8000574 <__aeabi_i2d>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eae:	f7f7 fa13 	bl	80002d8 <__aeabi_dsub>
 8008eb2:	3530      	adds	r5, #48	@ 0x30
 8008eb4:	f806 5b01 	strb.w	r5, [r6], #1
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	42a6      	cmp	r6, r4
 8008ebe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ec2:	f04f 0200 	mov.w	r2, #0
 8008ec6:	d124      	bne.n	8008f12 <_dtoa_r+0x662>
 8008ec8:	4bac      	ldr	r3, [pc, #688]	@ (800917c <_dtoa_r+0x8cc>)
 8008eca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008ece:	f7f7 fa05 	bl	80002dc <__adddf3>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eda:	f7f7 fe45 	bl	8000b68 <__aeabi_dcmpgt>
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	d145      	bne.n	8008f6e <_dtoa_r+0x6be>
 8008ee2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ee6:	49a5      	ldr	r1, [pc, #660]	@ (800917c <_dtoa_r+0x8cc>)
 8008ee8:	2000      	movs	r0, #0
 8008eea:	f7f7 f9f5 	bl	80002d8 <__aeabi_dsub>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ef6:	f7f7 fe19 	bl	8000b2c <__aeabi_dcmplt>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	f43f aef5 	beq.w	8008cea <_dtoa_r+0x43a>
 8008f00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008f02:	1e73      	subs	r3, r6, #1
 8008f04:	9315      	str	r3, [sp, #84]	@ 0x54
 8008f06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f0a:	2b30      	cmp	r3, #48	@ 0x30
 8008f0c:	d0f8      	beq.n	8008f00 <_dtoa_r+0x650>
 8008f0e:	9f04      	ldr	r7, [sp, #16]
 8008f10:	e73e      	b.n	8008d90 <_dtoa_r+0x4e0>
 8008f12:	4b9b      	ldr	r3, [pc, #620]	@ (8009180 <_dtoa_r+0x8d0>)
 8008f14:	f7f7 fb98 	bl	8000648 <__aeabi_dmul>
 8008f18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f1c:	e7bc      	b.n	8008e98 <_dtoa_r+0x5e8>
 8008f1e:	d10c      	bne.n	8008f3a <_dtoa_r+0x68a>
 8008f20:	4b98      	ldr	r3, [pc, #608]	@ (8009184 <_dtoa_r+0x8d4>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f28:	f7f7 fb8e 	bl	8000648 <__aeabi_dmul>
 8008f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f30:	f7f7 fe10 	bl	8000b54 <__aeabi_dcmpge>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	f000 8157 	beq.w	80091e8 <_dtoa_r+0x938>
 8008f3a:	2400      	movs	r4, #0
 8008f3c:	4625      	mov	r5, r4
 8008f3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f40:	43db      	mvns	r3, r3
 8008f42:	9304      	str	r3, [sp, #16]
 8008f44:	4656      	mov	r6, sl
 8008f46:	2700      	movs	r7, #0
 8008f48:	4621      	mov	r1, r4
 8008f4a:	4658      	mov	r0, fp
 8008f4c:	f000 fbb4 	bl	80096b8 <_Bfree>
 8008f50:	2d00      	cmp	r5, #0
 8008f52:	d0dc      	beq.n	8008f0e <_dtoa_r+0x65e>
 8008f54:	b12f      	cbz	r7, 8008f62 <_dtoa_r+0x6b2>
 8008f56:	42af      	cmp	r7, r5
 8008f58:	d003      	beq.n	8008f62 <_dtoa_r+0x6b2>
 8008f5a:	4639      	mov	r1, r7
 8008f5c:	4658      	mov	r0, fp
 8008f5e:	f000 fbab 	bl	80096b8 <_Bfree>
 8008f62:	4629      	mov	r1, r5
 8008f64:	4658      	mov	r0, fp
 8008f66:	f000 fba7 	bl	80096b8 <_Bfree>
 8008f6a:	e7d0      	b.n	8008f0e <_dtoa_r+0x65e>
 8008f6c:	9704      	str	r7, [sp, #16]
 8008f6e:	4633      	mov	r3, r6
 8008f70:	461e      	mov	r6, r3
 8008f72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f76:	2a39      	cmp	r2, #57	@ 0x39
 8008f78:	d107      	bne.n	8008f8a <_dtoa_r+0x6da>
 8008f7a:	459a      	cmp	sl, r3
 8008f7c:	d1f8      	bne.n	8008f70 <_dtoa_r+0x6c0>
 8008f7e:	9a04      	ldr	r2, [sp, #16]
 8008f80:	3201      	adds	r2, #1
 8008f82:	9204      	str	r2, [sp, #16]
 8008f84:	2230      	movs	r2, #48	@ 0x30
 8008f86:	f88a 2000 	strb.w	r2, [sl]
 8008f8a:	781a      	ldrb	r2, [r3, #0]
 8008f8c:	3201      	adds	r2, #1
 8008f8e:	701a      	strb	r2, [r3, #0]
 8008f90:	e7bd      	b.n	8008f0e <_dtoa_r+0x65e>
 8008f92:	4b7b      	ldr	r3, [pc, #492]	@ (8009180 <_dtoa_r+0x8d0>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	f7f7 fb57 	bl	8000648 <__aeabi_dmul>
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	4604      	mov	r4, r0
 8008fa0:	460d      	mov	r5, r1
 8008fa2:	f7f7 fdb9 	bl	8000b18 <__aeabi_dcmpeq>
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	f43f aebb 	beq.w	8008d22 <_dtoa_r+0x472>
 8008fac:	e6f0      	b.n	8008d90 <_dtoa_r+0x4e0>
 8008fae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008fb0:	2a00      	cmp	r2, #0
 8008fb2:	f000 80db 	beq.w	800916c <_dtoa_r+0x8bc>
 8008fb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fb8:	2a01      	cmp	r2, #1
 8008fba:	f300 80bf 	bgt.w	800913c <_dtoa_r+0x88c>
 8008fbe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008fc0:	2a00      	cmp	r2, #0
 8008fc2:	f000 80b7 	beq.w	8009134 <_dtoa_r+0x884>
 8008fc6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008fca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008fcc:	4646      	mov	r6, r8
 8008fce:	9a08      	ldr	r2, [sp, #32]
 8008fd0:	2101      	movs	r1, #1
 8008fd2:	441a      	add	r2, r3
 8008fd4:	4658      	mov	r0, fp
 8008fd6:	4498      	add	r8, r3
 8008fd8:	9208      	str	r2, [sp, #32]
 8008fda:	f000 fc21 	bl	8009820 <__i2b>
 8008fde:	4605      	mov	r5, r0
 8008fe0:	b15e      	cbz	r6, 8008ffa <_dtoa_r+0x74a>
 8008fe2:	9b08      	ldr	r3, [sp, #32]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	dd08      	ble.n	8008ffa <_dtoa_r+0x74a>
 8008fe8:	42b3      	cmp	r3, r6
 8008fea:	9a08      	ldr	r2, [sp, #32]
 8008fec:	bfa8      	it	ge
 8008fee:	4633      	movge	r3, r6
 8008ff0:	eba8 0803 	sub.w	r8, r8, r3
 8008ff4:	1af6      	subs	r6, r6, r3
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	9308      	str	r3, [sp, #32]
 8008ffa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ffc:	b1f3      	cbz	r3, 800903c <_dtoa_r+0x78c>
 8008ffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 80b7 	beq.w	8009174 <_dtoa_r+0x8c4>
 8009006:	b18c      	cbz	r4, 800902c <_dtoa_r+0x77c>
 8009008:	4629      	mov	r1, r5
 800900a:	4622      	mov	r2, r4
 800900c:	4658      	mov	r0, fp
 800900e:	f000 fcc7 	bl	80099a0 <__pow5mult>
 8009012:	464a      	mov	r2, r9
 8009014:	4601      	mov	r1, r0
 8009016:	4605      	mov	r5, r0
 8009018:	4658      	mov	r0, fp
 800901a:	f000 fc17 	bl	800984c <__multiply>
 800901e:	4649      	mov	r1, r9
 8009020:	9004      	str	r0, [sp, #16]
 8009022:	4658      	mov	r0, fp
 8009024:	f000 fb48 	bl	80096b8 <_Bfree>
 8009028:	9b04      	ldr	r3, [sp, #16]
 800902a:	4699      	mov	r9, r3
 800902c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800902e:	1b1a      	subs	r2, r3, r4
 8009030:	d004      	beq.n	800903c <_dtoa_r+0x78c>
 8009032:	4649      	mov	r1, r9
 8009034:	4658      	mov	r0, fp
 8009036:	f000 fcb3 	bl	80099a0 <__pow5mult>
 800903a:	4681      	mov	r9, r0
 800903c:	2101      	movs	r1, #1
 800903e:	4658      	mov	r0, fp
 8009040:	f000 fbee 	bl	8009820 <__i2b>
 8009044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009046:	4604      	mov	r4, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 81cf 	beq.w	80093ec <_dtoa_r+0xb3c>
 800904e:	461a      	mov	r2, r3
 8009050:	4601      	mov	r1, r0
 8009052:	4658      	mov	r0, fp
 8009054:	f000 fca4 	bl	80099a0 <__pow5mult>
 8009058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800905a:	2b01      	cmp	r3, #1
 800905c:	4604      	mov	r4, r0
 800905e:	f300 8095 	bgt.w	800918c <_dtoa_r+0x8dc>
 8009062:	9b02      	ldr	r3, [sp, #8]
 8009064:	2b00      	cmp	r3, #0
 8009066:	f040 8087 	bne.w	8009178 <_dtoa_r+0x8c8>
 800906a:	9b03      	ldr	r3, [sp, #12]
 800906c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009070:	2b00      	cmp	r3, #0
 8009072:	f040 8089 	bne.w	8009188 <_dtoa_r+0x8d8>
 8009076:	9b03      	ldr	r3, [sp, #12]
 8009078:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800907c:	0d1b      	lsrs	r3, r3, #20
 800907e:	051b      	lsls	r3, r3, #20
 8009080:	b12b      	cbz	r3, 800908e <_dtoa_r+0x7de>
 8009082:	9b08      	ldr	r3, [sp, #32]
 8009084:	3301      	adds	r3, #1
 8009086:	9308      	str	r3, [sp, #32]
 8009088:	f108 0801 	add.w	r8, r8, #1
 800908c:	2301      	movs	r3, #1
 800908e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009092:	2b00      	cmp	r3, #0
 8009094:	f000 81b0 	beq.w	80093f8 <_dtoa_r+0xb48>
 8009098:	6923      	ldr	r3, [r4, #16]
 800909a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800909e:	6918      	ldr	r0, [r3, #16]
 80090a0:	f000 fb72 	bl	8009788 <__hi0bits>
 80090a4:	f1c0 0020 	rsb	r0, r0, #32
 80090a8:	9b08      	ldr	r3, [sp, #32]
 80090aa:	4418      	add	r0, r3
 80090ac:	f010 001f 	ands.w	r0, r0, #31
 80090b0:	d077      	beq.n	80091a2 <_dtoa_r+0x8f2>
 80090b2:	f1c0 0320 	rsb	r3, r0, #32
 80090b6:	2b04      	cmp	r3, #4
 80090b8:	dd6b      	ble.n	8009192 <_dtoa_r+0x8e2>
 80090ba:	9b08      	ldr	r3, [sp, #32]
 80090bc:	f1c0 001c 	rsb	r0, r0, #28
 80090c0:	4403      	add	r3, r0
 80090c2:	4480      	add	r8, r0
 80090c4:	4406      	add	r6, r0
 80090c6:	9308      	str	r3, [sp, #32]
 80090c8:	f1b8 0f00 	cmp.w	r8, #0
 80090cc:	dd05      	ble.n	80090da <_dtoa_r+0x82a>
 80090ce:	4649      	mov	r1, r9
 80090d0:	4642      	mov	r2, r8
 80090d2:	4658      	mov	r0, fp
 80090d4:	f000 fcbe 	bl	8009a54 <__lshift>
 80090d8:	4681      	mov	r9, r0
 80090da:	9b08      	ldr	r3, [sp, #32]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	dd05      	ble.n	80090ec <_dtoa_r+0x83c>
 80090e0:	4621      	mov	r1, r4
 80090e2:	461a      	mov	r2, r3
 80090e4:	4658      	mov	r0, fp
 80090e6:	f000 fcb5 	bl	8009a54 <__lshift>
 80090ea:	4604      	mov	r4, r0
 80090ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d059      	beq.n	80091a6 <_dtoa_r+0x8f6>
 80090f2:	4621      	mov	r1, r4
 80090f4:	4648      	mov	r0, r9
 80090f6:	f000 fd19 	bl	8009b2c <__mcmp>
 80090fa:	2800      	cmp	r0, #0
 80090fc:	da53      	bge.n	80091a6 <_dtoa_r+0x8f6>
 80090fe:	1e7b      	subs	r3, r7, #1
 8009100:	9304      	str	r3, [sp, #16]
 8009102:	4649      	mov	r1, r9
 8009104:	2300      	movs	r3, #0
 8009106:	220a      	movs	r2, #10
 8009108:	4658      	mov	r0, fp
 800910a:	f000 faf7 	bl	80096fc <__multadd>
 800910e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009110:	4681      	mov	r9, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	f000 8172 	beq.w	80093fc <_dtoa_r+0xb4c>
 8009118:	2300      	movs	r3, #0
 800911a:	4629      	mov	r1, r5
 800911c:	220a      	movs	r2, #10
 800911e:	4658      	mov	r0, fp
 8009120:	f000 faec 	bl	80096fc <__multadd>
 8009124:	9b00      	ldr	r3, [sp, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	4605      	mov	r5, r0
 800912a:	dc67      	bgt.n	80091fc <_dtoa_r+0x94c>
 800912c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800912e:	2b02      	cmp	r3, #2
 8009130:	dc41      	bgt.n	80091b6 <_dtoa_r+0x906>
 8009132:	e063      	b.n	80091fc <_dtoa_r+0x94c>
 8009134:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009136:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800913a:	e746      	b.n	8008fca <_dtoa_r+0x71a>
 800913c:	9b07      	ldr	r3, [sp, #28]
 800913e:	1e5c      	subs	r4, r3, #1
 8009140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009142:	42a3      	cmp	r3, r4
 8009144:	bfbf      	itttt	lt
 8009146:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009148:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800914a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800914c:	1ae3      	sublt	r3, r4, r3
 800914e:	bfb4      	ite	lt
 8009150:	18d2      	addlt	r2, r2, r3
 8009152:	1b1c      	subge	r4, r3, r4
 8009154:	9b07      	ldr	r3, [sp, #28]
 8009156:	bfbc      	itt	lt
 8009158:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800915a:	2400      	movlt	r4, #0
 800915c:	2b00      	cmp	r3, #0
 800915e:	bfb5      	itete	lt
 8009160:	eba8 0603 	sublt.w	r6, r8, r3
 8009164:	9b07      	ldrge	r3, [sp, #28]
 8009166:	2300      	movlt	r3, #0
 8009168:	4646      	movge	r6, r8
 800916a:	e730      	b.n	8008fce <_dtoa_r+0x71e>
 800916c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800916e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009170:	4646      	mov	r6, r8
 8009172:	e735      	b.n	8008fe0 <_dtoa_r+0x730>
 8009174:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009176:	e75c      	b.n	8009032 <_dtoa_r+0x782>
 8009178:	2300      	movs	r3, #0
 800917a:	e788      	b.n	800908e <_dtoa_r+0x7de>
 800917c:	3fe00000 	.word	0x3fe00000
 8009180:	40240000 	.word	0x40240000
 8009184:	40140000 	.word	0x40140000
 8009188:	9b02      	ldr	r3, [sp, #8]
 800918a:	e780      	b.n	800908e <_dtoa_r+0x7de>
 800918c:	2300      	movs	r3, #0
 800918e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009190:	e782      	b.n	8009098 <_dtoa_r+0x7e8>
 8009192:	d099      	beq.n	80090c8 <_dtoa_r+0x818>
 8009194:	9a08      	ldr	r2, [sp, #32]
 8009196:	331c      	adds	r3, #28
 8009198:	441a      	add	r2, r3
 800919a:	4498      	add	r8, r3
 800919c:	441e      	add	r6, r3
 800919e:	9208      	str	r2, [sp, #32]
 80091a0:	e792      	b.n	80090c8 <_dtoa_r+0x818>
 80091a2:	4603      	mov	r3, r0
 80091a4:	e7f6      	b.n	8009194 <_dtoa_r+0x8e4>
 80091a6:	9b07      	ldr	r3, [sp, #28]
 80091a8:	9704      	str	r7, [sp, #16]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	dc20      	bgt.n	80091f0 <_dtoa_r+0x940>
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	dd1e      	ble.n	80091f4 <_dtoa_r+0x944>
 80091b6:	9b00      	ldr	r3, [sp, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f47f aec0 	bne.w	8008f3e <_dtoa_r+0x68e>
 80091be:	4621      	mov	r1, r4
 80091c0:	2205      	movs	r2, #5
 80091c2:	4658      	mov	r0, fp
 80091c4:	f000 fa9a 	bl	80096fc <__multadd>
 80091c8:	4601      	mov	r1, r0
 80091ca:	4604      	mov	r4, r0
 80091cc:	4648      	mov	r0, r9
 80091ce:	f000 fcad 	bl	8009b2c <__mcmp>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	f77f aeb3 	ble.w	8008f3e <_dtoa_r+0x68e>
 80091d8:	4656      	mov	r6, sl
 80091da:	2331      	movs	r3, #49	@ 0x31
 80091dc:	f806 3b01 	strb.w	r3, [r6], #1
 80091e0:	9b04      	ldr	r3, [sp, #16]
 80091e2:	3301      	adds	r3, #1
 80091e4:	9304      	str	r3, [sp, #16]
 80091e6:	e6ae      	b.n	8008f46 <_dtoa_r+0x696>
 80091e8:	9c07      	ldr	r4, [sp, #28]
 80091ea:	9704      	str	r7, [sp, #16]
 80091ec:	4625      	mov	r5, r4
 80091ee:	e7f3      	b.n	80091d8 <_dtoa_r+0x928>
 80091f0:	9b07      	ldr	r3, [sp, #28]
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f000 8104 	beq.w	8009404 <_dtoa_r+0xb54>
 80091fc:	2e00      	cmp	r6, #0
 80091fe:	dd05      	ble.n	800920c <_dtoa_r+0x95c>
 8009200:	4629      	mov	r1, r5
 8009202:	4632      	mov	r2, r6
 8009204:	4658      	mov	r0, fp
 8009206:	f000 fc25 	bl	8009a54 <__lshift>
 800920a:	4605      	mov	r5, r0
 800920c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800920e:	2b00      	cmp	r3, #0
 8009210:	d05a      	beq.n	80092c8 <_dtoa_r+0xa18>
 8009212:	6869      	ldr	r1, [r5, #4]
 8009214:	4658      	mov	r0, fp
 8009216:	f000 fa0f 	bl	8009638 <_Balloc>
 800921a:	4606      	mov	r6, r0
 800921c:	b928      	cbnz	r0, 800922a <_dtoa_r+0x97a>
 800921e:	4b84      	ldr	r3, [pc, #528]	@ (8009430 <_dtoa_r+0xb80>)
 8009220:	4602      	mov	r2, r0
 8009222:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009226:	f7ff bb5a 	b.w	80088de <_dtoa_r+0x2e>
 800922a:	692a      	ldr	r2, [r5, #16]
 800922c:	3202      	adds	r2, #2
 800922e:	0092      	lsls	r2, r2, #2
 8009230:	f105 010c 	add.w	r1, r5, #12
 8009234:	300c      	adds	r0, #12
 8009236:	f000 ffaf 	bl	800a198 <memcpy>
 800923a:	2201      	movs	r2, #1
 800923c:	4631      	mov	r1, r6
 800923e:	4658      	mov	r0, fp
 8009240:	f000 fc08 	bl	8009a54 <__lshift>
 8009244:	f10a 0301 	add.w	r3, sl, #1
 8009248:	9307      	str	r3, [sp, #28]
 800924a:	9b00      	ldr	r3, [sp, #0]
 800924c:	4453      	add	r3, sl
 800924e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009250:	9b02      	ldr	r3, [sp, #8]
 8009252:	f003 0301 	and.w	r3, r3, #1
 8009256:	462f      	mov	r7, r5
 8009258:	930a      	str	r3, [sp, #40]	@ 0x28
 800925a:	4605      	mov	r5, r0
 800925c:	9b07      	ldr	r3, [sp, #28]
 800925e:	4621      	mov	r1, r4
 8009260:	3b01      	subs	r3, #1
 8009262:	4648      	mov	r0, r9
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	f7ff fa9a 	bl	800879e <quorem>
 800926a:	4639      	mov	r1, r7
 800926c:	9002      	str	r0, [sp, #8]
 800926e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009272:	4648      	mov	r0, r9
 8009274:	f000 fc5a 	bl	8009b2c <__mcmp>
 8009278:	462a      	mov	r2, r5
 800927a:	9008      	str	r0, [sp, #32]
 800927c:	4621      	mov	r1, r4
 800927e:	4658      	mov	r0, fp
 8009280:	f000 fc70 	bl	8009b64 <__mdiff>
 8009284:	68c2      	ldr	r2, [r0, #12]
 8009286:	4606      	mov	r6, r0
 8009288:	bb02      	cbnz	r2, 80092cc <_dtoa_r+0xa1c>
 800928a:	4601      	mov	r1, r0
 800928c:	4648      	mov	r0, r9
 800928e:	f000 fc4d 	bl	8009b2c <__mcmp>
 8009292:	4602      	mov	r2, r0
 8009294:	4631      	mov	r1, r6
 8009296:	4658      	mov	r0, fp
 8009298:	920e      	str	r2, [sp, #56]	@ 0x38
 800929a:	f000 fa0d 	bl	80096b8 <_Bfree>
 800929e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092a2:	9e07      	ldr	r6, [sp, #28]
 80092a4:	ea43 0102 	orr.w	r1, r3, r2
 80092a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092aa:	4319      	orrs	r1, r3
 80092ac:	d110      	bne.n	80092d0 <_dtoa_r+0xa20>
 80092ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092b2:	d029      	beq.n	8009308 <_dtoa_r+0xa58>
 80092b4:	9b08      	ldr	r3, [sp, #32]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	dd02      	ble.n	80092c0 <_dtoa_r+0xa10>
 80092ba:	9b02      	ldr	r3, [sp, #8]
 80092bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80092c0:	9b00      	ldr	r3, [sp, #0]
 80092c2:	f883 8000 	strb.w	r8, [r3]
 80092c6:	e63f      	b.n	8008f48 <_dtoa_r+0x698>
 80092c8:	4628      	mov	r0, r5
 80092ca:	e7bb      	b.n	8009244 <_dtoa_r+0x994>
 80092cc:	2201      	movs	r2, #1
 80092ce:	e7e1      	b.n	8009294 <_dtoa_r+0x9e4>
 80092d0:	9b08      	ldr	r3, [sp, #32]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	db04      	blt.n	80092e0 <_dtoa_r+0xa30>
 80092d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80092d8:	430b      	orrs	r3, r1
 80092da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092dc:	430b      	orrs	r3, r1
 80092de:	d120      	bne.n	8009322 <_dtoa_r+0xa72>
 80092e0:	2a00      	cmp	r2, #0
 80092e2:	dded      	ble.n	80092c0 <_dtoa_r+0xa10>
 80092e4:	4649      	mov	r1, r9
 80092e6:	2201      	movs	r2, #1
 80092e8:	4658      	mov	r0, fp
 80092ea:	f000 fbb3 	bl	8009a54 <__lshift>
 80092ee:	4621      	mov	r1, r4
 80092f0:	4681      	mov	r9, r0
 80092f2:	f000 fc1b 	bl	8009b2c <__mcmp>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	dc03      	bgt.n	8009302 <_dtoa_r+0xa52>
 80092fa:	d1e1      	bne.n	80092c0 <_dtoa_r+0xa10>
 80092fc:	f018 0f01 	tst.w	r8, #1
 8009300:	d0de      	beq.n	80092c0 <_dtoa_r+0xa10>
 8009302:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009306:	d1d8      	bne.n	80092ba <_dtoa_r+0xa0a>
 8009308:	9a00      	ldr	r2, [sp, #0]
 800930a:	2339      	movs	r3, #57	@ 0x39
 800930c:	7013      	strb	r3, [r2, #0]
 800930e:	4633      	mov	r3, r6
 8009310:	461e      	mov	r6, r3
 8009312:	3b01      	subs	r3, #1
 8009314:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009318:	2a39      	cmp	r2, #57	@ 0x39
 800931a:	d052      	beq.n	80093c2 <_dtoa_r+0xb12>
 800931c:	3201      	adds	r2, #1
 800931e:	701a      	strb	r2, [r3, #0]
 8009320:	e612      	b.n	8008f48 <_dtoa_r+0x698>
 8009322:	2a00      	cmp	r2, #0
 8009324:	dd07      	ble.n	8009336 <_dtoa_r+0xa86>
 8009326:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800932a:	d0ed      	beq.n	8009308 <_dtoa_r+0xa58>
 800932c:	9a00      	ldr	r2, [sp, #0]
 800932e:	f108 0301 	add.w	r3, r8, #1
 8009332:	7013      	strb	r3, [r2, #0]
 8009334:	e608      	b.n	8008f48 <_dtoa_r+0x698>
 8009336:	9b07      	ldr	r3, [sp, #28]
 8009338:	9a07      	ldr	r2, [sp, #28]
 800933a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800933e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009340:	4293      	cmp	r3, r2
 8009342:	d028      	beq.n	8009396 <_dtoa_r+0xae6>
 8009344:	4649      	mov	r1, r9
 8009346:	2300      	movs	r3, #0
 8009348:	220a      	movs	r2, #10
 800934a:	4658      	mov	r0, fp
 800934c:	f000 f9d6 	bl	80096fc <__multadd>
 8009350:	42af      	cmp	r7, r5
 8009352:	4681      	mov	r9, r0
 8009354:	f04f 0300 	mov.w	r3, #0
 8009358:	f04f 020a 	mov.w	r2, #10
 800935c:	4639      	mov	r1, r7
 800935e:	4658      	mov	r0, fp
 8009360:	d107      	bne.n	8009372 <_dtoa_r+0xac2>
 8009362:	f000 f9cb 	bl	80096fc <__multadd>
 8009366:	4607      	mov	r7, r0
 8009368:	4605      	mov	r5, r0
 800936a:	9b07      	ldr	r3, [sp, #28]
 800936c:	3301      	adds	r3, #1
 800936e:	9307      	str	r3, [sp, #28]
 8009370:	e774      	b.n	800925c <_dtoa_r+0x9ac>
 8009372:	f000 f9c3 	bl	80096fc <__multadd>
 8009376:	4629      	mov	r1, r5
 8009378:	4607      	mov	r7, r0
 800937a:	2300      	movs	r3, #0
 800937c:	220a      	movs	r2, #10
 800937e:	4658      	mov	r0, fp
 8009380:	f000 f9bc 	bl	80096fc <__multadd>
 8009384:	4605      	mov	r5, r0
 8009386:	e7f0      	b.n	800936a <_dtoa_r+0xaba>
 8009388:	9b00      	ldr	r3, [sp, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	bfcc      	ite	gt
 800938e:	461e      	movgt	r6, r3
 8009390:	2601      	movle	r6, #1
 8009392:	4456      	add	r6, sl
 8009394:	2700      	movs	r7, #0
 8009396:	4649      	mov	r1, r9
 8009398:	2201      	movs	r2, #1
 800939a:	4658      	mov	r0, fp
 800939c:	f000 fb5a 	bl	8009a54 <__lshift>
 80093a0:	4621      	mov	r1, r4
 80093a2:	4681      	mov	r9, r0
 80093a4:	f000 fbc2 	bl	8009b2c <__mcmp>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	dcb0      	bgt.n	800930e <_dtoa_r+0xa5e>
 80093ac:	d102      	bne.n	80093b4 <_dtoa_r+0xb04>
 80093ae:	f018 0f01 	tst.w	r8, #1
 80093b2:	d1ac      	bne.n	800930e <_dtoa_r+0xa5e>
 80093b4:	4633      	mov	r3, r6
 80093b6:	461e      	mov	r6, r3
 80093b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093bc:	2a30      	cmp	r2, #48	@ 0x30
 80093be:	d0fa      	beq.n	80093b6 <_dtoa_r+0xb06>
 80093c0:	e5c2      	b.n	8008f48 <_dtoa_r+0x698>
 80093c2:	459a      	cmp	sl, r3
 80093c4:	d1a4      	bne.n	8009310 <_dtoa_r+0xa60>
 80093c6:	9b04      	ldr	r3, [sp, #16]
 80093c8:	3301      	adds	r3, #1
 80093ca:	9304      	str	r3, [sp, #16]
 80093cc:	2331      	movs	r3, #49	@ 0x31
 80093ce:	f88a 3000 	strb.w	r3, [sl]
 80093d2:	e5b9      	b.n	8008f48 <_dtoa_r+0x698>
 80093d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80093d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009434 <_dtoa_r+0xb84>
 80093da:	b11b      	cbz	r3, 80093e4 <_dtoa_r+0xb34>
 80093dc:	f10a 0308 	add.w	r3, sl, #8
 80093e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80093e2:	6013      	str	r3, [r2, #0]
 80093e4:	4650      	mov	r0, sl
 80093e6:	b019      	add	sp, #100	@ 0x64
 80093e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	f77f ae37 	ble.w	8009062 <_dtoa_r+0x7b2>
 80093f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80093f8:	2001      	movs	r0, #1
 80093fa:	e655      	b.n	80090a8 <_dtoa_r+0x7f8>
 80093fc:	9b00      	ldr	r3, [sp, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	f77f aed6 	ble.w	80091b0 <_dtoa_r+0x900>
 8009404:	4656      	mov	r6, sl
 8009406:	4621      	mov	r1, r4
 8009408:	4648      	mov	r0, r9
 800940a:	f7ff f9c8 	bl	800879e <quorem>
 800940e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009412:	f806 8b01 	strb.w	r8, [r6], #1
 8009416:	9b00      	ldr	r3, [sp, #0]
 8009418:	eba6 020a 	sub.w	r2, r6, sl
 800941c:	4293      	cmp	r3, r2
 800941e:	ddb3      	ble.n	8009388 <_dtoa_r+0xad8>
 8009420:	4649      	mov	r1, r9
 8009422:	2300      	movs	r3, #0
 8009424:	220a      	movs	r2, #10
 8009426:	4658      	mov	r0, fp
 8009428:	f000 f968 	bl	80096fc <__multadd>
 800942c:	4681      	mov	r9, r0
 800942e:	e7ea      	b.n	8009406 <_dtoa_r+0xb56>
 8009430:	0800b240 	.word	0x0800b240
 8009434:	0800b1c4 	.word	0x0800b1c4

08009438 <_free_r>:
 8009438:	b538      	push	{r3, r4, r5, lr}
 800943a:	4605      	mov	r5, r0
 800943c:	2900      	cmp	r1, #0
 800943e:	d041      	beq.n	80094c4 <_free_r+0x8c>
 8009440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009444:	1f0c      	subs	r4, r1, #4
 8009446:	2b00      	cmp	r3, #0
 8009448:	bfb8      	it	lt
 800944a:	18e4      	addlt	r4, r4, r3
 800944c:	f000 f8e8 	bl	8009620 <__malloc_lock>
 8009450:	4a1d      	ldr	r2, [pc, #116]	@ (80094c8 <_free_r+0x90>)
 8009452:	6813      	ldr	r3, [r2, #0]
 8009454:	b933      	cbnz	r3, 8009464 <_free_r+0x2c>
 8009456:	6063      	str	r3, [r4, #4]
 8009458:	6014      	str	r4, [r2, #0]
 800945a:	4628      	mov	r0, r5
 800945c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009460:	f000 b8e4 	b.w	800962c <__malloc_unlock>
 8009464:	42a3      	cmp	r3, r4
 8009466:	d908      	bls.n	800947a <_free_r+0x42>
 8009468:	6820      	ldr	r0, [r4, #0]
 800946a:	1821      	adds	r1, r4, r0
 800946c:	428b      	cmp	r3, r1
 800946e:	bf01      	itttt	eq
 8009470:	6819      	ldreq	r1, [r3, #0]
 8009472:	685b      	ldreq	r3, [r3, #4]
 8009474:	1809      	addeq	r1, r1, r0
 8009476:	6021      	streq	r1, [r4, #0]
 8009478:	e7ed      	b.n	8009456 <_free_r+0x1e>
 800947a:	461a      	mov	r2, r3
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	b10b      	cbz	r3, 8009484 <_free_r+0x4c>
 8009480:	42a3      	cmp	r3, r4
 8009482:	d9fa      	bls.n	800947a <_free_r+0x42>
 8009484:	6811      	ldr	r1, [r2, #0]
 8009486:	1850      	adds	r0, r2, r1
 8009488:	42a0      	cmp	r0, r4
 800948a:	d10b      	bne.n	80094a4 <_free_r+0x6c>
 800948c:	6820      	ldr	r0, [r4, #0]
 800948e:	4401      	add	r1, r0
 8009490:	1850      	adds	r0, r2, r1
 8009492:	4283      	cmp	r3, r0
 8009494:	6011      	str	r1, [r2, #0]
 8009496:	d1e0      	bne.n	800945a <_free_r+0x22>
 8009498:	6818      	ldr	r0, [r3, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	6053      	str	r3, [r2, #4]
 800949e:	4408      	add	r0, r1
 80094a0:	6010      	str	r0, [r2, #0]
 80094a2:	e7da      	b.n	800945a <_free_r+0x22>
 80094a4:	d902      	bls.n	80094ac <_free_r+0x74>
 80094a6:	230c      	movs	r3, #12
 80094a8:	602b      	str	r3, [r5, #0]
 80094aa:	e7d6      	b.n	800945a <_free_r+0x22>
 80094ac:	6820      	ldr	r0, [r4, #0]
 80094ae:	1821      	adds	r1, r4, r0
 80094b0:	428b      	cmp	r3, r1
 80094b2:	bf04      	itt	eq
 80094b4:	6819      	ldreq	r1, [r3, #0]
 80094b6:	685b      	ldreq	r3, [r3, #4]
 80094b8:	6063      	str	r3, [r4, #4]
 80094ba:	bf04      	itt	eq
 80094bc:	1809      	addeq	r1, r1, r0
 80094be:	6021      	streq	r1, [r4, #0]
 80094c0:	6054      	str	r4, [r2, #4]
 80094c2:	e7ca      	b.n	800945a <_free_r+0x22>
 80094c4:	bd38      	pop	{r3, r4, r5, pc}
 80094c6:	bf00      	nop
 80094c8:	20000718 	.word	0x20000718

080094cc <malloc>:
 80094cc:	4b02      	ldr	r3, [pc, #8]	@ (80094d8 <malloc+0xc>)
 80094ce:	4601      	mov	r1, r0
 80094d0:	6818      	ldr	r0, [r3, #0]
 80094d2:	f000 b825 	b.w	8009520 <_malloc_r>
 80094d6:	bf00      	nop
 80094d8:	20000028 	.word	0x20000028

080094dc <sbrk_aligned>:
 80094dc:	b570      	push	{r4, r5, r6, lr}
 80094de:	4e0f      	ldr	r6, [pc, #60]	@ (800951c <sbrk_aligned+0x40>)
 80094e0:	460c      	mov	r4, r1
 80094e2:	6831      	ldr	r1, [r6, #0]
 80094e4:	4605      	mov	r5, r0
 80094e6:	b911      	cbnz	r1, 80094ee <sbrk_aligned+0x12>
 80094e8:	f000 fe46 	bl	800a178 <_sbrk_r>
 80094ec:	6030      	str	r0, [r6, #0]
 80094ee:	4621      	mov	r1, r4
 80094f0:	4628      	mov	r0, r5
 80094f2:	f000 fe41 	bl	800a178 <_sbrk_r>
 80094f6:	1c43      	adds	r3, r0, #1
 80094f8:	d103      	bne.n	8009502 <sbrk_aligned+0x26>
 80094fa:	f04f 34ff 	mov.w	r4, #4294967295
 80094fe:	4620      	mov	r0, r4
 8009500:	bd70      	pop	{r4, r5, r6, pc}
 8009502:	1cc4      	adds	r4, r0, #3
 8009504:	f024 0403 	bic.w	r4, r4, #3
 8009508:	42a0      	cmp	r0, r4
 800950a:	d0f8      	beq.n	80094fe <sbrk_aligned+0x22>
 800950c:	1a21      	subs	r1, r4, r0
 800950e:	4628      	mov	r0, r5
 8009510:	f000 fe32 	bl	800a178 <_sbrk_r>
 8009514:	3001      	adds	r0, #1
 8009516:	d1f2      	bne.n	80094fe <sbrk_aligned+0x22>
 8009518:	e7ef      	b.n	80094fa <sbrk_aligned+0x1e>
 800951a:	bf00      	nop
 800951c:	20000714 	.word	0x20000714

08009520 <_malloc_r>:
 8009520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009524:	1ccd      	adds	r5, r1, #3
 8009526:	f025 0503 	bic.w	r5, r5, #3
 800952a:	3508      	adds	r5, #8
 800952c:	2d0c      	cmp	r5, #12
 800952e:	bf38      	it	cc
 8009530:	250c      	movcc	r5, #12
 8009532:	2d00      	cmp	r5, #0
 8009534:	4606      	mov	r6, r0
 8009536:	db01      	blt.n	800953c <_malloc_r+0x1c>
 8009538:	42a9      	cmp	r1, r5
 800953a:	d904      	bls.n	8009546 <_malloc_r+0x26>
 800953c:	230c      	movs	r3, #12
 800953e:	6033      	str	r3, [r6, #0]
 8009540:	2000      	movs	r0, #0
 8009542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009546:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800961c <_malloc_r+0xfc>
 800954a:	f000 f869 	bl	8009620 <__malloc_lock>
 800954e:	f8d8 3000 	ldr.w	r3, [r8]
 8009552:	461c      	mov	r4, r3
 8009554:	bb44      	cbnz	r4, 80095a8 <_malloc_r+0x88>
 8009556:	4629      	mov	r1, r5
 8009558:	4630      	mov	r0, r6
 800955a:	f7ff ffbf 	bl	80094dc <sbrk_aligned>
 800955e:	1c43      	adds	r3, r0, #1
 8009560:	4604      	mov	r4, r0
 8009562:	d158      	bne.n	8009616 <_malloc_r+0xf6>
 8009564:	f8d8 4000 	ldr.w	r4, [r8]
 8009568:	4627      	mov	r7, r4
 800956a:	2f00      	cmp	r7, #0
 800956c:	d143      	bne.n	80095f6 <_malloc_r+0xd6>
 800956e:	2c00      	cmp	r4, #0
 8009570:	d04b      	beq.n	800960a <_malloc_r+0xea>
 8009572:	6823      	ldr	r3, [r4, #0]
 8009574:	4639      	mov	r1, r7
 8009576:	4630      	mov	r0, r6
 8009578:	eb04 0903 	add.w	r9, r4, r3
 800957c:	f000 fdfc 	bl	800a178 <_sbrk_r>
 8009580:	4581      	cmp	r9, r0
 8009582:	d142      	bne.n	800960a <_malloc_r+0xea>
 8009584:	6821      	ldr	r1, [r4, #0]
 8009586:	1a6d      	subs	r5, r5, r1
 8009588:	4629      	mov	r1, r5
 800958a:	4630      	mov	r0, r6
 800958c:	f7ff ffa6 	bl	80094dc <sbrk_aligned>
 8009590:	3001      	adds	r0, #1
 8009592:	d03a      	beq.n	800960a <_malloc_r+0xea>
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	442b      	add	r3, r5
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	f8d8 3000 	ldr.w	r3, [r8]
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	bb62      	cbnz	r2, 80095fc <_malloc_r+0xdc>
 80095a2:	f8c8 7000 	str.w	r7, [r8]
 80095a6:	e00f      	b.n	80095c8 <_malloc_r+0xa8>
 80095a8:	6822      	ldr	r2, [r4, #0]
 80095aa:	1b52      	subs	r2, r2, r5
 80095ac:	d420      	bmi.n	80095f0 <_malloc_r+0xd0>
 80095ae:	2a0b      	cmp	r2, #11
 80095b0:	d917      	bls.n	80095e2 <_malloc_r+0xc2>
 80095b2:	1961      	adds	r1, r4, r5
 80095b4:	42a3      	cmp	r3, r4
 80095b6:	6025      	str	r5, [r4, #0]
 80095b8:	bf18      	it	ne
 80095ba:	6059      	strne	r1, [r3, #4]
 80095bc:	6863      	ldr	r3, [r4, #4]
 80095be:	bf08      	it	eq
 80095c0:	f8c8 1000 	streq.w	r1, [r8]
 80095c4:	5162      	str	r2, [r4, r5]
 80095c6:	604b      	str	r3, [r1, #4]
 80095c8:	4630      	mov	r0, r6
 80095ca:	f000 f82f 	bl	800962c <__malloc_unlock>
 80095ce:	f104 000b 	add.w	r0, r4, #11
 80095d2:	1d23      	adds	r3, r4, #4
 80095d4:	f020 0007 	bic.w	r0, r0, #7
 80095d8:	1ac2      	subs	r2, r0, r3
 80095da:	bf1c      	itt	ne
 80095dc:	1a1b      	subne	r3, r3, r0
 80095de:	50a3      	strne	r3, [r4, r2]
 80095e0:	e7af      	b.n	8009542 <_malloc_r+0x22>
 80095e2:	6862      	ldr	r2, [r4, #4]
 80095e4:	42a3      	cmp	r3, r4
 80095e6:	bf0c      	ite	eq
 80095e8:	f8c8 2000 	streq.w	r2, [r8]
 80095ec:	605a      	strne	r2, [r3, #4]
 80095ee:	e7eb      	b.n	80095c8 <_malloc_r+0xa8>
 80095f0:	4623      	mov	r3, r4
 80095f2:	6864      	ldr	r4, [r4, #4]
 80095f4:	e7ae      	b.n	8009554 <_malloc_r+0x34>
 80095f6:	463c      	mov	r4, r7
 80095f8:	687f      	ldr	r7, [r7, #4]
 80095fa:	e7b6      	b.n	800956a <_malloc_r+0x4a>
 80095fc:	461a      	mov	r2, r3
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	42a3      	cmp	r3, r4
 8009602:	d1fb      	bne.n	80095fc <_malloc_r+0xdc>
 8009604:	2300      	movs	r3, #0
 8009606:	6053      	str	r3, [r2, #4]
 8009608:	e7de      	b.n	80095c8 <_malloc_r+0xa8>
 800960a:	230c      	movs	r3, #12
 800960c:	6033      	str	r3, [r6, #0]
 800960e:	4630      	mov	r0, r6
 8009610:	f000 f80c 	bl	800962c <__malloc_unlock>
 8009614:	e794      	b.n	8009540 <_malloc_r+0x20>
 8009616:	6005      	str	r5, [r0, #0]
 8009618:	e7d6      	b.n	80095c8 <_malloc_r+0xa8>
 800961a:	bf00      	nop
 800961c:	20000718 	.word	0x20000718

08009620 <__malloc_lock>:
 8009620:	4801      	ldr	r0, [pc, #4]	@ (8009628 <__malloc_lock+0x8>)
 8009622:	f7ff b8ba 	b.w	800879a <__retarget_lock_acquire_recursive>
 8009626:	bf00      	nop
 8009628:	20000710 	.word	0x20000710

0800962c <__malloc_unlock>:
 800962c:	4801      	ldr	r0, [pc, #4]	@ (8009634 <__malloc_unlock+0x8>)
 800962e:	f7ff b8b5 	b.w	800879c <__retarget_lock_release_recursive>
 8009632:	bf00      	nop
 8009634:	20000710 	.word	0x20000710

08009638 <_Balloc>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	69c6      	ldr	r6, [r0, #28]
 800963c:	4604      	mov	r4, r0
 800963e:	460d      	mov	r5, r1
 8009640:	b976      	cbnz	r6, 8009660 <_Balloc+0x28>
 8009642:	2010      	movs	r0, #16
 8009644:	f7ff ff42 	bl	80094cc <malloc>
 8009648:	4602      	mov	r2, r0
 800964a:	61e0      	str	r0, [r4, #28]
 800964c:	b920      	cbnz	r0, 8009658 <_Balloc+0x20>
 800964e:	4b18      	ldr	r3, [pc, #96]	@ (80096b0 <_Balloc+0x78>)
 8009650:	4818      	ldr	r0, [pc, #96]	@ (80096b4 <_Balloc+0x7c>)
 8009652:	216b      	movs	r1, #107	@ 0x6b
 8009654:	f000 fdae 	bl	800a1b4 <__assert_func>
 8009658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800965c:	6006      	str	r6, [r0, #0]
 800965e:	60c6      	str	r6, [r0, #12]
 8009660:	69e6      	ldr	r6, [r4, #28]
 8009662:	68f3      	ldr	r3, [r6, #12]
 8009664:	b183      	cbz	r3, 8009688 <_Balloc+0x50>
 8009666:	69e3      	ldr	r3, [r4, #28]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800966e:	b9b8      	cbnz	r0, 80096a0 <_Balloc+0x68>
 8009670:	2101      	movs	r1, #1
 8009672:	fa01 f605 	lsl.w	r6, r1, r5
 8009676:	1d72      	adds	r2, r6, #5
 8009678:	0092      	lsls	r2, r2, #2
 800967a:	4620      	mov	r0, r4
 800967c:	f000 fdb8 	bl	800a1f0 <_calloc_r>
 8009680:	b160      	cbz	r0, 800969c <_Balloc+0x64>
 8009682:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009686:	e00e      	b.n	80096a6 <_Balloc+0x6e>
 8009688:	2221      	movs	r2, #33	@ 0x21
 800968a:	2104      	movs	r1, #4
 800968c:	4620      	mov	r0, r4
 800968e:	f000 fdaf 	bl	800a1f0 <_calloc_r>
 8009692:	69e3      	ldr	r3, [r4, #28]
 8009694:	60f0      	str	r0, [r6, #12]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1e4      	bne.n	8009666 <_Balloc+0x2e>
 800969c:	2000      	movs	r0, #0
 800969e:	bd70      	pop	{r4, r5, r6, pc}
 80096a0:	6802      	ldr	r2, [r0, #0]
 80096a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096a6:	2300      	movs	r3, #0
 80096a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096ac:	e7f7      	b.n	800969e <_Balloc+0x66>
 80096ae:	bf00      	nop
 80096b0:	0800b1d1 	.word	0x0800b1d1
 80096b4:	0800b251 	.word	0x0800b251

080096b8 <_Bfree>:
 80096b8:	b570      	push	{r4, r5, r6, lr}
 80096ba:	69c6      	ldr	r6, [r0, #28]
 80096bc:	4605      	mov	r5, r0
 80096be:	460c      	mov	r4, r1
 80096c0:	b976      	cbnz	r6, 80096e0 <_Bfree+0x28>
 80096c2:	2010      	movs	r0, #16
 80096c4:	f7ff ff02 	bl	80094cc <malloc>
 80096c8:	4602      	mov	r2, r0
 80096ca:	61e8      	str	r0, [r5, #28]
 80096cc:	b920      	cbnz	r0, 80096d8 <_Bfree+0x20>
 80096ce:	4b09      	ldr	r3, [pc, #36]	@ (80096f4 <_Bfree+0x3c>)
 80096d0:	4809      	ldr	r0, [pc, #36]	@ (80096f8 <_Bfree+0x40>)
 80096d2:	218f      	movs	r1, #143	@ 0x8f
 80096d4:	f000 fd6e 	bl	800a1b4 <__assert_func>
 80096d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096dc:	6006      	str	r6, [r0, #0]
 80096de:	60c6      	str	r6, [r0, #12]
 80096e0:	b13c      	cbz	r4, 80096f2 <_Bfree+0x3a>
 80096e2:	69eb      	ldr	r3, [r5, #28]
 80096e4:	6862      	ldr	r2, [r4, #4]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096ec:	6021      	str	r1, [r4, #0]
 80096ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096f2:	bd70      	pop	{r4, r5, r6, pc}
 80096f4:	0800b1d1 	.word	0x0800b1d1
 80096f8:	0800b251 	.word	0x0800b251

080096fc <__multadd>:
 80096fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009700:	690d      	ldr	r5, [r1, #16]
 8009702:	4607      	mov	r7, r0
 8009704:	460c      	mov	r4, r1
 8009706:	461e      	mov	r6, r3
 8009708:	f101 0c14 	add.w	ip, r1, #20
 800970c:	2000      	movs	r0, #0
 800970e:	f8dc 3000 	ldr.w	r3, [ip]
 8009712:	b299      	uxth	r1, r3
 8009714:	fb02 6101 	mla	r1, r2, r1, r6
 8009718:	0c1e      	lsrs	r6, r3, #16
 800971a:	0c0b      	lsrs	r3, r1, #16
 800971c:	fb02 3306 	mla	r3, r2, r6, r3
 8009720:	b289      	uxth	r1, r1
 8009722:	3001      	adds	r0, #1
 8009724:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009728:	4285      	cmp	r5, r0
 800972a:	f84c 1b04 	str.w	r1, [ip], #4
 800972e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009732:	dcec      	bgt.n	800970e <__multadd+0x12>
 8009734:	b30e      	cbz	r6, 800977a <__multadd+0x7e>
 8009736:	68a3      	ldr	r3, [r4, #8]
 8009738:	42ab      	cmp	r3, r5
 800973a:	dc19      	bgt.n	8009770 <__multadd+0x74>
 800973c:	6861      	ldr	r1, [r4, #4]
 800973e:	4638      	mov	r0, r7
 8009740:	3101      	adds	r1, #1
 8009742:	f7ff ff79 	bl	8009638 <_Balloc>
 8009746:	4680      	mov	r8, r0
 8009748:	b928      	cbnz	r0, 8009756 <__multadd+0x5a>
 800974a:	4602      	mov	r2, r0
 800974c:	4b0c      	ldr	r3, [pc, #48]	@ (8009780 <__multadd+0x84>)
 800974e:	480d      	ldr	r0, [pc, #52]	@ (8009784 <__multadd+0x88>)
 8009750:	21ba      	movs	r1, #186	@ 0xba
 8009752:	f000 fd2f 	bl	800a1b4 <__assert_func>
 8009756:	6922      	ldr	r2, [r4, #16]
 8009758:	3202      	adds	r2, #2
 800975a:	f104 010c 	add.w	r1, r4, #12
 800975e:	0092      	lsls	r2, r2, #2
 8009760:	300c      	adds	r0, #12
 8009762:	f000 fd19 	bl	800a198 <memcpy>
 8009766:	4621      	mov	r1, r4
 8009768:	4638      	mov	r0, r7
 800976a:	f7ff ffa5 	bl	80096b8 <_Bfree>
 800976e:	4644      	mov	r4, r8
 8009770:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009774:	3501      	adds	r5, #1
 8009776:	615e      	str	r6, [r3, #20]
 8009778:	6125      	str	r5, [r4, #16]
 800977a:	4620      	mov	r0, r4
 800977c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009780:	0800b240 	.word	0x0800b240
 8009784:	0800b251 	.word	0x0800b251

08009788 <__hi0bits>:
 8009788:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800978c:	4603      	mov	r3, r0
 800978e:	bf36      	itet	cc
 8009790:	0403      	lslcc	r3, r0, #16
 8009792:	2000      	movcs	r0, #0
 8009794:	2010      	movcc	r0, #16
 8009796:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800979a:	bf3c      	itt	cc
 800979c:	021b      	lslcc	r3, r3, #8
 800979e:	3008      	addcc	r0, #8
 80097a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097a4:	bf3c      	itt	cc
 80097a6:	011b      	lslcc	r3, r3, #4
 80097a8:	3004      	addcc	r0, #4
 80097aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ae:	bf3c      	itt	cc
 80097b0:	009b      	lslcc	r3, r3, #2
 80097b2:	3002      	addcc	r0, #2
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	db05      	blt.n	80097c4 <__hi0bits+0x3c>
 80097b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80097bc:	f100 0001 	add.w	r0, r0, #1
 80097c0:	bf08      	it	eq
 80097c2:	2020      	moveq	r0, #32
 80097c4:	4770      	bx	lr

080097c6 <__lo0bits>:
 80097c6:	6803      	ldr	r3, [r0, #0]
 80097c8:	4602      	mov	r2, r0
 80097ca:	f013 0007 	ands.w	r0, r3, #7
 80097ce:	d00b      	beq.n	80097e8 <__lo0bits+0x22>
 80097d0:	07d9      	lsls	r1, r3, #31
 80097d2:	d421      	bmi.n	8009818 <__lo0bits+0x52>
 80097d4:	0798      	lsls	r0, r3, #30
 80097d6:	bf49      	itett	mi
 80097d8:	085b      	lsrmi	r3, r3, #1
 80097da:	089b      	lsrpl	r3, r3, #2
 80097dc:	2001      	movmi	r0, #1
 80097de:	6013      	strmi	r3, [r2, #0]
 80097e0:	bf5c      	itt	pl
 80097e2:	6013      	strpl	r3, [r2, #0]
 80097e4:	2002      	movpl	r0, #2
 80097e6:	4770      	bx	lr
 80097e8:	b299      	uxth	r1, r3
 80097ea:	b909      	cbnz	r1, 80097f0 <__lo0bits+0x2a>
 80097ec:	0c1b      	lsrs	r3, r3, #16
 80097ee:	2010      	movs	r0, #16
 80097f0:	b2d9      	uxtb	r1, r3
 80097f2:	b909      	cbnz	r1, 80097f8 <__lo0bits+0x32>
 80097f4:	3008      	adds	r0, #8
 80097f6:	0a1b      	lsrs	r3, r3, #8
 80097f8:	0719      	lsls	r1, r3, #28
 80097fa:	bf04      	itt	eq
 80097fc:	091b      	lsreq	r3, r3, #4
 80097fe:	3004      	addeq	r0, #4
 8009800:	0799      	lsls	r1, r3, #30
 8009802:	bf04      	itt	eq
 8009804:	089b      	lsreq	r3, r3, #2
 8009806:	3002      	addeq	r0, #2
 8009808:	07d9      	lsls	r1, r3, #31
 800980a:	d403      	bmi.n	8009814 <__lo0bits+0x4e>
 800980c:	085b      	lsrs	r3, r3, #1
 800980e:	f100 0001 	add.w	r0, r0, #1
 8009812:	d003      	beq.n	800981c <__lo0bits+0x56>
 8009814:	6013      	str	r3, [r2, #0]
 8009816:	4770      	bx	lr
 8009818:	2000      	movs	r0, #0
 800981a:	4770      	bx	lr
 800981c:	2020      	movs	r0, #32
 800981e:	4770      	bx	lr

08009820 <__i2b>:
 8009820:	b510      	push	{r4, lr}
 8009822:	460c      	mov	r4, r1
 8009824:	2101      	movs	r1, #1
 8009826:	f7ff ff07 	bl	8009638 <_Balloc>
 800982a:	4602      	mov	r2, r0
 800982c:	b928      	cbnz	r0, 800983a <__i2b+0x1a>
 800982e:	4b05      	ldr	r3, [pc, #20]	@ (8009844 <__i2b+0x24>)
 8009830:	4805      	ldr	r0, [pc, #20]	@ (8009848 <__i2b+0x28>)
 8009832:	f240 1145 	movw	r1, #325	@ 0x145
 8009836:	f000 fcbd 	bl	800a1b4 <__assert_func>
 800983a:	2301      	movs	r3, #1
 800983c:	6144      	str	r4, [r0, #20]
 800983e:	6103      	str	r3, [r0, #16]
 8009840:	bd10      	pop	{r4, pc}
 8009842:	bf00      	nop
 8009844:	0800b240 	.word	0x0800b240
 8009848:	0800b251 	.word	0x0800b251

0800984c <__multiply>:
 800984c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009850:	4614      	mov	r4, r2
 8009852:	690a      	ldr	r2, [r1, #16]
 8009854:	6923      	ldr	r3, [r4, #16]
 8009856:	429a      	cmp	r2, r3
 8009858:	bfa8      	it	ge
 800985a:	4623      	movge	r3, r4
 800985c:	460f      	mov	r7, r1
 800985e:	bfa4      	itt	ge
 8009860:	460c      	movge	r4, r1
 8009862:	461f      	movge	r7, r3
 8009864:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009868:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800986c:	68a3      	ldr	r3, [r4, #8]
 800986e:	6861      	ldr	r1, [r4, #4]
 8009870:	eb0a 0609 	add.w	r6, sl, r9
 8009874:	42b3      	cmp	r3, r6
 8009876:	b085      	sub	sp, #20
 8009878:	bfb8      	it	lt
 800987a:	3101      	addlt	r1, #1
 800987c:	f7ff fedc 	bl	8009638 <_Balloc>
 8009880:	b930      	cbnz	r0, 8009890 <__multiply+0x44>
 8009882:	4602      	mov	r2, r0
 8009884:	4b44      	ldr	r3, [pc, #272]	@ (8009998 <__multiply+0x14c>)
 8009886:	4845      	ldr	r0, [pc, #276]	@ (800999c <__multiply+0x150>)
 8009888:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800988c:	f000 fc92 	bl	800a1b4 <__assert_func>
 8009890:	f100 0514 	add.w	r5, r0, #20
 8009894:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009898:	462b      	mov	r3, r5
 800989a:	2200      	movs	r2, #0
 800989c:	4543      	cmp	r3, r8
 800989e:	d321      	bcc.n	80098e4 <__multiply+0x98>
 80098a0:	f107 0114 	add.w	r1, r7, #20
 80098a4:	f104 0214 	add.w	r2, r4, #20
 80098a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80098ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80098b0:	9302      	str	r3, [sp, #8]
 80098b2:	1b13      	subs	r3, r2, r4
 80098b4:	3b15      	subs	r3, #21
 80098b6:	f023 0303 	bic.w	r3, r3, #3
 80098ba:	3304      	adds	r3, #4
 80098bc:	f104 0715 	add.w	r7, r4, #21
 80098c0:	42ba      	cmp	r2, r7
 80098c2:	bf38      	it	cc
 80098c4:	2304      	movcc	r3, #4
 80098c6:	9301      	str	r3, [sp, #4]
 80098c8:	9b02      	ldr	r3, [sp, #8]
 80098ca:	9103      	str	r1, [sp, #12]
 80098cc:	428b      	cmp	r3, r1
 80098ce:	d80c      	bhi.n	80098ea <__multiply+0x9e>
 80098d0:	2e00      	cmp	r6, #0
 80098d2:	dd03      	ble.n	80098dc <__multiply+0x90>
 80098d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d05b      	beq.n	8009994 <__multiply+0x148>
 80098dc:	6106      	str	r6, [r0, #16]
 80098de:	b005      	add	sp, #20
 80098e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e4:	f843 2b04 	str.w	r2, [r3], #4
 80098e8:	e7d8      	b.n	800989c <__multiply+0x50>
 80098ea:	f8b1 a000 	ldrh.w	sl, [r1]
 80098ee:	f1ba 0f00 	cmp.w	sl, #0
 80098f2:	d024      	beq.n	800993e <__multiply+0xf2>
 80098f4:	f104 0e14 	add.w	lr, r4, #20
 80098f8:	46a9      	mov	r9, r5
 80098fa:	f04f 0c00 	mov.w	ip, #0
 80098fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009902:	f8d9 3000 	ldr.w	r3, [r9]
 8009906:	fa1f fb87 	uxth.w	fp, r7
 800990a:	b29b      	uxth	r3, r3
 800990c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009910:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009914:	f8d9 7000 	ldr.w	r7, [r9]
 8009918:	4463      	add	r3, ip
 800991a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800991e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009922:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009926:	b29b      	uxth	r3, r3
 8009928:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800992c:	4572      	cmp	r2, lr
 800992e:	f849 3b04 	str.w	r3, [r9], #4
 8009932:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009936:	d8e2      	bhi.n	80098fe <__multiply+0xb2>
 8009938:	9b01      	ldr	r3, [sp, #4]
 800993a:	f845 c003 	str.w	ip, [r5, r3]
 800993e:	9b03      	ldr	r3, [sp, #12]
 8009940:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009944:	3104      	adds	r1, #4
 8009946:	f1b9 0f00 	cmp.w	r9, #0
 800994a:	d021      	beq.n	8009990 <__multiply+0x144>
 800994c:	682b      	ldr	r3, [r5, #0]
 800994e:	f104 0c14 	add.w	ip, r4, #20
 8009952:	46ae      	mov	lr, r5
 8009954:	f04f 0a00 	mov.w	sl, #0
 8009958:	f8bc b000 	ldrh.w	fp, [ip]
 800995c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009960:	fb09 770b 	mla	r7, r9, fp, r7
 8009964:	4457      	add	r7, sl
 8009966:	b29b      	uxth	r3, r3
 8009968:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800996c:	f84e 3b04 	str.w	r3, [lr], #4
 8009970:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009974:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009978:	f8be 3000 	ldrh.w	r3, [lr]
 800997c:	fb09 330a 	mla	r3, r9, sl, r3
 8009980:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009984:	4562      	cmp	r2, ip
 8009986:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800998a:	d8e5      	bhi.n	8009958 <__multiply+0x10c>
 800998c:	9f01      	ldr	r7, [sp, #4]
 800998e:	51eb      	str	r3, [r5, r7]
 8009990:	3504      	adds	r5, #4
 8009992:	e799      	b.n	80098c8 <__multiply+0x7c>
 8009994:	3e01      	subs	r6, #1
 8009996:	e79b      	b.n	80098d0 <__multiply+0x84>
 8009998:	0800b240 	.word	0x0800b240
 800999c:	0800b251 	.word	0x0800b251

080099a0 <__pow5mult>:
 80099a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099a4:	4615      	mov	r5, r2
 80099a6:	f012 0203 	ands.w	r2, r2, #3
 80099aa:	4607      	mov	r7, r0
 80099ac:	460e      	mov	r6, r1
 80099ae:	d007      	beq.n	80099c0 <__pow5mult+0x20>
 80099b0:	4c25      	ldr	r4, [pc, #148]	@ (8009a48 <__pow5mult+0xa8>)
 80099b2:	3a01      	subs	r2, #1
 80099b4:	2300      	movs	r3, #0
 80099b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099ba:	f7ff fe9f 	bl	80096fc <__multadd>
 80099be:	4606      	mov	r6, r0
 80099c0:	10ad      	asrs	r5, r5, #2
 80099c2:	d03d      	beq.n	8009a40 <__pow5mult+0xa0>
 80099c4:	69fc      	ldr	r4, [r7, #28]
 80099c6:	b97c      	cbnz	r4, 80099e8 <__pow5mult+0x48>
 80099c8:	2010      	movs	r0, #16
 80099ca:	f7ff fd7f 	bl	80094cc <malloc>
 80099ce:	4602      	mov	r2, r0
 80099d0:	61f8      	str	r0, [r7, #28]
 80099d2:	b928      	cbnz	r0, 80099e0 <__pow5mult+0x40>
 80099d4:	4b1d      	ldr	r3, [pc, #116]	@ (8009a4c <__pow5mult+0xac>)
 80099d6:	481e      	ldr	r0, [pc, #120]	@ (8009a50 <__pow5mult+0xb0>)
 80099d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80099dc:	f000 fbea 	bl	800a1b4 <__assert_func>
 80099e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099e4:	6004      	str	r4, [r0, #0]
 80099e6:	60c4      	str	r4, [r0, #12]
 80099e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80099ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099f0:	b94c      	cbnz	r4, 8009a06 <__pow5mult+0x66>
 80099f2:	f240 2171 	movw	r1, #625	@ 0x271
 80099f6:	4638      	mov	r0, r7
 80099f8:	f7ff ff12 	bl	8009820 <__i2b>
 80099fc:	2300      	movs	r3, #0
 80099fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a02:	4604      	mov	r4, r0
 8009a04:	6003      	str	r3, [r0, #0]
 8009a06:	f04f 0900 	mov.w	r9, #0
 8009a0a:	07eb      	lsls	r3, r5, #31
 8009a0c:	d50a      	bpl.n	8009a24 <__pow5mult+0x84>
 8009a0e:	4631      	mov	r1, r6
 8009a10:	4622      	mov	r2, r4
 8009a12:	4638      	mov	r0, r7
 8009a14:	f7ff ff1a 	bl	800984c <__multiply>
 8009a18:	4631      	mov	r1, r6
 8009a1a:	4680      	mov	r8, r0
 8009a1c:	4638      	mov	r0, r7
 8009a1e:	f7ff fe4b 	bl	80096b8 <_Bfree>
 8009a22:	4646      	mov	r6, r8
 8009a24:	106d      	asrs	r5, r5, #1
 8009a26:	d00b      	beq.n	8009a40 <__pow5mult+0xa0>
 8009a28:	6820      	ldr	r0, [r4, #0]
 8009a2a:	b938      	cbnz	r0, 8009a3c <__pow5mult+0x9c>
 8009a2c:	4622      	mov	r2, r4
 8009a2e:	4621      	mov	r1, r4
 8009a30:	4638      	mov	r0, r7
 8009a32:	f7ff ff0b 	bl	800984c <__multiply>
 8009a36:	6020      	str	r0, [r4, #0]
 8009a38:	f8c0 9000 	str.w	r9, [r0]
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	e7e4      	b.n	8009a0a <__pow5mult+0x6a>
 8009a40:	4630      	mov	r0, r6
 8009a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a46:	bf00      	nop
 8009a48:	0800b2ac 	.word	0x0800b2ac
 8009a4c:	0800b1d1 	.word	0x0800b1d1
 8009a50:	0800b251 	.word	0x0800b251

08009a54 <__lshift>:
 8009a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a58:	460c      	mov	r4, r1
 8009a5a:	6849      	ldr	r1, [r1, #4]
 8009a5c:	6923      	ldr	r3, [r4, #16]
 8009a5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a62:	68a3      	ldr	r3, [r4, #8]
 8009a64:	4607      	mov	r7, r0
 8009a66:	4691      	mov	r9, r2
 8009a68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a6c:	f108 0601 	add.w	r6, r8, #1
 8009a70:	42b3      	cmp	r3, r6
 8009a72:	db0b      	blt.n	8009a8c <__lshift+0x38>
 8009a74:	4638      	mov	r0, r7
 8009a76:	f7ff fddf 	bl	8009638 <_Balloc>
 8009a7a:	4605      	mov	r5, r0
 8009a7c:	b948      	cbnz	r0, 8009a92 <__lshift+0x3e>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	4b28      	ldr	r3, [pc, #160]	@ (8009b24 <__lshift+0xd0>)
 8009a82:	4829      	ldr	r0, [pc, #164]	@ (8009b28 <__lshift+0xd4>)
 8009a84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009a88:	f000 fb94 	bl	800a1b4 <__assert_func>
 8009a8c:	3101      	adds	r1, #1
 8009a8e:	005b      	lsls	r3, r3, #1
 8009a90:	e7ee      	b.n	8009a70 <__lshift+0x1c>
 8009a92:	2300      	movs	r3, #0
 8009a94:	f100 0114 	add.w	r1, r0, #20
 8009a98:	f100 0210 	add.w	r2, r0, #16
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	4553      	cmp	r3, sl
 8009aa0:	db33      	blt.n	8009b0a <__lshift+0xb6>
 8009aa2:	6920      	ldr	r0, [r4, #16]
 8009aa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009aa8:	f104 0314 	add.w	r3, r4, #20
 8009aac:	f019 091f 	ands.w	r9, r9, #31
 8009ab0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ab4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ab8:	d02b      	beq.n	8009b12 <__lshift+0xbe>
 8009aba:	f1c9 0e20 	rsb	lr, r9, #32
 8009abe:	468a      	mov	sl, r1
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	6818      	ldr	r0, [r3, #0]
 8009ac4:	fa00 f009 	lsl.w	r0, r0, r9
 8009ac8:	4310      	orrs	r0, r2
 8009aca:	f84a 0b04 	str.w	r0, [sl], #4
 8009ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ad2:	459c      	cmp	ip, r3
 8009ad4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ad8:	d8f3      	bhi.n	8009ac2 <__lshift+0x6e>
 8009ada:	ebac 0304 	sub.w	r3, ip, r4
 8009ade:	3b15      	subs	r3, #21
 8009ae0:	f023 0303 	bic.w	r3, r3, #3
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	f104 0015 	add.w	r0, r4, #21
 8009aea:	4584      	cmp	ip, r0
 8009aec:	bf38      	it	cc
 8009aee:	2304      	movcc	r3, #4
 8009af0:	50ca      	str	r2, [r1, r3]
 8009af2:	b10a      	cbz	r2, 8009af8 <__lshift+0xa4>
 8009af4:	f108 0602 	add.w	r6, r8, #2
 8009af8:	3e01      	subs	r6, #1
 8009afa:	4638      	mov	r0, r7
 8009afc:	612e      	str	r6, [r5, #16]
 8009afe:	4621      	mov	r1, r4
 8009b00:	f7ff fdda 	bl	80096b8 <_Bfree>
 8009b04:	4628      	mov	r0, r5
 8009b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b0e:	3301      	adds	r3, #1
 8009b10:	e7c5      	b.n	8009a9e <__lshift+0x4a>
 8009b12:	3904      	subs	r1, #4
 8009b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b18:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b1c:	459c      	cmp	ip, r3
 8009b1e:	d8f9      	bhi.n	8009b14 <__lshift+0xc0>
 8009b20:	e7ea      	b.n	8009af8 <__lshift+0xa4>
 8009b22:	bf00      	nop
 8009b24:	0800b240 	.word	0x0800b240
 8009b28:	0800b251 	.word	0x0800b251

08009b2c <__mcmp>:
 8009b2c:	690a      	ldr	r2, [r1, #16]
 8009b2e:	4603      	mov	r3, r0
 8009b30:	6900      	ldr	r0, [r0, #16]
 8009b32:	1a80      	subs	r0, r0, r2
 8009b34:	b530      	push	{r4, r5, lr}
 8009b36:	d10e      	bne.n	8009b56 <__mcmp+0x2a>
 8009b38:	3314      	adds	r3, #20
 8009b3a:	3114      	adds	r1, #20
 8009b3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009b44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b4c:	4295      	cmp	r5, r2
 8009b4e:	d003      	beq.n	8009b58 <__mcmp+0x2c>
 8009b50:	d205      	bcs.n	8009b5e <__mcmp+0x32>
 8009b52:	f04f 30ff 	mov.w	r0, #4294967295
 8009b56:	bd30      	pop	{r4, r5, pc}
 8009b58:	42a3      	cmp	r3, r4
 8009b5a:	d3f3      	bcc.n	8009b44 <__mcmp+0x18>
 8009b5c:	e7fb      	b.n	8009b56 <__mcmp+0x2a>
 8009b5e:	2001      	movs	r0, #1
 8009b60:	e7f9      	b.n	8009b56 <__mcmp+0x2a>
	...

08009b64 <__mdiff>:
 8009b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b68:	4689      	mov	r9, r1
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	4611      	mov	r1, r2
 8009b6e:	4648      	mov	r0, r9
 8009b70:	4614      	mov	r4, r2
 8009b72:	f7ff ffdb 	bl	8009b2c <__mcmp>
 8009b76:	1e05      	subs	r5, r0, #0
 8009b78:	d112      	bne.n	8009ba0 <__mdiff+0x3c>
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	f7ff fd5b 	bl	8009638 <_Balloc>
 8009b82:	4602      	mov	r2, r0
 8009b84:	b928      	cbnz	r0, 8009b92 <__mdiff+0x2e>
 8009b86:	4b3f      	ldr	r3, [pc, #252]	@ (8009c84 <__mdiff+0x120>)
 8009b88:	f240 2137 	movw	r1, #567	@ 0x237
 8009b8c:	483e      	ldr	r0, [pc, #248]	@ (8009c88 <__mdiff+0x124>)
 8009b8e:	f000 fb11 	bl	800a1b4 <__assert_func>
 8009b92:	2301      	movs	r3, #1
 8009b94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b98:	4610      	mov	r0, r2
 8009b9a:	b003      	add	sp, #12
 8009b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba0:	bfbc      	itt	lt
 8009ba2:	464b      	movlt	r3, r9
 8009ba4:	46a1      	movlt	r9, r4
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009bac:	bfba      	itte	lt
 8009bae:	461c      	movlt	r4, r3
 8009bb0:	2501      	movlt	r5, #1
 8009bb2:	2500      	movge	r5, #0
 8009bb4:	f7ff fd40 	bl	8009638 <_Balloc>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	b918      	cbnz	r0, 8009bc4 <__mdiff+0x60>
 8009bbc:	4b31      	ldr	r3, [pc, #196]	@ (8009c84 <__mdiff+0x120>)
 8009bbe:	f240 2145 	movw	r1, #581	@ 0x245
 8009bc2:	e7e3      	b.n	8009b8c <__mdiff+0x28>
 8009bc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009bc8:	6926      	ldr	r6, [r4, #16]
 8009bca:	60c5      	str	r5, [r0, #12]
 8009bcc:	f109 0310 	add.w	r3, r9, #16
 8009bd0:	f109 0514 	add.w	r5, r9, #20
 8009bd4:	f104 0e14 	add.w	lr, r4, #20
 8009bd8:	f100 0b14 	add.w	fp, r0, #20
 8009bdc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009be0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009be4:	9301      	str	r3, [sp, #4]
 8009be6:	46d9      	mov	r9, fp
 8009be8:	f04f 0c00 	mov.w	ip, #0
 8009bec:	9b01      	ldr	r3, [sp, #4]
 8009bee:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009bf2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009bf6:	9301      	str	r3, [sp, #4]
 8009bf8:	fa1f f38a 	uxth.w	r3, sl
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	b283      	uxth	r3, r0
 8009c00:	1acb      	subs	r3, r1, r3
 8009c02:	0c00      	lsrs	r0, r0, #16
 8009c04:	4463      	add	r3, ip
 8009c06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009c0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009c14:	4576      	cmp	r6, lr
 8009c16:	f849 3b04 	str.w	r3, [r9], #4
 8009c1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c1e:	d8e5      	bhi.n	8009bec <__mdiff+0x88>
 8009c20:	1b33      	subs	r3, r6, r4
 8009c22:	3b15      	subs	r3, #21
 8009c24:	f023 0303 	bic.w	r3, r3, #3
 8009c28:	3415      	adds	r4, #21
 8009c2a:	3304      	adds	r3, #4
 8009c2c:	42a6      	cmp	r6, r4
 8009c2e:	bf38      	it	cc
 8009c30:	2304      	movcc	r3, #4
 8009c32:	441d      	add	r5, r3
 8009c34:	445b      	add	r3, fp
 8009c36:	461e      	mov	r6, r3
 8009c38:	462c      	mov	r4, r5
 8009c3a:	4544      	cmp	r4, r8
 8009c3c:	d30e      	bcc.n	8009c5c <__mdiff+0xf8>
 8009c3e:	f108 0103 	add.w	r1, r8, #3
 8009c42:	1b49      	subs	r1, r1, r5
 8009c44:	f021 0103 	bic.w	r1, r1, #3
 8009c48:	3d03      	subs	r5, #3
 8009c4a:	45a8      	cmp	r8, r5
 8009c4c:	bf38      	it	cc
 8009c4e:	2100      	movcc	r1, #0
 8009c50:	440b      	add	r3, r1
 8009c52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c56:	b191      	cbz	r1, 8009c7e <__mdiff+0x11a>
 8009c58:	6117      	str	r7, [r2, #16]
 8009c5a:	e79d      	b.n	8009b98 <__mdiff+0x34>
 8009c5c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009c60:	46e6      	mov	lr, ip
 8009c62:	0c08      	lsrs	r0, r1, #16
 8009c64:	fa1c fc81 	uxtah	ip, ip, r1
 8009c68:	4471      	add	r1, lr
 8009c6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009c6e:	b289      	uxth	r1, r1
 8009c70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009c74:	f846 1b04 	str.w	r1, [r6], #4
 8009c78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c7c:	e7dd      	b.n	8009c3a <__mdiff+0xd6>
 8009c7e:	3f01      	subs	r7, #1
 8009c80:	e7e7      	b.n	8009c52 <__mdiff+0xee>
 8009c82:	bf00      	nop
 8009c84:	0800b240 	.word	0x0800b240
 8009c88:	0800b251 	.word	0x0800b251

08009c8c <__d2b>:
 8009c8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c90:	460f      	mov	r7, r1
 8009c92:	2101      	movs	r1, #1
 8009c94:	ec59 8b10 	vmov	r8, r9, d0
 8009c98:	4616      	mov	r6, r2
 8009c9a:	f7ff fccd 	bl	8009638 <_Balloc>
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	b930      	cbnz	r0, 8009cb0 <__d2b+0x24>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	4b23      	ldr	r3, [pc, #140]	@ (8009d34 <__d2b+0xa8>)
 8009ca6:	4824      	ldr	r0, [pc, #144]	@ (8009d38 <__d2b+0xac>)
 8009ca8:	f240 310f 	movw	r1, #783	@ 0x30f
 8009cac:	f000 fa82 	bl	800a1b4 <__assert_func>
 8009cb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009cb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009cb8:	b10d      	cbz	r5, 8009cbe <__d2b+0x32>
 8009cba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cbe:	9301      	str	r3, [sp, #4]
 8009cc0:	f1b8 0300 	subs.w	r3, r8, #0
 8009cc4:	d023      	beq.n	8009d0e <__d2b+0x82>
 8009cc6:	4668      	mov	r0, sp
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	f7ff fd7c 	bl	80097c6 <__lo0bits>
 8009cce:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009cd2:	b1d0      	cbz	r0, 8009d0a <__d2b+0x7e>
 8009cd4:	f1c0 0320 	rsb	r3, r0, #32
 8009cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cdc:	430b      	orrs	r3, r1
 8009cde:	40c2      	lsrs	r2, r0
 8009ce0:	6163      	str	r3, [r4, #20]
 8009ce2:	9201      	str	r2, [sp, #4]
 8009ce4:	9b01      	ldr	r3, [sp, #4]
 8009ce6:	61a3      	str	r3, [r4, #24]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	bf0c      	ite	eq
 8009cec:	2201      	moveq	r2, #1
 8009cee:	2202      	movne	r2, #2
 8009cf0:	6122      	str	r2, [r4, #16]
 8009cf2:	b1a5      	cbz	r5, 8009d1e <__d2b+0x92>
 8009cf4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009cf8:	4405      	add	r5, r0
 8009cfa:	603d      	str	r5, [r7, #0]
 8009cfc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009d00:	6030      	str	r0, [r6, #0]
 8009d02:	4620      	mov	r0, r4
 8009d04:	b003      	add	sp, #12
 8009d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d0a:	6161      	str	r1, [r4, #20]
 8009d0c:	e7ea      	b.n	8009ce4 <__d2b+0x58>
 8009d0e:	a801      	add	r0, sp, #4
 8009d10:	f7ff fd59 	bl	80097c6 <__lo0bits>
 8009d14:	9b01      	ldr	r3, [sp, #4]
 8009d16:	6163      	str	r3, [r4, #20]
 8009d18:	3020      	adds	r0, #32
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	e7e8      	b.n	8009cf0 <__d2b+0x64>
 8009d1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009d26:	6038      	str	r0, [r7, #0]
 8009d28:	6918      	ldr	r0, [r3, #16]
 8009d2a:	f7ff fd2d 	bl	8009788 <__hi0bits>
 8009d2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d32:	e7e5      	b.n	8009d00 <__d2b+0x74>
 8009d34:	0800b240 	.word	0x0800b240
 8009d38:	0800b251 	.word	0x0800b251

08009d3c <__ssputs_r>:
 8009d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d40:	688e      	ldr	r6, [r1, #8]
 8009d42:	461f      	mov	r7, r3
 8009d44:	42be      	cmp	r6, r7
 8009d46:	680b      	ldr	r3, [r1, #0]
 8009d48:	4682      	mov	sl, r0
 8009d4a:	460c      	mov	r4, r1
 8009d4c:	4690      	mov	r8, r2
 8009d4e:	d82d      	bhi.n	8009dac <__ssputs_r+0x70>
 8009d50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009d58:	d026      	beq.n	8009da8 <__ssputs_r+0x6c>
 8009d5a:	6965      	ldr	r5, [r4, #20]
 8009d5c:	6909      	ldr	r1, [r1, #16]
 8009d5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d62:	eba3 0901 	sub.w	r9, r3, r1
 8009d66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d6a:	1c7b      	adds	r3, r7, #1
 8009d6c:	444b      	add	r3, r9
 8009d6e:	106d      	asrs	r5, r5, #1
 8009d70:	429d      	cmp	r5, r3
 8009d72:	bf38      	it	cc
 8009d74:	461d      	movcc	r5, r3
 8009d76:	0553      	lsls	r3, r2, #21
 8009d78:	d527      	bpl.n	8009dca <__ssputs_r+0x8e>
 8009d7a:	4629      	mov	r1, r5
 8009d7c:	f7ff fbd0 	bl	8009520 <_malloc_r>
 8009d80:	4606      	mov	r6, r0
 8009d82:	b360      	cbz	r0, 8009dde <__ssputs_r+0xa2>
 8009d84:	6921      	ldr	r1, [r4, #16]
 8009d86:	464a      	mov	r2, r9
 8009d88:	f000 fa06 	bl	800a198 <memcpy>
 8009d8c:	89a3      	ldrh	r3, [r4, #12]
 8009d8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d96:	81a3      	strh	r3, [r4, #12]
 8009d98:	6126      	str	r6, [r4, #16]
 8009d9a:	6165      	str	r5, [r4, #20]
 8009d9c:	444e      	add	r6, r9
 8009d9e:	eba5 0509 	sub.w	r5, r5, r9
 8009da2:	6026      	str	r6, [r4, #0]
 8009da4:	60a5      	str	r5, [r4, #8]
 8009da6:	463e      	mov	r6, r7
 8009da8:	42be      	cmp	r6, r7
 8009daa:	d900      	bls.n	8009dae <__ssputs_r+0x72>
 8009dac:	463e      	mov	r6, r7
 8009dae:	6820      	ldr	r0, [r4, #0]
 8009db0:	4632      	mov	r2, r6
 8009db2:	4641      	mov	r1, r8
 8009db4:	f000 f9c6 	bl	800a144 <memmove>
 8009db8:	68a3      	ldr	r3, [r4, #8]
 8009dba:	1b9b      	subs	r3, r3, r6
 8009dbc:	60a3      	str	r3, [r4, #8]
 8009dbe:	6823      	ldr	r3, [r4, #0]
 8009dc0:	4433      	add	r3, r6
 8009dc2:	6023      	str	r3, [r4, #0]
 8009dc4:	2000      	movs	r0, #0
 8009dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dca:	462a      	mov	r2, r5
 8009dcc:	f000 fa36 	bl	800a23c <_realloc_r>
 8009dd0:	4606      	mov	r6, r0
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	d1e0      	bne.n	8009d98 <__ssputs_r+0x5c>
 8009dd6:	6921      	ldr	r1, [r4, #16]
 8009dd8:	4650      	mov	r0, sl
 8009dda:	f7ff fb2d 	bl	8009438 <_free_r>
 8009dde:	230c      	movs	r3, #12
 8009de0:	f8ca 3000 	str.w	r3, [sl]
 8009de4:	89a3      	ldrh	r3, [r4, #12]
 8009de6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dea:	81a3      	strh	r3, [r4, #12]
 8009dec:	f04f 30ff 	mov.w	r0, #4294967295
 8009df0:	e7e9      	b.n	8009dc6 <__ssputs_r+0x8a>
	...

08009df4 <_svfiprintf_r>:
 8009df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df8:	4698      	mov	r8, r3
 8009dfa:	898b      	ldrh	r3, [r1, #12]
 8009dfc:	061b      	lsls	r3, r3, #24
 8009dfe:	b09d      	sub	sp, #116	@ 0x74
 8009e00:	4607      	mov	r7, r0
 8009e02:	460d      	mov	r5, r1
 8009e04:	4614      	mov	r4, r2
 8009e06:	d510      	bpl.n	8009e2a <_svfiprintf_r+0x36>
 8009e08:	690b      	ldr	r3, [r1, #16]
 8009e0a:	b973      	cbnz	r3, 8009e2a <_svfiprintf_r+0x36>
 8009e0c:	2140      	movs	r1, #64	@ 0x40
 8009e0e:	f7ff fb87 	bl	8009520 <_malloc_r>
 8009e12:	6028      	str	r0, [r5, #0]
 8009e14:	6128      	str	r0, [r5, #16]
 8009e16:	b930      	cbnz	r0, 8009e26 <_svfiprintf_r+0x32>
 8009e18:	230c      	movs	r3, #12
 8009e1a:	603b      	str	r3, [r7, #0]
 8009e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e20:	b01d      	add	sp, #116	@ 0x74
 8009e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e26:	2340      	movs	r3, #64	@ 0x40
 8009e28:	616b      	str	r3, [r5, #20]
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e2e:	2320      	movs	r3, #32
 8009e30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e34:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e38:	2330      	movs	r3, #48	@ 0x30
 8009e3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009fd8 <_svfiprintf_r+0x1e4>
 8009e3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e42:	f04f 0901 	mov.w	r9, #1
 8009e46:	4623      	mov	r3, r4
 8009e48:	469a      	mov	sl, r3
 8009e4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e4e:	b10a      	cbz	r2, 8009e54 <_svfiprintf_r+0x60>
 8009e50:	2a25      	cmp	r2, #37	@ 0x25
 8009e52:	d1f9      	bne.n	8009e48 <_svfiprintf_r+0x54>
 8009e54:	ebba 0b04 	subs.w	fp, sl, r4
 8009e58:	d00b      	beq.n	8009e72 <_svfiprintf_r+0x7e>
 8009e5a:	465b      	mov	r3, fp
 8009e5c:	4622      	mov	r2, r4
 8009e5e:	4629      	mov	r1, r5
 8009e60:	4638      	mov	r0, r7
 8009e62:	f7ff ff6b 	bl	8009d3c <__ssputs_r>
 8009e66:	3001      	adds	r0, #1
 8009e68:	f000 80a7 	beq.w	8009fba <_svfiprintf_r+0x1c6>
 8009e6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e6e:	445a      	add	r2, fp
 8009e70:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e72:	f89a 3000 	ldrb.w	r3, [sl]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f000 809f 	beq.w	8009fba <_svfiprintf_r+0x1c6>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e86:	f10a 0a01 	add.w	sl, sl, #1
 8009e8a:	9304      	str	r3, [sp, #16]
 8009e8c:	9307      	str	r3, [sp, #28]
 8009e8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e92:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e94:	4654      	mov	r4, sl
 8009e96:	2205      	movs	r2, #5
 8009e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e9c:	484e      	ldr	r0, [pc, #312]	@ (8009fd8 <_svfiprintf_r+0x1e4>)
 8009e9e:	f7f6 f9bf 	bl	8000220 <memchr>
 8009ea2:	9a04      	ldr	r2, [sp, #16]
 8009ea4:	b9d8      	cbnz	r0, 8009ede <_svfiprintf_r+0xea>
 8009ea6:	06d0      	lsls	r0, r2, #27
 8009ea8:	bf44      	itt	mi
 8009eaa:	2320      	movmi	r3, #32
 8009eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009eb0:	0711      	lsls	r1, r2, #28
 8009eb2:	bf44      	itt	mi
 8009eb4:	232b      	movmi	r3, #43	@ 0x2b
 8009eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009eba:	f89a 3000 	ldrb.w	r3, [sl]
 8009ebe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ec0:	d015      	beq.n	8009eee <_svfiprintf_r+0xfa>
 8009ec2:	9a07      	ldr	r2, [sp, #28]
 8009ec4:	4654      	mov	r4, sl
 8009ec6:	2000      	movs	r0, #0
 8009ec8:	f04f 0c0a 	mov.w	ip, #10
 8009ecc:	4621      	mov	r1, r4
 8009ece:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ed2:	3b30      	subs	r3, #48	@ 0x30
 8009ed4:	2b09      	cmp	r3, #9
 8009ed6:	d94b      	bls.n	8009f70 <_svfiprintf_r+0x17c>
 8009ed8:	b1b0      	cbz	r0, 8009f08 <_svfiprintf_r+0x114>
 8009eda:	9207      	str	r2, [sp, #28]
 8009edc:	e014      	b.n	8009f08 <_svfiprintf_r+0x114>
 8009ede:	eba0 0308 	sub.w	r3, r0, r8
 8009ee2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	9304      	str	r3, [sp, #16]
 8009eea:	46a2      	mov	sl, r4
 8009eec:	e7d2      	b.n	8009e94 <_svfiprintf_r+0xa0>
 8009eee:	9b03      	ldr	r3, [sp, #12]
 8009ef0:	1d19      	adds	r1, r3, #4
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	9103      	str	r1, [sp, #12]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	bfbb      	ittet	lt
 8009efa:	425b      	neglt	r3, r3
 8009efc:	f042 0202 	orrlt.w	r2, r2, #2
 8009f00:	9307      	strge	r3, [sp, #28]
 8009f02:	9307      	strlt	r3, [sp, #28]
 8009f04:	bfb8      	it	lt
 8009f06:	9204      	strlt	r2, [sp, #16]
 8009f08:	7823      	ldrb	r3, [r4, #0]
 8009f0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f0c:	d10a      	bne.n	8009f24 <_svfiprintf_r+0x130>
 8009f0e:	7863      	ldrb	r3, [r4, #1]
 8009f10:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f12:	d132      	bne.n	8009f7a <_svfiprintf_r+0x186>
 8009f14:	9b03      	ldr	r3, [sp, #12]
 8009f16:	1d1a      	adds	r2, r3, #4
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	9203      	str	r2, [sp, #12]
 8009f1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f20:	3402      	adds	r4, #2
 8009f22:	9305      	str	r3, [sp, #20]
 8009f24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009fe8 <_svfiprintf_r+0x1f4>
 8009f28:	7821      	ldrb	r1, [r4, #0]
 8009f2a:	2203      	movs	r2, #3
 8009f2c:	4650      	mov	r0, sl
 8009f2e:	f7f6 f977 	bl	8000220 <memchr>
 8009f32:	b138      	cbz	r0, 8009f44 <_svfiprintf_r+0x150>
 8009f34:	9b04      	ldr	r3, [sp, #16]
 8009f36:	eba0 000a 	sub.w	r0, r0, sl
 8009f3a:	2240      	movs	r2, #64	@ 0x40
 8009f3c:	4082      	lsls	r2, r0
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	3401      	adds	r4, #1
 8009f42:	9304      	str	r3, [sp, #16]
 8009f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f48:	4824      	ldr	r0, [pc, #144]	@ (8009fdc <_svfiprintf_r+0x1e8>)
 8009f4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f4e:	2206      	movs	r2, #6
 8009f50:	f7f6 f966 	bl	8000220 <memchr>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	d036      	beq.n	8009fc6 <_svfiprintf_r+0x1d2>
 8009f58:	4b21      	ldr	r3, [pc, #132]	@ (8009fe0 <_svfiprintf_r+0x1ec>)
 8009f5a:	bb1b      	cbnz	r3, 8009fa4 <_svfiprintf_r+0x1b0>
 8009f5c:	9b03      	ldr	r3, [sp, #12]
 8009f5e:	3307      	adds	r3, #7
 8009f60:	f023 0307 	bic.w	r3, r3, #7
 8009f64:	3308      	adds	r3, #8
 8009f66:	9303      	str	r3, [sp, #12]
 8009f68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f6a:	4433      	add	r3, r6
 8009f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f6e:	e76a      	b.n	8009e46 <_svfiprintf_r+0x52>
 8009f70:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f74:	460c      	mov	r4, r1
 8009f76:	2001      	movs	r0, #1
 8009f78:	e7a8      	b.n	8009ecc <_svfiprintf_r+0xd8>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	3401      	adds	r4, #1
 8009f7e:	9305      	str	r3, [sp, #20]
 8009f80:	4619      	mov	r1, r3
 8009f82:	f04f 0c0a 	mov.w	ip, #10
 8009f86:	4620      	mov	r0, r4
 8009f88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f8c:	3a30      	subs	r2, #48	@ 0x30
 8009f8e:	2a09      	cmp	r2, #9
 8009f90:	d903      	bls.n	8009f9a <_svfiprintf_r+0x1a6>
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d0c6      	beq.n	8009f24 <_svfiprintf_r+0x130>
 8009f96:	9105      	str	r1, [sp, #20]
 8009f98:	e7c4      	b.n	8009f24 <_svfiprintf_r+0x130>
 8009f9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e7f0      	b.n	8009f86 <_svfiprintf_r+0x192>
 8009fa4:	ab03      	add	r3, sp, #12
 8009fa6:	9300      	str	r3, [sp, #0]
 8009fa8:	462a      	mov	r2, r5
 8009faa:	4b0e      	ldr	r3, [pc, #56]	@ (8009fe4 <_svfiprintf_r+0x1f0>)
 8009fac:	a904      	add	r1, sp, #16
 8009fae:	4638      	mov	r0, r7
 8009fb0:	f7fd fe98 	bl	8007ce4 <_printf_float>
 8009fb4:	1c42      	adds	r2, r0, #1
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	d1d6      	bne.n	8009f68 <_svfiprintf_r+0x174>
 8009fba:	89ab      	ldrh	r3, [r5, #12]
 8009fbc:	065b      	lsls	r3, r3, #25
 8009fbe:	f53f af2d 	bmi.w	8009e1c <_svfiprintf_r+0x28>
 8009fc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fc4:	e72c      	b.n	8009e20 <_svfiprintf_r+0x2c>
 8009fc6:	ab03      	add	r3, sp, #12
 8009fc8:	9300      	str	r3, [sp, #0]
 8009fca:	462a      	mov	r2, r5
 8009fcc:	4b05      	ldr	r3, [pc, #20]	@ (8009fe4 <_svfiprintf_r+0x1f0>)
 8009fce:	a904      	add	r1, sp, #16
 8009fd0:	4638      	mov	r0, r7
 8009fd2:	f7fe f91f 	bl	8008214 <_printf_i>
 8009fd6:	e7ed      	b.n	8009fb4 <_svfiprintf_r+0x1c0>
 8009fd8:	0800b3a8 	.word	0x0800b3a8
 8009fdc:	0800b3b2 	.word	0x0800b3b2
 8009fe0:	08007ce5 	.word	0x08007ce5
 8009fe4:	08009d3d 	.word	0x08009d3d
 8009fe8:	0800b3ae 	.word	0x0800b3ae

08009fec <__sflush_r>:
 8009fec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ff4:	0716      	lsls	r6, r2, #28
 8009ff6:	4605      	mov	r5, r0
 8009ff8:	460c      	mov	r4, r1
 8009ffa:	d454      	bmi.n	800a0a6 <__sflush_r+0xba>
 8009ffc:	684b      	ldr	r3, [r1, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	dc02      	bgt.n	800a008 <__sflush_r+0x1c>
 800a002:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a004:	2b00      	cmp	r3, #0
 800a006:	dd48      	ble.n	800a09a <__sflush_r+0xae>
 800a008:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a00a:	2e00      	cmp	r6, #0
 800a00c:	d045      	beq.n	800a09a <__sflush_r+0xae>
 800a00e:	2300      	movs	r3, #0
 800a010:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a014:	682f      	ldr	r7, [r5, #0]
 800a016:	6a21      	ldr	r1, [r4, #32]
 800a018:	602b      	str	r3, [r5, #0]
 800a01a:	d030      	beq.n	800a07e <__sflush_r+0x92>
 800a01c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a01e:	89a3      	ldrh	r3, [r4, #12]
 800a020:	0759      	lsls	r1, r3, #29
 800a022:	d505      	bpl.n	800a030 <__sflush_r+0x44>
 800a024:	6863      	ldr	r3, [r4, #4]
 800a026:	1ad2      	subs	r2, r2, r3
 800a028:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a02a:	b10b      	cbz	r3, 800a030 <__sflush_r+0x44>
 800a02c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a02e:	1ad2      	subs	r2, r2, r3
 800a030:	2300      	movs	r3, #0
 800a032:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a034:	6a21      	ldr	r1, [r4, #32]
 800a036:	4628      	mov	r0, r5
 800a038:	47b0      	blx	r6
 800a03a:	1c43      	adds	r3, r0, #1
 800a03c:	89a3      	ldrh	r3, [r4, #12]
 800a03e:	d106      	bne.n	800a04e <__sflush_r+0x62>
 800a040:	6829      	ldr	r1, [r5, #0]
 800a042:	291d      	cmp	r1, #29
 800a044:	d82b      	bhi.n	800a09e <__sflush_r+0xb2>
 800a046:	4a2a      	ldr	r2, [pc, #168]	@ (800a0f0 <__sflush_r+0x104>)
 800a048:	410a      	asrs	r2, r1
 800a04a:	07d6      	lsls	r6, r2, #31
 800a04c:	d427      	bmi.n	800a09e <__sflush_r+0xb2>
 800a04e:	2200      	movs	r2, #0
 800a050:	6062      	str	r2, [r4, #4]
 800a052:	04d9      	lsls	r1, r3, #19
 800a054:	6922      	ldr	r2, [r4, #16]
 800a056:	6022      	str	r2, [r4, #0]
 800a058:	d504      	bpl.n	800a064 <__sflush_r+0x78>
 800a05a:	1c42      	adds	r2, r0, #1
 800a05c:	d101      	bne.n	800a062 <__sflush_r+0x76>
 800a05e:	682b      	ldr	r3, [r5, #0]
 800a060:	b903      	cbnz	r3, 800a064 <__sflush_r+0x78>
 800a062:	6560      	str	r0, [r4, #84]	@ 0x54
 800a064:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a066:	602f      	str	r7, [r5, #0]
 800a068:	b1b9      	cbz	r1, 800a09a <__sflush_r+0xae>
 800a06a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a06e:	4299      	cmp	r1, r3
 800a070:	d002      	beq.n	800a078 <__sflush_r+0x8c>
 800a072:	4628      	mov	r0, r5
 800a074:	f7ff f9e0 	bl	8009438 <_free_r>
 800a078:	2300      	movs	r3, #0
 800a07a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a07c:	e00d      	b.n	800a09a <__sflush_r+0xae>
 800a07e:	2301      	movs	r3, #1
 800a080:	4628      	mov	r0, r5
 800a082:	47b0      	blx	r6
 800a084:	4602      	mov	r2, r0
 800a086:	1c50      	adds	r0, r2, #1
 800a088:	d1c9      	bne.n	800a01e <__sflush_r+0x32>
 800a08a:	682b      	ldr	r3, [r5, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d0c6      	beq.n	800a01e <__sflush_r+0x32>
 800a090:	2b1d      	cmp	r3, #29
 800a092:	d001      	beq.n	800a098 <__sflush_r+0xac>
 800a094:	2b16      	cmp	r3, #22
 800a096:	d11e      	bne.n	800a0d6 <__sflush_r+0xea>
 800a098:	602f      	str	r7, [r5, #0]
 800a09a:	2000      	movs	r0, #0
 800a09c:	e022      	b.n	800a0e4 <__sflush_r+0xf8>
 800a09e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0a2:	b21b      	sxth	r3, r3
 800a0a4:	e01b      	b.n	800a0de <__sflush_r+0xf2>
 800a0a6:	690f      	ldr	r7, [r1, #16]
 800a0a8:	2f00      	cmp	r7, #0
 800a0aa:	d0f6      	beq.n	800a09a <__sflush_r+0xae>
 800a0ac:	0793      	lsls	r3, r2, #30
 800a0ae:	680e      	ldr	r6, [r1, #0]
 800a0b0:	bf08      	it	eq
 800a0b2:	694b      	ldreq	r3, [r1, #20]
 800a0b4:	600f      	str	r7, [r1, #0]
 800a0b6:	bf18      	it	ne
 800a0b8:	2300      	movne	r3, #0
 800a0ba:	eba6 0807 	sub.w	r8, r6, r7
 800a0be:	608b      	str	r3, [r1, #8]
 800a0c0:	f1b8 0f00 	cmp.w	r8, #0
 800a0c4:	dde9      	ble.n	800a09a <__sflush_r+0xae>
 800a0c6:	6a21      	ldr	r1, [r4, #32]
 800a0c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a0ca:	4643      	mov	r3, r8
 800a0cc:	463a      	mov	r2, r7
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	47b0      	blx	r6
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	dc08      	bgt.n	800a0e8 <__sflush_r+0xfc>
 800a0d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0de:	81a3      	strh	r3, [r4, #12]
 800a0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0e8:	4407      	add	r7, r0
 800a0ea:	eba8 0800 	sub.w	r8, r8, r0
 800a0ee:	e7e7      	b.n	800a0c0 <__sflush_r+0xd4>
 800a0f0:	dfbffffe 	.word	0xdfbffffe

0800a0f4 <_fflush_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	690b      	ldr	r3, [r1, #16]
 800a0f8:	4605      	mov	r5, r0
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	b913      	cbnz	r3, 800a104 <_fflush_r+0x10>
 800a0fe:	2500      	movs	r5, #0
 800a100:	4628      	mov	r0, r5
 800a102:	bd38      	pop	{r3, r4, r5, pc}
 800a104:	b118      	cbz	r0, 800a10e <_fflush_r+0x1a>
 800a106:	6a03      	ldr	r3, [r0, #32]
 800a108:	b90b      	cbnz	r3, 800a10e <_fflush_r+0x1a>
 800a10a:	f7fe fa2f 	bl	800856c <__sinit>
 800a10e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d0f3      	beq.n	800a0fe <_fflush_r+0xa>
 800a116:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a118:	07d0      	lsls	r0, r2, #31
 800a11a:	d404      	bmi.n	800a126 <_fflush_r+0x32>
 800a11c:	0599      	lsls	r1, r3, #22
 800a11e:	d402      	bmi.n	800a126 <_fflush_r+0x32>
 800a120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a122:	f7fe fb3a 	bl	800879a <__retarget_lock_acquire_recursive>
 800a126:	4628      	mov	r0, r5
 800a128:	4621      	mov	r1, r4
 800a12a:	f7ff ff5f 	bl	8009fec <__sflush_r>
 800a12e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a130:	07da      	lsls	r2, r3, #31
 800a132:	4605      	mov	r5, r0
 800a134:	d4e4      	bmi.n	800a100 <_fflush_r+0xc>
 800a136:	89a3      	ldrh	r3, [r4, #12]
 800a138:	059b      	lsls	r3, r3, #22
 800a13a:	d4e1      	bmi.n	800a100 <_fflush_r+0xc>
 800a13c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a13e:	f7fe fb2d 	bl	800879c <__retarget_lock_release_recursive>
 800a142:	e7dd      	b.n	800a100 <_fflush_r+0xc>

0800a144 <memmove>:
 800a144:	4288      	cmp	r0, r1
 800a146:	b510      	push	{r4, lr}
 800a148:	eb01 0402 	add.w	r4, r1, r2
 800a14c:	d902      	bls.n	800a154 <memmove+0x10>
 800a14e:	4284      	cmp	r4, r0
 800a150:	4623      	mov	r3, r4
 800a152:	d807      	bhi.n	800a164 <memmove+0x20>
 800a154:	1e43      	subs	r3, r0, #1
 800a156:	42a1      	cmp	r1, r4
 800a158:	d008      	beq.n	800a16c <memmove+0x28>
 800a15a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a15e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a162:	e7f8      	b.n	800a156 <memmove+0x12>
 800a164:	4402      	add	r2, r0
 800a166:	4601      	mov	r1, r0
 800a168:	428a      	cmp	r2, r1
 800a16a:	d100      	bne.n	800a16e <memmove+0x2a>
 800a16c:	bd10      	pop	{r4, pc}
 800a16e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a172:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a176:	e7f7      	b.n	800a168 <memmove+0x24>

0800a178 <_sbrk_r>:
 800a178:	b538      	push	{r3, r4, r5, lr}
 800a17a:	4d06      	ldr	r5, [pc, #24]	@ (800a194 <_sbrk_r+0x1c>)
 800a17c:	2300      	movs	r3, #0
 800a17e:	4604      	mov	r4, r0
 800a180:	4608      	mov	r0, r1
 800a182:	602b      	str	r3, [r5, #0]
 800a184:	f7f8 fbc2 	bl	800290c <_sbrk>
 800a188:	1c43      	adds	r3, r0, #1
 800a18a:	d102      	bne.n	800a192 <_sbrk_r+0x1a>
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	b103      	cbz	r3, 800a192 <_sbrk_r+0x1a>
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	bd38      	pop	{r3, r4, r5, pc}
 800a194:	2000070c 	.word	0x2000070c

0800a198 <memcpy>:
 800a198:	440a      	add	r2, r1
 800a19a:	4291      	cmp	r1, r2
 800a19c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1a0:	d100      	bne.n	800a1a4 <memcpy+0xc>
 800a1a2:	4770      	bx	lr
 800a1a4:	b510      	push	{r4, lr}
 800a1a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1ae:	4291      	cmp	r1, r2
 800a1b0:	d1f9      	bne.n	800a1a6 <memcpy+0xe>
 800a1b2:	bd10      	pop	{r4, pc}

0800a1b4 <__assert_func>:
 800a1b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1b6:	4614      	mov	r4, r2
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	4b09      	ldr	r3, [pc, #36]	@ (800a1e0 <__assert_func+0x2c>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4605      	mov	r5, r0
 800a1c0:	68d8      	ldr	r0, [r3, #12]
 800a1c2:	b954      	cbnz	r4, 800a1da <__assert_func+0x26>
 800a1c4:	4b07      	ldr	r3, [pc, #28]	@ (800a1e4 <__assert_func+0x30>)
 800a1c6:	461c      	mov	r4, r3
 800a1c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1cc:	9100      	str	r1, [sp, #0]
 800a1ce:	462b      	mov	r3, r5
 800a1d0:	4905      	ldr	r1, [pc, #20]	@ (800a1e8 <__assert_func+0x34>)
 800a1d2:	f000 f86f 	bl	800a2b4 <fiprintf>
 800a1d6:	f000 f87f 	bl	800a2d8 <abort>
 800a1da:	4b04      	ldr	r3, [pc, #16]	@ (800a1ec <__assert_func+0x38>)
 800a1dc:	e7f4      	b.n	800a1c8 <__assert_func+0x14>
 800a1de:	bf00      	nop
 800a1e0:	20000028 	.word	0x20000028
 800a1e4:	0800b3fe 	.word	0x0800b3fe
 800a1e8:	0800b3d0 	.word	0x0800b3d0
 800a1ec:	0800b3c3 	.word	0x0800b3c3

0800a1f0 <_calloc_r>:
 800a1f0:	b570      	push	{r4, r5, r6, lr}
 800a1f2:	fba1 5402 	umull	r5, r4, r1, r2
 800a1f6:	b93c      	cbnz	r4, 800a208 <_calloc_r+0x18>
 800a1f8:	4629      	mov	r1, r5
 800a1fa:	f7ff f991 	bl	8009520 <_malloc_r>
 800a1fe:	4606      	mov	r6, r0
 800a200:	b928      	cbnz	r0, 800a20e <_calloc_r+0x1e>
 800a202:	2600      	movs	r6, #0
 800a204:	4630      	mov	r0, r6
 800a206:	bd70      	pop	{r4, r5, r6, pc}
 800a208:	220c      	movs	r2, #12
 800a20a:	6002      	str	r2, [r0, #0]
 800a20c:	e7f9      	b.n	800a202 <_calloc_r+0x12>
 800a20e:	462a      	mov	r2, r5
 800a210:	4621      	mov	r1, r4
 800a212:	f7fe fa44 	bl	800869e <memset>
 800a216:	e7f5      	b.n	800a204 <_calloc_r+0x14>

0800a218 <__ascii_mbtowc>:
 800a218:	b082      	sub	sp, #8
 800a21a:	b901      	cbnz	r1, 800a21e <__ascii_mbtowc+0x6>
 800a21c:	a901      	add	r1, sp, #4
 800a21e:	b142      	cbz	r2, 800a232 <__ascii_mbtowc+0x1a>
 800a220:	b14b      	cbz	r3, 800a236 <__ascii_mbtowc+0x1e>
 800a222:	7813      	ldrb	r3, [r2, #0]
 800a224:	600b      	str	r3, [r1, #0]
 800a226:	7812      	ldrb	r2, [r2, #0]
 800a228:	1e10      	subs	r0, r2, #0
 800a22a:	bf18      	it	ne
 800a22c:	2001      	movne	r0, #1
 800a22e:	b002      	add	sp, #8
 800a230:	4770      	bx	lr
 800a232:	4610      	mov	r0, r2
 800a234:	e7fb      	b.n	800a22e <__ascii_mbtowc+0x16>
 800a236:	f06f 0001 	mvn.w	r0, #1
 800a23a:	e7f8      	b.n	800a22e <__ascii_mbtowc+0x16>

0800a23c <_realloc_r>:
 800a23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a240:	4680      	mov	r8, r0
 800a242:	4615      	mov	r5, r2
 800a244:	460c      	mov	r4, r1
 800a246:	b921      	cbnz	r1, 800a252 <_realloc_r+0x16>
 800a248:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a24c:	4611      	mov	r1, r2
 800a24e:	f7ff b967 	b.w	8009520 <_malloc_r>
 800a252:	b92a      	cbnz	r2, 800a260 <_realloc_r+0x24>
 800a254:	f7ff f8f0 	bl	8009438 <_free_r>
 800a258:	2400      	movs	r4, #0
 800a25a:	4620      	mov	r0, r4
 800a25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a260:	f000 f841 	bl	800a2e6 <_malloc_usable_size_r>
 800a264:	4285      	cmp	r5, r0
 800a266:	4606      	mov	r6, r0
 800a268:	d802      	bhi.n	800a270 <_realloc_r+0x34>
 800a26a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a26e:	d8f4      	bhi.n	800a25a <_realloc_r+0x1e>
 800a270:	4629      	mov	r1, r5
 800a272:	4640      	mov	r0, r8
 800a274:	f7ff f954 	bl	8009520 <_malloc_r>
 800a278:	4607      	mov	r7, r0
 800a27a:	2800      	cmp	r0, #0
 800a27c:	d0ec      	beq.n	800a258 <_realloc_r+0x1c>
 800a27e:	42b5      	cmp	r5, r6
 800a280:	462a      	mov	r2, r5
 800a282:	4621      	mov	r1, r4
 800a284:	bf28      	it	cs
 800a286:	4632      	movcs	r2, r6
 800a288:	f7ff ff86 	bl	800a198 <memcpy>
 800a28c:	4621      	mov	r1, r4
 800a28e:	4640      	mov	r0, r8
 800a290:	f7ff f8d2 	bl	8009438 <_free_r>
 800a294:	463c      	mov	r4, r7
 800a296:	e7e0      	b.n	800a25a <_realloc_r+0x1e>

0800a298 <__ascii_wctomb>:
 800a298:	4603      	mov	r3, r0
 800a29a:	4608      	mov	r0, r1
 800a29c:	b141      	cbz	r1, 800a2b0 <__ascii_wctomb+0x18>
 800a29e:	2aff      	cmp	r2, #255	@ 0xff
 800a2a0:	d904      	bls.n	800a2ac <__ascii_wctomb+0x14>
 800a2a2:	228a      	movs	r2, #138	@ 0x8a
 800a2a4:	601a      	str	r2, [r3, #0]
 800a2a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2aa:	4770      	bx	lr
 800a2ac:	700a      	strb	r2, [r1, #0]
 800a2ae:	2001      	movs	r0, #1
 800a2b0:	4770      	bx	lr
	...

0800a2b4 <fiprintf>:
 800a2b4:	b40e      	push	{r1, r2, r3}
 800a2b6:	b503      	push	{r0, r1, lr}
 800a2b8:	4601      	mov	r1, r0
 800a2ba:	ab03      	add	r3, sp, #12
 800a2bc:	4805      	ldr	r0, [pc, #20]	@ (800a2d4 <fiprintf+0x20>)
 800a2be:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2c2:	6800      	ldr	r0, [r0, #0]
 800a2c4:	9301      	str	r3, [sp, #4]
 800a2c6:	f000 f83f 	bl	800a348 <_vfiprintf_r>
 800a2ca:	b002      	add	sp, #8
 800a2cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2d0:	b003      	add	sp, #12
 800a2d2:	4770      	bx	lr
 800a2d4:	20000028 	.word	0x20000028

0800a2d8 <abort>:
 800a2d8:	b508      	push	{r3, lr}
 800a2da:	2006      	movs	r0, #6
 800a2dc:	f000 fa08 	bl	800a6f0 <raise>
 800a2e0:	2001      	movs	r0, #1
 800a2e2:	f7f8 fa9b 	bl	800281c <_exit>

0800a2e6 <_malloc_usable_size_r>:
 800a2e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2ea:	1f18      	subs	r0, r3, #4
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	bfbc      	itt	lt
 800a2f0:	580b      	ldrlt	r3, [r1, r0]
 800a2f2:	18c0      	addlt	r0, r0, r3
 800a2f4:	4770      	bx	lr

0800a2f6 <__sfputc_r>:
 800a2f6:	6893      	ldr	r3, [r2, #8]
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	b410      	push	{r4}
 800a2fe:	6093      	str	r3, [r2, #8]
 800a300:	da08      	bge.n	800a314 <__sfputc_r+0x1e>
 800a302:	6994      	ldr	r4, [r2, #24]
 800a304:	42a3      	cmp	r3, r4
 800a306:	db01      	blt.n	800a30c <__sfputc_r+0x16>
 800a308:	290a      	cmp	r1, #10
 800a30a:	d103      	bne.n	800a314 <__sfputc_r+0x1e>
 800a30c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a310:	f000 b932 	b.w	800a578 <__swbuf_r>
 800a314:	6813      	ldr	r3, [r2, #0]
 800a316:	1c58      	adds	r0, r3, #1
 800a318:	6010      	str	r0, [r2, #0]
 800a31a:	7019      	strb	r1, [r3, #0]
 800a31c:	4608      	mov	r0, r1
 800a31e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <__sfputs_r>:
 800a324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a326:	4606      	mov	r6, r0
 800a328:	460f      	mov	r7, r1
 800a32a:	4614      	mov	r4, r2
 800a32c:	18d5      	adds	r5, r2, r3
 800a32e:	42ac      	cmp	r4, r5
 800a330:	d101      	bne.n	800a336 <__sfputs_r+0x12>
 800a332:	2000      	movs	r0, #0
 800a334:	e007      	b.n	800a346 <__sfputs_r+0x22>
 800a336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a33a:	463a      	mov	r2, r7
 800a33c:	4630      	mov	r0, r6
 800a33e:	f7ff ffda 	bl	800a2f6 <__sfputc_r>
 800a342:	1c43      	adds	r3, r0, #1
 800a344:	d1f3      	bne.n	800a32e <__sfputs_r+0xa>
 800a346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a348 <_vfiprintf_r>:
 800a348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34c:	460d      	mov	r5, r1
 800a34e:	b09d      	sub	sp, #116	@ 0x74
 800a350:	4614      	mov	r4, r2
 800a352:	4698      	mov	r8, r3
 800a354:	4606      	mov	r6, r0
 800a356:	b118      	cbz	r0, 800a360 <_vfiprintf_r+0x18>
 800a358:	6a03      	ldr	r3, [r0, #32]
 800a35a:	b90b      	cbnz	r3, 800a360 <_vfiprintf_r+0x18>
 800a35c:	f7fe f906 	bl	800856c <__sinit>
 800a360:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a362:	07d9      	lsls	r1, r3, #31
 800a364:	d405      	bmi.n	800a372 <_vfiprintf_r+0x2a>
 800a366:	89ab      	ldrh	r3, [r5, #12]
 800a368:	059a      	lsls	r2, r3, #22
 800a36a:	d402      	bmi.n	800a372 <_vfiprintf_r+0x2a>
 800a36c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a36e:	f7fe fa14 	bl	800879a <__retarget_lock_acquire_recursive>
 800a372:	89ab      	ldrh	r3, [r5, #12]
 800a374:	071b      	lsls	r3, r3, #28
 800a376:	d501      	bpl.n	800a37c <_vfiprintf_r+0x34>
 800a378:	692b      	ldr	r3, [r5, #16]
 800a37a:	b99b      	cbnz	r3, 800a3a4 <_vfiprintf_r+0x5c>
 800a37c:	4629      	mov	r1, r5
 800a37e:	4630      	mov	r0, r6
 800a380:	f000 f938 	bl	800a5f4 <__swsetup_r>
 800a384:	b170      	cbz	r0, 800a3a4 <_vfiprintf_r+0x5c>
 800a386:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a388:	07dc      	lsls	r4, r3, #31
 800a38a:	d504      	bpl.n	800a396 <_vfiprintf_r+0x4e>
 800a38c:	f04f 30ff 	mov.w	r0, #4294967295
 800a390:	b01d      	add	sp, #116	@ 0x74
 800a392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a396:	89ab      	ldrh	r3, [r5, #12]
 800a398:	0598      	lsls	r0, r3, #22
 800a39a:	d4f7      	bmi.n	800a38c <_vfiprintf_r+0x44>
 800a39c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a39e:	f7fe f9fd 	bl	800879c <__retarget_lock_release_recursive>
 800a3a2:	e7f3      	b.n	800a38c <_vfiprintf_r+0x44>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3a8:	2320      	movs	r3, #32
 800a3aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a3ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3b2:	2330      	movs	r3, #48	@ 0x30
 800a3b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a564 <_vfiprintf_r+0x21c>
 800a3b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a3bc:	f04f 0901 	mov.w	r9, #1
 800a3c0:	4623      	mov	r3, r4
 800a3c2:	469a      	mov	sl, r3
 800a3c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3c8:	b10a      	cbz	r2, 800a3ce <_vfiprintf_r+0x86>
 800a3ca:	2a25      	cmp	r2, #37	@ 0x25
 800a3cc:	d1f9      	bne.n	800a3c2 <_vfiprintf_r+0x7a>
 800a3ce:	ebba 0b04 	subs.w	fp, sl, r4
 800a3d2:	d00b      	beq.n	800a3ec <_vfiprintf_r+0xa4>
 800a3d4:	465b      	mov	r3, fp
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	4629      	mov	r1, r5
 800a3da:	4630      	mov	r0, r6
 800a3dc:	f7ff ffa2 	bl	800a324 <__sfputs_r>
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	f000 80a7 	beq.w	800a534 <_vfiprintf_r+0x1ec>
 800a3e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3e8:	445a      	add	r2, fp
 800a3ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f000 809f 	beq.w	800a534 <_vfiprintf_r+0x1ec>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a400:	f10a 0a01 	add.w	sl, sl, #1
 800a404:	9304      	str	r3, [sp, #16]
 800a406:	9307      	str	r3, [sp, #28]
 800a408:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a40c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a40e:	4654      	mov	r4, sl
 800a410:	2205      	movs	r2, #5
 800a412:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a416:	4853      	ldr	r0, [pc, #332]	@ (800a564 <_vfiprintf_r+0x21c>)
 800a418:	f7f5 ff02 	bl	8000220 <memchr>
 800a41c:	9a04      	ldr	r2, [sp, #16]
 800a41e:	b9d8      	cbnz	r0, 800a458 <_vfiprintf_r+0x110>
 800a420:	06d1      	lsls	r1, r2, #27
 800a422:	bf44      	itt	mi
 800a424:	2320      	movmi	r3, #32
 800a426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a42a:	0713      	lsls	r3, r2, #28
 800a42c:	bf44      	itt	mi
 800a42e:	232b      	movmi	r3, #43	@ 0x2b
 800a430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a434:	f89a 3000 	ldrb.w	r3, [sl]
 800a438:	2b2a      	cmp	r3, #42	@ 0x2a
 800a43a:	d015      	beq.n	800a468 <_vfiprintf_r+0x120>
 800a43c:	9a07      	ldr	r2, [sp, #28]
 800a43e:	4654      	mov	r4, sl
 800a440:	2000      	movs	r0, #0
 800a442:	f04f 0c0a 	mov.w	ip, #10
 800a446:	4621      	mov	r1, r4
 800a448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a44c:	3b30      	subs	r3, #48	@ 0x30
 800a44e:	2b09      	cmp	r3, #9
 800a450:	d94b      	bls.n	800a4ea <_vfiprintf_r+0x1a2>
 800a452:	b1b0      	cbz	r0, 800a482 <_vfiprintf_r+0x13a>
 800a454:	9207      	str	r2, [sp, #28]
 800a456:	e014      	b.n	800a482 <_vfiprintf_r+0x13a>
 800a458:	eba0 0308 	sub.w	r3, r0, r8
 800a45c:	fa09 f303 	lsl.w	r3, r9, r3
 800a460:	4313      	orrs	r3, r2
 800a462:	9304      	str	r3, [sp, #16]
 800a464:	46a2      	mov	sl, r4
 800a466:	e7d2      	b.n	800a40e <_vfiprintf_r+0xc6>
 800a468:	9b03      	ldr	r3, [sp, #12]
 800a46a:	1d19      	adds	r1, r3, #4
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	9103      	str	r1, [sp, #12]
 800a470:	2b00      	cmp	r3, #0
 800a472:	bfbb      	ittet	lt
 800a474:	425b      	neglt	r3, r3
 800a476:	f042 0202 	orrlt.w	r2, r2, #2
 800a47a:	9307      	strge	r3, [sp, #28]
 800a47c:	9307      	strlt	r3, [sp, #28]
 800a47e:	bfb8      	it	lt
 800a480:	9204      	strlt	r2, [sp, #16]
 800a482:	7823      	ldrb	r3, [r4, #0]
 800a484:	2b2e      	cmp	r3, #46	@ 0x2e
 800a486:	d10a      	bne.n	800a49e <_vfiprintf_r+0x156>
 800a488:	7863      	ldrb	r3, [r4, #1]
 800a48a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a48c:	d132      	bne.n	800a4f4 <_vfiprintf_r+0x1ac>
 800a48e:	9b03      	ldr	r3, [sp, #12]
 800a490:	1d1a      	adds	r2, r3, #4
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	9203      	str	r2, [sp, #12]
 800a496:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a49a:	3402      	adds	r4, #2
 800a49c:	9305      	str	r3, [sp, #20]
 800a49e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a574 <_vfiprintf_r+0x22c>
 800a4a2:	7821      	ldrb	r1, [r4, #0]
 800a4a4:	2203      	movs	r2, #3
 800a4a6:	4650      	mov	r0, sl
 800a4a8:	f7f5 feba 	bl	8000220 <memchr>
 800a4ac:	b138      	cbz	r0, 800a4be <_vfiprintf_r+0x176>
 800a4ae:	9b04      	ldr	r3, [sp, #16]
 800a4b0:	eba0 000a 	sub.w	r0, r0, sl
 800a4b4:	2240      	movs	r2, #64	@ 0x40
 800a4b6:	4082      	lsls	r2, r0
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	3401      	adds	r4, #1
 800a4bc:	9304      	str	r3, [sp, #16]
 800a4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c2:	4829      	ldr	r0, [pc, #164]	@ (800a568 <_vfiprintf_r+0x220>)
 800a4c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a4c8:	2206      	movs	r2, #6
 800a4ca:	f7f5 fea9 	bl	8000220 <memchr>
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	d03f      	beq.n	800a552 <_vfiprintf_r+0x20a>
 800a4d2:	4b26      	ldr	r3, [pc, #152]	@ (800a56c <_vfiprintf_r+0x224>)
 800a4d4:	bb1b      	cbnz	r3, 800a51e <_vfiprintf_r+0x1d6>
 800a4d6:	9b03      	ldr	r3, [sp, #12]
 800a4d8:	3307      	adds	r3, #7
 800a4da:	f023 0307 	bic.w	r3, r3, #7
 800a4de:	3308      	adds	r3, #8
 800a4e0:	9303      	str	r3, [sp, #12]
 800a4e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4e4:	443b      	add	r3, r7
 800a4e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4e8:	e76a      	b.n	800a3c0 <_vfiprintf_r+0x78>
 800a4ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4ee:	460c      	mov	r4, r1
 800a4f0:	2001      	movs	r0, #1
 800a4f2:	e7a8      	b.n	800a446 <_vfiprintf_r+0xfe>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	3401      	adds	r4, #1
 800a4f8:	9305      	str	r3, [sp, #20]
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	f04f 0c0a 	mov.w	ip, #10
 800a500:	4620      	mov	r0, r4
 800a502:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a506:	3a30      	subs	r2, #48	@ 0x30
 800a508:	2a09      	cmp	r2, #9
 800a50a:	d903      	bls.n	800a514 <_vfiprintf_r+0x1cc>
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d0c6      	beq.n	800a49e <_vfiprintf_r+0x156>
 800a510:	9105      	str	r1, [sp, #20]
 800a512:	e7c4      	b.n	800a49e <_vfiprintf_r+0x156>
 800a514:	fb0c 2101 	mla	r1, ip, r1, r2
 800a518:	4604      	mov	r4, r0
 800a51a:	2301      	movs	r3, #1
 800a51c:	e7f0      	b.n	800a500 <_vfiprintf_r+0x1b8>
 800a51e:	ab03      	add	r3, sp, #12
 800a520:	9300      	str	r3, [sp, #0]
 800a522:	462a      	mov	r2, r5
 800a524:	4b12      	ldr	r3, [pc, #72]	@ (800a570 <_vfiprintf_r+0x228>)
 800a526:	a904      	add	r1, sp, #16
 800a528:	4630      	mov	r0, r6
 800a52a:	f7fd fbdb 	bl	8007ce4 <_printf_float>
 800a52e:	4607      	mov	r7, r0
 800a530:	1c78      	adds	r0, r7, #1
 800a532:	d1d6      	bne.n	800a4e2 <_vfiprintf_r+0x19a>
 800a534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a536:	07d9      	lsls	r1, r3, #31
 800a538:	d405      	bmi.n	800a546 <_vfiprintf_r+0x1fe>
 800a53a:	89ab      	ldrh	r3, [r5, #12]
 800a53c:	059a      	lsls	r2, r3, #22
 800a53e:	d402      	bmi.n	800a546 <_vfiprintf_r+0x1fe>
 800a540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a542:	f7fe f92b 	bl	800879c <__retarget_lock_release_recursive>
 800a546:	89ab      	ldrh	r3, [r5, #12]
 800a548:	065b      	lsls	r3, r3, #25
 800a54a:	f53f af1f 	bmi.w	800a38c <_vfiprintf_r+0x44>
 800a54e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a550:	e71e      	b.n	800a390 <_vfiprintf_r+0x48>
 800a552:	ab03      	add	r3, sp, #12
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	462a      	mov	r2, r5
 800a558:	4b05      	ldr	r3, [pc, #20]	@ (800a570 <_vfiprintf_r+0x228>)
 800a55a:	a904      	add	r1, sp, #16
 800a55c:	4630      	mov	r0, r6
 800a55e:	f7fd fe59 	bl	8008214 <_printf_i>
 800a562:	e7e4      	b.n	800a52e <_vfiprintf_r+0x1e6>
 800a564:	0800b3a8 	.word	0x0800b3a8
 800a568:	0800b3b2 	.word	0x0800b3b2
 800a56c:	08007ce5 	.word	0x08007ce5
 800a570:	0800a325 	.word	0x0800a325
 800a574:	0800b3ae 	.word	0x0800b3ae

0800a578 <__swbuf_r>:
 800a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57a:	460e      	mov	r6, r1
 800a57c:	4614      	mov	r4, r2
 800a57e:	4605      	mov	r5, r0
 800a580:	b118      	cbz	r0, 800a58a <__swbuf_r+0x12>
 800a582:	6a03      	ldr	r3, [r0, #32]
 800a584:	b90b      	cbnz	r3, 800a58a <__swbuf_r+0x12>
 800a586:	f7fd fff1 	bl	800856c <__sinit>
 800a58a:	69a3      	ldr	r3, [r4, #24]
 800a58c:	60a3      	str	r3, [r4, #8]
 800a58e:	89a3      	ldrh	r3, [r4, #12]
 800a590:	071a      	lsls	r2, r3, #28
 800a592:	d501      	bpl.n	800a598 <__swbuf_r+0x20>
 800a594:	6923      	ldr	r3, [r4, #16]
 800a596:	b943      	cbnz	r3, 800a5aa <__swbuf_r+0x32>
 800a598:	4621      	mov	r1, r4
 800a59a:	4628      	mov	r0, r5
 800a59c:	f000 f82a 	bl	800a5f4 <__swsetup_r>
 800a5a0:	b118      	cbz	r0, 800a5aa <__swbuf_r+0x32>
 800a5a2:	f04f 37ff 	mov.w	r7, #4294967295
 800a5a6:	4638      	mov	r0, r7
 800a5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5aa:	6823      	ldr	r3, [r4, #0]
 800a5ac:	6922      	ldr	r2, [r4, #16]
 800a5ae:	1a98      	subs	r0, r3, r2
 800a5b0:	6963      	ldr	r3, [r4, #20]
 800a5b2:	b2f6      	uxtb	r6, r6
 800a5b4:	4283      	cmp	r3, r0
 800a5b6:	4637      	mov	r7, r6
 800a5b8:	dc05      	bgt.n	800a5c6 <__swbuf_r+0x4e>
 800a5ba:	4621      	mov	r1, r4
 800a5bc:	4628      	mov	r0, r5
 800a5be:	f7ff fd99 	bl	800a0f4 <_fflush_r>
 800a5c2:	2800      	cmp	r0, #0
 800a5c4:	d1ed      	bne.n	800a5a2 <__swbuf_r+0x2a>
 800a5c6:	68a3      	ldr	r3, [r4, #8]
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	60a3      	str	r3, [r4, #8]
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	1c5a      	adds	r2, r3, #1
 800a5d0:	6022      	str	r2, [r4, #0]
 800a5d2:	701e      	strb	r6, [r3, #0]
 800a5d4:	6962      	ldr	r2, [r4, #20]
 800a5d6:	1c43      	adds	r3, r0, #1
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d004      	beq.n	800a5e6 <__swbuf_r+0x6e>
 800a5dc:	89a3      	ldrh	r3, [r4, #12]
 800a5de:	07db      	lsls	r3, r3, #31
 800a5e0:	d5e1      	bpl.n	800a5a6 <__swbuf_r+0x2e>
 800a5e2:	2e0a      	cmp	r6, #10
 800a5e4:	d1df      	bne.n	800a5a6 <__swbuf_r+0x2e>
 800a5e6:	4621      	mov	r1, r4
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	f7ff fd83 	bl	800a0f4 <_fflush_r>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d0d9      	beq.n	800a5a6 <__swbuf_r+0x2e>
 800a5f2:	e7d6      	b.n	800a5a2 <__swbuf_r+0x2a>

0800a5f4 <__swsetup_r>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	4b29      	ldr	r3, [pc, #164]	@ (800a69c <__swsetup_r+0xa8>)
 800a5f8:	4605      	mov	r5, r0
 800a5fa:	6818      	ldr	r0, [r3, #0]
 800a5fc:	460c      	mov	r4, r1
 800a5fe:	b118      	cbz	r0, 800a608 <__swsetup_r+0x14>
 800a600:	6a03      	ldr	r3, [r0, #32]
 800a602:	b90b      	cbnz	r3, 800a608 <__swsetup_r+0x14>
 800a604:	f7fd ffb2 	bl	800856c <__sinit>
 800a608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a60c:	0719      	lsls	r1, r3, #28
 800a60e:	d422      	bmi.n	800a656 <__swsetup_r+0x62>
 800a610:	06da      	lsls	r2, r3, #27
 800a612:	d407      	bmi.n	800a624 <__swsetup_r+0x30>
 800a614:	2209      	movs	r2, #9
 800a616:	602a      	str	r2, [r5, #0]
 800a618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a61c:	81a3      	strh	r3, [r4, #12]
 800a61e:	f04f 30ff 	mov.w	r0, #4294967295
 800a622:	e033      	b.n	800a68c <__swsetup_r+0x98>
 800a624:	0758      	lsls	r0, r3, #29
 800a626:	d512      	bpl.n	800a64e <__swsetup_r+0x5a>
 800a628:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a62a:	b141      	cbz	r1, 800a63e <__swsetup_r+0x4a>
 800a62c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a630:	4299      	cmp	r1, r3
 800a632:	d002      	beq.n	800a63a <__swsetup_r+0x46>
 800a634:	4628      	mov	r0, r5
 800a636:	f7fe feff 	bl	8009438 <_free_r>
 800a63a:	2300      	movs	r3, #0
 800a63c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a63e:	89a3      	ldrh	r3, [r4, #12]
 800a640:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a644:	81a3      	strh	r3, [r4, #12]
 800a646:	2300      	movs	r3, #0
 800a648:	6063      	str	r3, [r4, #4]
 800a64a:	6923      	ldr	r3, [r4, #16]
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	89a3      	ldrh	r3, [r4, #12]
 800a650:	f043 0308 	orr.w	r3, r3, #8
 800a654:	81a3      	strh	r3, [r4, #12]
 800a656:	6923      	ldr	r3, [r4, #16]
 800a658:	b94b      	cbnz	r3, 800a66e <__swsetup_r+0x7a>
 800a65a:	89a3      	ldrh	r3, [r4, #12]
 800a65c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a664:	d003      	beq.n	800a66e <__swsetup_r+0x7a>
 800a666:	4621      	mov	r1, r4
 800a668:	4628      	mov	r0, r5
 800a66a:	f000 f883 	bl	800a774 <__smakebuf_r>
 800a66e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a672:	f013 0201 	ands.w	r2, r3, #1
 800a676:	d00a      	beq.n	800a68e <__swsetup_r+0x9a>
 800a678:	2200      	movs	r2, #0
 800a67a:	60a2      	str	r2, [r4, #8]
 800a67c:	6962      	ldr	r2, [r4, #20]
 800a67e:	4252      	negs	r2, r2
 800a680:	61a2      	str	r2, [r4, #24]
 800a682:	6922      	ldr	r2, [r4, #16]
 800a684:	b942      	cbnz	r2, 800a698 <__swsetup_r+0xa4>
 800a686:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a68a:	d1c5      	bne.n	800a618 <__swsetup_r+0x24>
 800a68c:	bd38      	pop	{r3, r4, r5, pc}
 800a68e:	0799      	lsls	r1, r3, #30
 800a690:	bf58      	it	pl
 800a692:	6962      	ldrpl	r2, [r4, #20]
 800a694:	60a2      	str	r2, [r4, #8]
 800a696:	e7f4      	b.n	800a682 <__swsetup_r+0x8e>
 800a698:	2000      	movs	r0, #0
 800a69a:	e7f7      	b.n	800a68c <__swsetup_r+0x98>
 800a69c:	20000028 	.word	0x20000028

0800a6a0 <_raise_r>:
 800a6a0:	291f      	cmp	r1, #31
 800a6a2:	b538      	push	{r3, r4, r5, lr}
 800a6a4:	4605      	mov	r5, r0
 800a6a6:	460c      	mov	r4, r1
 800a6a8:	d904      	bls.n	800a6b4 <_raise_r+0x14>
 800a6aa:	2316      	movs	r3, #22
 800a6ac:	6003      	str	r3, [r0, #0]
 800a6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b2:	bd38      	pop	{r3, r4, r5, pc}
 800a6b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a6b6:	b112      	cbz	r2, 800a6be <_raise_r+0x1e>
 800a6b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6bc:	b94b      	cbnz	r3, 800a6d2 <_raise_r+0x32>
 800a6be:	4628      	mov	r0, r5
 800a6c0:	f000 f830 	bl	800a724 <_getpid_r>
 800a6c4:	4622      	mov	r2, r4
 800a6c6:	4601      	mov	r1, r0
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6ce:	f000 b817 	b.w	800a700 <_kill_r>
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d00a      	beq.n	800a6ec <_raise_r+0x4c>
 800a6d6:	1c59      	adds	r1, r3, #1
 800a6d8:	d103      	bne.n	800a6e2 <_raise_r+0x42>
 800a6da:	2316      	movs	r3, #22
 800a6dc:	6003      	str	r3, [r0, #0]
 800a6de:	2001      	movs	r0, #1
 800a6e0:	e7e7      	b.n	800a6b2 <_raise_r+0x12>
 800a6e2:	2100      	movs	r1, #0
 800a6e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	4798      	blx	r3
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	e7e0      	b.n	800a6b2 <_raise_r+0x12>

0800a6f0 <raise>:
 800a6f0:	4b02      	ldr	r3, [pc, #8]	@ (800a6fc <raise+0xc>)
 800a6f2:	4601      	mov	r1, r0
 800a6f4:	6818      	ldr	r0, [r3, #0]
 800a6f6:	f7ff bfd3 	b.w	800a6a0 <_raise_r>
 800a6fa:	bf00      	nop
 800a6fc:	20000028 	.word	0x20000028

0800a700 <_kill_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	4d07      	ldr	r5, [pc, #28]	@ (800a720 <_kill_r+0x20>)
 800a704:	2300      	movs	r3, #0
 800a706:	4604      	mov	r4, r0
 800a708:	4608      	mov	r0, r1
 800a70a:	4611      	mov	r1, r2
 800a70c:	602b      	str	r3, [r5, #0]
 800a70e:	f7f8 f875 	bl	80027fc <_kill>
 800a712:	1c43      	adds	r3, r0, #1
 800a714:	d102      	bne.n	800a71c <_kill_r+0x1c>
 800a716:	682b      	ldr	r3, [r5, #0]
 800a718:	b103      	cbz	r3, 800a71c <_kill_r+0x1c>
 800a71a:	6023      	str	r3, [r4, #0]
 800a71c:	bd38      	pop	{r3, r4, r5, pc}
 800a71e:	bf00      	nop
 800a720:	2000070c 	.word	0x2000070c

0800a724 <_getpid_r>:
 800a724:	f7f8 b862 	b.w	80027ec <_getpid>

0800a728 <__swhatbuf_r>:
 800a728:	b570      	push	{r4, r5, r6, lr}
 800a72a:	460c      	mov	r4, r1
 800a72c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a730:	2900      	cmp	r1, #0
 800a732:	b096      	sub	sp, #88	@ 0x58
 800a734:	4615      	mov	r5, r2
 800a736:	461e      	mov	r6, r3
 800a738:	da0d      	bge.n	800a756 <__swhatbuf_r+0x2e>
 800a73a:	89a3      	ldrh	r3, [r4, #12]
 800a73c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a740:	f04f 0100 	mov.w	r1, #0
 800a744:	bf14      	ite	ne
 800a746:	2340      	movne	r3, #64	@ 0x40
 800a748:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a74c:	2000      	movs	r0, #0
 800a74e:	6031      	str	r1, [r6, #0]
 800a750:	602b      	str	r3, [r5, #0]
 800a752:	b016      	add	sp, #88	@ 0x58
 800a754:	bd70      	pop	{r4, r5, r6, pc}
 800a756:	466a      	mov	r2, sp
 800a758:	f000 f848 	bl	800a7ec <_fstat_r>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	dbec      	blt.n	800a73a <__swhatbuf_r+0x12>
 800a760:	9901      	ldr	r1, [sp, #4]
 800a762:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a766:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a76a:	4259      	negs	r1, r3
 800a76c:	4159      	adcs	r1, r3
 800a76e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a772:	e7eb      	b.n	800a74c <__swhatbuf_r+0x24>

0800a774 <__smakebuf_r>:
 800a774:	898b      	ldrh	r3, [r1, #12]
 800a776:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a778:	079d      	lsls	r5, r3, #30
 800a77a:	4606      	mov	r6, r0
 800a77c:	460c      	mov	r4, r1
 800a77e:	d507      	bpl.n	800a790 <__smakebuf_r+0x1c>
 800a780:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	6123      	str	r3, [r4, #16]
 800a788:	2301      	movs	r3, #1
 800a78a:	6163      	str	r3, [r4, #20]
 800a78c:	b003      	add	sp, #12
 800a78e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a790:	ab01      	add	r3, sp, #4
 800a792:	466a      	mov	r2, sp
 800a794:	f7ff ffc8 	bl	800a728 <__swhatbuf_r>
 800a798:	9f00      	ldr	r7, [sp, #0]
 800a79a:	4605      	mov	r5, r0
 800a79c:	4639      	mov	r1, r7
 800a79e:	4630      	mov	r0, r6
 800a7a0:	f7fe febe 	bl	8009520 <_malloc_r>
 800a7a4:	b948      	cbnz	r0, 800a7ba <__smakebuf_r+0x46>
 800a7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7aa:	059a      	lsls	r2, r3, #22
 800a7ac:	d4ee      	bmi.n	800a78c <__smakebuf_r+0x18>
 800a7ae:	f023 0303 	bic.w	r3, r3, #3
 800a7b2:	f043 0302 	orr.w	r3, r3, #2
 800a7b6:	81a3      	strh	r3, [r4, #12]
 800a7b8:	e7e2      	b.n	800a780 <__smakebuf_r+0xc>
 800a7ba:	89a3      	ldrh	r3, [r4, #12]
 800a7bc:	6020      	str	r0, [r4, #0]
 800a7be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7c2:	81a3      	strh	r3, [r4, #12]
 800a7c4:	9b01      	ldr	r3, [sp, #4]
 800a7c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a7ca:	b15b      	cbz	r3, 800a7e4 <__smakebuf_r+0x70>
 800a7cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	f000 f81d 	bl	800a810 <_isatty_r>
 800a7d6:	b128      	cbz	r0, 800a7e4 <__smakebuf_r+0x70>
 800a7d8:	89a3      	ldrh	r3, [r4, #12]
 800a7da:	f023 0303 	bic.w	r3, r3, #3
 800a7de:	f043 0301 	orr.w	r3, r3, #1
 800a7e2:	81a3      	strh	r3, [r4, #12]
 800a7e4:	89a3      	ldrh	r3, [r4, #12]
 800a7e6:	431d      	orrs	r5, r3
 800a7e8:	81a5      	strh	r5, [r4, #12]
 800a7ea:	e7cf      	b.n	800a78c <__smakebuf_r+0x18>

0800a7ec <_fstat_r>:
 800a7ec:	b538      	push	{r3, r4, r5, lr}
 800a7ee:	4d07      	ldr	r5, [pc, #28]	@ (800a80c <_fstat_r+0x20>)
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	4608      	mov	r0, r1
 800a7f6:	4611      	mov	r1, r2
 800a7f8:	602b      	str	r3, [r5, #0]
 800a7fa:	f7f8 f85f 	bl	80028bc <_fstat>
 800a7fe:	1c43      	adds	r3, r0, #1
 800a800:	d102      	bne.n	800a808 <_fstat_r+0x1c>
 800a802:	682b      	ldr	r3, [r5, #0]
 800a804:	b103      	cbz	r3, 800a808 <_fstat_r+0x1c>
 800a806:	6023      	str	r3, [r4, #0]
 800a808:	bd38      	pop	{r3, r4, r5, pc}
 800a80a:	bf00      	nop
 800a80c:	2000070c 	.word	0x2000070c

0800a810 <_isatty_r>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	4d06      	ldr	r5, [pc, #24]	@ (800a82c <_isatty_r+0x1c>)
 800a814:	2300      	movs	r3, #0
 800a816:	4604      	mov	r4, r0
 800a818:	4608      	mov	r0, r1
 800a81a:	602b      	str	r3, [r5, #0]
 800a81c:	f7f8 f85e 	bl	80028dc <_isatty>
 800a820:	1c43      	adds	r3, r0, #1
 800a822:	d102      	bne.n	800a82a <_isatty_r+0x1a>
 800a824:	682b      	ldr	r3, [r5, #0]
 800a826:	b103      	cbz	r3, 800a82a <_isatty_r+0x1a>
 800a828:	6023      	str	r3, [r4, #0]
 800a82a:	bd38      	pop	{r3, r4, r5, pc}
 800a82c:	2000070c 	.word	0x2000070c

0800a830 <_init>:
 800a830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a832:	bf00      	nop
 800a834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a836:	bc08      	pop	{r3}
 800a838:	469e      	mov	lr, r3
 800a83a:	4770      	bx	lr

0800a83c <_fini>:
 800a83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83e:	bf00      	nop
 800a840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a842:	bc08      	pop	{r3}
 800a844:	469e      	mov	lr, r3
 800a846:	4770      	bx	lr
