
106_Messungen_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a278  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c38  0800a458  0800a458  0000b458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b090  0800b090  0000d1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b090  0800b090  0000c090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b098  0800b098  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b098  0800b098  0000c098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b09c  0800b09c  0000c09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b0a0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  200001e4  0800b284  0000d1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  0800b284  0000d5fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c101  00000000  00000000  0000d214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000353d  00000000  00000000  00029315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  0002c858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001332  00000000  00000000  0002e110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a63f  00000000  00000000  0002f442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cbbc  00000000  00000000  00059a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001171f2  00000000  00000000  0007663d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018d82f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bfc  00000000  00000000  0018d874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00195470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a440 	.word	0x0800a440

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800a440 	.word	0x0800a440

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
 8000f92:	460b      	mov	r3, r1
 8000f94:	80bb      	strh	r3, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	88b9      	ldrh	r1, [r7, #4]
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fab5 	bl	8001510 <ST7735_DrawPixel>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000fae:	b590      	push	{r4, r7, lr}
 8000fb0:	b085      	sub	sp, #20
 8000fb2:	af02      	add	r7, sp, #8
 8000fb4:	4604      	mov	r4, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4611      	mov	r1, r2
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4623      	mov	r3, r4
 8000fbe:	80fb      	strh	r3, [r7, #6]
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	80bb      	strh	r3, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000fcc:	88f8      	ldrh	r0, [r7, #6]
 8000fce:	88b9      	ldrh	r1, [r7, #4]
 8000fd0:	887a      	ldrh	r2, [r7, #2]
 8000fd2:	883c      	ldrh	r4, [r7, #0]
 8000fd4:	8b3b      	ldrh	r3, [r7, #24]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4623      	mov	r3, r4
 8000fda:	f000 fba3 	bl	8001724 <ST7735_FillRectangle>
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}

08000fe6 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	80fb      	strh	r3, [r7, #6]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	80bb      	strh	r3, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8000ff8:	887a      	ldrh	r2, [r7, #2]
 8000ffa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ffc0 	bl	8000f88 <drawPixel>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b089      	sub	sp, #36	@ 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	4604      	mov	r4, r0
 8001018:	4608      	mov	r0, r1
 800101a:	4611      	mov	r1, r2
 800101c:	461a      	mov	r2, r3
 800101e:	4623      	mov	r3, r4
 8001020:	80fb      	strh	r3, [r7, #6]
 8001022:	4603      	mov	r3, r0
 8001024:	80bb      	strh	r3, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]
 800102a:	4613      	mov	r3, r2
 800102c:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800102e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001032:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800103c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001040:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001048:	1acb      	subs	r3, r1, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	bfb8      	it	lt
 800104e:	425b      	neglt	r3, r3
 8001050:	429a      	cmp	r2, r3
 8001052:	bfcc      	ite	gt
 8001054:	2301      	movgt	r3, #1
 8001056:	2300      	movle	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	837b      	strh	r3, [r7, #26]
    if (steep) {
 800105c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00b      	beq.n	800107c <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	833b      	strh	r3, [r7, #24]
 8001068:	88bb      	ldrh	r3, [r7, #4]
 800106a:	80fb      	strh	r3, [r7, #6]
 800106c:	8b3b      	ldrh	r3, [r7, #24]
 800106e:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	82fb      	strh	r3, [r7, #22]
 8001074:	883b      	ldrh	r3, [r7, #0]
 8001076:	807b      	strh	r3, [r7, #2]
 8001078:	8afb      	ldrh	r3, [r7, #22]
 800107a:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 800107c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001080:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001084:	429a      	cmp	r2, r3
 8001086:	dd0b      	ble.n	80010a0 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	82bb      	strh	r3, [r7, #20]
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	80fb      	strh	r3, [r7, #6]
 8001090:	8abb      	ldrh	r3, [r7, #20]
 8001092:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8001094:	88bb      	ldrh	r3, [r7, #4]
 8001096:	827b      	strh	r3, [r7, #18]
 8001098:	883b      	ldrh	r3, [r7, #0]
 800109a:	80bb      	strh	r3, [r7, #4]
 800109c:	8a7b      	ldrh	r3, [r7, #18]
 800109e:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80010a0:	887a      	ldrh	r2, [r7, #2]
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 80010aa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80010ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bfb8      	it	lt
 80010b8:	425b      	neglt	r3, r3
 80010ba:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 80010bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010c0:	0fda      	lsrs	r2, r3, #31
 80010c2:	4413      	add	r3, r2
 80010c4:	105b      	asrs	r3, r3, #1
 80010c6:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 80010c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80010cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	da02      	bge.n	80010da <writeLine+0xca>
        ystep = 1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	83bb      	strh	r3, [r7, #28]
 80010d8:	e031      	b.n	800113e <writeLine+0x12e>
    } else {
        ystep = -1;
 80010da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010de:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 80010e0:	e02d      	b.n	800113e <writeLine+0x12e>
        if (steep) {
 80010e2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d008      	beq.n	80010fc <writeLine+0xec>
            writePixel(y0, x0, color);
 80010ea:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80010ec:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80010f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff76 	bl	8000fe6 <writePixel>
 80010fa:	e007      	b.n	800110c <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 80010fc:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80010fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff6d 	bl	8000fe6 <writePixel>
        }
        err -= dy;
 800110c:	8bfa      	ldrh	r2, [r7, #30]
 800110e:	89fb      	ldrh	r3, [r7, #14]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	b29b      	uxth	r3, r3
 8001114:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 8001116:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800111a:	2b00      	cmp	r3, #0
 800111c:	da09      	bge.n	8001132 <writeLine+0x122>
            y0 += ystep;
 800111e:	88ba      	ldrh	r2, [r7, #4]
 8001120:	8bbb      	ldrh	r3, [r7, #28]
 8001122:	4413      	add	r3, r2
 8001124:	b29b      	uxth	r3, r3
 8001126:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8001128:	8bfa      	ldrh	r2, [r7, #30]
 800112a:	8a3b      	ldrh	r3, [r7, #16]
 800112c:	4413      	add	r3, r2
 800112e:	b29b      	uxth	r3, r3
 8001130:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 8001132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001136:	b29b      	uxth	r3, r3
 8001138:	3301      	adds	r3, #1
 800113a:	b29b      	uxth	r3, r3
 800113c:	80fb      	strh	r3, [r7, #6]
 800113e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001142:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001146:	429a      	cmp	r2, r3
 8001148:	ddcb      	ble.n	80010e2 <writeLine+0xd2>
        }
    }
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	3724      	adds	r7, #36	@ 0x24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd90      	pop	{r4, r7, pc}

08001154 <drawFastHLine>:
void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
	writeLine(x, y, x, y + h - 1, color);
}
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b085      	sub	sp, #20
 8001158:	af02      	add	r7, sp, #8
 800115a:	4604      	mov	r4, r0
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4623      	mov	r3, r4
 8001164:	80fb      	strh	r3, [r7, #6]
 8001166:	4603      	mov	r3, r0
 8001168:	80bb      	strh	r3, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	807b      	strh	r3, [r7, #2]
 800116e:	4613      	mov	r3, r2
 8001170:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 8001172:	88fa      	ldrh	r2, [r7, #6]
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	4413      	add	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	3b01      	subs	r3, #1
 800117c:	b29b      	uxth	r3, r3
 800117e:	b21a      	sxth	r2, r3
 8001180:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001184:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001188:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800118c:	883b      	ldrh	r3, [r7, #0]
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	4623      	mov	r3, r4
 8001192:	f7ff ff3d 	bl	8001010 <writeLine>
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bd90      	pop	{r4, r7, pc}
	...

080011a0 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <fillScreen+0x2c>)
 80011ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011b0:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <fillScreen+0x30>)
 80011b2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	460b      	mov	r3, r1
 80011bc:	2100      	movs	r1, #0
 80011be:	2000      	movs	r0, #0
 80011c0:	f7ff fef5 	bl	8000fae <fillRect>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000200 	.word	0x20000200
 80011d0:	20000202 	.word	0x20000202

080011d4 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e2:	f003 fca9 	bl	8004b38 <HAL_GPIO_WritePin>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}

080011ea <ST7735_Unselect>:

void ST7735_Unselect()
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f8:	f003 fc9e 	bl	8004b38 <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <ST7735_Reset>:

void ST7735_Reset()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2140      	movs	r1, #64	@ 0x40
 8001208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120c:	f003 fc94 	bl	8004b38 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001210:	2005      	movs	r0, #5
 8001212:	f001 fc5b 	bl	8002acc <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8001216:	2201      	movs	r2, #1
 8001218:	2140      	movs	r1, #64	@ 0x40
 800121a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800121e:	f003 fc8b 	bl	8004b38 <HAL_GPIO_WritePin>
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001238:	4806      	ldr	r0, [pc, #24]	@ (8001254 <ST7735_WriteCommand+0x2c>)
 800123a:	f003 fc7d 	bl	8004b38 <HAL_GPIO_WritePin>
		{

		}
	#endif
	#ifdef WITHOUT_DMA
		HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800123e:	1df9      	adds	r1, r7, #7
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	2201      	movs	r2, #1
 8001246:	4804      	ldr	r0, [pc, #16]	@ (8001258 <ST7735_WriteCommand+0x30>)
 8001248:	f004 fd9b 	bl	8005d82 <HAL_SPI_Transmit>
	#endif
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	48000400 	.word	0x48000400
 8001258:	200002e4 	.word	0x200002e4

0800125c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001266:	2201      	movs	r2, #1
 8001268:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800126c:	4807      	ldr	r0, [pc, #28]	@ (800128c <ST7735_WriteData+0x30>)
 800126e:	f003 fc63 	bl	8004b38 <HAL_GPIO_WritePin>
    	{

    	}
	#endif
	#ifdef WITHOUT_DMA
    	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b29a      	uxth	r2, r3
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4804      	ldr	r0, [pc, #16]	@ (8001290 <ST7735_WriteData+0x34>)
 800127e:	f004 fd80 	bl	8005d82 <HAL_SPI_Transmit>
	#endif
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	48000400 	.word	0x48000400
 8001290:	200002e4 	.word	0x200002e4

08001294 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80012a6:	e034      	b.n	8001312 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80012b2:	7afb      	ldrb	r3, [r7, #11]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ffb7 	bl	8001228 <ST7735_WriteCommand>

        numArgs = *addr++;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	1c5a      	adds	r2, r3, #1
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80012c4:	7abb      	ldrb	r3, [r7, #10]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012cc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80012ce:	7abb      	ldrb	r3, [r7, #10]
 80012d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012d4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80012d6:	7abb      	ldrb	r3, [r7, #10]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80012dc:	7abb      	ldrb	r3, [r7, #10]
 80012de:	4619      	mov	r1, r3
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ffbb 	bl	800125c <ST7735_WriteData>
            addr += numArgs;
 80012e6:	7abb      	ldrb	r3, [r7, #10]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80012ee:	89bb      	ldrh	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00e      	beq.n	8001312 <DisplayInit+0x7e>
            ms = *addr++;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80012fe:	89bb      	ldrh	r3, [r7, #12]
 8001300:	2bff      	cmp	r3, #255	@ 0xff
 8001302:	d102      	bne.n	800130a <DisplayInit+0x76>
 8001304:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001308:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800130a:	89bb      	ldrh	r3, [r7, #12]
 800130c:	4618      	mov	r0, r3
 800130e:	f001 fbdd 	bl	8002acc <HAL_Delay>
    while(numCommands--) {
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	1e5a      	subs	r2, r3, #1
 8001316:	73fa      	strb	r2, [r7, #15]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1c5      	bne.n	80012a8 <DisplayInit+0x14>
        }
    }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	4604      	mov	r4, r0
 8001330:	4608      	mov	r0, r1
 8001332:	4611      	mov	r1, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4623      	mov	r3, r4
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	4603      	mov	r3, r0
 800133c:	71bb      	strb	r3, [r7, #6]
 800133e:	460b      	mov	r3, r1
 8001340:	717b      	strb	r3, [r7, #5]
 8001342:	4613      	mov	r3, r2
 8001344:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001346:	202a      	movs	r0, #42	@ 0x2a
 8001348:	f7ff ff6e 	bl	8001228 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800134c:	2300      	movs	r3, #0
 800134e:	733b      	strb	r3, [r7, #12]
 8001350:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <ST7735_SetAddressWindow+0x88>)
 8001352:	781a      	ldrb	r2, [r3, #0]
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4413      	add	r3, r2
 8001358:	b2db      	uxtb	r3, r3
 800135a:	737b      	strb	r3, [r7, #13]
 800135c:	2300      	movs	r3, #0
 800135e:	73bb      	strb	r3, [r7, #14]
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <ST7735_SetAddressWindow+0x88>)
 8001362:	781a      	ldrb	r2, [r3, #0]
 8001364:	797b      	ldrb	r3, [r7, #5]
 8001366:	4413      	add	r3, r2
 8001368:	b2db      	uxtb	r3, r3
 800136a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2104      	movs	r1, #4
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff72 	bl	800125c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001378:	202b      	movs	r0, #43	@ 0x2b
 800137a:	f7ff ff55 	bl	8001228 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800137e:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <ST7735_SetAddressWindow+0x8c>)
 8001380:	781a      	ldrb	r2, [r3, #0]
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	4413      	add	r3, r2
 8001386:	b2db      	uxtb	r3, r3
 8001388:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800138a:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <ST7735_SetAddressWindow+0x8c>)
 800138c:	781a      	ldrb	r2, [r3, #0]
 800138e:	793b      	ldrb	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	b2db      	uxtb	r3, r3
 8001394:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2104      	movs	r1, #4
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff5d 	bl	800125c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80013a2:	202c      	movs	r0, #44	@ 0x2c
 80013a4:	f7ff ff40 	bl	8001228 <ST7735_WriteCommand>
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	20000207 	.word	0x20000207
 80013b4:	20000208 	.word	0x20000208

080013b8 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 80013c2:	f7ff ff07 	bl	80011d4 <ST7735_Select>
    ST7735_Reset();
 80013c6:	f7ff ff1b 	bl	8001200 <ST7735_Reset>
    DisplayInit(init_cmds1);
 80013ca:	480c      	ldr	r0, [pc, #48]	@ (80013fc <ST7735_Init+0x44>)
 80013cc:	f7ff ff62 	bl	8001294 <DisplayInit>
    DisplayInit(init_cmds2);
 80013d0:	480b      	ldr	r0, [pc, #44]	@ (8001400 <ST7735_Init+0x48>)
 80013d2:	f7ff ff5f 	bl	8001294 <DisplayInit>
    DisplayInit(init_cmds3);
 80013d6:	480b      	ldr	r0, [pc, #44]	@ (8001404 <ST7735_Init+0x4c>)
 80013d8:	f7ff ff5c 	bl	8001294 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <ST7735_Init+0x50>)
 80013de:	2202      	movs	r2, #2
 80013e0:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <ST7735_Init+0x54>)
 80013e4:	2203      	movs	r2, #3
 80013e6:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f810 	bl	8001410 <ST7735_SetRotation>
    ST7735_Unselect();
 80013f0:	f7ff fefb 	bl	80011ea <ST7735_Unselect>

}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	0800a4fc 	.word	0x0800a4fc
 8001400:	0800a534 	.word	0x0800a534
 8001404:	0800a544 	.word	0x0800a544
 8001408:	20000205 	.word	0x20000205
 800140c:	20000206 	.word	0x20000206

08001410 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b33      	ldr	r3, [pc, #204]	@ (80014f4 <ST7735_SetRotation+0xe4>)
 8001428:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800142a:	4b32      	ldr	r3, [pc, #200]	@ (80014f4 <ST7735_SetRotation+0xe4>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d84e      	bhi.n	80014d0 <ST7735_SetRotation+0xc0>
 8001432:	a201      	add	r2, pc, #4	@ (adr r2, 8001438 <ST7735_SetRotation+0x28>)
 8001434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001438:	08001449 	.word	0x08001449
 800143c:	0800146b 	.word	0x0800146b
 8001440:	0800148d 	.word	0x0800148d
 8001444:	080014af 	.word	0x080014af
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001448:	23c0      	movs	r3, #192	@ 0xc0
 800144a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800144c:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001452:	4b2a      	ldr	r3, [pc, #168]	@ (80014fc <ST7735_SetRotation+0xec>)
 8001454:	2280      	movs	r2, #128	@ 0x80
 8001456:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8001458:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <ST7735_SetRotation+0xf0>)
 800145a:	781a      	ldrb	r2, [r3, #0]
 800145c:	4b29      	ldr	r3, [pc, #164]	@ (8001504 <ST7735_SetRotation+0xf4>)
 800145e:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8001460:	4b29      	ldr	r3, [pc, #164]	@ (8001508 <ST7735_SetRotation+0xf8>)
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	4b29      	ldr	r3, [pc, #164]	@ (800150c <ST7735_SetRotation+0xfc>)
 8001466:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001468:	e032      	b.n	80014d0 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800146a:	23a0      	movs	r3, #160	@ 0xa0
 800146c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800146e:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <ST7735_SetRotation+0xec>)
 8001470:	2280      	movs	r2, #128	@ 0x80
 8001472:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001474:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 8001476:	2280      	movs	r2, #128	@ 0x80
 8001478:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800147a:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <ST7735_SetRotation+0xf0>)
 800147c:	781a      	ldrb	r2, [r3, #0]
 800147e:	4b23      	ldr	r3, [pc, #140]	@ (800150c <ST7735_SetRotation+0xfc>)
 8001480:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001482:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <ST7735_SetRotation+0xf8>)
 8001484:	781a      	ldrb	r2, [r3, #0]
 8001486:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <ST7735_SetRotation+0xf4>)
 8001488:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800148a:	e021      	b.n	80014d0 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001490:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 8001492:	2280      	movs	r2, #128	@ 0x80
 8001494:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001496:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <ST7735_SetRotation+0xec>)
 8001498:	2280      	movs	r2, #128	@ 0x80
 800149a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 800149c:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <ST7735_SetRotation+0xf0>)
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <ST7735_SetRotation+0xf4>)
 80014a2:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80014a4:	4b18      	ldr	r3, [pc, #96]	@ (8001508 <ST7735_SetRotation+0xf8>)
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	4b18      	ldr	r3, [pc, #96]	@ (800150c <ST7735_SetRotation+0xfc>)
 80014aa:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80014ac:	e010      	b.n	80014d0 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80014ae:	2360      	movs	r3, #96	@ 0x60
 80014b0:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <ST7735_SetRotation+0xec>)
 80014b4:	2280      	movs	r2, #128	@ 0x80
 80014b6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <ST7735_SetRotation+0xf0>)
 80014c0:	781a      	ldrb	r2, [r3, #0]
 80014c2:	4b12      	ldr	r3, [pc, #72]	@ (800150c <ST7735_SetRotation+0xfc>)
 80014c4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <ST7735_SetRotation+0xf8>)
 80014c8:	781a      	ldrb	r2, [r3, #0]
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <ST7735_SetRotation+0xf4>)
 80014cc:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80014ce:	bf00      	nop
  }
  ST7735_Select();
 80014d0:	f7ff fe80 	bl	80011d4 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80014d4:	2036      	movs	r0, #54	@ 0x36
 80014d6:	f7ff fea7 	bl	8001228 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80014da:	f107 030f 	add.w	r3, r7, #15
 80014de:	2101      	movs	r1, #1
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff febb 	bl	800125c <ST7735_WriteData>
  ST7735_Unselect();
 80014e6:	f7ff fe80 	bl	80011ea <ST7735_Unselect>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000204 	.word	0x20000204
 80014f8:	20000202 	.word	0x20000202
 80014fc:	20000200 	.word	0x20000200
 8001500:	20000205 	.word	0x20000205
 8001504:	20000207 	.word	0x20000207
 8001508:	20000206 	.word	0x20000206
 800150c:	20000208 	.word	0x20000208

08001510 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
 800151a:	460b      	mov	r3, r1
 800151c:	80bb      	strh	r3, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <ST7735_DrawPixel+0x74>)
 8001526:	f9b2 2000 	ldrsh.w	r2, [r2]
 800152a:	4293      	cmp	r3, r2
 800152c:	da26      	bge.n	800157c <ST7735_DrawPixel+0x6c>
 800152e:	88bb      	ldrh	r3, [r7, #4]
 8001530:	4a15      	ldr	r2, [pc, #84]	@ (8001588 <ST7735_DrawPixel+0x78>)
 8001532:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001536:	4293      	cmp	r3, r2
 8001538:	da20      	bge.n	800157c <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 800153a:	f7ff fe4b 	bl	80011d4 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	b2d8      	uxtb	r0, r3
 8001542:	88bb      	ldrh	r3, [r7, #4]
 8001544:	b2d9      	uxtb	r1, r3
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	3301      	adds	r3, #1
 800154c:	b2da      	uxtb	r2, r3
 800154e:	88bb      	ldrh	r3, [r7, #4]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	3301      	adds	r3, #1
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f7ff fee7 	bl	8001328 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	b29b      	uxth	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	733b      	strb	r3, [r7, #12]
 8001564:	887b      	ldrh	r3, [r7, #2]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	2102      	movs	r1, #2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe73 	bl	800125c <ST7735_WriteData>

    ST7735_Unselect();
 8001576:	f7ff fe38 	bl	80011ea <ST7735_Unselect>
 800157a:	e000      	b.n	800157e <ST7735_DrawPixel+0x6e>
        return;
 800157c:	bf00      	nop
}
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000200 	.word	0x20000200
 8001588:	20000202 	.word	0x20000202

0800158c <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800158c:	b082      	sub	sp, #8
 800158e:	b590      	push	{r4, r7, lr}
 8001590:	b089      	sub	sp, #36	@ 0x24
 8001592:	af00      	add	r7, sp, #0
 8001594:	637b      	str	r3, [r7, #52]	@ 0x34
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
 800159a:	460b      	mov	r3, r1
 800159c:	80bb      	strh	r3, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	b2d8      	uxtb	r0, r3
 80015a6:	88bb      	ldrh	r3, [r7, #4]
 80015a8:	b2d9      	uxtb	r1, r3
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80015b2:	4413      	add	r3, r2
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b2dc      	uxtb	r4, r3
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80015c2:	4413      	add	r3, r2
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	3b01      	subs	r3, #1
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4622      	mov	r2, r4
 80015cc:	f7ff feac 	bl	8001328 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
 80015d4:	e043      	b.n	800165e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80015d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	3b20      	subs	r3, #32
 80015dc:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80015e0:	fb01 f303 	mul.w	r3, r1, r3
 80015e4:	4619      	mov	r1, r3
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	440b      	add	r3, r1
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	e029      	b.n	800164c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00e      	beq.n	8001626 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001608:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	b29b      	uxth	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	743b      	strb	r3, [r7, #16]
 8001612:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001614:	b2db      	uxtb	r3, r3
 8001616:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	2102      	movs	r1, #2
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fe1c 	bl	800125c <ST7735_WriteData>
 8001624:	e00f      	b.n	8001646 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001626:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	b29b      	uxth	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	733b      	strb	r3, [r7, #12]
 8001632:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001636:	b2db      	uxtb	r3, r3
 8001638:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	2102      	movs	r1, #2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fe0b 	bl	800125c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	3301      	adds	r3, #1
 800164a:	61bb      	str	r3, [r7, #24]
 800164c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001650:	461a      	mov	r2, r3
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4293      	cmp	r3, r2
 8001656:	d3cf      	bcc.n	80015f8 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	3301      	adds	r3, #1
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001662:	461a      	mov	r2, r3
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	4293      	cmp	r3, r2
 8001668:	d3b5      	bcc.n	80015d6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800166a:	bf00      	nop
 800166c:	bf00      	nop
 800166e:	3724      	adds	r7, #36	@ 0x24
 8001670:	46bd      	mov	sp, r7
 8001672:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001676:	b002      	add	sp, #8
 8001678:	4770      	bx	lr
	...

0800167c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800167c:	b082      	sub	sp, #8
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af04      	add	r7, sp, #16
 8001684:	603a      	str	r2, [r7, #0]
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	4603      	mov	r3, r0
 800168a:	80fb      	strh	r3, [r7, #6]
 800168c:	460b      	mov	r3, r1
 800168e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001690:	f7ff fda0 	bl	80011d4 <ST7735_Select>

    while(*str) {
 8001694:	e033      	b.n	80016fe <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	7d3a      	ldrb	r2, [r7, #20]
 800169a:	4413      	add	r3, r2
 800169c:	4a1f      	ldr	r2, [pc, #124]	@ (800171c <ST7735_WriteString+0xa0>)
 800169e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016a2:	4293      	cmp	r3, r2
 80016a4:	db16      	blt.n	80016d4 <ST7735_WriteString+0x58>
            x = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80016aa:	7d7b      	ldrb	r3, [r7, #21]
 80016ac:	461a      	mov	r2, r3
 80016ae:	88bb      	ldrh	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 80016b4:	88bb      	ldrh	r3, [r7, #4]
 80016b6:	7d7a      	ldrb	r2, [r7, #21]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a19      	ldr	r2, [pc, #100]	@ (8001720 <ST7735_WriteString+0xa4>)
 80016bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016c0:	4293      	cmp	r3, r2
 80016c2:	da21      	bge.n	8001708 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b20      	cmp	r3, #32
 80016ca:	d103      	bne.n	80016d4 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	603b      	str	r3, [r7, #0]
                continue;
 80016d2:	e014      	b.n	80016fe <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	781a      	ldrb	r2, [r3, #0]
 80016d8:	88b9      	ldrh	r1, [r7, #4]
 80016da:	88f8      	ldrh	r0, [r7, #6]
 80016dc:	8c3b      	ldrh	r3, [r7, #32]
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	8bbb      	ldrh	r3, [r7, #28]
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f7ff ff4f 	bl	800158c <ST7735_WriteChar>
        x += font.width;
 80016ee:	7d3b      	ldrb	r3, [r7, #20]
 80016f0:	461a      	mov	r2, r3
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	4413      	add	r3, r2
 80016f6:	80fb      	strh	r3, [r7, #6]
        str++;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	603b      	str	r3, [r7, #0]
    while(*str) {
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1c7      	bne.n	8001696 <ST7735_WriteString+0x1a>
 8001706:	e000      	b.n	800170a <ST7735_WriteString+0x8e>
                break;
 8001708:	bf00      	nop
    }

    ST7735_Unselect();
 800170a:	f7ff fd6e 	bl	80011ea <ST7735_Unselect>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001718:	b002      	add	sp, #8
 800171a:	4770      	bx	lr
 800171c:	20000200 	.word	0x20000200
 8001720:	20000202 	.word	0x20000202

08001724 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	4604      	mov	r4, r0
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4623      	mov	r3, r4
 8001734:	80fb      	strh	r3, [r7, #6]
 8001736:	4603      	mov	r3, r0
 8001738:	80bb      	strh	r3, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	807b      	strh	r3, [r7, #2]
 800173e:	4613      	mov	r3, r2
 8001740:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8001742:	88fb      	ldrh	r3, [r7, #6]
 8001744:	4a38      	ldr	r2, [pc, #224]	@ (8001828 <ST7735_FillRectangle+0x104>)
 8001746:	f9b2 2000 	ldrsh.w	r2, [r2]
 800174a:	4293      	cmp	r3, r2
 800174c:	da67      	bge.n	800181e <ST7735_FillRectangle+0xfa>
 800174e:	88bb      	ldrh	r3, [r7, #4]
 8001750:	4a36      	ldr	r2, [pc, #216]	@ (800182c <ST7735_FillRectangle+0x108>)
 8001752:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001756:	4293      	cmp	r3, r2
 8001758:	da61      	bge.n	800181e <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 800175a:	88fa      	ldrh	r2, [r7, #6]
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	4413      	add	r3, r2
 8001760:	4a31      	ldr	r2, [pc, #196]	@ (8001828 <ST7735_FillRectangle+0x104>)
 8001762:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001766:	4293      	cmp	r3, r2
 8001768:	dd06      	ble.n	8001778 <ST7735_FillRectangle+0x54>
 800176a:	4b2f      	ldr	r3, [pc, #188]	@ (8001828 <ST7735_FillRectangle+0x104>)
 800176c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001770:	b29a      	uxth	r2, r3
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8001778:	88ba      	ldrh	r2, [r7, #4]
 800177a:	883b      	ldrh	r3, [r7, #0]
 800177c:	4413      	add	r3, r2
 800177e:	4a2b      	ldr	r2, [pc, #172]	@ (800182c <ST7735_FillRectangle+0x108>)
 8001780:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001784:	4293      	cmp	r3, r2
 8001786:	dd06      	ble.n	8001796 <ST7735_FillRectangle+0x72>
 8001788:	4b28      	ldr	r3, [pc, #160]	@ (800182c <ST7735_FillRectangle+0x108>)
 800178a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178e:	b29a      	uxth	r2, r3
 8001790:	88bb      	ldrh	r3, [r7, #4]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001796:	f7ff fd1d 	bl	80011d4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	b2d8      	uxtb	r0, r3
 800179e:	88bb      	ldrh	r3, [r7, #4]
 80017a0:	b2d9      	uxtb	r1, r3
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	887b      	ldrh	r3, [r7, #2]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b2dc      	uxtb	r4, r3
 80017b2:	88bb      	ldrh	r3, [r7, #4]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	883b      	ldrh	r3, [r7, #0]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	3b01      	subs	r3, #1
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	4622      	mov	r2, r4
 80017c4:	f7ff fdb0 	bl	8001328 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80017c8:	8c3b      	ldrh	r3, [r7, #32]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	733b      	strb	r3, [r7, #12]
 80017d2:	8c3b      	ldrh	r3, [r7, #32]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017de:	4814      	ldr	r0, [pc, #80]	@ (8001830 <ST7735_FillRectangle+0x10c>)
 80017e0:	f003 f9aa 	bl	8004b38 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80017e4:	883b      	ldrh	r3, [r7, #0]
 80017e6:	80bb      	strh	r3, [r7, #4]
 80017e8:	e013      	b.n	8001812 <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	80fb      	strh	r3, [r7, #6]
 80017ee:	e00a      	b.n	8001806 <ST7735_FillRectangle+0xe2>
				{

				}
			#endif
			#ifdef WITHOUT_DMA
				HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80017f0:	f107 010c 	add.w	r1, r7, #12
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
 80017f8:	2202      	movs	r2, #2
 80017fa:	480e      	ldr	r0, [pc, #56]	@ (8001834 <ST7735_FillRectangle+0x110>)
 80017fc:	f004 fac1 	bl	8005d82 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	3b01      	subs	r3, #1
 8001804:	80fb      	strh	r3, [r7, #6]
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f1      	bne.n	80017f0 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 800180c:	88bb      	ldrh	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	80bb      	strh	r3, [r7, #4]
 8001812:	88bb      	ldrh	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1e8      	bne.n	80017ea <ST7735_FillRectangle+0xc6>
			#endif
        }
    }

    ST7735_Unselect();
 8001818:	f7ff fce7 	bl	80011ea <ST7735_Unselect>
 800181c:	e000      	b.n	8001820 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 800181e:	bf00      	nop
}
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bd90      	pop	{r4, r7, pc}
 8001826:	bf00      	nop
 8001828:	20000200 	.word	0x20000200
 800182c:	20000202 	.word	0x20000202
 8001830:	48000400 	.word	0x48000400
 8001834:	200002e4 	.word	0x200002e4

08001838 <ADC_Select_CH1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Select ADC Channels when using no DMA **************************************/
void ADC_Select_CH1(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 800183e:	463b      	mov	r3, r7
 8001840:	2220      	movs	r2, #32
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f006 fd30 	bl	80082aa <memset>
	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 800184a:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <ADC_Select_CH1+0x48>)
 800184c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800184e:	2306      	movs	r3, #6
 8001850:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001852:	2304      	movs	r3, #4
 8001854:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001856:	237f      	movs	r3, #127	@ 0x7f
 8001858:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800185a:	2304      	movs	r3, #4
 800185c:	613b      	str	r3, [r7, #16]
	  sConfig.Offset = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001862:	463b      	mov	r3, r7
 8001864:	4619      	mov	r1, r3
 8001866:	4807      	ldr	r0, [pc, #28]	@ (8001884 <ADC_Select_CH1+0x4c>)
 8001868:	f001 ffb4 	bl	80037d4 <HAL_ADC_ConfigChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <ADC_Select_CH1+0x3e>
	  {
	    Error_Handler();
 8001872:	f000 fc2f 	bl	80020d4 <Error_Handler>
	  }
}
 8001876:	bf00      	nop
 8001878:	3720      	adds	r7, #32
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	04300002 	.word	0x04300002
 8001884:	2000020c 	.word	0x2000020c

08001888 <HAL_GPIO_EXTI_Callback>:
//	    Error_Handler();
//	  }
//}
/* Interrupts *****************************************************************/
// GPIO Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	// Interrupt Routine
	switch (GPIO_Pin) {
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001898:	d007      	beq.n	80018aa <HAL_GPIO_EXTI_Callback+0x22>
 800189a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800189e:	dc18      	bgt.n	80018d2 <HAL_GPIO_EXTI_Callback+0x4a>
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d018      	beq.n	80018d6 <HAL_GPIO_EXTI_Callback+0x4e>
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d018      	beq.n	80018da <HAL_GPIO_EXTI_Callback+0x52>
	case Tast1_EXTI1_Pin: // Taster1 pressed
		break;
	case Tast2_EXTI2_Pin: // Taster2 pressed
		break;
	default:
		break;
 80018a8:	e013      	b.n	80018d2 <HAL_GPIO_EXTI_Callback+0x4a>
		switch (handler_state) {
 80018aa:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <HAL_GPIO_EXTI_Callback+0x5c>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d002      	beq.n	80018b8 <HAL_GPIO_EXTI_Callback+0x30>
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d004      	beq.n	80018c0 <HAL_GPIO_EXTI_Callback+0x38>
 80018b6:	e007      	b.n	80018c8 <HAL_GPIO_EXTI_Callback+0x40>
			set_handler_state(ADC_Values);
 80018b8:	2001      	movs	r0, #1
 80018ba:	f001 f831 	bl	8002920 <set_handler_state>
			break;
 80018be:	e007      	b.n	80018d0 <HAL_GPIO_EXTI_Callback+0x48>
			set_handler_state(IDLE);
 80018c0:	2000      	movs	r0, #0
 80018c2:	f001 f82d 	bl	8002920 <set_handler_state>
			break;
 80018c6:	e003      	b.n	80018d0 <HAL_GPIO_EXTI_Callback+0x48>
			set_handler_state(IDLE);
 80018c8:	2000      	movs	r0, #0
 80018ca:	f001 f829 	bl	8002920 <set_handler_state>
			break;
 80018ce:	bf00      	nop
		break;
 80018d0:	e004      	b.n	80018dc <HAL_GPIO_EXTI_Callback+0x54>
		break;
 80018d2:	bf00      	nop
 80018d4:	e002      	b.n	80018dc <HAL_GPIO_EXTI_Callback+0x54>
		break;
 80018d6:	bf00      	nop
 80018d8:	e000      	b.n	80018dc <HAL_GPIO_EXTI_Callback+0x54>
		break;
 80018da:	bf00      	nop
	}
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	2000047c 	.word	0x2000047c

080018e8 <HAL_TIM_PeriodElapsedCallback>:

// Timer timeout Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	@ 0x30
 80018ec:	af04      	add	r7, sp, #16
 80018ee:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f0:	b672      	cpsid	i
}
 80018f2:	bf00      	nop

	__disable_irq();
	// Überprüfe welcher Timer diese callback Funktion aufruft
	// Time_val um 100ms inkrementieren
	if (htim == &htim16) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a77      	ldr	r2, [pc, #476]	@ (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d10c      	bne.n	8001916 <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 80018fc:	2108      	movs	r1, #8
 80018fe:	4876      	ldr	r0, [pc, #472]	@ (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001900:	f003 f932 	bl	8004b68 <HAL_GPIO_TogglePin>
		if (handler_state == ADC_Values) {
 8001904:	4b75      	ldr	r3, [pc, #468]	@ (8001adc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b01      	cmp	r3, #1
 800190a:	f040 80dc 	bne.w	8001ac6 <HAL_TIM_PeriodElapsedCallback+0x1de>
			inc_handler_currentTime(100);
 800190e:	2064      	movs	r0, #100	@ 0x64
 8001910:	f001 f824 	bl	800295c <inc_handler_currentTime>
 8001914:	e0d7      	b.n	8001ac6 <HAL_TIM_PeriodElapsedCallback+0x1de>
		}
	}
	// Refresh Display every 0.5s
	else if(htim == &htim17){
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a71      	ldr	r2, [pc, #452]	@ (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	f040 80d3 	bne.w	8001ac6 <HAL_TIM_PeriodElapsedCallback+0x1de>
		switch (handler_state) {
 8001920:	4b6e      	ldr	r3, [pc, #440]	@ (8001adc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <HAL_TIM_PeriodElapsedCallback+0x46>
 8001928:	2b01      	cmp	r3, #1
 800192a:	d046      	beq.n	80019ba <HAL_TIM_PeriodElapsedCallback+0xd2>
 800192c:	e0c7      	b.n	8001abe <HAL_TIM_PeriodElapsedCallback+0x1d6>
		case IDLE:
			ST7735_WriteString(0, px_ofs2, "Poti1: xx", Font_7x10, GREEN, BLACK);
 800192e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	4619      	mov	r1, r3
 8001934:	4b6c      	ldr	r3, [pc, #432]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001936:	2200      	movs	r2, #0
 8001938:	9202      	str	r2, [sp, #8]
 800193a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800193e:	9201      	str	r2, [sp, #4]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	9200      	str	r2, [sp, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a69      	ldr	r2, [pc, #420]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff fe97 	bl	800167c <ST7735_WriteString>
			ST7735_WriteString(0, 2*px_ofs2, "Poti2: xx", Font_7x10, GREEN, BLACK);
 800194e:	4b65      	ldr	r3, [pc, #404]	@ (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	b299      	uxth	r1, r3
 8001956:	4b64      	ldr	r3, [pc, #400]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001958:	2200      	movs	r2, #0
 800195a:	9202      	str	r2, [sp, #8]
 800195c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001960:	9201      	str	r2, [sp, #4]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	9200      	str	r2, [sp, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a61      	ldr	r2, [pc, #388]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800196a:	2000      	movs	r0, #0
 800196c:	f7ff fe86 	bl	800167c <ST7735_WriteString>
			ST7735_WriteString(0, 3*px_ofs2, "BNC1: xx", Font_7x10, GREEN, BLACK);
 8001970:	4b5c      	ldr	r3, [pc, #368]	@ (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	0052      	lsls	r2, r2, #1
 8001978:	4413      	add	r3, r2
 800197a:	b299      	uxth	r1, r3
 800197c:	4b5a      	ldr	r3, [pc, #360]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800197e:	2200      	movs	r2, #0
 8001980:	9202      	str	r2, [sp, #8]
 8001982:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001986:	9201      	str	r2, [sp, #4]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	9200      	str	r2, [sp, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a59      	ldr	r2, [pc, #356]	@ (8001af4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001990:	2000      	movs	r0, #0
 8001992:	f7ff fe73 	bl	800167c <ST7735_WriteString>
			ST7735_WriteString(0, 4*px_ofs2, "BNC2: xx", Font_7x10, GREEN, BLACK);
 8001996:	4b53      	ldr	r3, [pc, #332]	@ (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	b299      	uxth	r1, r3
 800199e:	4b52      	ldr	r3, [pc, #328]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	9202      	str	r2, [sp, #8]
 80019a4:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80019a8:	9201      	str	r2, [sp, #4]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	9200      	str	r2, [sp, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a51      	ldr	r2, [pc, #324]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80019b2:	2000      	movs	r0, #0
 80019b4:	f7ff fe62 	bl	800167c <ST7735_WriteString>
			break;
 80019b8:	e085      	b.n	8001ac6 <HAL_TIM_PeriodElapsedCallback+0x1de>
		case ADC_Values:
			adc_values* ptr = get_adc_values();
 80019ba:	f000 ffe3 	bl	8002984 <get_adc_values>
 80019be:	61f8      	str	r0, [r7, #28]
			char msg[13];
			sprintf(msg, "Poti1: %2.2fV", ptr->poti1_Vf);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fde7 	bl	8000598 <__aeabi_f2d>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	f107 000c 	add.w	r0, r7, #12
 80019d2:	494a      	ldr	r1, [pc, #296]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x214>)
 80019d4:	f006 fc06 	bl	80081e4 <siprintf>
			ST7735_WriteString(0, px_ofs2, msg, Font_7x10, GREEN, BLACK);
 80019d8:	4b42      	ldr	r3, [pc, #264]	@ (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	4b42      	ldr	r3, [pc, #264]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80019e0:	f107 010c 	add.w	r1, r7, #12
 80019e4:	2200      	movs	r2, #0
 80019e6:	9202      	str	r2, [sp, #8]
 80019e8:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80019ec:	9201      	str	r2, [sp, #4]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	9200      	str	r2, [sp, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	460a      	mov	r2, r1
 80019f6:	4601      	mov	r1, r0
 80019f8:	2000      	movs	r0, #0
 80019fa:	f7ff fe3f 	bl	800167c <ST7735_WriteString>
			sprintf(msg, "Poti2: %2.2fV", ptr->poti2_Vf);
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fdc8 	bl	8000598 <__aeabi_f2d>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	f107 000c 	add.w	r0, r7, #12
 8001a10:	493b      	ldr	r1, [pc, #236]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001a12:	f006 fbe7 	bl	80081e4 <siprintf>
			ST7735_WriteString(0, 2*px_ofs2, msg, Font_7x10, GREEN, BLACK);
 8001a16:	4b33      	ldr	r3, [pc, #204]	@ (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	b299      	uxth	r1, r3
 8001a1e:	4b32      	ldr	r3, [pc, #200]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001a20:	f107 000c 	add.w	r0, r7, #12
 8001a24:	2200      	movs	r2, #0
 8001a26:	9202      	str	r2, [sp, #8]
 8001a28:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001a2c:	9201      	str	r2, [sp, #4]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	9200      	str	r2, [sp, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4602      	mov	r2, r0
 8001a36:	2000      	movs	r0, #0
 8001a38:	f7ff fe20 	bl	800167c <ST7735_WriteString>
			sprintf(msg, "BNC1:  %2.2fV", ptr->bnc1_Vf);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fda9 	bl	8000598 <__aeabi_f2d>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	f107 000c 	add.w	r0, r7, #12
 8001a4e:	492d      	ldr	r1, [pc, #180]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001a50:	f006 fbc8 	bl	80081e4 <siprintf>
			ST7735_WriteString(0, 3*px_ofs2, msg, Font_7x10, GREEN, BLACK);
 8001a54:	4b23      	ldr	r3, [pc, #140]	@ (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	0052      	lsls	r2, r2, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	b299      	uxth	r1, r3
 8001a60:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001a62:	f107 000c 	add.w	r0, r7, #12
 8001a66:	2200      	movs	r2, #0
 8001a68:	9202      	str	r2, [sp, #8]
 8001a6a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001a6e:	9201      	str	r2, [sp, #4]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	9200      	str	r2, [sp, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4602      	mov	r2, r0
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff fdff 	bl	800167c <ST7735_WriteString>
			sprintf(msg, "BNC2:  %2.2fV", ptr->bnc2_Vf);
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fd88 	bl	8000598 <__aeabi_f2d>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	f107 000c 	add.w	r0, r7, #12
 8001a90:	491d      	ldr	r1, [pc, #116]	@ (8001b08 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001a92:	f006 fba7 	bl	80081e4 <siprintf>
			ST7735_WriteString(0, 4*px_ofs2, msg, Font_7x10, GREEN, BLACK);
 8001a96:	4b13      	ldr	r3, [pc, #76]	@ (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	b299      	uxth	r1, r3
 8001a9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001aa0:	f107 000c 	add.w	r0, r7, #12
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	9202      	str	r2, [sp, #8]
 8001aa8:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001aac:	9201      	str	r2, [sp, #4]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	9200      	str	r2, [sp, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7ff fde0 	bl	800167c <ST7735_WriteString>
			break;
 8001abc:	e003      	b.n	8001ac6 <HAL_TIM_PeriodElapsedCallback+0x1de>
		default:
			set_handler_state(IDLE);
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f000 ff2e 	bl	8002920 <set_handler_state>
			break;
 8001ac4:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8001ac6:	b662      	cpsie	i
}
 8001ac8:	bf00      	nop
		}

	}
	__enable_irq();
}
 8001aca:	bf00      	nop
 8001acc:	3720      	adds	r7, #32
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000348 	.word	0x20000348
 8001ad8:	48000800 	.word	0x48000800
 8001adc:	2000047c 	.word	0x2000047c
 8001ae0:	20000394 	.word	0x20000394
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	0800a458 	.word	0x0800a458
 8001af0:	0800a464 	.word	0x0800a464
 8001af4:	0800a470 	.word	0x0800a470
 8001af8:	0800a47c 	.word	0x0800a47c
 8001afc:	0800a488 	.word	0x0800a488
 8001b00:	0800a498 	.word	0x0800a498
 8001b04:	0800a4a8 	.word	0x0800a4a8
 8001b08:	0800a4b8 	.word	0x0800a4b8

08001b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b10:	f000 ff6b 	bl	80029ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b14:	f000 f820 	bl	8001b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b18:	f000 fa22 	bl	8001f60 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b1c:	f000 f946 	bl	8001dac <MX_SPI1_Init>
  MX_TIM16_Init();
 8001b20:	f000 f982 	bl	8001e28 <MX_TIM16_Init>
  MX_ADC1_Init();
 8001b24:	f000 f864 	bl	8001bf0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001b28:	f000 f9ce 	bl	8001ec8 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8001b2c:	f000 f9a4 	bl	8001e78 <MX_TIM17_Init>
  MX_ADC2_Init();
 8001b30:	f000 f8d6 	bl	8001ce0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

	// Display Init
	ST7735_Init(1);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f7ff fc3f 	bl	80013b8 <ST7735_Init>
	fillScreen(BLACK);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff fb30 	bl	80011a0 <fillScreen>

	// Start Timers im Interrupt Modus
	HAL_TIM_Base_Start_IT(&htim16);
 8001b40:	4804      	ldr	r0, [pc, #16]	@ (8001b54 <main+0x48>)
 8001b42:	f004 fc4f 	bl	80063e4 <HAL_TIM_Base_Start_IT>

	// Set first State
	set_handler_state(IDLE);
 8001b46:	2000      	movs	r0, #0
 8001b48:	f000 feea 	bl	8002920 <set_handler_state>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Run StateMachine
		handler_task();
 8001b4c:	f000 fedc 	bl	8002908 <handler_task>
 8001b50:	e7fc      	b.n	8001b4c <main+0x40>
 8001b52:	bf00      	nop
 8001b54:	20000348 	.word	0x20000348

08001b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b094      	sub	sp, #80	@ 0x50
 8001b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b5e:	f107 0318 	add.w	r3, r7, #24
 8001b62:	2238      	movs	r2, #56	@ 0x38
 8001b64:	2100      	movs	r1, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f006 fb9f 	bl	80082aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
 8001b78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b7a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b7e:	f003 f825 	bl	8004bcc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b82:	2302      	movs	r3, #2
 8001b84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b8c:	2340      	movs	r3, #64	@ 0x40
 8001b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b90:	2302      	movs	r3, #2
 8001b92:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b94:	2302      	movs	r3, #2
 8001b96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001b98:	2304      	movs	r3, #4
 8001b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001b9c:	234b      	movs	r3, #75	@ 0x4b
 8001b9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bac:	f107 0318 	add.w	r3, r7, #24
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f003 f8bf 	bl	8004d34 <HAL_RCC_OscConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001bbc:	f000 fa8a 	bl	80020d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc0:	230f      	movs	r3, #15
 8001bc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	2104      	movs	r1, #4
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f003 fbbd 	bl	8005358 <HAL_RCC_ClockConfig>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001be4:	f000 fa76 	bl	80020d4 <Error_Handler>
  }
}
 8001be8:	bf00      	nop
 8001bea:	3750      	adds	r7, #80	@ 0x50
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	@ 0x30
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2220      	movs	r2, #32
 8001c06:	2100      	movs	r1, #0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f006 fb4e 	bl	80082aa <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c0e:	4b32      	ldr	r3, [pc, #200]	@ (8001cd8 <MX_ADC1_Init+0xe8>)
 8001c10:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001c14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c16:	4b30      	ldr	r3, [pc, #192]	@ (8001cd8 <MX_ADC1_Init+0xe8>)
 8001c18:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001c1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd8 <MX_ADC1_Init+0xe8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c24:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd8 <MX_ADC1_Init+0xe8>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd8 <MX_ADC1_Init+0xe8>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c30:	4b29      	ldr	r3, [pc, #164]	@ (8001cd8 <MX_ADC1_Init+0xe8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c36:	4b28      	ldr	r3, [pc, #160]	@ (8001cd8 <MX_ADC1_Init+0xe8>)
 8001c38:	2204      	movs	r2, #4
 8001c3a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c3c:	4b26      	ldr	r3, [pc, #152]	@ (8001cd8 <MX_ADC1_Init+0xe8>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c42:	4b25      	ldr	r3, [pc, #148]	@ (8001cd8 <MX_ADC1_Init+0xe8>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001c48:	4b23      	ldr	r3, [pc, #140]	@ (8001cd8 <MX_ADC1_Init+0xe8>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c4e:	4b22      	ldr	r3, [pc, #136]	@ (8001cd8 <MX_ADC1_Init+0xe8>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c56:	4b20      	ldr	r3, [pc, #128]	@ (8001cd8 <MX_ADC1_Init+0xe8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd8 <MX_ADC1_Init+0xe8>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c62:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd8 <MX_ADC1_Init+0xe8>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd8 <MX_ADC1_Init+0xe8>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001c70:	4b19      	ldr	r3, [pc, #100]	@ (8001cd8 <MX_ADC1_Init+0xe8>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c78:	4817      	ldr	r0, [pc, #92]	@ (8001cd8 <MX_ADC1_Init+0xe8>)
 8001c7a:	f001 f9c3 	bl	8003004 <HAL_ADC_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001c84:	f000 fa26 	bl	80020d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c90:	4619      	mov	r1, r3
 8001c92:	4811      	ldr	r0, [pc, #68]	@ (8001cd8 <MX_ADC1_Init+0xe8>)
 8001c94:	f002 fbb6 	bl	8004404 <HAL_ADCEx_MultiModeConfigChannel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001c9e:	f000 fa19 	bl	80020d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <MX_ADC1_Init+0xec>)
 8001ca4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ca6:	2306      	movs	r3, #6
 8001ca8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001caa:	2307      	movs	r3, #7
 8001cac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001cae:	237f      	movs	r3, #127	@ 0x7f
 8001cb0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4806      	ldr	r0, [pc, #24]	@ (8001cd8 <MX_ADC1_Init+0xe8>)
 8001cc0:	f001 fd88 	bl	80037d4 <HAL_ADC_ConfigChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001cca:	f000 fa03 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	3730      	adds	r7, #48	@ 0x30
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	2000020c 	.word	0x2000020c
 8001cdc:	04300002 	.word	0x04300002

08001ce0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	2220      	movs	r2, #32
 8001cea:	2100      	movs	r1, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f006 fadc 	bl	80082aa <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8001da0 <MX_ADC2_Init+0xc0>)
 8001cf4:	4a2b      	ldr	r2, [pc, #172]	@ (8001da4 <MX_ADC2_Init+0xc4>)
 8001cf6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cf8:	4b29      	ldr	r3, [pc, #164]	@ (8001da0 <MX_ADC2_Init+0xc0>)
 8001cfa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001cfe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001d00:	4b27      	ldr	r3, [pc, #156]	@ (8001da0 <MX_ADC2_Init+0xc0>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d06:	4b26      	ldr	r3, [pc, #152]	@ (8001da0 <MX_ADC2_Init+0xc0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001d0c:	4b24      	ldr	r3, [pc, #144]	@ (8001da0 <MX_ADC2_Init+0xc0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d12:	4b23      	ldr	r3, [pc, #140]	@ (8001da0 <MX_ADC2_Init+0xc0>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d18:	4b21      	ldr	r3, [pc, #132]	@ (8001da0 <MX_ADC2_Init+0xc0>)
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001d1e:	4b20      	ldr	r3, [pc, #128]	@ (8001da0 <MX_ADC2_Init+0xc0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001d24:	4b1e      	ldr	r3, [pc, #120]	@ (8001da0 <MX_ADC2_Init+0xc0>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001da0 <MX_ADC2_Init+0xc0>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001d30:	4b1b      	ldr	r3, [pc, #108]	@ (8001da0 <MX_ADC2_Init+0xc0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d38:	4b19      	ldr	r3, [pc, #100]	@ (8001da0 <MX_ADC2_Init+0xc0>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d3e:	4b18      	ldr	r3, [pc, #96]	@ (8001da0 <MX_ADC2_Init+0xc0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001d44:	4b16      	ldr	r3, [pc, #88]	@ (8001da0 <MX_ADC2_Init+0xc0>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	@ (8001da0 <MX_ADC2_Init+0xc0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001d52:	4b13      	ldr	r3, [pc, #76]	@ (8001da0 <MX_ADC2_Init+0xc0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d5a:	4811      	ldr	r0, [pc, #68]	@ (8001da0 <MX_ADC2_Init+0xc0>)
 8001d5c:	f001 f952 	bl	8003004 <HAL_ADC_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001d66:	f000 f9b5 	bl	80020d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001da8 <MX_ADC2_Init+0xc8>)
 8001d6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d6e:	2306      	movs	r3, #6
 8001d70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001d72:	2307      	movs	r3, #7
 8001d74:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d76:	237f      	movs	r3, #127	@ 0x7f
 8001d78:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d82:	463b      	mov	r3, r7
 8001d84:	4619      	mov	r1, r3
 8001d86:	4806      	ldr	r0, [pc, #24]	@ (8001da0 <MX_ADC2_Init+0xc0>)
 8001d88:	f001 fd24 	bl	80037d4 <HAL_ADC_ConfigChannel>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001d92:	f000 f99f 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d96:	bf00      	nop
 8001d98:	3720      	adds	r7, #32
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000278 	.word	0x20000278
 8001da4:	50000100 	.word	0x50000100
 8001da8:	47520000 	.word	0x47520000

08001dac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001db0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001db2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e24 <MX_SPI1_Init+0x78>)
 8001db4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001db6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001db8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001dbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dbe:	4b18      	ldr	r3, [pc, #96]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dc4:	4b16      	ldr	r3, [pc, #88]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001dc6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001dca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dcc:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dd2:	4b13      	ldr	r3, [pc, #76]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001dda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dde:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001de0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001de2:	2210      	movs	r2, #16
 8001de4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001de6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dec:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001df2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001df8:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001dfa:	2207      	movs	r2, #7
 8001dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dfe:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e04:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001e06:	2208      	movs	r2, #8
 8001e08:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e0a:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001e0c:	f003 ff0e 	bl	8005c2c <HAL_SPI_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e16:	f000 f95d 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200002e4 	.word	0x200002e4
 8001e24:	40013000 	.word	0x40013000

08001e28 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001e2c:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <MX_TIM16_Init+0x48>)
 8001e2e:	4a11      	ldr	r2, [pc, #68]	@ (8001e74 <MX_TIM16_Init+0x4c>)
 8001e30:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 15000 - 1;
 8001e32:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <MX_TIM16_Init+0x48>)
 8001e34:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8001e38:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e70 <MX_TIM16_Init+0x48>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8001e40:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <MX_TIM16_Init+0x48>)
 8001e42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e46:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e48:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <MX_TIM16_Init+0x48>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <MX_TIM16_Init+0x48>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <MX_TIM16_Init+0x48>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e5a:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <MX_TIM16_Init+0x48>)
 8001e5c:	f004 fa6a 	bl	8006334 <HAL_TIM_Base_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001e66:	f000 f935 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000348 	.word	0x20000348
 8001e74:	40014400 	.word	0x40014400

08001e78 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001e7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <MX_TIM17_Init+0x48>)
 8001e7e:	4a11      	ldr	r2, [pc, #68]	@ (8001ec4 <MX_TIM17_Init+0x4c>)
 8001e80:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 15000-1;
 8001e82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec0 <MX_TIM17_Init+0x48>)
 8001e84:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8001e88:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec0 <MX_TIM17_Init+0x48>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 5000;
 8001e90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <MX_TIM17_Init+0x48>)
 8001e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e96:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e98:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <MX_TIM17_Init+0x48>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001e9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <MX_TIM17_Init+0x48>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <MX_TIM17_Init+0x48>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001eaa:	4805      	ldr	r0, [pc, #20]	@ (8001ec0 <MX_TIM17_Init+0x48>)
 8001eac:	f004 fa42 	bl	8006334 <HAL_TIM_Base_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001eb6:	f000 f90d 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000394 	.word	0x20000394
 8001ec4:	40014800 	.word	0x40014800

08001ec8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ecc:	4b22      	ldr	r3, [pc, #136]	@ (8001f58 <MX_USART2_UART_Init+0x90>)
 8001ece:	4a23      	ldr	r2, [pc, #140]	@ (8001f5c <MX_USART2_UART_Init+0x94>)
 8001ed0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ed2:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <MX_USART2_UART_Init+0x90>)
 8001ed4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ed8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eda:	4b1f      	ldr	r3, [pc, #124]	@ (8001f58 <MX_USART2_UART_Init+0x90>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f58 <MX_USART2_UART_Init+0x90>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <MX_USART2_UART_Init+0x90>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eec:	4b1a      	ldr	r3, [pc, #104]	@ (8001f58 <MX_USART2_UART_Init+0x90>)
 8001eee:	220c      	movs	r2, #12
 8001ef0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef2:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <MX_USART2_UART_Init+0x90>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef8:	4b17      	ldr	r3, [pc, #92]	@ (8001f58 <MX_USART2_UART_Init+0x90>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001efe:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <MX_USART2_UART_Init+0x90>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f04:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <MX_USART2_UART_Init+0x90>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f0a:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <MX_USART2_UART_Init+0x90>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f10:	4811      	ldr	r0, [pc, #68]	@ (8001f58 <MX_USART2_UART_Init+0x90>)
 8001f12:	f004 fd51 	bl	80069b8 <HAL_UART_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001f1c:	f000 f8da 	bl	80020d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f20:	2100      	movs	r1, #0
 8001f22:	480d      	ldr	r0, [pc, #52]	@ (8001f58 <MX_USART2_UART_Init+0x90>)
 8001f24:	f005 fb7a 	bl	800761c <HAL_UARTEx_SetTxFifoThreshold>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001f2e:	f000 f8d1 	bl	80020d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f32:	2100      	movs	r1, #0
 8001f34:	4808      	ldr	r0, [pc, #32]	@ (8001f58 <MX_USART2_UART_Init+0x90>)
 8001f36:	f005 fbaf 	bl	8007698 <HAL_UARTEx_SetRxFifoThreshold>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f40:	f000 f8c8 	bl	80020d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f44:	4804      	ldr	r0, [pc, #16]	@ (8001f58 <MX_USART2_UART_Init+0x90>)
 8001f46:	f005 fb30 	bl	80075aa <HAL_UARTEx_DisableFifoMode>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f50:	f000 f8c0 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200003e0 	.word	0x200003e0
 8001f5c:	40004400 	.word	0x40004400

08001f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	@ 0x28
 8001f64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	60da      	str	r2, [r3, #12]
 8001f74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f76:	4b54      	ldr	r3, [pc, #336]	@ (80020c8 <MX_GPIO_Init+0x168>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7a:	4a53      	ldr	r2, [pc, #332]	@ (80020c8 <MX_GPIO_Init+0x168>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f82:	4b51      	ldr	r3, [pc, #324]	@ (80020c8 <MX_GPIO_Init+0x168>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f8e:	4b4e      	ldr	r3, [pc, #312]	@ (80020c8 <MX_GPIO_Init+0x168>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f92:	4a4d      	ldr	r2, [pc, #308]	@ (80020c8 <MX_GPIO_Init+0x168>)
 8001f94:	f043 0320 	orr.w	r3, r3, #32
 8001f98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f9a:	4b4b      	ldr	r3, [pc, #300]	@ (80020c8 <MX_GPIO_Init+0x168>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9e:	f003 0320 	and.w	r3, r3, #32
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	4b48      	ldr	r3, [pc, #288]	@ (80020c8 <MX_GPIO_Init+0x168>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001faa:	4a47      	ldr	r2, [pc, #284]	@ (80020c8 <MX_GPIO_Init+0x168>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fb2:	4b45      	ldr	r3, [pc, #276]	@ (80020c8 <MX_GPIO_Init+0x168>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbe:	4b42      	ldr	r3, [pc, #264]	@ (80020c8 <MX_GPIO_Init+0x168>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc2:	4a41      	ldr	r2, [pc, #260]	@ (80020c8 <MX_GPIO_Init+0x168>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fca:	4b3f      	ldr	r3, [pc, #252]	@ (80020c8 <MX_GPIO_Init+0x168>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Stg2_NMOS1_Pin|GPIO_PIN_3|GPIO_PIN_4|Stg2_NMOS4_Pin
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f640 41fc 	movw	r1, #3324	@ 0xcfc
 8001fdc:	483b      	ldr	r0, [pc, #236]	@ (80020cc <MX_GPIO_Init+0x16c>)
 8001fde:	f002 fdab 	bl	8004b38 <HAL_GPIO_WritePin>
                          |Stg3_NMOS1_Pin|Stg3_NMOS3_Pin|Stg3_NMOS2_Pin|Stg3_NMOS4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPI1_RST_Pin|Stg1_NMOS2_Pin|Stg1_NMOS1_Pin
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f648 31e0 	movw	r1, #35808	@ 0x8be0
 8001fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fec:	f002 fda4 	bl	8004b38 <HAL_GPIO_WritePin>
                          |Stg1_NMOS3_Pin|Stg2_NMOS3_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_DC_Pin|Stg1_NMOS4_Pin|Stg2_NMOS2_Pin, GPIO_PIN_RESET);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f44f 418c 	mov.w	r1, #17920	@ 0x4600
 8001ff6:	4836      	ldr	r0, [pc, #216]	@ (80020d0 <MX_GPIO_Init+0x170>)
 8001ff8:	f002 fd9e 	bl	8004b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_EXTI13_Pin */
  GPIO_InitStruct.Pin = B1_EXTI13_Pin;
 8001ffc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002002:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4619      	mov	r1, r3
 8002012:	482e      	ldr	r0, [pc, #184]	@ (80020cc <MX_GPIO_Init+0x16c>)
 8002014:	f002 fc0e 	bl	8004834 <HAL_GPIO_Init>

  /*Configure GPIO pins : Stg2_NMOS1_Pin PC3 PC4 Stg2_NMOS4_Pin
                           Stg3_NMOS1_Pin Stg3_NMOS3_Pin Stg3_NMOS2_Pin Stg3_NMOS4_Pin */
  GPIO_InitStruct.Pin = Stg2_NMOS1_Pin|GPIO_PIN_3|GPIO_PIN_4|Stg2_NMOS4_Pin
 8002018:	f640 43fc 	movw	r3, #3324	@ 0xcfc
 800201c:	617b      	str	r3, [r7, #20]
                          |Stg3_NMOS1_Pin|Stg3_NMOS3_Pin|Stg3_NMOS2_Pin|Stg3_NMOS4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201e:	2301      	movs	r3, #1
 8002020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	4619      	mov	r1, r3
 8002030:	4826      	ldr	r0, [pc, #152]	@ (80020cc <MX_GPIO_Init+0x16c>)
 8002032:	f002 fbff 	bl	8004834 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SPI1_RST_Pin Stg1_NMOS2_Pin Stg1_NMOS1_Pin
                           Stg1_NMOS3_Pin Stg2_NMOS3_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI1_RST_Pin|Stg1_NMOS2_Pin|Stg1_NMOS1_Pin
 8002036:	f648 33e0 	movw	r3, #35808	@ 0x8be0
 800203a:	617b      	str	r3, [r7, #20]
                          |Stg1_NMOS3_Pin|Stg2_NMOS3_Pin|SPI1_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203c:	2301      	movs	r3, #1
 800203e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2300      	movs	r3, #0
 8002046:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4619      	mov	r1, r3
 800204e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002052:	f002 fbef 	bl	8004834 <HAL_GPIO_Init>

  /*Configure GPIO pins : Tast1_EXTI1_Pin Tast2_EXTI2_Pin */
  GPIO_InitStruct.Pin = Tast1_EXTI1_Pin|Tast2_EXTI2_Pin;
 8002056:	2306      	movs	r3, #6
 8002058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800205a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800205e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002060:	2302      	movs	r3, #2
 8002062:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	4619      	mov	r1, r3
 800206a:	4819      	ldr	r0, [pc, #100]	@ (80020d0 <MX_GPIO_Init+0x170>)
 800206c:	f002 fbe2 	bl	8004834 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_DC_Pin Stg1_NMOS4_Pin Stg2_NMOS2_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin|Stg1_NMOS4_Pin|Stg2_NMOS2_Pin;
 8002070:	f44f 438c 	mov.w	r3, #17920	@ 0x4600
 8002074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002076:	2301      	movs	r3, #1
 8002078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002082:	f107 0314 	add.w	r3, r7, #20
 8002086:	4619      	mov	r1, r3
 8002088:	4811      	ldr	r0, [pc, #68]	@ (80020d0 <MX_GPIO_Init+0x170>)
 800208a:	f002 fbd3 	bl	8004834 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	2007      	movs	r0, #7
 8002094:	f002 fb99 	bl	80047ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002098:	2007      	movs	r0, #7
 800209a:	f002 fbb0 	bl	80047fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	2008      	movs	r0, #8
 80020a4:	f002 fb91 	bl	80047ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80020a8:	2008      	movs	r0, #8
 80020aa:	f002 fba8 	bl	80047fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	2028      	movs	r0, #40	@ 0x28
 80020b4:	f002 fb89 	bl	80047ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020b8:	2028      	movs	r0, #40	@ 0x28
 80020ba:	f002 fba0 	bl	80047fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020be:	bf00      	nop
 80020c0:	3728      	adds	r7, #40	@ 0x28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	48000800 	.word	0x48000800
 80020d0:	48000400 	.word	0x48000400

080020d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020d8:	b672      	cpsid	i
}
 80020da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <Error_Handler+0x8>

080020e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002124 <HAL_MspInit+0x44>)
 80020e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002124 <HAL_MspInit+0x44>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80020f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002124 <HAL_MspInit+0x44>)
 80020f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <HAL_MspInit+0x44>)
 8002100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002102:	4a08      	ldr	r2, [pc, #32]	@ (8002124 <HAL_MspInit+0x44>)
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002108:	6593      	str	r3, [r2, #88]	@ 0x58
 800210a:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <HAL_MspInit+0x44>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002116:	f002 fdfd 	bl	8004d14 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000

08002128 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b0a0      	sub	sp, #128	@ 0x80
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002140:	f107 0318 	add.w	r3, r7, #24
 8002144:	2254      	movs	r2, #84	@ 0x54
 8002146:	2100      	movs	r1, #0
 8002148:	4618      	mov	r0, r3
 800214a:	f006 f8ae 	bl	80082aa <memset>
  if(hadc->Instance==ADC1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002156:	d13e      	bne.n	80021d6 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002158:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800215c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800215e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002162:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002164:	f107 0318 	add.w	r3, r7, #24
 8002168:	4618      	mov	r0, r3
 800216a:	f003 fb11 	bl	8005790 <HAL_RCCEx_PeriphCLKConfig>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002174:	f7ff ffae 	bl	80020d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002178:	4b3a      	ldr	r3, [pc, #232]	@ (8002264 <HAL_ADC_MspInit+0x13c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	4a39      	ldr	r2, [pc, #228]	@ (8002264 <HAL_ADC_MspInit+0x13c>)
 8002180:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002182:	4b38      	ldr	r3, [pc, #224]	@ (8002264 <HAL_ADC_MspInit+0x13c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d10b      	bne.n	80021a2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800218a:	4b37      	ldr	r3, [pc, #220]	@ (8002268 <HAL_ADC_MspInit+0x140>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218e:	4a36      	ldr	r2, [pc, #216]	@ (8002268 <HAL_ADC_MspInit+0x140>)
 8002190:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002194:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002196:	4b34      	ldr	r3, [pc, #208]	@ (8002268 <HAL_ADC_MspInit+0x140>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	4b31      	ldr	r3, [pc, #196]	@ (8002268 <HAL_ADC_MspInit+0x140>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a6:	4a30      	ldr	r2, [pc, #192]	@ (8002268 <HAL_ADC_MspInit+0x140>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ae:	4b2e      	ldr	r3, [pc, #184]	@ (8002268 <HAL_ADC_MspInit+0x140>)
 80021b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC1_IN1_Poti1_Pin|ADC1_IN2_Poti2_Pin;
 80021ba:	2303      	movs	r3, #3
 80021bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021be:	2303      	movs	r3, #3
 80021c0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80021ca:	4619      	mov	r1, r3
 80021cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021d0:	f002 fb30 	bl	8004834 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80021d4:	e042      	b.n	800225c <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a24      	ldr	r2, [pc, #144]	@ (800226c <HAL_ADC_MspInit+0x144>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d13d      	bne.n	800225c <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80021e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80021e6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80021ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021ec:	f107 0318 	add.w	r3, r7, #24
 80021f0:	4618      	mov	r0, r3
 80021f2:	f003 facd 	bl	8005790 <HAL_RCCEx_PeriphCLKConfig>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 80021fc:	f7ff ff6a 	bl	80020d4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002200:	4b18      	ldr	r3, [pc, #96]	@ (8002264 <HAL_ADC_MspInit+0x13c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	3301      	adds	r3, #1
 8002206:	4a17      	ldr	r2, [pc, #92]	@ (8002264 <HAL_ADC_MspInit+0x13c>)
 8002208:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800220a:	4b16      	ldr	r3, [pc, #88]	@ (8002264 <HAL_ADC_MspInit+0x13c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d10b      	bne.n	800222a <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002212:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <HAL_ADC_MspInit+0x140>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002216:	4a14      	ldr	r2, [pc, #80]	@ (8002268 <HAL_ADC_MspInit+0x140>)
 8002218:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800221c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800221e:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <HAL_ADC_MspInit+0x140>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002222:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	4b0f      	ldr	r3, [pc, #60]	@ (8002268 <HAL_ADC_MspInit+0x140>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222e:	4a0e      	ldr	r2, [pc, #56]	@ (8002268 <HAL_ADC_MspInit+0x140>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002236:	4b0c      	ldr	r3, [pc, #48]	@ (8002268 <HAL_ADC_MspInit+0x140>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002242:	2310      	movs	r3, #16
 8002244:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002246:	2303      	movs	r3, #3
 8002248:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002252:	4619      	mov	r1, r3
 8002254:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002258:	f002 faec 	bl	8004834 <HAL_GPIO_Init>
}
 800225c:	bf00      	nop
 800225e:	3780      	adds	r7, #128	@ 0x80
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000474 	.word	0x20000474
 8002268:	40021000 	.word	0x40021000
 800226c:	50000100 	.word	0x50000100

08002270 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	@ 0x28
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a17      	ldr	r2, [pc, #92]	@ (80022ec <HAL_SPI_MspInit+0x7c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d127      	bne.n	80022e2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002292:	4b17      	ldr	r3, [pc, #92]	@ (80022f0 <HAL_SPI_MspInit+0x80>)
 8002294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002296:	4a16      	ldr	r2, [pc, #88]	@ (80022f0 <HAL_SPI_MspInit+0x80>)
 8002298:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800229c:	6613      	str	r3, [r2, #96]	@ 0x60
 800229e:	4b14      	ldr	r3, [pc, #80]	@ (80022f0 <HAL_SPI_MspInit+0x80>)
 80022a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022aa:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <HAL_SPI_MspInit+0x80>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ae:	4a10      	ldr	r2, [pc, #64]	@ (80022f0 <HAL_SPI_MspInit+0x80>)
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022b6:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <HAL_SPI_MspInit+0x80>)
 80022b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80022c2:	2328      	movs	r3, #40	@ 0x28
 80022c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022d2:	2305      	movs	r3, #5
 80022d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4619      	mov	r1, r3
 80022dc:	4805      	ldr	r0, [pc, #20]	@ (80022f4 <HAL_SPI_MspInit+0x84>)
 80022de:	f002 faa9 	bl	8004834 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022e2:	bf00      	nop
 80022e4:	3728      	adds	r7, #40	@ 0x28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40013000 	.word	0x40013000
 80022f0:	40021000 	.word	0x40021000
 80022f4:	48000400 	.word	0x48000400

080022f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1a      	ldr	r2, [pc, #104]	@ (8002370 <HAL_TIM_Base_MspInit+0x78>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d114      	bne.n	8002334 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800230a:	4b1a      	ldr	r3, [pc, #104]	@ (8002374 <HAL_TIM_Base_MspInit+0x7c>)
 800230c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800230e:	4a19      	ldr	r2, [pc, #100]	@ (8002374 <HAL_TIM_Base_MspInit+0x7c>)
 8002310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002314:	6613      	str	r3, [r2, #96]	@ 0x60
 8002316:	4b17      	ldr	r3, [pc, #92]	@ (8002374 <HAL_TIM_Base_MspInit+0x7c>)
 8002318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	2019      	movs	r0, #25
 8002328:	f002 fa4f 	bl	80047ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800232c:	2019      	movs	r0, #25
 800232e:	f002 fa66 	bl	80047fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002332:	e018      	b.n	8002366 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0f      	ldr	r2, [pc, #60]	@ (8002378 <HAL_TIM_Base_MspInit+0x80>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d113      	bne.n	8002366 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800233e:	4b0d      	ldr	r3, [pc, #52]	@ (8002374 <HAL_TIM_Base_MspInit+0x7c>)
 8002340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002342:	4a0c      	ldr	r2, [pc, #48]	@ (8002374 <HAL_TIM_Base_MspInit+0x7c>)
 8002344:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002348:	6613      	str	r3, [r2, #96]	@ 0x60
 800234a:	4b0a      	ldr	r3, [pc, #40]	@ (8002374 <HAL_TIM_Base_MspInit+0x7c>)
 800234c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800234e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2100      	movs	r1, #0
 800235a:	201a      	movs	r0, #26
 800235c:	f002 fa35 	bl	80047ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002360:	201a      	movs	r0, #26
 8002362:	f002 fa4c 	bl	80047fe <HAL_NVIC_EnableIRQ>
}
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40014400 	.word	0x40014400
 8002374:	40021000 	.word	0x40021000
 8002378:	40014800 	.word	0x40014800

0800237c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b09e      	sub	sp, #120	@ 0x78
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002394:	f107 0310 	add.w	r3, r7, #16
 8002398:	2254      	movs	r2, #84	@ 0x54
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f005 ff84 	bl	80082aa <memset>
  if(huart->Instance==USART2)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002424 <HAL_UART_MspInit+0xa8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d136      	bne.n	800241a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023ac:	2302      	movs	r3, #2
 80023ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023b4:	f107 0310 	add.w	r3, r7, #16
 80023b8:	4618      	mov	r0, r3
 80023ba:	f003 f9e9 	bl	8005790 <HAL_RCCEx_PeriphCLKConfig>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023c4:	f7ff fe86 	bl	80020d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023c8:	4b17      	ldr	r3, [pc, #92]	@ (8002428 <HAL_UART_MspInit+0xac>)
 80023ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023cc:	4a16      	ldr	r2, [pc, #88]	@ (8002428 <HAL_UART_MspInit+0xac>)
 80023ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80023d4:	4b14      	ldr	r3, [pc, #80]	@ (8002428 <HAL_UART_MspInit+0xac>)
 80023d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e0:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <HAL_UART_MspInit+0xac>)
 80023e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e4:	4a10      	ldr	r2, [pc, #64]	@ (8002428 <HAL_UART_MspInit+0xac>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002428 <HAL_UART_MspInit+0xac>)
 80023ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023f8:	230c      	movs	r3, #12
 80023fa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002404:	2300      	movs	r3, #0
 8002406:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002408:	2307      	movs	r3, #7
 800240a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002410:	4619      	mov	r1, r3
 8002412:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002416:	f002 fa0d 	bl	8004834 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800241a:	bf00      	nop
 800241c:	3778      	adds	r7, #120	@ 0x78
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40004400 	.word	0x40004400
 8002428:	40021000 	.word	0x40021000

0800242c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <NMI_Handler+0x4>

08002434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <HardFault_Handler+0x4>

0800243c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <MemManage_Handler+0x4>

08002444 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <BusFault_Handler+0x4>

0800244c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <UsageFault_Handler+0x4>

08002454 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002482:	f000 fb05 	bl	8002a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}

0800248a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Tast1_EXTI1_Pin);
 800248e:	2002      	movs	r0, #2
 8002490:	f002 fb84 	bl	8004b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}

08002498 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Tast2_EXTI2_Pin);
 800249c:	2004      	movs	r0, #4
 800249e:	f002 fb7d 	bl	8004b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80024ac:	4802      	ldr	r0, [pc, #8]	@ (80024b8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80024ae:	f004 f811 	bl	80064d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000348 	.word	0x20000348

080024bc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80024c0:	4802      	ldr	r0, [pc, #8]	@ (80024cc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80024c2:	f004 f807 	bl	80064d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000394 	.word	0x20000394

080024d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_EXTI13_Pin);
 80024d4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80024d8:	f002 fb60 	bl	8004b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}

080024e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return 1;
 80024e4:	2301      	movs	r3, #1
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_kill>:

int _kill(int pid, int sig)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024fa:	f005 ff29 	bl	8008350 <__errno>
 80024fe:	4603      	mov	r3, r0
 8002500:	2216      	movs	r2, #22
 8002502:	601a      	str	r2, [r3, #0]
  return -1;
 8002504:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <_exit>:

void _exit (int status)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002518:	f04f 31ff 	mov.w	r1, #4294967295
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ffe7 	bl	80024f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002522:	bf00      	nop
 8002524:	e7fd      	b.n	8002522 <_exit+0x12>

08002526 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b086      	sub	sp, #24
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	e00a      	b.n	800254e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002538:	f3af 8000 	nop.w
 800253c:	4601      	mov	r1, r0
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	60ba      	str	r2, [r7, #8]
 8002544:	b2ca      	uxtb	r2, r1
 8002546:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3301      	adds	r3, #1
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	429a      	cmp	r2, r3
 8002554:	dbf0      	blt.n	8002538 <_read+0x12>
  }

  return len;
 8002556:	687b      	ldr	r3, [r7, #4]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	e009      	b.n	8002586 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	60ba      	str	r2, [r7, #8]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3301      	adds	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	429a      	cmp	r2, r3
 800258c:	dbf1      	blt.n	8002572 <_write+0x12>
  }
  return len;
 800258e:	687b      	ldr	r3, [r7, #4]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <_close>:

int _close(int file)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025c0:	605a      	str	r2, [r3, #4]
  return 0;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <_isatty>:

int _isatty(int file)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025d8:	2301      	movs	r3, #1
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002608:	4a14      	ldr	r2, [pc, #80]	@ (800265c <_sbrk+0x5c>)
 800260a:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <_sbrk+0x60>)
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002614:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800261c:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <_sbrk+0x64>)
 800261e:	4a12      	ldr	r2, [pc, #72]	@ (8002668 <_sbrk+0x68>)
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	429a      	cmp	r2, r3
 800262e:	d207      	bcs.n	8002640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002630:	f005 fe8e 	bl	8008350 <__errno>
 8002634:	4603      	mov	r3, r0
 8002636:	220c      	movs	r2, #12
 8002638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	e009      	b.n	8002654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002640:	4b08      	ldr	r3, [pc, #32]	@ (8002664 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002646:	4b07      	ldr	r3, [pc, #28]	@ (8002664 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	4a05      	ldr	r2, [pc, #20]	@ (8002664 <_sbrk+0x64>)
 8002650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20020000 	.word	0x20020000
 8002660:	00000400 	.word	0x00000400
 8002664:	20000478 	.word	0x20000478
 8002668:	20000600 	.word	0x20000600

0800266c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002670:	4b06      	ldr	r3, [pc, #24]	@ (800268c <SystemInit+0x20>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002676:	4a05      	ldr	r2, [pc, #20]	@ (800268c <SystemInit+0x20>)
 8002678:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800267c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <enter_handler_state>:
uint8_t px_ofs1 = 11;

adc_raw_values adc_raw_values1;
adc_values adc_values1;

void enter_handler_state(int state) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af04      	add	r7, sp, #16
 8002696:	6078      	str	r0, [r7, #4]
	switch (state) {
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <enter_handler_state+0x16>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d024      	beq.n	80026ee <enter_handler_state+0x5e>
		// Start Timer17 for updating values on Display
		HAL_TIM_Base_Start_IT(&htim17);
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 80026a4:	e04a      	b.n	800273c <enter_handler_state+0xac>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80026a6:	2200      	movs	r2, #0
 80026a8:	2120      	movs	r1, #32
 80026aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026ae:	f002 fa43 	bl	8004b38 <HAL_GPIO_WritePin>
		handler_state = IDLE;
 80026b2:	4b24      	ldr	r3, [pc, #144]	@ (8002744 <enter_handler_state+0xb4>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
		fillScreen(BLACK);
 80026b8:	2000      	movs	r0, #0
 80026ba:	f7fe fd71 	bl	80011a0 <fillScreen>
		ST7735_WriteString(0, 0, "State: IDLE", Font_7x10, GREEN, BLACK);
 80026be:	4b22      	ldr	r3, [pc, #136]	@ (8002748 <enter_handler_state+0xb8>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	9202      	str	r2, [sp, #8]
 80026c4:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80026c8:	9201      	str	r2, [sp, #4]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	9200      	str	r2, [sp, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1e      	ldr	r2, [pc, #120]	@ (800274c <enter_handler_state+0xbc>)
 80026d2:	2100      	movs	r1, #0
 80026d4:	2000      	movs	r0, #0
 80026d6:	f7fe ffd1 	bl	800167c <ST7735_WriteString>
		drawFastHLine(0, px_ofs1, 128, WHITE);
 80026da:	4b1d      	ldr	r3, [pc, #116]	@ (8002750 <enter_handler_state+0xc0>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	b219      	sxth	r1, r3
 80026e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026e4:	2280      	movs	r2, #128	@ 0x80
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7fe fd34 	bl	8001154 <drawFastHLine>
		break;
 80026ec:	e026      	b.n	800273c <enter_handler_state+0xac>
		time_val = 0;
 80026ee:	4b19      	ldr	r3, [pc, #100]	@ (8002754 <enter_handler_state+0xc4>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80026f4:	2201      	movs	r2, #1
 80026f6:	2120      	movs	r1, #32
 80026f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026fc:	f002 fa1c 	bl	8004b38 <HAL_GPIO_WritePin>
		fillScreen(BLACK);
 8002700:	2000      	movs	r0, #0
 8002702:	f7fe fd4d 	bl	80011a0 <fillScreen>
		ST7735_WriteString(0, 0, "State: ADC_Values", Font_7x10, GREEN, BLACK);
 8002706:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <enter_handler_state+0xb8>)
 8002708:	2200      	movs	r2, #0
 800270a:	9202      	str	r2, [sp, #8]
 800270c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002710:	9201      	str	r2, [sp, #4]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	9200      	str	r2, [sp, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a0f      	ldr	r2, [pc, #60]	@ (8002758 <enter_handler_state+0xc8>)
 800271a:	2100      	movs	r1, #0
 800271c:	2000      	movs	r0, #0
 800271e:	f7fe ffad 	bl	800167c <ST7735_WriteString>
		drawFastHLine(0, px_ofs1, 128, WHITE);
 8002722:	4b0b      	ldr	r3, [pc, #44]	@ (8002750 <enter_handler_state+0xc0>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	b219      	sxth	r1, r3
 8002728:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800272c:	2280      	movs	r2, #128	@ 0x80
 800272e:	2000      	movs	r0, #0
 8002730:	f7fe fd10 	bl	8001154 <drawFastHLine>
		HAL_TIM_Base_Start_IT(&htim17);
 8002734:	4809      	ldr	r0, [pc, #36]	@ (800275c <enter_handler_state+0xcc>)
 8002736:	f003 fe55 	bl	80063e4 <HAL_TIM_Base_Start_IT>
		break;
 800273a:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	2000047c 	.word	0x2000047c
 8002748:	20000000 	.word	0x20000000
 800274c:	0800a4c8 	.word	0x0800a4c8
 8002750:	20000010 	.word	0x20000010
 8002754:	2000047e 	.word	0x2000047e
 8002758:	0800a4d4 	.word	0x0800a4d4
 800275c:	20000394 	.word	0x20000394

08002760 <exec_handler_state>:

//-----------------------------------------------------------------------------------------------------------------------

void exec_handler_state(int state) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	switch (state) {
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 8095 	beq.w	800289a <exec_handler_state+0x13a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d000      	beq.n	8002778 <exec_handler_state+0x18>
		sprintf(msg, "Poti1: %2.2fV \r\n", adc_values1.poti1_Vf);
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 8002776:	e091      	b.n	800289c <exec_handler_state+0x13c>
		if (time_val > 250) {
 8002778:	4b4f      	ldr	r3, [pc, #316]	@ (80028b8 <exec_handler_state+0x158>)
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	2bfa      	cmp	r3, #250	@ 0xfa
 800277e:	d907      	bls.n	8002790 <exec_handler_state+0x30>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002780:	2120      	movs	r1, #32
 8002782:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002786:	f002 f9ef 	bl	8004b68 <HAL_GPIO_TogglePin>
			time_val = 0;
 800278a:	4b4b      	ldr	r3, [pc, #300]	@ (80028b8 <exec_handler_state+0x158>)
 800278c:	2200      	movs	r2, #0
 800278e:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8002790:	2110      	movs	r1, #16
 8002792:	484a      	ldr	r0, [pc, #296]	@ (80028bc <exec_handler_state+0x15c>)
 8002794:	f002 f9e8 	bl	8004b68 <HAL_GPIO_TogglePin>
		ADC_Select_CH1();
 8002798:	f7ff f84e 	bl	8001838 <ADC_Select_CH1>
		HAL_ADC_Start(&hadc1);
 800279c:	4848      	ldr	r0, [pc, #288]	@ (80028c0 <exec_handler_state+0x160>)
 800279e:	f000 fded 	bl	800337c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 20); // timeout 20ms
 80027a2:	2114      	movs	r1, #20
 80027a4:	4846      	ldr	r0, [pc, #280]	@ (80028c0 <exec_handler_state+0x160>)
 80027a6:	f000 ff01 	bl	80035ac <HAL_ADC_PollForConversion>
		adc_raw_values1.poti1_V = HAL_ADC_GetValue(&hadc1);
 80027aa:	4845      	ldr	r0, [pc, #276]	@ (80028c0 <exec_handler_state+0x160>)
 80027ac:	f001 f804 	bl	80037b8 <HAL_ADC_GetValue>
 80027b0:	4603      	mov	r3, r0
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	4b43      	ldr	r3, [pc, #268]	@ (80028c4 <exec_handler_state+0x164>)
 80027b6:	801a      	strh	r2, [r3, #0]
		adc_values1.poti1_Vf = (3.3*(float)adc_raw_values1.poti1_V)/4095;
 80027b8:	4b42      	ldr	r3, [pc, #264]	@ (80028c4 <exec_handler_state+0x164>)
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	ee07 3a90 	vmov	s15, r3
 80027c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c4:	ee17 0a90 	vmov	r0, s15
 80027c8:	f7fd fee6 	bl	8000598 <__aeabi_f2d>
 80027cc:	a336      	add	r3, pc, #216	@ (adr r3, 80028a8 <exec_handler_state+0x148>)
 80027ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d2:	f7fd ff39 	bl	8000648 <__aeabi_dmul>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	4610      	mov	r0, r2
 80027dc:	4619      	mov	r1, r3
 80027de:	a334      	add	r3, pc, #208	@ (adr r3, 80028b0 <exec_handler_state+0x150>)
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	f7fe f85a 	bl	800089c <__aeabi_ddiv>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	f7fe fa02 	bl	8000bf8 <__aeabi_d2f>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4a34      	ldr	r2, [pc, #208]	@ (80028c8 <exec_handler_state+0x168>)
 80027f8:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 80027fa:	4831      	ldr	r0, [pc, #196]	@ (80028c0 <exec_handler_state+0x160>)
 80027fc:	f000 fea2 	bl	8003544 <HAL_ADC_Stop>
		HAL_ADC_Start(&hadc2);
 8002800:	4832      	ldr	r0, [pc, #200]	@ (80028cc <exec_handler_state+0x16c>)
 8002802:	f000 fdbb 	bl	800337c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 20); // timeout 20ms
 8002806:	2114      	movs	r1, #20
 8002808:	4830      	ldr	r0, [pc, #192]	@ (80028cc <exec_handler_state+0x16c>)
 800280a:	f000 fecf 	bl	80035ac <HAL_ADC_PollForConversion>
		adc_raw_values1.bnc2_V = HAL_ADC_GetValue(&hadc2);
 800280e:	482f      	ldr	r0, [pc, #188]	@ (80028cc <exec_handler_state+0x16c>)
 8002810:	f000 ffd2 	bl	80037b8 <HAL_ADC_GetValue>
 8002814:	4603      	mov	r3, r0
 8002816:	b29a      	uxth	r2, r3
 8002818:	4b2a      	ldr	r3, [pc, #168]	@ (80028c4 <exec_handler_state+0x164>)
 800281a:	80da      	strh	r2, [r3, #6]
		adc_values1.bnc2_Vf = (3.3*(float)adc_raw_values1.bnc2_V)/4095;
 800281c:	4b29      	ldr	r3, [pc, #164]	@ (80028c4 <exec_handler_state+0x164>)
 800281e:	88db      	ldrh	r3, [r3, #6]
 8002820:	ee07 3a90 	vmov	s15, r3
 8002824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002828:	ee17 0a90 	vmov	r0, s15
 800282c:	f7fd feb4 	bl	8000598 <__aeabi_f2d>
 8002830:	a31d      	add	r3, pc, #116	@ (adr r3, 80028a8 <exec_handler_state+0x148>)
 8002832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002836:	f7fd ff07 	bl	8000648 <__aeabi_dmul>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	a31b      	add	r3, pc, #108	@ (adr r3, 80028b0 <exec_handler_state+0x150>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	f7fe f828 	bl	800089c <__aeabi_ddiv>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	f7fe f9d0 	bl	8000bf8 <__aeabi_d2f>
 8002858:	4603      	mov	r3, r0
 800285a:	4a1b      	ldr	r2, [pc, #108]	@ (80028c8 <exec_handler_state+0x168>)
 800285c:	60d3      	str	r3, [r2, #12]
		HAL_ADC_Stop(&hadc2);
 800285e:	481b      	ldr	r0, [pc, #108]	@ (80028cc <exec_handler_state+0x16c>)
 8002860:	f000 fe70 	bl	8003544 <HAL_ADC_Stop>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8002864:	2110      	movs	r1, #16
 8002866:	4815      	ldr	r0, [pc, #84]	@ (80028bc <exec_handler_state+0x15c>)
 8002868:	f002 f97e 	bl	8004b68 <HAL_GPIO_TogglePin>
		sprintf(msg, "Poti1: %2.2fV \r\n", adc_values1.poti1_Vf);
 800286c:	4b16      	ldr	r3, [pc, #88]	@ (80028c8 <exec_handler_state+0x168>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7fd fe91 	bl	8000598 <__aeabi_f2d>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4915      	ldr	r1, [pc, #84]	@ (80028d0 <exec_handler_state+0x170>)
 800287c:	4815      	ldr	r0, [pc, #84]	@ (80028d4 <exec_handler_state+0x174>)
 800287e:	f005 fcb1 	bl	80081e4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8002882:	4814      	ldr	r0, [pc, #80]	@ (80028d4 <exec_handler_state+0x174>)
 8002884:	f7fd fd1c 	bl	80002c0 <strlen>
 8002888:	4603      	mov	r3, r0
 800288a:	b29a      	uxth	r2, r3
 800288c:	f04f 33ff 	mov.w	r3, #4294967295
 8002890:	4910      	ldr	r1, [pc, #64]	@ (80028d4 <exec_handler_state+0x174>)
 8002892:	4811      	ldr	r0, [pc, #68]	@ (80028d8 <exec_handler_state+0x178>)
 8002894:	f004 f8e0 	bl	8006a58 <HAL_UART_Transmit>
		break;
 8002898:	e000      	b.n	800289c <exec_handler_state+0x13c>
		break;
 800289a:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	f3af 8000 	nop.w
 80028a8:	66666666 	.word	0x66666666
 80028ac:	400a6666 	.word	0x400a6666
 80028b0:	00000000 	.word	0x00000000
 80028b4:	40affe00 	.word	0x40affe00
 80028b8:	2000047e 	.word	0x2000047e
 80028bc:	48000800 	.word	0x48000800
 80028c0:	2000020c 	.word	0x2000020c
 80028c4:	20000494 	.word	0x20000494
 80028c8:	2000049c 	.word	0x2000049c
 80028cc:	20000278 	.word	0x20000278
 80028d0:	0800a4e8 	.word	0x0800a4e8
 80028d4:	20000480 	.word	0x20000480
 80028d8:	200003e0 	.word	0x200003e0

080028dc <leave_handler_state>:

//-----------------------------------------------------------------------------------------------------------------------

void leave_handler_state(int state) {
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	switch (state) {
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d007      	beq.n	80028fa <leave_handler_state+0x1e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d000      	beq.n	80028f2 <leave_handler_state+0x16>
		// Stop Timer17 for updating values on Display
		HAL_TIM_Base_Start_IT(&htim17);
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 80028f0:	e004      	b.n	80028fc <leave_handler_state+0x20>
		HAL_TIM_Base_Start_IT(&htim17);
 80028f2:	4804      	ldr	r0, [pc, #16]	@ (8002904 <leave_handler_state+0x28>)
 80028f4:	f003 fd76 	bl	80063e4 <HAL_TIM_Base_Start_IT>
		break;
 80028f8:	e000      	b.n	80028fc <leave_handler_state+0x20>
		break;
 80028fa:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000394 	.word	0x20000394

08002908 <handler_task>:

//-----------------------------------------------------------------------------------------------------------------------

void handler_task(void) {
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
	exec_handler_state(handler_state);
 800290c:	4b03      	ldr	r3, [pc, #12]	@ (800291c <handler_task+0x14>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff25 	bl	8002760 <exec_handler_state>
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	2000047c 	.word	0x2000047c

08002920 <set_handler_state>:

void set_handler_state(uint8_t state) {
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	71fb      	strb	r3, [r7, #7]
	prev_handler_state = handler_state;
 800292a:	4b0a      	ldr	r3, [pc, #40]	@ (8002954 <set_handler_state+0x34>)
 800292c:	781a      	ldrb	r2, [r3, #0]
 800292e:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <set_handler_state+0x38>)
 8002930:	701a      	strb	r2, [r3, #0]
	handler_state = state;
 8002932:	4a08      	ldr	r2, [pc, #32]	@ (8002954 <set_handler_state+0x34>)
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	7013      	strb	r3, [r2, #0]
	leave_handler_state(prev_handler_state);
 8002938:	4b07      	ldr	r3, [pc, #28]	@ (8002958 <set_handler_state+0x38>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ffcd 	bl	80028dc <leave_handler_state>
	enter_handler_state(state);
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fea3 	bl	8002690 <enter_handler_state>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	2000047c 	.word	0x2000047c
 8002958:	2000047d 	.word	0x2000047d

0800295c <inc_handler_currentTime>:

uint8_t get_handler_state(void) {
	return handler_state;
}

void inc_handler_currentTime(uint16_t dT) {
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	80fb      	strh	r3, [r7, #6]
	time_val = time_val + dT;
 8002966:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <inc_handler_currentTime+0x24>)
 8002968:	881a      	ldrh	r2, [r3, #0]
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	4413      	add	r3, r2
 800296e:	b29a      	uxth	r2, r3
 8002970:	4b03      	ldr	r3, [pc, #12]	@ (8002980 <inc_handler_currentTime+0x24>)
 8002972:	801a      	strh	r2, [r3, #0]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	2000047e 	.word	0x2000047e

08002984 <get_adc_values>:

adc_values* get_adc_values(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
	return &adc_values1;
 8002988:	4b02      	ldr	r3, [pc, #8]	@ (8002994 <get_adc_values+0x10>)
}
 800298a:	4618      	mov	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	2000049c 	.word	0x2000049c

08002998 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002998:	480d      	ldr	r0, [pc, #52]	@ (80029d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800299a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800299c:	f7ff fe66 	bl	800266c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029a0:	480c      	ldr	r0, [pc, #48]	@ (80029d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80029a2:	490d      	ldr	r1, [pc, #52]	@ (80029d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029a4:	4a0d      	ldr	r2, [pc, #52]	@ (80029dc <LoopForever+0xe>)
  movs r3, #0
 80029a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80029a8:	e002      	b.n	80029b0 <LoopCopyDataInit>

080029aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ae:	3304      	adds	r3, #4

080029b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029b4:	d3f9      	bcc.n	80029aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029b6:	4a0a      	ldr	r2, [pc, #40]	@ (80029e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029b8:	4c0a      	ldr	r4, [pc, #40]	@ (80029e4 <LoopForever+0x16>)
  movs r3, #0
 80029ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029bc:	e001      	b.n	80029c2 <LoopFillZerobss>

080029be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029c0:	3204      	adds	r2, #4

080029c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029c4:	d3fb      	bcc.n	80029be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029c6:	f005 fcc9 	bl	800835c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029ca:	f7ff f89f 	bl	8001b0c <main>

080029ce <LoopForever>:

LoopForever:
    b LoopForever
 80029ce:	e7fe      	b.n	80029ce <LoopForever>
  ldr   r0, =_estack
 80029d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029d8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80029dc:	0800b0a0 	.word	0x0800b0a0
  ldr r2, =_sbss
 80029e0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80029e4:	200005fc 	.word	0x200005fc

080029e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029e8:	e7fe      	b.n	80029e8 <ADC1_2_IRQHandler>

080029ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f4:	2003      	movs	r0, #3
 80029f6:	f001 fedd 	bl	80047b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029fa:	200f      	movs	r0, #15
 80029fc:	f000 f80e 	bl	8002a1c <HAL_InitTick>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	71fb      	strb	r3, [r7, #7]
 8002a0a:	e001      	b.n	8002a10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a0c:	f7ff fb68 	bl	80020e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a10:	79fb      	ldrb	r3, [r7, #7]

}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002a28:	4b16      	ldr	r3, [pc, #88]	@ (8002a84 <HAL_InitTick+0x68>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d022      	beq.n	8002a76 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a30:	4b15      	ldr	r3, [pc, #84]	@ (8002a88 <HAL_InitTick+0x6c>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b13      	ldr	r3, [pc, #76]	@ (8002a84 <HAL_InitTick+0x68>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002a3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a44:	4618      	mov	r0, r3
 8002a46:	f001 fee8 	bl	800481a <HAL_SYSTICK_Config>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10f      	bne.n	8002a70 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b0f      	cmp	r3, #15
 8002a54:	d809      	bhi.n	8002a6a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a56:	2200      	movs	r2, #0
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a5e:	f001 feb4 	bl	80047ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a62:	4a0a      	ldr	r2, [pc, #40]	@ (8002a8c <HAL_InitTick+0x70>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	e007      	b.n	8002a7a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
 8002a6e:	e004      	b.n	8002a7a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
 8002a74:	e001      	b.n	8002a7a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20000018 	.word	0x20000018
 8002a88:	2000000c 	.word	0x2000000c
 8002a8c:	20000014 	.word	0x20000014

08002a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a94:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <HAL_IncTick+0x1c>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <HAL_IncTick+0x20>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	4a03      	ldr	r2, [pc, #12]	@ (8002aac <HAL_IncTick+0x1c>)
 8002aa0:	6013      	str	r3, [r2, #0]
}
 8002aa2:	bf00      	nop
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	200004ac 	.word	0x200004ac
 8002ab0:	20000018 	.word	0x20000018

08002ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab8:	4b03      	ldr	r3, [pc, #12]	@ (8002ac8 <HAL_GetTick+0x14>)
 8002aba:	681b      	ldr	r3, [r3, #0]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	200004ac 	.word	0x200004ac

08002acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ad4:	f7ff ffee 	bl	8002ab4 <HAL_GetTick>
 8002ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae4:	d004      	beq.n	8002af0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ae6:	4b09      	ldr	r3, [pc, #36]	@ (8002b0c <HAL_Delay+0x40>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4413      	add	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002af0:	bf00      	nop
 8002af2:	f7ff ffdf 	bl	8002ab4 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d8f7      	bhi.n	8002af2 <HAL_Delay+0x26>
  {
  }
}
 8002b02:	bf00      	nop
 8002b04:	bf00      	nop
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000018 	.word	0x20000018

08002b10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	609a      	str	r2, [r3, #8]
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3360      	adds	r3, #96	@ 0x60
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4b08      	ldr	r3, [pc, #32]	@ (8002bbc <LL_ADC_SetOffset+0x44>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002bb0:	bf00      	nop
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	03fff000 	.word	0x03fff000

08002bc0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3360      	adds	r3, #96	@ 0x60
 8002bce:	461a      	mov	r2, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	3360      	adds	r3, #96	@ 0x60
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	431a      	orrs	r2, r3
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002c16:	bf00      	nop
 8002c18:	371c      	adds	r7, #28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b087      	sub	sp, #28
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	3360      	adds	r3, #96	@ 0x60
 8002c32:	461a      	mov	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002c4c:	bf00      	nop
 8002c4e:	371c      	adds	r7, #28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	3360      	adds	r3, #96	@ 0x60
 8002c68:	461a      	mov	r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002c82:	bf00      	nop
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	615a      	str	r2, [r3, #20]
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b087      	sub	sp, #28
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	3330      	adds	r3, #48	@ 0x30
 8002cea:	461a      	mov	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	0a1b      	lsrs	r3, r3, #8
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	4413      	add	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	211f      	movs	r1, #31
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	401a      	ands	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0e9b      	lsrs	r3, r3, #26
 8002d12:	f003 011f 	and.w	r1, r3, #31
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	431a      	orrs	r2, r3
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b087      	sub	sp, #28
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	3314      	adds	r3, #20
 8002d42:	461a      	mov	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	0e5b      	lsrs	r3, r3, #25
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	4413      	add	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	0d1b      	lsrs	r3, r3, #20
 8002d5a:	f003 031f 	and.w	r3, r3, #31
 8002d5e:	2107      	movs	r1, #7
 8002d60:	fa01 f303 	lsl.w	r3, r1, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	401a      	ands	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	0d1b      	lsrs	r3, r3, #20
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	431a      	orrs	r2, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d7c:	bf00      	nop
 8002d7e:	371c      	adds	r7, #28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da0:	43db      	mvns	r3, r3
 8002da2:	401a      	ands	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f003 0318 	and.w	r3, r3, #24
 8002daa:	4908      	ldr	r1, [pc, #32]	@ (8002dcc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002dac:	40d9      	lsrs	r1, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	400b      	ands	r3, r1
 8002db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db6:	431a      	orrs	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002dbe:	bf00      	nop
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	0007ffff 	.word	0x0007ffff

08002dd0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 031f 	and.w	r3, r3, #31
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002e18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6093      	str	r3, [r2, #8]
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e40:	d101      	bne.n	8002e46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002e64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e68:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e90:	d101      	bne.n	8002e96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002eb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002eb8:	f043 0201 	orr.w	r2, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002edc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ee0:	f043 0202 	orr.w	r2, r3, #2
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <LL_ADC_IsEnabled+0x18>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <LL_ADC_IsEnabled+0x1a>
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d101      	bne.n	8002f32 <LL_ADC_IsDisableOngoing+0x18>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <LL_ADC_IsDisableOngoing+0x1a>
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f54:	f043 0204 	orr.w	r2, r3, #4
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f7c:	f043 0210 	orr.w	r2, r3, #16
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d101      	bne.n	8002fa8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fc6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fca:	f043 0220 	orr.w	r2, r3, #32
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d101      	bne.n	8002ff6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b089      	sub	sp, #36	@ 0x24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e1a9      	b.n	8003372 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003028:	2b00      	cmp	r3, #0
 800302a:	d109      	bne.n	8003040 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff f87b 	bl	8002128 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fef1 	bl	8002e2c <LL_ADC_IsDeepPowerDownEnabled>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d004      	beq.n	800305a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fed7 	bl	8002e08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff ff0c 	bl	8002e7c <LL_ADC_IsInternalRegulatorEnabled>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d115      	bne.n	8003096 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fef0 	bl	8002e54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003074:	4b9c      	ldr	r3, [pc, #624]	@ (80032e8 <HAL_ADC_Init+0x2e4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	099b      	lsrs	r3, r3, #6
 800307a:	4a9c      	ldr	r2, [pc, #624]	@ (80032ec <HAL_ADC_Init+0x2e8>)
 800307c:	fba2 2303 	umull	r2, r3, r2, r3
 8003080:	099b      	lsrs	r3, r3, #6
 8003082:	3301      	adds	r3, #1
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003088:	e002      	b.n	8003090 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3b01      	subs	r3, #1
 800308e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f9      	bne.n	800308a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff feee 	bl	8002e7c <LL_ADC_IsInternalRegulatorEnabled>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10d      	bne.n	80030c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030aa:	f043 0210 	orr.w	r2, r3, #16
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b6:	f043 0201 	orr.w	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff ff62 	bl	8002f90 <LL_ADC_REG_IsConversionOngoing>
 80030cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f040 8142 	bne.w	8003360 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f040 813e 	bne.w	8003360 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80030ec:	f043 0202 	orr.w	r2, r3, #2
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fefb 	bl	8002ef4 <LL_ADC_IsEnabled>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d141      	bne.n	8003188 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800310c:	d004      	beq.n	8003118 <HAL_ADC_Init+0x114>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a77      	ldr	r2, [pc, #476]	@ (80032f0 <HAL_ADC_Init+0x2ec>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d10f      	bne.n	8003138 <HAL_ADC_Init+0x134>
 8003118:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800311c:	f7ff feea 	bl	8002ef4 <LL_ADC_IsEnabled>
 8003120:	4604      	mov	r4, r0
 8003122:	4873      	ldr	r0, [pc, #460]	@ (80032f0 <HAL_ADC_Init+0x2ec>)
 8003124:	f7ff fee6 	bl	8002ef4 <LL_ADC_IsEnabled>
 8003128:	4603      	mov	r3, r0
 800312a:	4323      	orrs	r3, r4
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	e012      	b.n	800315e <HAL_ADC_Init+0x15a>
 8003138:	486e      	ldr	r0, [pc, #440]	@ (80032f4 <HAL_ADC_Init+0x2f0>)
 800313a:	f7ff fedb 	bl	8002ef4 <LL_ADC_IsEnabled>
 800313e:	4604      	mov	r4, r0
 8003140:	486d      	ldr	r0, [pc, #436]	@ (80032f8 <HAL_ADC_Init+0x2f4>)
 8003142:	f7ff fed7 	bl	8002ef4 <LL_ADC_IsEnabled>
 8003146:	4603      	mov	r3, r0
 8003148:	431c      	orrs	r4, r3
 800314a:	486c      	ldr	r0, [pc, #432]	@ (80032fc <HAL_ADC_Init+0x2f8>)
 800314c:	f7ff fed2 	bl	8002ef4 <LL_ADC_IsEnabled>
 8003150:	4603      	mov	r3, r0
 8003152:	4323      	orrs	r3, r4
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d012      	beq.n	8003188 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800316a:	d004      	beq.n	8003176 <HAL_ADC_Init+0x172>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a5f      	ldr	r2, [pc, #380]	@ (80032f0 <HAL_ADC_Init+0x2ec>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <HAL_ADC_Init+0x176>
 8003176:	4a62      	ldr	r2, [pc, #392]	@ (8003300 <HAL_ADC_Init+0x2fc>)
 8003178:	e000      	b.n	800317c <HAL_ADC_Init+0x178>
 800317a:	4a62      	ldr	r2, [pc, #392]	@ (8003304 <HAL_ADC_Init+0x300>)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	4619      	mov	r1, r3
 8003182:	4610      	mov	r0, r2
 8003184:	f7ff fcc4 	bl	8002b10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	7f5b      	ldrb	r3, [r3, #29]
 800318c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003192:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003198:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800319e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031a6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d106      	bne.n	80031c4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ba:	3b01      	subs	r3, #1
 80031bc:	045b      	lsls	r3, r3, #17
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d009      	beq.n	80031e0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	4b48      	ldr	r3, [pc, #288]	@ (8003308 <HAL_ADC_Init+0x304>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	69b9      	ldr	r1, [r7, #24]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fee5 	bl	8002fde <LL_ADC_INJ_IsConversionOngoing>
 8003214:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d17f      	bne.n	800331c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d17c      	bne.n	800331c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003226:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800322e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800323e:	f023 0302 	bic.w	r3, r3, #2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	69b9      	ldr	r1, [r7, #24]
 8003248:	430b      	orrs	r3, r1
 800324a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d017      	beq.n	8003284 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003262:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800326c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003270:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6911      	ldr	r1, [r2, #16]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	430b      	orrs	r3, r1
 800327e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003282:	e013      	b.n	80032ac <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003292:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80032a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032a8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d12a      	bne.n	800330c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80032c0:	f023 0304 	bic.w	r3, r3, #4
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032cc:	4311      	orrs	r1, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032d2:	4311      	orrs	r1, r2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80032d8:	430a      	orrs	r2, r1
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0201 	orr.w	r2, r2, #1
 80032e4:	611a      	str	r2, [r3, #16]
 80032e6:	e019      	b.n	800331c <HAL_ADC_Init+0x318>
 80032e8:	2000000c 	.word	0x2000000c
 80032ec:	053e2d63 	.word	0x053e2d63
 80032f0:	50000100 	.word	0x50000100
 80032f4:	50000400 	.word	0x50000400
 80032f8:	50000500 	.word	0x50000500
 80032fc:	50000600 	.word	0x50000600
 8003300:	50000300 	.word	0x50000300
 8003304:	50000700 	.word	0x50000700
 8003308:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691a      	ldr	r2, [r3, #16]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d10c      	bne.n	800333e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332a:	f023 010f 	bic.w	r1, r3, #15
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	1e5a      	subs	r2, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	631a      	str	r2, [r3, #48]	@ 0x30
 800333c:	e007      	b.n	800334e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 020f 	bic.w	r2, r2, #15
 800334c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003352:	f023 0303 	bic.w	r3, r3, #3
 8003356:	f043 0201 	orr.w	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800335e:	e007      	b.n	8003370 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003364:	f043 0210 	orr.w	r2, r3, #16
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003370:	7ffb      	ldrb	r3, [r7, #31]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3724      	adds	r7, #36	@ 0x24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd90      	pop	{r4, r7, pc}
 800337a:	bf00      	nop

0800337c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800338c:	d004      	beq.n	8003398 <HAL_ADC_Start+0x1c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a67      	ldr	r2, [pc, #412]	@ (8003530 <HAL_ADC_Start+0x1b4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d101      	bne.n	800339c <HAL_ADC_Start+0x20>
 8003398:	4b66      	ldr	r3, [pc, #408]	@ (8003534 <HAL_ADC_Start+0x1b8>)
 800339a:	e000      	b.n	800339e <HAL_ADC_Start+0x22>
 800339c:	4b66      	ldr	r3, [pc, #408]	@ (8003538 <HAL_ADC_Start+0x1bc>)
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fd16 	bl	8002dd0 <LL_ADC_GetMultimode>
 80033a4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fdf0 	bl	8002f90 <LL_ADC_REG_IsConversionOngoing>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f040 80b4 	bne.w	8003520 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_ADC_Start+0x4a>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e0af      	b.n	8003526 <HAL_ADC_Start+0x1aa>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fefc 	bl	80041cc <ADC_Enable>
 80033d4:	4603      	mov	r3, r0
 80033d6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f040 809b 	bne.w	8003516 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003530 <HAL_ADC_Start+0x1b4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d009      	beq.n	8003412 <HAL_ADC_Start+0x96>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a4e      	ldr	r2, [pc, #312]	@ (800353c <HAL_ADC_Start+0x1c0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d002      	beq.n	800340e <HAL_ADC_Start+0x92>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	e003      	b.n	8003416 <HAL_ADC_Start+0x9a>
 800340e:	4b4c      	ldr	r3, [pc, #304]	@ (8003540 <HAL_ADC_Start+0x1c4>)
 8003410:	e001      	b.n	8003416 <HAL_ADC_Start+0x9a>
 8003412:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6812      	ldr	r2, [r2, #0]
 800341a:	4293      	cmp	r3, r2
 800341c:	d002      	beq.n	8003424 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d105      	bne.n	8003430 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003428:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003434:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800343c:	d106      	bne.n	800344c <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003442:	f023 0206 	bic.w	r2, r3, #6
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	661a      	str	r2, [r3, #96]	@ 0x60
 800344a:	e002      	b.n	8003452 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	221c      	movs	r2, #28
 8003458:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a32      	ldr	r2, [pc, #200]	@ (8003530 <HAL_ADC_Start+0x1b4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d009      	beq.n	8003480 <HAL_ADC_Start+0x104>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a32      	ldr	r2, [pc, #200]	@ (800353c <HAL_ADC_Start+0x1c0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d002      	beq.n	800347c <HAL_ADC_Start+0x100>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	e003      	b.n	8003484 <HAL_ADC_Start+0x108>
 800347c:	4b30      	ldr	r3, [pc, #192]	@ (8003540 <HAL_ADC_Start+0x1c4>)
 800347e:	e001      	b.n	8003484 <HAL_ADC_Start+0x108>
 8003480:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	4293      	cmp	r3, r2
 800348a:	d008      	beq.n	800349e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	2b05      	cmp	r3, #5
 8003496:	d002      	beq.n	800349e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b09      	cmp	r3, #9
 800349c:	d114      	bne.n	80034c8 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d007      	beq.n	80034bc <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80034b4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff fd3d 	bl	8002f40 <LL_ADC_REG_StartConversion>
 80034c6:	e02d      	b.n	8003524 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034cc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a15      	ldr	r2, [pc, #84]	@ (8003530 <HAL_ADC_Start+0x1b4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d009      	beq.n	80034f2 <HAL_ADC_Start+0x176>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a16      	ldr	r2, [pc, #88]	@ (800353c <HAL_ADC_Start+0x1c0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d002      	beq.n	80034ee <HAL_ADC_Start+0x172>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	e003      	b.n	80034f6 <HAL_ADC_Start+0x17a>
 80034ee:	4b14      	ldr	r3, [pc, #80]	@ (8003540 <HAL_ADC_Start+0x1c4>)
 80034f0:	e001      	b.n	80034f6 <HAL_ADC_Start+0x17a>
 80034f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80034f6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00f      	beq.n	8003524 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003508:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800350c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003514:	e006      	b.n	8003524 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800351e:	e001      	b.n	8003524 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003520:	2302      	movs	r3, #2
 8003522:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003524:	7dfb      	ldrb	r3, [r7, #23]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	50000100 	.word	0x50000100
 8003534:	50000300 	.word	0x50000300
 8003538:	50000700 	.word	0x50000700
 800353c:	50000500 	.word	0x50000500
 8003540:	50000400 	.word	0x50000400

08003544 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_ADC_Stop+0x16>
 8003556:	2302      	movs	r3, #2
 8003558:	e023      	b.n	80035a2 <HAL_ADC_Stop+0x5e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003562:	2103      	movs	r1, #3
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fd75 	bl	8004054 <ADC_ConversionStop>
 800356a:	4603      	mov	r3, r0
 800356c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d111      	bne.n	8003598 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 febf 	bl	80042f8 <ADC_Disable>
 800357a:	4603      	mov	r3, r0
 800357c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d109      	bne.n	8003598 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003588:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800358c:	f023 0301 	bic.w	r3, r3, #1
 8003590:	f043 0201 	orr.w	r2, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035be:	d004      	beq.n	80035ca <HAL_ADC_PollForConversion+0x1e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a77      	ldr	r2, [pc, #476]	@ (80037a4 <HAL_ADC_PollForConversion+0x1f8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d101      	bne.n	80035ce <HAL_ADC_PollForConversion+0x22>
 80035ca:	4b77      	ldr	r3, [pc, #476]	@ (80037a8 <HAL_ADC_PollForConversion+0x1fc>)
 80035cc:	e000      	b.n	80035d0 <HAL_ADC_PollForConversion+0x24>
 80035ce:	4b77      	ldr	r3, [pc, #476]	@ (80037ac <HAL_ADC_PollForConversion+0x200>)
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fbfd 	bl	8002dd0 <LL_ADC_GetMultimode>
 80035d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d102      	bne.n	80035e6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80035e0:	2308      	movs	r3, #8
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	e037      	b.n	8003656 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2b05      	cmp	r3, #5
 80035f0:	d002      	beq.n	80035f8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b09      	cmp	r3, #9
 80035f6:	d111      	bne.n	800361c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360a:	f043 0220 	orr.w	r2, r3, #32
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e0c1      	b.n	800379a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003616:	2304      	movs	r3, #4
 8003618:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800361a:	e01c      	b.n	8003656 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003624:	d004      	beq.n	8003630 <HAL_ADC_PollForConversion+0x84>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a5e      	ldr	r2, [pc, #376]	@ (80037a4 <HAL_ADC_PollForConversion+0x1f8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d101      	bne.n	8003634 <HAL_ADC_PollForConversion+0x88>
 8003630:	4b5d      	ldr	r3, [pc, #372]	@ (80037a8 <HAL_ADC_PollForConversion+0x1fc>)
 8003632:	e000      	b.n	8003636 <HAL_ADC_PollForConversion+0x8a>
 8003634:	4b5d      	ldr	r3, [pc, #372]	@ (80037ac <HAL_ADC_PollForConversion+0x200>)
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff fbd8 	bl	8002dec <LL_ADC_GetMultiDMATransfer>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d007      	beq.n	8003652 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003646:	f043 0220 	orr.w	r2, r3, #32
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e0a3      	b.n	800379a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003652:	2304      	movs	r3, #4
 8003654:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003656:	f7ff fa2d 	bl	8002ab4 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800365c:	e021      	b.n	80036a2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003664:	d01d      	beq.n	80036a2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003666:	f7ff fa25 	bl	8002ab4 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d302      	bcc.n	800367c <HAL_ADC_PollForConversion+0xd0>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d112      	bne.n	80036a2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10b      	bne.n	80036a2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368e:	f043 0204 	orr.w	r2, r3, #4
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e07b      	b.n	800379a <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0d6      	beq.n	800365e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff faf7 	bl	8002cb4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d01c      	beq.n	8003706 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	7f5b      	ldrb	r3, [r3, #29]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d118      	bne.n	8003706 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d111      	bne.n	8003706 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d105      	bne.n	8003706 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036fe:	f043 0201 	orr.w	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a26      	ldr	r2, [pc, #152]	@ (80037a4 <HAL_ADC_PollForConversion+0x1f8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d009      	beq.n	8003724 <HAL_ADC_PollForConversion+0x178>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a26      	ldr	r2, [pc, #152]	@ (80037b0 <HAL_ADC_PollForConversion+0x204>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d002      	beq.n	8003720 <HAL_ADC_PollForConversion+0x174>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	e003      	b.n	8003728 <HAL_ADC_PollForConversion+0x17c>
 8003720:	4b24      	ldr	r3, [pc, #144]	@ (80037b4 <HAL_ADC_PollForConversion+0x208>)
 8003722:	e001      	b.n	8003728 <HAL_ADC_PollForConversion+0x17c>
 8003724:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6812      	ldr	r2, [r2, #0]
 800372c:	4293      	cmp	r3, r2
 800372e:	d008      	beq.n	8003742 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b05      	cmp	r3, #5
 800373a:	d002      	beq.n	8003742 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2b09      	cmp	r3, #9
 8003740:	d104      	bne.n	800374c <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	e014      	b.n	8003776 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a14      	ldr	r2, [pc, #80]	@ (80037a4 <HAL_ADC_PollForConversion+0x1f8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d009      	beq.n	800376a <HAL_ADC_PollForConversion+0x1be>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a15      	ldr	r2, [pc, #84]	@ (80037b0 <HAL_ADC_PollForConversion+0x204>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d002      	beq.n	8003766 <HAL_ADC_PollForConversion+0x1ba>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	e003      	b.n	800376e <HAL_ADC_PollForConversion+0x1c2>
 8003766:	4b13      	ldr	r3, [pc, #76]	@ (80037b4 <HAL_ADC_PollForConversion+0x208>)
 8003768:	e001      	b.n	800376e <HAL_ADC_PollForConversion+0x1c2>
 800376a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800376e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	2b08      	cmp	r3, #8
 800377a:	d104      	bne.n	8003786 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2208      	movs	r2, #8
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	e008      	b.n	8003798 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d103      	bne.n	8003798 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	220c      	movs	r2, #12
 8003796:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3720      	adds	r7, #32
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	50000100 	.word	0x50000100
 80037a8:	50000300 	.word	0x50000300
 80037ac:	50000700 	.word	0x50000700
 80037b0:	50000500 	.word	0x50000500
 80037b4:	50000400 	.word	0x50000400

080037b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b0b6      	sub	sp, #216	@ 0xd8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d102      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x24>
 80037f2:	2302      	movs	r3, #2
 80037f4:	f000 bc13 	b.w	800401e <HAL_ADC_ConfigChannel+0x84a>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff fbc3 	bl	8002f90 <LL_ADC_REG_IsConversionOngoing>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	f040 83f3 	bne.w	8003ff8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	6859      	ldr	r1, [r3, #4]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	f7ff fa5b 	bl	8002cda <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff fbb1 	bl	8002f90 <LL_ADC_REG_IsConversionOngoing>
 800382e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff fbd1 	bl	8002fde <LL_ADC_INJ_IsConversionOngoing>
 800383c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003840:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003844:	2b00      	cmp	r3, #0
 8003846:	f040 81d9 	bne.w	8003bfc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800384a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800384e:	2b00      	cmp	r3, #0
 8003850:	f040 81d4 	bne.w	8003bfc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800385c:	d10f      	bne.n	800387e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2200      	movs	r2, #0
 8003868:	4619      	mov	r1, r3
 800386a:	f7ff fa62 	bl	8002d32 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff fa09 	bl	8002c8e <LL_ADC_SetSamplingTimeCommonConfig>
 800387c:	e00e      	b.n	800389c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6819      	ldr	r1, [r3, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	461a      	mov	r2, r3
 800388c:	f7ff fa51 	bl	8002d32 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff f9f9 	bl	8002c8e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	08db      	lsrs	r3, r3, #3
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d022      	beq.n	8003904 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	6919      	ldr	r1, [r3, #16]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038ce:	f7ff f953 	bl	8002b78 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	6919      	ldr	r1, [r3, #16]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	461a      	mov	r2, r3
 80038e0:	f7ff f99f 	bl	8002c22 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d102      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x126>
 80038f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038f8:	e000      	b.n	80038fc <HAL_ADC_ConfigChannel+0x128>
 80038fa:	2300      	movs	r3, #0
 80038fc:	461a      	mov	r2, r3
 80038fe:	f7ff f9ab 	bl	8002c58 <LL_ADC_SetOffsetSaturation>
 8003902:	e17b      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2100      	movs	r1, #0
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff f958 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 8003910:	4603      	mov	r3, r0
 8003912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x15c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2100      	movs	r1, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff f94d 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 8003926:	4603      	mov	r3, r0
 8003928:	0e9b      	lsrs	r3, r3, #26
 800392a:	f003 021f 	and.w	r2, r3, #31
 800392e:	e01e      	b.n	800396e <HAL_ADC_ConfigChannel+0x19a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff f942 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 800393c:	4603      	mov	r3, r0
 800393e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003942:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003946:	fa93 f3a3 	rbit	r3, r3
 800394a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800394e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003952:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003956:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800395e:	2320      	movs	r3, #32
 8003960:	e004      	b.n	800396c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003962:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003966:	fab3 f383 	clz	r3, r3
 800396a:	b2db      	uxtb	r3, r3
 800396c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003976:	2b00      	cmp	r3, #0
 8003978:	d105      	bne.n	8003986 <HAL_ADC_ConfigChannel+0x1b2>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	0e9b      	lsrs	r3, r3, #26
 8003980:	f003 031f 	and.w	r3, r3, #31
 8003984:	e018      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x1e4>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003992:	fa93 f3a3 	rbit	r3, r3
 8003996:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800399a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800399e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80039a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80039aa:	2320      	movs	r3, #32
 80039ac:	e004      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80039ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80039b2:	fab3 f383 	clz	r3, r3
 80039b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d106      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2200      	movs	r2, #0
 80039c2:	2100      	movs	r1, #0
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff f911 	bl	8002bec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2101      	movs	r1, #1
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff f8f5 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x222>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2101      	movs	r1, #1
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff f8ea 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 80039ec:	4603      	mov	r3, r0
 80039ee:	0e9b      	lsrs	r3, r3, #26
 80039f0:	f003 021f 	and.w	r2, r3, #31
 80039f4:	e01e      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x260>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2101      	movs	r1, #1
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff f8df 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a0c:	fa93 f3a3 	rbit	r3, r3
 8003a10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003a14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003a1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003a24:	2320      	movs	r3, #32
 8003a26:	e004      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003a28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a2c:	fab3 f383 	clz	r3, r3
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d105      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x278>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	0e9b      	lsrs	r3, r3, #26
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	e018      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x2aa>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003a60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003a70:	2320      	movs	r3, #32
 8003a72:	e004      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a78:	fab3 f383 	clz	r3, r3
 8003a7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d106      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2200      	movs	r2, #0
 8003a88:	2101      	movs	r1, #1
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff f8ae 	bl	8002bec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2102      	movs	r1, #2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff f892 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x2e8>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2102      	movs	r1, #2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff f887 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	0e9b      	lsrs	r3, r3, #26
 8003ab6:	f003 021f 	and.w	r2, r3, #31
 8003aba:	e01e      	b.n	8003afa <HAL_ADC_ConfigChannel+0x326>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff f87c 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003ada:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ade:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003ae2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003aea:	2320      	movs	r3, #32
 8003aec:	e004      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003aee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003af2:	fab3 f383 	clz	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d105      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x33e>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	0e9b      	lsrs	r3, r3, #26
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	e016      	b.n	8003b40 <HAL_ADC_ConfigChannel+0x36c>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b1e:	fa93 f3a3 	rbit	r3, r3
 8003b22:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003b24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003b2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003b32:	2320      	movs	r3, #32
 8003b34:	e004      	b.n	8003b40 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003b36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d106      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff f84d 	bl	8002bec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2103      	movs	r1, #3
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff f831 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10a      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x3aa>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2103      	movs	r1, #3
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff f826 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 8003b74:	4603      	mov	r3, r0
 8003b76:	0e9b      	lsrs	r3, r3, #26
 8003b78:	f003 021f 	and.w	r2, r3, #31
 8003b7c:	e017      	b.n	8003bae <HAL_ADC_ConfigChannel+0x3da>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2103      	movs	r1, #3
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff f81b 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b90:	fa93 f3a3 	rbit	r3, r3
 8003b94:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003b96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b98:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003b9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003ba0:	2320      	movs	r3, #32
 8003ba2:	e003      	b.n	8003bac <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003ba4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ba6:	fab3 f383 	clz	r3, r3
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d105      	bne.n	8003bc6 <HAL_ADC_ConfigChannel+0x3f2>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	0e9b      	lsrs	r3, r3, #26
 8003bc0:	f003 031f 	and.w	r3, r3, #31
 8003bc4:	e011      	b.n	8003bea <HAL_ADC_ConfigChannel+0x416>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bce:	fa93 f3a3 	rbit	r3, r3
 8003bd2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003bd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003bd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003bde:	2320      	movs	r3, #32
 8003be0:	e003      	b.n	8003bea <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003be2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003be4:	fab3 f383 	clz	r3, r3
 8003be8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d106      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2103      	movs	r1, #3
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe fff8 	bl	8002bec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff f977 	bl	8002ef4 <LL_ADC_IsEnabled>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f040 813d 	bne.w	8003e88 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6819      	ldr	r1, [r3, #0]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f7ff f8b4 	bl	8002d88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	4aa2      	ldr	r2, [pc, #648]	@ (8003eb0 <HAL_ADC_ConfigChannel+0x6dc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	f040 812e 	bne.w	8003e88 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10b      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x480>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	0e9b      	lsrs	r3, r3, #26
 8003c42:	3301      	adds	r3, #1
 8003c44:	f003 031f 	and.w	r3, r3, #31
 8003c48:	2b09      	cmp	r3, #9
 8003c4a:	bf94      	ite	ls
 8003c4c:	2301      	movls	r3, #1
 8003c4e:	2300      	movhi	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	e019      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x4b4>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c5c:	fa93 f3a3 	rbit	r3, r3
 8003c60:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003c62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c64:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003c66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003c6c:	2320      	movs	r3, #32
 8003c6e:	e003      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003c70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c72:	fab3 f383 	clz	r3, r3
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	3301      	adds	r3, #1
 8003c7a:	f003 031f 	and.w	r3, r3, #31
 8003c7e:	2b09      	cmp	r3, #9
 8003c80:	bf94      	ite	ls
 8003c82:	2301      	movls	r3, #1
 8003c84:	2300      	movhi	r3, #0
 8003c86:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d079      	beq.n	8003d80 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d107      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x4d4>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	0e9b      	lsrs	r3, r3, #26
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	069b      	lsls	r3, r3, #26
 8003ca2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ca6:	e015      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x500>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cb0:	fa93 f3a3 	rbit	r3, r3
 8003cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003cb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cb8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003cc0:	2320      	movs	r3, #32
 8003cc2:	e003      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc6:	fab3 f383 	clz	r3, r3
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	3301      	adds	r3, #1
 8003cce:	069b      	lsls	r3, r3, #26
 8003cd0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d109      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x520>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	0e9b      	lsrs	r3, r3, #26
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	2101      	movs	r1, #1
 8003cee:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf2:	e017      	b.n	8003d24 <HAL_ADC_ConfigChannel+0x550>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cfc:	fa93 f3a3 	rbit	r3, r3
 8003d00:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d04:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003d0c:	2320      	movs	r3, #32
 8003d0e:	e003      	b.n	8003d18 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003d10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d12:	fab3 f383 	clz	r3, r3
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	3301      	adds	r3, #1
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	2101      	movs	r1, #1
 8003d20:	fa01 f303 	lsl.w	r3, r1, r3
 8003d24:	ea42 0103 	orr.w	r1, r2, r3
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10a      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x576>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	0e9b      	lsrs	r3, r3, #26
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	f003 021f 	and.w	r2, r3, #31
 8003d40:	4613      	mov	r3, r2
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	4413      	add	r3, r2
 8003d46:	051b      	lsls	r3, r3, #20
 8003d48:	e018      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x5a8>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d52:	fa93 f3a3 	rbit	r3, r3
 8003d56:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003d62:	2320      	movs	r3, #32
 8003d64:	e003      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d68:	fab3 f383 	clz	r3, r3
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	3301      	adds	r3, #1
 8003d70:	f003 021f 	and.w	r2, r3, #31
 8003d74:	4613      	mov	r3, r2
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	4413      	add	r3, r2
 8003d7a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	e07e      	b.n	8003e7e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d107      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x5c8>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	0e9b      	lsrs	r3, r3, #26
 8003d92:	3301      	adds	r3, #1
 8003d94:	069b      	lsls	r3, r3, #26
 8003d96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d9a:	e015      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x5f4>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da4:	fa93 f3a3 	rbit	r3, r3
 8003da8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dac:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003db4:	2320      	movs	r3, #32
 8003db6:	e003      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dba:	fab3 f383 	clz	r3, r3
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	069b      	lsls	r3, r3, #26
 8003dc4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d109      	bne.n	8003de8 <HAL_ADC_ConfigChannel+0x614>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	0e9b      	lsrs	r3, r3, #26
 8003dda:	3301      	adds	r3, #1
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	2101      	movs	r1, #1
 8003de2:	fa01 f303 	lsl.w	r3, r1, r3
 8003de6:	e017      	b.n	8003e18 <HAL_ADC_ConfigChannel+0x644>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	fa93 f3a3 	rbit	r3, r3
 8003df4:	61fb      	str	r3, [r7, #28]
  return result;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003e00:	2320      	movs	r3, #32
 8003e02:	e003      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e06:	fab3 f383 	clz	r3, r3
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	f003 031f 	and.w	r3, r3, #31
 8003e12:	2101      	movs	r1, #1
 8003e14:	fa01 f303 	lsl.w	r3, r1, r3
 8003e18:	ea42 0103 	orr.w	r1, r2, r3
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10d      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x670>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	0e9b      	lsrs	r3, r3, #26
 8003e2e:	3301      	adds	r3, #1
 8003e30:	f003 021f 	and.w	r2, r3, #31
 8003e34:	4613      	mov	r3, r2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	4413      	add	r3, r2
 8003e3a:	3b1e      	subs	r3, #30
 8003e3c:	051b      	lsls	r3, r3, #20
 8003e3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e42:	e01b      	b.n	8003e7c <HAL_ADC_ConfigChannel+0x6a8>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	fa93 f3a3 	rbit	r3, r3
 8003e50:	613b      	str	r3, [r7, #16]
  return result;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003e5c:	2320      	movs	r3, #32
 8003e5e:	e003      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	fab3 f383 	clz	r3, r3
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	3301      	adds	r3, #1
 8003e6a:	f003 021f 	and.w	r2, r3, #31
 8003e6e:	4613      	mov	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4413      	add	r3, r2
 8003e74:	3b1e      	subs	r3, #30
 8003e76:	051b      	lsls	r3, r3, #20
 8003e78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e7c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e82:	4619      	mov	r1, r3
 8003e84:	f7fe ff55 	bl	8002d32 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4b09      	ldr	r3, [pc, #36]	@ (8003eb4 <HAL_ADC_ConfigChannel+0x6e0>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 80be 	beq.w	8004012 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e9e:	d004      	beq.n	8003eaa <HAL_ADC_ConfigChannel+0x6d6>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a04      	ldr	r2, [pc, #16]	@ (8003eb8 <HAL_ADC_ConfigChannel+0x6e4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d10a      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x6ec>
 8003eaa:	4b04      	ldr	r3, [pc, #16]	@ (8003ebc <HAL_ADC_ConfigChannel+0x6e8>)
 8003eac:	e009      	b.n	8003ec2 <HAL_ADC_ConfigChannel+0x6ee>
 8003eae:	bf00      	nop
 8003eb0:	407f0000 	.word	0x407f0000
 8003eb4:	80080000 	.word	0x80080000
 8003eb8:	50000100 	.word	0x50000100
 8003ebc:	50000300 	.word	0x50000300
 8003ec0:	4b59      	ldr	r3, [pc, #356]	@ (8004028 <HAL_ADC_ConfigChannel+0x854>)
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fe fe4a 	bl	8002b5c <LL_ADC_GetCommonPathInternalCh>
 8003ec8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a56      	ldr	r2, [pc, #344]	@ (800402c <HAL_ADC_ConfigChannel+0x858>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d004      	beq.n	8003ee0 <HAL_ADC_ConfigChannel+0x70c>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a55      	ldr	r2, [pc, #340]	@ (8004030 <HAL_ADC_ConfigChannel+0x85c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d13a      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ee4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d134      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ef4:	d005      	beq.n	8003f02 <HAL_ADC_ConfigChannel+0x72e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a4e      	ldr	r2, [pc, #312]	@ (8004034 <HAL_ADC_ConfigChannel+0x860>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	f040 8085 	bne.w	800400c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f0a:	d004      	beq.n	8003f16 <HAL_ADC_ConfigChannel+0x742>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a49      	ldr	r2, [pc, #292]	@ (8004038 <HAL_ADC_ConfigChannel+0x864>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d101      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x746>
 8003f16:	4a49      	ldr	r2, [pc, #292]	@ (800403c <HAL_ADC_ConfigChannel+0x868>)
 8003f18:	e000      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x748>
 8003f1a:	4a43      	ldr	r2, [pc, #268]	@ (8004028 <HAL_ADC_ConfigChannel+0x854>)
 8003f1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f7fe fe05 	bl	8002b36 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f2c:	4b44      	ldr	r3, [pc, #272]	@ (8004040 <HAL_ADC_ConfigChannel+0x86c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	099b      	lsrs	r3, r3, #6
 8003f32:	4a44      	ldr	r2, [pc, #272]	@ (8004044 <HAL_ADC_ConfigChannel+0x870>)
 8003f34:	fba2 2303 	umull	r2, r3, r2, r3
 8003f38:	099b      	lsrs	r3, r3, #6
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f46:	e002      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f9      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f54:	e05a      	b.n	800400c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a3b      	ldr	r2, [pc, #236]	@ (8004048 <HAL_ADC_ConfigChannel+0x874>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d125      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d11f      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a31      	ldr	r2, [pc, #196]	@ (8004038 <HAL_ADC_ConfigChannel+0x864>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d104      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x7ac>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a34      	ldr	r2, [pc, #208]	@ (800404c <HAL_ADC_ConfigChannel+0x878>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d047      	beq.n	8004010 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f88:	d004      	beq.n	8003f94 <HAL_ADC_ConfigChannel+0x7c0>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8004038 <HAL_ADC_ConfigChannel+0x864>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d101      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x7c4>
 8003f94:	4a29      	ldr	r2, [pc, #164]	@ (800403c <HAL_ADC_ConfigChannel+0x868>)
 8003f96:	e000      	b.n	8003f9a <HAL_ADC_ConfigChannel+0x7c6>
 8003f98:	4a23      	ldr	r2, [pc, #140]	@ (8004028 <HAL_ADC_ConfigChannel+0x854>)
 8003f9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	f7fe fdc6 	bl	8002b36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003faa:	e031      	b.n	8004010 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a27      	ldr	r2, [pc, #156]	@ (8004050 <HAL_ADC_ConfigChannel+0x87c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d12d      	bne.n	8004012 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d127      	bne.n	8004012 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8004038 <HAL_ADC_ConfigChannel+0x864>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d022      	beq.n	8004012 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fd4:	d004      	beq.n	8003fe0 <HAL_ADC_ConfigChannel+0x80c>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a17      	ldr	r2, [pc, #92]	@ (8004038 <HAL_ADC_ConfigChannel+0x864>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d101      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x810>
 8003fe0:	4a16      	ldr	r2, [pc, #88]	@ (800403c <HAL_ADC_ConfigChannel+0x868>)
 8003fe2:	e000      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x812>
 8003fe4:	4a10      	ldr	r2, [pc, #64]	@ (8004028 <HAL_ADC_ConfigChannel+0x854>)
 8003fe6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	f7fe fda0 	bl	8002b36 <LL_ADC_SetCommonPathInternalCh>
 8003ff6:	e00c      	b.n	8004012 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffc:	f043 0220 	orr.w	r2, r3, #32
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800400a:	e002      	b.n	8004012 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800400c:	bf00      	nop
 800400e:	e000      	b.n	8004012 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004010:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800401a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800401e:	4618      	mov	r0, r3
 8004020:	37d8      	adds	r7, #216	@ 0xd8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	50000700 	.word	0x50000700
 800402c:	c3210000 	.word	0xc3210000
 8004030:	90c00010 	.word	0x90c00010
 8004034:	50000600 	.word	0x50000600
 8004038:	50000100 	.word	0x50000100
 800403c:	50000300 	.word	0x50000300
 8004040:	2000000c 	.word	0x2000000c
 8004044:	053e2d63 	.word	0x053e2d63
 8004048:	c7520000 	.word	0xc7520000
 800404c:	50000500 	.word	0x50000500
 8004050:	cb840000 	.word	0xcb840000

08004054 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800405e:	2300      	movs	r3, #0
 8004060:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fe ff90 	bl	8002f90 <LL_ADC_REG_IsConversionOngoing>
 8004070:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe ffb1 	bl	8002fde <LL_ADC_INJ_IsConversionOngoing>
 800407c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d103      	bne.n	800408c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 8098 	beq.w	80041bc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d02a      	beq.n	80040f0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	7f5b      	ldrb	r3, [r3, #29]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d126      	bne.n	80040f0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	7f1b      	ldrb	r3, [r3, #28]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d122      	bne.n	80040f0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80040aa:	2301      	movs	r3, #1
 80040ac:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80040ae:	e014      	b.n	80040da <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	4a45      	ldr	r2, [pc, #276]	@ (80041c8 <ADC_ConversionStop+0x174>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d90d      	bls.n	80040d4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040bc:	f043 0210 	orr.w	r2, r3, #16
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c8:	f043 0201 	orr.w	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e074      	b.n	80041be <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	3301      	adds	r3, #1
 80040d8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e4:	2b40      	cmp	r3, #64	@ 0x40
 80040e6:	d1e3      	bne.n	80040b0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2240      	movs	r2, #64	@ 0x40
 80040ee:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d014      	beq.n	8004120 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe ff48 	bl	8002f90 <LL_ADC_REG_IsConversionOngoing>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00c      	beq.n	8004120 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f7fe ff05 	bl	8002f1a <LL_ADC_IsDisableOngoing>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d104      	bne.n	8004120 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f7fe ff24 	bl	8002f68 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d014      	beq.n	8004150 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7fe ff57 	bl	8002fde <LL_ADC_INJ_IsConversionOngoing>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00c      	beq.n	8004150 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe feed 	bl	8002f1a <LL_ADC_IsDisableOngoing>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d104      	bne.n	8004150 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fe ff33 	bl	8002fb6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d005      	beq.n	8004162 <ADC_ConversionStop+0x10e>
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	2b03      	cmp	r3, #3
 800415a:	d105      	bne.n	8004168 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800415c:	230c      	movs	r3, #12
 800415e:	617b      	str	r3, [r7, #20]
        break;
 8004160:	e005      	b.n	800416e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004162:	2308      	movs	r3, #8
 8004164:	617b      	str	r3, [r7, #20]
        break;
 8004166:	e002      	b.n	800416e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004168:	2304      	movs	r3, #4
 800416a:	617b      	str	r3, [r7, #20]
        break;
 800416c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800416e:	f7fe fca1 	bl	8002ab4 <HAL_GetTick>
 8004172:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004174:	e01b      	b.n	80041ae <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004176:	f7fe fc9d 	bl	8002ab4 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b05      	cmp	r3, #5
 8004182:	d914      	bls.n	80041ae <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	4013      	ands	r3, r2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00d      	beq.n	80041ae <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004196:	f043 0210 	orr.w	r2, r3, #16
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a2:	f043 0201 	orr.w	r2, r3, #1
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e007      	b.n	80041be <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1dc      	bne.n	8004176 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	a33fffff 	.word	0xa33fffff

080041cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fe fe89 	bl	8002ef4 <LL_ADC_IsEnabled>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d176      	bne.n	80042d6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	4b3c      	ldr	r3, [pc, #240]	@ (80042e0 <ADC_Enable+0x114>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00d      	beq.n	8004212 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041fa:	f043 0210 	orr.w	r2, r3, #16
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004206:	f043 0201 	orr.w	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e062      	b.n	80042d8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7fe fe44 	bl	8002ea4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004224:	d004      	beq.n	8004230 <ADC_Enable+0x64>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a2e      	ldr	r2, [pc, #184]	@ (80042e4 <ADC_Enable+0x118>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d101      	bne.n	8004234 <ADC_Enable+0x68>
 8004230:	4b2d      	ldr	r3, [pc, #180]	@ (80042e8 <ADC_Enable+0x11c>)
 8004232:	e000      	b.n	8004236 <ADC_Enable+0x6a>
 8004234:	4b2d      	ldr	r3, [pc, #180]	@ (80042ec <ADC_Enable+0x120>)
 8004236:	4618      	mov	r0, r3
 8004238:	f7fe fc90 	bl	8002b5c <LL_ADC_GetCommonPathInternalCh>
 800423c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800423e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004242:	2b00      	cmp	r3, #0
 8004244:	d013      	beq.n	800426e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004246:	4b2a      	ldr	r3, [pc, #168]	@ (80042f0 <ADC_Enable+0x124>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	099b      	lsrs	r3, r3, #6
 800424c:	4a29      	ldr	r2, [pc, #164]	@ (80042f4 <ADC_Enable+0x128>)
 800424e:	fba2 2303 	umull	r2, r3, r2, r3
 8004252:	099b      	lsrs	r3, r3, #6
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	4613      	mov	r3, r2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004260:	e002      	b.n	8004268 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	3b01      	subs	r3, #1
 8004266:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f9      	bne.n	8004262 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800426e:	f7fe fc21 	bl	8002ab4 <HAL_GetTick>
 8004272:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004274:	e028      	b.n	80042c8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe fe3a 	bl	8002ef4 <LL_ADC_IsEnabled>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d104      	bne.n	8004290 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe fe0a 	bl	8002ea4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004290:	f7fe fc10 	bl	8002ab4 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d914      	bls.n	80042c8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d00d      	beq.n	80042c8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b0:	f043 0210 	orr.w	r2, r3, #16
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042bc:	f043 0201 	orr.w	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e007      	b.n	80042d8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d1cf      	bne.n	8004276 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	8000003f 	.word	0x8000003f
 80042e4:	50000100 	.word	0x50000100
 80042e8:	50000300 	.word	0x50000300
 80042ec:	50000700 	.word	0x50000700
 80042f0:	2000000c 	.word	0x2000000c
 80042f4:	053e2d63 	.word	0x053e2d63

080042f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe fe08 	bl	8002f1a <LL_ADC_IsDisableOngoing>
 800430a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f7fe fdef 	bl	8002ef4 <LL_ADC_IsEnabled>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d047      	beq.n	80043ac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d144      	bne.n	80043ac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 030d 	and.w	r3, r3, #13
 800432c:	2b01      	cmp	r3, #1
 800432e:	d10c      	bne.n	800434a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f7fe fdc9 	bl	8002ecc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2203      	movs	r2, #3
 8004340:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004342:	f7fe fbb7 	bl	8002ab4 <HAL_GetTick>
 8004346:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004348:	e029      	b.n	800439e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434e:	f043 0210 	orr.w	r2, r3, #16
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800435a:	f043 0201 	orr.w	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e023      	b.n	80043ae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004366:	f7fe fba5 	bl	8002ab4 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d914      	bls.n	800439e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00d      	beq.n	800439e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004386:	f043 0210 	orr.w	r2, r3, #16
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004392:	f043 0201 	orr.w	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e007      	b.n	80043ae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1dc      	bne.n	8004366 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <LL_ADC_IsEnabled>:
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <LL_ADC_IsEnabled+0x18>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <LL_ADC_IsEnabled+0x1a>
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <LL_ADC_REG_IsConversionOngoing>:
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d101      	bne.n	80043f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
	...

08004404 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004404:	b590      	push	{r4, r7, lr}
 8004406:	b0a1      	sub	sp, #132	@ 0x84
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800441e:	2302      	movs	r3, #2
 8004420:	e0e7      	b.n	80045f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800442a:	2300      	movs	r3, #0
 800442c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800442e:	2300      	movs	r3, #0
 8004430:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800443a:	d102      	bne.n	8004442 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800443c:	4b6f      	ldr	r3, [pc, #444]	@ (80045fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800443e:	60bb      	str	r3, [r7, #8]
 8004440:	e009      	b.n	8004456 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a6e      	ldr	r2, [pc, #440]	@ (8004600 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d102      	bne.n	8004452 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800444c:	4b6d      	ldr	r3, [pc, #436]	@ (8004604 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800444e:	60bb      	str	r3, [r7, #8]
 8004450:	e001      	b.n	8004456 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004452:	2300      	movs	r3, #0
 8004454:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10b      	bne.n	8004474 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004460:	f043 0220 	orr.w	r2, r3, #32
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e0be      	b.n	80045f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff ffb0 	bl	80043dc <LL_ADC_REG_IsConversionOngoing>
 800447c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff ffaa 	bl	80043dc <LL_ADC_REG_IsConversionOngoing>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	f040 80a0 	bne.w	80045d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004490:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004492:	2b00      	cmp	r3, #0
 8004494:	f040 809c 	bne.w	80045d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044a0:	d004      	beq.n	80044ac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a55      	ldr	r2, [pc, #340]	@ (80045fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d101      	bne.n	80044b0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80044ac:	4b56      	ldr	r3, [pc, #344]	@ (8004608 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80044ae:	e000      	b.n	80044b2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80044b0:	4b56      	ldr	r3, [pc, #344]	@ (800460c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80044b2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d04b      	beq.n	8004554 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80044bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6859      	ldr	r1, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80044ce:	035b      	lsls	r3, r3, #13
 80044d0:	430b      	orrs	r3, r1
 80044d2:	431a      	orrs	r2, r3
 80044d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044e0:	d004      	beq.n	80044ec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a45      	ldr	r2, [pc, #276]	@ (80045fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d10f      	bne.n	800450c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80044ec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80044f0:	f7ff ff61 	bl	80043b6 <LL_ADC_IsEnabled>
 80044f4:	4604      	mov	r4, r0
 80044f6:	4841      	ldr	r0, [pc, #260]	@ (80045fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044f8:	f7ff ff5d 	bl	80043b6 <LL_ADC_IsEnabled>
 80044fc:	4603      	mov	r3, r0
 80044fe:	4323      	orrs	r3, r4
 8004500:	2b00      	cmp	r3, #0
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	e012      	b.n	8004532 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800450c:	483c      	ldr	r0, [pc, #240]	@ (8004600 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800450e:	f7ff ff52 	bl	80043b6 <LL_ADC_IsEnabled>
 8004512:	4604      	mov	r4, r0
 8004514:	483b      	ldr	r0, [pc, #236]	@ (8004604 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004516:	f7ff ff4e 	bl	80043b6 <LL_ADC_IsEnabled>
 800451a:	4603      	mov	r3, r0
 800451c:	431c      	orrs	r4, r3
 800451e:	483c      	ldr	r0, [pc, #240]	@ (8004610 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004520:	f7ff ff49 	bl	80043b6 <LL_ADC_IsEnabled>
 8004524:	4603      	mov	r3, r0
 8004526:	4323      	orrs	r3, r4
 8004528:	2b00      	cmp	r3, #0
 800452a:	bf0c      	ite	eq
 800452c:	2301      	moveq	r3, #1
 800452e:	2300      	movne	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d056      	beq.n	80045e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004536:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800453e:	f023 030f 	bic.w	r3, r3, #15
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	6811      	ldr	r1, [r2, #0]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	6892      	ldr	r2, [r2, #8]
 800454a:	430a      	orrs	r2, r1
 800454c:	431a      	orrs	r2, r3
 800454e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004550:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004552:	e047      	b.n	80045e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004554:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800455c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800455e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004568:	d004      	beq.n	8004574 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a23      	ldr	r2, [pc, #140]	@ (80045fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d10f      	bne.n	8004594 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004574:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004578:	f7ff ff1d 	bl	80043b6 <LL_ADC_IsEnabled>
 800457c:	4604      	mov	r4, r0
 800457e:	481f      	ldr	r0, [pc, #124]	@ (80045fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004580:	f7ff ff19 	bl	80043b6 <LL_ADC_IsEnabled>
 8004584:	4603      	mov	r3, r0
 8004586:	4323      	orrs	r3, r4
 8004588:	2b00      	cmp	r3, #0
 800458a:	bf0c      	ite	eq
 800458c:	2301      	moveq	r3, #1
 800458e:	2300      	movne	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	e012      	b.n	80045ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004594:	481a      	ldr	r0, [pc, #104]	@ (8004600 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004596:	f7ff ff0e 	bl	80043b6 <LL_ADC_IsEnabled>
 800459a:	4604      	mov	r4, r0
 800459c:	4819      	ldr	r0, [pc, #100]	@ (8004604 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800459e:	f7ff ff0a 	bl	80043b6 <LL_ADC_IsEnabled>
 80045a2:	4603      	mov	r3, r0
 80045a4:	431c      	orrs	r4, r3
 80045a6:	481a      	ldr	r0, [pc, #104]	@ (8004610 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80045a8:	f7ff ff05 	bl	80043b6 <LL_ADC_IsEnabled>
 80045ac:	4603      	mov	r3, r0
 80045ae:	4323      	orrs	r3, r4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bf0c      	ite	eq
 80045b4:	2301      	moveq	r3, #1
 80045b6:	2300      	movne	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d012      	beq.n	80045e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80045be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80045c6:	f023 030f 	bic.w	r3, r3, #15
 80045ca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80045cc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80045ce:	e009      	b.n	80045e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d4:	f043 0220 	orr.w	r2, r3, #32
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80045e2:	e000      	b.n	80045e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80045e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80045ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3784      	adds	r7, #132	@ 0x84
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd90      	pop	{r4, r7, pc}
 80045fa:	bf00      	nop
 80045fc:	50000100 	.word	0x50000100
 8004600:	50000400 	.word	0x50000400
 8004604:	50000500 	.word	0x50000500
 8004608:	50000300 	.word	0x50000300
 800460c:	50000700 	.word	0x50000700
 8004610:	50000600 	.word	0x50000600

08004614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004624:	4b0c      	ldr	r3, [pc, #48]	@ (8004658 <__NVIC_SetPriorityGrouping+0x44>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004630:	4013      	ands	r3, r2
 8004632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800463c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004646:	4a04      	ldr	r2, [pc, #16]	@ (8004658 <__NVIC_SetPriorityGrouping+0x44>)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	60d3      	str	r3, [r2, #12]
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	e000ed00 	.word	0xe000ed00

0800465c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004660:	4b04      	ldr	r3, [pc, #16]	@ (8004674 <__NVIC_GetPriorityGrouping+0x18>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	0a1b      	lsrs	r3, r3, #8
 8004666:	f003 0307 	and.w	r3, r3, #7
}
 800466a:	4618      	mov	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	e000ed00 	.word	0xe000ed00

08004678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004686:	2b00      	cmp	r3, #0
 8004688:	db0b      	blt.n	80046a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	f003 021f 	and.w	r2, r3, #31
 8004690:	4907      	ldr	r1, [pc, #28]	@ (80046b0 <__NVIC_EnableIRQ+0x38>)
 8004692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	2001      	movs	r0, #1
 800469a:	fa00 f202 	lsl.w	r2, r0, r2
 800469e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	e000e100 	.word	0xe000e100

080046b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	6039      	str	r1, [r7, #0]
 80046be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	db0a      	blt.n	80046de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	490c      	ldr	r1, [pc, #48]	@ (8004700 <__NVIC_SetPriority+0x4c>)
 80046ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d2:	0112      	lsls	r2, r2, #4
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	440b      	add	r3, r1
 80046d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046dc:	e00a      	b.n	80046f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	4908      	ldr	r1, [pc, #32]	@ (8004704 <__NVIC_SetPriority+0x50>)
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	3b04      	subs	r3, #4
 80046ec:	0112      	lsls	r2, r2, #4
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	440b      	add	r3, r1
 80046f2:	761a      	strb	r2, [r3, #24]
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	e000e100 	.word	0xe000e100
 8004704:	e000ed00 	.word	0xe000ed00

08004708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004708:	b480      	push	{r7}
 800470a:	b089      	sub	sp, #36	@ 0x24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f1c3 0307 	rsb	r3, r3, #7
 8004722:	2b04      	cmp	r3, #4
 8004724:	bf28      	it	cs
 8004726:	2304      	movcs	r3, #4
 8004728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3304      	adds	r3, #4
 800472e:	2b06      	cmp	r3, #6
 8004730:	d902      	bls.n	8004738 <NVIC_EncodePriority+0x30>
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	3b03      	subs	r3, #3
 8004736:	e000      	b.n	800473a <NVIC_EncodePriority+0x32>
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800473c:	f04f 32ff 	mov.w	r2, #4294967295
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43da      	mvns	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	401a      	ands	r2, r3
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004750:	f04f 31ff 	mov.w	r1, #4294967295
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	fa01 f303 	lsl.w	r3, r1, r3
 800475a:	43d9      	mvns	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004760:	4313      	orrs	r3, r2
         );
}
 8004762:	4618      	mov	r0, r3
 8004764:	3724      	adds	r7, #36	@ 0x24
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
	...

08004770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3b01      	subs	r3, #1
 800477c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004780:	d301      	bcc.n	8004786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004782:	2301      	movs	r3, #1
 8004784:	e00f      	b.n	80047a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004786:	4a0a      	ldr	r2, [pc, #40]	@ (80047b0 <SysTick_Config+0x40>)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3b01      	subs	r3, #1
 800478c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800478e:	210f      	movs	r1, #15
 8004790:	f04f 30ff 	mov.w	r0, #4294967295
 8004794:	f7ff ff8e 	bl	80046b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004798:	4b05      	ldr	r3, [pc, #20]	@ (80047b0 <SysTick_Config+0x40>)
 800479a:	2200      	movs	r2, #0
 800479c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800479e:	4b04      	ldr	r3, [pc, #16]	@ (80047b0 <SysTick_Config+0x40>)
 80047a0:	2207      	movs	r2, #7
 80047a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	e000e010 	.word	0xe000e010

080047b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff ff29 	bl	8004614 <__NVIC_SetPriorityGrouping>
}
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b086      	sub	sp, #24
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	4603      	mov	r3, r0
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
 80047d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047d8:	f7ff ff40 	bl	800465c <__NVIC_GetPriorityGrouping>
 80047dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	6978      	ldr	r0, [r7, #20]
 80047e4:	f7ff ff90 	bl	8004708 <NVIC_EncodePriority>
 80047e8:	4602      	mov	r2, r0
 80047ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ee:	4611      	mov	r1, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff ff5f 	bl	80046b4 <__NVIC_SetPriority>
}
 80047f6:	bf00      	nop
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	4603      	mov	r3, r0
 8004806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff ff33 	bl	8004678 <__NVIC_EnableIRQ>
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff ffa4 	bl	8004770 <SysTick_Config>
 8004828:	4603      	mov	r3, r0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004842:	e15a      	b.n	8004afa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	2101      	movs	r1, #1
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	fa01 f303 	lsl.w	r3, r1, r3
 8004850:	4013      	ands	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 814c 	beq.w	8004af4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	2b01      	cmp	r3, #1
 8004866:	d005      	beq.n	8004874 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004870:	2b02      	cmp	r3, #2
 8004872:	d130      	bne.n	80048d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	2203      	movs	r2, #3
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	43db      	mvns	r3, r3
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4013      	ands	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048aa:	2201      	movs	r2, #1
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	43db      	mvns	r3, r3
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4013      	ands	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	091b      	lsrs	r3, r3, #4
 80048c0:	f003 0201 	and.w	r2, r3, #1
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d017      	beq.n	8004912 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	2203      	movs	r2, #3
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43db      	mvns	r3, r3
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4013      	ands	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d123      	bne.n	8004966 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	08da      	lsrs	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3208      	adds	r2, #8
 8004926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800492a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	220f      	movs	r2, #15
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43db      	mvns	r3, r3
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	4013      	ands	r3, r2
 8004940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	691a      	ldr	r2, [r3, #16]
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	08da      	lsrs	r2, r3, #3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3208      	adds	r2, #8
 8004960:	6939      	ldr	r1, [r7, #16]
 8004962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	2203      	movs	r2, #3
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	43db      	mvns	r3, r3
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	4013      	ands	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f003 0203 	and.w	r2, r3, #3
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 80a6 	beq.w	8004af4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049a8:	4b5b      	ldr	r3, [pc, #364]	@ (8004b18 <HAL_GPIO_Init+0x2e4>)
 80049aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ac:	4a5a      	ldr	r2, [pc, #360]	@ (8004b18 <HAL_GPIO_Init+0x2e4>)
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80049b4:	4b58      	ldr	r3, [pc, #352]	@ (8004b18 <HAL_GPIO_Init+0x2e4>)
 80049b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	60bb      	str	r3, [r7, #8]
 80049be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049c0:	4a56      	ldr	r2, [pc, #344]	@ (8004b1c <HAL_GPIO_Init+0x2e8>)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	089b      	lsrs	r3, r3, #2
 80049c6:	3302      	adds	r3, #2
 80049c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f003 0303 	and.w	r3, r3, #3
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	220f      	movs	r2, #15
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	43db      	mvns	r3, r3
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	4013      	ands	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80049ea:	d01f      	beq.n	8004a2c <HAL_GPIO_Init+0x1f8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a4c      	ldr	r2, [pc, #304]	@ (8004b20 <HAL_GPIO_Init+0x2ec>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d019      	beq.n	8004a28 <HAL_GPIO_Init+0x1f4>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a4b      	ldr	r2, [pc, #300]	@ (8004b24 <HAL_GPIO_Init+0x2f0>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d013      	beq.n	8004a24 <HAL_GPIO_Init+0x1f0>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a4a      	ldr	r2, [pc, #296]	@ (8004b28 <HAL_GPIO_Init+0x2f4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00d      	beq.n	8004a20 <HAL_GPIO_Init+0x1ec>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a49      	ldr	r2, [pc, #292]	@ (8004b2c <HAL_GPIO_Init+0x2f8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d007      	beq.n	8004a1c <HAL_GPIO_Init+0x1e8>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a48      	ldr	r2, [pc, #288]	@ (8004b30 <HAL_GPIO_Init+0x2fc>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d101      	bne.n	8004a18 <HAL_GPIO_Init+0x1e4>
 8004a14:	2305      	movs	r3, #5
 8004a16:	e00a      	b.n	8004a2e <HAL_GPIO_Init+0x1fa>
 8004a18:	2306      	movs	r3, #6
 8004a1a:	e008      	b.n	8004a2e <HAL_GPIO_Init+0x1fa>
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	e006      	b.n	8004a2e <HAL_GPIO_Init+0x1fa>
 8004a20:	2303      	movs	r3, #3
 8004a22:	e004      	b.n	8004a2e <HAL_GPIO_Init+0x1fa>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e002      	b.n	8004a2e <HAL_GPIO_Init+0x1fa>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e000      	b.n	8004a2e <HAL_GPIO_Init+0x1fa>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	f002 0203 	and.w	r2, r2, #3
 8004a34:	0092      	lsls	r2, r2, #2
 8004a36:	4093      	lsls	r3, r2
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a3e:	4937      	ldr	r1, [pc, #220]	@ (8004b1c <HAL_GPIO_Init+0x2e8>)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	089b      	lsrs	r3, r3, #2
 8004a44:	3302      	adds	r3, #2
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a4c:	4b39      	ldr	r3, [pc, #228]	@ (8004b34 <HAL_GPIO_Init+0x300>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	43db      	mvns	r3, r3
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a70:	4a30      	ldr	r2, [pc, #192]	@ (8004b34 <HAL_GPIO_Init+0x300>)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a76:	4b2f      	ldr	r3, [pc, #188]	@ (8004b34 <HAL_GPIO_Init+0x300>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	43db      	mvns	r3, r3
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4013      	ands	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a9a:	4a26      	ldr	r2, [pc, #152]	@ (8004b34 <HAL_GPIO_Init+0x300>)
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004aa0:	4b24      	ldr	r3, [pc, #144]	@ (8004b34 <HAL_GPIO_Init+0x300>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4013      	ands	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b34 <HAL_GPIO_Init+0x300>)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004aca:	4b1a      	ldr	r3, [pc, #104]	@ (8004b34 <HAL_GPIO_Init+0x300>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004aee:	4a11      	ldr	r2, [pc, #68]	@ (8004b34 <HAL_GPIO_Init+0x300>)
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	3301      	adds	r3, #1
 8004af8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f47f ae9d 	bne.w	8004844 <HAL_GPIO_Init+0x10>
  }
}
 8004b0a:	bf00      	nop
 8004b0c:	bf00      	nop
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	40010000 	.word	0x40010000
 8004b20:	48000400 	.word	0x48000400
 8004b24:	48000800 	.word	0x48000800
 8004b28:	48000c00 	.word	0x48000c00
 8004b2c:	48001000 	.word	0x48001000
 8004b30:	48001400 	.word	0x48001400
 8004b34:	40010400 	.word	0x40010400

08004b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	807b      	strh	r3, [r7, #2]
 8004b44:	4613      	mov	r3, r2
 8004b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b48:	787b      	ldrb	r3, [r7, #1]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b4e:	887a      	ldrh	r2, [r7, #2]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b54:	e002      	b.n	8004b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b56:	887a      	ldrh	r2, [r7, #2]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b7a:	887a      	ldrh	r2, [r7, #2]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	041a      	lsls	r2, r3, #16
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	43d9      	mvns	r1, r3
 8004b86:	887b      	ldrh	r3, [r7, #2]
 8004b88:	400b      	ands	r3, r1
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	619a      	str	r2, [r3, #24]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ba6:	4b08      	ldr	r3, [pc, #32]	@ (8004bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ba8:	695a      	ldr	r2, [r3, #20]
 8004baa:	88fb      	ldrh	r3, [r7, #6]
 8004bac:	4013      	ands	r3, r2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d006      	beq.n	8004bc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bb2:	4a05      	ldr	r2, [pc, #20]	@ (8004bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bb4:	88fb      	ldrh	r3, [r7, #6]
 8004bb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bb8:	88fb      	ldrh	r3, [r7, #6]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fc fe64 	bl	8001888 <HAL_GPIO_EXTI_Callback>
  }
}
 8004bc0:	bf00      	nop
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40010400 	.word	0x40010400

08004bcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d141      	bne.n	8004c5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bda:	4b4b      	ldr	r3, [pc, #300]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004be6:	d131      	bne.n	8004c4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004be8:	4b47      	ldr	r3, [pc, #284]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bee:	4a46      	ldr	r2, [pc, #280]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bf4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bf8:	4b43      	ldr	r3, [pc, #268]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c00:	4a41      	ldr	r2, [pc, #260]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c08:	4b40      	ldr	r3, [pc, #256]	@ (8004d0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2232      	movs	r2, #50	@ 0x32
 8004c0e:	fb02 f303 	mul.w	r3, r2, r3
 8004c12:	4a3f      	ldr	r2, [pc, #252]	@ (8004d10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c14:	fba2 2303 	umull	r2, r3, r2, r3
 8004c18:	0c9b      	lsrs	r3, r3, #18
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c1e:	e002      	b.n	8004c26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c26:	4b38      	ldr	r3, [pc, #224]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c32:	d102      	bne.n	8004c3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f2      	bne.n	8004c20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c3a:	4b33      	ldr	r3, [pc, #204]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c46:	d158      	bne.n	8004cfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e057      	b.n	8004cfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c4c:	4b2e      	ldr	r3, [pc, #184]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c52:	4a2d      	ldr	r2, [pc, #180]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c5c:	e04d      	b.n	8004cfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c64:	d141      	bne.n	8004cea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c66:	4b28      	ldr	r3, [pc, #160]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c72:	d131      	bne.n	8004cd8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c74:	4b24      	ldr	r3, [pc, #144]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c7a:	4a23      	ldr	r2, [pc, #140]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c84:	4b20      	ldr	r3, [pc, #128]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c8c:	4a1e      	ldr	r2, [pc, #120]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c94:	4b1d      	ldr	r3, [pc, #116]	@ (8004d0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2232      	movs	r2, #50	@ 0x32
 8004c9a:	fb02 f303 	mul.w	r3, r2, r3
 8004c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8004d10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca4:	0c9b      	lsrs	r3, r3, #18
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004caa:	e002      	b.n	8004cb2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cb2:	4b15      	ldr	r3, [pc, #84]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cbe:	d102      	bne.n	8004cc6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1f2      	bne.n	8004cac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cc6:	4b10      	ldr	r3, [pc, #64]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cd2:	d112      	bne.n	8004cfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e011      	b.n	8004cfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cde:	4a0a      	ldr	r2, [pc, #40]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ce4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ce8:	e007      	b.n	8004cfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cea:	4b07      	ldr	r3, [pc, #28]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004cf2:	4a05      	ldr	r2, [pc, #20]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cf8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	40007000 	.word	0x40007000
 8004d0c:	2000000c 	.word	0x2000000c
 8004d10:	431bde83 	.word	0x431bde83

08004d14 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004d18:	4b05      	ldr	r3, [pc, #20]	@ (8004d30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	4a04      	ldr	r2, [pc, #16]	@ (8004d30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d22:	6093      	str	r3, [r2, #8]
}
 8004d24:	bf00      	nop
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40007000 	.word	0x40007000

08004d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b088      	sub	sp, #32
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e2fe      	b.n	8005344 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d075      	beq.n	8004e3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d52:	4b97      	ldr	r3, [pc, #604]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d5c:	4b94      	ldr	r3, [pc, #592]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	2b0c      	cmp	r3, #12
 8004d6a:	d102      	bne.n	8004d72 <HAL_RCC_OscConfig+0x3e>
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d002      	beq.n	8004d78 <HAL_RCC_OscConfig+0x44>
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d10b      	bne.n	8004d90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d78:	4b8d      	ldr	r3, [pc, #564]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d05b      	beq.n	8004e3c <HAL_RCC_OscConfig+0x108>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d157      	bne.n	8004e3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e2d9      	b.n	8005344 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d98:	d106      	bne.n	8004da8 <HAL_RCC_OscConfig+0x74>
 8004d9a:	4b85      	ldr	r3, [pc, #532]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a84      	ldr	r2, [pc, #528]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	e01d      	b.n	8004de4 <HAL_RCC_OscConfig+0xb0>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004db0:	d10c      	bne.n	8004dcc <HAL_RCC_OscConfig+0x98>
 8004db2:	4b7f      	ldr	r3, [pc, #508]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a7e      	ldr	r2, [pc, #504]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004db8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	4b7c      	ldr	r3, [pc, #496]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a7b      	ldr	r2, [pc, #492]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	e00b      	b.n	8004de4 <HAL_RCC_OscConfig+0xb0>
 8004dcc:	4b78      	ldr	r3, [pc, #480]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a77      	ldr	r2, [pc, #476]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004dd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	4b75      	ldr	r3, [pc, #468]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a74      	ldr	r2, [pc, #464]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004dde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d013      	beq.n	8004e14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dec:	f7fd fe62 	bl	8002ab4 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df4:	f7fd fe5e 	bl	8002ab4 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b64      	cmp	r3, #100	@ 0x64
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e29e      	b.n	8005344 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e06:	4b6a      	ldr	r3, [pc, #424]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCC_OscConfig+0xc0>
 8004e12:	e014      	b.n	8004e3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e14:	f7fd fe4e 	bl	8002ab4 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e1c:	f7fd fe4a 	bl	8002ab4 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b64      	cmp	r3, #100	@ 0x64
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e28a      	b.n	8005344 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e2e:	4b60      	ldr	r3, [pc, #384]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f0      	bne.n	8004e1c <HAL_RCC_OscConfig+0xe8>
 8004e3a:	e000      	b.n	8004e3e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d075      	beq.n	8004f36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e4a:	4b59      	ldr	r3, [pc, #356]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 030c 	and.w	r3, r3, #12
 8004e52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e54:	4b56      	ldr	r3, [pc, #344]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0303 	and.w	r3, r3, #3
 8004e5c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b0c      	cmp	r3, #12
 8004e62:	d102      	bne.n	8004e6a <HAL_RCC_OscConfig+0x136>
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d002      	beq.n	8004e70 <HAL_RCC_OscConfig+0x13c>
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d11f      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e70:	4b4f      	ldr	r3, [pc, #316]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_RCC_OscConfig+0x154>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e25d      	b.n	8005344 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e88:	4b49      	ldr	r3, [pc, #292]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	061b      	lsls	r3, r3, #24
 8004e96:	4946      	ldr	r1, [pc, #280]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e9c:	4b45      	ldr	r3, [pc, #276]	@ (8004fb4 <HAL_RCC_OscConfig+0x280>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fd fdbb 	bl	8002a1c <HAL_InitTick>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d043      	beq.n	8004f34 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e249      	b.n	8005344 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d023      	beq.n	8004f00 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eb8:	4b3d      	ldr	r3, [pc, #244]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a3c      	ldr	r2, [pc, #240]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec4:	f7fd fdf6 	bl	8002ab4 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ecc:	f7fd fdf2 	bl	8002ab4 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e232      	b.n	8005344 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ede:	4b34      	ldr	r3, [pc, #208]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0f0      	beq.n	8004ecc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eea:	4b31      	ldr	r3, [pc, #196]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	061b      	lsls	r3, r3, #24
 8004ef8:	492d      	ldr	r1, [pc, #180]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	604b      	str	r3, [r1, #4]
 8004efe:	e01a      	b.n	8004f36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f00:	4b2b      	ldr	r3, [pc, #172]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004f06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0c:	f7fd fdd2 	bl	8002ab4 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f14:	f7fd fdce 	bl	8002ab4 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e20e      	b.n	8005344 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f26:	4b22      	ldr	r3, [pc, #136]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1f0      	bne.n	8004f14 <HAL_RCC_OscConfig+0x1e0>
 8004f32:	e000      	b.n	8004f36 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d041      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d01c      	beq.n	8004f84 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f4a:	4b19      	ldr	r3, [pc, #100]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f50:	4a17      	ldr	r2, [pc, #92]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5a:	f7fd fdab 	bl	8002ab4 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f62:	f7fd fda7 	bl	8002ab4 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e1e7      	b.n	8005344 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f74:	4b0e      	ldr	r3, [pc, #56]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0ef      	beq.n	8004f62 <HAL_RCC_OscConfig+0x22e>
 8004f82:	e020      	b.n	8004fc6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f84:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f8a:	4a09      	ldr	r2, [pc, #36]	@ (8004fb0 <HAL_RCC_OscConfig+0x27c>)
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f94:	f7fd fd8e 	bl	8002ab4 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f9a:	e00d      	b.n	8004fb8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f9c:	f7fd fd8a 	bl	8002ab4 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d906      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e1ca      	b.n	8005344 <HAL_RCC_OscConfig+0x610>
 8004fae:	bf00      	nop
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fb8:	4b8c      	ldr	r3, [pc, #560]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 8004fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1ea      	bne.n	8004f9c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 80a6 	beq.w	8005120 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fd8:	4b84      	ldr	r3, [pc, #528]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 8004fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x2b4>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <HAL_RCC_OscConfig+0x2b6>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00d      	beq.n	800500a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fee:	4b7f      	ldr	r3, [pc, #508]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff2:	4a7e      	ldr	r2, [pc, #504]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 8004ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ff8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ffa:	4b7c      	ldr	r3, [pc, #496]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 8004ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005006:	2301      	movs	r3, #1
 8005008:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800500a:	4b79      	ldr	r3, [pc, #484]	@ (80051f0 <HAL_RCC_OscConfig+0x4bc>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005012:	2b00      	cmp	r3, #0
 8005014:	d118      	bne.n	8005048 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005016:	4b76      	ldr	r3, [pc, #472]	@ (80051f0 <HAL_RCC_OscConfig+0x4bc>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a75      	ldr	r2, [pc, #468]	@ (80051f0 <HAL_RCC_OscConfig+0x4bc>)
 800501c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005022:	f7fd fd47 	bl	8002ab4 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800502a:	f7fd fd43 	bl	8002ab4 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e183      	b.n	8005344 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800503c:	4b6c      	ldr	r3, [pc, #432]	@ (80051f0 <HAL_RCC_OscConfig+0x4bc>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0f0      	beq.n	800502a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d108      	bne.n	8005062 <HAL_RCC_OscConfig+0x32e>
 8005050:	4b66      	ldr	r3, [pc, #408]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 8005052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005056:	4a65      	ldr	r2, [pc, #404]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 8005058:	f043 0301 	orr.w	r3, r3, #1
 800505c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005060:	e024      	b.n	80050ac <HAL_RCC_OscConfig+0x378>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	2b05      	cmp	r3, #5
 8005068:	d110      	bne.n	800508c <HAL_RCC_OscConfig+0x358>
 800506a:	4b60      	ldr	r3, [pc, #384]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 800506c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005070:	4a5e      	ldr	r2, [pc, #376]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 8005072:	f043 0304 	orr.w	r3, r3, #4
 8005076:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800507a:	4b5c      	ldr	r3, [pc, #368]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 800507c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005080:	4a5a      	ldr	r2, [pc, #360]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800508a:	e00f      	b.n	80050ac <HAL_RCC_OscConfig+0x378>
 800508c:	4b57      	ldr	r3, [pc, #348]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 800508e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005092:	4a56      	ldr	r2, [pc, #344]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800509c:	4b53      	ldr	r3, [pc, #332]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 800509e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a2:	4a52      	ldr	r2, [pc, #328]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 80050a4:	f023 0304 	bic.w	r3, r3, #4
 80050a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d016      	beq.n	80050e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b4:	f7fd fcfe 	bl	8002ab4 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ba:	e00a      	b.n	80050d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050bc:	f7fd fcfa 	bl	8002ab4 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e138      	b.n	8005344 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050d2:	4b46      	ldr	r3, [pc, #280]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0ed      	beq.n	80050bc <HAL_RCC_OscConfig+0x388>
 80050e0:	e015      	b.n	800510e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e2:	f7fd fce7 	bl	8002ab4 <HAL_GetTick>
 80050e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050e8:	e00a      	b.n	8005100 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ea:	f7fd fce3 	bl	8002ab4 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e121      	b.n	8005344 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005100:	4b3a      	ldr	r3, [pc, #232]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 8005102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1ed      	bne.n	80050ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800510e:	7ffb      	ldrb	r3, [r7, #31]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d105      	bne.n	8005120 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005114:	4b35      	ldr	r3, [pc, #212]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 8005116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005118:	4a34      	ldr	r2, [pc, #208]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 800511a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800511e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0320 	and.w	r3, r3, #32
 8005128:	2b00      	cmp	r3, #0
 800512a:	d03c      	beq.n	80051a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01c      	beq.n	800516e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005134:	4b2d      	ldr	r3, [pc, #180]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 8005136:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800513a:	4a2c      	ldr	r2, [pc, #176]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005144:	f7fd fcb6 	bl	8002ab4 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800514c:	f7fd fcb2 	bl	8002ab4 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e0f2      	b.n	8005344 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800515e:	4b23      	ldr	r3, [pc, #140]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 8005160:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0ef      	beq.n	800514c <HAL_RCC_OscConfig+0x418>
 800516c:	e01b      	b.n	80051a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800516e:	4b1f      	ldr	r3, [pc, #124]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 8005170:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005174:	4a1d      	ldr	r2, [pc, #116]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 8005176:	f023 0301 	bic.w	r3, r3, #1
 800517a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517e:	f7fd fc99 	bl	8002ab4 <HAL_GetTick>
 8005182:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005184:	e008      	b.n	8005198 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005186:	f7fd fc95 	bl	8002ab4 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e0d5      	b.n	8005344 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005198:	4b14      	ldr	r3, [pc, #80]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 800519a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1ef      	bne.n	8005186 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 80c9 	beq.w	8005342 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051b0:	4b0e      	ldr	r3, [pc, #56]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f003 030c 	and.w	r3, r3, #12
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	f000 8083 	beq.w	80052c4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d15e      	bne.n	8005284 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c6:	4b09      	ldr	r3, [pc, #36]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a08      	ldr	r2, [pc, #32]	@ (80051ec <HAL_RCC_OscConfig+0x4b8>)
 80051cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d2:	f7fd fc6f 	bl	8002ab4 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051d8:	e00c      	b.n	80051f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051da:	f7fd fc6b 	bl	8002ab4 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d905      	bls.n	80051f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e0ab      	b.n	8005344 <HAL_RCC_OscConfig+0x610>
 80051ec:	40021000 	.word	0x40021000
 80051f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051f4:	4b55      	ldr	r3, [pc, #340]	@ (800534c <HAL_RCC_OscConfig+0x618>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1ec      	bne.n	80051da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005200:	4b52      	ldr	r3, [pc, #328]	@ (800534c <HAL_RCC_OscConfig+0x618>)
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	4b52      	ldr	r3, [pc, #328]	@ (8005350 <HAL_RCC_OscConfig+0x61c>)
 8005206:	4013      	ands	r3, r2
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6a11      	ldr	r1, [r2, #32]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005210:	3a01      	subs	r2, #1
 8005212:	0112      	lsls	r2, r2, #4
 8005214:	4311      	orrs	r1, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800521a:	0212      	lsls	r2, r2, #8
 800521c:	4311      	orrs	r1, r2
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005222:	0852      	lsrs	r2, r2, #1
 8005224:	3a01      	subs	r2, #1
 8005226:	0552      	lsls	r2, r2, #21
 8005228:	4311      	orrs	r1, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800522e:	0852      	lsrs	r2, r2, #1
 8005230:	3a01      	subs	r2, #1
 8005232:	0652      	lsls	r2, r2, #25
 8005234:	4311      	orrs	r1, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800523a:	06d2      	lsls	r2, r2, #27
 800523c:	430a      	orrs	r2, r1
 800523e:	4943      	ldr	r1, [pc, #268]	@ (800534c <HAL_RCC_OscConfig+0x618>)
 8005240:	4313      	orrs	r3, r2
 8005242:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005244:	4b41      	ldr	r3, [pc, #260]	@ (800534c <HAL_RCC_OscConfig+0x618>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a40      	ldr	r2, [pc, #256]	@ (800534c <HAL_RCC_OscConfig+0x618>)
 800524a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800524e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005250:	4b3e      	ldr	r3, [pc, #248]	@ (800534c <HAL_RCC_OscConfig+0x618>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	4a3d      	ldr	r2, [pc, #244]	@ (800534c <HAL_RCC_OscConfig+0x618>)
 8005256:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800525a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525c:	f7fd fc2a 	bl	8002ab4 <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005264:	f7fd fc26 	bl	8002ab4 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e066      	b.n	8005344 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005276:	4b35      	ldr	r3, [pc, #212]	@ (800534c <HAL_RCC_OscConfig+0x618>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0f0      	beq.n	8005264 <HAL_RCC_OscConfig+0x530>
 8005282:	e05e      	b.n	8005342 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005284:	4b31      	ldr	r3, [pc, #196]	@ (800534c <HAL_RCC_OscConfig+0x618>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a30      	ldr	r2, [pc, #192]	@ (800534c <HAL_RCC_OscConfig+0x618>)
 800528a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800528e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005290:	f7fd fc10 	bl	8002ab4 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005298:	f7fd fc0c 	bl	8002ab4 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e04c      	b.n	8005344 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052aa:	4b28      	ldr	r3, [pc, #160]	@ (800534c <HAL_RCC_OscConfig+0x618>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1f0      	bne.n	8005298 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80052b6:	4b25      	ldr	r3, [pc, #148]	@ (800534c <HAL_RCC_OscConfig+0x618>)
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	4924      	ldr	r1, [pc, #144]	@ (800534c <HAL_RCC_OscConfig+0x618>)
 80052bc:	4b25      	ldr	r3, [pc, #148]	@ (8005354 <HAL_RCC_OscConfig+0x620>)
 80052be:	4013      	ands	r3, r2
 80052c0:	60cb      	str	r3, [r1, #12]
 80052c2:	e03e      	b.n	8005342 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d101      	bne.n	80052d0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e039      	b.n	8005344 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80052d0:	4b1e      	ldr	r3, [pc, #120]	@ (800534c <HAL_RCC_OscConfig+0x618>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f003 0203 	and.w	r2, r3, #3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d12c      	bne.n	800533e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ee:	3b01      	subs	r3, #1
 80052f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d123      	bne.n	800533e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005300:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005302:	429a      	cmp	r2, r3
 8005304:	d11b      	bne.n	800533e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005310:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005312:	429a      	cmp	r2, r3
 8005314:	d113      	bne.n	800533e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005320:	085b      	lsrs	r3, r3, #1
 8005322:	3b01      	subs	r3, #1
 8005324:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005326:	429a      	cmp	r2, r3
 8005328:	d109      	bne.n	800533e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005334:	085b      	lsrs	r3, r3, #1
 8005336:	3b01      	subs	r3, #1
 8005338:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800533a:	429a      	cmp	r2, r3
 800533c:	d001      	beq.n	8005342 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3720      	adds	r7, #32
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40021000 	.word	0x40021000
 8005350:	019f800c 	.word	0x019f800c
 8005354:	feeefffc 	.word	0xfeeefffc

08005358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005362:	2300      	movs	r3, #0
 8005364:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e11e      	b.n	80055ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005370:	4b91      	ldr	r3, [pc, #580]	@ (80055b8 <HAL_RCC_ClockConfig+0x260>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d910      	bls.n	80053a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537e:	4b8e      	ldr	r3, [pc, #568]	@ (80055b8 <HAL_RCC_ClockConfig+0x260>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f023 020f 	bic.w	r2, r3, #15
 8005386:	498c      	ldr	r1, [pc, #560]	@ (80055b8 <HAL_RCC_ClockConfig+0x260>)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	4313      	orrs	r3, r2
 800538c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538e:	4b8a      	ldr	r3, [pc, #552]	@ (80055b8 <HAL_RCC_ClockConfig+0x260>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e106      	b.n	80055ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d073      	beq.n	8005494 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d129      	bne.n	8005408 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053b4:	4b81      	ldr	r3, [pc, #516]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e0f4      	b.n	80055ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80053c4:	f000 f99e 	bl	8005704 <RCC_GetSysClockFreqFromPLLSource>
 80053c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4a7c      	ldr	r2, [pc, #496]	@ (80055c0 <HAL_RCC_ClockConfig+0x268>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d93f      	bls.n	8005452 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053d2:	4b7a      	ldr	r3, [pc, #488]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d009      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d033      	beq.n	8005452 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d12f      	bne.n	8005452 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053f2:	4b72      	ldr	r3, [pc, #456]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053fa:	4a70      	ldr	r2, [pc, #448]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 80053fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005400:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005402:	2380      	movs	r3, #128	@ 0x80
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	e024      	b.n	8005452 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b02      	cmp	r3, #2
 800540e:	d107      	bne.n	8005420 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005410:	4b6a      	ldr	r3, [pc, #424]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d109      	bne.n	8005430 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e0c6      	b.n	80055ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005420:	4b66      	ldr	r3, [pc, #408]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e0be      	b.n	80055ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005430:	f000 f8ce 	bl	80055d0 <HAL_RCC_GetSysClockFreq>
 8005434:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	4a61      	ldr	r2, [pc, #388]	@ (80055c0 <HAL_RCC_ClockConfig+0x268>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d909      	bls.n	8005452 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800543e:	4b5f      	ldr	r3, [pc, #380]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005446:	4a5d      	ldr	r2, [pc, #372]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 8005448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800544c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800544e:	2380      	movs	r3, #128	@ 0x80
 8005450:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005452:	4b5a      	ldr	r3, [pc, #360]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f023 0203 	bic.w	r2, r3, #3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	4957      	ldr	r1, [pc, #348]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 8005460:	4313      	orrs	r3, r2
 8005462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005464:	f7fd fb26 	bl	8002ab4 <HAL_GetTick>
 8005468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546a:	e00a      	b.n	8005482 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800546c:	f7fd fb22 	bl	8002ab4 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800547a:	4293      	cmp	r3, r2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e095      	b.n	80055ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005482:	4b4e      	ldr	r3, [pc, #312]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 020c 	and.w	r2, r3, #12
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	429a      	cmp	r2, r3
 8005492:	d1eb      	bne.n	800546c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d023      	beq.n	80054e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d005      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054ac:	4b43      	ldr	r3, [pc, #268]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	4a42      	ldr	r2, [pc, #264]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 80054b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80054b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d007      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80054c4:	4b3d      	ldr	r3, [pc, #244]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80054cc:	4a3b      	ldr	r2, [pc, #236]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 80054ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80054d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054d4:	4b39      	ldr	r3, [pc, #228]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	4936      	ldr	r1, [pc, #216]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	608b      	str	r3, [r1, #8]
 80054e6:	e008      	b.n	80054fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2b80      	cmp	r3, #128	@ 0x80
 80054ec:	d105      	bne.n	80054fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80054ee:	4b33      	ldr	r3, [pc, #204]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	4a32      	ldr	r2, [pc, #200]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 80054f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054fa:	4b2f      	ldr	r3, [pc, #188]	@ (80055b8 <HAL_RCC_ClockConfig+0x260>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	429a      	cmp	r2, r3
 8005506:	d21d      	bcs.n	8005544 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005508:	4b2b      	ldr	r3, [pc, #172]	@ (80055b8 <HAL_RCC_ClockConfig+0x260>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f023 020f 	bic.w	r2, r3, #15
 8005510:	4929      	ldr	r1, [pc, #164]	@ (80055b8 <HAL_RCC_ClockConfig+0x260>)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	4313      	orrs	r3, r2
 8005516:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005518:	f7fd facc 	bl	8002ab4 <HAL_GetTick>
 800551c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800551e:	e00a      	b.n	8005536 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005520:	f7fd fac8 	bl	8002ab4 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e03b      	b.n	80055ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005536:	4b20      	ldr	r3, [pc, #128]	@ (80055b8 <HAL_RCC_ClockConfig+0x260>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d1ed      	bne.n	8005520 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b00      	cmp	r3, #0
 800554e:	d008      	beq.n	8005562 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005550:	4b1a      	ldr	r3, [pc, #104]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	4917      	ldr	r1, [pc, #92]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 800555e:	4313      	orrs	r3, r2
 8005560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d009      	beq.n	8005582 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800556e:	4b13      	ldr	r3, [pc, #76]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	490f      	ldr	r1, [pc, #60]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 800557e:	4313      	orrs	r3, r2
 8005580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005582:	f000 f825 	bl	80055d0 <HAL_RCC_GetSysClockFreq>
 8005586:	4602      	mov	r2, r0
 8005588:	4b0c      	ldr	r3, [pc, #48]	@ (80055bc <HAL_RCC_ClockConfig+0x264>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	091b      	lsrs	r3, r3, #4
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	490c      	ldr	r1, [pc, #48]	@ (80055c4 <HAL_RCC_ClockConfig+0x26c>)
 8005594:	5ccb      	ldrb	r3, [r1, r3]
 8005596:	f003 031f 	and.w	r3, r3, #31
 800559a:	fa22 f303 	lsr.w	r3, r2, r3
 800559e:	4a0a      	ldr	r2, [pc, #40]	@ (80055c8 <HAL_RCC_ClockConfig+0x270>)
 80055a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80055a2:	4b0a      	ldr	r3, [pc, #40]	@ (80055cc <HAL_RCC_ClockConfig+0x274>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fd fa38 	bl	8002a1c <HAL_InitTick>
 80055ac:	4603      	mov	r3, r0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40022000 	.word	0x40022000
 80055bc:	40021000 	.word	0x40021000
 80055c0:	04c4b400 	.word	0x04c4b400
 80055c4:	0800acdc 	.word	0x0800acdc
 80055c8:	2000000c 	.word	0x2000000c
 80055cc:	20000014 	.word	0x20000014

080055d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80055d6:	4b2c      	ldr	r3, [pc, #176]	@ (8005688 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 030c 	and.w	r3, r3, #12
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d102      	bne.n	80055e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055e2:	4b2a      	ldr	r3, [pc, #168]	@ (800568c <HAL_RCC_GetSysClockFreq+0xbc>)
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	e047      	b.n	8005678 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80055e8:	4b27      	ldr	r3, [pc, #156]	@ (8005688 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 030c 	and.w	r3, r3, #12
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d102      	bne.n	80055fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055f4:	4b26      	ldr	r3, [pc, #152]	@ (8005690 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	e03e      	b.n	8005678 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80055fa:	4b23      	ldr	r3, [pc, #140]	@ (8005688 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 030c 	and.w	r3, r3, #12
 8005602:	2b0c      	cmp	r3, #12
 8005604:	d136      	bne.n	8005674 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005606:	4b20      	ldr	r3, [pc, #128]	@ (8005688 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005610:	4b1d      	ldr	r3, [pc, #116]	@ (8005688 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	091b      	lsrs	r3, r3, #4
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	3301      	adds	r3, #1
 800561c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b03      	cmp	r3, #3
 8005622:	d10c      	bne.n	800563e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005624:	4a1a      	ldr	r2, [pc, #104]	@ (8005690 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	fbb2 f3f3 	udiv	r3, r2, r3
 800562c:	4a16      	ldr	r2, [pc, #88]	@ (8005688 <HAL_RCC_GetSysClockFreq+0xb8>)
 800562e:	68d2      	ldr	r2, [r2, #12]
 8005630:	0a12      	lsrs	r2, r2, #8
 8005632:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005636:	fb02 f303 	mul.w	r3, r2, r3
 800563a:	617b      	str	r3, [r7, #20]
      break;
 800563c:	e00c      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800563e:	4a13      	ldr	r2, [pc, #76]	@ (800568c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	fbb2 f3f3 	udiv	r3, r2, r3
 8005646:	4a10      	ldr	r2, [pc, #64]	@ (8005688 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005648:	68d2      	ldr	r2, [r2, #12]
 800564a:	0a12      	lsrs	r2, r2, #8
 800564c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005650:	fb02 f303 	mul.w	r3, r2, r3
 8005654:	617b      	str	r3, [r7, #20]
      break;
 8005656:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005658:	4b0b      	ldr	r3, [pc, #44]	@ (8005688 <HAL_RCC_GetSysClockFreq+0xb8>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	0e5b      	lsrs	r3, r3, #25
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	3301      	adds	r3, #1
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005670:	613b      	str	r3, [r7, #16]
 8005672:	e001      	b.n	8005678 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005678:	693b      	ldr	r3, [r7, #16]
}
 800567a:	4618      	mov	r0, r3
 800567c:	371c      	adds	r7, #28
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40021000 	.word	0x40021000
 800568c:	00f42400 	.word	0x00f42400
 8005690:	02dc6c00 	.word	0x02dc6c00

08005694 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005698:	4b03      	ldr	r3, [pc, #12]	@ (80056a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800569a:	681b      	ldr	r3, [r3, #0]
}
 800569c:	4618      	mov	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	2000000c 	.word	0x2000000c

080056ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80056b0:	f7ff fff0 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 80056b4:	4602      	mov	r2, r0
 80056b6:	4b06      	ldr	r3, [pc, #24]	@ (80056d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	0a1b      	lsrs	r3, r3, #8
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	4904      	ldr	r1, [pc, #16]	@ (80056d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80056c2:	5ccb      	ldrb	r3, [r1, r3]
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	40021000 	.word	0x40021000
 80056d4:	0800acec 	.word	0x0800acec

080056d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056dc:	f7ff ffda 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 80056e0:	4602      	mov	r2, r0
 80056e2:	4b06      	ldr	r3, [pc, #24]	@ (80056fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	0adb      	lsrs	r3, r3, #11
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	4904      	ldr	r1, [pc, #16]	@ (8005700 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056ee:	5ccb      	ldrb	r3, [r1, r3]
 80056f0:	f003 031f 	and.w	r3, r3, #31
 80056f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40021000 	.word	0x40021000
 8005700:	0800acec 	.word	0x0800acec

08005704 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800570a:	4b1e      	ldr	r3, [pc, #120]	@ (8005784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005714:	4b1b      	ldr	r3, [pc, #108]	@ (8005784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	091b      	lsrs	r3, r3, #4
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	3301      	adds	r3, #1
 8005720:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	2b03      	cmp	r3, #3
 8005726:	d10c      	bne.n	8005742 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005728:	4a17      	ldr	r2, [pc, #92]	@ (8005788 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005730:	4a14      	ldr	r2, [pc, #80]	@ (8005784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005732:	68d2      	ldr	r2, [r2, #12]
 8005734:	0a12      	lsrs	r2, r2, #8
 8005736:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800573a:	fb02 f303 	mul.w	r3, r2, r3
 800573e:	617b      	str	r3, [r7, #20]
    break;
 8005740:	e00c      	b.n	800575c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005742:	4a12      	ldr	r2, [pc, #72]	@ (800578c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	fbb2 f3f3 	udiv	r3, r2, r3
 800574a:	4a0e      	ldr	r2, [pc, #56]	@ (8005784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800574c:	68d2      	ldr	r2, [r2, #12]
 800574e:	0a12      	lsrs	r2, r2, #8
 8005750:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005754:	fb02 f303 	mul.w	r3, r2, r3
 8005758:	617b      	str	r3, [r7, #20]
    break;
 800575a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800575c:	4b09      	ldr	r3, [pc, #36]	@ (8005784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	0e5b      	lsrs	r3, r3, #25
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	3301      	adds	r3, #1
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	fbb2 f3f3 	udiv	r3, r2, r3
 8005774:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005776:	687b      	ldr	r3, [r7, #4]
}
 8005778:	4618      	mov	r0, r3
 800577a:	371c      	adds	r7, #28
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	40021000 	.word	0x40021000
 8005788:	02dc6c00 	.word	0x02dc6c00
 800578c:	00f42400 	.word	0x00f42400

08005790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005798:	2300      	movs	r3, #0
 800579a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800579c:	2300      	movs	r3, #0
 800579e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 8098 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ae:	2300      	movs	r3, #0
 80057b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057b2:	4b43      	ldr	r3, [pc, #268]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10d      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057be:	4b40      	ldr	r3, [pc, #256]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c2:	4a3f      	ldr	r2, [pc, #252]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80057ca:	4b3d      	ldr	r3, [pc, #244]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057d2:	60bb      	str	r3, [r7, #8]
 80057d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057d6:	2301      	movs	r3, #1
 80057d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057da:	4b3a      	ldr	r3, [pc, #232]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a39      	ldr	r2, [pc, #228]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057e6:	f7fd f965 	bl	8002ab4 <HAL_GetTick>
 80057ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057ec:	e009      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ee:	f7fd f961 	bl	8002ab4 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d902      	bls.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	74fb      	strb	r3, [r7, #19]
        break;
 8005800:	e005      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005802:	4b30      	ldr	r3, [pc, #192]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0ef      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800580e:	7cfb      	ldrb	r3, [r7, #19]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d159      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005814:	4b2a      	ldr	r3, [pc, #168]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800581a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800581e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d01e      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	429a      	cmp	r2, r3
 800582e:	d019      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005830:	4b23      	ldr	r3, [pc, #140]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005836:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800583a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800583c:	4b20      	ldr	r3, [pc, #128]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800583e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005842:	4a1f      	ldr	r2, [pc, #124]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800584c:	4b1c      	ldr	r3, [pc, #112]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800584e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005852:	4a1b      	ldr	r2, [pc, #108]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005854:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800585c:	4a18      	ldr	r2, [pc, #96]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d016      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586e:	f7fd f921 	bl	8002ab4 <HAL_GetTick>
 8005872:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005874:	e00b      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005876:	f7fd f91d 	bl	8002ab4 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005884:	4293      	cmp	r3, r2
 8005886:	d902      	bls.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	74fb      	strb	r3, [r7, #19]
            break;
 800588c:	e006      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800588e:	4b0c      	ldr	r3, [pc, #48]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0ec      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800589c:	7cfb      	ldrb	r3, [r7, #19]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10b      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058a2:	4b07      	ldr	r3, [pc, #28]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058b0:	4903      	ldr	r1, [pc, #12]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80058b8:	e008      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058ba:	7cfb      	ldrb	r3, [r7, #19]
 80058bc:	74bb      	strb	r3, [r7, #18]
 80058be:	e005      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80058c0:	40021000 	.word	0x40021000
 80058c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c8:	7cfb      	ldrb	r3, [r7, #19]
 80058ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058cc:	7c7b      	ldrb	r3, [r7, #17]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d105      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058d2:	4ba7      	ldr	r3, [pc, #668]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d6:	4aa6      	ldr	r2, [pc, #664]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058ea:	4ba1      	ldr	r3, [pc, #644]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f0:	f023 0203 	bic.w	r2, r3, #3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	499d      	ldr	r1, [pc, #628]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00a      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800590c:	4b98      	ldr	r3, [pc, #608]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800590e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005912:	f023 020c 	bic.w	r2, r3, #12
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	4995      	ldr	r1, [pc, #596]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800591c:	4313      	orrs	r3, r2
 800591e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00a      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800592e:	4b90      	ldr	r3, [pc, #576]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005934:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	498c      	ldr	r1, [pc, #560]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800593e:	4313      	orrs	r3, r2
 8005940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0308 	and.w	r3, r3, #8
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00a      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005950:	4b87      	ldr	r3, [pc, #540]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005956:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	4984      	ldr	r1, [pc, #528]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005960:	4313      	orrs	r3, r2
 8005962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0310 	and.w	r3, r3, #16
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005972:	4b7f      	ldr	r3, [pc, #508]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005978:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	497b      	ldr	r1, [pc, #492]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005982:	4313      	orrs	r3, r2
 8005984:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00a      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005994:	4b76      	ldr	r3, [pc, #472]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800599a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	4973      	ldr	r1, [pc, #460]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059b6:	4b6e      	ldr	r3, [pc, #440]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	496a      	ldr	r1, [pc, #424]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00a      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059d8:	4b65      	ldr	r3, [pc, #404]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	4962      	ldr	r1, [pc, #392]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059fa:	4b5d      	ldr	r3, [pc, #372]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a00:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a08:	4959      	ldr	r1, [pc, #356]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a1c:	4b54      	ldr	r3, [pc, #336]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a22:	f023 0203 	bic.w	r2, r3, #3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2a:	4951      	ldr	r1, [pc, #324]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a3e:	4b4c      	ldr	r3, [pc, #304]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4c:	4948      	ldr	r1, [pc, #288]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d015      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a60:	4b43      	ldr	r3, [pc, #268]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6e:	4940      	ldr	r1, [pc, #256]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a7e:	d105      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a80:	4b3b      	ldr	r3, [pc, #236]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	4a3a      	ldr	r2, [pc, #232]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d015      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a98:	4b35      	ldr	r3, [pc, #212]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aa6:	4932      	ldr	r1, [pc, #200]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ab2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ab6:	d105      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	4a2c      	ldr	r2, [pc, #176]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005abe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ac2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d015      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ad0:	4b27      	ldr	r3, [pc, #156]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ade:	4924      	ldr	r1, [pc, #144]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005aee:	d105      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005af0:	4b1f      	ldr	r3, [pc, #124]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	4a1e      	ldr	r2, [pc, #120]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005afa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d015      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b08:	4b19      	ldr	r3, [pc, #100]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b16:	4916      	ldr	r1, [pc, #88]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b26:	d105      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b28:	4b11      	ldr	r3, [pc, #68]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	4a10      	ldr	r2, [pc, #64]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b32:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d019      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b40:	4b0b      	ldr	r3, [pc, #44]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4e:	4908      	ldr	r1, [pc, #32]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b5e:	d109      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b60:	4b03      	ldr	r3, [pc, #12]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	4a02      	ldr	r2, [pc, #8]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b6a:	60d3      	str	r3, [r2, #12]
 8005b6c:	e002      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005b6e:	bf00      	nop
 8005b70:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d015      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b80:	4b29      	ldr	r3, [pc, #164]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b86:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8e:	4926      	ldr	r1, [pc, #152]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b9e:	d105      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ba0:	4b21      	ldr	r3, [pc, #132]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	4a20      	ldr	r2, [pc, #128]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005baa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d015      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bbe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bc6:	4918      	ldr	r1, [pc, #96]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bd6:	d105      	bne.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005bd8:	4b13      	ldr	r3, [pc, #76]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	4a12      	ldr	r2, [pc, #72]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005be2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d015      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bf6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bfe:	490a      	ldr	r1, [pc, #40]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c0e:	d105      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c10:	4b05      	ldr	r3, [pc, #20]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	4a04      	ldr	r2, [pc, #16]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c1a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40021000 	.word	0x40021000

08005c2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e09d      	b.n	8005d7a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d108      	bne.n	8005c58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c4e:	d009      	beq.n	8005c64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	61da      	str	r2, [r3, #28]
 8005c56:	e005      	b.n	8005c64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fc faf6 	bl	8002270 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ca4:	d902      	bls.n	8005cac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	e002      	b.n	8005cb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005cb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005cba:	d007      	beq.n	8005ccc <HAL_SPI_Init+0xa0>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cc4:	d002      	beq.n	8005ccc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d04:	431a      	orrs	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d0e:	ea42 0103 	orr.w	r1, r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d16:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	0c1b      	lsrs	r3, r3, #16
 8005d28:	f003 0204 	and.w	r2, r3, #4
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d30:	f003 0310 	and.w	r3, r3, #16
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005d48:	ea42 0103 	orr.w	r1, r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69da      	ldr	r2, [r3, #28]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b088      	sub	sp, #32
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	603b      	str	r3, [r7, #0]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_SPI_Transmit+0x22>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e15f      	b.n	8006064 <HAL_SPI_Transmit+0x2e2>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dac:	f7fc fe82 	bl	8002ab4 <HAL_GetTick>
 8005db0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005db2:	88fb      	ldrh	r3, [r7, #6]
 8005db4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d002      	beq.n	8005dc8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dc6:	e148      	b.n	800605a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <HAL_SPI_Transmit+0x52>
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d102      	bne.n	8005dda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dd8:	e13f      	b.n	800605a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2203      	movs	r2, #3
 8005dde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	88fa      	ldrh	r2, [r7, #6]
 8005df2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	88fa      	ldrh	r2, [r7, #6]
 8005df8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e24:	d10f      	bne.n	8005e46 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e50:	2b40      	cmp	r3, #64	@ 0x40
 8005e52:	d007      	beq.n	8005e64 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e6c:	d94f      	bls.n	8005f0e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <HAL_SPI_Transmit+0xfa>
 8005e76:	8afb      	ldrh	r3, [r7, #22]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d142      	bne.n	8005f02 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e80:	881a      	ldrh	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8c:	1c9a      	adds	r2, r3, #2
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ea0:	e02f      	b.n	8005f02 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d112      	bne.n	8005ed6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb4:	881a      	ldrh	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec0:	1c9a      	adds	r2, r3, #2
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ed4:	e015      	b.n	8005f02 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ed6:	f7fc fded 	bl	8002ab4 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d803      	bhi.n	8005eee <HAL_SPI_Transmit+0x16c>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eec:	d102      	bne.n	8005ef4 <HAL_SPI_Transmit+0x172>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d106      	bne.n	8005f02 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005f00:	e0ab      	b.n	800605a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1ca      	bne.n	8005ea2 <HAL_SPI_Transmit+0x120>
 8005f0c:	e080      	b.n	8006010 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <HAL_SPI_Transmit+0x19a>
 8005f16:	8afb      	ldrh	r3, [r7, #22]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d174      	bne.n	8006006 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d912      	bls.n	8005f4c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2a:	881a      	ldrh	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f36:	1c9a      	adds	r2, r3, #2
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	3b02      	subs	r3, #2
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f4a:	e05c      	b.n	8006006 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	330c      	adds	r3, #12
 8005f56:	7812      	ldrb	r2, [r2, #0]
 8005f58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005f72:	e048      	b.n	8006006 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d12b      	bne.n	8005fda <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d912      	bls.n	8005fb2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f90:	881a      	ldrh	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9c:	1c9a      	adds	r2, r3, #2
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	3b02      	subs	r3, #2
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005fb0:	e029      	b.n	8006006 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	330c      	adds	r3, #12
 8005fbc:	7812      	ldrb	r2, [r2, #0]
 8005fbe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005fd8:	e015      	b.n	8006006 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fda:	f7fc fd6b 	bl	8002ab4 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d803      	bhi.n	8005ff2 <HAL_SPI_Transmit+0x270>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff0:	d102      	bne.n	8005ff8 <HAL_SPI_Transmit+0x276>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d106      	bne.n	8006006 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006004:	e029      	b.n	800605a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800600a:	b29b      	uxth	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1b1      	bne.n	8005f74 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f947 	bl	80062a8 <SPI_EndRxTxTransaction>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10a      	bne.n	8006044 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800602e:	2300      	movs	r3, #0
 8006030:	613b      	str	r3, [r7, #16]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	613b      	str	r3, [r7, #16]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	613b      	str	r3, [r7, #16]
 8006042:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	77fb      	strb	r3, [r7, #31]
 8006050:	e003      	b.n	800605a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006062:	7ffb      	ldrb	r3, [r7, #31]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3720      	adds	r7, #32
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	4613      	mov	r3, r2
 800607a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800607c:	f7fc fd1a 	bl	8002ab4 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006084:	1a9b      	subs	r3, r3, r2
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	4413      	add	r3, r2
 800608a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800608c:	f7fc fd12 	bl	8002ab4 <HAL_GetTick>
 8006090:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006092:	4b39      	ldr	r3, [pc, #228]	@ (8006178 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	015b      	lsls	r3, r3, #5
 8006098:	0d1b      	lsrs	r3, r3, #20
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	fb02 f303 	mul.w	r3, r2, r3
 80060a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060a2:	e054      	b.n	800614e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060aa:	d050      	beq.n	800614e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060ac:	f7fc fd02 	bl	8002ab4 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d902      	bls.n	80060c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d13d      	bne.n	800613e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80060d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060da:	d111      	bne.n	8006100 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060e4:	d004      	beq.n	80060f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ee:	d107      	bne.n	8006100 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006104:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006108:	d10f      	bne.n	800612a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006128:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e017      	b.n	800616e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	3b01      	subs	r3, #1
 800614c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4013      	ands	r3, r2
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	429a      	cmp	r2, r3
 800615c:	bf0c      	ite	eq
 800615e:	2301      	moveq	r3, #1
 8006160:	2300      	movne	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	429a      	cmp	r2, r3
 800616a:	d19b      	bne.n	80060a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3720      	adds	r7, #32
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	2000000c 	.word	0x2000000c

0800617c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08a      	sub	sp, #40	@ 0x28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800618a:	2300      	movs	r3, #0
 800618c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800618e:	f7fc fc91 	bl	8002ab4 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006196:	1a9b      	subs	r3, r3, r2
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	4413      	add	r3, r2
 800619c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800619e:	f7fc fc89 	bl	8002ab4 <HAL_GetTick>
 80061a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	330c      	adds	r3, #12
 80061aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80061ac:	4b3d      	ldr	r3, [pc, #244]	@ (80062a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	00da      	lsls	r2, r3, #3
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	0d1b      	lsrs	r3, r3, #20
 80061bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061be:	fb02 f303 	mul.w	r3, r2, r3
 80061c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80061c4:	e060      	b.n	8006288 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80061cc:	d107      	bne.n	80061de <SPI_WaitFifoStateUntilTimeout+0x62>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d104      	bne.n	80061de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80061dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e4:	d050      	beq.n	8006288 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061e6:	f7fc fc65 	bl	8002ab4 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d902      	bls.n	80061fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d13d      	bne.n	8006278 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800620a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006214:	d111      	bne.n	800623a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800621e:	d004      	beq.n	800622a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006228:	d107      	bne.n	800623a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006238:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006242:	d10f      	bne.n	8006264 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006262:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e010      	b.n	800629a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	3b01      	subs	r3, #1
 8006286:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	4013      	ands	r3, r2
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	429a      	cmp	r2, r3
 8006296:	d196      	bne.n	80061c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3728      	adds	r7, #40	@ 0x28
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	2000000c 	.word	0x2000000c

080062a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f7ff ff5b 	bl	800617c <SPI_WaitFifoStateUntilTimeout>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d007      	beq.n	80062dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062d0:	f043 0220 	orr.w	r2, r3, #32
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e027      	b.n	800632c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2200      	movs	r2, #0
 80062e4:	2180      	movs	r1, #128	@ 0x80
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f7ff fec0 	bl	800606c <SPI_WaitFlagStateUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d007      	beq.n	8006302 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062f6:	f043 0220 	orr.w	r2, r3, #32
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e014      	b.n	800632c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2200      	movs	r2, #0
 800630a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f7ff ff34 	bl	800617c <SPI_WaitFifoStateUntilTimeout>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d007      	beq.n	800632a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800631e:	f043 0220 	orr.w	r2, r3, #32
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e000      	b.n	800632c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e049      	b.n	80063da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fb ffcc 	bl	80022f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3304      	adds	r3, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f000 fa26 	bl	80067c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
	...

080063e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d001      	beq.n	80063fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e054      	b.n	80064a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68da      	ldr	r2, [r3, #12]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a26      	ldr	r2, [pc, #152]	@ (80064b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d022      	beq.n	8006464 <HAL_TIM_Base_Start_IT+0x80>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006426:	d01d      	beq.n	8006464 <HAL_TIM_Base_Start_IT+0x80>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a22      	ldr	r2, [pc, #136]	@ (80064b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d018      	beq.n	8006464 <HAL_TIM_Base_Start_IT+0x80>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a21      	ldr	r2, [pc, #132]	@ (80064bc <HAL_TIM_Base_Start_IT+0xd8>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d013      	beq.n	8006464 <HAL_TIM_Base_Start_IT+0x80>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a1f      	ldr	r2, [pc, #124]	@ (80064c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00e      	beq.n	8006464 <HAL_TIM_Base_Start_IT+0x80>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a1e      	ldr	r2, [pc, #120]	@ (80064c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d009      	beq.n	8006464 <HAL_TIM_Base_Start_IT+0x80>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a1c      	ldr	r2, [pc, #112]	@ (80064c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d004      	beq.n	8006464 <HAL_TIM_Base_Start_IT+0x80>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a1b      	ldr	r2, [pc, #108]	@ (80064cc <HAL_TIM_Base_Start_IT+0xe8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d115      	bne.n	8006490 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	4b19      	ldr	r3, [pc, #100]	@ (80064d0 <HAL_TIM_Base_Start_IT+0xec>)
 800646c:	4013      	ands	r3, r2
 800646e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b06      	cmp	r3, #6
 8006474:	d015      	beq.n	80064a2 <HAL_TIM_Base_Start_IT+0xbe>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800647c:	d011      	beq.n	80064a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f042 0201 	orr.w	r2, r2, #1
 800648c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800648e:	e008      	b.n	80064a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f042 0201 	orr.w	r2, r2, #1
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	e000      	b.n	80064a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40012c00 	.word	0x40012c00
 80064b8:	40000400 	.word	0x40000400
 80064bc:	40000800 	.word	0x40000800
 80064c0:	40000c00 	.word	0x40000c00
 80064c4:	40013400 	.word	0x40013400
 80064c8:	40014000 	.word	0x40014000
 80064cc:	40015000 	.word	0x40015000
 80064d0:	00010007 	.word	0x00010007

080064d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d020      	beq.n	8006538 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01b      	beq.n	8006538 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f06f 0202 	mvn.w	r2, #2
 8006508:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f931 	bl	8006786 <HAL_TIM_IC_CaptureCallback>
 8006524:	e005      	b.n	8006532 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f923 	bl	8006772 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f934 	bl	800679a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f003 0304 	and.w	r3, r3, #4
 800653e:	2b00      	cmp	r3, #0
 8006540:	d020      	beq.n	8006584 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b00      	cmp	r3, #0
 800654a:	d01b      	beq.n	8006584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0204 	mvn.w	r2, #4
 8006554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2202      	movs	r2, #2
 800655a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f90b 	bl	8006786 <HAL_TIM_IC_CaptureCallback>
 8006570:	e005      	b.n	800657e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f8fd 	bl	8006772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f90e 	bl	800679a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b00      	cmp	r3, #0
 800658c:	d020      	beq.n	80065d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b00      	cmp	r3, #0
 8006596:	d01b      	beq.n	80065d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f06f 0208 	mvn.w	r2, #8
 80065a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2204      	movs	r2, #4
 80065a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	f003 0303 	and.w	r3, r3, #3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f8e5 	bl	8006786 <HAL_TIM_IC_CaptureCallback>
 80065bc:	e005      	b.n	80065ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f8d7 	bl	8006772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f8e8 	bl	800679a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f003 0310 	and.w	r3, r3, #16
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d020      	beq.n	800661c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f003 0310 	and.w	r3, r3, #16
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d01b      	beq.n	800661c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f06f 0210 	mvn.w	r2, #16
 80065ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2208      	movs	r2, #8
 80065f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f8bf 	bl	8006786 <HAL_TIM_IC_CaptureCallback>
 8006608:	e005      	b.n	8006616 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f8b1 	bl	8006772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f8c2 	bl	800679a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00c      	beq.n	8006640 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d007      	beq.n	8006640 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f06f 0201 	mvn.w	r2, #1
 8006638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fb f954 	bl	80018e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006646:	2b00      	cmp	r3, #0
 8006648:	d104      	bne.n	8006654 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00c      	beq.n	800666e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800665a:	2b00      	cmp	r3, #0
 800665c:	d007      	beq.n	800666e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f969 	bl	8006940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00c      	beq.n	8006692 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800667e:	2b00      	cmp	r3, #0
 8006680:	d007      	beq.n	8006692 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800668a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f961 	bl	8006954 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00c      	beq.n	80066b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d007      	beq.n	80066b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80066ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f87c 	bl	80067ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f003 0320 	and.w	r3, r3, #32
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00c      	beq.n	80066da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d007      	beq.n	80066da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f06f 0220 	mvn.w	r2, #32
 80066d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f929 	bl	800692c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00c      	beq.n	80066fe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d007      	beq.n	80066fe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80066f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f935 	bl	8006968 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00c      	beq.n	8006722 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d007      	beq.n	8006722 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800671a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f92d 	bl	800697c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00c      	beq.n	8006746 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d007      	beq.n	8006746 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800673e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f925 	bl	8006990 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00c      	beq.n	800676a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d007      	beq.n	800676a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f91d 	bl	80069a4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800676a:	bf00      	nop
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
	...

080067c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a4c      	ldr	r2, [pc, #304]	@ (8006908 <TIM_Base_SetConfig+0x144>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d017      	beq.n	800680c <TIM_Base_SetConfig+0x48>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067e2:	d013      	beq.n	800680c <TIM_Base_SetConfig+0x48>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a49      	ldr	r2, [pc, #292]	@ (800690c <TIM_Base_SetConfig+0x148>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d00f      	beq.n	800680c <TIM_Base_SetConfig+0x48>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a48      	ldr	r2, [pc, #288]	@ (8006910 <TIM_Base_SetConfig+0x14c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d00b      	beq.n	800680c <TIM_Base_SetConfig+0x48>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a47      	ldr	r2, [pc, #284]	@ (8006914 <TIM_Base_SetConfig+0x150>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d007      	beq.n	800680c <TIM_Base_SetConfig+0x48>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a46      	ldr	r2, [pc, #280]	@ (8006918 <TIM_Base_SetConfig+0x154>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d003      	beq.n	800680c <TIM_Base_SetConfig+0x48>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a45      	ldr	r2, [pc, #276]	@ (800691c <TIM_Base_SetConfig+0x158>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d108      	bne.n	800681e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a39      	ldr	r2, [pc, #228]	@ (8006908 <TIM_Base_SetConfig+0x144>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d023      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800682c:	d01f      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a36      	ldr	r2, [pc, #216]	@ (800690c <TIM_Base_SetConfig+0x148>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d01b      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a35      	ldr	r2, [pc, #212]	@ (8006910 <TIM_Base_SetConfig+0x14c>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d017      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a34      	ldr	r2, [pc, #208]	@ (8006914 <TIM_Base_SetConfig+0x150>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d013      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a33      	ldr	r2, [pc, #204]	@ (8006918 <TIM_Base_SetConfig+0x154>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00f      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a33      	ldr	r2, [pc, #204]	@ (8006920 <TIM_Base_SetConfig+0x15c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d00b      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a32      	ldr	r2, [pc, #200]	@ (8006924 <TIM_Base_SetConfig+0x160>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d007      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a31      	ldr	r2, [pc, #196]	@ (8006928 <TIM_Base_SetConfig+0x164>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d003      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a2c      	ldr	r2, [pc, #176]	@ (800691c <TIM_Base_SetConfig+0x158>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d108      	bne.n	8006880 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	4313      	orrs	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	4313      	orrs	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a18      	ldr	r2, [pc, #96]	@ (8006908 <TIM_Base_SetConfig+0x144>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d013      	beq.n	80068d4 <TIM_Base_SetConfig+0x110>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a1a      	ldr	r2, [pc, #104]	@ (8006918 <TIM_Base_SetConfig+0x154>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00f      	beq.n	80068d4 <TIM_Base_SetConfig+0x110>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a1a      	ldr	r2, [pc, #104]	@ (8006920 <TIM_Base_SetConfig+0x15c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00b      	beq.n	80068d4 <TIM_Base_SetConfig+0x110>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a19      	ldr	r2, [pc, #100]	@ (8006924 <TIM_Base_SetConfig+0x160>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d007      	beq.n	80068d4 <TIM_Base_SetConfig+0x110>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a18      	ldr	r2, [pc, #96]	@ (8006928 <TIM_Base_SetConfig+0x164>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d003      	beq.n	80068d4 <TIM_Base_SetConfig+0x110>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a13      	ldr	r2, [pc, #76]	@ (800691c <TIM_Base_SetConfig+0x158>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d103      	bne.n	80068dc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	691a      	ldr	r2, [r3, #16]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d105      	bne.n	80068fa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	f023 0201 	bic.w	r2, r3, #1
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	611a      	str	r2, [r3, #16]
  }
}
 80068fa:	bf00      	nop
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40012c00 	.word	0x40012c00
 800690c:	40000400 	.word	0x40000400
 8006910:	40000800 	.word	0x40000800
 8006914:	40000c00 	.word	0x40000c00
 8006918:	40013400 	.word	0x40013400
 800691c:	40015000 	.word	0x40015000
 8006920:	40014000 	.word	0x40014000
 8006924:	40014400 	.word	0x40014400
 8006928:	40014800 	.word	0x40014800

0800692c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e042      	b.n	8006a50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d106      	bne.n	80069e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7fb fccd 	bl	800237c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2224      	movs	r2, #36	@ 0x24
 80069e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0201 	bic.w	r2, r2, #1
 80069f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d002      	beq.n	8006a08 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fbb2 	bl	800716c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f8b3 	bl	8006b74 <UART_SetConfig>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d101      	bne.n	8006a18 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e01b      	b.n	8006a50 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689a      	ldr	r2, [r3, #8]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0201 	orr.w	r2, r2, #1
 8006a46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fc31 	bl	80072b0 <UART_CheckIdleState>
 8006a4e:	4603      	mov	r3, r0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08a      	sub	sp, #40	@ 0x28
 8006a5c:	af02      	add	r7, sp, #8
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	603b      	str	r3, [r7, #0]
 8006a64:	4613      	mov	r3, r2
 8006a66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a6e:	2b20      	cmp	r3, #32
 8006a70:	d17b      	bne.n	8006b6a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <HAL_UART_Transmit+0x26>
 8006a78:	88fb      	ldrh	r3, [r7, #6]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e074      	b.n	8006b6c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2221      	movs	r2, #33	@ 0x21
 8006a8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a92:	f7fc f80f 	bl	8002ab4 <HAL_GetTick>
 8006a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	88fa      	ldrh	r2, [r7, #6]
 8006a9c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	88fa      	ldrh	r2, [r7, #6]
 8006aa4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ab0:	d108      	bne.n	8006ac4 <HAL_UART_Transmit+0x6c>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d104      	bne.n	8006ac4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	61bb      	str	r3, [r7, #24]
 8006ac2:	e003      	b.n	8006acc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006acc:	e030      	b.n	8006b30 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2180      	movs	r1, #128	@ 0x80
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 fc93 	bl	8007404 <UART_WaitOnFlagUntilTimeout>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d005      	beq.n	8006af0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e03d      	b.n	8006b6c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10b      	bne.n	8006b0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	461a      	mov	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b04:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	3302      	adds	r3, #2
 8006b0a:	61bb      	str	r3, [r7, #24]
 8006b0c:	e007      	b.n	8006b1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	781a      	ldrb	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1c8      	bne.n	8006ace <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	2200      	movs	r2, #0
 8006b44:	2140      	movs	r1, #64	@ 0x40
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 fc5c 	bl	8007404 <UART_WaitOnFlagUntilTimeout>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d005      	beq.n	8006b5e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2220      	movs	r2, #32
 8006b56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e006      	b.n	8006b6c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	e000      	b.n	8006b6c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006b6a:	2302      	movs	r3, #2
  }
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3720      	adds	r7, #32
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b78:	b08c      	sub	sp, #48	@ 0x30
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	431a      	orrs	r2, r3
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	4baa      	ldr	r3, [pc, #680]	@ (8006e4c <UART_SetConfig+0x2d8>)
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	6812      	ldr	r2, [r2, #0]
 8006baa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	68da      	ldr	r2, [r3, #12]
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a9f      	ldr	r2, [pc, #636]	@ (8006e50 <UART_SetConfig+0x2dc>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d004      	beq.n	8006be0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006bea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	6812      	ldr	r2, [r2, #0]
 8006bf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bf4:	430b      	orrs	r3, r1
 8006bf6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfe:	f023 010f 	bic.w	r1, r3, #15
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a90      	ldr	r2, [pc, #576]	@ (8006e54 <UART_SetConfig+0x2e0>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d125      	bne.n	8006c64 <UART_SetConfig+0xf0>
 8006c18:	4b8f      	ldr	r3, [pc, #572]	@ (8006e58 <UART_SetConfig+0x2e4>)
 8006c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c1e:	f003 0303 	and.w	r3, r3, #3
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d81a      	bhi.n	8006c5c <UART_SetConfig+0xe8>
 8006c26:	a201      	add	r2, pc, #4	@ (adr r2, 8006c2c <UART_SetConfig+0xb8>)
 8006c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2c:	08006c3d 	.word	0x08006c3d
 8006c30:	08006c4d 	.word	0x08006c4d
 8006c34:	08006c45 	.word	0x08006c45
 8006c38:	08006c55 	.word	0x08006c55
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c42:	e116      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006c44:	2302      	movs	r3, #2
 8006c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c4a:	e112      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006c4c:	2304      	movs	r3, #4
 8006c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c52:	e10e      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006c54:	2308      	movs	r3, #8
 8006c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c5a:	e10a      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006c5c:	2310      	movs	r3, #16
 8006c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c62:	e106      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a7c      	ldr	r2, [pc, #496]	@ (8006e5c <UART_SetConfig+0x2e8>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d138      	bne.n	8006ce0 <UART_SetConfig+0x16c>
 8006c6e:	4b7a      	ldr	r3, [pc, #488]	@ (8006e58 <UART_SetConfig+0x2e4>)
 8006c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c74:	f003 030c 	and.w	r3, r3, #12
 8006c78:	2b0c      	cmp	r3, #12
 8006c7a:	d82d      	bhi.n	8006cd8 <UART_SetConfig+0x164>
 8006c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c84 <UART_SetConfig+0x110>)
 8006c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c82:	bf00      	nop
 8006c84:	08006cb9 	.word	0x08006cb9
 8006c88:	08006cd9 	.word	0x08006cd9
 8006c8c:	08006cd9 	.word	0x08006cd9
 8006c90:	08006cd9 	.word	0x08006cd9
 8006c94:	08006cc9 	.word	0x08006cc9
 8006c98:	08006cd9 	.word	0x08006cd9
 8006c9c:	08006cd9 	.word	0x08006cd9
 8006ca0:	08006cd9 	.word	0x08006cd9
 8006ca4:	08006cc1 	.word	0x08006cc1
 8006ca8:	08006cd9 	.word	0x08006cd9
 8006cac:	08006cd9 	.word	0x08006cd9
 8006cb0:	08006cd9 	.word	0x08006cd9
 8006cb4:	08006cd1 	.word	0x08006cd1
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cbe:	e0d8      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cc6:	e0d4      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006cc8:	2304      	movs	r3, #4
 8006cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cce:	e0d0      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006cd0:	2308      	movs	r3, #8
 8006cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cd6:	e0cc      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006cd8:	2310      	movs	r3, #16
 8006cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cde:	e0c8      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a5e      	ldr	r2, [pc, #376]	@ (8006e60 <UART_SetConfig+0x2ec>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d125      	bne.n	8006d36 <UART_SetConfig+0x1c2>
 8006cea:	4b5b      	ldr	r3, [pc, #364]	@ (8006e58 <UART_SetConfig+0x2e4>)
 8006cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cf0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006cf4:	2b30      	cmp	r3, #48	@ 0x30
 8006cf6:	d016      	beq.n	8006d26 <UART_SetConfig+0x1b2>
 8006cf8:	2b30      	cmp	r3, #48	@ 0x30
 8006cfa:	d818      	bhi.n	8006d2e <UART_SetConfig+0x1ba>
 8006cfc:	2b20      	cmp	r3, #32
 8006cfe:	d00a      	beq.n	8006d16 <UART_SetConfig+0x1a2>
 8006d00:	2b20      	cmp	r3, #32
 8006d02:	d814      	bhi.n	8006d2e <UART_SetConfig+0x1ba>
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <UART_SetConfig+0x19a>
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	d008      	beq.n	8006d1e <UART_SetConfig+0x1aa>
 8006d0c:	e00f      	b.n	8006d2e <UART_SetConfig+0x1ba>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d14:	e0ad      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006d16:	2302      	movs	r3, #2
 8006d18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d1c:	e0a9      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006d1e:	2304      	movs	r3, #4
 8006d20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d24:	e0a5      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006d26:	2308      	movs	r3, #8
 8006d28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d2c:	e0a1      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006d2e:	2310      	movs	r3, #16
 8006d30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d34:	e09d      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a4a      	ldr	r2, [pc, #296]	@ (8006e64 <UART_SetConfig+0x2f0>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d125      	bne.n	8006d8c <UART_SetConfig+0x218>
 8006d40:	4b45      	ldr	r3, [pc, #276]	@ (8006e58 <UART_SetConfig+0x2e4>)
 8006d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006d4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d4c:	d016      	beq.n	8006d7c <UART_SetConfig+0x208>
 8006d4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d50:	d818      	bhi.n	8006d84 <UART_SetConfig+0x210>
 8006d52:	2b80      	cmp	r3, #128	@ 0x80
 8006d54:	d00a      	beq.n	8006d6c <UART_SetConfig+0x1f8>
 8006d56:	2b80      	cmp	r3, #128	@ 0x80
 8006d58:	d814      	bhi.n	8006d84 <UART_SetConfig+0x210>
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <UART_SetConfig+0x1f0>
 8006d5e:	2b40      	cmp	r3, #64	@ 0x40
 8006d60:	d008      	beq.n	8006d74 <UART_SetConfig+0x200>
 8006d62:	e00f      	b.n	8006d84 <UART_SetConfig+0x210>
 8006d64:	2300      	movs	r3, #0
 8006d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d6a:	e082      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d72:	e07e      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006d74:	2304      	movs	r3, #4
 8006d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d7a:	e07a      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006d7c:	2308      	movs	r3, #8
 8006d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d82:	e076      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006d84:	2310      	movs	r3, #16
 8006d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d8a:	e072      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a35      	ldr	r2, [pc, #212]	@ (8006e68 <UART_SetConfig+0x2f4>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d12a      	bne.n	8006dec <UART_SetConfig+0x278>
 8006d96:	4b30      	ldr	r3, [pc, #192]	@ (8006e58 <UART_SetConfig+0x2e4>)
 8006d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006da0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006da4:	d01a      	beq.n	8006ddc <UART_SetConfig+0x268>
 8006da6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006daa:	d81b      	bhi.n	8006de4 <UART_SetConfig+0x270>
 8006dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006db0:	d00c      	beq.n	8006dcc <UART_SetConfig+0x258>
 8006db2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006db6:	d815      	bhi.n	8006de4 <UART_SetConfig+0x270>
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <UART_SetConfig+0x250>
 8006dbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dc0:	d008      	beq.n	8006dd4 <UART_SetConfig+0x260>
 8006dc2:	e00f      	b.n	8006de4 <UART_SetConfig+0x270>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dca:	e052      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006dcc:	2302      	movs	r3, #2
 8006dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dd2:	e04e      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dda:	e04a      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006ddc:	2308      	movs	r3, #8
 8006dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006de2:	e046      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006de4:	2310      	movs	r3, #16
 8006de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dea:	e042      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a17      	ldr	r2, [pc, #92]	@ (8006e50 <UART_SetConfig+0x2dc>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d13a      	bne.n	8006e6c <UART_SetConfig+0x2f8>
 8006df6:	4b18      	ldr	r3, [pc, #96]	@ (8006e58 <UART_SetConfig+0x2e4>)
 8006df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e04:	d01a      	beq.n	8006e3c <UART_SetConfig+0x2c8>
 8006e06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e0a:	d81b      	bhi.n	8006e44 <UART_SetConfig+0x2d0>
 8006e0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e10:	d00c      	beq.n	8006e2c <UART_SetConfig+0x2b8>
 8006e12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e16:	d815      	bhi.n	8006e44 <UART_SetConfig+0x2d0>
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <UART_SetConfig+0x2b0>
 8006e1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e20:	d008      	beq.n	8006e34 <UART_SetConfig+0x2c0>
 8006e22:	e00f      	b.n	8006e44 <UART_SetConfig+0x2d0>
 8006e24:	2300      	movs	r3, #0
 8006e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e2a:	e022      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e32:	e01e      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006e34:	2304      	movs	r3, #4
 8006e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e3a:	e01a      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006e3c:	2308      	movs	r3, #8
 8006e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e42:	e016      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006e44:	2310      	movs	r3, #16
 8006e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e4a:	e012      	b.n	8006e72 <UART_SetConfig+0x2fe>
 8006e4c:	cfff69f3 	.word	0xcfff69f3
 8006e50:	40008000 	.word	0x40008000
 8006e54:	40013800 	.word	0x40013800
 8006e58:	40021000 	.word	0x40021000
 8006e5c:	40004400 	.word	0x40004400
 8006e60:	40004800 	.word	0x40004800
 8006e64:	40004c00 	.word	0x40004c00
 8006e68:	40005000 	.word	0x40005000
 8006e6c:	2310      	movs	r3, #16
 8006e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4aae      	ldr	r2, [pc, #696]	@ (8007130 <UART_SetConfig+0x5bc>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	f040 8097 	bne.w	8006fac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e82:	2b08      	cmp	r3, #8
 8006e84:	d823      	bhi.n	8006ece <UART_SetConfig+0x35a>
 8006e86:	a201      	add	r2, pc, #4	@ (adr r2, 8006e8c <UART_SetConfig+0x318>)
 8006e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8c:	08006eb1 	.word	0x08006eb1
 8006e90:	08006ecf 	.word	0x08006ecf
 8006e94:	08006eb9 	.word	0x08006eb9
 8006e98:	08006ecf 	.word	0x08006ecf
 8006e9c:	08006ebf 	.word	0x08006ebf
 8006ea0:	08006ecf 	.word	0x08006ecf
 8006ea4:	08006ecf 	.word	0x08006ecf
 8006ea8:	08006ecf 	.word	0x08006ecf
 8006eac:	08006ec7 	.word	0x08006ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eb0:	f7fe fbfc 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 8006eb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006eb6:	e010      	b.n	8006eda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eb8:	4b9e      	ldr	r3, [pc, #632]	@ (8007134 <UART_SetConfig+0x5c0>)
 8006eba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ebc:	e00d      	b.n	8006eda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ebe:	f7fe fb87 	bl	80055d0 <HAL_RCC_GetSysClockFreq>
 8006ec2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ec4:	e009      	b.n	8006eda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006eca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ecc:	e005      	b.n	8006eda <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ed8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 8130 	beq.w	8007142 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee6:	4a94      	ldr	r2, [pc, #592]	@ (8007138 <UART_SetConfig+0x5c4>)
 8006ee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eec:	461a      	mov	r2, r3
 8006eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ef4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	4613      	mov	r3, r2
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	4413      	add	r3, r2
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d305      	bcc.n	8006f12 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d903      	bls.n	8006f1a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f18:	e113      	b.n	8007142 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	60bb      	str	r3, [r7, #8]
 8006f20:	60fa      	str	r2, [r7, #12]
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f26:	4a84      	ldr	r2, [pc, #528]	@ (8007138 <UART_SetConfig+0x5c4>)
 8006f28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	2200      	movs	r2, #0
 8006f30:	603b      	str	r3, [r7, #0]
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f3c:	f7f9 feac 	bl	8000c98 <__aeabi_uldivmod>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	4610      	mov	r0, r2
 8006f46:	4619      	mov	r1, r3
 8006f48:	f04f 0200 	mov.w	r2, #0
 8006f4c:	f04f 0300 	mov.w	r3, #0
 8006f50:	020b      	lsls	r3, r1, #8
 8006f52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f56:	0202      	lsls	r2, r0, #8
 8006f58:	6979      	ldr	r1, [r7, #20]
 8006f5a:	6849      	ldr	r1, [r1, #4]
 8006f5c:	0849      	lsrs	r1, r1, #1
 8006f5e:	2000      	movs	r0, #0
 8006f60:	460c      	mov	r4, r1
 8006f62:	4605      	mov	r5, r0
 8006f64:	eb12 0804 	adds.w	r8, r2, r4
 8006f68:	eb43 0905 	adc.w	r9, r3, r5
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	469a      	mov	sl, r3
 8006f74:	4693      	mov	fp, r2
 8006f76:	4652      	mov	r2, sl
 8006f78:	465b      	mov	r3, fp
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	4649      	mov	r1, r9
 8006f7e:	f7f9 fe8b 	bl	8000c98 <__aeabi_uldivmod>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4613      	mov	r3, r2
 8006f88:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f90:	d308      	bcc.n	8006fa4 <UART_SetConfig+0x430>
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f98:	d204      	bcs.n	8006fa4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6a3a      	ldr	r2, [r7, #32]
 8006fa0:	60da      	str	r2, [r3, #12]
 8006fa2:	e0ce      	b.n	8007142 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006faa:	e0ca      	b.n	8007142 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fb4:	d166      	bne.n	8007084 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006fb6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006fba:	2b08      	cmp	r3, #8
 8006fbc:	d827      	bhi.n	800700e <UART_SetConfig+0x49a>
 8006fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006fc4 <UART_SetConfig+0x450>)
 8006fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc4:	08006fe9 	.word	0x08006fe9
 8006fc8:	08006ff1 	.word	0x08006ff1
 8006fcc:	08006ff9 	.word	0x08006ff9
 8006fd0:	0800700f 	.word	0x0800700f
 8006fd4:	08006fff 	.word	0x08006fff
 8006fd8:	0800700f 	.word	0x0800700f
 8006fdc:	0800700f 	.word	0x0800700f
 8006fe0:	0800700f 	.word	0x0800700f
 8006fe4:	08007007 	.word	0x08007007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fe8:	f7fe fb60 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 8006fec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fee:	e014      	b.n	800701a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ff0:	f7fe fb72 	bl	80056d8 <HAL_RCC_GetPCLK2Freq>
 8006ff4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ff6:	e010      	b.n	800701a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ff8:	4b4e      	ldr	r3, [pc, #312]	@ (8007134 <UART_SetConfig+0x5c0>)
 8006ffa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ffc:	e00d      	b.n	800701a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ffe:	f7fe fae7 	bl	80055d0 <HAL_RCC_GetSysClockFreq>
 8007002:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007004:	e009      	b.n	800701a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800700a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800700c:	e005      	b.n	800701a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007018:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 8090 	beq.w	8007142 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007026:	4a44      	ldr	r2, [pc, #272]	@ (8007138 <UART_SetConfig+0x5c4>)
 8007028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800702c:	461a      	mov	r2, r3
 800702e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007030:	fbb3 f3f2 	udiv	r3, r3, r2
 8007034:	005a      	lsls	r2, r3, #1
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	085b      	lsrs	r3, r3, #1
 800703c:	441a      	add	r2, r3
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	fbb2 f3f3 	udiv	r3, r2, r3
 8007046:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	2b0f      	cmp	r3, #15
 800704c:	d916      	bls.n	800707c <UART_SetConfig+0x508>
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007054:	d212      	bcs.n	800707c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	b29b      	uxth	r3, r3
 800705a:	f023 030f 	bic.w	r3, r3, #15
 800705e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	085b      	lsrs	r3, r3, #1
 8007064:	b29b      	uxth	r3, r3
 8007066:	f003 0307 	and.w	r3, r3, #7
 800706a:	b29a      	uxth	r2, r3
 800706c:	8bfb      	ldrh	r3, [r7, #30]
 800706e:	4313      	orrs	r3, r2
 8007070:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	8bfa      	ldrh	r2, [r7, #30]
 8007078:	60da      	str	r2, [r3, #12]
 800707a:	e062      	b.n	8007142 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007082:	e05e      	b.n	8007142 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007084:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007088:	2b08      	cmp	r3, #8
 800708a:	d828      	bhi.n	80070de <UART_SetConfig+0x56a>
 800708c:	a201      	add	r2, pc, #4	@ (adr r2, 8007094 <UART_SetConfig+0x520>)
 800708e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007092:	bf00      	nop
 8007094:	080070b9 	.word	0x080070b9
 8007098:	080070c1 	.word	0x080070c1
 800709c:	080070c9 	.word	0x080070c9
 80070a0:	080070df 	.word	0x080070df
 80070a4:	080070cf 	.word	0x080070cf
 80070a8:	080070df 	.word	0x080070df
 80070ac:	080070df 	.word	0x080070df
 80070b0:	080070df 	.word	0x080070df
 80070b4:	080070d7 	.word	0x080070d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070b8:	f7fe faf8 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 80070bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070be:	e014      	b.n	80070ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070c0:	f7fe fb0a 	bl	80056d8 <HAL_RCC_GetPCLK2Freq>
 80070c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070c6:	e010      	b.n	80070ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007134 <UART_SetConfig+0x5c0>)
 80070ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070cc:	e00d      	b.n	80070ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ce:	f7fe fa7f 	bl	80055d0 <HAL_RCC_GetSysClockFreq>
 80070d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070d4:	e009      	b.n	80070ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070dc:	e005      	b.n	80070ea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80070e8:	bf00      	nop
    }

    if (pclk != 0U)
 80070ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d028      	beq.n	8007142 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f4:	4a10      	ldr	r2, [pc, #64]	@ (8007138 <UART_SetConfig+0x5c4>)
 80070f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070fa:	461a      	mov	r2, r3
 80070fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	085b      	lsrs	r3, r3, #1
 8007108:	441a      	add	r2, r3
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007112:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	2b0f      	cmp	r3, #15
 8007118:	d910      	bls.n	800713c <UART_SetConfig+0x5c8>
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007120:	d20c      	bcs.n	800713c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	b29a      	uxth	r2, r3
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	60da      	str	r2, [r3, #12]
 800712c:	e009      	b.n	8007142 <UART_SetConfig+0x5ce>
 800712e:	bf00      	nop
 8007130:	40008000 	.word	0x40008000
 8007134:	00f42400 	.word	0x00f42400
 8007138:	0800acf4 	.word	0x0800acf4
      }
      else
      {
        ret = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2201      	movs	r2, #1
 8007146:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2201      	movs	r2, #1
 800714e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2200      	movs	r2, #0
 8007156:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2200      	movs	r2, #0
 800715c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800715e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007162:	4618      	mov	r0, r3
 8007164:	3730      	adds	r7, #48	@ 0x30
 8007166:	46bd      	mov	sp, r7
 8007168:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800716c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007178:	f003 0308 	and.w	r3, r3, #8
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00a      	beq.n	8007196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00a      	beq.n	80071b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071bc:	f003 0302 	and.w	r3, r3, #2
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00a      	beq.n	80071da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071de:	f003 0304 	and.w	r3, r3, #4
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00a      	beq.n	80071fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007200:	f003 0310 	and.w	r3, r3, #16
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00a      	beq.n	800721e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007222:	f003 0320 	and.w	r3, r3, #32
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00a      	beq.n	8007240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	430a      	orrs	r2, r1
 800723e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01a      	beq.n	8007282 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007266:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800726a:	d10a      	bne.n	8007282 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	605a      	str	r2, [r3, #4]
  }
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b098      	sub	sp, #96	@ 0x60
 80072b4:	af02      	add	r7, sp, #8
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072c0:	f7fb fbf8 	bl	8002ab4 <HAL_GetTick>
 80072c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0308 	and.w	r3, r3, #8
 80072d0:	2b08      	cmp	r3, #8
 80072d2:	d12f      	bne.n	8007334 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072dc:	2200      	movs	r2, #0
 80072de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f88e 	bl	8007404 <UART_WaitOnFlagUntilTimeout>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d022      	beq.n	8007334 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f6:	e853 3f00 	ldrex	r3, [r3]
 80072fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007302:	653b      	str	r3, [r7, #80]	@ 0x50
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	461a      	mov	r2, r3
 800730a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800730c:	647b      	str	r3, [r7, #68]	@ 0x44
 800730e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007310:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007314:	e841 2300 	strex	r3, r2, [r1]
 8007318:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800731a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1e6      	bne.n	80072ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2220      	movs	r2, #32
 8007324:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e063      	b.n	80073fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0304 	and.w	r3, r3, #4
 800733e:	2b04      	cmp	r3, #4
 8007340:	d149      	bne.n	80073d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007342:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800734a:	2200      	movs	r2, #0
 800734c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f857 	bl	8007404 <UART_WaitOnFlagUntilTimeout>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d03c      	beq.n	80073d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007364:	e853 3f00 	ldrex	r3, [r3]
 8007368:	623b      	str	r3, [r7, #32]
   return(result);
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007370:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800737a:	633b      	str	r3, [r7, #48]	@ 0x30
 800737c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007380:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e6      	bne.n	800735c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3308      	adds	r3, #8
 8007394:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	60fb      	str	r3, [r7, #12]
   return(result);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f023 0301 	bic.w	r3, r3, #1
 80073a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3308      	adds	r3, #8
 80073ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073ae:	61fa      	str	r2, [r7, #28]
 80073b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	69b9      	ldr	r1, [r7, #24]
 80073b4:	69fa      	ldr	r2, [r7, #28]
 80073b6:	e841 2300 	strex	r3, r2, [r1]
 80073ba:	617b      	str	r3, [r7, #20]
   return(result);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e5      	bne.n	800738e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2220      	movs	r2, #32
 80073c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e012      	b.n	80073fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2220      	movs	r2, #32
 80073da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2220      	movs	r2, #32
 80073e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3758      	adds	r7, #88	@ 0x58
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	603b      	str	r3, [r7, #0]
 8007410:	4613      	mov	r3, r2
 8007412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007414:	e04f      	b.n	80074b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741c:	d04b      	beq.n	80074b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800741e:	f7fb fb49 	bl	8002ab4 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	429a      	cmp	r2, r3
 800742c:	d302      	bcc.n	8007434 <UART_WaitOnFlagUntilTimeout+0x30>
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d101      	bne.n	8007438 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e04e      	b.n	80074d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0304 	and.w	r3, r3, #4
 8007442:	2b00      	cmp	r3, #0
 8007444:	d037      	beq.n	80074b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2b80      	cmp	r3, #128	@ 0x80
 800744a:	d034      	beq.n	80074b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b40      	cmp	r3, #64	@ 0x40
 8007450:	d031      	beq.n	80074b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	69db      	ldr	r3, [r3, #28]
 8007458:	f003 0308 	and.w	r3, r3, #8
 800745c:	2b08      	cmp	r3, #8
 800745e:	d110      	bne.n	8007482 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2208      	movs	r2, #8
 8007466:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 f838 	bl	80074de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2208      	movs	r2, #8
 8007472:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e029      	b.n	80074d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	69db      	ldr	r3, [r3, #28]
 8007488:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800748c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007490:	d111      	bne.n	80074b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800749a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f000 f81e 	bl	80074de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2220      	movs	r2, #32
 80074a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e00f      	b.n	80074d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	69da      	ldr	r2, [r3, #28]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	4013      	ands	r3, r2
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	bf0c      	ite	eq
 80074c6:	2301      	moveq	r3, #1
 80074c8:	2300      	movne	r3, #0
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	461a      	mov	r2, r3
 80074ce:	79fb      	ldrb	r3, [r7, #7]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d0a0      	beq.n	8007416 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074de:	b480      	push	{r7}
 80074e0:	b095      	sub	sp, #84	@ 0x54
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007504:	643b      	str	r3, [r7, #64]	@ 0x40
 8007506:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800750a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e6      	bne.n	80074e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3308      	adds	r3, #8
 800751e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	61fb      	str	r3, [r7, #28]
   return(result);
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800752e:	f023 0301 	bic.w	r3, r3, #1
 8007532:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3308      	adds	r3, #8
 800753a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800753c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800753e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e3      	bne.n	8007518 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007554:	2b01      	cmp	r3, #1
 8007556:	d118      	bne.n	800758a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	e853 3f00 	ldrex	r3, [r3]
 8007564:	60bb      	str	r3, [r7, #8]
   return(result);
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f023 0310 	bic.w	r3, r3, #16
 800756c:	647b      	str	r3, [r7, #68]	@ 0x44
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007576:	61bb      	str	r3, [r7, #24]
 8007578:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757a:	6979      	ldr	r1, [r7, #20]
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	e841 2300 	strex	r3, r2, [r1]
 8007582:	613b      	str	r3, [r7, #16]
   return(result);
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1e6      	bne.n	8007558 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2220      	movs	r2, #32
 800758e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800759e:	bf00      	nop
 80075a0:	3754      	adds	r7, #84	@ 0x54
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b085      	sub	sp, #20
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d101      	bne.n	80075c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80075bc:	2302      	movs	r3, #2
 80075be:	e027      	b.n	8007610 <HAL_UARTEx_DisableFifoMode+0x66>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2224      	movs	r2, #36	@ 0x24
 80075cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0201 	bic.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80075ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2220      	movs	r2, #32
 8007602:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800762c:	2b01      	cmp	r3, #1
 800762e:	d101      	bne.n	8007634 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007630:	2302      	movs	r3, #2
 8007632:	e02d      	b.n	8007690 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2224      	movs	r2, #36	@ 0x24
 8007640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0201 	bic.w	r2, r2, #1
 800765a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f84f 	bl	8007714 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2220      	movs	r2, #32
 8007682:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d101      	bne.n	80076b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076ac:	2302      	movs	r3, #2
 80076ae:	e02d      	b.n	800770c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2224      	movs	r2, #36	@ 0x24
 80076bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 0201 	bic.w	r2, r2, #1
 80076d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 f811 	bl	8007714 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2220      	movs	r2, #32
 80076fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007720:	2b00      	cmp	r3, #0
 8007722:	d108      	bne.n	8007736 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007734:	e031      	b.n	800779a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007736:	2308      	movs	r3, #8
 8007738:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800773a:	2308      	movs	r3, #8
 800773c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	0e5b      	lsrs	r3, r3, #25
 8007746:	b2db      	uxtb	r3, r3
 8007748:	f003 0307 	and.w	r3, r3, #7
 800774c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	0f5b      	lsrs	r3, r3, #29
 8007756:	b2db      	uxtb	r3, r3
 8007758:	f003 0307 	and.w	r3, r3, #7
 800775c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800775e:	7bbb      	ldrb	r3, [r7, #14]
 8007760:	7b3a      	ldrb	r2, [r7, #12]
 8007762:	4911      	ldr	r1, [pc, #68]	@ (80077a8 <UARTEx_SetNbDataToProcess+0x94>)
 8007764:	5c8a      	ldrb	r2, [r1, r2]
 8007766:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800776a:	7b3a      	ldrb	r2, [r7, #12]
 800776c:	490f      	ldr	r1, [pc, #60]	@ (80077ac <UARTEx_SetNbDataToProcess+0x98>)
 800776e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007770:	fb93 f3f2 	sdiv	r3, r3, r2
 8007774:	b29a      	uxth	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	7b7a      	ldrb	r2, [r7, #13]
 8007780:	4909      	ldr	r1, [pc, #36]	@ (80077a8 <UARTEx_SetNbDataToProcess+0x94>)
 8007782:	5c8a      	ldrb	r2, [r1, r2]
 8007784:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007788:	7b7a      	ldrb	r2, [r7, #13]
 800778a:	4908      	ldr	r1, [pc, #32]	@ (80077ac <UARTEx_SetNbDataToProcess+0x98>)
 800778c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800778e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007792:	b29a      	uxth	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800779a:	bf00      	nop
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	0800ad0c 	.word	0x0800ad0c
 80077ac:	0800ad14 	.word	0x0800ad14

080077b0 <__cvt>:
 80077b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077b4:	ec57 6b10 	vmov	r6, r7, d0
 80077b8:	2f00      	cmp	r7, #0
 80077ba:	460c      	mov	r4, r1
 80077bc:	4619      	mov	r1, r3
 80077be:	463b      	mov	r3, r7
 80077c0:	bfbb      	ittet	lt
 80077c2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80077c6:	461f      	movlt	r7, r3
 80077c8:	2300      	movge	r3, #0
 80077ca:	232d      	movlt	r3, #45	@ 0x2d
 80077cc:	700b      	strb	r3, [r1, #0]
 80077ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077d0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80077d4:	4691      	mov	r9, r2
 80077d6:	f023 0820 	bic.w	r8, r3, #32
 80077da:	bfbc      	itt	lt
 80077dc:	4632      	movlt	r2, r6
 80077de:	4616      	movlt	r6, r2
 80077e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80077e4:	d005      	beq.n	80077f2 <__cvt+0x42>
 80077e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80077ea:	d100      	bne.n	80077ee <__cvt+0x3e>
 80077ec:	3401      	adds	r4, #1
 80077ee:	2102      	movs	r1, #2
 80077f0:	e000      	b.n	80077f4 <__cvt+0x44>
 80077f2:	2103      	movs	r1, #3
 80077f4:	ab03      	add	r3, sp, #12
 80077f6:	9301      	str	r3, [sp, #4]
 80077f8:	ab02      	add	r3, sp, #8
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	ec47 6b10 	vmov	d0, r6, r7
 8007800:	4653      	mov	r3, sl
 8007802:	4622      	mov	r2, r4
 8007804:	f000 fe5c 	bl	80084c0 <_dtoa_r>
 8007808:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800780c:	4605      	mov	r5, r0
 800780e:	d119      	bne.n	8007844 <__cvt+0x94>
 8007810:	f019 0f01 	tst.w	r9, #1
 8007814:	d00e      	beq.n	8007834 <__cvt+0x84>
 8007816:	eb00 0904 	add.w	r9, r0, r4
 800781a:	2200      	movs	r2, #0
 800781c:	2300      	movs	r3, #0
 800781e:	4630      	mov	r0, r6
 8007820:	4639      	mov	r1, r7
 8007822:	f7f9 f979 	bl	8000b18 <__aeabi_dcmpeq>
 8007826:	b108      	cbz	r0, 800782c <__cvt+0x7c>
 8007828:	f8cd 900c 	str.w	r9, [sp, #12]
 800782c:	2230      	movs	r2, #48	@ 0x30
 800782e:	9b03      	ldr	r3, [sp, #12]
 8007830:	454b      	cmp	r3, r9
 8007832:	d31e      	bcc.n	8007872 <__cvt+0xc2>
 8007834:	9b03      	ldr	r3, [sp, #12]
 8007836:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007838:	1b5b      	subs	r3, r3, r5
 800783a:	4628      	mov	r0, r5
 800783c:	6013      	str	r3, [r2, #0]
 800783e:	b004      	add	sp, #16
 8007840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007844:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007848:	eb00 0904 	add.w	r9, r0, r4
 800784c:	d1e5      	bne.n	800781a <__cvt+0x6a>
 800784e:	7803      	ldrb	r3, [r0, #0]
 8007850:	2b30      	cmp	r3, #48	@ 0x30
 8007852:	d10a      	bne.n	800786a <__cvt+0xba>
 8007854:	2200      	movs	r2, #0
 8007856:	2300      	movs	r3, #0
 8007858:	4630      	mov	r0, r6
 800785a:	4639      	mov	r1, r7
 800785c:	f7f9 f95c 	bl	8000b18 <__aeabi_dcmpeq>
 8007860:	b918      	cbnz	r0, 800786a <__cvt+0xba>
 8007862:	f1c4 0401 	rsb	r4, r4, #1
 8007866:	f8ca 4000 	str.w	r4, [sl]
 800786a:	f8da 3000 	ldr.w	r3, [sl]
 800786e:	4499      	add	r9, r3
 8007870:	e7d3      	b.n	800781a <__cvt+0x6a>
 8007872:	1c59      	adds	r1, r3, #1
 8007874:	9103      	str	r1, [sp, #12]
 8007876:	701a      	strb	r2, [r3, #0]
 8007878:	e7d9      	b.n	800782e <__cvt+0x7e>

0800787a <__exponent>:
 800787a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800787c:	2900      	cmp	r1, #0
 800787e:	bfba      	itte	lt
 8007880:	4249      	neglt	r1, r1
 8007882:	232d      	movlt	r3, #45	@ 0x2d
 8007884:	232b      	movge	r3, #43	@ 0x2b
 8007886:	2909      	cmp	r1, #9
 8007888:	7002      	strb	r2, [r0, #0]
 800788a:	7043      	strb	r3, [r0, #1]
 800788c:	dd29      	ble.n	80078e2 <__exponent+0x68>
 800788e:	f10d 0307 	add.w	r3, sp, #7
 8007892:	461d      	mov	r5, r3
 8007894:	270a      	movs	r7, #10
 8007896:	461a      	mov	r2, r3
 8007898:	fbb1 f6f7 	udiv	r6, r1, r7
 800789c:	fb07 1416 	mls	r4, r7, r6, r1
 80078a0:	3430      	adds	r4, #48	@ 0x30
 80078a2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80078a6:	460c      	mov	r4, r1
 80078a8:	2c63      	cmp	r4, #99	@ 0x63
 80078aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80078ae:	4631      	mov	r1, r6
 80078b0:	dcf1      	bgt.n	8007896 <__exponent+0x1c>
 80078b2:	3130      	adds	r1, #48	@ 0x30
 80078b4:	1e94      	subs	r4, r2, #2
 80078b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80078ba:	1c41      	adds	r1, r0, #1
 80078bc:	4623      	mov	r3, r4
 80078be:	42ab      	cmp	r3, r5
 80078c0:	d30a      	bcc.n	80078d8 <__exponent+0x5e>
 80078c2:	f10d 0309 	add.w	r3, sp, #9
 80078c6:	1a9b      	subs	r3, r3, r2
 80078c8:	42ac      	cmp	r4, r5
 80078ca:	bf88      	it	hi
 80078cc:	2300      	movhi	r3, #0
 80078ce:	3302      	adds	r3, #2
 80078d0:	4403      	add	r3, r0
 80078d2:	1a18      	subs	r0, r3, r0
 80078d4:	b003      	add	sp, #12
 80078d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078d8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80078dc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80078e0:	e7ed      	b.n	80078be <__exponent+0x44>
 80078e2:	2330      	movs	r3, #48	@ 0x30
 80078e4:	3130      	adds	r1, #48	@ 0x30
 80078e6:	7083      	strb	r3, [r0, #2]
 80078e8:	70c1      	strb	r1, [r0, #3]
 80078ea:	1d03      	adds	r3, r0, #4
 80078ec:	e7f1      	b.n	80078d2 <__exponent+0x58>
	...

080078f0 <_printf_float>:
 80078f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f4:	b08d      	sub	sp, #52	@ 0x34
 80078f6:	460c      	mov	r4, r1
 80078f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80078fc:	4616      	mov	r6, r2
 80078fe:	461f      	mov	r7, r3
 8007900:	4605      	mov	r5, r0
 8007902:	f000 fcdb 	bl	80082bc <_localeconv_r>
 8007906:	6803      	ldr	r3, [r0, #0]
 8007908:	9304      	str	r3, [sp, #16]
 800790a:	4618      	mov	r0, r3
 800790c:	f7f8 fcd8 	bl	80002c0 <strlen>
 8007910:	2300      	movs	r3, #0
 8007912:	930a      	str	r3, [sp, #40]	@ 0x28
 8007914:	f8d8 3000 	ldr.w	r3, [r8]
 8007918:	9005      	str	r0, [sp, #20]
 800791a:	3307      	adds	r3, #7
 800791c:	f023 0307 	bic.w	r3, r3, #7
 8007920:	f103 0208 	add.w	r2, r3, #8
 8007924:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007928:	f8d4 b000 	ldr.w	fp, [r4]
 800792c:	f8c8 2000 	str.w	r2, [r8]
 8007930:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007934:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007938:	9307      	str	r3, [sp, #28]
 800793a:	f8cd 8018 	str.w	r8, [sp, #24]
 800793e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007942:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007946:	4b9c      	ldr	r3, [pc, #624]	@ (8007bb8 <_printf_float+0x2c8>)
 8007948:	f04f 32ff 	mov.w	r2, #4294967295
 800794c:	f7f9 f916 	bl	8000b7c <__aeabi_dcmpun>
 8007950:	bb70      	cbnz	r0, 80079b0 <_printf_float+0xc0>
 8007952:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007956:	4b98      	ldr	r3, [pc, #608]	@ (8007bb8 <_printf_float+0x2c8>)
 8007958:	f04f 32ff 	mov.w	r2, #4294967295
 800795c:	f7f9 f8f0 	bl	8000b40 <__aeabi_dcmple>
 8007960:	bb30      	cbnz	r0, 80079b0 <_printf_float+0xc0>
 8007962:	2200      	movs	r2, #0
 8007964:	2300      	movs	r3, #0
 8007966:	4640      	mov	r0, r8
 8007968:	4649      	mov	r1, r9
 800796a:	f7f9 f8df 	bl	8000b2c <__aeabi_dcmplt>
 800796e:	b110      	cbz	r0, 8007976 <_printf_float+0x86>
 8007970:	232d      	movs	r3, #45	@ 0x2d
 8007972:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007976:	4a91      	ldr	r2, [pc, #580]	@ (8007bbc <_printf_float+0x2cc>)
 8007978:	4b91      	ldr	r3, [pc, #580]	@ (8007bc0 <_printf_float+0x2d0>)
 800797a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800797e:	bf94      	ite	ls
 8007980:	4690      	movls	r8, r2
 8007982:	4698      	movhi	r8, r3
 8007984:	2303      	movs	r3, #3
 8007986:	6123      	str	r3, [r4, #16]
 8007988:	f02b 0304 	bic.w	r3, fp, #4
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	f04f 0900 	mov.w	r9, #0
 8007992:	9700      	str	r7, [sp, #0]
 8007994:	4633      	mov	r3, r6
 8007996:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007998:	4621      	mov	r1, r4
 800799a:	4628      	mov	r0, r5
 800799c:	f000 f9d2 	bl	8007d44 <_printf_common>
 80079a0:	3001      	adds	r0, #1
 80079a2:	f040 808d 	bne.w	8007ac0 <_printf_float+0x1d0>
 80079a6:	f04f 30ff 	mov.w	r0, #4294967295
 80079aa:	b00d      	add	sp, #52	@ 0x34
 80079ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b0:	4642      	mov	r2, r8
 80079b2:	464b      	mov	r3, r9
 80079b4:	4640      	mov	r0, r8
 80079b6:	4649      	mov	r1, r9
 80079b8:	f7f9 f8e0 	bl	8000b7c <__aeabi_dcmpun>
 80079bc:	b140      	cbz	r0, 80079d0 <_printf_float+0xe0>
 80079be:	464b      	mov	r3, r9
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	bfbc      	itt	lt
 80079c4:	232d      	movlt	r3, #45	@ 0x2d
 80079c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80079ca:	4a7e      	ldr	r2, [pc, #504]	@ (8007bc4 <_printf_float+0x2d4>)
 80079cc:	4b7e      	ldr	r3, [pc, #504]	@ (8007bc8 <_printf_float+0x2d8>)
 80079ce:	e7d4      	b.n	800797a <_printf_float+0x8a>
 80079d0:	6863      	ldr	r3, [r4, #4]
 80079d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80079d6:	9206      	str	r2, [sp, #24]
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	d13b      	bne.n	8007a54 <_printf_float+0x164>
 80079dc:	2306      	movs	r3, #6
 80079de:	6063      	str	r3, [r4, #4]
 80079e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80079e4:	2300      	movs	r3, #0
 80079e6:	6022      	str	r2, [r4, #0]
 80079e8:	9303      	str	r3, [sp, #12]
 80079ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80079ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 80079f0:	ab09      	add	r3, sp, #36	@ 0x24
 80079f2:	9300      	str	r3, [sp, #0]
 80079f4:	6861      	ldr	r1, [r4, #4]
 80079f6:	ec49 8b10 	vmov	d0, r8, r9
 80079fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80079fe:	4628      	mov	r0, r5
 8007a00:	f7ff fed6 	bl	80077b0 <__cvt>
 8007a04:	9b06      	ldr	r3, [sp, #24]
 8007a06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a08:	2b47      	cmp	r3, #71	@ 0x47
 8007a0a:	4680      	mov	r8, r0
 8007a0c:	d129      	bne.n	8007a62 <_printf_float+0x172>
 8007a0e:	1cc8      	adds	r0, r1, #3
 8007a10:	db02      	blt.n	8007a18 <_printf_float+0x128>
 8007a12:	6863      	ldr	r3, [r4, #4]
 8007a14:	4299      	cmp	r1, r3
 8007a16:	dd41      	ble.n	8007a9c <_printf_float+0x1ac>
 8007a18:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a1c:	fa5f fa8a 	uxtb.w	sl, sl
 8007a20:	3901      	subs	r1, #1
 8007a22:	4652      	mov	r2, sl
 8007a24:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007a28:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a2a:	f7ff ff26 	bl	800787a <__exponent>
 8007a2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a30:	1813      	adds	r3, r2, r0
 8007a32:	2a01      	cmp	r2, #1
 8007a34:	4681      	mov	r9, r0
 8007a36:	6123      	str	r3, [r4, #16]
 8007a38:	dc02      	bgt.n	8007a40 <_printf_float+0x150>
 8007a3a:	6822      	ldr	r2, [r4, #0]
 8007a3c:	07d2      	lsls	r2, r2, #31
 8007a3e:	d501      	bpl.n	8007a44 <_printf_float+0x154>
 8007a40:	3301      	adds	r3, #1
 8007a42:	6123      	str	r3, [r4, #16]
 8007a44:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d0a2      	beq.n	8007992 <_printf_float+0xa2>
 8007a4c:	232d      	movs	r3, #45	@ 0x2d
 8007a4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a52:	e79e      	b.n	8007992 <_printf_float+0xa2>
 8007a54:	9a06      	ldr	r2, [sp, #24]
 8007a56:	2a47      	cmp	r2, #71	@ 0x47
 8007a58:	d1c2      	bne.n	80079e0 <_printf_float+0xf0>
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1c0      	bne.n	80079e0 <_printf_float+0xf0>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e7bd      	b.n	80079de <_printf_float+0xee>
 8007a62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a66:	d9db      	bls.n	8007a20 <_printf_float+0x130>
 8007a68:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007a6c:	d118      	bne.n	8007aa0 <_printf_float+0x1b0>
 8007a6e:	2900      	cmp	r1, #0
 8007a70:	6863      	ldr	r3, [r4, #4]
 8007a72:	dd0b      	ble.n	8007a8c <_printf_float+0x19c>
 8007a74:	6121      	str	r1, [r4, #16]
 8007a76:	b913      	cbnz	r3, 8007a7e <_printf_float+0x18e>
 8007a78:	6822      	ldr	r2, [r4, #0]
 8007a7a:	07d0      	lsls	r0, r2, #31
 8007a7c:	d502      	bpl.n	8007a84 <_printf_float+0x194>
 8007a7e:	3301      	adds	r3, #1
 8007a80:	440b      	add	r3, r1
 8007a82:	6123      	str	r3, [r4, #16]
 8007a84:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007a86:	f04f 0900 	mov.w	r9, #0
 8007a8a:	e7db      	b.n	8007a44 <_printf_float+0x154>
 8007a8c:	b913      	cbnz	r3, 8007a94 <_printf_float+0x1a4>
 8007a8e:	6822      	ldr	r2, [r4, #0]
 8007a90:	07d2      	lsls	r2, r2, #31
 8007a92:	d501      	bpl.n	8007a98 <_printf_float+0x1a8>
 8007a94:	3302      	adds	r3, #2
 8007a96:	e7f4      	b.n	8007a82 <_printf_float+0x192>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e7f2      	b.n	8007a82 <_printf_float+0x192>
 8007a9c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007aa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aa2:	4299      	cmp	r1, r3
 8007aa4:	db05      	blt.n	8007ab2 <_printf_float+0x1c2>
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	6121      	str	r1, [r4, #16]
 8007aaa:	07d8      	lsls	r0, r3, #31
 8007aac:	d5ea      	bpl.n	8007a84 <_printf_float+0x194>
 8007aae:	1c4b      	adds	r3, r1, #1
 8007ab0:	e7e7      	b.n	8007a82 <_printf_float+0x192>
 8007ab2:	2900      	cmp	r1, #0
 8007ab4:	bfd4      	ite	le
 8007ab6:	f1c1 0202 	rsble	r2, r1, #2
 8007aba:	2201      	movgt	r2, #1
 8007abc:	4413      	add	r3, r2
 8007abe:	e7e0      	b.n	8007a82 <_printf_float+0x192>
 8007ac0:	6823      	ldr	r3, [r4, #0]
 8007ac2:	055a      	lsls	r2, r3, #21
 8007ac4:	d407      	bmi.n	8007ad6 <_printf_float+0x1e6>
 8007ac6:	6923      	ldr	r3, [r4, #16]
 8007ac8:	4642      	mov	r2, r8
 8007aca:	4631      	mov	r1, r6
 8007acc:	4628      	mov	r0, r5
 8007ace:	47b8      	blx	r7
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	d12b      	bne.n	8007b2c <_printf_float+0x23c>
 8007ad4:	e767      	b.n	80079a6 <_printf_float+0xb6>
 8007ad6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ada:	f240 80dd 	bls.w	8007c98 <_printf_float+0x3a8>
 8007ade:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f7f9 f817 	bl	8000b18 <__aeabi_dcmpeq>
 8007aea:	2800      	cmp	r0, #0
 8007aec:	d033      	beq.n	8007b56 <_printf_float+0x266>
 8007aee:	4a37      	ldr	r2, [pc, #220]	@ (8007bcc <_printf_float+0x2dc>)
 8007af0:	2301      	movs	r3, #1
 8007af2:	4631      	mov	r1, r6
 8007af4:	4628      	mov	r0, r5
 8007af6:	47b8      	blx	r7
 8007af8:	3001      	adds	r0, #1
 8007afa:	f43f af54 	beq.w	80079a6 <_printf_float+0xb6>
 8007afe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007b02:	4543      	cmp	r3, r8
 8007b04:	db02      	blt.n	8007b0c <_printf_float+0x21c>
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	07d8      	lsls	r0, r3, #31
 8007b0a:	d50f      	bpl.n	8007b2c <_printf_float+0x23c>
 8007b0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b10:	4631      	mov	r1, r6
 8007b12:	4628      	mov	r0, r5
 8007b14:	47b8      	blx	r7
 8007b16:	3001      	adds	r0, #1
 8007b18:	f43f af45 	beq.w	80079a6 <_printf_float+0xb6>
 8007b1c:	f04f 0900 	mov.w	r9, #0
 8007b20:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b24:	f104 0a1a 	add.w	sl, r4, #26
 8007b28:	45c8      	cmp	r8, r9
 8007b2a:	dc09      	bgt.n	8007b40 <_printf_float+0x250>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	079b      	lsls	r3, r3, #30
 8007b30:	f100 8103 	bmi.w	8007d3a <_printf_float+0x44a>
 8007b34:	68e0      	ldr	r0, [r4, #12]
 8007b36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b38:	4298      	cmp	r0, r3
 8007b3a:	bfb8      	it	lt
 8007b3c:	4618      	movlt	r0, r3
 8007b3e:	e734      	b.n	80079aa <_printf_float+0xba>
 8007b40:	2301      	movs	r3, #1
 8007b42:	4652      	mov	r2, sl
 8007b44:	4631      	mov	r1, r6
 8007b46:	4628      	mov	r0, r5
 8007b48:	47b8      	blx	r7
 8007b4a:	3001      	adds	r0, #1
 8007b4c:	f43f af2b 	beq.w	80079a6 <_printf_float+0xb6>
 8007b50:	f109 0901 	add.w	r9, r9, #1
 8007b54:	e7e8      	b.n	8007b28 <_printf_float+0x238>
 8007b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	dc39      	bgt.n	8007bd0 <_printf_float+0x2e0>
 8007b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8007bcc <_printf_float+0x2dc>)
 8007b5e:	2301      	movs	r3, #1
 8007b60:	4631      	mov	r1, r6
 8007b62:	4628      	mov	r0, r5
 8007b64:	47b8      	blx	r7
 8007b66:	3001      	adds	r0, #1
 8007b68:	f43f af1d 	beq.w	80079a6 <_printf_float+0xb6>
 8007b6c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007b70:	ea59 0303 	orrs.w	r3, r9, r3
 8007b74:	d102      	bne.n	8007b7c <_printf_float+0x28c>
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	07d9      	lsls	r1, r3, #31
 8007b7a:	d5d7      	bpl.n	8007b2c <_printf_float+0x23c>
 8007b7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b80:	4631      	mov	r1, r6
 8007b82:	4628      	mov	r0, r5
 8007b84:	47b8      	blx	r7
 8007b86:	3001      	adds	r0, #1
 8007b88:	f43f af0d 	beq.w	80079a6 <_printf_float+0xb6>
 8007b8c:	f04f 0a00 	mov.w	sl, #0
 8007b90:	f104 0b1a 	add.w	fp, r4, #26
 8007b94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b96:	425b      	negs	r3, r3
 8007b98:	4553      	cmp	r3, sl
 8007b9a:	dc01      	bgt.n	8007ba0 <_printf_float+0x2b0>
 8007b9c:	464b      	mov	r3, r9
 8007b9e:	e793      	b.n	8007ac8 <_printf_float+0x1d8>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	465a      	mov	r2, fp
 8007ba4:	4631      	mov	r1, r6
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	47b8      	blx	r7
 8007baa:	3001      	adds	r0, #1
 8007bac:	f43f aefb 	beq.w	80079a6 <_printf_float+0xb6>
 8007bb0:	f10a 0a01 	add.w	sl, sl, #1
 8007bb4:	e7ee      	b.n	8007b94 <_printf_float+0x2a4>
 8007bb6:	bf00      	nop
 8007bb8:	7fefffff 	.word	0x7fefffff
 8007bbc:	0800ad1c 	.word	0x0800ad1c
 8007bc0:	0800ad20 	.word	0x0800ad20
 8007bc4:	0800ad24 	.word	0x0800ad24
 8007bc8:	0800ad28 	.word	0x0800ad28
 8007bcc:	0800ad2c 	.word	0x0800ad2c
 8007bd0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007bd2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007bd6:	4553      	cmp	r3, sl
 8007bd8:	bfa8      	it	ge
 8007bda:	4653      	movge	r3, sl
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	4699      	mov	r9, r3
 8007be0:	dc36      	bgt.n	8007c50 <_printf_float+0x360>
 8007be2:	f04f 0b00 	mov.w	fp, #0
 8007be6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bea:	f104 021a 	add.w	r2, r4, #26
 8007bee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007bf0:	9306      	str	r3, [sp, #24]
 8007bf2:	eba3 0309 	sub.w	r3, r3, r9
 8007bf6:	455b      	cmp	r3, fp
 8007bf8:	dc31      	bgt.n	8007c5e <_printf_float+0x36e>
 8007bfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bfc:	459a      	cmp	sl, r3
 8007bfe:	dc3a      	bgt.n	8007c76 <_printf_float+0x386>
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	07da      	lsls	r2, r3, #31
 8007c04:	d437      	bmi.n	8007c76 <_printf_float+0x386>
 8007c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c08:	ebaa 0903 	sub.w	r9, sl, r3
 8007c0c:	9b06      	ldr	r3, [sp, #24]
 8007c0e:	ebaa 0303 	sub.w	r3, sl, r3
 8007c12:	4599      	cmp	r9, r3
 8007c14:	bfa8      	it	ge
 8007c16:	4699      	movge	r9, r3
 8007c18:	f1b9 0f00 	cmp.w	r9, #0
 8007c1c:	dc33      	bgt.n	8007c86 <_printf_float+0x396>
 8007c1e:	f04f 0800 	mov.w	r8, #0
 8007c22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c26:	f104 0b1a 	add.w	fp, r4, #26
 8007c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c2c:	ebaa 0303 	sub.w	r3, sl, r3
 8007c30:	eba3 0309 	sub.w	r3, r3, r9
 8007c34:	4543      	cmp	r3, r8
 8007c36:	f77f af79 	ble.w	8007b2c <_printf_float+0x23c>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	465a      	mov	r2, fp
 8007c3e:	4631      	mov	r1, r6
 8007c40:	4628      	mov	r0, r5
 8007c42:	47b8      	blx	r7
 8007c44:	3001      	adds	r0, #1
 8007c46:	f43f aeae 	beq.w	80079a6 <_printf_float+0xb6>
 8007c4a:	f108 0801 	add.w	r8, r8, #1
 8007c4e:	e7ec      	b.n	8007c2a <_printf_float+0x33a>
 8007c50:	4642      	mov	r2, r8
 8007c52:	4631      	mov	r1, r6
 8007c54:	4628      	mov	r0, r5
 8007c56:	47b8      	blx	r7
 8007c58:	3001      	adds	r0, #1
 8007c5a:	d1c2      	bne.n	8007be2 <_printf_float+0x2f2>
 8007c5c:	e6a3      	b.n	80079a6 <_printf_float+0xb6>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	4631      	mov	r1, r6
 8007c62:	4628      	mov	r0, r5
 8007c64:	9206      	str	r2, [sp, #24]
 8007c66:	47b8      	blx	r7
 8007c68:	3001      	adds	r0, #1
 8007c6a:	f43f ae9c 	beq.w	80079a6 <_printf_float+0xb6>
 8007c6e:	9a06      	ldr	r2, [sp, #24]
 8007c70:	f10b 0b01 	add.w	fp, fp, #1
 8007c74:	e7bb      	b.n	8007bee <_printf_float+0x2fe>
 8007c76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	47b8      	blx	r7
 8007c80:	3001      	adds	r0, #1
 8007c82:	d1c0      	bne.n	8007c06 <_printf_float+0x316>
 8007c84:	e68f      	b.n	80079a6 <_printf_float+0xb6>
 8007c86:	9a06      	ldr	r2, [sp, #24]
 8007c88:	464b      	mov	r3, r9
 8007c8a:	4442      	add	r2, r8
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	4628      	mov	r0, r5
 8007c90:	47b8      	blx	r7
 8007c92:	3001      	adds	r0, #1
 8007c94:	d1c3      	bne.n	8007c1e <_printf_float+0x32e>
 8007c96:	e686      	b.n	80079a6 <_printf_float+0xb6>
 8007c98:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c9c:	f1ba 0f01 	cmp.w	sl, #1
 8007ca0:	dc01      	bgt.n	8007ca6 <_printf_float+0x3b6>
 8007ca2:	07db      	lsls	r3, r3, #31
 8007ca4:	d536      	bpl.n	8007d14 <_printf_float+0x424>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	4642      	mov	r2, r8
 8007caa:	4631      	mov	r1, r6
 8007cac:	4628      	mov	r0, r5
 8007cae:	47b8      	blx	r7
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	f43f ae78 	beq.w	80079a6 <_printf_float+0xb6>
 8007cb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cba:	4631      	mov	r1, r6
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	47b8      	blx	r7
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	f43f ae70 	beq.w	80079a6 <_printf_float+0xb6>
 8007cc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2300      	movs	r3, #0
 8007cce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cd2:	f7f8 ff21 	bl	8000b18 <__aeabi_dcmpeq>
 8007cd6:	b9c0      	cbnz	r0, 8007d0a <_printf_float+0x41a>
 8007cd8:	4653      	mov	r3, sl
 8007cda:	f108 0201 	add.w	r2, r8, #1
 8007cde:	4631      	mov	r1, r6
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	47b8      	blx	r7
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	d10c      	bne.n	8007d02 <_printf_float+0x412>
 8007ce8:	e65d      	b.n	80079a6 <_printf_float+0xb6>
 8007cea:	2301      	movs	r3, #1
 8007cec:	465a      	mov	r2, fp
 8007cee:	4631      	mov	r1, r6
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	47b8      	blx	r7
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	f43f ae56 	beq.w	80079a6 <_printf_float+0xb6>
 8007cfa:	f108 0801 	add.w	r8, r8, #1
 8007cfe:	45d0      	cmp	r8, sl
 8007d00:	dbf3      	blt.n	8007cea <_printf_float+0x3fa>
 8007d02:	464b      	mov	r3, r9
 8007d04:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007d08:	e6df      	b.n	8007aca <_printf_float+0x1da>
 8007d0a:	f04f 0800 	mov.w	r8, #0
 8007d0e:	f104 0b1a 	add.w	fp, r4, #26
 8007d12:	e7f4      	b.n	8007cfe <_printf_float+0x40e>
 8007d14:	2301      	movs	r3, #1
 8007d16:	4642      	mov	r2, r8
 8007d18:	e7e1      	b.n	8007cde <_printf_float+0x3ee>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	464a      	mov	r2, r9
 8007d1e:	4631      	mov	r1, r6
 8007d20:	4628      	mov	r0, r5
 8007d22:	47b8      	blx	r7
 8007d24:	3001      	adds	r0, #1
 8007d26:	f43f ae3e 	beq.w	80079a6 <_printf_float+0xb6>
 8007d2a:	f108 0801 	add.w	r8, r8, #1
 8007d2e:	68e3      	ldr	r3, [r4, #12]
 8007d30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d32:	1a5b      	subs	r3, r3, r1
 8007d34:	4543      	cmp	r3, r8
 8007d36:	dcf0      	bgt.n	8007d1a <_printf_float+0x42a>
 8007d38:	e6fc      	b.n	8007b34 <_printf_float+0x244>
 8007d3a:	f04f 0800 	mov.w	r8, #0
 8007d3e:	f104 0919 	add.w	r9, r4, #25
 8007d42:	e7f4      	b.n	8007d2e <_printf_float+0x43e>

08007d44 <_printf_common>:
 8007d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d48:	4616      	mov	r6, r2
 8007d4a:	4698      	mov	r8, r3
 8007d4c:	688a      	ldr	r2, [r1, #8]
 8007d4e:	690b      	ldr	r3, [r1, #16]
 8007d50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d54:	4293      	cmp	r3, r2
 8007d56:	bfb8      	it	lt
 8007d58:	4613      	movlt	r3, r2
 8007d5a:	6033      	str	r3, [r6, #0]
 8007d5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d60:	4607      	mov	r7, r0
 8007d62:	460c      	mov	r4, r1
 8007d64:	b10a      	cbz	r2, 8007d6a <_printf_common+0x26>
 8007d66:	3301      	adds	r3, #1
 8007d68:	6033      	str	r3, [r6, #0]
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	0699      	lsls	r1, r3, #26
 8007d6e:	bf42      	ittt	mi
 8007d70:	6833      	ldrmi	r3, [r6, #0]
 8007d72:	3302      	addmi	r3, #2
 8007d74:	6033      	strmi	r3, [r6, #0]
 8007d76:	6825      	ldr	r5, [r4, #0]
 8007d78:	f015 0506 	ands.w	r5, r5, #6
 8007d7c:	d106      	bne.n	8007d8c <_printf_common+0x48>
 8007d7e:	f104 0a19 	add.w	sl, r4, #25
 8007d82:	68e3      	ldr	r3, [r4, #12]
 8007d84:	6832      	ldr	r2, [r6, #0]
 8007d86:	1a9b      	subs	r3, r3, r2
 8007d88:	42ab      	cmp	r3, r5
 8007d8a:	dc26      	bgt.n	8007dda <_printf_common+0x96>
 8007d8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d90:	6822      	ldr	r2, [r4, #0]
 8007d92:	3b00      	subs	r3, #0
 8007d94:	bf18      	it	ne
 8007d96:	2301      	movne	r3, #1
 8007d98:	0692      	lsls	r2, r2, #26
 8007d9a:	d42b      	bmi.n	8007df4 <_printf_common+0xb0>
 8007d9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007da0:	4641      	mov	r1, r8
 8007da2:	4638      	mov	r0, r7
 8007da4:	47c8      	blx	r9
 8007da6:	3001      	adds	r0, #1
 8007da8:	d01e      	beq.n	8007de8 <_printf_common+0xa4>
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	6922      	ldr	r2, [r4, #16]
 8007dae:	f003 0306 	and.w	r3, r3, #6
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	bf02      	ittt	eq
 8007db6:	68e5      	ldreq	r5, [r4, #12]
 8007db8:	6833      	ldreq	r3, [r6, #0]
 8007dba:	1aed      	subeq	r5, r5, r3
 8007dbc:	68a3      	ldr	r3, [r4, #8]
 8007dbe:	bf0c      	ite	eq
 8007dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dc4:	2500      	movne	r5, #0
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	bfc4      	itt	gt
 8007dca:	1a9b      	subgt	r3, r3, r2
 8007dcc:	18ed      	addgt	r5, r5, r3
 8007dce:	2600      	movs	r6, #0
 8007dd0:	341a      	adds	r4, #26
 8007dd2:	42b5      	cmp	r5, r6
 8007dd4:	d11a      	bne.n	8007e0c <_printf_common+0xc8>
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	e008      	b.n	8007dec <_printf_common+0xa8>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	4652      	mov	r2, sl
 8007dde:	4641      	mov	r1, r8
 8007de0:	4638      	mov	r0, r7
 8007de2:	47c8      	blx	r9
 8007de4:	3001      	adds	r0, #1
 8007de6:	d103      	bne.n	8007df0 <_printf_common+0xac>
 8007de8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007df0:	3501      	adds	r5, #1
 8007df2:	e7c6      	b.n	8007d82 <_printf_common+0x3e>
 8007df4:	18e1      	adds	r1, r4, r3
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	2030      	movs	r0, #48	@ 0x30
 8007dfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007dfe:	4422      	add	r2, r4
 8007e00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e08:	3302      	adds	r3, #2
 8007e0a:	e7c7      	b.n	8007d9c <_printf_common+0x58>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	4622      	mov	r2, r4
 8007e10:	4641      	mov	r1, r8
 8007e12:	4638      	mov	r0, r7
 8007e14:	47c8      	blx	r9
 8007e16:	3001      	adds	r0, #1
 8007e18:	d0e6      	beq.n	8007de8 <_printf_common+0xa4>
 8007e1a:	3601      	adds	r6, #1
 8007e1c:	e7d9      	b.n	8007dd2 <_printf_common+0x8e>
	...

08007e20 <_printf_i>:
 8007e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e24:	7e0f      	ldrb	r7, [r1, #24]
 8007e26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e28:	2f78      	cmp	r7, #120	@ 0x78
 8007e2a:	4691      	mov	r9, r2
 8007e2c:	4680      	mov	r8, r0
 8007e2e:	460c      	mov	r4, r1
 8007e30:	469a      	mov	sl, r3
 8007e32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e36:	d807      	bhi.n	8007e48 <_printf_i+0x28>
 8007e38:	2f62      	cmp	r7, #98	@ 0x62
 8007e3a:	d80a      	bhi.n	8007e52 <_printf_i+0x32>
 8007e3c:	2f00      	cmp	r7, #0
 8007e3e:	f000 80d2 	beq.w	8007fe6 <_printf_i+0x1c6>
 8007e42:	2f58      	cmp	r7, #88	@ 0x58
 8007e44:	f000 80b9 	beq.w	8007fba <_printf_i+0x19a>
 8007e48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e50:	e03a      	b.n	8007ec8 <_printf_i+0xa8>
 8007e52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e56:	2b15      	cmp	r3, #21
 8007e58:	d8f6      	bhi.n	8007e48 <_printf_i+0x28>
 8007e5a:	a101      	add	r1, pc, #4	@ (adr r1, 8007e60 <_printf_i+0x40>)
 8007e5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e60:	08007eb9 	.word	0x08007eb9
 8007e64:	08007ecd 	.word	0x08007ecd
 8007e68:	08007e49 	.word	0x08007e49
 8007e6c:	08007e49 	.word	0x08007e49
 8007e70:	08007e49 	.word	0x08007e49
 8007e74:	08007e49 	.word	0x08007e49
 8007e78:	08007ecd 	.word	0x08007ecd
 8007e7c:	08007e49 	.word	0x08007e49
 8007e80:	08007e49 	.word	0x08007e49
 8007e84:	08007e49 	.word	0x08007e49
 8007e88:	08007e49 	.word	0x08007e49
 8007e8c:	08007fcd 	.word	0x08007fcd
 8007e90:	08007ef7 	.word	0x08007ef7
 8007e94:	08007f87 	.word	0x08007f87
 8007e98:	08007e49 	.word	0x08007e49
 8007e9c:	08007e49 	.word	0x08007e49
 8007ea0:	08007fef 	.word	0x08007fef
 8007ea4:	08007e49 	.word	0x08007e49
 8007ea8:	08007ef7 	.word	0x08007ef7
 8007eac:	08007e49 	.word	0x08007e49
 8007eb0:	08007e49 	.word	0x08007e49
 8007eb4:	08007f8f 	.word	0x08007f8f
 8007eb8:	6833      	ldr	r3, [r6, #0]
 8007eba:	1d1a      	adds	r2, r3, #4
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	6032      	str	r2, [r6, #0]
 8007ec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ec4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e09d      	b.n	8008008 <_printf_i+0x1e8>
 8007ecc:	6833      	ldr	r3, [r6, #0]
 8007ece:	6820      	ldr	r0, [r4, #0]
 8007ed0:	1d19      	adds	r1, r3, #4
 8007ed2:	6031      	str	r1, [r6, #0]
 8007ed4:	0606      	lsls	r6, r0, #24
 8007ed6:	d501      	bpl.n	8007edc <_printf_i+0xbc>
 8007ed8:	681d      	ldr	r5, [r3, #0]
 8007eda:	e003      	b.n	8007ee4 <_printf_i+0xc4>
 8007edc:	0645      	lsls	r5, r0, #25
 8007ede:	d5fb      	bpl.n	8007ed8 <_printf_i+0xb8>
 8007ee0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ee4:	2d00      	cmp	r5, #0
 8007ee6:	da03      	bge.n	8007ef0 <_printf_i+0xd0>
 8007ee8:	232d      	movs	r3, #45	@ 0x2d
 8007eea:	426d      	negs	r5, r5
 8007eec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ef0:	4859      	ldr	r0, [pc, #356]	@ (8008058 <_printf_i+0x238>)
 8007ef2:	230a      	movs	r3, #10
 8007ef4:	e011      	b.n	8007f1a <_printf_i+0xfa>
 8007ef6:	6821      	ldr	r1, [r4, #0]
 8007ef8:	6833      	ldr	r3, [r6, #0]
 8007efa:	0608      	lsls	r0, r1, #24
 8007efc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f00:	d402      	bmi.n	8007f08 <_printf_i+0xe8>
 8007f02:	0649      	lsls	r1, r1, #25
 8007f04:	bf48      	it	mi
 8007f06:	b2ad      	uxthmi	r5, r5
 8007f08:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f0a:	4853      	ldr	r0, [pc, #332]	@ (8008058 <_printf_i+0x238>)
 8007f0c:	6033      	str	r3, [r6, #0]
 8007f0e:	bf14      	ite	ne
 8007f10:	230a      	movne	r3, #10
 8007f12:	2308      	moveq	r3, #8
 8007f14:	2100      	movs	r1, #0
 8007f16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f1a:	6866      	ldr	r6, [r4, #4]
 8007f1c:	60a6      	str	r6, [r4, #8]
 8007f1e:	2e00      	cmp	r6, #0
 8007f20:	bfa2      	ittt	ge
 8007f22:	6821      	ldrge	r1, [r4, #0]
 8007f24:	f021 0104 	bicge.w	r1, r1, #4
 8007f28:	6021      	strge	r1, [r4, #0]
 8007f2a:	b90d      	cbnz	r5, 8007f30 <_printf_i+0x110>
 8007f2c:	2e00      	cmp	r6, #0
 8007f2e:	d04b      	beq.n	8007fc8 <_printf_i+0x1a8>
 8007f30:	4616      	mov	r6, r2
 8007f32:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f36:	fb03 5711 	mls	r7, r3, r1, r5
 8007f3a:	5dc7      	ldrb	r7, [r0, r7]
 8007f3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f40:	462f      	mov	r7, r5
 8007f42:	42bb      	cmp	r3, r7
 8007f44:	460d      	mov	r5, r1
 8007f46:	d9f4      	bls.n	8007f32 <_printf_i+0x112>
 8007f48:	2b08      	cmp	r3, #8
 8007f4a:	d10b      	bne.n	8007f64 <_printf_i+0x144>
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	07df      	lsls	r7, r3, #31
 8007f50:	d508      	bpl.n	8007f64 <_printf_i+0x144>
 8007f52:	6923      	ldr	r3, [r4, #16]
 8007f54:	6861      	ldr	r1, [r4, #4]
 8007f56:	4299      	cmp	r1, r3
 8007f58:	bfde      	ittt	le
 8007f5a:	2330      	movle	r3, #48	@ 0x30
 8007f5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f64:	1b92      	subs	r2, r2, r6
 8007f66:	6122      	str	r2, [r4, #16]
 8007f68:	f8cd a000 	str.w	sl, [sp]
 8007f6c:	464b      	mov	r3, r9
 8007f6e:	aa03      	add	r2, sp, #12
 8007f70:	4621      	mov	r1, r4
 8007f72:	4640      	mov	r0, r8
 8007f74:	f7ff fee6 	bl	8007d44 <_printf_common>
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d14a      	bne.n	8008012 <_printf_i+0x1f2>
 8007f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f80:	b004      	add	sp, #16
 8007f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	f043 0320 	orr.w	r3, r3, #32
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	4833      	ldr	r0, [pc, #204]	@ (800805c <_printf_i+0x23c>)
 8007f90:	2778      	movs	r7, #120	@ 0x78
 8007f92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	6831      	ldr	r1, [r6, #0]
 8007f9a:	061f      	lsls	r7, r3, #24
 8007f9c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fa0:	d402      	bmi.n	8007fa8 <_printf_i+0x188>
 8007fa2:	065f      	lsls	r7, r3, #25
 8007fa4:	bf48      	it	mi
 8007fa6:	b2ad      	uxthmi	r5, r5
 8007fa8:	6031      	str	r1, [r6, #0]
 8007faa:	07d9      	lsls	r1, r3, #31
 8007fac:	bf44      	itt	mi
 8007fae:	f043 0320 	orrmi.w	r3, r3, #32
 8007fb2:	6023      	strmi	r3, [r4, #0]
 8007fb4:	b11d      	cbz	r5, 8007fbe <_printf_i+0x19e>
 8007fb6:	2310      	movs	r3, #16
 8007fb8:	e7ac      	b.n	8007f14 <_printf_i+0xf4>
 8007fba:	4827      	ldr	r0, [pc, #156]	@ (8008058 <_printf_i+0x238>)
 8007fbc:	e7e9      	b.n	8007f92 <_printf_i+0x172>
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	f023 0320 	bic.w	r3, r3, #32
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	e7f6      	b.n	8007fb6 <_printf_i+0x196>
 8007fc8:	4616      	mov	r6, r2
 8007fca:	e7bd      	b.n	8007f48 <_printf_i+0x128>
 8007fcc:	6833      	ldr	r3, [r6, #0]
 8007fce:	6825      	ldr	r5, [r4, #0]
 8007fd0:	6961      	ldr	r1, [r4, #20]
 8007fd2:	1d18      	adds	r0, r3, #4
 8007fd4:	6030      	str	r0, [r6, #0]
 8007fd6:	062e      	lsls	r6, r5, #24
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	d501      	bpl.n	8007fe0 <_printf_i+0x1c0>
 8007fdc:	6019      	str	r1, [r3, #0]
 8007fde:	e002      	b.n	8007fe6 <_printf_i+0x1c6>
 8007fe0:	0668      	lsls	r0, r5, #25
 8007fe2:	d5fb      	bpl.n	8007fdc <_printf_i+0x1bc>
 8007fe4:	8019      	strh	r1, [r3, #0]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	6123      	str	r3, [r4, #16]
 8007fea:	4616      	mov	r6, r2
 8007fec:	e7bc      	b.n	8007f68 <_printf_i+0x148>
 8007fee:	6833      	ldr	r3, [r6, #0]
 8007ff0:	1d1a      	adds	r2, r3, #4
 8007ff2:	6032      	str	r2, [r6, #0]
 8007ff4:	681e      	ldr	r6, [r3, #0]
 8007ff6:	6862      	ldr	r2, [r4, #4]
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	f7f8 f910 	bl	8000220 <memchr>
 8008000:	b108      	cbz	r0, 8008006 <_printf_i+0x1e6>
 8008002:	1b80      	subs	r0, r0, r6
 8008004:	6060      	str	r0, [r4, #4]
 8008006:	6863      	ldr	r3, [r4, #4]
 8008008:	6123      	str	r3, [r4, #16]
 800800a:	2300      	movs	r3, #0
 800800c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008010:	e7aa      	b.n	8007f68 <_printf_i+0x148>
 8008012:	6923      	ldr	r3, [r4, #16]
 8008014:	4632      	mov	r2, r6
 8008016:	4649      	mov	r1, r9
 8008018:	4640      	mov	r0, r8
 800801a:	47d0      	blx	sl
 800801c:	3001      	adds	r0, #1
 800801e:	d0ad      	beq.n	8007f7c <_printf_i+0x15c>
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	079b      	lsls	r3, r3, #30
 8008024:	d413      	bmi.n	800804e <_printf_i+0x22e>
 8008026:	68e0      	ldr	r0, [r4, #12]
 8008028:	9b03      	ldr	r3, [sp, #12]
 800802a:	4298      	cmp	r0, r3
 800802c:	bfb8      	it	lt
 800802e:	4618      	movlt	r0, r3
 8008030:	e7a6      	b.n	8007f80 <_printf_i+0x160>
 8008032:	2301      	movs	r3, #1
 8008034:	4632      	mov	r2, r6
 8008036:	4649      	mov	r1, r9
 8008038:	4640      	mov	r0, r8
 800803a:	47d0      	blx	sl
 800803c:	3001      	adds	r0, #1
 800803e:	d09d      	beq.n	8007f7c <_printf_i+0x15c>
 8008040:	3501      	adds	r5, #1
 8008042:	68e3      	ldr	r3, [r4, #12]
 8008044:	9903      	ldr	r1, [sp, #12]
 8008046:	1a5b      	subs	r3, r3, r1
 8008048:	42ab      	cmp	r3, r5
 800804a:	dcf2      	bgt.n	8008032 <_printf_i+0x212>
 800804c:	e7eb      	b.n	8008026 <_printf_i+0x206>
 800804e:	2500      	movs	r5, #0
 8008050:	f104 0619 	add.w	r6, r4, #25
 8008054:	e7f5      	b.n	8008042 <_printf_i+0x222>
 8008056:	bf00      	nop
 8008058:	0800ad2e 	.word	0x0800ad2e
 800805c:	0800ad3f 	.word	0x0800ad3f

08008060 <std>:
 8008060:	2300      	movs	r3, #0
 8008062:	b510      	push	{r4, lr}
 8008064:	4604      	mov	r4, r0
 8008066:	e9c0 3300 	strd	r3, r3, [r0]
 800806a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800806e:	6083      	str	r3, [r0, #8]
 8008070:	8181      	strh	r1, [r0, #12]
 8008072:	6643      	str	r3, [r0, #100]	@ 0x64
 8008074:	81c2      	strh	r2, [r0, #14]
 8008076:	6183      	str	r3, [r0, #24]
 8008078:	4619      	mov	r1, r3
 800807a:	2208      	movs	r2, #8
 800807c:	305c      	adds	r0, #92	@ 0x5c
 800807e:	f000 f914 	bl	80082aa <memset>
 8008082:	4b0d      	ldr	r3, [pc, #52]	@ (80080b8 <std+0x58>)
 8008084:	6263      	str	r3, [r4, #36]	@ 0x24
 8008086:	4b0d      	ldr	r3, [pc, #52]	@ (80080bc <std+0x5c>)
 8008088:	62a3      	str	r3, [r4, #40]	@ 0x28
 800808a:	4b0d      	ldr	r3, [pc, #52]	@ (80080c0 <std+0x60>)
 800808c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800808e:	4b0d      	ldr	r3, [pc, #52]	@ (80080c4 <std+0x64>)
 8008090:	6323      	str	r3, [r4, #48]	@ 0x30
 8008092:	4b0d      	ldr	r3, [pc, #52]	@ (80080c8 <std+0x68>)
 8008094:	6224      	str	r4, [r4, #32]
 8008096:	429c      	cmp	r4, r3
 8008098:	d006      	beq.n	80080a8 <std+0x48>
 800809a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800809e:	4294      	cmp	r4, r2
 80080a0:	d002      	beq.n	80080a8 <std+0x48>
 80080a2:	33d0      	adds	r3, #208	@ 0xd0
 80080a4:	429c      	cmp	r4, r3
 80080a6:	d105      	bne.n	80080b4 <std+0x54>
 80080a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080b0:	f000 b978 	b.w	80083a4 <__retarget_lock_init_recursive>
 80080b4:	bd10      	pop	{r4, pc}
 80080b6:	bf00      	nop
 80080b8:	08008225 	.word	0x08008225
 80080bc:	08008247 	.word	0x08008247
 80080c0:	0800827f 	.word	0x0800827f
 80080c4:	080082a3 	.word	0x080082a3
 80080c8:	200004b0 	.word	0x200004b0

080080cc <stdio_exit_handler>:
 80080cc:	4a02      	ldr	r2, [pc, #8]	@ (80080d8 <stdio_exit_handler+0xc>)
 80080ce:	4903      	ldr	r1, [pc, #12]	@ (80080dc <stdio_exit_handler+0x10>)
 80080d0:	4803      	ldr	r0, [pc, #12]	@ (80080e0 <stdio_exit_handler+0x14>)
 80080d2:	f000 b869 	b.w	80081a8 <_fwalk_sglue>
 80080d6:	bf00      	nop
 80080d8:	2000001c 	.word	0x2000001c
 80080dc:	08009d05 	.word	0x08009d05
 80080e0:	2000002c 	.word	0x2000002c

080080e4 <cleanup_stdio>:
 80080e4:	6841      	ldr	r1, [r0, #4]
 80080e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008118 <cleanup_stdio+0x34>)
 80080e8:	4299      	cmp	r1, r3
 80080ea:	b510      	push	{r4, lr}
 80080ec:	4604      	mov	r4, r0
 80080ee:	d001      	beq.n	80080f4 <cleanup_stdio+0x10>
 80080f0:	f001 fe08 	bl	8009d04 <_fflush_r>
 80080f4:	68a1      	ldr	r1, [r4, #8]
 80080f6:	4b09      	ldr	r3, [pc, #36]	@ (800811c <cleanup_stdio+0x38>)
 80080f8:	4299      	cmp	r1, r3
 80080fa:	d002      	beq.n	8008102 <cleanup_stdio+0x1e>
 80080fc:	4620      	mov	r0, r4
 80080fe:	f001 fe01 	bl	8009d04 <_fflush_r>
 8008102:	68e1      	ldr	r1, [r4, #12]
 8008104:	4b06      	ldr	r3, [pc, #24]	@ (8008120 <cleanup_stdio+0x3c>)
 8008106:	4299      	cmp	r1, r3
 8008108:	d004      	beq.n	8008114 <cleanup_stdio+0x30>
 800810a:	4620      	mov	r0, r4
 800810c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008110:	f001 bdf8 	b.w	8009d04 <_fflush_r>
 8008114:	bd10      	pop	{r4, pc}
 8008116:	bf00      	nop
 8008118:	200004b0 	.word	0x200004b0
 800811c:	20000518 	.word	0x20000518
 8008120:	20000580 	.word	0x20000580

08008124 <global_stdio_init.part.0>:
 8008124:	b510      	push	{r4, lr}
 8008126:	4b0b      	ldr	r3, [pc, #44]	@ (8008154 <global_stdio_init.part.0+0x30>)
 8008128:	4c0b      	ldr	r4, [pc, #44]	@ (8008158 <global_stdio_init.part.0+0x34>)
 800812a:	4a0c      	ldr	r2, [pc, #48]	@ (800815c <global_stdio_init.part.0+0x38>)
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	4620      	mov	r0, r4
 8008130:	2200      	movs	r2, #0
 8008132:	2104      	movs	r1, #4
 8008134:	f7ff ff94 	bl	8008060 <std>
 8008138:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800813c:	2201      	movs	r2, #1
 800813e:	2109      	movs	r1, #9
 8008140:	f7ff ff8e 	bl	8008060 <std>
 8008144:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008148:	2202      	movs	r2, #2
 800814a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800814e:	2112      	movs	r1, #18
 8008150:	f7ff bf86 	b.w	8008060 <std>
 8008154:	200005e8 	.word	0x200005e8
 8008158:	200004b0 	.word	0x200004b0
 800815c:	080080cd 	.word	0x080080cd

08008160 <__sfp_lock_acquire>:
 8008160:	4801      	ldr	r0, [pc, #4]	@ (8008168 <__sfp_lock_acquire+0x8>)
 8008162:	f000 b920 	b.w	80083a6 <__retarget_lock_acquire_recursive>
 8008166:	bf00      	nop
 8008168:	200005f1 	.word	0x200005f1

0800816c <__sfp_lock_release>:
 800816c:	4801      	ldr	r0, [pc, #4]	@ (8008174 <__sfp_lock_release+0x8>)
 800816e:	f000 b91b 	b.w	80083a8 <__retarget_lock_release_recursive>
 8008172:	bf00      	nop
 8008174:	200005f1 	.word	0x200005f1

08008178 <__sinit>:
 8008178:	b510      	push	{r4, lr}
 800817a:	4604      	mov	r4, r0
 800817c:	f7ff fff0 	bl	8008160 <__sfp_lock_acquire>
 8008180:	6a23      	ldr	r3, [r4, #32]
 8008182:	b11b      	cbz	r3, 800818c <__sinit+0x14>
 8008184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008188:	f7ff bff0 	b.w	800816c <__sfp_lock_release>
 800818c:	4b04      	ldr	r3, [pc, #16]	@ (80081a0 <__sinit+0x28>)
 800818e:	6223      	str	r3, [r4, #32]
 8008190:	4b04      	ldr	r3, [pc, #16]	@ (80081a4 <__sinit+0x2c>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1f5      	bne.n	8008184 <__sinit+0xc>
 8008198:	f7ff ffc4 	bl	8008124 <global_stdio_init.part.0>
 800819c:	e7f2      	b.n	8008184 <__sinit+0xc>
 800819e:	bf00      	nop
 80081a0:	080080e5 	.word	0x080080e5
 80081a4:	200005e8 	.word	0x200005e8

080081a8 <_fwalk_sglue>:
 80081a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081ac:	4607      	mov	r7, r0
 80081ae:	4688      	mov	r8, r1
 80081b0:	4614      	mov	r4, r2
 80081b2:	2600      	movs	r6, #0
 80081b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081b8:	f1b9 0901 	subs.w	r9, r9, #1
 80081bc:	d505      	bpl.n	80081ca <_fwalk_sglue+0x22>
 80081be:	6824      	ldr	r4, [r4, #0]
 80081c0:	2c00      	cmp	r4, #0
 80081c2:	d1f7      	bne.n	80081b4 <_fwalk_sglue+0xc>
 80081c4:	4630      	mov	r0, r6
 80081c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ca:	89ab      	ldrh	r3, [r5, #12]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d907      	bls.n	80081e0 <_fwalk_sglue+0x38>
 80081d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081d4:	3301      	adds	r3, #1
 80081d6:	d003      	beq.n	80081e0 <_fwalk_sglue+0x38>
 80081d8:	4629      	mov	r1, r5
 80081da:	4638      	mov	r0, r7
 80081dc:	47c0      	blx	r8
 80081de:	4306      	orrs	r6, r0
 80081e0:	3568      	adds	r5, #104	@ 0x68
 80081e2:	e7e9      	b.n	80081b8 <_fwalk_sglue+0x10>

080081e4 <siprintf>:
 80081e4:	b40e      	push	{r1, r2, r3}
 80081e6:	b500      	push	{lr}
 80081e8:	b09c      	sub	sp, #112	@ 0x70
 80081ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80081ec:	9002      	str	r0, [sp, #8]
 80081ee:	9006      	str	r0, [sp, #24]
 80081f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80081f4:	4809      	ldr	r0, [pc, #36]	@ (800821c <siprintf+0x38>)
 80081f6:	9107      	str	r1, [sp, #28]
 80081f8:	9104      	str	r1, [sp, #16]
 80081fa:	4909      	ldr	r1, [pc, #36]	@ (8008220 <siprintf+0x3c>)
 80081fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008200:	9105      	str	r1, [sp, #20]
 8008202:	6800      	ldr	r0, [r0, #0]
 8008204:	9301      	str	r3, [sp, #4]
 8008206:	a902      	add	r1, sp, #8
 8008208:	f001 fbfc 	bl	8009a04 <_svfiprintf_r>
 800820c:	9b02      	ldr	r3, [sp, #8]
 800820e:	2200      	movs	r2, #0
 8008210:	701a      	strb	r2, [r3, #0]
 8008212:	b01c      	add	sp, #112	@ 0x70
 8008214:	f85d eb04 	ldr.w	lr, [sp], #4
 8008218:	b003      	add	sp, #12
 800821a:	4770      	bx	lr
 800821c:	20000028 	.word	0x20000028
 8008220:	ffff0208 	.word	0xffff0208

08008224 <__sread>:
 8008224:	b510      	push	{r4, lr}
 8008226:	460c      	mov	r4, r1
 8008228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800822c:	f000 f86c 	bl	8008308 <_read_r>
 8008230:	2800      	cmp	r0, #0
 8008232:	bfab      	itete	ge
 8008234:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008236:	89a3      	ldrhlt	r3, [r4, #12]
 8008238:	181b      	addge	r3, r3, r0
 800823a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800823e:	bfac      	ite	ge
 8008240:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008242:	81a3      	strhlt	r3, [r4, #12]
 8008244:	bd10      	pop	{r4, pc}

08008246 <__swrite>:
 8008246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800824a:	461f      	mov	r7, r3
 800824c:	898b      	ldrh	r3, [r1, #12]
 800824e:	05db      	lsls	r3, r3, #23
 8008250:	4605      	mov	r5, r0
 8008252:	460c      	mov	r4, r1
 8008254:	4616      	mov	r6, r2
 8008256:	d505      	bpl.n	8008264 <__swrite+0x1e>
 8008258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800825c:	2302      	movs	r3, #2
 800825e:	2200      	movs	r2, #0
 8008260:	f000 f840 	bl	80082e4 <_lseek_r>
 8008264:	89a3      	ldrh	r3, [r4, #12]
 8008266:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800826a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800826e:	81a3      	strh	r3, [r4, #12]
 8008270:	4632      	mov	r2, r6
 8008272:	463b      	mov	r3, r7
 8008274:	4628      	mov	r0, r5
 8008276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800827a:	f000 b857 	b.w	800832c <_write_r>

0800827e <__sseek>:
 800827e:	b510      	push	{r4, lr}
 8008280:	460c      	mov	r4, r1
 8008282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008286:	f000 f82d 	bl	80082e4 <_lseek_r>
 800828a:	1c43      	adds	r3, r0, #1
 800828c:	89a3      	ldrh	r3, [r4, #12]
 800828e:	bf15      	itete	ne
 8008290:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008292:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008296:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800829a:	81a3      	strheq	r3, [r4, #12]
 800829c:	bf18      	it	ne
 800829e:	81a3      	strhne	r3, [r4, #12]
 80082a0:	bd10      	pop	{r4, pc}

080082a2 <__sclose>:
 80082a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a6:	f000 b80d 	b.w	80082c4 <_close_r>

080082aa <memset>:
 80082aa:	4402      	add	r2, r0
 80082ac:	4603      	mov	r3, r0
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d100      	bne.n	80082b4 <memset+0xa>
 80082b2:	4770      	bx	lr
 80082b4:	f803 1b01 	strb.w	r1, [r3], #1
 80082b8:	e7f9      	b.n	80082ae <memset+0x4>
	...

080082bc <_localeconv_r>:
 80082bc:	4800      	ldr	r0, [pc, #0]	@ (80082c0 <_localeconv_r+0x4>)
 80082be:	4770      	bx	lr
 80082c0:	20000168 	.word	0x20000168

080082c4 <_close_r>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	4d06      	ldr	r5, [pc, #24]	@ (80082e0 <_close_r+0x1c>)
 80082c8:	2300      	movs	r3, #0
 80082ca:	4604      	mov	r4, r0
 80082cc:	4608      	mov	r0, r1
 80082ce:	602b      	str	r3, [r5, #0]
 80082d0:	f7fa f962 	bl	8002598 <_close>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d102      	bne.n	80082de <_close_r+0x1a>
 80082d8:	682b      	ldr	r3, [r5, #0]
 80082da:	b103      	cbz	r3, 80082de <_close_r+0x1a>
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	bd38      	pop	{r3, r4, r5, pc}
 80082e0:	200005ec 	.word	0x200005ec

080082e4 <_lseek_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	4d07      	ldr	r5, [pc, #28]	@ (8008304 <_lseek_r+0x20>)
 80082e8:	4604      	mov	r4, r0
 80082ea:	4608      	mov	r0, r1
 80082ec:	4611      	mov	r1, r2
 80082ee:	2200      	movs	r2, #0
 80082f0:	602a      	str	r2, [r5, #0]
 80082f2:	461a      	mov	r2, r3
 80082f4:	f7fa f977 	bl	80025e6 <_lseek>
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	d102      	bne.n	8008302 <_lseek_r+0x1e>
 80082fc:	682b      	ldr	r3, [r5, #0]
 80082fe:	b103      	cbz	r3, 8008302 <_lseek_r+0x1e>
 8008300:	6023      	str	r3, [r4, #0]
 8008302:	bd38      	pop	{r3, r4, r5, pc}
 8008304:	200005ec 	.word	0x200005ec

08008308 <_read_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4d07      	ldr	r5, [pc, #28]	@ (8008328 <_read_r+0x20>)
 800830c:	4604      	mov	r4, r0
 800830e:	4608      	mov	r0, r1
 8008310:	4611      	mov	r1, r2
 8008312:	2200      	movs	r2, #0
 8008314:	602a      	str	r2, [r5, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	f7fa f905 	bl	8002526 <_read>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d102      	bne.n	8008326 <_read_r+0x1e>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	b103      	cbz	r3, 8008326 <_read_r+0x1e>
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	200005ec 	.word	0x200005ec

0800832c <_write_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4d07      	ldr	r5, [pc, #28]	@ (800834c <_write_r+0x20>)
 8008330:	4604      	mov	r4, r0
 8008332:	4608      	mov	r0, r1
 8008334:	4611      	mov	r1, r2
 8008336:	2200      	movs	r2, #0
 8008338:	602a      	str	r2, [r5, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	f7fa f910 	bl	8002560 <_write>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d102      	bne.n	800834a <_write_r+0x1e>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	b103      	cbz	r3, 800834a <_write_r+0x1e>
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	200005ec 	.word	0x200005ec

08008350 <__errno>:
 8008350:	4b01      	ldr	r3, [pc, #4]	@ (8008358 <__errno+0x8>)
 8008352:	6818      	ldr	r0, [r3, #0]
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	20000028 	.word	0x20000028

0800835c <__libc_init_array>:
 800835c:	b570      	push	{r4, r5, r6, lr}
 800835e:	4d0d      	ldr	r5, [pc, #52]	@ (8008394 <__libc_init_array+0x38>)
 8008360:	4c0d      	ldr	r4, [pc, #52]	@ (8008398 <__libc_init_array+0x3c>)
 8008362:	1b64      	subs	r4, r4, r5
 8008364:	10a4      	asrs	r4, r4, #2
 8008366:	2600      	movs	r6, #0
 8008368:	42a6      	cmp	r6, r4
 800836a:	d109      	bne.n	8008380 <__libc_init_array+0x24>
 800836c:	4d0b      	ldr	r5, [pc, #44]	@ (800839c <__libc_init_array+0x40>)
 800836e:	4c0c      	ldr	r4, [pc, #48]	@ (80083a0 <__libc_init_array+0x44>)
 8008370:	f002 f866 	bl	800a440 <_init>
 8008374:	1b64      	subs	r4, r4, r5
 8008376:	10a4      	asrs	r4, r4, #2
 8008378:	2600      	movs	r6, #0
 800837a:	42a6      	cmp	r6, r4
 800837c:	d105      	bne.n	800838a <__libc_init_array+0x2e>
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	f855 3b04 	ldr.w	r3, [r5], #4
 8008384:	4798      	blx	r3
 8008386:	3601      	adds	r6, #1
 8008388:	e7ee      	b.n	8008368 <__libc_init_array+0xc>
 800838a:	f855 3b04 	ldr.w	r3, [r5], #4
 800838e:	4798      	blx	r3
 8008390:	3601      	adds	r6, #1
 8008392:	e7f2      	b.n	800837a <__libc_init_array+0x1e>
 8008394:	0800b098 	.word	0x0800b098
 8008398:	0800b098 	.word	0x0800b098
 800839c:	0800b098 	.word	0x0800b098
 80083a0:	0800b09c 	.word	0x0800b09c

080083a4 <__retarget_lock_init_recursive>:
 80083a4:	4770      	bx	lr

080083a6 <__retarget_lock_acquire_recursive>:
 80083a6:	4770      	bx	lr

080083a8 <__retarget_lock_release_recursive>:
 80083a8:	4770      	bx	lr

080083aa <quorem>:
 80083aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ae:	6903      	ldr	r3, [r0, #16]
 80083b0:	690c      	ldr	r4, [r1, #16]
 80083b2:	42a3      	cmp	r3, r4
 80083b4:	4607      	mov	r7, r0
 80083b6:	db7e      	blt.n	80084b6 <quorem+0x10c>
 80083b8:	3c01      	subs	r4, #1
 80083ba:	f101 0814 	add.w	r8, r1, #20
 80083be:	00a3      	lsls	r3, r4, #2
 80083c0:	f100 0514 	add.w	r5, r0, #20
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083ca:	9301      	str	r3, [sp, #4]
 80083cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80083d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083d4:	3301      	adds	r3, #1
 80083d6:	429a      	cmp	r2, r3
 80083d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80083dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80083e0:	d32e      	bcc.n	8008440 <quorem+0x96>
 80083e2:	f04f 0a00 	mov.w	sl, #0
 80083e6:	46c4      	mov	ip, r8
 80083e8:	46ae      	mov	lr, r5
 80083ea:	46d3      	mov	fp, sl
 80083ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80083f0:	b298      	uxth	r0, r3
 80083f2:	fb06 a000 	mla	r0, r6, r0, sl
 80083f6:	0c02      	lsrs	r2, r0, #16
 80083f8:	0c1b      	lsrs	r3, r3, #16
 80083fa:	fb06 2303 	mla	r3, r6, r3, r2
 80083fe:	f8de 2000 	ldr.w	r2, [lr]
 8008402:	b280      	uxth	r0, r0
 8008404:	b292      	uxth	r2, r2
 8008406:	1a12      	subs	r2, r2, r0
 8008408:	445a      	add	r2, fp
 800840a:	f8de 0000 	ldr.w	r0, [lr]
 800840e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008412:	b29b      	uxth	r3, r3
 8008414:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008418:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800841c:	b292      	uxth	r2, r2
 800841e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008422:	45e1      	cmp	r9, ip
 8008424:	f84e 2b04 	str.w	r2, [lr], #4
 8008428:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800842c:	d2de      	bcs.n	80083ec <quorem+0x42>
 800842e:	9b00      	ldr	r3, [sp, #0]
 8008430:	58eb      	ldr	r3, [r5, r3]
 8008432:	b92b      	cbnz	r3, 8008440 <quorem+0x96>
 8008434:	9b01      	ldr	r3, [sp, #4]
 8008436:	3b04      	subs	r3, #4
 8008438:	429d      	cmp	r5, r3
 800843a:	461a      	mov	r2, r3
 800843c:	d32f      	bcc.n	800849e <quorem+0xf4>
 800843e:	613c      	str	r4, [r7, #16]
 8008440:	4638      	mov	r0, r7
 8008442:	f001 f97b 	bl	800973c <__mcmp>
 8008446:	2800      	cmp	r0, #0
 8008448:	db25      	blt.n	8008496 <quorem+0xec>
 800844a:	4629      	mov	r1, r5
 800844c:	2000      	movs	r0, #0
 800844e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008452:	f8d1 c000 	ldr.w	ip, [r1]
 8008456:	fa1f fe82 	uxth.w	lr, r2
 800845a:	fa1f f38c 	uxth.w	r3, ip
 800845e:	eba3 030e 	sub.w	r3, r3, lr
 8008462:	4403      	add	r3, r0
 8008464:	0c12      	lsrs	r2, r2, #16
 8008466:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800846a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800846e:	b29b      	uxth	r3, r3
 8008470:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008474:	45c1      	cmp	r9, r8
 8008476:	f841 3b04 	str.w	r3, [r1], #4
 800847a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800847e:	d2e6      	bcs.n	800844e <quorem+0xa4>
 8008480:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008484:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008488:	b922      	cbnz	r2, 8008494 <quorem+0xea>
 800848a:	3b04      	subs	r3, #4
 800848c:	429d      	cmp	r5, r3
 800848e:	461a      	mov	r2, r3
 8008490:	d30b      	bcc.n	80084aa <quorem+0x100>
 8008492:	613c      	str	r4, [r7, #16]
 8008494:	3601      	adds	r6, #1
 8008496:	4630      	mov	r0, r6
 8008498:	b003      	add	sp, #12
 800849a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800849e:	6812      	ldr	r2, [r2, #0]
 80084a0:	3b04      	subs	r3, #4
 80084a2:	2a00      	cmp	r2, #0
 80084a4:	d1cb      	bne.n	800843e <quorem+0x94>
 80084a6:	3c01      	subs	r4, #1
 80084a8:	e7c6      	b.n	8008438 <quorem+0x8e>
 80084aa:	6812      	ldr	r2, [r2, #0]
 80084ac:	3b04      	subs	r3, #4
 80084ae:	2a00      	cmp	r2, #0
 80084b0:	d1ef      	bne.n	8008492 <quorem+0xe8>
 80084b2:	3c01      	subs	r4, #1
 80084b4:	e7ea      	b.n	800848c <quorem+0xe2>
 80084b6:	2000      	movs	r0, #0
 80084b8:	e7ee      	b.n	8008498 <quorem+0xee>
 80084ba:	0000      	movs	r0, r0
 80084bc:	0000      	movs	r0, r0
	...

080084c0 <_dtoa_r>:
 80084c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c4:	69c7      	ldr	r7, [r0, #28]
 80084c6:	b099      	sub	sp, #100	@ 0x64
 80084c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80084cc:	ec55 4b10 	vmov	r4, r5, d0
 80084d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80084d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80084d4:	4683      	mov	fp, r0
 80084d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80084d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80084da:	b97f      	cbnz	r7, 80084fc <_dtoa_r+0x3c>
 80084dc:	2010      	movs	r0, #16
 80084de:	f000 fdfd 	bl	80090dc <malloc>
 80084e2:	4602      	mov	r2, r0
 80084e4:	f8cb 001c 	str.w	r0, [fp, #28]
 80084e8:	b920      	cbnz	r0, 80084f4 <_dtoa_r+0x34>
 80084ea:	4ba7      	ldr	r3, [pc, #668]	@ (8008788 <_dtoa_r+0x2c8>)
 80084ec:	21ef      	movs	r1, #239	@ 0xef
 80084ee:	48a7      	ldr	r0, [pc, #668]	@ (800878c <_dtoa_r+0x2cc>)
 80084f0:	f001 fc68 	bl	8009dc4 <__assert_func>
 80084f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80084f8:	6007      	str	r7, [r0, #0]
 80084fa:	60c7      	str	r7, [r0, #12]
 80084fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008500:	6819      	ldr	r1, [r3, #0]
 8008502:	b159      	cbz	r1, 800851c <_dtoa_r+0x5c>
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	604a      	str	r2, [r1, #4]
 8008508:	2301      	movs	r3, #1
 800850a:	4093      	lsls	r3, r2
 800850c:	608b      	str	r3, [r1, #8]
 800850e:	4658      	mov	r0, fp
 8008510:	f000 feda 	bl	80092c8 <_Bfree>
 8008514:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008518:	2200      	movs	r2, #0
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	1e2b      	subs	r3, r5, #0
 800851e:	bfb9      	ittee	lt
 8008520:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008524:	9303      	strlt	r3, [sp, #12]
 8008526:	2300      	movge	r3, #0
 8008528:	6033      	strge	r3, [r6, #0]
 800852a:	9f03      	ldr	r7, [sp, #12]
 800852c:	4b98      	ldr	r3, [pc, #608]	@ (8008790 <_dtoa_r+0x2d0>)
 800852e:	bfbc      	itt	lt
 8008530:	2201      	movlt	r2, #1
 8008532:	6032      	strlt	r2, [r6, #0]
 8008534:	43bb      	bics	r3, r7
 8008536:	d112      	bne.n	800855e <_dtoa_r+0x9e>
 8008538:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800853a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008544:	4323      	orrs	r3, r4
 8008546:	f000 854d 	beq.w	8008fe4 <_dtoa_r+0xb24>
 800854a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800854c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80087a4 <_dtoa_r+0x2e4>
 8008550:	2b00      	cmp	r3, #0
 8008552:	f000 854f 	beq.w	8008ff4 <_dtoa_r+0xb34>
 8008556:	f10a 0303 	add.w	r3, sl, #3
 800855a:	f000 bd49 	b.w	8008ff0 <_dtoa_r+0xb30>
 800855e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008562:	2200      	movs	r2, #0
 8008564:	ec51 0b17 	vmov	r0, r1, d7
 8008568:	2300      	movs	r3, #0
 800856a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800856e:	f7f8 fad3 	bl	8000b18 <__aeabi_dcmpeq>
 8008572:	4680      	mov	r8, r0
 8008574:	b158      	cbz	r0, 800858e <_dtoa_r+0xce>
 8008576:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008578:	2301      	movs	r3, #1
 800857a:	6013      	str	r3, [r2, #0]
 800857c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800857e:	b113      	cbz	r3, 8008586 <_dtoa_r+0xc6>
 8008580:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008582:	4b84      	ldr	r3, [pc, #528]	@ (8008794 <_dtoa_r+0x2d4>)
 8008584:	6013      	str	r3, [r2, #0]
 8008586:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80087a8 <_dtoa_r+0x2e8>
 800858a:	f000 bd33 	b.w	8008ff4 <_dtoa_r+0xb34>
 800858e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008592:	aa16      	add	r2, sp, #88	@ 0x58
 8008594:	a917      	add	r1, sp, #92	@ 0x5c
 8008596:	4658      	mov	r0, fp
 8008598:	f001 f980 	bl	800989c <__d2b>
 800859c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80085a0:	4681      	mov	r9, r0
 80085a2:	2e00      	cmp	r6, #0
 80085a4:	d077      	beq.n	8008696 <_dtoa_r+0x1d6>
 80085a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80085ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80085b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80085bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80085c0:	4619      	mov	r1, r3
 80085c2:	2200      	movs	r2, #0
 80085c4:	4b74      	ldr	r3, [pc, #464]	@ (8008798 <_dtoa_r+0x2d8>)
 80085c6:	f7f7 fe87 	bl	80002d8 <__aeabi_dsub>
 80085ca:	a369      	add	r3, pc, #420	@ (adr r3, 8008770 <_dtoa_r+0x2b0>)
 80085cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d0:	f7f8 f83a 	bl	8000648 <__aeabi_dmul>
 80085d4:	a368      	add	r3, pc, #416	@ (adr r3, 8008778 <_dtoa_r+0x2b8>)
 80085d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085da:	f7f7 fe7f 	bl	80002dc <__adddf3>
 80085de:	4604      	mov	r4, r0
 80085e0:	4630      	mov	r0, r6
 80085e2:	460d      	mov	r5, r1
 80085e4:	f7f7 ffc6 	bl	8000574 <__aeabi_i2d>
 80085e8:	a365      	add	r3, pc, #404	@ (adr r3, 8008780 <_dtoa_r+0x2c0>)
 80085ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ee:	f7f8 f82b 	bl	8000648 <__aeabi_dmul>
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	4620      	mov	r0, r4
 80085f8:	4629      	mov	r1, r5
 80085fa:	f7f7 fe6f 	bl	80002dc <__adddf3>
 80085fe:	4604      	mov	r4, r0
 8008600:	460d      	mov	r5, r1
 8008602:	f7f8 fad1 	bl	8000ba8 <__aeabi_d2iz>
 8008606:	2200      	movs	r2, #0
 8008608:	4607      	mov	r7, r0
 800860a:	2300      	movs	r3, #0
 800860c:	4620      	mov	r0, r4
 800860e:	4629      	mov	r1, r5
 8008610:	f7f8 fa8c 	bl	8000b2c <__aeabi_dcmplt>
 8008614:	b140      	cbz	r0, 8008628 <_dtoa_r+0x168>
 8008616:	4638      	mov	r0, r7
 8008618:	f7f7 ffac 	bl	8000574 <__aeabi_i2d>
 800861c:	4622      	mov	r2, r4
 800861e:	462b      	mov	r3, r5
 8008620:	f7f8 fa7a 	bl	8000b18 <__aeabi_dcmpeq>
 8008624:	b900      	cbnz	r0, 8008628 <_dtoa_r+0x168>
 8008626:	3f01      	subs	r7, #1
 8008628:	2f16      	cmp	r7, #22
 800862a:	d851      	bhi.n	80086d0 <_dtoa_r+0x210>
 800862c:	4b5b      	ldr	r3, [pc, #364]	@ (800879c <_dtoa_r+0x2dc>)
 800862e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008636:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800863a:	f7f8 fa77 	bl	8000b2c <__aeabi_dcmplt>
 800863e:	2800      	cmp	r0, #0
 8008640:	d048      	beq.n	80086d4 <_dtoa_r+0x214>
 8008642:	3f01      	subs	r7, #1
 8008644:	2300      	movs	r3, #0
 8008646:	9312      	str	r3, [sp, #72]	@ 0x48
 8008648:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800864a:	1b9b      	subs	r3, r3, r6
 800864c:	1e5a      	subs	r2, r3, #1
 800864e:	bf44      	itt	mi
 8008650:	f1c3 0801 	rsbmi	r8, r3, #1
 8008654:	2300      	movmi	r3, #0
 8008656:	9208      	str	r2, [sp, #32]
 8008658:	bf54      	ite	pl
 800865a:	f04f 0800 	movpl.w	r8, #0
 800865e:	9308      	strmi	r3, [sp, #32]
 8008660:	2f00      	cmp	r7, #0
 8008662:	db39      	blt.n	80086d8 <_dtoa_r+0x218>
 8008664:	9b08      	ldr	r3, [sp, #32]
 8008666:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008668:	443b      	add	r3, r7
 800866a:	9308      	str	r3, [sp, #32]
 800866c:	2300      	movs	r3, #0
 800866e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008672:	2b09      	cmp	r3, #9
 8008674:	d864      	bhi.n	8008740 <_dtoa_r+0x280>
 8008676:	2b05      	cmp	r3, #5
 8008678:	bfc4      	itt	gt
 800867a:	3b04      	subgt	r3, #4
 800867c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800867e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008680:	f1a3 0302 	sub.w	r3, r3, #2
 8008684:	bfcc      	ite	gt
 8008686:	2400      	movgt	r4, #0
 8008688:	2401      	movle	r4, #1
 800868a:	2b03      	cmp	r3, #3
 800868c:	d863      	bhi.n	8008756 <_dtoa_r+0x296>
 800868e:	e8df f003 	tbb	[pc, r3]
 8008692:	372a      	.short	0x372a
 8008694:	5535      	.short	0x5535
 8008696:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800869a:	441e      	add	r6, r3
 800869c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80086a0:	2b20      	cmp	r3, #32
 80086a2:	bfc1      	itttt	gt
 80086a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80086a8:	409f      	lslgt	r7, r3
 80086aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80086ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 80086b2:	bfd6      	itet	le
 80086b4:	f1c3 0320 	rsble	r3, r3, #32
 80086b8:	ea47 0003 	orrgt.w	r0, r7, r3
 80086bc:	fa04 f003 	lslle.w	r0, r4, r3
 80086c0:	f7f7 ff48 	bl	8000554 <__aeabi_ui2d>
 80086c4:	2201      	movs	r2, #1
 80086c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80086ca:	3e01      	subs	r6, #1
 80086cc:	9214      	str	r2, [sp, #80]	@ 0x50
 80086ce:	e777      	b.n	80085c0 <_dtoa_r+0x100>
 80086d0:	2301      	movs	r3, #1
 80086d2:	e7b8      	b.n	8008646 <_dtoa_r+0x186>
 80086d4:	9012      	str	r0, [sp, #72]	@ 0x48
 80086d6:	e7b7      	b.n	8008648 <_dtoa_r+0x188>
 80086d8:	427b      	negs	r3, r7
 80086da:	930a      	str	r3, [sp, #40]	@ 0x28
 80086dc:	2300      	movs	r3, #0
 80086de:	eba8 0807 	sub.w	r8, r8, r7
 80086e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80086e4:	e7c4      	b.n	8008670 <_dtoa_r+0x1b0>
 80086e6:	2300      	movs	r3, #0
 80086e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	dc35      	bgt.n	800875c <_dtoa_r+0x29c>
 80086f0:	2301      	movs	r3, #1
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	9307      	str	r3, [sp, #28]
 80086f6:	461a      	mov	r2, r3
 80086f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80086fa:	e00b      	b.n	8008714 <_dtoa_r+0x254>
 80086fc:	2301      	movs	r3, #1
 80086fe:	e7f3      	b.n	80086e8 <_dtoa_r+0x228>
 8008700:	2300      	movs	r3, #0
 8008702:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008704:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008706:	18fb      	adds	r3, r7, r3
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	3301      	adds	r3, #1
 800870c:	2b01      	cmp	r3, #1
 800870e:	9307      	str	r3, [sp, #28]
 8008710:	bfb8      	it	lt
 8008712:	2301      	movlt	r3, #1
 8008714:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008718:	2100      	movs	r1, #0
 800871a:	2204      	movs	r2, #4
 800871c:	f102 0514 	add.w	r5, r2, #20
 8008720:	429d      	cmp	r5, r3
 8008722:	d91f      	bls.n	8008764 <_dtoa_r+0x2a4>
 8008724:	6041      	str	r1, [r0, #4]
 8008726:	4658      	mov	r0, fp
 8008728:	f000 fd8e 	bl	8009248 <_Balloc>
 800872c:	4682      	mov	sl, r0
 800872e:	2800      	cmp	r0, #0
 8008730:	d13c      	bne.n	80087ac <_dtoa_r+0x2ec>
 8008732:	4b1b      	ldr	r3, [pc, #108]	@ (80087a0 <_dtoa_r+0x2e0>)
 8008734:	4602      	mov	r2, r0
 8008736:	f240 11af 	movw	r1, #431	@ 0x1af
 800873a:	e6d8      	b.n	80084ee <_dtoa_r+0x2e>
 800873c:	2301      	movs	r3, #1
 800873e:	e7e0      	b.n	8008702 <_dtoa_r+0x242>
 8008740:	2401      	movs	r4, #1
 8008742:	2300      	movs	r3, #0
 8008744:	9309      	str	r3, [sp, #36]	@ 0x24
 8008746:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008748:	f04f 33ff 	mov.w	r3, #4294967295
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	9307      	str	r3, [sp, #28]
 8008750:	2200      	movs	r2, #0
 8008752:	2312      	movs	r3, #18
 8008754:	e7d0      	b.n	80086f8 <_dtoa_r+0x238>
 8008756:	2301      	movs	r3, #1
 8008758:	930b      	str	r3, [sp, #44]	@ 0x2c
 800875a:	e7f5      	b.n	8008748 <_dtoa_r+0x288>
 800875c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	9307      	str	r3, [sp, #28]
 8008762:	e7d7      	b.n	8008714 <_dtoa_r+0x254>
 8008764:	3101      	adds	r1, #1
 8008766:	0052      	lsls	r2, r2, #1
 8008768:	e7d8      	b.n	800871c <_dtoa_r+0x25c>
 800876a:	bf00      	nop
 800876c:	f3af 8000 	nop.w
 8008770:	636f4361 	.word	0x636f4361
 8008774:	3fd287a7 	.word	0x3fd287a7
 8008778:	8b60c8b3 	.word	0x8b60c8b3
 800877c:	3fc68a28 	.word	0x3fc68a28
 8008780:	509f79fb 	.word	0x509f79fb
 8008784:	3fd34413 	.word	0x3fd34413
 8008788:	0800ad5d 	.word	0x0800ad5d
 800878c:	0800ad74 	.word	0x0800ad74
 8008790:	7ff00000 	.word	0x7ff00000
 8008794:	0800ad2d 	.word	0x0800ad2d
 8008798:	3ff80000 	.word	0x3ff80000
 800879c:	0800ae70 	.word	0x0800ae70
 80087a0:	0800adcc 	.word	0x0800adcc
 80087a4:	0800ad59 	.word	0x0800ad59
 80087a8:	0800ad2c 	.word	0x0800ad2c
 80087ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80087b0:	6018      	str	r0, [r3, #0]
 80087b2:	9b07      	ldr	r3, [sp, #28]
 80087b4:	2b0e      	cmp	r3, #14
 80087b6:	f200 80a4 	bhi.w	8008902 <_dtoa_r+0x442>
 80087ba:	2c00      	cmp	r4, #0
 80087bc:	f000 80a1 	beq.w	8008902 <_dtoa_r+0x442>
 80087c0:	2f00      	cmp	r7, #0
 80087c2:	dd33      	ble.n	800882c <_dtoa_r+0x36c>
 80087c4:	4bad      	ldr	r3, [pc, #692]	@ (8008a7c <_dtoa_r+0x5bc>)
 80087c6:	f007 020f 	and.w	r2, r7, #15
 80087ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087ce:	ed93 7b00 	vldr	d7, [r3]
 80087d2:	05f8      	lsls	r0, r7, #23
 80087d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80087d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80087dc:	d516      	bpl.n	800880c <_dtoa_r+0x34c>
 80087de:	4ba8      	ldr	r3, [pc, #672]	@ (8008a80 <_dtoa_r+0x5c0>)
 80087e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087e8:	f7f8 f858 	bl	800089c <__aeabi_ddiv>
 80087ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087f0:	f004 040f 	and.w	r4, r4, #15
 80087f4:	2603      	movs	r6, #3
 80087f6:	4da2      	ldr	r5, [pc, #648]	@ (8008a80 <_dtoa_r+0x5c0>)
 80087f8:	b954      	cbnz	r4, 8008810 <_dtoa_r+0x350>
 80087fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008802:	f7f8 f84b 	bl	800089c <__aeabi_ddiv>
 8008806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800880a:	e028      	b.n	800885e <_dtoa_r+0x39e>
 800880c:	2602      	movs	r6, #2
 800880e:	e7f2      	b.n	80087f6 <_dtoa_r+0x336>
 8008810:	07e1      	lsls	r1, r4, #31
 8008812:	d508      	bpl.n	8008826 <_dtoa_r+0x366>
 8008814:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008818:	e9d5 2300 	ldrd	r2, r3, [r5]
 800881c:	f7f7 ff14 	bl	8000648 <__aeabi_dmul>
 8008820:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008824:	3601      	adds	r6, #1
 8008826:	1064      	asrs	r4, r4, #1
 8008828:	3508      	adds	r5, #8
 800882a:	e7e5      	b.n	80087f8 <_dtoa_r+0x338>
 800882c:	f000 80d2 	beq.w	80089d4 <_dtoa_r+0x514>
 8008830:	427c      	negs	r4, r7
 8008832:	4b92      	ldr	r3, [pc, #584]	@ (8008a7c <_dtoa_r+0x5bc>)
 8008834:	4d92      	ldr	r5, [pc, #584]	@ (8008a80 <_dtoa_r+0x5c0>)
 8008836:	f004 020f 	and.w	r2, r4, #15
 800883a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800883e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008842:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008846:	f7f7 feff 	bl	8000648 <__aeabi_dmul>
 800884a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800884e:	1124      	asrs	r4, r4, #4
 8008850:	2300      	movs	r3, #0
 8008852:	2602      	movs	r6, #2
 8008854:	2c00      	cmp	r4, #0
 8008856:	f040 80b2 	bne.w	80089be <_dtoa_r+0x4fe>
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1d3      	bne.n	8008806 <_dtoa_r+0x346>
 800885e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008860:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	f000 80b7 	beq.w	80089d8 <_dtoa_r+0x518>
 800886a:	4b86      	ldr	r3, [pc, #536]	@ (8008a84 <_dtoa_r+0x5c4>)
 800886c:	2200      	movs	r2, #0
 800886e:	4620      	mov	r0, r4
 8008870:	4629      	mov	r1, r5
 8008872:	f7f8 f95b 	bl	8000b2c <__aeabi_dcmplt>
 8008876:	2800      	cmp	r0, #0
 8008878:	f000 80ae 	beq.w	80089d8 <_dtoa_r+0x518>
 800887c:	9b07      	ldr	r3, [sp, #28]
 800887e:	2b00      	cmp	r3, #0
 8008880:	f000 80aa 	beq.w	80089d8 <_dtoa_r+0x518>
 8008884:	9b00      	ldr	r3, [sp, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	dd37      	ble.n	80088fa <_dtoa_r+0x43a>
 800888a:	1e7b      	subs	r3, r7, #1
 800888c:	9304      	str	r3, [sp, #16]
 800888e:	4620      	mov	r0, r4
 8008890:	4b7d      	ldr	r3, [pc, #500]	@ (8008a88 <_dtoa_r+0x5c8>)
 8008892:	2200      	movs	r2, #0
 8008894:	4629      	mov	r1, r5
 8008896:	f7f7 fed7 	bl	8000648 <__aeabi_dmul>
 800889a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800889e:	9c00      	ldr	r4, [sp, #0]
 80088a0:	3601      	adds	r6, #1
 80088a2:	4630      	mov	r0, r6
 80088a4:	f7f7 fe66 	bl	8000574 <__aeabi_i2d>
 80088a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088ac:	f7f7 fecc 	bl	8000648 <__aeabi_dmul>
 80088b0:	4b76      	ldr	r3, [pc, #472]	@ (8008a8c <_dtoa_r+0x5cc>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	f7f7 fd12 	bl	80002dc <__adddf3>
 80088b8:	4605      	mov	r5, r0
 80088ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80088be:	2c00      	cmp	r4, #0
 80088c0:	f040 808d 	bne.w	80089de <_dtoa_r+0x51e>
 80088c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088c8:	4b71      	ldr	r3, [pc, #452]	@ (8008a90 <_dtoa_r+0x5d0>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	f7f7 fd04 	bl	80002d8 <__aeabi_dsub>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088d8:	462a      	mov	r2, r5
 80088da:	4633      	mov	r3, r6
 80088dc:	f7f8 f944 	bl	8000b68 <__aeabi_dcmpgt>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	f040 828b 	bne.w	8008dfc <_dtoa_r+0x93c>
 80088e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088ea:	462a      	mov	r2, r5
 80088ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80088f0:	f7f8 f91c 	bl	8000b2c <__aeabi_dcmplt>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	f040 8128 	bne.w	8008b4a <_dtoa_r+0x68a>
 80088fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80088fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008902:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008904:	2b00      	cmp	r3, #0
 8008906:	f2c0 815a 	blt.w	8008bbe <_dtoa_r+0x6fe>
 800890a:	2f0e      	cmp	r7, #14
 800890c:	f300 8157 	bgt.w	8008bbe <_dtoa_r+0x6fe>
 8008910:	4b5a      	ldr	r3, [pc, #360]	@ (8008a7c <_dtoa_r+0x5bc>)
 8008912:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008916:	ed93 7b00 	vldr	d7, [r3]
 800891a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800891c:	2b00      	cmp	r3, #0
 800891e:	ed8d 7b00 	vstr	d7, [sp]
 8008922:	da03      	bge.n	800892c <_dtoa_r+0x46c>
 8008924:	9b07      	ldr	r3, [sp, #28]
 8008926:	2b00      	cmp	r3, #0
 8008928:	f340 8101 	ble.w	8008b2e <_dtoa_r+0x66e>
 800892c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008930:	4656      	mov	r6, sl
 8008932:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008936:	4620      	mov	r0, r4
 8008938:	4629      	mov	r1, r5
 800893a:	f7f7 ffaf 	bl	800089c <__aeabi_ddiv>
 800893e:	f7f8 f933 	bl	8000ba8 <__aeabi_d2iz>
 8008942:	4680      	mov	r8, r0
 8008944:	f7f7 fe16 	bl	8000574 <__aeabi_i2d>
 8008948:	e9dd 2300 	ldrd	r2, r3, [sp]
 800894c:	f7f7 fe7c 	bl	8000648 <__aeabi_dmul>
 8008950:	4602      	mov	r2, r0
 8008952:	460b      	mov	r3, r1
 8008954:	4620      	mov	r0, r4
 8008956:	4629      	mov	r1, r5
 8008958:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800895c:	f7f7 fcbc 	bl	80002d8 <__aeabi_dsub>
 8008960:	f806 4b01 	strb.w	r4, [r6], #1
 8008964:	9d07      	ldr	r5, [sp, #28]
 8008966:	eba6 040a 	sub.w	r4, r6, sl
 800896a:	42a5      	cmp	r5, r4
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	f040 8117 	bne.w	8008ba2 <_dtoa_r+0x6e2>
 8008974:	f7f7 fcb2 	bl	80002dc <__adddf3>
 8008978:	e9dd 2300 	ldrd	r2, r3, [sp]
 800897c:	4604      	mov	r4, r0
 800897e:	460d      	mov	r5, r1
 8008980:	f7f8 f8f2 	bl	8000b68 <__aeabi_dcmpgt>
 8008984:	2800      	cmp	r0, #0
 8008986:	f040 80f9 	bne.w	8008b7c <_dtoa_r+0x6bc>
 800898a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800898e:	4620      	mov	r0, r4
 8008990:	4629      	mov	r1, r5
 8008992:	f7f8 f8c1 	bl	8000b18 <__aeabi_dcmpeq>
 8008996:	b118      	cbz	r0, 80089a0 <_dtoa_r+0x4e0>
 8008998:	f018 0f01 	tst.w	r8, #1
 800899c:	f040 80ee 	bne.w	8008b7c <_dtoa_r+0x6bc>
 80089a0:	4649      	mov	r1, r9
 80089a2:	4658      	mov	r0, fp
 80089a4:	f000 fc90 	bl	80092c8 <_Bfree>
 80089a8:	2300      	movs	r3, #0
 80089aa:	7033      	strb	r3, [r6, #0]
 80089ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80089ae:	3701      	adds	r7, #1
 80089b0:	601f      	str	r7, [r3, #0]
 80089b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f000 831d 	beq.w	8008ff4 <_dtoa_r+0xb34>
 80089ba:	601e      	str	r6, [r3, #0]
 80089bc:	e31a      	b.n	8008ff4 <_dtoa_r+0xb34>
 80089be:	07e2      	lsls	r2, r4, #31
 80089c0:	d505      	bpl.n	80089ce <_dtoa_r+0x50e>
 80089c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089c6:	f7f7 fe3f 	bl	8000648 <__aeabi_dmul>
 80089ca:	3601      	adds	r6, #1
 80089cc:	2301      	movs	r3, #1
 80089ce:	1064      	asrs	r4, r4, #1
 80089d0:	3508      	adds	r5, #8
 80089d2:	e73f      	b.n	8008854 <_dtoa_r+0x394>
 80089d4:	2602      	movs	r6, #2
 80089d6:	e742      	b.n	800885e <_dtoa_r+0x39e>
 80089d8:	9c07      	ldr	r4, [sp, #28]
 80089da:	9704      	str	r7, [sp, #16]
 80089dc:	e761      	b.n	80088a2 <_dtoa_r+0x3e2>
 80089de:	4b27      	ldr	r3, [pc, #156]	@ (8008a7c <_dtoa_r+0x5bc>)
 80089e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80089e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80089e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80089ea:	4454      	add	r4, sl
 80089ec:	2900      	cmp	r1, #0
 80089ee:	d053      	beq.n	8008a98 <_dtoa_r+0x5d8>
 80089f0:	4928      	ldr	r1, [pc, #160]	@ (8008a94 <_dtoa_r+0x5d4>)
 80089f2:	2000      	movs	r0, #0
 80089f4:	f7f7 ff52 	bl	800089c <__aeabi_ddiv>
 80089f8:	4633      	mov	r3, r6
 80089fa:	462a      	mov	r2, r5
 80089fc:	f7f7 fc6c 	bl	80002d8 <__aeabi_dsub>
 8008a00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a04:	4656      	mov	r6, sl
 8008a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a0a:	f7f8 f8cd 	bl	8000ba8 <__aeabi_d2iz>
 8008a0e:	4605      	mov	r5, r0
 8008a10:	f7f7 fdb0 	bl	8000574 <__aeabi_i2d>
 8008a14:	4602      	mov	r2, r0
 8008a16:	460b      	mov	r3, r1
 8008a18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a1c:	f7f7 fc5c 	bl	80002d8 <__aeabi_dsub>
 8008a20:	3530      	adds	r5, #48	@ 0x30
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
 8008a26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a2a:	f806 5b01 	strb.w	r5, [r6], #1
 8008a2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a32:	f7f8 f87b 	bl	8000b2c <__aeabi_dcmplt>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d171      	bne.n	8008b1e <_dtoa_r+0x65e>
 8008a3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a3e:	4911      	ldr	r1, [pc, #68]	@ (8008a84 <_dtoa_r+0x5c4>)
 8008a40:	2000      	movs	r0, #0
 8008a42:	f7f7 fc49 	bl	80002d8 <__aeabi_dsub>
 8008a46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a4a:	f7f8 f86f 	bl	8000b2c <__aeabi_dcmplt>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	f040 8095 	bne.w	8008b7e <_dtoa_r+0x6be>
 8008a54:	42a6      	cmp	r6, r4
 8008a56:	f43f af50 	beq.w	80088fa <_dtoa_r+0x43a>
 8008a5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8008a88 <_dtoa_r+0x5c8>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	f7f7 fdf1 	bl	8000648 <__aeabi_dmul>
 8008a66:	4b08      	ldr	r3, [pc, #32]	@ (8008a88 <_dtoa_r+0x5c8>)
 8008a68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a72:	f7f7 fde9 	bl	8000648 <__aeabi_dmul>
 8008a76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a7a:	e7c4      	b.n	8008a06 <_dtoa_r+0x546>
 8008a7c:	0800ae70 	.word	0x0800ae70
 8008a80:	0800ae48 	.word	0x0800ae48
 8008a84:	3ff00000 	.word	0x3ff00000
 8008a88:	40240000 	.word	0x40240000
 8008a8c:	401c0000 	.word	0x401c0000
 8008a90:	40140000 	.word	0x40140000
 8008a94:	3fe00000 	.word	0x3fe00000
 8008a98:	4631      	mov	r1, r6
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	f7f7 fdd4 	bl	8000648 <__aeabi_dmul>
 8008aa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008aa4:	9415      	str	r4, [sp, #84]	@ 0x54
 8008aa6:	4656      	mov	r6, sl
 8008aa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aac:	f7f8 f87c 	bl	8000ba8 <__aeabi_d2iz>
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	f7f7 fd5f 	bl	8000574 <__aeabi_i2d>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008abe:	f7f7 fc0b 	bl	80002d8 <__aeabi_dsub>
 8008ac2:	3530      	adds	r5, #48	@ 0x30
 8008ac4:	f806 5b01 	strb.w	r5, [r6], #1
 8008ac8:	4602      	mov	r2, r0
 8008aca:	460b      	mov	r3, r1
 8008acc:	42a6      	cmp	r6, r4
 8008ace:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ad2:	f04f 0200 	mov.w	r2, #0
 8008ad6:	d124      	bne.n	8008b22 <_dtoa_r+0x662>
 8008ad8:	4bac      	ldr	r3, [pc, #688]	@ (8008d8c <_dtoa_r+0x8cc>)
 8008ada:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008ade:	f7f7 fbfd 	bl	80002dc <__adddf3>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aea:	f7f8 f83d 	bl	8000b68 <__aeabi_dcmpgt>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d145      	bne.n	8008b7e <_dtoa_r+0x6be>
 8008af2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008af6:	49a5      	ldr	r1, [pc, #660]	@ (8008d8c <_dtoa_r+0x8cc>)
 8008af8:	2000      	movs	r0, #0
 8008afa:	f7f7 fbed 	bl	80002d8 <__aeabi_dsub>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b06:	f7f8 f811 	bl	8000b2c <__aeabi_dcmplt>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	f43f aef5 	beq.w	80088fa <_dtoa_r+0x43a>
 8008b10:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008b12:	1e73      	subs	r3, r6, #1
 8008b14:	9315      	str	r3, [sp, #84]	@ 0x54
 8008b16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b1a:	2b30      	cmp	r3, #48	@ 0x30
 8008b1c:	d0f8      	beq.n	8008b10 <_dtoa_r+0x650>
 8008b1e:	9f04      	ldr	r7, [sp, #16]
 8008b20:	e73e      	b.n	80089a0 <_dtoa_r+0x4e0>
 8008b22:	4b9b      	ldr	r3, [pc, #620]	@ (8008d90 <_dtoa_r+0x8d0>)
 8008b24:	f7f7 fd90 	bl	8000648 <__aeabi_dmul>
 8008b28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b2c:	e7bc      	b.n	8008aa8 <_dtoa_r+0x5e8>
 8008b2e:	d10c      	bne.n	8008b4a <_dtoa_r+0x68a>
 8008b30:	4b98      	ldr	r3, [pc, #608]	@ (8008d94 <_dtoa_r+0x8d4>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b38:	f7f7 fd86 	bl	8000648 <__aeabi_dmul>
 8008b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b40:	f7f8 f808 	bl	8000b54 <__aeabi_dcmpge>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	f000 8157 	beq.w	8008df8 <_dtoa_r+0x938>
 8008b4a:	2400      	movs	r4, #0
 8008b4c:	4625      	mov	r5, r4
 8008b4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b50:	43db      	mvns	r3, r3
 8008b52:	9304      	str	r3, [sp, #16]
 8008b54:	4656      	mov	r6, sl
 8008b56:	2700      	movs	r7, #0
 8008b58:	4621      	mov	r1, r4
 8008b5a:	4658      	mov	r0, fp
 8008b5c:	f000 fbb4 	bl	80092c8 <_Bfree>
 8008b60:	2d00      	cmp	r5, #0
 8008b62:	d0dc      	beq.n	8008b1e <_dtoa_r+0x65e>
 8008b64:	b12f      	cbz	r7, 8008b72 <_dtoa_r+0x6b2>
 8008b66:	42af      	cmp	r7, r5
 8008b68:	d003      	beq.n	8008b72 <_dtoa_r+0x6b2>
 8008b6a:	4639      	mov	r1, r7
 8008b6c:	4658      	mov	r0, fp
 8008b6e:	f000 fbab 	bl	80092c8 <_Bfree>
 8008b72:	4629      	mov	r1, r5
 8008b74:	4658      	mov	r0, fp
 8008b76:	f000 fba7 	bl	80092c8 <_Bfree>
 8008b7a:	e7d0      	b.n	8008b1e <_dtoa_r+0x65e>
 8008b7c:	9704      	str	r7, [sp, #16]
 8008b7e:	4633      	mov	r3, r6
 8008b80:	461e      	mov	r6, r3
 8008b82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b86:	2a39      	cmp	r2, #57	@ 0x39
 8008b88:	d107      	bne.n	8008b9a <_dtoa_r+0x6da>
 8008b8a:	459a      	cmp	sl, r3
 8008b8c:	d1f8      	bne.n	8008b80 <_dtoa_r+0x6c0>
 8008b8e:	9a04      	ldr	r2, [sp, #16]
 8008b90:	3201      	adds	r2, #1
 8008b92:	9204      	str	r2, [sp, #16]
 8008b94:	2230      	movs	r2, #48	@ 0x30
 8008b96:	f88a 2000 	strb.w	r2, [sl]
 8008b9a:	781a      	ldrb	r2, [r3, #0]
 8008b9c:	3201      	adds	r2, #1
 8008b9e:	701a      	strb	r2, [r3, #0]
 8008ba0:	e7bd      	b.n	8008b1e <_dtoa_r+0x65e>
 8008ba2:	4b7b      	ldr	r3, [pc, #492]	@ (8008d90 <_dtoa_r+0x8d0>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f7f7 fd4f 	bl	8000648 <__aeabi_dmul>
 8008baa:	2200      	movs	r2, #0
 8008bac:	2300      	movs	r3, #0
 8008bae:	4604      	mov	r4, r0
 8008bb0:	460d      	mov	r5, r1
 8008bb2:	f7f7 ffb1 	bl	8000b18 <__aeabi_dcmpeq>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	f43f aebb 	beq.w	8008932 <_dtoa_r+0x472>
 8008bbc:	e6f0      	b.n	80089a0 <_dtoa_r+0x4e0>
 8008bbe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008bc0:	2a00      	cmp	r2, #0
 8008bc2:	f000 80db 	beq.w	8008d7c <_dtoa_r+0x8bc>
 8008bc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bc8:	2a01      	cmp	r2, #1
 8008bca:	f300 80bf 	bgt.w	8008d4c <_dtoa_r+0x88c>
 8008bce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008bd0:	2a00      	cmp	r2, #0
 8008bd2:	f000 80b7 	beq.w	8008d44 <_dtoa_r+0x884>
 8008bd6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008bda:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008bdc:	4646      	mov	r6, r8
 8008bde:	9a08      	ldr	r2, [sp, #32]
 8008be0:	2101      	movs	r1, #1
 8008be2:	441a      	add	r2, r3
 8008be4:	4658      	mov	r0, fp
 8008be6:	4498      	add	r8, r3
 8008be8:	9208      	str	r2, [sp, #32]
 8008bea:	f000 fc21 	bl	8009430 <__i2b>
 8008bee:	4605      	mov	r5, r0
 8008bf0:	b15e      	cbz	r6, 8008c0a <_dtoa_r+0x74a>
 8008bf2:	9b08      	ldr	r3, [sp, #32]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	dd08      	ble.n	8008c0a <_dtoa_r+0x74a>
 8008bf8:	42b3      	cmp	r3, r6
 8008bfa:	9a08      	ldr	r2, [sp, #32]
 8008bfc:	bfa8      	it	ge
 8008bfe:	4633      	movge	r3, r6
 8008c00:	eba8 0803 	sub.w	r8, r8, r3
 8008c04:	1af6      	subs	r6, r6, r3
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	9308      	str	r3, [sp, #32]
 8008c0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c0c:	b1f3      	cbz	r3, 8008c4c <_dtoa_r+0x78c>
 8008c0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 80b7 	beq.w	8008d84 <_dtoa_r+0x8c4>
 8008c16:	b18c      	cbz	r4, 8008c3c <_dtoa_r+0x77c>
 8008c18:	4629      	mov	r1, r5
 8008c1a:	4622      	mov	r2, r4
 8008c1c:	4658      	mov	r0, fp
 8008c1e:	f000 fcc7 	bl	80095b0 <__pow5mult>
 8008c22:	464a      	mov	r2, r9
 8008c24:	4601      	mov	r1, r0
 8008c26:	4605      	mov	r5, r0
 8008c28:	4658      	mov	r0, fp
 8008c2a:	f000 fc17 	bl	800945c <__multiply>
 8008c2e:	4649      	mov	r1, r9
 8008c30:	9004      	str	r0, [sp, #16]
 8008c32:	4658      	mov	r0, fp
 8008c34:	f000 fb48 	bl	80092c8 <_Bfree>
 8008c38:	9b04      	ldr	r3, [sp, #16]
 8008c3a:	4699      	mov	r9, r3
 8008c3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c3e:	1b1a      	subs	r2, r3, r4
 8008c40:	d004      	beq.n	8008c4c <_dtoa_r+0x78c>
 8008c42:	4649      	mov	r1, r9
 8008c44:	4658      	mov	r0, fp
 8008c46:	f000 fcb3 	bl	80095b0 <__pow5mult>
 8008c4a:	4681      	mov	r9, r0
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	4658      	mov	r0, fp
 8008c50:	f000 fbee 	bl	8009430 <__i2b>
 8008c54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c56:	4604      	mov	r4, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f000 81cf 	beq.w	8008ffc <_dtoa_r+0xb3c>
 8008c5e:	461a      	mov	r2, r3
 8008c60:	4601      	mov	r1, r0
 8008c62:	4658      	mov	r0, fp
 8008c64:	f000 fca4 	bl	80095b0 <__pow5mult>
 8008c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	f300 8095 	bgt.w	8008d9c <_dtoa_r+0x8dc>
 8008c72:	9b02      	ldr	r3, [sp, #8]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f040 8087 	bne.w	8008d88 <_dtoa_r+0x8c8>
 8008c7a:	9b03      	ldr	r3, [sp, #12]
 8008c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f040 8089 	bne.w	8008d98 <_dtoa_r+0x8d8>
 8008c86:	9b03      	ldr	r3, [sp, #12]
 8008c88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c8c:	0d1b      	lsrs	r3, r3, #20
 8008c8e:	051b      	lsls	r3, r3, #20
 8008c90:	b12b      	cbz	r3, 8008c9e <_dtoa_r+0x7de>
 8008c92:	9b08      	ldr	r3, [sp, #32]
 8008c94:	3301      	adds	r3, #1
 8008c96:	9308      	str	r3, [sp, #32]
 8008c98:	f108 0801 	add.w	r8, r8, #1
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f000 81b0 	beq.w	8009008 <_dtoa_r+0xb48>
 8008ca8:	6923      	ldr	r3, [r4, #16]
 8008caa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008cae:	6918      	ldr	r0, [r3, #16]
 8008cb0:	f000 fb72 	bl	8009398 <__hi0bits>
 8008cb4:	f1c0 0020 	rsb	r0, r0, #32
 8008cb8:	9b08      	ldr	r3, [sp, #32]
 8008cba:	4418      	add	r0, r3
 8008cbc:	f010 001f 	ands.w	r0, r0, #31
 8008cc0:	d077      	beq.n	8008db2 <_dtoa_r+0x8f2>
 8008cc2:	f1c0 0320 	rsb	r3, r0, #32
 8008cc6:	2b04      	cmp	r3, #4
 8008cc8:	dd6b      	ble.n	8008da2 <_dtoa_r+0x8e2>
 8008cca:	9b08      	ldr	r3, [sp, #32]
 8008ccc:	f1c0 001c 	rsb	r0, r0, #28
 8008cd0:	4403      	add	r3, r0
 8008cd2:	4480      	add	r8, r0
 8008cd4:	4406      	add	r6, r0
 8008cd6:	9308      	str	r3, [sp, #32]
 8008cd8:	f1b8 0f00 	cmp.w	r8, #0
 8008cdc:	dd05      	ble.n	8008cea <_dtoa_r+0x82a>
 8008cde:	4649      	mov	r1, r9
 8008ce0:	4642      	mov	r2, r8
 8008ce2:	4658      	mov	r0, fp
 8008ce4:	f000 fcbe 	bl	8009664 <__lshift>
 8008ce8:	4681      	mov	r9, r0
 8008cea:	9b08      	ldr	r3, [sp, #32]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dd05      	ble.n	8008cfc <_dtoa_r+0x83c>
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	4658      	mov	r0, fp
 8008cf6:	f000 fcb5 	bl	8009664 <__lshift>
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d059      	beq.n	8008db6 <_dtoa_r+0x8f6>
 8008d02:	4621      	mov	r1, r4
 8008d04:	4648      	mov	r0, r9
 8008d06:	f000 fd19 	bl	800973c <__mcmp>
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	da53      	bge.n	8008db6 <_dtoa_r+0x8f6>
 8008d0e:	1e7b      	subs	r3, r7, #1
 8008d10:	9304      	str	r3, [sp, #16]
 8008d12:	4649      	mov	r1, r9
 8008d14:	2300      	movs	r3, #0
 8008d16:	220a      	movs	r2, #10
 8008d18:	4658      	mov	r0, fp
 8008d1a:	f000 faf7 	bl	800930c <__multadd>
 8008d1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d20:	4681      	mov	r9, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f000 8172 	beq.w	800900c <_dtoa_r+0xb4c>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	220a      	movs	r2, #10
 8008d2e:	4658      	mov	r0, fp
 8008d30:	f000 faec 	bl	800930c <__multadd>
 8008d34:	9b00      	ldr	r3, [sp, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	4605      	mov	r5, r0
 8008d3a:	dc67      	bgt.n	8008e0c <_dtoa_r+0x94c>
 8008d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	dc41      	bgt.n	8008dc6 <_dtoa_r+0x906>
 8008d42:	e063      	b.n	8008e0c <_dtoa_r+0x94c>
 8008d44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008d46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008d4a:	e746      	b.n	8008bda <_dtoa_r+0x71a>
 8008d4c:	9b07      	ldr	r3, [sp, #28]
 8008d4e:	1e5c      	subs	r4, r3, #1
 8008d50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d52:	42a3      	cmp	r3, r4
 8008d54:	bfbf      	itttt	lt
 8008d56:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008d58:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008d5a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008d5c:	1ae3      	sublt	r3, r4, r3
 8008d5e:	bfb4      	ite	lt
 8008d60:	18d2      	addlt	r2, r2, r3
 8008d62:	1b1c      	subge	r4, r3, r4
 8008d64:	9b07      	ldr	r3, [sp, #28]
 8008d66:	bfbc      	itt	lt
 8008d68:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008d6a:	2400      	movlt	r4, #0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	bfb5      	itete	lt
 8008d70:	eba8 0603 	sublt.w	r6, r8, r3
 8008d74:	9b07      	ldrge	r3, [sp, #28]
 8008d76:	2300      	movlt	r3, #0
 8008d78:	4646      	movge	r6, r8
 8008d7a:	e730      	b.n	8008bde <_dtoa_r+0x71e>
 8008d7c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008d7e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008d80:	4646      	mov	r6, r8
 8008d82:	e735      	b.n	8008bf0 <_dtoa_r+0x730>
 8008d84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d86:	e75c      	b.n	8008c42 <_dtoa_r+0x782>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	e788      	b.n	8008c9e <_dtoa_r+0x7de>
 8008d8c:	3fe00000 	.word	0x3fe00000
 8008d90:	40240000 	.word	0x40240000
 8008d94:	40140000 	.word	0x40140000
 8008d98:	9b02      	ldr	r3, [sp, #8]
 8008d9a:	e780      	b.n	8008c9e <_dtoa_r+0x7de>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008da0:	e782      	b.n	8008ca8 <_dtoa_r+0x7e8>
 8008da2:	d099      	beq.n	8008cd8 <_dtoa_r+0x818>
 8008da4:	9a08      	ldr	r2, [sp, #32]
 8008da6:	331c      	adds	r3, #28
 8008da8:	441a      	add	r2, r3
 8008daa:	4498      	add	r8, r3
 8008dac:	441e      	add	r6, r3
 8008dae:	9208      	str	r2, [sp, #32]
 8008db0:	e792      	b.n	8008cd8 <_dtoa_r+0x818>
 8008db2:	4603      	mov	r3, r0
 8008db4:	e7f6      	b.n	8008da4 <_dtoa_r+0x8e4>
 8008db6:	9b07      	ldr	r3, [sp, #28]
 8008db8:	9704      	str	r7, [sp, #16]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	dc20      	bgt.n	8008e00 <_dtoa_r+0x940>
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	dd1e      	ble.n	8008e04 <_dtoa_r+0x944>
 8008dc6:	9b00      	ldr	r3, [sp, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f47f aec0 	bne.w	8008b4e <_dtoa_r+0x68e>
 8008dce:	4621      	mov	r1, r4
 8008dd0:	2205      	movs	r2, #5
 8008dd2:	4658      	mov	r0, fp
 8008dd4:	f000 fa9a 	bl	800930c <__multadd>
 8008dd8:	4601      	mov	r1, r0
 8008dda:	4604      	mov	r4, r0
 8008ddc:	4648      	mov	r0, r9
 8008dde:	f000 fcad 	bl	800973c <__mcmp>
 8008de2:	2800      	cmp	r0, #0
 8008de4:	f77f aeb3 	ble.w	8008b4e <_dtoa_r+0x68e>
 8008de8:	4656      	mov	r6, sl
 8008dea:	2331      	movs	r3, #49	@ 0x31
 8008dec:	f806 3b01 	strb.w	r3, [r6], #1
 8008df0:	9b04      	ldr	r3, [sp, #16]
 8008df2:	3301      	adds	r3, #1
 8008df4:	9304      	str	r3, [sp, #16]
 8008df6:	e6ae      	b.n	8008b56 <_dtoa_r+0x696>
 8008df8:	9c07      	ldr	r4, [sp, #28]
 8008dfa:	9704      	str	r7, [sp, #16]
 8008dfc:	4625      	mov	r5, r4
 8008dfe:	e7f3      	b.n	8008de8 <_dtoa_r+0x928>
 8008e00:	9b07      	ldr	r3, [sp, #28]
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f000 8104 	beq.w	8009014 <_dtoa_r+0xb54>
 8008e0c:	2e00      	cmp	r6, #0
 8008e0e:	dd05      	ble.n	8008e1c <_dtoa_r+0x95c>
 8008e10:	4629      	mov	r1, r5
 8008e12:	4632      	mov	r2, r6
 8008e14:	4658      	mov	r0, fp
 8008e16:	f000 fc25 	bl	8009664 <__lshift>
 8008e1a:	4605      	mov	r5, r0
 8008e1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d05a      	beq.n	8008ed8 <_dtoa_r+0xa18>
 8008e22:	6869      	ldr	r1, [r5, #4]
 8008e24:	4658      	mov	r0, fp
 8008e26:	f000 fa0f 	bl	8009248 <_Balloc>
 8008e2a:	4606      	mov	r6, r0
 8008e2c:	b928      	cbnz	r0, 8008e3a <_dtoa_r+0x97a>
 8008e2e:	4b84      	ldr	r3, [pc, #528]	@ (8009040 <_dtoa_r+0xb80>)
 8008e30:	4602      	mov	r2, r0
 8008e32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008e36:	f7ff bb5a 	b.w	80084ee <_dtoa_r+0x2e>
 8008e3a:	692a      	ldr	r2, [r5, #16]
 8008e3c:	3202      	adds	r2, #2
 8008e3e:	0092      	lsls	r2, r2, #2
 8008e40:	f105 010c 	add.w	r1, r5, #12
 8008e44:	300c      	adds	r0, #12
 8008e46:	f000 ffaf 	bl	8009da8 <memcpy>
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	4631      	mov	r1, r6
 8008e4e:	4658      	mov	r0, fp
 8008e50:	f000 fc08 	bl	8009664 <__lshift>
 8008e54:	f10a 0301 	add.w	r3, sl, #1
 8008e58:	9307      	str	r3, [sp, #28]
 8008e5a:	9b00      	ldr	r3, [sp, #0]
 8008e5c:	4453      	add	r3, sl
 8008e5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e60:	9b02      	ldr	r3, [sp, #8]
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	462f      	mov	r7, r5
 8008e68:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e6a:	4605      	mov	r5, r0
 8008e6c:	9b07      	ldr	r3, [sp, #28]
 8008e6e:	4621      	mov	r1, r4
 8008e70:	3b01      	subs	r3, #1
 8008e72:	4648      	mov	r0, r9
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	f7ff fa98 	bl	80083aa <quorem>
 8008e7a:	4639      	mov	r1, r7
 8008e7c:	9002      	str	r0, [sp, #8]
 8008e7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008e82:	4648      	mov	r0, r9
 8008e84:	f000 fc5a 	bl	800973c <__mcmp>
 8008e88:	462a      	mov	r2, r5
 8008e8a:	9008      	str	r0, [sp, #32]
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	4658      	mov	r0, fp
 8008e90:	f000 fc70 	bl	8009774 <__mdiff>
 8008e94:	68c2      	ldr	r2, [r0, #12]
 8008e96:	4606      	mov	r6, r0
 8008e98:	bb02      	cbnz	r2, 8008edc <_dtoa_r+0xa1c>
 8008e9a:	4601      	mov	r1, r0
 8008e9c:	4648      	mov	r0, r9
 8008e9e:	f000 fc4d 	bl	800973c <__mcmp>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	4631      	mov	r1, r6
 8008ea6:	4658      	mov	r0, fp
 8008ea8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008eaa:	f000 fa0d 	bl	80092c8 <_Bfree>
 8008eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008eb2:	9e07      	ldr	r6, [sp, #28]
 8008eb4:	ea43 0102 	orr.w	r1, r3, r2
 8008eb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eba:	4319      	orrs	r1, r3
 8008ebc:	d110      	bne.n	8008ee0 <_dtoa_r+0xa20>
 8008ebe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ec2:	d029      	beq.n	8008f18 <_dtoa_r+0xa58>
 8008ec4:	9b08      	ldr	r3, [sp, #32]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	dd02      	ble.n	8008ed0 <_dtoa_r+0xa10>
 8008eca:	9b02      	ldr	r3, [sp, #8]
 8008ecc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008ed0:	9b00      	ldr	r3, [sp, #0]
 8008ed2:	f883 8000 	strb.w	r8, [r3]
 8008ed6:	e63f      	b.n	8008b58 <_dtoa_r+0x698>
 8008ed8:	4628      	mov	r0, r5
 8008eda:	e7bb      	b.n	8008e54 <_dtoa_r+0x994>
 8008edc:	2201      	movs	r2, #1
 8008ede:	e7e1      	b.n	8008ea4 <_dtoa_r+0x9e4>
 8008ee0:	9b08      	ldr	r3, [sp, #32]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	db04      	blt.n	8008ef0 <_dtoa_r+0xa30>
 8008ee6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ee8:	430b      	orrs	r3, r1
 8008eea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008eec:	430b      	orrs	r3, r1
 8008eee:	d120      	bne.n	8008f32 <_dtoa_r+0xa72>
 8008ef0:	2a00      	cmp	r2, #0
 8008ef2:	dded      	ble.n	8008ed0 <_dtoa_r+0xa10>
 8008ef4:	4649      	mov	r1, r9
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	4658      	mov	r0, fp
 8008efa:	f000 fbb3 	bl	8009664 <__lshift>
 8008efe:	4621      	mov	r1, r4
 8008f00:	4681      	mov	r9, r0
 8008f02:	f000 fc1b 	bl	800973c <__mcmp>
 8008f06:	2800      	cmp	r0, #0
 8008f08:	dc03      	bgt.n	8008f12 <_dtoa_r+0xa52>
 8008f0a:	d1e1      	bne.n	8008ed0 <_dtoa_r+0xa10>
 8008f0c:	f018 0f01 	tst.w	r8, #1
 8008f10:	d0de      	beq.n	8008ed0 <_dtoa_r+0xa10>
 8008f12:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f16:	d1d8      	bne.n	8008eca <_dtoa_r+0xa0a>
 8008f18:	9a00      	ldr	r2, [sp, #0]
 8008f1a:	2339      	movs	r3, #57	@ 0x39
 8008f1c:	7013      	strb	r3, [r2, #0]
 8008f1e:	4633      	mov	r3, r6
 8008f20:	461e      	mov	r6, r3
 8008f22:	3b01      	subs	r3, #1
 8008f24:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008f28:	2a39      	cmp	r2, #57	@ 0x39
 8008f2a:	d052      	beq.n	8008fd2 <_dtoa_r+0xb12>
 8008f2c:	3201      	adds	r2, #1
 8008f2e:	701a      	strb	r2, [r3, #0]
 8008f30:	e612      	b.n	8008b58 <_dtoa_r+0x698>
 8008f32:	2a00      	cmp	r2, #0
 8008f34:	dd07      	ble.n	8008f46 <_dtoa_r+0xa86>
 8008f36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f3a:	d0ed      	beq.n	8008f18 <_dtoa_r+0xa58>
 8008f3c:	9a00      	ldr	r2, [sp, #0]
 8008f3e:	f108 0301 	add.w	r3, r8, #1
 8008f42:	7013      	strb	r3, [r2, #0]
 8008f44:	e608      	b.n	8008b58 <_dtoa_r+0x698>
 8008f46:	9b07      	ldr	r3, [sp, #28]
 8008f48:	9a07      	ldr	r2, [sp, #28]
 8008f4a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008f4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d028      	beq.n	8008fa6 <_dtoa_r+0xae6>
 8008f54:	4649      	mov	r1, r9
 8008f56:	2300      	movs	r3, #0
 8008f58:	220a      	movs	r2, #10
 8008f5a:	4658      	mov	r0, fp
 8008f5c:	f000 f9d6 	bl	800930c <__multadd>
 8008f60:	42af      	cmp	r7, r5
 8008f62:	4681      	mov	r9, r0
 8008f64:	f04f 0300 	mov.w	r3, #0
 8008f68:	f04f 020a 	mov.w	r2, #10
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	4658      	mov	r0, fp
 8008f70:	d107      	bne.n	8008f82 <_dtoa_r+0xac2>
 8008f72:	f000 f9cb 	bl	800930c <__multadd>
 8008f76:	4607      	mov	r7, r0
 8008f78:	4605      	mov	r5, r0
 8008f7a:	9b07      	ldr	r3, [sp, #28]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	9307      	str	r3, [sp, #28]
 8008f80:	e774      	b.n	8008e6c <_dtoa_r+0x9ac>
 8008f82:	f000 f9c3 	bl	800930c <__multadd>
 8008f86:	4629      	mov	r1, r5
 8008f88:	4607      	mov	r7, r0
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	220a      	movs	r2, #10
 8008f8e:	4658      	mov	r0, fp
 8008f90:	f000 f9bc 	bl	800930c <__multadd>
 8008f94:	4605      	mov	r5, r0
 8008f96:	e7f0      	b.n	8008f7a <_dtoa_r+0xaba>
 8008f98:	9b00      	ldr	r3, [sp, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	bfcc      	ite	gt
 8008f9e:	461e      	movgt	r6, r3
 8008fa0:	2601      	movle	r6, #1
 8008fa2:	4456      	add	r6, sl
 8008fa4:	2700      	movs	r7, #0
 8008fa6:	4649      	mov	r1, r9
 8008fa8:	2201      	movs	r2, #1
 8008faa:	4658      	mov	r0, fp
 8008fac:	f000 fb5a 	bl	8009664 <__lshift>
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	4681      	mov	r9, r0
 8008fb4:	f000 fbc2 	bl	800973c <__mcmp>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	dcb0      	bgt.n	8008f1e <_dtoa_r+0xa5e>
 8008fbc:	d102      	bne.n	8008fc4 <_dtoa_r+0xb04>
 8008fbe:	f018 0f01 	tst.w	r8, #1
 8008fc2:	d1ac      	bne.n	8008f1e <_dtoa_r+0xa5e>
 8008fc4:	4633      	mov	r3, r6
 8008fc6:	461e      	mov	r6, r3
 8008fc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fcc:	2a30      	cmp	r2, #48	@ 0x30
 8008fce:	d0fa      	beq.n	8008fc6 <_dtoa_r+0xb06>
 8008fd0:	e5c2      	b.n	8008b58 <_dtoa_r+0x698>
 8008fd2:	459a      	cmp	sl, r3
 8008fd4:	d1a4      	bne.n	8008f20 <_dtoa_r+0xa60>
 8008fd6:	9b04      	ldr	r3, [sp, #16]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	9304      	str	r3, [sp, #16]
 8008fdc:	2331      	movs	r3, #49	@ 0x31
 8008fde:	f88a 3000 	strb.w	r3, [sl]
 8008fe2:	e5b9      	b.n	8008b58 <_dtoa_r+0x698>
 8008fe4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008fe6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009044 <_dtoa_r+0xb84>
 8008fea:	b11b      	cbz	r3, 8008ff4 <_dtoa_r+0xb34>
 8008fec:	f10a 0308 	add.w	r3, sl, #8
 8008ff0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008ff2:	6013      	str	r3, [r2, #0]
 8008ff4:	4650      	mov	r0, sl
 8008ff6:	b019      	add	sp, #100	@ 0x64
 8008ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	f77f ae37 	ble.w	8008c72 <_dtoa_r+0x7b2>
 8009004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009006:	930a      	str	r3, [sp, #40]	@ 0x28
 8009008:	2001      	movs	r0, #1
 800900a:	e655      	b.n	8008cb8 <_dtoa_r+0x7f8>
 800900c:	9b00      	ldr	r3, [sp, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	f77f aed6 	ble.w	8008dc0 <_dtoa_r+0x900>
 8009014:	4656      	mov	r6, sl
 8009016:	4621      	mov	r1, r4
 8009018:	4648      	mov	r0, r9
 800901a:	f7ff f9c6 	bl	80083aa <quorem>
 800901e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009022:	f806 8b01 	strb.w	r8, [r6], #1
 8009026:	9b00      	ldr	r3, [sp, #0]
 8009028:	eba6 020a 	sub.w	r2, r6, sl
 800902c:	4293      	cmp	r3, r2
 800902e:	ddb3      	ble.n	8008f98 <_dtoa_r+0xad8>
 8009030:	4649      	mov	r1, r9
 8009032:	2300      	movs	r3, #0
 8009034:	220a      	movs	r2, #10
 8009036:	4658      	mov	r0, fp
 8009038:	f000 f968 	bl	800930c <__multadd>
 800903c:	4681      	mov	r9, r0
 800903e:	e7ea      	b.n	8009016 <_dtoa_r+0xb56>
 8009040:	0800adcc 	.word	0x0800adcc
 8009044:	0800ad50 	.word	0x0800ad50

08009048 <_free_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	4605      	mov	r5, r0
 800904c:	2900      	cmp	r1, #0
 800904e:	d041      	beq.n	80090d4 <_free_r+0x8c>
 8009050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009054:	1f0c      	subs	r4, r1, #4
 8009056:	2b00      	cmp	r3, #0
 8009058:	bfb8      	it	lt
 800905a:	18e4      	addlt	r4, r4, r3
 800905c:	f000 f8e8 	bl	8009230 <__malloc_lock>
 8009060:	4a1d      	ldr	r2, [pc, #116]	@ (80090d8 <_free_r+0x90>)
 8009062:	6813      	ldr	r3, [r2, #0]
 8009064:	b933      	cbnz	r3, 8009074 <_free_r+0x2c>
 8009066:	6063      	str	r3, [r4, #4]
 8009068:	6014      	str	r4, [r2, #0]
 800906a:	4628      	mov	r0, r5
 800906c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009070:	f000 b8e4 	b.w	800923c <__malloc_unlock>
 8009074:	42a3      	cmp	r3, r4
 8009076:	d908      	bls.n	800908a <_free_r+0x42>
 8009078:	6820      	ldr	r0, [r4, #0]
 800907a:	1821      	adds	r1, r4, r0
 800907c:	428b      	cmp	r3, r1
 800907e:	bf01      	itttt	eq
 8009080:	6819      	ldreq	r1, [r3, #0]
 8009082:	685b      	ldreq	r3, [r3, #4]
 8009084:	1809      	addeq	r1, r1, r0
 8009086:	6021      	streq	r1, [r4, #0]
 8009088:	e7ed      	b.n	8009066 <_free_r+0x1e>
 800908a:	461a      	mov	r2, r3
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	b10b      	cbz	r3, 8009094 <_free_r+0x4c>
 8009090:	42a3      	cmp	r3, r4
 8009092:	d9fa      	bls.n	800908a <_free_r+0x42>
 8009094:	6811      	ldr	r1, [r2, #0]
 8009096:	1850      	adds	r0, r2, r1
 8009098:	42a0      	cmp	r0, r4
 800909a:	d10b      	bne.n	80090b4 <_free_r+0x6c>
 800909c:	6820      	ldr	r0, [r4, #0]
 800909e:	4401      	add	r1, r0
 80090a0:	1850      	adds	r0, r2, r1
 80090a2:	4283      	cmp	r3, r0
 80090a4:	6011      	str	r1, [r2, #0]
 80090a6:	d1e0      	bne.n	800906a <_free_r+0x22>
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	6053      	str	r3, [r2, #4]
 80090ae:	4408      	add	r0, r1
 80090b0:	6010      	str	r0, [r2, #0]
 80090b2:	e7da      	b.n	800906a <_free_r+0x22>
 80090b4:	d902      	bls.n	80090bc <_free_r+0x74>
 80090b6:	230c      	movs	r3, #12
 80090b8:	602b      	str	r3, [r5, #0]
 80090ba:	e7d6      	b.n	800906a <_free_r+0x22>
 80090bc:	6820      	ldr	r0, [r4, #0]
 80090be:	1821      	adds	r1, r4, r0
 80090c0:	428b      	cmp	r3, r1
 80090c2:	bf04      	itt	eq
 80090c4:	6819      	ldreq	r1, [r3, #0]
 80090c6:	685b      	ldreq	r3, [r3, #4]
 80090c8:	6063      	str	r3, [r4, #4]
 80090ca:	bf04      	itt	eq
 80090cc:	1809      	addeq	r1, r1, r0
 80090ce:	6021      	streq	r1, [r4, #0]
 80090d0:	6054      	str	r4, [r2, #4]
 80090d2:	e7ca      	b.n	800906a <_free_r+0x22>
 80090d4:	bd38      	pop	{r3, r4, r5, pc}
 80090d6:	bf00      	nop
 80090d8:	200005f8 	.word	0x200005f8

080090dc <malloc>:
 80090dc:	4b02      	ldr	r3, [pc, #8]	@ (80090e8 <malloc+0xc>)
 80090de:	4601      	mov	r1, r0
 80090e0:	6818      	ldr	r0, [r3, #0]
 80090e2:	f000 b825 	b.w	8009130 <_malloc_r>
 80090e6:	bf00      	nop
 80090e8:	20000028 	.word	0x20000028

080090ec <sbrk_aligned>:
 80090ec:	b570      	push	{r4, r5, r6, lr}
 80090ee:	4e0f      	ldr	r6, [pc, #60]	@ (800912c <sbrk_aligned+0x40>)
 80090f0:	460c      	mov	r4, r1
 80090f2:	6831      	ldr	r1, [r6, #0]
 80090f4:	4605      	mov	r5, r0
 80090f6:	b911      	cbnz	r1, 80090fe <sbrk_aligned+0x12>
 80090f8:	f000 fe46 	bl	8009d88 <_sbrk_r>
 80090fc:	6030      	str	r0, [r6, #0]
 80090fe:	4621      	mov	r1, r4
 8009100:	4628      	mov	r0, r5
 8009102:	f000 fe41 	bl	8009d88 <_sbrk_r>
 8009106:	1c43      	adds	r3, r0, #1
 8009108:	d103      	bne.n	8009112 <sbrk_aligned+0x26>
 800910a:	f04f 34ff 	mov.w	r4, #4294967295
 800910e:	4620      	mov	r0, r4
 8009110:	bd70      	pop	{r4, r5, r6, pc}
 8009112:	1cc4      	adds	r4, r0, #3
 8009114:	f024 0403 	bic.w	r4, r4, #3
 8009118:	42a0      	cmp	r0, r4
 800911a:	d0f8      	beq.n	800910e <sbrk_aligned+0x22>
 800911c:	1a21      	subs	r1, r4, r0
 800911e:	4628      	mov	r0, r5
 8009120:	f000 fe32 	bl	8009d88 <_sbrk_r>
 8009124:	3001      	adds	r0, #1
 8009126:	d1f2      	bne.n	800910e <sbrk_aligned+0x22>
 8009128:	e7ef      	b.n	800910a <sbrk_aligned+0x1e>
 800912a:	bf00      	nop
 800912c:	200005f4 	.word	0x200005f4

08009130 <_malloc_r>:
 8009130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009134:	1ccd      	adds	r5, r1, #3
 8009136:	f025 0503 	bic.w	r5, r5, #3
 800913a:	3508      	adds	r5, #8
 800913c:	2d0c      	cmp	r5, #12
 800913e:	bf38      	it	cc
 8009140:	250c      	movcc	r5, #12
 8009142:	2d00      	cmp	r5, #0
 8009144:	4606      	mov	r6, r0
 8009146:	db01      	blt.n	800914c <_malloc_r+0x1c>
 8009148:	42a9      	cmp	r1, r5
 800914a:	d904      	bls.n	8009156 <_malloc_r+0x26>
 800914c:	230c      	movs	r3, #12
 800914e:	6033      	str	r3, [r6, #0]
 8009150:	2000      	movs	r0, #0
 8009152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009156:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800922c <_malloc_r+0xfc>
 800915a:	f000 f869 	bl	8009230 <__malloc_lock>
 800915e:	f8d8 3000 	ldr.w	r3, [r8]
 8009162:	461c      	mov	r4, r3
 8009164:	bb44      	cbnz	r4, 80091b8 <_malloc_r+0x88>
 8009166:	4629      	mov	r1, r5
 8009168:	4630      	mov	r0, r6
 800916a:	f7ff ffbf 	bl	80090ec <sbrk_aligned>
 800916e:	1c43      	adds	r3, r0, #1
 8009170:	4604      	mov	r4, r0
 8009172:	d158      	bne.n	8009226 <_malloc_r+0xf6>
 8009174:	f8d8 4000 	ldr.w	r4, [r8]
 8009178:	4627      	mov	r7, r4
 800917a:	2f00      	cmp	r7, #0
 800917c:	d143      	bne.n	8009206 <_malloc_r+0xd6>
 800917e:	2c00      	cmp	r4, #0
 8009180:	d04b      	beq.n	800921a <_malloc_r+0xea>
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	4639      	mov	r1, r7
 8009186:	4630      	mov	r0, r6
 8009188:	eb04 0903 	add.w	r9, r4, r3
 800918c:	f000 fdfc 	bl	8009d88 <_sbrk_r>
 8009190:	4581      	cmp	r9, r0
 8009192:	d142      	bne.n	800921a <_malloc_r+0xea>
 8009194:	6821      	ldr	r1, [r4, #0]
 8009196:	1a6d      	subs	r5, r5, r1
 8009198:	4629      	mov	r1, r5
 800919a:	4630      	mov	r0, r6
 800919c:	f7ff ffa6 	bl	80090ec <sbrk_aligned>
 80091a0:	3001      	adds	r0, #1
 80091a2:	d03a      	beq.n	800921a <_malloc_r+0xea>
 80091a4:	6823      	ldr	r3, [r4, #0]
 80091a6:	442b      	add	r3, r5
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	f8d8 3000 	ldr.w	r3, [r8]
 80091ae:	685a      	ldr	r2, [r3, #4]
 80091b0:	bb62      	cbnz	r2, 800920c <_malloc_r+0xdc>
 80091b2:	f8c8 7000 	str.w	r7, [r8]
 80091b6:	e00f      	b.n	80091d8 <_malloc_r+0xa8>
 80091b8:	6822      	ldr	r2, [r4, #0]
 80091ba:	1b52      	subs	r2, r2, r5
 80091bc:	d420      	bmi.n	8009200 <_malloc_r+0xd0>
 80091be:	2a0b      	cmp	r2, #11
 80091c0:	d917      	bls.n	80091f2 <_malloc_r+0xc2>
 80091c2:	1961      	adds	r1, r4, r5
 80091c4:	42a3      	cmp	r3, r4
 80091c6:	6025      	str	r5, [r4, #0]
 80091c8:	bf18      	it	ne
 80091ca:	6059      	strne	r1, [r3, #4]
 80091cc:	6863      	ldr	r3, [r4, #4]
 80091ce:	bf08      	it	eq
 80091d0:	f8c8 1000 	streq.w	r1, [r8]
 80091d4:	5162      	str	r2, [r4, r5]
 80091d6:	604b      	str	r3, [r1, #4]
 80091d8:	4630      	mov	r0, r6
 80091da:	f000 f82f 	bl	800923c <__malloc_unlock>
 80091de:	f104 000b 	add.w	r0, r4, #11
 80091e2:	1d23      	adds	r3, r4, #4
 80091e4:	f020 0007 	bic.w	r0, r0, #7
 80091e8:	1ac2      	subs	r2, r0, r3
 80091ea:	bf1c      	itt	ne
 80091ec:	1a1b      	subne	r3, r3, r0
 80091ee:	50a3      	strne	r3, [r4, r2]
 80091f0:	e7af      	b.n	8009152 <_malloc_r+0x22>
 80091f2:	6862      	ldr	r2, [r4, #4]
 80091f4:	42a3      	cmp	r3, r4
 80091f6:	bf0c      	ite	eq
 80091f8:	f8c8 2000 	streq.w	r2, [r8]
 80091fc:	605a      	strne	r2, [r3, #4]
 80091fe:	e7eb      	b.n	80091d8 <_malloc_r+0xa8>
 8009200:	4623      	mov	r3, r4
 8009202:	6864      	ldr	r4, [r4, #4]
 8009204:	e7ae      	b.n	8009164 <_malloc_r+0x34>
 8009206:	463c      	mov	r4, r7
 8009208:	687f      	ldr	r7, [r7, #4]
 800920a:	e7b6      	b.n	800917a <_malloc_r+0x4a>
 800920c:	461a      	mov	r2, r3
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	42a3      	cmp	r3, r4
 8009212:	d1fb      	bne.n	800920c <_malloc_r+0xdc>
 8009214:	2300      	movs	r3, #0
 8009216:	6053      	str	r3, [r2, #4]
 8009218:	e7de      	b.n	80091d8 <_malloc_r+0xa8>
 800921a:	230c      	movs	r3, #12
 800921c:	6033      	str	r3, [r6, #0]
 800921e:	4630      	mov	r0, r6
 8009220:	f000 f80c 	bl	800923c <__malloc_unlock>
 8009224:	e794      	b.n	8009150 <_malloc_r+0x20>
 8009226:	6005      	str	r5, [r0, #0]
 8009228:	e7d6      	b.n	80091d8 <_malloc_r+0xa8>
 800922a:	bf00      	nop
 800922c:	200005f8 	.word	0x200005f8

08009230 <__malloc_lock>:
 8009230:	4801      	ldr	r0, [pc, #4]	@ (8009238 <__malloc_lock+0x8>)
 8009232:	f7ff b8b8 	b.w	80083a6 <__retarget_lock_acquire_recursive>
 8009236:	bf00      	nop
 8009238:	200005f0 	.word	0x200005f0

0800923c <__malloc_unlock>:
 800923c:	4801      	ldr	r0, [pc, #4]	@ (8009244 <__malloc_unlock+0x8>)
 800923e:	f7ff b8b3 	b.w	80083a8 <__retarget_lock_release_recursive>
 8009242:	bf00      	nop
 8009244:	200005f0 	.word	0x200005f0

08009248 <_Balloc>:
 8009248:	b570      	push	{r4, r5, r6, lr}
 800924a:	69c6      	ldr	r6, [r0, #28]
 800924c:	4604      	mov	r4, r0
 800924e:	460d      	mov	r5, r1
 8009250:	b976      	cbnz	r6, 8009270 <_Balloc+0x28>
 8009252:	2010      	movs	r0, #16
 8009254:	f7ff ff42 	bl	80090dc <malloc>
 8009258:	4602      	mov	r2, r0
 800925a:	61e0      	str	r0, [r4, #28]
 800925c:	b920      	cbnz	r0, 8009268 <_Balloc+0x20>
 800925e:	4b18      	ldr	r3, [pc, #96]	@ (80092c0 <_Balloc+0x78>)
 8009260:	4818      	ldr	r0, [pc, #96]	@ (80092c4 <_Balloc+0x7c>)
 8009262:	216b      	movs	r1, #107	@ 0x6b
 8009264:	f000 fdae 	bl	8009dc4 <__assert_func>
 8009268:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800926c:	6006      	str	r6, [r0, #0]
 800926e:	60c6      	str	r6, [r0, #12]
 8009270:	69e6      	ldr	r6, [r4, #28]
 8009272:	68f3      	ldr	r3, [r6, #12]
 8009274:	b183      	cbz	r3, 8009298 <_Balloc+0x50>
 8009276:	69e3      	ldr	r3, [r4, #28]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800927e:	b9b8      	cbnz	r0, 80092b0 <_Balloc+0x68>
 8009280:	2101      	movs	r1, #1
 8009282:	fa01 f605 	lsl.w	r6, r1, r5
 8009286:	1d72      	adds	r2, r6, #5
 8009288:	0092      	lsls	r2, r2, #2
 800928a:	4620      	mov	r0, r4
 800928c:	f000 fdb8 	bl	8009e00 <_calloc_r>
 8009290:	b160      	cbz	r0, 80092ac <_Balloc+0x64>
 8009292:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009296:	e00e      	b.n	80092b6 <_Balloc+0x6e>
 8009298:	2221      	movs	r2, #33	@ 0x21
 800929a:	2104      	movs	r1, #4
 800929c:	4620      	mov	r0, r4
 800929e:	f000 fdaf 	bl	8009e00 <_calloc_r>
 80092a2:	69e3      	ldr	r3, [r4, #28]
 80092a4:	60f0      	str	r0, [r6, #12]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1e4      	bne.n	8009276 <_Balloc+0x2e>
 80092ac:	2000      	movs	r0, #0
 80092ae:	bd70      	pop	{r4, r5, r6, pc}
 80092b0:	6802      	ldr	r2, [r0, #0]
 80092b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092b6:	2300      	movs	r3, #0
 80092b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092bc:	e7f7      	b.n	80092ae <_Balloc+0x66>
 80092be:	bf00      	nop
 80092c0:	0800ad5d 	.word	0x0800ad5d
 80092c4:	0800addd 	.word	0x0800addd

080092c8 <_Bfree>:
 80092c8:	b570      	push	{r4, r5, r6, lr}
 80092ca:	69c6      	ldr	r6, [r0, #28]
 80092cc:	4605      	mov	r5, r0
 80092ce:	460c      	mov	r4, r1
 80092d0:	b976      	cbnz	r6, 80092f0 <_Bfree+0x28>
 80092d2:	2010      	movs	r0, #16
 80092d4:	f7ff ff02 	bl	80090dc <malloc>
 80092d8:	4602      	mov	r2, r0
 80092da:	61e8      	str	r0, [r5, #28]
 80092dc:	b920      	cbnz	r0, 80092e8 <_Bfree+0x20>
 80092de:	4b09      	ldr	r3, [pc, #36]	@ (8009304 <_Bfree+0x3c>)
 80092e0:	4809      	ldr	r0, [pc, #36]	@ (8009308 <_Bfree+0x40>)
 80092e2:	218f      	movs	r1, #143	@ 0x8f
 80092e4:	f000 fd6e 	bl	8009dc4 <__assert_func>
 80092e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092ec:	6006      	str	r6, [r0, #0]
 80092ee:	60c6      	str	r6, [r0, #12]
 80092f0:	b13c      	cbz	r4, 8009302 <_Bfree+0x3a>
 80092f2:	69eb      	ldr	r3, [r5, #28]
 80092f4:	6862      	ldr	r2, [r4, #4]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092fc:	6021      	str	r1, [r4, #0]
 80092fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009302:	bd70      	pop	{r4, r5, r6, pc}
 8009304:	0800ad5d 	.word	0x0800ad5d
 8009308:	0800addd 	.word	0x0800addd

0800930c <__multadd>:
 800930c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009310:	690d      	ldr	r5, [r1, #16]
 8009312:	4607      	mov	r7, r0
 8009314:	460c      	mov	r4, r1
 8009316:	461e      	mov	r6, r3
 8009318:	f101 0c14 	add.w	ip, r1, #20
 800931c:	2000      	movs	r0, #0
 800931e:	f8dc 3000 	ldr.w	r3, [ip]
 8009322:	b299      	uxth	r1, r3
 8009324:	fb02 6101 	mla	r1, r2, r1, r6
 8009328:	0c1e      	lsrs	r6, r3, #16
 800932a:	0c0b      	lsrs	r3, r1, #16
 800932c:	fb02 3306 	mla	r3, r2, r6, r3
 8009330:	b289      	uxth	r1, r1
 8009332:	3001      	adds	r0, #1
 8009334:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009338:	4285      	cmp	r5, r0
 800933a:	f84c 1b04 	str.w	r1, [ip], #4
 800933e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009342:	dcec      	bgt.n	800931e <__multadd+0x12>
 8009344:	b30e      	cbz	r6, 800938a <__multadd+0x7e>
 8009346:	68a3      	ldr	r3, [r4, #8]
 8009348:	42ab      	cmp	r3, r5
 800934a:	dc19      	bgt.n	8009380 <__multadd+0x74>
 800934c:	6861      	ldr	r1, [r4, #4]
 800934e:	4638      	mov	r0, r7
 8009350:	3101      	adds	r1, #1
 8009352:	f7ff ff79 	bl	8009248 <_Balloc>
 8009356:	4680      	mov	r8, r0
 8009358:	b928      	cbnz	r0, 8009366 <__multadd+0x5a>
 800935a:	4602      	mov	r2, r0
 800935c:	4b0c      	ldr	r3, [pc, #48]	@ (8009390 <__multadd+0x84>)
 800935e:	480d      	ldr	r0, [pc, #52]	@ (8009394 <__multadd+0x88>)
 8009360:	21ba      	movs	r1, #186	@ 0xba
 8009362:	f000 fd2f 	bl	8009dc4 <__assert_func>
 8009366:	6922      	ldr	r2, [r4, #16]
 8009368:	3202      	adds	r2, #2
 800936a:	f104 010c 	add.w	r1, r4, #12
 800936e:	0092      	lsls	r2, r2, #2
 8009370:	300c      	adds	r0, #12
 8009372:	f000 fd19 	bl	8009da8 <memcpy>
 8009376:	4621      	mov	r1, r4
 8009378:	4638      	mov	r0, r7
 800937a:	f7ff ffa5 	bl	80092c8 <_Bfree>
 800937e:	4644      	mov	r4, r8
 8009380:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009384:	3501      	adds	r5, #1
 8009386:	615e      	str	r6, [r3, #20]
 8009388:	6125      	str	r5, [r4, #16]
 800938a:	4620      	mov	r0, r4
 800938c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009390:	0800adcc 	.word	0x0800adcc
 8009394:	0800addd 	.word	0x0800addd

08009398 <__hi0bits>:
 8009398:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800939c:	4603      	mov	r3, r0
 800939e:	bf36      	itet	cc
 80093a0:	0403      	lslcc	r3, r0, #16
 80093a2:	2000      	movcs	r0, #0
 80093a4:	2010      	movcc	r0, #16
 80093a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093aa:	bf3c      	itt	cc
 80093ac:	021b      	lslcc	r3, r3, #8
 80093ae:	3008      	addcc	r0, #8
 80093b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093b4:	bf3c      	itt	cc
 80093b6:	011b      	lslcc	r3, r3, #4
 80093b8:	3004      	addcc	r0, #4
 80093ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093be:	bf3c      	itt	cc
 80093c0:	009b      	lslcc	r3, r3, #2
 80093c2:	3002      	addcc	r0, #2
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	db05      	blt.n	80093d4 <__hi0bits+0x3c>
 80093c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80093cc:	f100 0001 	add.w	r0, r0, #1
 80093d0:	bf08      	it	eq
 80093d2:	2020      	moveq	r0, #32
 80093d4:	4770      	bx	lr

080093d6 <__lo0bits>:
 80093d6:	6803      	ldr	r3, [r0, #0]
 80093d8:	4602      	mov	r2, r0
 80093da:	f013 0007 	ands.w	r0, r3, #7
 80093de:	d00b      	beq.n	80093f8 <__lo0bits+0x22>
 80093e0:	07d9      	lsls	r1, r3, #31
 80093e2:	d421      	bmi.n	8009428 <__lo0bits+0x52>
 80093e4:	0798      	lsls	r0, r3, #30
 80093e6:	bf49      	itett	mi
 80093e8:	085b      	lsrmi	r3, r3, #1
 80093ea:	089b      	lsrpl	r3, r3, #2
 80093ec:	2001      	movmi	r0, #1
 80093ee:	6013      	strmi	r3, [r2, #0]
 80093f0:	bf5c      	itt	pl
 80093f2:	6013      	strpl	r3, [r2, #0]
 80093f4:	2002      	movpl	r0, #2
 80093f6:	4770      	bx	lr
 80093f8:	b299      	uxth	r1, r3
 80093fa:	b909      	cbnz	r1, 8009400 <__lo0bits+0x2a>
 80093fc:	0c1b      	lsrs	r3, r3, #16
 80093fe:	2010      	movs	r0, #16
 8009400:	b2d9      	uxtb	r1, r3
 8009402:	b909      	cbnz	r1, 8009408 <__lo0bits+0x32>
 8009404:	3008      	adds	r0, #8
 8009406:	0a1b      	lsrs	r3, r3, #8
 8009408:	0719      	lsls	r1, r3, #28
 800940a:	bf04      	itt	eq
 800940c:	091b      	lsreq	r3, r3, #4
 800940e:	3004      	addeq	r0, #4
 8009410:	0799      	lsls	r1, r3, #30
 8009412:	bf04      	itt	eq
 8009414:	089b      	lsreq	r3, r3, #2
 8009416:	3002      	addeq	r0, #2
 8009418:	07d9      	lsls	r1, r3, #31
 800941a:	d403      	bmi.n	8009424 <__lo0bits+0x4e>
 800941c:	085b      	lsrs	r3, r3, #1
 800941e:	f100 0001 	add.w	r0, r0, #1
 8009422:	d003      	beq.n	800942c <__lo0bits+0x56>
 8009424:	6013      	str	r3, [r2, #0]
 8009426:	4770      	bx	lr
 8009428:	2000      	movs	r0, #0
 800942a:	4770      	bx	lr
 800942c:	2020      	movs	r0, #32
 800942e:	4770      	bx	lr

08009430 <__i2b>:
 8009430:	b510      	push	{r4, lr}
 8009432:	460c      	mov	r4, r1
 8009434:	2101      	movs	r1, #1
 8009436:	f7ff ff07 	bl	8009248 <_Balloc>
 800943a:	4602      	mov	r2, r0
 800943c:	b928      	cbnz	r0, 800944a <__i2b+0x1a>
 800943e:	4b05      	ldr	r3, [pc, #20]	@ (8009454 <__i2b+0x24>)
 8009440:	4805      	ldr	r0, [pc, #20]	@ (8009458 <__i2b+0x28>)
 8009442:	f240 1145 	movw	r1, #325	@ 0x145
 8009446:	f000 fcbd 	bl	8009dc4 <__assert_func>
 800944a:	2301      	movs	r3, #1
 800944c:	6144      	str	r4, [r0, #20]
 800944e:	6103      	str	r3, [r0, #16]
 8009450:	bd10      	pop	{r4, pc}
 8009452:	bf00      	nop
 8009454:	0800adcc 	.word	0x0800adcc
 8009458:	0800addd 	.word	0x0800addd

0800945c <__multiply>:
 800945c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009460:	4614      	mov	r4, r2
 8009462:	690a      	ldr	r2, [r1, #16]
 8009464:	6923      	ldr	r3, [r4, #16]
 8009466:	429a      	cmp	r2, r3
 8009468:	bfa8      	it	ge
 800946a:	4623      	movge	r3, r4
 800946c:	460f      	mov	r7, r1
 800946e:	bfa4      	itt	ge
 8009470:	460c      	movge	r4, r1
 8009472:	461f      	movge	r7, r3
 8009474:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009478:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800947c:	68a3      	ldr	r3, [r4, #8]
 800947e:	6861      	ldr	r1, [r4, #4]
 8009480:	eb0a 0609 	add.w	r6, sl, r9
 8009484:	42b3      	cmp	r3, r6
 8009486:	b085      	sub	sp, #20
 8009488:	bfb8      	it	lt
 800948a:	3101      	addlt	r1, #1
 800948c:	f7ff fedc 	bl	8009248 <_Balloc>
 8009490:	b930      	cbnz	r0, 80094a0 <__multiply+0x44>
 8009492:	4602      	mov	r2, r0
 8009494:	4b44      	ldr	r3, [pc, #272]	@ (80095a8 <__multiply+0x14c>)
 8009496:	4845      	ldr	r0, [pc, #276]	@ (80095ac <__multiply+0x150>)
 8009498:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800949c:	f000 fc92 	bl	8009dc4 <__assert_func>
 80094a0:	f100 0514 	add.w	r5, r0, #20
 80094a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80094a8:	462b      	mov	r3, r5
 80094aa:	2200      	movs	r2, #0
 80094ac:	4543      	cmp	r3, r8
 80094ae:	d321      	bcc.n	80094f4 <__multiply+0x98>
 80094b0:	f107 0114 	add.w	r1, r7, #20
 80094b4:	f104 0214 	add.w	r2, r4, #20
 80094b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80094bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80094c0:	9302      	str	r3, [sp, #8]
 80094c2:	1b13      	subs	r3, r2, r4
 80094c4:	3b15      	subs	r3, #21
 80094c6:	f023 0303 	bic.w	r3, r3, #3
 80094ca:	3304      	adds	r3, #4
 80094cc:	f104 0715 	add.w	r7, r4, #21
 80094d0:	42ba      	cmp	r2, r7
 80094d2:	bf38      	it	cc
 80094d4:	2304      	movcc	r3, #4
 80094d6:	9301      	str	r3, [sp, #4]
 80094d8:	9b02      	ldr	r3, [sp, #8]
 80094da:	9103      	str	r1, [sp, #12]
 80094dc:	428b      	cmp	r3, r1
 80094de:	d80c      	bhi.n	80094fa <__multiply+0x9e>
 80094e0:	2e00      	cmp	r6, #0
 80094e2:	dd03      	ble.n	80094ec <__multiply+0x90>
 80094e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d05b      	beq.n	80095a4 <__multiply+0x148>
 80094ec:	6106      	str	r6, [r0, #16]
 80094ee:	b005      	add	sp, #20
 80094f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f4:	f843 2b04 	str.w	r2, [r3], #4
 80094f8:	e7d8      	b.n	80094ac <__multiply+0x50>
 80094fa:	f8b1 a000 	ldrh.w	sl, [r1]
 80094fe:	f1ba 0f00 	cmp.w	sl, #0
 8009502:	d024      	beq.n	800954e <__multiply+0xf2>
 8009504:	f104 0e14 	add.w	lr, r4, #20
 8009508:	46a9      	mov	r9, r5
 800950a:	f04f 0c00 	mov.w	ip, #0
 800950e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009512:	f8d9 3000 	ldr.w	r3, [r9]
 8009516:	fa1f fb87 	uxth.w	fp, r7
 800951a:	b29b      	uxth	r3, r3
 800951c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009520:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009524:	f8d9 7000 	ldr.w	r7, [r9]
 8009528:	4463      	add	r3, ip
 800952a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800952e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009532:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009536:	b29b      	uxth	r3, r3
 8009538:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800953c:	4572      	cmp	r2, lr
 800953e:	f849 3b04 	str.w	r3, [r9], #4
 8009542:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009546:	d8e2      	bhi.n	800950e <__multiply+0xb2>
 8009548:	9b01      	ldr	r3, [sp, #4]
 800954a:	f845 c003 	str.w	ip, [r5, r3]
 800954e:	9b03      	ldr	r3, [sp, #12]
 8009550:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009554:	3104      	adds	r1, #4
 8009556:	f1b9 0f00 	cmp.w	r9, #0
 800955a:	d021      	beq.n	80095a0 <__multiply+0x144>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	f104 0c14 	add.w	ip, r4, #20
 8009562:	46ae      	mov	lr, r5
 8009564:	f04f 0a00 	mov.w	sl, #0
 8009568:	f8bc b000 	ldrh.w	fp, [ip]
 800956c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009570:	fb09 770b 	mla	r7, r9, fp, r7
 8009574:	4457      	add	r7, sl
 8009576:	b29b      	uxth	r3, r3
 8009578:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800957c:	f84e 3b04 	str.w	r3, [lr], #4
 8009580:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009584:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009588:	f8be 3000 	ldrh.w	r3, [lr]
 800958c:	fb09 330a 	mla	r3, r9, sl, r3
 8009590:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009594:	4562      	cmp	r2, ip
 8009596:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800959a:	d8e5      	bhi.n	8009568 <__multiply+0x10c>
 800959c:	9f01      	ldr	r7, [sp, #4]
 800959e:	51eb      	str	r3, [r5, r7]
 80095a0:	3504      	adds	r5, #4
 80095a2:	e799      	b.n	80094d8 <__multiply+0x7c>
 80095a4:	3e01      	subs	r6, #1
 80095a6:	e79b      	b.n	80094e0 <__multiply+0x84>
 80095a8:	0800adcc 	.word	0x0800adcc
 80095ac:	0800addd 	.word	0x0800addd

080095b0 <__pow5mult>:
 80095b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095b4:	4615      	mov	r5, r2
 80095b6:	f012 0203 	ands.w	r2, r2, #3
 80095ba:	4607      	mov	r7, r0
 80095bc:	460e      	mov	r6, r1
 80095be:	d007      	beq.n	80095d0 <__pow5mult+0x20>
 80095c0:	4c25      	ldr	r4, [pc, #148]	@ (8009658 <__pow5mult+0xa8>)
 80095c2:	3a01      	subs	r2, #1
 80095c4:	2300      	movs	r3, #0
 80095c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095ca:	f7ff fe9f 	bl	800930c <__multadd>
 80095ce:	4606      	mov	r6, r0
 80095d0:	10ad      	asrs	r5, r5, #2
 80095d2:	d03d      	beq.n	8009650 <__pow5mult+0xa0>
 80095d4:	69fc      	ldr	r4, [r7, #28]
 80095d6:	b97c      	cbnz	r4, 80095f8 <__pow5mult+0x48>
 80095d8:	2010      	movs	r0, #16
 80095da:	f7ff fd7f 	bl	80090dc <malloc>
 80095de:	4602      	mov	r2, r0
 80095e0:	61f8      	str	r0, [r7, #28]
 80095e2:	b928      	cbnz	r0, 80095f0 <__pow5mult+0x40>
 80095e4:	4b1d      	ldr	r3, [pc, #116]	@ (800965c <__pow5mult+0xac>)
 80095e6:	481e      	ldr	r0, [pc, #120]	@ (8009660 <__pow5mult+0xb0>)
 80095e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80095ec:	f000 fbea 	bl	8009dc4 <__assert_func>
 80095f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095f4:	6004      	str	r4, [r0, #0]
 80095f6:	60c4      	str	r4, [r0, #12]
 80095f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80095fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009600:	b94c      	cbnz	r4, 8009616 <__pow5mult+0x66>
 8009602:	f240 2171 	movw	r1, #625	@ 0x271
 8009606:	4638      	mov	r0, r7
 8009608:	f7ff ff12 	bl	8009430 <__i2b>
 800960c:	2300      	movs	r3, #0
 800960e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009612:	4604      	mov	r4, r0
 8009614:	6003      	str	r3, [r0, #0]
 8009616:	f04f 0900 	mov.w	r9, #0
 800961a:	07eb      	lsls	r3, r5, #31
 800961c:	d50a      	bpl.n	8009634 <__pow5mult+0x84>
 800961e:	4631      	mov	r1, r6
 8009620:	4622      	mov	r2, r4
 8009622:	4638      	mov	r0, r7
 8009624:	f7ff ff1a 	bl	800945c <__multiply>
 8009628:	4631      	mov	r1, r6
 800962a:	4680      	mov	r8, r0
 800962c:	4638      	mov	r0, r7
 800962e:	f7ff fe4b 	bl	80092c8 <_Bfree>
 8009632:	4646      	mov	r6, r8
 8009634:	106d      	asrs	r5, r5, #1
 8009636:	d00b      	beq.n	8009650 <__pow5mult+0xa0>
 8009638:	6820      	ldr	r0, [r4, #0]
 800963a:	b938      	cbnz	r0, 800964c <__pow5mult+0x9c>
 800963c:	4622      	mov	r2, r4
 800963e:	4621      	mov	r1, r4
 8009640:	4638      	mov	r0, r7
 8009642:	f7ff ff0b 	bl	800945c <__multiply>
 8009646:	6020      	str	r0, [r4, #0]
 8009648:	f8c0 9000 	str.w	r9, [r0]
 800964c:	4604      	mov	r4, r0
 800964e:	e7e4      	b.n	800961a <__pow5mult+0x6a>
 8009650:	4630      	mov	r0, r6
 8009652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009656:	bf00      	nop
 8009658:	0800ae38 	.word	0x0800ae38
 800965c:	0800ad5d 	.word	0x0800ad5d
 8009660:	0800addd 	.word	0x0800addd

08009664 <__lshift>:
 8009664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009668:	460c      	mov	r4, r1
 800966a:	6849      	ldr	r1, [r1, #4]
 800966c:	6923      	ldr	r3, [r4, #16]
 800966e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009672:	68a3      	ldr	r3, [r4, #8]
 8009674:	4607      	mov	r7, r0
 8009676:	4691      	mov	r9, r2
 8009678:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800967c:	f108 0601 	add.w	r6, r8, #1
 8009680:	42b3      	cmp	r3, r6
 8009682:	db0b      	blt.n	800969c <__lshift+0x38>
 8009684:	4638      	mov	r0, r7
 8009686:	f7ff fddf 	bl	8009248 <_Balloc>
 800968a:	4605      	mov	r5, r0
 800968c:	b948      	cbnz	r0, 80096a2 <__lshift+0x3e>
 800968e:	4602      	mov	r2, r0
 8009690:	4b28      	ldr	r3, [pc, #160]	@ (8009734 <__lshift+0xd0>)
 8009692:	4829      	ldr	r0, [pc, #164]	@ (8009738 <__lshift+0xd4>)
 8009694:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009698:	f000 fb94 	bl	8009dc4 <__assert_func>
 800969c:	3101      	adds	r1, #1
 800969e:	005b      	lsls	r3, r3, #1
 80096a0:	e7ee      	b.n	8009680 <__lshift+0x1c>
 80096a2:	2300      	movs	r3, #0
 80096a4:	f100 0114 	add.w	r1, r0, #20
 80096a8:	f100 0210 	add.w	r2, r0, #16
 80096ac:	4618      	mov	r0, r3
 80096ae:	4553      	cmp	r3, sl
 80096b0:	db33      	blt.n	800971a <__lshift+0xb6>
 80096b2:	6920      	ldr	r0, [r4, #16]
 80096b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096b8:	f104 0314 	add.w	r3, r4, #20
 80096bc:	f019 091f 	ands.w	r9, r9, #31
 80096c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80096c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80096c8:	d02b      	beq.n	8009722 <__lshift+0xbe>
 80096ca:	f1c9 0e20 	rsb	lr, r9, #32
 80096ce:	468a      	mov	sl, r1
 80096d0:	2200      	movs	r2, #0
 80096d2:	6818      	ldr	r0, [r3, #0]
 80096d4:	fa00 f009 	lsl.w	r0, r0, r9
 80096d8:	4310      	orrs	r0, r2
 80096da:	f84a 0b04 	str.w	r0, [sl], #4
 80096de:	f853 2b04 	ldr.w	r2, [r3], #4
 80096e2:	459c      	cmp	ip, r3
 80096e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80096e8:	d8f3      	bhi.n	80096d2 <__lshift+0x6e>
 80096ea:	ebac 0304 	sub.w	r3, ip, r4
 80096ee:	3b15      	subs	r3, #21
 80096f0:	f023 0303 	bic.w	r3, r3, #3
 80096f4:	3304      	adds	r3, #4
 80096f6:	f104 0015 	add.w	r0, r4, #21
 80096fa:	4584      	cmp	ip, r0
 80096fc:	bf38      	it	cc
 80096fe:	2304      	movcc	r3, #4
 8009700:	50ca      	str	r2, [r1, r3]
 8009702:	b10a      	cbz	r2, 8009708 <__lshift+0xa4>
 8009704:	f108 0602 	add.w	r6, r8, #2
 8009708:	3e01      	subs	r6, #1
 800970a:	4638      	mov	r0, r7
 800970c:	612e      	str	r6, [r5, #16]
 800970e:	4621      	mov	r1, r4
 8009710:	f7ff fdda 	bl	80092c8 <_Bfree>
 8009714:	4628      	mov	r0, r5
 8009716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800971a:	f842 0f04 	str.w	r0, [r2, #4]!
 800971e:	3301      	adds	r3, #1
 8009720:	e7c5      	b.n	80096ae <__lshift+0x4a>
 8009722:	3904      	subs	r1, #4
 8009724:	f853 2b04 	ldr.w	r2, [r3], #4
 8009728:	f841 2f04 	str.w	r2, [r1, #4]!
 800972c:	459c      	cmp	ip, r3
 800972e:	d8f9      	bhi.n	8009724 <__lshift+0xc0>
 8009730:	e7ea      	b.n	8009708 <__lshift+0xa4>
 8009732:	bf00      	nop
 8009734:	0800adcc 	.word	0x0800adcc
 8009738:	0800addd 	.word	0x0800addd

0800973c <__mcmp>:
 800973c:	690a      	ldr	r2, [r1, #16]
 800973e:	4603      	mov	r3, r0
 8009740:	6900      	ldr	r0, [r0, #16]
 8009742:	1a80      	subs	r0, r0, r2
 8009744:	b530      	push	{r4, r5, lr}
 8009746:	d10e      	bne.n	8009766 <__mcmp+0x2a>
 8009748:	3314      	adds	r3, #20
 800974a:	3114      	adds	r1, #20
 800974c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009750:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009754:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009758:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800975c:	4295      	cmp	r5, r2
 800975e:	d003      	beq.n	8009768 <__mcmp+0x2c>
 8009760:	d205      	bcs.n	800976e <__mcmp+0x32>
 8009762:	f04f 30ff 	mov.w	r0, #4294967295
 8009766:	bd30      	pop	{r4, r5, pc}
 8009768:	42a3      	cmp	r3, r4
 800976a:	d3f3      	bcc.n	8009754 <__mcmp+0x18>
 800976c:	e7fb      	b.n	8009766 <__mcmp+0x2a>
 800976e:	2001      	movs	r0, #1
 8009770:	e7f9      	b.n	8009766 <__mcmp+0x2a>
	...

08009774 <__mdiff>:
 8009774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009778:	4689      	mov	r9, r1
 800977a:	4606      	mov	r6, r0
 800977c:	4611      	mov	r1, r2
 800977e:	4648      	mov	r0, r9
 8009780:	4614      	mov	r4, r2
 8009782:	f7ff ffdb 	bl	800973c <__mcmp>
 8009786:	1e05      	subs	r5, r0, #0
 8009788:	d112      	bne.n	80097b0 <__mdiff+0x3c>
 800978a:	4629      	mov	r1, r5
 800978c:	4630      	mov	r0, r6
 800978e:	f7ff fd5b 	bl	8009248 <_Balloc>
 8009792:	4602      	mov	r2, r0
 8009794:	b928      	cbnz	r0, 80097a2 <__mdiff+0x2e>
 8009796:	4b3f      	ldr	r3, [pc, #252]	@ (8009894 <__mdiff+0x120>)
 8009798:	f240 2137 	movw	r1, #567	@ 0x237
 800979c:	483e      	ldr	r0, [pc, #248]	@ (8009898 <__mdiff+0x124>)
 800979e:	f000 fb11 	bl	8009dc4 <__assert_func>
 80097a2:	2301      	movs	r3, #1
 80097a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80097a8:	4610      	mov	r0, r2
 80097aa:	b003      	add	sp, #12
 80097ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b0:	bfbc      	itt	lt
 80097b2:	464b      	movlt	r3, r9
 80097b4:	46a1      	movlt	r9, r4
 80097b6:	4630      	mov	r0, r6
 80097b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80097bc:	bfba      	itte	lt
 80097be:	461c      	movlt	r4, r3
 80097c0:	2501      	movlt	r5, #1
 80097c2:	2500      	movge	r5, #0
 80097c4:	f7ff fd40 	bl	8009248 <_Balloc>
 80097c8:	4602      	mov	r2, r0
 80097ca:	b918      	cbnz	r0, 80097d4 <__mdiff+0x60>
 80097cc:	4b31      	ldr	r3, [pc, #196]	@ (8009894 <__mdiff+0x120>)
 80097ce:	f240 2145 	movw	r1, #581	@ 0x245
 80097d2:	e7e3      	b.n	800979c <__mdiff+0x28>
 80097d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80097d8:	6926      	ldr	r6, [r4, #16]
 80097da:	60c5      	str	r5, [r0, #12]
 80097dc:	f109 0310 	add.w	r3, r9, #16
 80097e0:	f109 0514 	add.w	r5, r9, #20
 80097e4:	f104 0e14 	add.w	lr, r4, #20
 80097e8:	f100 0b14 	add.w	fp, r0, #20
 80097ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80097f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80097f4:	9301      	str	r3, [sp, #4]
 80097f6:	46d9      	mov	r9, fp
 80097f8:	f04f 0c00 	mov.w	ip, #0
 80097fc:	9b01      	ldr	r3, [sp, #4]
 80097fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009802:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009806:	9301      	str	r3, [sp, #4]
 8009808:	fa1f f38a 	uxth.w	r3, sl
 800980c:	4619      	mov	r1, r3
 800980e:	b283      	uxth	r3, r0
 8009810:	1acb      	subs	r3, r1, r3
 8009812:	0c00      	lsrs	r0, r0, #16
 8009814:	4463      	add	r3, ip
 8009816:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800981a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800981e:	b29b      	uxth	r3, r3
 8009820:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009824:	4576      	cmp	r6, lr
 8009826:	f849 3b04 	str.w	r3, [r9], #4
 800982a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800982e:	d8e5      	bhi.n	80097fc <__mdiff+0x88>
 8009830:	1b33      	subs	r3, r6, r4
 8009832:	3b15      	subs	r3, #21
 8009834:	f023 0303 	bic.w	r3, r3, #3
 8009838:	3415      	adds	r4, #21
 800983a:	3304      	adds	r3, #4
 800983c:	42a6      	cmp	r6, r4
 800983e:	bf38      	it	cc
 8009840:	2304      	movcc	r3, #4
 8009842:	441d      	add	r5, r3
 8009844:	445b      	add	r3, fp
 8009846:	461e      	mov	r6, r3
 8009848:	462c      	mov	r4, r5
 800984a:	4544      	cmp	r4, r8
 800984c:	d30e      	bcc.n	800986c <__mdiff+0xf8>
 800984e:	f108 0103 	add.w	r1, r8, #3
 8009852:	1b49      	subs	r1, r1, r5
 8009854:	f021 0103 	bic.w	r1, r1, #3
 8009858:	3d03      	subs	r5, #3
 800985a:	45a8      	cmp	r8, r5
 800985c:	bf38      	it	cc
 800985e:	2100      	movcc	r1, #0
 8009860:	440b      	add	r3, r1
 8009862:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009866:	b191      	cbz	r1, 800988e <__mdiff+0x11a>
 8009868:	6117      	str	r7, [r2, #16]
 800986a:	e79d      	b.n	80097a8 <__mdiff+0x34>
 800986c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009870:	46e6      	mov	lr, ip
 8009872:	0c08      	lsrs	r0, r1, #16
 8009874:	fa1c fc81 	uxtah	ip, ip, r1
 8009878:	4471      	add	r1, lr
 800987a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800987e:	b289      	uxth	r1, r1
 8009880:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009884:	f846 1b04 	str.w	r1, [r6], #4
 8009888:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800988c:	e7dd      	b.n	800984a <__mdiff+0xd6>
 800988e:	3f01      	subs	r7, #1
 8009890:	e7e7      	b.n	8009862 <__mdiff+0xee>
 8009892:	bf00      	nop
 8009894:	0800adcc 	.word	0x0800adcc
 8009898:	0800addd 	.word	0x0800addd

0800989c <__d2b>:
 800989c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80098a0:	460f      	mov	r7, r1
 80098a2:	2101      	movs	r1, #1
 80098a4:	ec59 8b10 	vmov	r8, r9, d0
 80098a8:	4616      	mov	r6, r2
 80098aa:	f7ff fccd 	bl	8009248 <_Balloc>
 80098ae:	4604      	mov	r4, r0
 80098b0:	b930      	cbnz	r0, 80098c0 <__d2b+0x24>
 80098b2:	4602      	mov	r2, r0
 80098b4:	4b23      	ldr	r3, [pc, #140]	@ (8009944 <__d2b+0xa8>)
 80098b6:	4824      	ldr	r0, [pc, #144]	@ (8009948 <__d2b+0xac>)
 80098b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80098bc:	f000 fa82 	bl	8009dc4 <__assert_func>
 80098c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80098c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098c8:	b10d      	cbz	r5, 80098ce <__d2b+0x32>
 80098ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098ce:	9301      	str	r3, [sp, #4]
 80098d0:	f1b8 0300 	subs.w	r3, r8, #0
 80098d4:	d023      	beq.n	800991e <__d2b+0x82>
 80098d6:	4668      	mov	r0, sp
 80098d8:	9300      	str	r3, [sp, #0]
 80098da:	f7ff fd7c 	bl	80093d6 <__lo0bits>
 80098de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80098e2:	b1d0      	cbz	r0, 800991a <__d2b+0x7e>
 80098e4:	f1c0 0320 	rsb	r3, r0, #32
 80098e8:	fa02 f303 	lsl.w	r3, r2, r3
 80098ec:	430b      	orrs	r3, r1
 80098ee:	40c2      	lsrs	r2, r0
 80098f0:	6163      	str	r3, [r4, #20]
 80098f2:	9201      	str	r2, [sp, #4]
 80098f4:	9b01      	ldr	r3, [sp, #4]
 80098f6:	61a3      	str	r3, [r4, #24]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	bf0c      	ite	eq
 80098fc:	2201      	moveq	r2, #1
 80098fe:	2202      	movne	r2, #2
 8009900:	6122      	str	r2, [r4, #16]
 8009902:	b1a5      	cbz	r5, 800992e <__d2b+0x92>
 8009904:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009908:	4405      	add	r5, r0
 800990a:	603d      	str	r5, [r7, #0]
 800990c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009910:	6030      	str	r0, [r6, #0]
 8009912:	4620      	mov	r0, r4
 8009914:	b003      	add	sp, #12
 8009916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800991a:	6161      	str	r1, [r4, #20]
 800991c:	e7ea      	b.n	80098f4 <__d2b+0x58>
 800991e:	a801      	add	r0, sp, #4
 8009920:	f7ff fd59 	bl	80093d6 <__lo0bits>
 8009924:	9b01      	ldr	r3, [sp, #4]
 8009926:	6163      	str	r3, [r4, #20]
 8009928:	3020      	adds	r0, #32
 800992a:	2201      	movs	r2, #1
 800992c:	e7e8      	b.n	8009900 <__d2b+0x64>
 800992e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009932:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009936:	6038      	str	r0, [r7, #0]
 8009938:	6918      	ldr	r0, [r3, #16]
 800993a:	f7ff fd2d 	bl	8009398 <__hi0bits>
 800993e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009942:	e7e5      	b.n	8009910 <__d2b+0x74>
 8009944:	0800adcc 	.word	0x0800adcc
 8009948:	0800addd 	.word	0x0800addd

0800994c <__ssputs_r>:
 800994c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009950:	688e      	ldr	r6, [r1, #8]
 8009952:	461f      	mov	r7, r3
 8009954:	42be      	cmp	r6, r7
 8009956:	680b      	ldr	r3, [r1, #0]
 8009958:	4682      	mov	sl, r0
 800995a:	460c      	mov	r4, r1
 800995c:	4690      	mov	r8, r2
 800995e:	d82d      	bhi.n	80099bc <__ssputs_r+0x70>
 8009960:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009964:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009968:	d026      	beq.n	80099b8 <__ssputs_r+0x6c>
 800996a:	6965      	ldr	r5, [r4, #20]
 800996c:	6909      	ldr	r1, [r1, #16]
 800996e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009972:	eba3 0901 	sub.w	r9, r3, r1
 8009976:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800997a:	1c7b      	adds	r3, r7, #1
 800997c:	444b      	add	r3, r9
 800997e:	106d      	asrs	r5, r5, #1
 8009980:	429d      	cmp	r5, r3
 8009982:	bf38      	it	cc
 8009984:	461d      	movcc	r5, r3
 8009986:	0553      	lsls	r3, r2, #21
 8009988:	d527      	bpl.n	80099da <__ssputs_r+0x8e>
 800998a:	4629      	mov	r1, r5
 800998c:	f7ff fbd0 	bl	8009130 <_malloc_r>
 8009990:	4606      	mov	r6, r0
 8009992:	b360      	cbz	r0, 80099ee <__ssputs_r+0xa2>
 8009994:	6921      	ldr	r1, [r4, #16]
 8009996:	464a      	mov	r2, r9
 8009998:	f000 fa06 	bl	8009da8 <memcpy>
 800999c:	89a3      	ldrh	r3, [r4, #12]
 800999e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80099a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099a6:	81a3      	strh	r3, [r4, #12]
 80099a8:	6126      	str	r6, [r4, #16]
 80099aa:	6165      	str	r5, [r4, #20]
 80099ac:	444e      	add	r6, r9
 80099ae:	eba5 0509 	sub.w	r5, r5, r9
 80099b2:	6026      	str	r6, [r4, #0]
 80099b4:	60a5      	str	r5, [r4, #8]
 80099b6:	463e      	mov	r6, r7
 80099b8:	42be      	cmp	r6, r7
 80099ba:	d900      	bls.n	80099be <__ssputs_r+0x72>
 80099bc:	463e      	mov	r6, r7
 80099be:	6820      	ldr	r0, [r4, #0]
 80099c0:	4632      	mov	r2, r6
 80099c2:	4641      	mov	r1, r8
 80099c4:	f000 f9c6 	bl	8009d54 <memmove>
 80099c8:	68a3      	ldr	r3, [r4, #8]
 80099ca:	1b9b      	subs	r3, r3, r6
 80099cc:	60a3      	str	r3, [r4, #8]
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	4433      	add	r3, r6
 80099d2:	6023      	str	r3, [r4, #0]
 80099d4:	2000      	movs	r0, #0
 80099d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099da:	462a      	mov	r2, r5
 80099dc:	f000 fa36 	bl	8009e4c <_realloc_r>
 80099e0:	4606      	mov	r6, r0
 80099e2:	2800      	cmp	r0, #0
 80099e4:	d1e0      	bne.n	80099a8 <__ssputs_r+0x5c>
 80099e6:	6921      	ldr	r1, [r4, #16]
 80099e8:	4650      	mov	r0, sl
 80099ea:	f7ff fb2d 	bl	8009048 <_free_r>
 80099ee:	230c      	movs	r3, #12
 80099f0:	f8ca 3000 	str.w	r3, [sl]
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099fa:	81a3      	strh	r3, [r4, #12]
 80099fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009a00:	e7e9      	b.n	80099d6 <__ssputs_r+0x8a>
	...

08009a04 <_svfiprintf_r>:
 8009a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a08:	4698      	mov	r8, r3
 8009a0a:	898b      	ldrh	r3, [r1, #12]
 8009a0c:	061b      	lsls	r3, r3, #24
 8009a0e:	b09d      	sub	sp, #116	@ 0x74
 8009a10:	4607      	mov	r7, r0
 8009a12:	460d      	mov	r5, r1
 8009a14:	4614      	mov	r4, r2
 8009a16:	d510      	bpl.n	8009a3a <_svfiprintf_r+0x36>
 8009a18:	690b      	ldr	r3, [r1, #16]
 8009a1a:	b973      	cbnz	r3, 8009a3a <_svfiprintf_r+0x36>
 8009a1c:	2140      	movs	r1, #64	@ 0x40
 8009a1e:	f7ff fb87 	bl	8009130 <_malloc_r>
 8009a22:	6028      	str	r0, [r5, #0]
 8009a24:	6128      	str	r0, [r5, #16]
 8009a26:	b930      	cbnz	r0, 8009a36 <_svfiprintf_r+0x32>
 8009a28:	230c      	movs	r3, #12
 8009a2a:	603b      	str	r3, [r7, #0]
 8009a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a30:	b01d      	add	sp, #116	@ 0x74
 8009a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a36:	2340      	movs	r3, #64	@ 0x40
 8009a38:	616b      	str	r3, [r5, #20]
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a3e:	2320      	movs	r3, #32
 8009a40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a44:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a48:	2330      	movs	r3, #48	@ 0x30
 8009a4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009be8 <_svfiprintf_r+0x1e4>
 8009a4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a52:	f04f 0901 	mov.w	r9, #1
 8009a56:	4623      	mov	r3, r4
 8009a58:	469a      	mov	sl, r3
 8009a5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a5e:	b10a      	cbz	r2, 8009a64 <_svfiprintf_r+0x60>
 8009a60:	2a25      	cmp	r2, #37	@ 0x25
 8009a62:	d1f9      	bne.n	8009a58 <_svfiprintf_r+0x54>
 8009a64:	ebba 0b04 	subs.w	fp, sl, r4
 8009a68:	d00b      	beq.n	8009a82 <_svfiprintf_r+0x7e>
 8009a6a:	465b      	mov	r3, fp
 8009a6c:	4622      	mov	r2, r4
 8009a6e:	4629      	mov	r1, r5
 8009a70:	4638      	mov	r0, r7
 8009a72:	f7ff ff6b 	bl	800994c <__ssputs_r>
 8009a76:	3001      	adds	r0, #1
 8009a78:	f000 80a7 	beq.w	8009bca <_svfiprintf_r+0x1c6>
 8009a7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a7e:	445a      	add	r2, fp
 8009a80:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a82:	f89a 3000 	ldrb.w	r3, [sl]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f000 809f 	beq.w	8009bca <_svfiprintf_r+0x1c6>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a96:	f10a 0a01 	add.w	sl, sl, #1
 8009a9a:	9304      	str	r3, [sp, #16]
 8009a9c:	9307      	str	r3, [sp, #28]
 8009a9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009aa2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009aa4:	4654      	mov	r4, sl
 8009aa6:	2205      	movs	r2, #5
 8009aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aac:	484e      	ldr	r0, [pc, #312]	@ (8009be8 <_svfiprintf_r+0x1e4>)
 8009aae:	f7f6 fbb7 	bl	8000220 <memchr>
 8009ab2:	9a04      	ldr	r2, [sp, #16]
 8009ab4:	b9d8      	cbnz	r0, 8009aee <_svfiprintf_r+0xea>
 8009ab6:	06d0      	lsls	r0, r2, #27
 8009ab8:	bf44      	itt	mi
 8009aba:	2320      	movmi	r3, #32
 8009abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ac0:	0711      	lsls	r1, r2, #28
 8009ac2:	bf44      	itt	mi
 8009ac4:	232b      	movmi	r3, #43	@ 0x2b
 8009ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aca:	f89a 3000 	ldrb.w	r3, [sl]
 8009ace:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ad0:	d015      	beq.n	8009afe <_svfiprintf_r+0xfa>
 8009ad2:	9a07      	ldr	r2, [sp, #28]
 8009ad4:	4654      	mov	r4, sl
 8009ad6:	2000      	movs	r0, #0
 8009ad8:	f04f 0c0a 	mov.w	ip, #10
 8009adc:	4621      	mov	r1, r4
 8009ade:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ae2:	3b30      	subs	r3, #48	@ 0x30
 8009ae4:	2b09      	cmp	r3, #9
 8009ae6:	d94b      	bls.n	8009b80 <_svfiprintf_r+0x17c>
 8009ae8:	b1b0      	cbz	r0, 8009b18 <_svfiprintf_r+0x114>
 8009aea:	9207      	str	r2, [sp, #28]
 8009aec:	e014      	b.n	8009b18 <_svfiprintf_r+0x114>
 8009aee:	eba0 0308 	sub.w	r3, r0, r8
 8009af2:	fa09 f303 	lsl.w	r3, r9, r3
 8009af6:	4313      	orrs	r3, r2
 8009af8:	9304      	str	r3, [sp, #16]
 8009afa:	46a2      	mov	sl, r4
 8009afc:	e7d2      	b.n	8009aa4 <_svfiprintf_r+0xa0>
 8009afe:	9b03      	ldr	r3, [sp, #12]
 8009b00:	1d19      	adds	r1, r3, #4
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	9103      	str	r1, [sp, #12]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	bfbb      	ittet	lt
 8009b0a:	425b      	neglt	r3, r3
 8009b0c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b10:	9307      	strge	r3, [sp, #28]
 8009b12:	9307      	strlt	r3, [sp, #28]
 8009b14:	bfb8      	it	lt
 8009b16:	9204      	strlt	r2, [sp, #16]
 8009b18:	7823      	ldrb	r3, [r4, #0]
 8009b1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b1c:	d10a      	bne.n	8009b34 <_svfiprintf_r+0x130>
 8009b1e:	7863      	ldrb	r3, [r4, #1]
 8009b20:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b22:	d132      	bne.n	8009b8a <_svfiprintf_r+0x186>
 8009b24:	9b03      	ldr	r3, [sp, #12]
 8009b26:	1d1a      	adds	r2, r3, #4
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	9203      	str	r2, [sp, #12]
 8009b2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b30:	3402      	adds	r4, #2
 8009b32:	9305      	str	r3, [sp, #20]
 8009b34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009bf8 <_svfiprintf_r+0x1f4>
 8009b38:	7821      	ldrb	r1, [r4, #0]
 8009b3a:	2203      	movs	r2, #3
 8009b3c:	4650      	mov	r0, sl
 8009b3e:	f7f6 fb6f 	bl	8000220 <memchr>
 8009b42:	b138      	cbz	r0, 8009b54 <_svfiprintf_r+0x150>
 8009b44:	9b04      	ldr	r3, [sp, #16]
 8009b46:	eba0 000a 	sub.w	r0, r0, sl
 8009b4a:	2240      	movs	r2, #64	@ 0x40
 8009b4c:	4082      	lsls	r2, r0
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	3401      	adds	r4, #1
 8009b52:	9304      	str	r3, [sp, #16]
 8009b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b58:	4824      	ldr	r0, [pc, #144]	@ (8009bec <_svfiprintf_r+0x1e8>)
 8009b5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b5e:	2206      	movs	r2, #6
 8009b60:	f7f6 fb5e 	bl	8000220 <memchr>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d036      	beq.n	8009bd6 <_svfiprintf_r+0x1d2>
 8009b68:	4b21      	ldr	r3, [pc, #132]	@ (8009bf0 <_svfiprintf_r+0x1ec>)
 8009b6a:	bb1b      	cbnz	r3, 8009bb4 <_svfiprintf_r+0x1b0>
 8009b6c:	9b03      	ldr	r3, [sp, #12]
 8009b6e:	3307      	adds	r3, #7
 8009b70:	f023 0307 	bic.w	r3, r3, #7
 8009b74:	3308      	adds	r3, #8
 8009b76:	9303      	str	r3, [sp, #12]
 8009b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b7a:	4433      	add	r3, r6
 8009b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b7e:	e76a      	b.n	8009a56 <_svfiprintf_r+0x52>
 8009b80:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b84:	460c      	mov	r4, r1
 8009b86:	2001      	movs	r0, #1
 8009b88:	e7a8      	b.n	8009adc <_svfiprintf_r+0xd8>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	3401      	adds	r4, #1
 8009b8e:	9305      	str	r3, [sp, #20]
 8009b90:	4619      	mov	r1, r3
 8009b92:	f04f 0c0a 	mov.w	ip, #10
 8009b96:	4620      	mov	r0, r4
 8009b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b9c:	3a30      	subs	r2, #48	@ 0x30
 8009b9e:	2a09      	cmp	r2, #9
 8009ba0:	d903      	bls.n	8009baa <_svfiprintf_r+0x1a6>
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d0c6      	beq.n	8009b34 <_svfiprintf_r+0x130>
 8009ba6:	9105      	str	r1, [sp, #20]
 8009ba8:	e7c4      	b.n	8009b34 <_svfiprintf_r+0x130>
 8009baa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bae:	4604      	mov	r4, r0
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e7f0      	b.n	8009b96 <_svfiprintf_r+0x192>
 8009bb4:	ab03      	add	r3, sp, #12
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	462a      	mov	r2, r5
 8009bba:	4b0e      	ldr	r3, [pc, #56]	@ (8009bf4 <_svfiprintf_r+0x1f0>)
 8009bbc:	a904      	add	r1, sp, #16
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	f7fd fe96 	bl	80078f0 <_printf_float>
 8009bc4:	1c42      	adds	r2, r0, #1
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	d1d6      	bne.n	8009b78 <_svfiprintf_r+0x174>
 8009bca:	89ab      	ldrh	r3, [r5, #12]
 8009bcc:	065b      	lsls	r3, r3, #25
 8009bce:	f53f af2d 	bmi.w	8009a2c <_svfiprintf_r+0x28>
 8009bd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bd4:	e72c      	b.n	8009a30 <_svfiprintf_r+0x2c>
 8009bd6:	ab03      	add	r3, sp, #12
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	462a      	mov	r2, r5
 8009bdc:	4b05      	ldr	r3, [pc, #20]	@ (8009bf4 <_svfiprintf_r+0x1f0>)
 8009bde:	a904      	add	r1, sp, #16
 8009be0:	4638      	mov	r0, r7
 8009be2:	f7fe f91d 	bl	8007e20 <_printf_i>
 8009be6:	e7ed      	b.n	8009bc4 <_svfiprintf_r+0x1c0>
 8009be8:	0800af38 	.word	0x0800af38
 8009bec:	0800af42 	.word	0x0800af42
 8009bf0:	080078f1 	.word	0x080078f1
 8009bf4:	0800994d 	.word	0x0800994d
 8009bf8:	0800af3e 	.word	0x0800af3e

08009bfc <__sflush_r>:
 8009bfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c04:	0716      	lsls	r6, r2, #28
 8009c06:	4605      	mov	r5, r0
 8009c08:	460c      	mov	r4, r1
 8009c0a:	d454      	bmi.n	8009cb6 <__sflush_r+0xba>
 8009c0c:	684b      	ldr	r3, [r1, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	dc02      	bgt.n	8009c18 <__sflush_r+0x1c>
 8009c12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	dd48      	ble.n	8009caa <__sflush_r+0xae>
 8009c18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c1a:	2e00      	cmp	r6, #0
 8009c1c:	d045      	beq.n	8009caa <__sflush_r+0xae>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009c24:	682f      	ldr	r7, [r5, #0]
 8009c26:	6a21      	ldr	r1, [r4, #32]
 8009c28:	602b      	str	r3, [r5, #0]
 8009c2a:	d030      	beq.n	8009c8e <__sflush_r+0x92>
 8009c2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c2e:	89a3      	ldrh	r3, [r4, #12]
 8009c30:	0759      	lsls	r1, r3, #29
 8009c32:	d505      	bpl.n	8009c40 <__sflush_r+0x44>
 8009c34:	6863      	ldr	r3, [r4, #4]
 8009c36:	1ad2      	subs	r2, r2, r3
 8009c38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c3a:	b10b      	cbz	r3, 8009c40 <__sflush_r+0x44>
 8009c3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c3e:	1ad2      	subs	r2, r2, r3
 8009c40:	2300      	movs	r3, #0
 8009c42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c44:	6a21      	ldr	r1, [r4, #32]
 8009c46:	4628      	mov	r0, r5
 8009c48:	47b0      	blx	r6
 8009c4a:	1c43      	adds	r3, r0, #1
 8009c4c:	89a3      	ldrh	r3, [r4, #12]
 8009c4e:	d106      	bne.n	8009c5e <__sflush_r+0x62>
 8009c50:	6829      	ldr	r1, [r5, #0]
 8009c52:	291d      	cmp	r1, #29
 8009c54:	d82b      	bhi.n	8009cae <__sflush_r+0xb2>
 8009c56:	4a2a      	ldr	r2, [pc, #168]	@ (8009d00 <__sflush_r+0x104>)
 8009c58:	410a      	asrs	r2, r1
 8009c5a:	07d6      	lsls	r6, r2, #31
 8009c5c:	d427      	bmi.n	8009cae <__sflush_r+0xb2>
 8009c5e:	2200      	movs	r2, #0
 8009c60:	6062      	str	r2, [r4, #4]
 8009c62:	04d9      	lsls	r1, r3, #19
 8009c64:	6922      	ldr	r2, [r4, #16]
 8009c66:	6022      	str	r2, [r4, #0]
 8009c68:	d504      	bpl.n	8009c74 <__sflush_r+0x78>
 8009c6a:	1c42      	adds	r2, r0, #1
 8009c6c:	d101      	bne.n	8009c72 <__sflush_r+0x76>
 8009c6e:	682b      	ldr	r3, [r5, #0]
 8009c70:	b903      	cbnz	r3, 8009c74 <__sflush_r+0x78>
 8009c72:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c76:	602f      	str	r7, [r5, #0]
 8009c78:	b1b9      	cbz	r1, 8009caa <__sflush_r+0xae>
 8009c7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c7e:	4299      	cmp	r1, r3
 8009c80:	d002      	beq.n	8009c88 <__sflush_r+0x8c>
 8009c82:	4628      	mov	r0, r5
 8009c84:	f7ff f9e0 	bl	8009048 <_free_r>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c8c:	e00d      	b.n	8009caa <__sflush_r+0xae>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	4628      	mov	r0, r5
 8009c92:	47b0      	blx	r6
 8009c94:	4602      	mov	r2, r0
 8009c96:	1c50      	adds	r0, r2, #1
 8009c98:	d1c9      	bne.n	8009c2e <__sflush_r+0x32>
 8009c9a:	682b      	ldr	r3, [r5, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d0c6      	beq.n	8009c2e <__sflush_r+0x32>
 8009ca0:	2b1d      	cmp	r3, #29
 8009ca2:	d001      	beq.n	8009ca8 <__sflush_r+0xac>
 8009ca4:	2b16      	cmp	r3, #22
 8009ca6:	d11e      	bne.n	8009ce6 <__sflush_r+0xea>
 8009ca8:	602f      	str	r7, [r5, #0]
 8009caa:	2000      	movs	r0, #0
 8009cac:	e022      	b.n	8009cf4 <__sflush_r+0xf8>
 8009cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cb2:	b21b      	sxth	r3, r3
 8009cb4:	e01b      	b.n	8009cee <__sflush_r+0xf2>
 8009cb6:	690f      	ldr	r7, [r1, #16]
 8009cb8:	2f00      	cmp	r7, #0
 8009cba:	d0f6      	beq.n	8009caa <__sflush_r+0xae>
 8009cbc:	0793      	lsls	r3, r2, #30
 8009cbe:	680e      	ldr	r6, [r1, #0]
 8009cc0:	bf08      	it	eq
 8009cc2:	694b      	ldreq	r3, [r1, #20]
 8009cc4:	600f      	str	r7, [r1, #0]
 8009cc6:	bf18      	it	ne
 8009cc8:	2300      	movne	r3, #0
 8009cca:	eba6 0807 	sub.w	r8, r6, r7
 8009cce:	608b      	str	r3, [r1, #8]
 8009cd0:	f1b8 0f00 	cmp.w	r8, #0
 8009cd4:	dde9      	ble.n	8009caa <__sflush_r+0xae>
 8009cd6:	6a21      	ldr	r1, [r4, #32]
 8009cd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009cda:	4643      	mov	r3, r8
 8009cdc:	463a      	mov	r2, r7
 8009cde:	4628      	mov	r0, r5
 8009ce0:	47b0      	blx	r6
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	dc08      	bgt.n	8009cf8 <__sflush_r+0xfc>
 8009ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cee:	81a3      	strh	r3, [r4, #12]
 8009cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cf8:	4407      	add	r7, r0
 8009cfa:	eba8 0800 	sub.w	r8, r8, r0
 8009cfe:	e7e7      	b.n	8009cd0 <__sflush_r+0xd4>
 8009d00:	dfbffffe 	.word	0xdfbffffe

08009d04 <_fflush_r>:
 8009d04:	b538      	push	{r3, r4, r5, lr}
 8009d06:	690b      	ldr	r3, [r1, #16]
 8009d08:	4605      	mov	r5, r0
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	b913      	cbnz	r3, 8009d14 <_fflush_r+0x10>
 8009d0e:	2500      	movs	r5, #0
 8009d10:	4628      	mov	r0, r5
 8009d12:	bd38      	pop	{r3, r4, r5, pc}
 8009d14:	b118      	cbz	r0, 8009d1e <_fflush_r+0x1a>
 8009d16:	6a03      	ldr	r3, [r0, #32]
 8009d18:	b90b      	cbnz	r3, 8009d1e <_fflush_r+0x1a>
 8009d1a:	f7fe fa2d 	bl	8008178 <__sinit>
 8009d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d0f3      	beq.n	8009d0e <_fflush_r+0xa>
 8009d26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d28:	07d0      	lsls	r0, r2, #31
 8009d2a:	d404      	bmi.n	8009d36 <_fflush_r+0x32>
 8009d2c:	0599      	lsls	r1, r3, #22
 8009d2e:	d402      	bmi.n	8009d36 <_fflush_r+0x32>
 8009d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d32:	f7fe fb38 	bl	80083a6 <__retarget_lock_acquire_recursive>
 8009d36:	4628      	mov	r0, r5
 8009d38:	4621      	mov	r1, r4
 8009d3a:	f7ff ff5f 	bl	8009bfc <__sflush_r>
 8009d3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d40:	07da      	lsls	r2, r3, #31
 8009d42:	4605      	mov	r5, r0
 8009d44:	d4e4      	bmi.n	8009d10 <_fflush_r+0xc>
 8009d46:	89a3      	ldrh	r3, [r4, #12]
 8009d48:	059b      	lsls	r3, r3, #22
 8009d4a:	d4e1      	bmi.n	8009d10 <_fflush_r+0xc>
 8009d4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d4e:	f7fe fb2b 	bl	80083a8 <__retarget_lock_release_recursive>
 8009d52:	e7dd      	b.n	8009d10 <_fflush_r+0xc>

08009d54 <memmove>:
 8009d54:	4288      	cmp	r0, r1
 8009d56:	b510      	push	{r4, lr}
 8009d58:	eb01 0402 	add.w	r4, r1, r2
 8009d5c:	d902      	bls.n	8009d64 <memmove+0x10>
 8009d5e:	4284      	cmp	r4, r0
 8009d60:	4623      	mov	r3, r4
 8009d62:	d807      	bhi.n	8009d74 <memmove+0x20>
 8009d64:	1e43      	subs	r3, r0, #1
 8009d66:	42a1      	cmp	r1, r4
 8009d68:	d008      	beq.n	8009d7c <memmove+0x28>
 8009d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d72:	e7f8      	b.n	8009d66 <memmove+0x12>
 8009d74:	4402      	add	r2, r0
 8009d76:	4601      	mov	r1, r0
 8009d78:	428a      	cmp	r2, r1
 8009d7a:	d100      	bne.n	8009d7e <memmove+0x2a>
 8009d7c:	bd10      	pop	{r4, pc}
 8009d7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d86:	e7f7      	b.n	8009d78 <memmove+0x24>

08009d88 <_sbrk_r>:
 8009d88:	b538      	push	{r3, r4, r5, lr}
 8009d8a:	4d06      	ldr	r5, [pc, #24]	@ (8009da4 <_sbrk_r+0x1c>)
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	4604      	mov	r4, r0
 8009d90:	4608      	mov	r0, r1
 8009d92:	602b      	str	r3, [r5, #0]
 8009d94:	f7f8 fc34 	bl	8002600 <_sbrk>
 8009d98:	1c43      	adds	r3, r0, #1
 8009d9a:	d102      	bne.n	8009da2 <_sbrk_r+0x1a>
 8009d9c:	682b      	ldr	r3, [r5, #0]
 8009d9e:	b103      	cbz	r3, 8009da2 <_sbrk_r+0x1a>
 8009da0:	6023      	str	r3, [r4, #0]
 8009da2:	bd38      	pop	{r3, r4, r5, pc}
 8009da4:	200005ec 	.word	0x200005ec

08009da8 <memcpy>:
 8009da8:	440a      	add	r2, r1
 8009daa:	4291      	cmp	r1, r2
 8009dac:	f100 33ff 	add.w	r3, r0, #4294967295
 8009db0:	d100      	bne.n	8009db4 <memcpy+0xc>
 8009db2:	4770      	bx	lr
 8009db4:	b510      	push	{r4, lr}
 8009db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dbe:	4291      	cmp	r1, r2
 8009dc0:	d1f9      	bne.n	8009db6 <memcpy+0xe>
 8009dc2:	bd10      	pop	{r4, pc}

08009dc4 <__assert_func>:
 8009dc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009dc6:	4614      	mov	r4, r2
 8009dc8:	461a      	mov	r2, r3
 8009dca:	4b09      	ldr	r3, [pc, #36]	@ (8009df0 <__assert_func+0x2c>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4605      	mov	r5, r0
 8009dd0:	68d8      	ldr	r0, [r3, #12]
 8009dd2:	b954      	cbnz	r4, 8009dea <__assert_func+0x26>
 8009dd4:	4b07      	ldr	r3, [pc, #28]	@ (8009df4 <__assert_func+0x30>)
 8009dd6:	461c      	mov	r4, r3
 8009dd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ddc:	9100      	str	r1, [sp, #0]
 8009dde:	462b      	mov	r3, r5
 8009de0:	4905      	ldr	r1, [pc, #20]	@ (8009df8 <__assert_func+0x34>)
 8009de2:	f000 f86f 	bl	8009ec4 <fiprintf>
 8009de6:	f000 f87f 	bl	8009ee8 <abort>
 8009dea:	4b04      	ldr	r3, [pc, #16]	@ (8009dfc <__assert_func+0x38>)
 8009dec:	e7f4      	b.n	8009dd8 <__assert_func+0x14>
 8009dee:	bf00      	nop
 8009df0:	20000028 	.word	0x20000028
 8009df4:	0800af8e 	.word	0x0800af8e
 8009df8:	0800af60 	.word	0x0800af60
 8009dfc:	0800af53 	.word	0x0800af53

08009e00 <_calloc_r>:
 8009e00:	b570      	push	{r4, r5, r6, lr}
 8009e02:	fba1 5402 	umull	r5, r4, r1, r2
 8009e06:	b93c      	cbnz	r4, 8009e18 <_calloc_r+0x18>
 8009e08:	4629      	mov	r1, r5
 8009e0a:	f7ff f991 	bl	8009130 <_malloc_r>
 8009e0e:	4606      	mov	r6, r0
 8009e10:	b928      	cbnz	r0, 8009e1e <_calloc_r+0x1e>
 8009e12:	2600      	movs	r6, #0
 8009e14:	4630      	mov	r0, r6
 8009e16:	bd70      	pop	{r4, r5, r6, pc}
 8009e18:	220c      	movs	r2, #12
 8009e1a:	6002      	str	r2, [r0, #0]
 8009e1c:	e7f9      	b.n	8009e12 <_calloc_r+0x12>
 8009e1e:	462a      	mov	r2, r5
 8009e20:	4621      	mov	r1, r4
 8009e22:	f7fe fa42 	bl	80082aa <memset>
 8009e26:	e7f5      	b.n	8009e14 <_calloc_r+0x14>

08009e28 <__ascii_mbtowc>:
 8009e28:	b082      	sub	sp, #8
 8009e2a:	b901      	cbnz	r1, 8009e2e <__ascii_mbtowc+0x6>
 8009e2c:	a901      	add	r1, sp, #4
 8009e2e:	b142      	cbz	r2, 8009e42 <__ascii_mbtowc+0x1a>
 8009e30:	b14b      	cbz	r3, 8009e46 <__ascii_mbtowc+0x1e>
 8009e32:	7813      	ldrb	r3, [r2, #0]
 8009e34:	600b      	str	r3, [r1, #0]
 8009e36:	7812      	ldrb	r2, [r2, #0]
 8009e38:	1e10      	subs	r0, r2, #0
 8009e3a:	bf18      	it	ne
 8009e3c:	2001      	movne	r0, #1
 8009e3e:	b002      	add	sp, #8
 8009e40:	4770      	bx	lr
 8009e42:	4610      	mov	r0, r2
 8009e44:	e7fb      	b.n	8009e3e <__ascii_mbtowc+0x16>
 8009e46:	f06f 0001 	mvn.w	r0, #1
 8009e4a:	e7f8      	b.n	8009e3e <__ascii_mbtowc+0x16>

08009e4c <_realloc_r>:
 8009e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e50:	4680      	mov	r8, r0
 8009e52:	4615      	mov	r5, r2
 8009e54:	460c      	mov	r4, r1
 8009e56:	b921      	cbnz	r1, 8009e62 <_realloc_r+0x16>
 8009e58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5c:	4611      	mov	r1, r2
 8009e5e:	f7ff b967 	b.w	8009130 <_malloc_r>
 8009e62:	b92a      	cbnz	r2, 8009e70 <_realloc_r+0x24>
 8009e64:	f7ff f8f0 	bl	8009048 <_free_r>
 8009e68:	2400      	movs	r4, #0
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e70:	f000 f841 	bl	8009ef6 <_malloc_usable_size_r>
 8009e74:	4285      	cmp	r5, r0
 8009e76:	4606      	mov	r6, r0
 8009e78:	d802      	bhi.n	8009e80 <_realloc_r+0x34>
 8009e7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009e7e:	d8f4      	bhi.n	8009e6a <_realloc_r+0x1e>
 8009e80:	4629      	mov	r1, r5
 8009e82:	4640      	mov	r0, r8
 8009e84:	f7ff f954 	bl	8009130 <_malloc_r>
 8009e88:	4607      	mov	r7, r0
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	d0ec      	beq.n	8009e68 <_realloc_r+0x1c>
 8009e8e:	42b5      	cmp	r5, r6
 8009e90:	462a      	mov	r2, r5
 8009e92:	4621      	mov	r1, r4
 8009e94:	bf28      	it	cs
 8009e96:	4632      	movcs	r2, r6
 8009e98:	f7ff ff86 	bl	8009da8 <memcpy>
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	4640      	mov	r0, r8
 8009ea0:	f7ff f8d2 	bl	8009048 <_free_r>
 8009ea4:	463c      	mov	r4, r7
 8009ea6:	e7e0      	b.n	8009e6a <_realloc_r+0x1e>

08009ea8 <__ascii_wctomb>:
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	4608      	mov	r0, r1
 8009eac:	b141      	cbz	r1, 8009ec0 <__ascii_wctomb+0x18>
 8009eae:	2aff      	cmp	r2, #255	@ 0xff
 8009eb0:	d904      	bls.n	8009ebc <__ascii_wctomb+0x14>
 8009eb2:	228a      	movs	r2, #138	@ 0x8a
 8009eb4:	601a      	str	r2, [r3, #0]
 8009eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eba:	4770      	bx	lr
 8009ebc:	700a      	strb	r2, [r1, #0]
 8009ebe:	2001      	movs	r0, #1
 8009ec0:	4770      	bx	lr
	...

08009ec4 <fiprintf>:
 8009ec4:	b40e      	push	{r1, r2, r3}
 8009ec6:	b503      	push	{r0, r1, lr}
 8009ec8:	4601      	mov	r1, r0
 8009eca:	ab03      	add	r3, sp, #12
 8009ecc:	4805      	ldr	r0, [pc, #20]	@ (8009ee4 <fiprintf+0x20>)
 8009ece:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ed2:	6800      	ldr	r0, [r0, #0]
 8009ed4:	9301      	str	r3, [sp, #4]
 8009ed6:	f000 f83f 	bl	8009f58 <_vfiprintf_r>
 8009eda:	b002      	add	sp, #8
 8009edc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ee0:	b003      	add	sp, #12
 8009ee2:	4770      	bx	lr
 8009ee4:	20000028 	.word	0x20000028

08009ee8 <abort>:
 8009ee8:	b508      	push	{r3, lr}
 8009eea:	2006      	movs	r0, #6
 8009eec:	f000 fa08 	bl	800a300 <raise>
 8009ef0:	2001      	movs	r0, #1
 8009ef2:	f7f8 fb0d 	bl	8002510 <_exit>

08009ef6 <_malloc_usable_size_r>:
 8009ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009efa:	1f18      	subs	r0, r3, #4
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	bfbc      	itt	lt
 8009f00:	580b      	ldrlt	r3, [r1, r0]
 8009f02:	18c0      	addlt	r0, r0, r3
 8009f04:	4770      	bx	lr

08009f06 <__sfputc_r>:
 8009f06:	6893      	ldr	r3, [r2, #8]
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	b410      	push	{r4}
 8009f0e:	6093      	str	r3, [r2, #8]
 8009f10:	da08      	bge.n	8009f24 <__sfputc_r+0x1e>
 8009f12:	6994      	ldr	r4, [r2, #24]
 8009f14:	42a3      	cmp	r3, r4
 8009f16:	db01      	blt.n	8009f1c <__sfputc_r+0x16>
 8009f18:	290a      	cmp	r1, #10
 8009f1a:	d103      	bne.n	8009f24 <__sfputc_r+0x1e>
 8009f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f20:	f000 b932 	b.w	800a188 <__swbuf_r>
 8009f24:	6813      	ldr	r3, [r2, #0]
 8009f26:	1c58      	adds	r0, r3, #1
 8009f28:	6010      	str	r0, [r2, #0]
 8009f2a:	7019      	strb	r1, [r3, #0]
 8009f2c:	4608      	mov	r0, r1
 8009f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <__sfputs_r>:
 8009f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f36:	4606      	mov	r6, r0
 8009f38:	460f      	mov	r7, r1
 8009f3a:	4614      	mov	r4, r2
 8009f3c:	18d5      	adds	r5, r2, r3
 8009f3e:	42ac      	cmp	r4, r5
 8009f40:	d101      	bne.n	8009f46 <__sfputs_r+0x12>
 8009f42:	2000      	movs	r0, #0
 8009f44:	e007      	b.n	8009f56 <__sfputs_r+0x22>
 8009f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f4a:	463a      	mov	r2, r7
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	f7ff ffda 	bl	8009f06 <__sfputc_r>
 8009f52:	1c43      	adds	r3, r0, #1
 8009f54:	d1f3      	bne.n	8009f3e <__sfputs_r+0xa>
 8009f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f58 <_vfiprintf_r>:
 8009f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5c:	460d      	mov	r5, r1
 8009f5e:	b09d      	sub	sp, #116	@ 0x74
 8009f60:	4614      	mov	r4, r2
 8009f62:	4698      	mov	r8, r3
 8009f64:	4606      	mov	r6, r0
 8009f66:	b118      	cbz	r0, 8009f70 <_vfiprintf_r+0x18>
 8009f68:	6a03      	ldr	r3, [r0, #32]
 8009f6a:	b90b      	cbnz	r3, 8009f70 <_vfiprintf_r+0x18>
 8009f6c:	f7fe f904 	bl	8008178 <__sinit>
 8009f70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f72:	07d9      	lsls	r1, r3, #31
 8009f74:	d405      	bmi.n	8009f82 <_vfiprintf_r+0x2a>
 8009f76:	89ab      	ldrh	r3, [r5, #12]
 8009f78:	059a      	lsls	r2, r3, #22
 8009f7a:	d402      	bmi.n	8009f82 <_vfiprintf_r+0x2a>
 8009f7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f7e:	f7fe fa12 	bl	80083a6 <__retarget_lock_acquire_recursive>
 8009f82:	89ab      	ldrh	r3, [r5, #12]
 8009f84:	071b      	lsls	r3, r3, #28
 8009f86:	d501      	bpl.n	8009f8c <_vfiprintf_r+0x34>
 8009f88:	692b      	ldr	r3, [r5, #16]
 8009f8a:	b99b      	cbnz	r3, 8009fb4 <_vfiprintf_r+0x5c>
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	4630      	mov	r0, r6
 8009f90:	f000 f938 	bl	800a204 <__swsetup_r>
 8009f94:	b170      	cbz	r0, 8009fb4 <_vfiprintf_r+0x5c>
 8009f96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f98:	07dc      	lsls	r4, r3, #31
 8009f9a:	d504      	bpl.n	8009fa6 <_vfiprintf_r+0x4e>
 8009f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa0:	b01d      	add	sp, #116	@ 0x74
 8009fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa6:	89ab      	ldrh	r3, [r5, #12]
 8009fa8:	0598      	lsls	r0, r3, #22
 8009faa:	d4f7      	bmi.n	8009f9c <_vfiprintf_r+0x44>
 8009fac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fae:	f7fe f9fb 	bl	80083a8 <__retarget_lock_release_recursive>
 8009fb2:	e7f3      	b.n	8009f9c <_vfiprintf_r+0x44>
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fb8:	2320      	movs	r3, #32
 8009fba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009fbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fc2:	2330      	movs	r3, #48	@ 0x30
 8009fc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a174 <_vfiprintf_r+0x21c>
 8009fc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fcc:	f04f 0901 	mov.w	r9, #1
 8009fd0:	4623      	mov	r3, r4
 8009fd2:	469a      	mov	sl, r3
 8009fd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fd8:	b10a      	cbz	r2, 8009fde <_vfiprintf_r+0x86>
 8009fda:	2a25      	cmp	r2, #37	@ 0x25
 8009fdc:	d1f9      	bne.n	8009fd2 <_vfiprintf_r+0x7a>
 8009fde:	ebba 0b04 	subs.w	fp, sl, r4
 8009fe2:	d00b      	beq.n	8009ffc <_vfiprintf_r+0xa4>
 8009fe4:	465b      	mov	r3, fp
 8009fe6:	4622      	mov	r2, r4
 8009fe8:	4629      	mov	r1, r5
 8009fea:	4630      	mov	r0, r6
 8009fec:	f7ff ffa2 	bl	8009f34 <__sfputs_r>
 8009ff0:	3001      	adds	r0, #1
 8009ff2:	f000 80a7 	beq.w	800a144 <_vfiprintf_r+0x1ec>
 8009ff6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ff8:	445a      	add	r2, fp
 8009ffa:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ffc:	f89a 3000 	ldrb.w	r3, [sl]
 800a000:	2b00      	cmp	r3, #0
 800a002:	f000 809f 	beq.w	800a144 <_vfiprintf_r+0x1ec>
 800a006:	2300      	movs	r3, #0
 800a008:	f04f 32ff 	mov.w	r2, #4294967295
 800a00c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a010:	f10a 0a01 	add.w	sl, sl, #1
 800a014:	9304      	str	r3, [sp, #16]
 800a016:	9307      	str	r3, [sp, #28]
 800a018:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a01c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a01e:	4654      	mov	r4, sl
 800a020:	2205      	movs	r2, #5
 800a022:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a026:	4853      	ldr	r0, [pc, #332]	@ (800a174 <_vfiprintf_r+0x21c>)
 800a028:	f7f6 f8fa 	bl	8000220 <memchr>
 800a02c:	9a04      	ldr	r2, [sp, #16]
 800a02e:	b9d8      	cbnz	r0, 800a068 <_vfiprintf_r+0x110>
 800a030:	06d1      	lsls	r1, r2, #27
 800a032:	bf44      	itt	mi
 800a034:	2320      	movmi	r3, #32
 800a036:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a03a:	0713      	lsls	r3, r2, #28
 800a03c:	bf44      	itt	mi
 800a03e:	232b      	movmi	r3, #43	@ 0x2b
 800a040:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a044:	f89a 3000 	ldrb.w	r3, [sl]
 800a048:	2b2a      	cmp	r3, #42	@ 0x2a
 800a04a:	d015      	beq.n	800a078 <_vfiprintf_r+0x120>
 800a04c:	9a07      	ldr	r2, [sp, #28]
 800a04e:	4654      	mov	r4, sl
 800a050:	2000      	movs	r0, #0
 800a052:	f04f 0c0a 	mov.w	ip, #10
 800a056:	4621      	mov	r1, r4
 800a058:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a05c:	3b30      	subs	r3, #48	@ 0x30
 800a05e:	2b09      	cmp	r3, #9
 800a060:	d94b      	bls.n	800a0fa <_vfiprintf_r+0x1a2>
 800a062:	b1b0      	cbz	r0, 800a092 <_vfiprintf_r+0x13a>
 800a064:	9207      	str	r2, [sp, #28]
 800a066:	e014      	b.n	800a092 <_vfiprintf_r+0x13a>
 800a068:	eba0 0308 	sub.w	r3, r0, r8
 800a06c:	fa09 f303 	lsl.w	r3, r9, r3
 800a070:	4313      	orrs	r3, r2
 800a072:	9304      	str	r3, [sp, #16]
 800a074:	46a2      	mov	sl, r4
 800a076:	e7d2      	b.n	800a01e <_vfiprintf_r+0xc6>
 800a078:	9b03      	ldr	r3, [sp, #12]
 800a07a:	1d19      	adds	r1, r3, #4
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	9103      	str	r1, [sp, #12]
 800a080:	2b00      	cmp	r3, #0
 800a082:	bfbb      	ittet	lt
 800a084:	425b      	neglt	r3, r3
 800a086:	f042 0202 	orrlt.w	r2, r2, #2
 800a08a:	9307      	strge	r3, [sp, #28]
 800a08c:	9307      	strlt	r3, [sp, #28]
 800a08e:	bfb8      	it	lt
 800a090:	9204      	strlt	r2, [sp, #16]
 800a092:	7823      	ldrb	r3, [r4, #0]
 800a094:	2b2e      	cmp	r3, #46	@ 0x2e
 800a096:	d10a      	bne.n	800a0ae <_vfiprintf_r+0x156>
 800a098:	7863      	ldrb	r3, [r4, #1]
 800a09a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a09c:	d132      	bne.n	800a104 <_vfiprintf_r+0x1ac>
 800a09e:	9b03      	ldr	r3, [sp, #12]
 800a0a0:	1d1a      	adds	r2, r3, #4
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	9203      	str	r2, [sp, #12]
 800a0a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0aa:	3402      	adds	r4, #2
 800a0ac:	9305      	str	r3, [sp, #20]
 800a0ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a184 <_vfiprintf_r+0x22c>
 800a0b2:	7821      	ldrb	r1, [r4, #0]
 800a0b4:	2203      	movs	r2, #3
 800a0b6:	4650      	mov	r0, sl
 800a0b8:	f7f6 f8b2 	bl	8000220 <memchr>
 800a0bc:	b138      	cbz	r0, 800a0ce <_vfiprintf_r+0x176>
 800a0be:	9b04      	ldr	r3, [sp, #16]
 800a0c0:	eba0 000a 	sub.w	r0, r0, sl
 800a0c4:	2240      	movs	r2, #64	@ 0x40
 800a0c6:	4082      	lsls	r2, r0
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	3401      	adds	r4, #1
 800a0cc:	9304      	str	r3, [sp, #16]
 800a0ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d2:	4829      	ldr	r0, [pc, #164]	@ (800a178 <_vfiprintf_r+0x220>)
 800a0d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0d8:	2206      	movs	r2, #6
 800a0da:	f7f6 f8a1 	bl	8000220 <memchr>
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	d03f      	beq.n	800a162 <_vfiprintf_r+0x20a>
 800a0e2:	4b26      	ldr	r3, [pc, #152]	@ (800a17c <_vfiprintf_r+0x224>)
 800a0e4:	bb1b      	cbnz	r3, 800a12e <_vfiprintf_r+0x1d6>
 800a0e6:	9b03      	ldr	r3, [sp, #12]
 800a0e8:	3307      	adds	r3, #7
 800a0ea:	f023 0307 	bic.w	r3, r3, #7
 800a0ee:	3308      	adds	r3, #8
 800a0f0:	9303      	str	r3, [sp, #12]
 800a0f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0f4:	443b      	add	r3, r7
 800a0f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0f8:	e76a      	b.n	8009fd0 <_vfiprintf_r+0x78>
 800a0fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0fe:	460c      	mov	r4, r1
 800a100:	2001      	movs	r0, #1
 800a102:	e7a8      	b.n	800a056 <_vfiprintf_r+0xfe>
 800a104:	2300      	movs	r3, #0
 800a106:	3401      	adds	r4, #1
 800a108:	9305      	str	r3, [sp, #20]
 800a10a:	4619      	mov	r1, r3
 800a10c:	f04f 0c0a 	mov.w	ip, #10
 800a110:	4620      	mov	r0, r4
 800a112:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a116:	3a30      	subs	r2, #48	@ 0x30
 800a118:	2a09      	cmp	r2, #9
 800a11a:	d903      	bls.n	800a124 <_vfiprintf_r+0x1cc>
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d0c6      	beq.n	800a0ae <_vfiprintf_r+0x156>
 800a120:	9105      	str	r1, [sp, #20]
 800a122:	e7c4      	b.n	800a0ae <_vfiprintf_r+0x156>
 800a124:	fb0c 2101 	mla	r1, ip, r1, r2
 800a128:	4604      	mov	r4, r0
 800a12a:	2301      	movs	r3, #1
 800a12c:	e7f0      	b.n	800a110 <_vfiprintf_r+0x1b8>
 800a12e:	ab03      	add	r3, sp, #12
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	462a      	mov	r2, r5
 800a134:	4b12      	ldr	r3, [pc, #72]	@ (800a180 <_vfiprintf_r+0x228>)
 800a136:	a904      	add	r1, sp, #16
 800a138:	4630      	mov	r0, r6
 800a13a:	f7fd fbd9 	bl	80078f0 <_printf_float>
 800a13e:	4607      	mov	r7, r0
 800a140:	1c78      	adds	r0, r7, #1
 800a142:	d1d6      	bne.n	800a0f2 <_vfiprintf_r+0x19a>
 800a144:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a146:	07d9      	lsls	r1, r3, #31
 800a148:	d405      	bmi.n	800a156 <_vfiprintf_r+0x1fe>
 800a14a:	89ab      	ldrh	r3, [r5, #12]
 800a14c:	059a      	lsls	r2, r3, #22
 800a14e:	d402      	bmi.n	800a156 <_vfiprintf_r+0x1fe>
 800a150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a152:	f7fe f929 	bl	80083a8 <__retarget_lock_release_recursive>
 800a156:	89ab      	ldrh	r3, [r5, #12]
 800a158:	065b      	lsls	r3, r3, #25
 800a15a:	f53f af1f 	bmi.w	8009f9c <_vfiprintf_r+0x44>
 800a15e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a160:	e71e      	b.n	8009fa0 <_vfiprintf_r+0x48>
 800a162:	ab03      	add	r3, sp, #12
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	462a      	mov	r2, r5
 800a168:	4b05      	ldr	r3, [pc, #20]	@ (800a180 <_vfiprintf_r+0x228>)
 800a16a:	a904      	add	r1, sp, #16
 800a16c:	4630      	mov	r0, r6
 800a16e:	f7fd fe57 	bl	8007e20 <_printf_i>
 800a172:	e7e4      	b.n	800a13e <_vfiprintf_r+0x1e6>
 800a174:	0800af38 	.word	0x0800af38
 800a178:	0800af42 	.word	0x0800af42
 800a17c:	080078f1 	.word	0x080078f1
 800a180:	08009f35 	.word	0x08009f35
 800a184:	0800af3e 	.word	0x0800af3e

0800a188 <__swbuf_r>:
 800a188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18a:	460e      	mov	r6, r1
 800a18c:	4614      	mov	r4, r2
 800a18e:	4605      	mov	r5, r0
 800a190:	b118      	cbz	r0, 800a19a <__swbuf_r+0x12>
 800a192:	6a03      	ldr	r3, [r0, #32]
 800a194:	b90b      	cbnz	r3, 800a19a <__swbuf_r+0x12>
 800a196:	f7fd ffef 	bl	8008178 <__sinit>
 800a19a:	69a3      	ldr	r3, [r4, #24]
 800a19c:	60a3      	str	r3, [r4, #8]
 800a19e:	89a3      	ldrh	r3, [r4, #12]
 800a1a0:	071a      	lsls	r2, r3, #28
 800a1a2:	d501      	bpl.n	800a1a8 <__swbuf_r+0x20>
 800a1a4:	6923      	ldr	r3, [r4, #16]
 800a1a6:	b943      	cbnz	r3, 800a1ba <__swbuf_r+0x32>
 800a1a8:	4621      	mov	r1, r4
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	f000 f82a 	bl	800a204 <__swsetup_r>
 800a1b0:	b118      	cbz	r0, 800a1ba <__swbuf_r+0x32>
 800a1b2:	f04f 37ff 	mov.w	r7, #4294967295
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	6922      	ldr	r2, [r4, #16]
 800a1be:	1a98      	subs	r0, r3, r2
 800a1c0:	6963      	ldr	r3, [r4, #20]
 800a1c2:	b2f6      	uxtb	r6, r6
 800a1c4:	4283      	cmp	r3, r0
 800a1c6:	4637      	mov	r7, r6
 800a1c8:	dc05      	bgt.n	800a1d6 <__swbuf_r+0x4e>
 800a1ca:	4621      	mov	r1, r4
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	f7ff fd99 	bl	8009d04 <_fflush_r>
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	d1ed      	bne.n	800a1b2 <__swbuf_r+0x2a>
 800a1d6:	68a3      	ldr	r3, [r4, #8]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	60a3      	str	r3, [r4, #8]
 800a1dc:	6823      	ldr	r3, [r4, #0]
 800a1de:	1c5a      	adds	r2, r3, #1
 800a1e0:	6022      	str	r2, [r4, #0]
 800a1e2:	701e      	strb	r6, [r3, #0]
 800a1e4:	6962      	ldr	r2, [r4, #20]
 800a1e6:	1c43      	adds	r3, r0, #1
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d004      	beq.n	800a1f6 <__swbuf_r+0x6e>
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	07db      	lsls	r3, r3, #31
 800a1f0:	d5e1      	bpl.n	800a1b6 <__swbuf_r+0x2e>
 800a1f2:	2e0a      	cmp	r6, #10
 800a1f4:	d1df      	bne.n	800a1b6 <__swbuf_r+0x2e>
 800a1f6:	4621      	mov	r1, r4
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	f7ff fd83 	bl	8009d04 <_fflush_r>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d0d9      	beq.n	800a1b6 <__swbuf_r+0x2e>
 800a202:	e7d6      	b.n	800a1b2 <__swbuf_r+0x2a>

0800a204 <__swsetup_r>:
 800a204:	b538      	push	{r3, r4, r5, lr}
 800a206:	4b29      	ldr	r3, [pc, #164]	@ (800a2ac <__swsetup_r+0xa8>)
 800a208:	4605      	mov	r5, r0
 800a20a:	6818      	ldr	r0, [r3, #0]
 800a20c:	460c      	mov	r4, r1
 800a20e:	b118      	cbz	r0, 800a218 <__swsetup_r+0x14>
 800a210:	6a03      	ldr	r3, [r0, #32]
 800a212:	b90b      	cbnz	r3, 800a218 <__swsetup_r+0x14>
 800a214:	f7fd ffb0 	bl	8008178 <__sinit>
 800a218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a21c:	0719      	lsls	r1, r3, #28
 800a21e:	d422      	bmi.n	800a266 <__swsetup_r+0x62>
 800a220:	06da      	lsls	r2, r3, #27
 800a222:	d407      	bmi.n	800a234 <__swsetup_r+0x30>
 800a224:	2209      	movs	r2, #9
 800a226:	602a      	str	r2, [r5, #0]
 800a228:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a22c:	81a3      	strh	r3, [r4, #12]
 800a22e:	f04f 30ff 	mov.w	r0, #4294967295
 800a232:	e033      	b.n	800a29c <__swsetup_r+0x98>
 800a234:	0758      	lsls	r0, r3, #29
 800a236:	d512      	bpl.n	800a25e <__swsetup_r+0x5a>
 800a238:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a23a:	b141      	cbz	r1, 800a24e <__swsetup_r+0x4a>
 800a23c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a240:	4299      	cmp	r1, r3
 800a242:	d002      	beq.n	800a24a <__swsetup_r+0x46>
 800a244:	4628      	mov	r0, r5
 800a246:	f7fe feff 	bl	8009048 <_free_r>
 800a24a:	2300      	movs	r3, #0
 800a24c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a24e:	89a3      	ldrh	r3, [r4, #12]
 800a250:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a254:	81a3      	strh	r3, [r4, #12]
 800a256:	2300      	movs	r3, #0
 800a258:	6063      	str	r3, [r4, #4]
 800a25a:	6923      	ldr	r3, [r4, #16]
 800a25c:	6023      	str	r3, [r4, #0]
 800a25e:	89a3      	ldrh	r3, [r4, #12]
 800a260:	f043 0308 	orr.w	r3, r3, #8
 800a264:	81a3      	strh	r3, [r4, #12]
 800a266:	6923      	ldr	r3, [r4, #16]
 800a268:	b94b      	cbnz	r3, 800a27e <__swsetup_r+0x7a>
 800a26a:	89a3      	ldrh	r3, [r4, #12]
 800a26c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a274:	d003      	beq.n	800a27e <__swsetup_r+0x7a>
 800a276:	4621      	mov	r1, r4
 800a278:	4628      	mov	r0, r5
 800a27a:	f000 f883 	bl	800a384 <__smakebuf_r>
 800a27e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a282:	f013 0201 	ands.w	r2, r3, #1
 800a286:	d00a      	beq.n	800a29e <__swsetup_r+0x9a>
 800a288:	2200      	movs	r2, #0
 800a28a:	60a2      	str	r2, [r4, #8]
 800a28c:	6962      	ldr	r2, [r4, #20]
 800a28e:	4252      	negs	r2, r2
 800a290:	61a2      	str	r2, [r4, #24]
 800a292:	6922      	ldr	r2, [r4, #16]
 800a294:	b942      	cbnz	r2, 800a2a8 <__swsetup_r+0xa4>
 800a296:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a29a:	d1c5      	bne.n	800a228 <__swsetup_r+0x24>
 800a29c:	bd38      	pop	{r3, r4, r5, pc}
 800a29e:	0799      	lsls	r1, r3, #30
 800a2a0:	bf58      	it	pl
 800a2a2:	6962      	ldrpl	r2, [r4, #20]
 800a2a4:	60a2      	str	r2, [r4, #8]
 800a2a6:	e7f4      	b.n	800a292 <__swsetup_r+0x8e>
 800a2a8:	2000      	movs	r0, #0
 800a2aa:	e7f7      	b.n	800a29c <__swsetup_r+0x98>
 800a2ac:	20000028 	.word	0x20000028

0800a2b0 <_raise_r>:
 800a2b0:	291f      	cmp	r1, #31
 800a2b2:	b538      	push	{r3, r4, r5, lr}
 800a2b4:	4605      	mov	r5, r0
 800a2b6:	460c      	mov	r4, r1
 800a2b8:	d904      	bls.n	800a2c4 <_raise_r+0x14>
 800a2ba:	2316      	movs	r3, #22
 800a2bc:	6003      	str	r3, [r0, #0]
 800a2be:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c2:	bd38      	pop	{r3, r4, r5, pc}
 800a2c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a2c6:	b112      	cbz	r2, 800a2ce <_raise_r+0x1e>
 800a2c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2cc:	b94b      	cbnz	r3, 800a2e2 <_raise_r+0x32>
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f000 f830 	bl	800a334 <_getpid_r>
 800a2d4:	4622      	mov	r2, r4
 800a2d6:	4601      	mov	r1, r0
 800a2d8:	4628      	mov	r0, r5
 800a2da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2de:	f000 b817 	b.w	800a310 <_kill_r>
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d00a      	beq.n	800a2fc <_raise_r+0x4c>
 800a2e6:	1c59      	adds	r1, r3, #1
 800a2e8:	d103      	bne.n	800a2f2 <_raise_r+0x42>
 800a2ea:	2316      	movs	r3, #22
 800a2ec:	6003      	str	r3, [r0, #0]
 800a2ee:	2001      	movs	r0, #1
 800a2f0:	e7e7      	b.n	800a2c2 <_raise_r+0x12>
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	4798      	blx	r3
 800a2fc:	2000      	movs	r0, #0
 800a2fe:	e7e0      	b.n	800a2c2 <_raise_r+0x12>

0800a300 <raise>:
 800a300:	4b02      	ldr	r3, [pc, #8]	@ (800a30c <raise+0xc>)
 800a302:	4601      	mov	r1, r0
 800a304:	6818      	ldr	r0, [r3, #0]
 800a306:	f7ff bfd3 	b.w	800a2b0 <_raise_r>
 800a30a:	bf00      	nop
 800a30c:	20000028 	.word	0x20000028

0800a310 <_kill_r>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	4d07      	ldr	r5, [pc, #28]	@ (800a330 <_kill_r+0x20>)
 800a314:	2300      	movs	r3, #0
 800a316:	4604      	mov	r4, r0
 800a318:	4608      	mov	r0, r1
 800a31a:	4611      	mov	r1, r2
 800a31c:	602b      	str	r3, [r5, #0]
 800a31e:	f7f8 f8e7 	bl	80024f0 <_kill>
 800a322:	1c43      	adds	r3, r0, #1
 800a324:	d102      	bne.n	800a32c <_kill_r+0x1c>
 800a326:	682b      	ldr	r3, [r5, #0]
 800a328:	b103      	cbz	r3, 800a32c <_kill_r+0x1c>
 800a32a:	6023      	str	r3, [r4, #0]
 800a32c:	bd38      	pop	{r3, r4, r5, pc}
 800a32e:	bf00      	nop
 800a330:	200005ec 	.word	0x200005ec

0800a334 <_getpid_r>:
 800a334:	f7f8 b8d4 	b.w	80024e0 <_getpid>

0800a338 <__swhatbuf_r>:
 800a338:	b570      	push	{r4, r5, r6, lr}
 800a33a:	460c      	mov	r4, r1
 800a33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a340:	2900      	cmp	r1, #0
 800a342:	b096      	sub	sp, #88	@ 0x58
 800a344:	4615      	mov	r5, r2
 800a346:	461e      	mov	r6, r3
 800a348:	da0d      	bge.n	800a366 <__swhatbuf_r+0x2e>
 800a34a:	89a3      	ldrh	r3, [r4, #12]
 800a34c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a350:	f04f 0100 	mov.w	r1, #0
 800a354:	bf14      	ite	ne
 800a356:	2340      	movne	r3, #64	@ 0x40
 800a358:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a35c:	2000      	movs	r0, #0
 800a35e:	6031      	str	r1, [r6, #0]
 800a360:	602b      	str	r3, [r5, #0]
 800a362:	b016      	add	sp, #88	@ 0x58
 800a364:	bd70      	pop	{r4, r5, r6, pc}
 800a366:	466a      	mov	r2, sp
 800a368:	f000 f848 	bl	800a3fc <_fstat_r>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	dbec      	blt.n	800a34a <__swhatbuf_r+0x12>
 800a370:	9901      	ldr	r1, [sp, #4]
 800a372:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a376:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a37a:	4259      	negs	r1, r3
 800a37c:	4159      	adcs	r1, r3
 800a37e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a382:	e7eb      	b.n	800a35c <__swhatbuf_r+0x24>

0800a384 <__smakebuf_r>:
 800a384:	898b      	ldrh	r3, [r1, #12]
 800a386:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a388:	079d      	lsls	r5, r3, #30
 800a38a:	4606      	mov	r6, r0
 800a38c:	460c      	mov	r4, r1
 800a38e:	d507      	bpl.n	800a3a0 <__smakebuf_r+0x1c>
 800a390:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a394:	6023      	str	r3, [r4, #0]
 800a396:	6123      	str	r3, [r4, #16]
 800a398:	2301      	movs	r3, #1
 800a39a:	6163      	str	r3, [r4, #20]
 800a39c:	b003      	add	sp, #12
 800a39e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3a0:	ab01      	add	r3, sp, #4
 800a3a2:	466a      	mov	r2, sp
 800a3a4:	f7ff ffc8 	bl	800a338 <__swhatbuf_r>
 800a3a8:	9f00      	ldr	r7, [sp, #0]
 800a3aa:	4605      	mov	r5, r0
 800a3ac:	4639      	mov	r1, r7
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	f7fe febe 	bl	8009130 <_malloc_r>
 800a3b4:	b948      	cbnz	r0, 800a3ca <__smakebuf_r+0x46>
 800a3b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ba:	059a      	lsls	r2, r3, #22
 800a3bc:	d4ee      	bmi.n	800a39c <__smakebuf_r+0x18>
 800a3be:	f023 0303 	bic.w	r3, r3, #3
 800a3c2:	f043 0302 	orr.w	r3, r3, #2
 800a3c6:	81a3      	strh	r3, [r4, #12]
 800a3c8:	e7e2      	b.n	800a390 <__smakebuf_r+0xc>
 800a3ca:	89a3      	ldrh	r3, [r4, #12]
 800a3cc:	6020      	str	r0, [r4, #0]
 800a3ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3d2:	81a3      	strh	r3, [r4, #12]
 800a3d4:	9b01      	ldr	r3, [sp, #4]
 800a3d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a3da:	b15b      	cbz	r3, 800a3f4 <__smakebuf_r+0x70>
 800a3dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	f000 f81d 	bl	800a420 <_isatty_r>
 800a3e6:	b128      	cbz	r0, 800a3f4 <__smakebuf_r+0x70>
 800a3e8:	89a3      	ldrh	r3, [r4, #12]
 800a3ea:	f023 0303 	bic.w	r3, r3, #3
 800a3ee:	f043 0301 	orr.w	r3, r3, #1
 800a3f2:	81a3      	strh	r3, [r4, #12]
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	431d      	orrs	r5, r3
 800a3f8:	81a5      	strh	r5, [r4, #12]
 800a3fa:	e7cf      	b.n	800a39c <__smakebuf_r+0x18>

0800a3fc <_fstat_r>:
 800a3fc:	b538      	push	{r3, r4, r5, lr}
 800a3fe:	4d07      	ldr	r5, [pc, #28]	@ (800a41c <_fstat_r+0x20>)
 800a400:	2300      	movs	r3, #0
 800a402:	4604      	mov	r4, r0
 800a404:	4608      	mov	r0, r1
 800a406:	4611      	mov	r1, r2
 800a408:	602b      	str	r3, [r5, #0]
 800a40a:	f7f8 f8d1 	bl	80025b0 <_fstat>
 800a40e:	1c43      	adds	r3, r0, #1
 800a410:	d102      	bne.n	800a418 <_fstat_r+0x1c>
 800a412:	682b      	ldr	r3, [r5, #0]
 800a414:	b103      	cbz	r3, 800a418 <_fstat_r+0x1c>
 800a416:	6023      	str	r3, [r4, #0]
 800a418:	bd38      	pop	{r3, r4, r5, pc}
 800a41a:	bf00      	nop
 800a41c:	200005ec 	.word	0x200005ec

0800a420 <_isatty_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4d06      	ldr	r5, [pc, #24]	@ (800a43c <_isatty_r+0x1c>)
 800a424:	2300      	movs	r3, #0
 800a426:	4604      	mov	r4, r0
 800a428:	4608      	mov	r0, r1
 800a42a:	602b      	str	r3, [r5, #0]
 800a42c:	f7f8 f8d0 	bl	80025d0 <_isatty>
 800a430:	1c43      	adds	r3, r0, #1
 800a432:	d102      	bne.n	800a43a <_isatty_r+0x1a>
 800a434:	682b      	ldr	r3, [r5, #0]
 800a436:	b103      	cbz	r3, 800a43a <_isatty_r+0x1a>
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	bd38      	pop	{r3, r4, r5, pc}
 800a43c:	200005ec 	.word	0x200005ec

0800a440 <_init>:
 800a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a442:	bf00      	nop
 800a444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a446:	bc08      	pop	{r3}
 800a448:	469e      	mov	lr, r3
 800a44a:	4770      	bx	lr

0800a44c <_fini>:
 800a44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44e:	bf00      	nop
 800a450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a452:	bc08      	pop	{r3}
 800a454:	469e      	mov	lr, r3
 800a456:	4770      	bx	lr
