
104_StateMachine_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002860  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002a38  08002a38  00003a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002abc  08002abc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002abc  08002abc  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002abc  08002abc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002abc  08002abc  00003abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ac0  08002ac0  00003ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ac4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08002ad0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002ad0  00004100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009123  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b9d  00000000  00000000  0000d15f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  0000ed00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006cc  00000000  00000000  0000f618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000168c  00000000  00000000  0000fce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009efe  00000000  00000000  00011370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1b94  00000000  00000000  0001b26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fce02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002360  00000000  00000000  000fce48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000ff1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002a20 	.word	0x08002a20

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002a20 	.word	0x08002a20

08000218 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000222:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000226:	f001 f975 	bl	8001514 <HAL_GPIO_WritePin>
}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}

0800022e <ST7735_Unselect>:

void ST7735_Unselect()
{
 800022e:	b580      	push	{r7, lr}
 8000230:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000232:	2201      	movs	r2, #1
 8000234:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000238:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800023c:	f001 f96a 	bl	8001514 <HAL_GPIO_WritePin>
}
 8000240:	bf00      	nop
 8000242:	bd80      	pop	{r7, pc}

08000244 <ST7735_Reset>:

void ST7735_Reset()
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	2140      	movs	r1, #64	@ 0x40
 800024c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000250:	f001 f960 	bl	8001514 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000254:	2005      	movs	r0, #5
 8000256:	f000 fc89 	bl	8000b6c <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800025a:	2201      	movs	r2, #1
 800025c:	2140      	movs	r1, #64	@ 0x40
 800025e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000262:	f001 f957 	bl	8001514 <HAL_GPIO_WritePin>
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800027c:	4806      	ldr	r0, [pc, #24]	@ (8000298 <ST7735_WriteCommand+0x2c>)
 800027e:	f001 f949 	bl	8001514 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000282:	1df9      	adds	r1, r7, #7
 8000284:	f04f 33ff 	mov.w	r3, #4294967295
 8000288:	2201      	movs	r2, #1
 800028a:	4804      	ldr	r0, [pc, #16]	@ (800029c <ST7735_WriteCommand+0x30>)
 800028c:	f001 ffaf 	bl	80021ee <HAL_SPI_Transmit>
	/*HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
	while(hspi1.State == HAL_SPI_STATE_BUSY_TX)
	{

	}*/
}
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	48000400 	.word	0x48000400
 800029c:	20000034 	.word	0x20000034

080002a0 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80002aa:	2201      	movs	r2, #1
 80002ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002b0:	4807      	ldr	r0, [pc, #28]	@ (80002d0 <ST7735_WriteData+0x30>)
 80002b2:	f001 f92f 	bl	8001514 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	b29a      	uxth	r2, r3
 80002ba:	f04f 33ff 	mov.w	r3, #4294967295
 80002be:	6879      	ldr	r1, [r7, #4]
 80002c0:	4804      	ldr	r0, [pc, #16]	@ (80002d4 <ST7735_WriteData+0x34>)
 80002c2:	f001 ff94 	bl	80021ee <HAL_SPI_Transmit>
	/*HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
	while(hspi1.State == HAL_SPI_STATE_BUSY_TX)
	{

	}*/
}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	48000400 	.word	0x48000400
 80002d4:	20000034 	.word	0x20000034

080002d8 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	1c5a      	adds	r2, r3, #1
 80002e4:	607a      	str	r2, [r7, #4]
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80002ea:	e034      	b.n	8000356 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	1c5a      	adds	r2, r3, #1
 80002f0:	607a      	str	r2, [r7, #4]
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80002f6:	7afb      	ldrb	r3, [r7, #11]
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ffb7 	bl	800026c <ST7735_WriteCommand>

        numArgs = *addr++;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	1c5a      	adds	r2, r3, #1
 8000302:	607a      	str	r2, [r7, #4]
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000308:	7abb      	ldrb	r3, [r7, #10]
 800030a:	b29b      	uxth	r3, r3
 800030c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000310:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000312:	7abb      	ldrb	r3, [r7, #10]
 8000314:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000318:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800031a:	7abb      	ldrb	r3, [r7, #10]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d008      	beq.n	8000332 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000320:	7abb      	ldrb	r3, [r7, #10]
 8000322:	4619      	mov	r1, r3
 8000324:	6878      	ldr	r0, [r7, #4]
 8000326:	f7ff ffbb 	bl	80002a0 <ST7735_WriteData>
            addr += numArgs;
 800032a:	7abb      	ldrb	r3, [r7, #10]
 800032c:	687a      	ldr	r2, [r7, #4]
 800032e:	4413      	add	r3, r2
 8000330:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000332:	89bb      	ldrh	r3, [r7, #12]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d00e      	beq.n	8000356 <DisplayInit+0x7e>
            ms = *addr++;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	1c5a      	adds	r2, r3, #1
 800033c:	607a      	str	r2, [r7, #4]
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000342:	89bb      	ldrh	r3, [r7, #12]
 8000344:	2bff      	cmp	r3, #255	@ 0xff
 8000346:	d102      	bne.n	800034e <DisplayInit+0x76>
 8000348:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800034c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800034e:	89bb      	ldrh	r3, [r7, #12]
 8000350:	4618      	mov	r0, r3
 8000352:	f000 fc0b 	bl	8000b6c <HAL_Delay>
    while(numCommands--) {
 8000356:	7bfb      	ldrb	r3, [r7, #15]
 8000358:	1e5a      	subs	r2, r3, #1
 800035a:	73fa      	strb	r2, [r7, #15]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d1c5      	bne.n	80002ec <DisplayInit+0x14>
        }
    }
}
 8000360:	bf00      	nop
 8000362:	bf00      	nop
 8000364:	3710      	adds	r7, #16
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
	...

0800036c <ST7735_Init>:
    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
}

void ST7735_Init(uint8_t rotation)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000376:	f7ff ff4f 	bl	8000218 <ST7735_Select>
    ST7735_Reset();
 800037a:	f7ff ff63 	bl	8000244 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800037e:	480c      	ldr	r0, [pc, #48]	@ (80003b0 <ST7735_Init+0x44>)
 8000380:	f7ff ffaa 	bl	80002d8 <DisplayInit>
    DisplayInit(init_cmds2);
 8000384:	480b      	ldr	r0, [pc, #44]	@ (80003b4 <ST7735_Init+0x48>)
 8000386:	f7ff ffa7 	bl	80002d8 <DisplayInit>
    DisplayInit(init_cmds3);
 800038a:	480b      	ldr	r0, [pc, #44]	@ (80003b8 <ST7735_Init+0x4c>)
 800038c:	f7ff ffa4 	bl	80002d8 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 8000390:	4b0a      	ldr	r3, [pc, #40]	@ (80003bc <ST7735_Init+0x50>)
 8000392:	2202      	movs	r2, #2
 8000394:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 8000396:	4b0a      	ldr	r3, [pc, #40]	@ (80003c0 <ST7735_Init+0x54>)
 8000398:	2203      	movs	r2, #3
 800039a:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f810 	bl	80003c4 <ST7735_SetRotation>
    ST7735_Unselect();
 80003a4:	f7ff ff43 	bl	800022e <ST7735_Unselect>

}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	08002a38 	.word	0x08002a38
 80003b4:	08002a70 	.word	0x08002a70
 80003b8:	08002a80 	.word	0x08002a80
 80003bc:	2000002d 	.word	0x2000002d
 80003c0:	2000002e 	.word	0x2000002e

080003c4 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	f003 0303 	and.w	r3, r3, #3
 80003d8:	b2da      	uxtb	r2, r3
 80003da:	4b33      	ldr	r3, [pc, #204]	@ (80004a8 <ST7735_SetRotation+0xe4>)
 80003dc:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80003de:	4b32      	ldr	r3, [pc, #200]	@ (80004a8 <ST7735_SetRotation+0xe4>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b03      	cmp	r3, #3
 80003e4:	d84e      	bhi.n	8000484 <ST7735_SetRotation+0xc0>
 80003e6:	a201      	add	r2, pc, #4	@ (adr r2, 80003ec <ST7735_SetRotation+0x28>)
 80003e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ec:	080003fd 	.word	0x080003fd
 80003f0:	0800041f 	.word	0x0800041f
 80003f4:	08000441 	.word	0x08000441
 80003f8:	08000463 	.word	0x08000463
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80003fc:	23c0      	movs	r3, #192	@ 0xc0
 80003fe:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000400:	4b2a      	ldr	r3, [pc, #168]	@ (80004ac <ST7735_SetRotation+0xe8>)
 8000402:	2280      	movs	r2, #128	@ 0x80
 8000404:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000406:	4b2a      	ldr	r3, [pc, #168]	@ (80004b0 <ST7735_SetRotation+0xec>)
 8000408:	2280      	movs	r2, #128	@ 0x80
 800040a:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 800040c:	4b29      	ldr	r3, [pc, #164]	@ (80004b4 <ST7735_SetRotation+0xf0>)
 800040e:	781a      	ldrb	r2, [r3, #0]
 8000410:	4b29      	ldr	r3, [pc, #164]	@ (80004b8 <ST7735_SetRotation+0xf4>)
 8000412:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000414:	4b29      	ldr	r3, [pc, #164]	@ (80004bc <ST7735_SetRotation+0xf8>)
 8000416:	781a      	ldrb	r2, [r3, #0]
 8000418:	4b29      	ldr	r3, [pc, #164]	@ (80004c0 <ST7735_SetRotation+0xfc>)
 800041a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800041c:	e032      	b.n	8000484 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800041e:	23a0      	movs	r3, #160	@ 0xa0
 8000420:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000422:	4b23      	ldr	r3, [pc, #140]	@ (80004b0 <ST7735_SetRotation+0xec>)
 8000424:	2280      	movs	r2, #128	@ 0x80
 8000426:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000428:	4b20      	ldr	r3, [pc, #128]	@ (80004ac <ST7735_SetRotation+0xe8>)
 800042a:	2280      	movs	r2, #128	@ 0x80
 800042c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800042e:	4b21      	ldr	r3, [pc, #132]	@ (80004b4 <ST7735_SetRotation+0xf0>)
 8000430:	781a      	ldrb	r2, [r3, #0]
 8000432:	4b23      	ldr	r3, [pc, #140]	@ (80004c0 <ST7735_SetRotation+0xfc>)
 8000434:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000436:	4b21      	ldr	r3, [pc, #132]	@ (80004bc <ST7735_SetRotation+0xf8>)
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	4b1f      	ldr	r3, [pc, #124]	@ (80004b8 <ST7735_SetRotation+0xf4>)
 800043c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800043e:	e021      	b.n	8000484 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000440:	2300      	movs	r3, #0
 8000442:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000444:	4b19      	ldr	r3, [pc, #100]	@ (80004ac <ST7735_SetRotation+0xe8>)
 8000446:	2280      	movs	r2, #128	@ 0x80
 8000448:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800044a:	4b19      	ldr	r3, [pc, #100]	@ (80004b0 <ST7735_SetRotation+0xec>)
 800044c:	2280      	movs	r2, #128	@ 0x80
 800044e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000450:	4b18      	ldr	r3, [pc, #96]	@ (80004b4 <ST7735_SetRotation+0xf0>)
 8000452:	781a      	ldrb	r2, [r3, #0]
 8000454:	4b18      	ldr	r3, [pc, #96]	@ (80004b8 <ST7735_SetRotation+0xf4>)
 8000456:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000458:	4b18      	ldr	r3, [pc, #96]	@ (80004bc <ST7735_SetRotation+0xf8>)
 800045a:	781a      	ldrb	r2, [r3, #0]
 800045c:	4b18      	ldr	r3, [pc, #96]	@ (80004c0 <ST7735_SetRotation+0xfc>)
 800045e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000460:	e010      	b.n	8000484 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000462:	2360      	movs	r3, #96	@ 0x60
 8000464:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000466:	4b12      	ldr	r3, [pc, #72]	@ (80004b0 <ST7735_SetRotation+0xec>)
 8000468:	2280      	movs	r2, #128	@ 0x80
 800046a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800046c:	4b0f      	ldr	r3, [pc, #60]	@ (80004ac <ST7735_SetRotation+0xe8>)
 800046e:	2280      	movs	r2, #128	@ 0x80
 8000470:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000472:	4b10      	ldr	r3, [pc, #64]	@ (80004b4 <ST7735_SetRotation+0xf0>)
 8000474:	781a      	ldrb	r2, [r3, #0]
 8000476:	4b12      	ldr	r3, [pc, #72]	@ (80004c0 <ST7735_SetRotation+0xfc>)
 8000478:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800047a:	4b10      	ldr	r3, [pc, #64]	@ (80004bc <ST7735_SetRotation+0xf8>)
 800047c:	781a      	ldrb	r2, [r3, #0]
 800047e:	4b0e      	ldr	r3, [pc, #56]	@ (80004b8 <ST7735_SetRotation+0xf4>)
 8000480:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000482:	bf00      	nop
  }
  ST7735_Select();
 8000484:	f7ff fec8 	bl	8000218 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000488:	2036      	movs	r0, #54	@ 0x36
 800048a:	f7ff feef 	bl	800026c <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800048e:	f107 030f 	add.w	r3, r7, #15
 8000492:	2101      	movs	r1, #1
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff ff03 	bl	80002a0 <ST7735_WriteData>
  ST7735_Unselect();
 800049a:	f7ff fec8 	bl	800022e <ST7735_Unselect>
}
 800049e:	bf00      	nop
 80004a0:	3710      	adds	r7, #16
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	2000002c 	.word	0x2000002c
 80004ac:	2000002a 	.word	0x2000002a
 80004b0:	20000028 	.word	0x20000028
 80004b4:	2000002d 	.word	0x2000002d
 80004b8:	2000002f 	.word	0x2000002f
 80004bc:	2000002e 	.word	0x2000002e
 80004c0:	20000030 	.word	0x20000030

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fade 	bl	8000a8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f819 	bl	8000504 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SystemCoreClockUpdate();
 80004d2:	f000 fa27 	bl	8000924 <SystemCoreClockUpdate>
  float clk = SystemCoreClock;
 80004d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <main+0x3c>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	ee07 3a90 	vmov	s15, r3
 80004de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004e2:	edc7 7a01 	vstr	s15, [r7, #4]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f8c1 	bl	800066c <MX_GPIO_Init>
  MX_DMA_Init();
 80004ea:	f000 f895 	bl	8000618 <MX_DMA_Init>
  MX_SPI1_Init();
 80004ee:	f000 f855 	bl	800059c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ST7735_Init(0);
 80004f2:	2000      	movs	r0, #0
 80004f4:	f7ff ff3a 	bl	800036c <ST7735_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	handler_task();
 80004f8:	f000 fa92 	bl	8000a20 <handler_task>
 80004fc:	e7fc      	b.n	80004f8 <main+0x34>
 80004fe:	bf00      	nop
 8000500:	20000000 	.word	0x20000000

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b094      	sub	sp, #80	@ 0x50
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0318 	add.w	r3, r7, #24
 800050e:	2238      	movs	r2, #56	@ 0x38
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f002 fa58 	bl	80029c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000526:	2000      	movs	r0, #0
 8000528:	f001 f80c 	bl	8001544 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052c:	2302      	movs	r3, #2
 800052e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000530:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000534:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000536:	2340      	movs	r3, #64	@ 0x40
 8000538:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053a:	2302      	movs	r3, #2
 800053c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800053e:	2302      	movs	r3, #2
 8000540:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000542:	2301      	movs	r3, #1
 8000544:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000546:	2314      	movs	r3, #20
 8000548:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800054a:	2302      	movs	r3, #2
 800054c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800054e:	2302      	movs	r3, #2
 8000550:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000552:	2302      	movs	r3, #2
 8000554:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	f107 0318 	add.w	r3, r7, #24
 800055a:	4618      	mov	r0, r3
 800055c:	f001 f8a6 	bl	80016ac <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000566:	f000 f8e5 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056a:	230f      	movs	r3, #15
 800056c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056e:	2303      	movs	r3, #3
 8000570:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2104      	movs	r1, #4
 8000582:	4618      	mov	r0, r3
 8000584:	f001 fba4 	bl	8001cd0 <HAL_RCC_ClockConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800058e:	f000 f8d1 	bl	8000734 <Error_Handler>
  }
}
 8000592:	bf00      	nop
 8000594:	3750      	adds	r7, #80	@ 0x50
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000610 <MX_SPI1_Init+0x74>)
 80005a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000614 <MX_SPI1_Init+0x78>)
 80005a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000610 <MX_SPI1_Init+0x74>)
 80005a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80005ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80005ae:	4b18      	ldr	r3, [pc, #96]	@ (8000610 <MX_SPI1_Init+0x74>)
 80005b0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80005b4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005b6:	4b16      	ldr	r3, [pc, #88]	@ (8000610 <MX_SPI1_Init+0x74>)
 80005b8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80005bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80005be:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <MX_SPI1_Init+0x74>)
 80005c0:	2202      	movs	r2, #2
 80005c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005c4:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <MX_SPI1_Init+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005ca:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <MX_SPI1_Init+0x74>)
 80005cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80005d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <MX_SPI1_Init+0x74>)
 80005d4:	2210      	movs	r2, #16
 80005d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000610 <MX_SPI1_Init+0x74>)
 80005da:	2200      	movs	r2, #0
 80005dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005de:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <MX_SPI1_Init+0x74>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <MX_SPI1_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005ea:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <MX_SPI1_Init+0x74>)
 80005ec:	2207      	movs	r2, #7
 80005ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005f0:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <MX_SPI1_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005f6:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <MX_SPI1_Init+0x74>)
 80005f8:	2208      	movs	r2, #8
 80005fa:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005fc:	4804      	ldr	r0, [pc, #16]	@ (8000610 <MX_SPI1_Init+0x74>)
 80005fe:	f001 fd4b 	bl	8002098 <HAL_SPI_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000608:	f000 f894 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000034 	.word	0x20000034
 8000614:	40013000 	.word	0x40013000

08000618 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800061e:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <MX_DMA_Init+0x50>)
 8000620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000622:	4a11      	ldr	r2, [pc, #68]	@ (8000668 <MX_DMA_Init+0x50>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6493      	str	r3, [r2, #72]	@ 0x48
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_DMA_Init+0x50>)
 800062c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <MX_DMA_Init+0x50>)
 8000638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800063a:	4a0b      	ldr	r2, [pc, #44]	@ (8000668 <MX_DMA_Init+0x50>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6493      	str	r3, [r2, #72]	@ 0x48
 8000642:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_DMA_Init+0x50>)
 8000644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	200b      	movs	r0, #11
 8000654:	f000 fb87 	bl	8000d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000658:	200b      	movs	r0, #11
 800065a:	f000 fb9e 	bl	8000d9a <HAL_NVIC_EnableIRQ>

}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000682:	4b2a      	ldr	r3, [pc, #168]	@ (800072c <MX_GPIO_Init+0xc0>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	4a29      	ldr	r2, [pc, #164]	@ (800072c <MX_GPIO_Init+0xc0>)
 8000688:	f043 0320 	orr.w	r3, r3, #32
 800068c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068e:	4b27      	ldr	r3, [pc, #156]	@ (800072c <MX_GPIO_Init+0xc0>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	f003 0320 	and.w	r3, r3, #32
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b24      	ldr	r3, [pc, #144]	@ (800072c <MX_GPIO_Init+0xc0>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	4a23      	ldr	r2, [pc, #140]	@ (800072c <MX_GPIO_Init+0xc0>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006a6:	4b21      	ldr	r3, [pc, #132]	@ (800072c <MX_GPIO_Init+0xc0>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	4b1e      	ldr	r3, [pc, #120]	@ (800072c <MX_GPIO_Init+0xc0>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	4a1d      	ldr	r2, [pc, #116]	@ (800072c <MX_GPIO_Init+0xc0>)
 80006b8:	f043 0302 	orr.w	r3, r3, #2
 80006bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006be:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <MX_GPIO_Init+0xc0>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_15, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f248 0140 	movw	r1, #32832	@ 0x8040
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d4:	f000 ff1e 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006de:	4814      	ldr	r0, [pc, #80]	@ (8000730 <MX_GPIO_Init+0xc4>)
 80006e0:	f000 ff18 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 80006e4:	f248 0340 	movw	r3, #32832	@ 0x8040
 80006e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	4619      	mov	r1, r3
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000700:	f000 fd86 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000704:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000708:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	4619      	mov	r1, r3
 800071c:	4804      	ldr	r0, [pc, #16]	@ (8000730 <MX_GPIO_Init+0xc4>)
 800071e:	f000 fd77 	bl	8001210 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000722:	bf00      	nop
 8000724:	3720      	adds	r7, #32
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000
 8000730:	48000400 	.word	0x48000400

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <Error_Handler+0x8>

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <HAL_MspInit+0x44>)
 8000748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800074a:	4a0e      	ldr	r2, [pc, #56]	@ (8000784 <HAL_MspInit+0x44>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6613      	str	r3, [r2, #96]	@ 0x60
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <HAL_MspInit+0x44>)
 8000754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <HAL_MspInit+0x44>)
 8000760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000762:	4a08      	ldr	r2, [pc, #32]	@ (8000784 <HAL_MspInit+0x44>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000768:	6593      	str	r3, [r2, #88]	@ 0x58
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_MspInit+0x44>)
 800076c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800076e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000776:	f000 ff89 	bl	800168c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000

08000788 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	@ 0x28
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a2f      	ldr	r2, [pc, #188]	@ (8000864 <HAL_SPI_MspInit+0xdc>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d158      	bne.n	800085c <HAL_SPI_MspInit+0xd4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000868 <HAL_SPI_MspInit+0xe0>)
 80007ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ae:	4a2e      	ldr	r2, [pc, #184]	@ (8000868 <HAL_SPI_MspInit+0xe0>)
 80007b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80007b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000868 <HAL_SPI_MspInit+0xe0>)
 80007b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b29      	ldr	r3, [pc, #164]	@ (8000868 <HAL_SPI_MspInit+0xe0>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	4a28      	ldr	r2, [pc, #160]	@ (8000868 <HAL_SPI_MspInit+0xe0>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ce:	4b26      	ldr	r3, [pc, #152]	@ (8000868 <HAL_SPI_MspInit+0xe0>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80007da:	2328      	movs	r3, #40	@ 0x28
 80007dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007ea:	2305      	movs	r3, #5
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	481d      	ldr	r0, [pc, #116]	@ (800086c <HAL_SPI_MspInit+0xe4>)
 80007f6:	f000 fd0b 	bl	8001210 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 80007fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000870 <HAL_SPI_MspInit+0xe8>)
 80007fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000874 <HAL_SPI_MspInit+0xec>)
 80007fe:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <HAL_SPI_MspInit+0xe8>)
 8000802:	220b      	movs	r2, #11
 8000804:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000806:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <HAL_SPI_MspInit+0xe8>)
 8000808:	2210      	movs	r2, #16
 800080a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800080c:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <HAL_SPI_MspInit+0xe8>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000812:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <HAL_SPI_MspInit+0xe8>)
 8000814:	2280      	movs	r2, #128	@ 0x80
 8000816:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000818:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <HAL_SPI_MspInit+0xe8>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800081e:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <HAL_SPI_MspInit+0xe8>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <HAL_SPI_MspInit+0xe8>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <HAL_SPI_MspInit+0xe8>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000830:	480f      	ldr	r0, [pc, #60]	@ (8000870 <HAL_SPI_MspInit+0xe8>)
 8000832:	f000 facd 	bl	8000dd0 <HAL_DMA_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <HAL_SPI_MspInit+0xb8>
    {
      Error_Handler();
 800083c:	f7ff ff7a 	bl	8000734 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a0b      	ldr	r2, [pc, #44]	@ (8000870 <HAL_SPI_MspInit+0xe8>)
 8000844:	655a      	str	r2, [r3, #84]	@ 0x54
 8000846:	4a0a      	ldr	r2, [pc, #40]	@ (8000870 <HAL_SPI_MspInit+0xe8>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	2023      	movs	r0, #35	@ 0x23
 8000852:	f000 fa88 	bl	8000d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000856:	2023      	movs	r0, #35	@ 0x23
 8000858:	f000 fa9f 	bl	8000d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	@ 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40013000 	.word	0x40013000
 8000868:	40021000 	.word	0x40021000
 800086c:	48000400 	.word	0x48000400
 8000870:	20000098 	.word	0x20000098
 8000874:	40020008 	.word	0x40020008

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <NMI_Handler+0x4>

08000880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <MemManage_Handler+0x4>

08000890 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <UsageFault_Handler+0x4>

080008a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ce:	f000 f92f 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80008dc:	4802      	ldr	r0, [pc, #8]	@ (80008e8 <DMA1_Channel1_IRQHandler+0x10>)
 80008de:	f000 fb86 	bl	8000fee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000098 	.word	0x20000098

080008ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80008f0:	4802      	ldr	r0, [pc, #8]	@ (80008fc <SPI1_IRQHandler+0x10>)
 80008f2:	f001 fdf1 	bl	80024d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000034 	.word	0x20000034

08000900 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <SystemInit+0x20>)
 8000906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800090a:	4a05      	ldr	r2, [pc, #20]	@ (8000920 <SystemInit+0x20>)
 800090c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000910:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b087      	sub	sp, #28
 8000928:	af00      	add	r7, sp, #0
  uint32_t tmp, pllvco, pllr, pllsource, pllm;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800092a:	4b2e      	ldr	r3, [pc, #184]	@ (80009e4 <SystemCoreClockUpdate+0xc0>)
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	f003 030c 	and.w	r3, r3, #12
 8000932:	2b0c      	cmp	r3, #12
 8000934:	d00e      	beq.n	8000954 <SystemCoreClockUpdate+0x30>
 8000936:	2b0c      	cmp	r3, #12
 8000938:	d83e      	bhi.n	80009b8 <SystemCoreClockUpdate+0x94>
 800093a:	2b04      	cmp	r3, #4
 800093c:	d002      	beq.n	8000944 <SystemCoreClockUpdate+0x20>
 800093e:	2b08      	cmp	r3, #8
 8000940:	d004      	beq.n	800094c <SystemCoreClockUpdate+0x28>
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1U) * 2U;
      SystemCoreClock = pllvco/pllr;
      break;

    default:
      break;
 8000942:	e039      	b.n	80009b8 <SystemCoreClockUpdate+0x94>
      SystemCoreClock = HSI_VALUE;
 8000944:	4b28      	ldr	r3, [pc, #160]	@ (80009e8 <SystemCoreClockUpdate+0xc4>)
 8000946:	4a29      	ldr	r2, [pc, #164]	@ (80009ec <SystemCoreClockUpdate+0xc8>)
 8000948:	601a      	str	r2, [r3, #0]
      break;
 800094a:	e036      	b.n	80009ba <SystemCoreClockUpdate+0x96>
      SystemCoreClock = HSE_VALUE;
 800094c:	4b26      	ldr	r3, [pc, #152]	@ (80009e8 <SystemCoreClockUpdate+0xc4>)
 800094e:	4a28      	ldr	r2, [pc, #160]	@ (80009f0 <SystemCoreClockUpdate+0xcc>)
 8000950:	601a      	str	r2, [r3, #0]
      break;
 8000952:	e032      	b.n	80009ba <SystemCoreClockUpdate+0x96>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000954:	4b23      	ldr	r3, [pc, #140]	@ (80009e4 <SystemCoreClockUpdate+0xc0>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	f003 0303 	and.w	r3, r3, #3
 800095c:	613b      	str	r3, [r7, #16]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1U ;
 800095e:	4b21      	ldr	r3, [pc, #132]	@ (80009e4 <SystemCoreClockUpdate+0xc0>)
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	091b      	lsrs	r3, r3, #4
 8000964:	f003 030f 	and.w	r3, r3, #15
 8000968:	3301      	adds	r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
      if (pllsource == 0x02UL) /* HSI used as PLL clock source */
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	2b02      	cmp	r3, #2
 8000970:	d105      	bne.n	800097e <SystemCoreClockUpdate+0x5a>
        pllvco = (HSI_VALUE / pllm);
 8000972:	4a1e      	ldr	r2, [pc, #120]	@ (80009ec <SystemCoreClockUpdate+0xc8>)
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	fbb2 f3f3 	udiv	r3, r2, r3
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	e004      	b.n	8000988 <SystemCoreClockUpdate+0x64>
        pllvco = (HSE_VALUE / pllm);
 800097e:	4a1c      	ldr	r2, [pc, #112]	@ (80009f0 <SystemCoreClockUpdate+0xcc>)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	617b      	str	r3, [r7, #20]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 8000988:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <SystemCoreClockUpdate+0xc0>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	fb02 f303 	mul.w	r3, r2, r3
 8000998:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1U) * 2U;
 800099a:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <SystemCoreClockUpdate+0xc0>)
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	0e5b      	lsrs	r3, r3, #25
 80009a0:	f003 0303 	and.w	r3, r3, #3
 80009a4:	3301      	adds	r3, #1
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	60bb      	str	r3, [r7, #8]
      SystemCoreClock = pllvco/pllr;
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b2:	4a0d      	ldr	r2, [pc, #52]	@ (80009e8 <SystemCoreClockUpdate+0xc4>)
 80009b4:	6013      	str	r3, [r2, #0]
      break;
 80009b6:	e000      	b.n	80009ba <SystemCoreClockUpdate+0x96>
      break;
 80009b8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80009ba:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <SystemCoreClockUpdate+0xc0>)
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	091b      	lsrs	r3, r3, #4
 80009c0:	f003 030f 	and.w	r3, r3, #15
 80009c4:	4a0b      	ldr	r2, [pc, #44]	@ (80009f4 <SystemCoreClockUpdate+0xd0>)
 80009c6:	5cd3      	ldrb	r3, [r2, r3]
 80009c8:	607b      	str	r3, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80009ca:	4b07      	ldr	r3, [pc, #28]	@ (80009e8 <SystemCoreClockUpdate+0xc4>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	fa22 f303 	lsr.w	r3, r2, r3
 80009d4:	4a04      	ldr	r2, [pc, #16]	@ (80009e8 <SystemCoreClockUpdate+0xc4>)
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	bf00      	nop
 80009da:	371c      	adds	r7, #28
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	40021000 	.word	0x40021000
 80009e8:	20000000 	.word	0x20000000
 80009ec:	00f42400 	.word	0x00f42400
 80009f0:	02dc6c00 	.word	0x02dc6c00
 80009f4:	08002aac 	.word	0x08002aac

080009f8 <exec_handler_state>:
}

//-----------------------------------------------------------------------------------------------------------------------

void exec_handler_state(uint8_t state)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
    switch(state){
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d002      	beq.n	8000a0e <exec_handler_state+0x16>
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d002      	beq.n	8000a12 <exec_handler_state+0x1a>
        case LEDON:

        break;
      //--------------------------------------------------------------------------------------
      default:
      break;
 8000a0c:	e002      	b.n	8000a14 <exec_handler_state+0x1c>
        break;
 8000a0e:	bf00      	nop
 8000a10:	e000      	b.n	8000a14 <exec_handler_state+0x1c>
        break;
 8000a12:	bf00      	nop
      //--------------------------------------------------------------------------------------
    }
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <handler_task>:
        handler_timeout--;
    }
}

void handler_task(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
    exec_handler_state(handler_state);
 8000a24:	4b03      	ldr	r3, [pc, #12]	@ (8000a34 <handler_task+0x14>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ffe5 	bl	80009f8 <exec_handler_state>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000f8 	.word	0x200000f8

08000a38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a38:	480d      	ldr	r0, [pc, #52]	@ (8000a70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a3a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a3c:	f7ff ff60 	bl	8000900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a40:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a42:	490d      	ldr	r1, [pc, #52]	@ (8000a78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a44:	4a0d      	ldr	r2, [pc, #52]	@ (8000a7c <LoopForever+0xe>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0a      	ldr	r2, [pc, #40]	@ (8000a80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a58:	4c0a      	ldr	r4, [pc, #40]	@ (8000a84 <LoopForever+0x16>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a66:	f001 ffb7 	bl	80029d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a6a:	f7ff fd2b 	bl	80004c4 <main>

08000a6e <LoopForever>:

LoopForever:
    b LoopForever
 8000a6e:	e7fe      	b.n	8000a6e <LoopForever>
  ldr   r0, =_estack
 8000a70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a7c:	08002ac4 	.word	0x08002ac4
  ldr r2, =_sbss
 8000a80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a84:	20000100 	.word	0x20000100

08000a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_2_IRQHandler>

08000a8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f95b 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9a:	200f      	movs	r0, #15
 8000a9c:	f000 f80e 	bl	8000abc <HAL_InitTick>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d002      	beq.n	8000aac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	71fb      	strb	r3, [r7, #7]
 8000aaa:	e001      	b.n	8000ab0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aac:	f7ff fe48 	bl	8000740 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab0:	79fb      	ldrb	r3, [r7, #7]

}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ac8:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <HAL_InitTick+0x68>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d022      	beq.n	8000b16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ad0:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <HAL_InitTick+0x6c>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <HAL_InitTick+0x68>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000adc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f966 	bl	8000db6 <HAL_SYSTICK_Config>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d10f      	bne.n	8000b10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b0f      	cmp	r3, #15
 8000af4:	d809      	bhi.n	8000b0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af6:	2200      	movs	r2, #0
 8000af8:	6879      	ldr	r1, [r7, #4]
 8000afa:	f04f 30ff 	mov.w	r0, #4294967295
 8000afe:	f000 f932 	bl	8000d66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <HAL_InitTick+0x70>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	e007      	b.n	8000b1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	73fb      	strb	r3, [r7, #15]
 8000b0e:	e004      	b.n	8000b1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	e001      	b.n	8000b1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	20000004 	.word	0x20000004

08000b30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <HAL_IncTick+0x1c>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <HAL_IncTick+0x20>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a03      	ldr	r2, [pc, #12]	@ (8000b4c <HAL_IncTick+0x1c>)
 8000b40:	6013      	str	r3, [r2, #0]
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	200000fc 	.word	0x200000fc
 8000b50:	20000008 	.word	0x20000008

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b03      	ldr	r3, [pc, #12]	@ (8000b68 <HAL_GetTick+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	200000fc 	.word	0x200000fc

08000b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b74:	f7ff ffee 	bl	8000b54 <HAL_GetTick>
 8000b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b84:	d004      	beq.n	8000b90 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b86:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <HAL_Delay+0x40>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b90:	bf00      	nop
 8000b92:	f7ff ffdf 	bl	8000b54 <HAL_GetTick>
 8000b96:	4602      	mov	r2, r0
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d8f7      	bhi.n	8000b92 <HAL_Delay+0x26>
  {
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000008 	.word	0x20000008

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	db0b      	blt.n	8000c3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 021f 	and.w	r2, r3, #31
 8000c2c:	4907      	ldr	r1, [pc, #28]	@ (8000c4c <__NVIC_EnableIRQ+0x38>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	2001      	movs	r0, #1
 8000c36:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	@ (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	@ (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	@ 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	@ 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f7ff ff8e 	bl	8000c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	@ (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff29 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d74:	f7ff ff40 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff ff90 	bl	8000ca4 <NVIC_EncodePriority>
 8000d84:	4602      	mov	r2, r0
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff5f 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff33 	bl	8000c14 <__NVIC_EnableIRQ>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ffa4 	bl	8000d0c <SysTick_Config>
 8000dc4:	4603      	mov	r3, r0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e08d      	b.n	8000efe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b47      	ldr	r3, [pc, #284]	@ (8000f08 <HAL_DMA_Init+0x138>)
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d80f      	bhi.n	8000e0e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b45      	ldr	r3, [pc, #276]	@ (8000f0c <HAL_DMA_Init+0x13c>)
 8000df6:	4413      	add	r3, r2
 8000df8:	4a45      	ldr	r2, [pc, #276]	@ (8000f10 <HAL_DMA_Init+0x140>)
 8000dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfe:	091b      	lsrs	r3, r3, #4
 8000e00:	009a      	lsls	r2, r3, #2
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a42      	ldr	r2, [pc, #264]	@ (8000f14 <HAL_DMA_Init+0x144>)
 8000e0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e0c:	e00e      	b.n	8000e2c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b40      	ldr	r3, [pc, #256]	@ (8000f18 <HAL_DMA_Init+0x148>)
 8000e16:	4413      	add	r3, r2
 8000e18:	4a3d      	ldr	r2, [pc, #244]	@ (8000f10 <HAL_DMA_Init+0x140>)
 8000e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1e:	091b      	lsrs	r3, r3, #4
 8000e20:	009a      	lsls	r2, r3, #2
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a3c      	ldr	r2, [pc, #240]	@ (8000f1c <HAL_DMA_Init+0x14c>)
 8000e2a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2202      	movs	r2, #2
 8000e30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000e46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a1b      	ldr	r3, [r3, #32]
 8000e6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f000 f964 	bl	800114c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000e8c:	d102      	bne.n	8000e94 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685a      	ldr	r2, [r3, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000ea8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d010      	beq.n	8000ed4 <HAL_DMA_Init+0x104>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	d80c      	bhi.n	8000ed4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f000 f984 	bl	80011c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	e008      	b.n	8000ee6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40020407 	.word	0x40020407
 8000f0c:	bffdfff8 	.word	0xbffdfff8
 8000f10:	cccccccd 	.word	0xcccccccd
 8000f14:	40020000 	.word	0x40020000
 8000f18:	bffdfbf8 	.word	0xbffdfbf8
 8000f1c:	40020400 	.word	0x40020400

08000f20 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d00d      	beq.n	8000f54 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2204      	movs	r2, #4
 8000f3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2201      	movs	r2, #1
 8000f42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	73fb      	strb	r3, [r7, #15]
 8000f52:	e047      	b.n	8000fe4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 020e 	bic.w	r2, r2, #14
 8000f62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 0201 	bic.w	r2, r2, #1
 8000f72:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f7e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f88:	f003 021f 	and.w	r2, r3, #31
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	2101      	movs	r1, #1
 8000f92:	fa01 f202 	lsl.w	r2, r1, r2
 8000f96:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000fa0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00c      	beq.n	8000fc4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fb8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000fc2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	4798      	blx	r3
    }
  }
  return status;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b084      	sub	sp, #16
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	f003 031f 	and.w	r3, r3, #31
 800100e:	2204      	movs	r2, #4
 8001010:	409a      	lsls	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4013      	ands	r3, r2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d026      	beq.n	8001068 <HAL_DMA_IRQHandler+0x7a>
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	f003 0304 	and.w	r3, r3, #4
 8001020:	2b00      	cmp	r3, #0
 8001022:	d021      	beq.n	8001068 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0320 	and.w	r3, r3, #32
 800102e:	2b00      	cmp	r3, #0
 8001030:	d107      	bne.n	8001042 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0204 	bic.w	r2, r2, #4
 8001040:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001046:	f003 021f 	and.w	r2, r3, #31
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	2104      	movs	r1, #4
 8001050:	fa01 f202 	lsl.w	r2, r1, r2
 8001054:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	2b00      	cmp	r3, #0
 800105c:	d071      	beq.n	8001142 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001066:	e06c      	b.n	8001142 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106c:	f003 031f 	and.w	r3, r3, #31
 8001070:	2202      	movs	r2, #2
 8001072:	409a      	lsls	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4013      	ands	r3, r2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d02e      	beq.n	80010da <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d029      	beq.n	80010da <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0320 	and.w	r3, r3, #32
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10b      	bne.n	80010ac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 020a 	bic.w	r2, r2, #10
 80010a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b0:	f003 021f 	and.w	r2, r3, #31
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b8:	2102      	movs	r1, #2
 80010ba:	fa01 f202 	lsl.w	r2, r1, r2
 80010be:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d038      	beq.n	8001142 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80010d8:	e033      	b.n	8001142 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010de:	f003 031f 	and.w	r3, r3, #31
 80010e2:	2208      	movs	r2, #8
 80010e4:	409a      	lsls	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d02a      	beq.n	8001144 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d025      	beq.n	8001144 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 020e 	bic.w	r2, r2, #14
 8001106:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	2101      	movs	r1, #1
 8001116:	fa01 f202 	lsl.w	r2, r1, r2
 800111a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2201      	movs	r2, #1
 8001120:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001142:	bf00      	nop
 8001144:	bf00      	nop
}
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800114c:	b480      	push	{r7}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b16      	ldr	r3, [pc, #88]	@ (80011b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800115c:	429a      	cmp	r2, r3
 800115e:	d802      	bhi.n	8001166 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001160:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	e001      	b.n	800116a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001168:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	3b08      	subs	r3, #8
 8001176:	4a12      	ldr	r2, [pc, #72]	@ (80011c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001178:	fba2 2303 	umull	r2, r3, r2, r3
 800117c:	091b      	lsrs	r3, r3, #4
 800117e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	009a      	lsls	r2, r3, #2
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4413      	add	r3, r2
 800118c:	461a      	mov	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a0b      	ldr	r2, [pc, #44]	@ (80011c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001196:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 031f 	and.w	r3, r3, #31
 800119e:	2201      	movs	r2, #1
 80011a0:	409a      	lsls	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80011a6:	bf00      	nop
 80011a8:	371c      	adds	r7, #28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40020407 	.word	0x40020407
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020820 	.word	0x40020820
 80011c0:	cccccccd 	.word	0xcccccccd
 80011c4:	40020880 	.word	0x40020880

080011c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80011dc:	4413      	add	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	461a      	mov	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a08      	ldr	r2, [pc, #32]	@ (800120c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80011ea:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	f003 031f 	and.w	r3, r3, #31
 80011f4:	2201      	movs	r2, #1
 80011f6:	409a      	lsls	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	1000823f 	.word	0x1000823f
 800120c:	40020940 	.word	0x40020940

08001210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001210:	b480      	push	{r7}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800121e:	e15a      	b.n	80014d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	2101      	movs	r1, #1
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	fa01 f303 	lsl.w	r3, r1, r3
 800122c:	4013      	ands	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 814c 	beq.w	80014d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b01      	cmp	r3, #1
 8001242:	d005      	beq.n	8001250 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800124c:	2b02      	cmp	r3, #2
 800124e:	d130      	bne.n	80012b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001286:	2201      	movs	r2, #1
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	091b      	lsrs	r3, r3, #4
 800129c:	f003 0201 	and.w	r2, r3, #1
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d017      	beq.n	80012ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d123      	bne.n	8001342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	08da      	lsrs	r2, r3, #3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3208      	adds	r2, #8
 8001302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	691a      	ldr	r2, [r3, #16]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	08da      	lsrs	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3208      	adds	r2, #8
 800133c:	6939      	ldr	r1, [r7, #16]
 800133e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2203      	movs	r2, #3
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0203 	and.w	r2, r3, #3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 80a6 	beq.w	80014d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001384:	4b5b      	ldr	r3, [pc, #364]	@ (80014f4 <HAL_GPIO_Init+0x2e4>)
 8001386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001388:	4a5a      	ldr	r2, [pc, #360]	@ (80014f4 <HAL_GPIO_Init+0x2e4>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001390:	4b58      	ldr	r3, [pc, #352]	@ (80014f4 <HAL_GPIO_Init+0x2e4>)
 8001392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800139c:	4a56      	ldr	r2, [pc, #344]	@ (80014f8 <HAL_GPIO_Init+0x2e8>)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3302      	adds	r3, #2
 80013a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	220f      	movs	r2, #15
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013c6:	d01f      	beq.n	8001408 <HAL_GPIO_Init+0x1f8>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a4c      	ldr	r2, [pc, #304]	@ (80014fc <HAL_GPIO_Init+0x2ec>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d019      	beq.n	8001404 <HAL_GPIO_Init+0x1f4>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a4b      	ldr	r2, [pc, #300]	@ (8001500 <HAL_GPIO_Init+0x2f0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d013      	beq.n	8001400 <HAL_GPIO_Init+0x1f0>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a4a      	ldr	r2, [pc, #296]	@ (8001504 <HAL_GPIO_Init+0x2f4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d00d      	beq.n	80013fc <HAL_GPIO_Init+0x1ec>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a49      	ldr	r2, [pc, #292]	@ (8001508 <HAL_GPIO_Init+0x2f8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d007      	beq.n	80013f8 <HAL_GPIO_Init+0x1e8>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a48      	ldr	r2, [pc, #288]	@ (800150c <HAL_GPIO_Init+0x2fc>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d101      	bne.n	80013f4 <HAL_GPIO_Init+0x1e4>
 80013f0:	2305      	movs	r3, #5
 80013f2:	e00a      	b.n	800140a <HAL_GPIO_Init+0x1fa>
 80013f4:	2306      	movs	r3, #6
 80013f6:	e008      	b.n	800140a <HAL_GPIO_Init+0x1fa>
 80013f8:	2304      	movs	r3, #4
 80013fa:	e006      	b.n	800140a <HAL_GPIO_Init+0x1fa>
 80013fc:	2303      	movs	r3, #3
 80013fe:	e004      	b.n	800140a <HAL_GPIO_Init+0x1fa>
 8001400:	2302      	movs	r3, #2
 8001402:	e002      	b.n	800140a <HAL_GPIO_Init+0x1fa>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <HAL_GPIO_Init+0x1fa>
 8001408:	2300      	movs	r3, #0
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	f002 0203 	and.w	r2, r2, #3
 8001410:	0092      	lsls	r2, r2, #2
 8001412:	4093      	lsls	r3, r2
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800141a:	4937      	ldr	r1, [pc, #220]	@ (80014f8 <HAL_GPIO_Init+0x2e8>)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3302      	adds	r3, #2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001428:	4b39      	ldr	r3, [pc, #228]	@ (8001510 <HAL_GPIO_Init+0x300>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800144c:	4a30      	ldr	r2, [pc, #192]	@ (8001510 <HAL_GPIO_Init+0x300>)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001452:	4b2f      	ldr	r3, [pc, #188]	@ (8001510 <HAL_GPIO_Init+0x300>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001476:	4a26      	ldr	r2, [pc, #152]	@ (8001510 <HAL_GPIO_Init+0x300>)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800147c:	4b24      	ldr	r3, [pc, #144]	@ (8001510 <HAL_GPIO_Init+0x300>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001510 <HAL_GPIO_Init+0x300>)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <HAL_GPIO_Init+0x300>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ca:	4a11      	ldr	r2, [pc, #68]	@ (8001510 <HAL_GPIO_Init+0x300>)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	3301      	adds	r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	fa22 f303 	lsr.w	r3, r2, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f47f ae9d 	bne.w	8001220 <HAL_GPIO_Init+0x10>
  }
}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	371c      	adds	r7, #28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40010000 	.word	0x40010000
 80014fc:	48000400 	.word	0x48000400
 8001500:	48000800 	.word	0x48000800
 8001504:	48000c00 	.word	0x48000c00
 8001508:	48001000 	.word	0x48001000
 800150c:	48001400 	.word	0x48001400
 8001510:	40010400 	.word	0x40010400

08001514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
 8001520:	4613      	mov	r3, r2
 8001522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001524:	787b      	ldrb	r3, [r7, #1]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800152a:	887a      	ldrh	r2, [r7, #2]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001530:	e002      	b.n	8001538 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d141      	bne.n	80015d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001552:	4b4b      	ldr	r3, [pc, #300]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800155a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800155e:	d131      	bne.n	80015c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001560:	4b47      	ldr	r3, [pc, #284]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001566:	4a46      	ldr	r2, [pc, #280]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800156c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001570:	4b43      	ldr	r3, [pc, #268]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001578:	4a41      	ldr	r2, [pc, #260]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800157e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001580:	4b40      	ldr	r3, [pc, #256]	@ (8001684 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2232      	movs	r2, #50	@ 0x32
 8001586:	fb02 f303 	mul.w	r3, r2, r3
 800158a:	4a3f      	ldr	r2, [pc, #252]	@ (8001688 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800158c:	fba2 2303 	umull	r2, r3, r2, r3
 8001590:	0c9b      	lsrs	r3, r3, #18
 8001592:	3301      	adds	r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001596:	e002      	b.n	800159e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3b01      	subs	r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800159e:	4b38      	ldr	r3, [pc, #224]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015aa:	d102      	bne.n	80015b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f2      	bne.n	8001598 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015b2:	4b33      	ldr	r3, [pc, #204]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015be:	d158      	bne.n	8001672 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e057      	b.n	8001674 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015ca:	4a2d      	ldr	r2, [pc, #180]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015d4:	e04d      	b.n	8001672 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015dc:	d141      	bne.n	8001662 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015de:	4b28      	ldr	r3, [pc, #160]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015ea:	d131      	bne.n	8001650 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015ec:	4b24      	ldr	r3, [pc, #144]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015f2:	4a23      	ldr	r2, [pc, #140]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015fc:	4b20      	ldr	r3, [pc, #128]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001604:	4a1e      	ldr	r2, [pc, #120]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001606:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800160a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800160c:	4b1d      	ldr	r3, [pc, #116]	@ (8001684 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2232      	movs	r2, #50	@ 0x32
 8001612:	fb02 f303 	mul.w	r3, r2, r3
 8001616:	4a1c      	ldr	r2, [pc, #112]	@ (8001688 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001618:	fba2 2303 	umull	r2, r3, r2, r3
 800161c:	0c9b      	lsrs	r3, r3, #18
 800161e:	3301      	adds	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001622:	e002      	b.n	800162a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3b01      	subs	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800162a:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001636:	d102      	bne.n	800163e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f2      	bne.n	8001624 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800164a:	d112      	bne.n	8001672 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e011      	b.n	8001674 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001650:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001656:	4a0a      	ldr	r2, [pc, #40]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800165c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001660:	e007      	b.n	8001672 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001662:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800166a:	4a05      	ldr	r2, [pc, #20]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001670:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40007000 	.word	0x40007000
 8001684:	20000000 	.word	0x20000000
 8001688:	431bde83 	.word	0x431bde83

0800168c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	4a04      	ldr	r2, [pc, #16]	@ (80016a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800169a:	6093      	str	r3, [r2, #8]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40007000 	.word	0x40007000

080016ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e2fe      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d075      	beq.n	80017b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ca:	4b97      	ldr	r3, [pc, #604]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016d4:	4b94      	ldr	r3, [pc, #592]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2b0c      	cmp	r3, #12
 80016e2:	d102      	bne.n	80016ea <HAL_RCC_OscConfig+0x3e>
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d002      	beq.n	80016f0 <HAL_RCC_OscConfig+0x44>
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d10b      	bne.n	8001708 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f0:	4b8d      	ldr	r3, [pc, #564]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d05b      	beq.n	80017b4 <HAL_RCC_OscConfig+0x108>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d157      	bne.n	80017b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e2d9      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001710:	d106      	bne.n	8001720 <HAL_RCC_OscConfig+0x74>
 8001712:	4b85      	ldr	r3, [pc, #532]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a84      	ldr	r2, [pc, #528]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 8001718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	e01d      	b.n	800175c <HAL_RCC_OscConfig+0xb0>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001728:	d10c      	bne.n	8001744 <HAL_RCC_OscConfig+0x98>
 800172a:	4b7f      	ldr	r3, [pc, #508]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a7e      	ldr	r2, [pc, #504]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 8001730:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	4b7c      	ldr	r3, [pc, #496]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a7b      	ldr	r2, [pc, #492]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 800173c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e00b      	b.n	800175c <HAL_RCC_OscConfig+0xb0>
 8001744:	4b78      	ldr	r3, [pc, #480]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a77      	ldr	r2, [pc, #476]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 800174a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b75      	ldr	r3, [pc, #468]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a74      	ldr	r2, [pc, #464]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 8001756:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800175a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d013      	beq.n	800178c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff f9f6 	bl	8000b54 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff f9f2 	bl	8000b54 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	@ 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e29e      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800177e:	4b6a      	ldr	r3, [pc, #424]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0xc0>
 800178a:	e014      	b.n	80017b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff f9e2 	bl	8000b54 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001794:	f7ff f9de 	bl	8000b54 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	@ 0x64
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e28a      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017a6:	4b60      	ldr	r3, [pc, #384]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0xe8>
 80017b2:	e000      	b.n	80017b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d075      	beq.n	80018ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c2:	4b59      	ldr	r3, [pc, #356]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017cc:	4b56      	ldr	r3, [pc, #344]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	2b0c      	cmp	r3, #12
 80017da:	d102      	bne.n	80017e2 <HAL_RCC_OscConfig+0x136>
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d002      	beq.n	80017e8 <HAL_RCC_OscConfig+0x13c>
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d11f      	bne.n	8001828 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_RCC_OscConfig+0x154>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e25d      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001800:	4b49      	ldr	r3, [pc, #292]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	061b      	lsls	r3, r3, #24
 800180e:	4946      	ldr	r1, [pc, #280]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 8001810:	4313      	orrs	r3, r2
 8001812:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001814:	4b45      	ldr	r3, [pc, #276]	@ (800192c <HAL_RCC_OscConfig+0x280>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff f94f 	bl	8000abc <HAL_InitTick>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d043      	beq.n	80018ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e249      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d023      	beq.n	8001878 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001830:	4b3d      	ldr	r3, [pc, #244]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a3c      	ldr	r2, [pc, #240]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 8001836:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800183a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff f98a 	bl	8000b54 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001844:	f7ff f986 	bl	8000b54 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e232      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001856:	4b34      	ldr	r3, [pc, #208]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001862:	4b31      	ldr	r3, [pc, #196]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	061b      	lsls	r3, r3, #24
 8001870:	492d      	ldr	r1, [pc, #180]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 8001872:	4313      	orrs	r3, r2
 8001874:	604b      	str	r3, [r1, #4]
 8001876:	e01a      	b.n	80018ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001878:	4b2b      	ldr	r3, [pc, #172]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a2a      	ldr	r2, [pc, #168]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 800187e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff f966 	bl	8000b54 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188c:	f7ff f962 	bl	8000b54 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e20e      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800189e:	4b22      	ldr	r3, [pc, #136]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x1e0>
 80018aa:	e000      	b.n	80018ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d041      	beq.n	800193e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d01c      	beq.n	80018fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c2:	4b19      	ldr	r3, [pc, #100]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 80018c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c8:	4a17      	ldr	r2, [pc, #92]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d2:	f7ff f93f 	bl	8000b54 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018da:	f7ff f93b 	bl	8000b54 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e1e7      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 80018ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0ef      	beq.n	80018da <HAL_RCC_OscConfig+0x22e>
 80018fa:	e020      	b.n	800193e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 80018fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001902:	4a09      	ldr	r2, [pc, #36]	@ (8001928 <HAL_RCC_OscConfig+0x27c>)
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190c:	f7ff f922 	bl	8000b54 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001912:	e00d      	b.n	8001930 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001914:	f7ff f91e 	bl	8000b54 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d906      	bls.n	8001930 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e1ca      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001930:	4b8c      	ldr	r3, [pc, #560]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001932:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1ea      	bne.n	8001914 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 80a6 	beq.w	8001a98 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800194c:	2300      	movs	r3, #0
 800194e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001950:	4b84      	ldr	r3, [pc, #528]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_OscConfig+0x2b4>
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x2b6>
 8001960:	2300      	movs	r3, #0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00d      	beq.n	8001982 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001966:	4b7f      	ldr	r3, [pc, #508]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196a:	4a7e      	ldr	r2, [pc, #504]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 800196c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001970:	6593      	str	r3, [r2, #88]	@ 0x58
 8001972:	4b7c      	ldr	r3, [pc, #496]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800197e:	2301      	movs	r3, #1
 8001980:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001982:	4b79      	ldr	r3, [pc, #484]	@ (8001b68 <HAL_RCC_OscConfig+0x4bc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800198a:	2b00      	cmp	r3, #0
 800198c:	d118      	bne.n	80019c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800198e:	4b76      	ldr	r3, [pc, #472]	@ (8001b68 <HAL_RCC_OscConfig+0x4bc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a75      	ldr	r2, [pc, #468]	@ (8001b68 <HAL_RCC_OscConfig+0x4bc>)
 8001994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800199a:	f7ff f8db 	bl	8000b54 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a2:	f7ff f8d7 	bl	8000b54 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e183      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b4:	4b6c      	ldr	r3, [pc, #432]	@ (8001b68 <HAL_RCC_OscConfig+0x4bc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d108      	bne.n	80019da <HAL_RCC_OscConfig+0x32e>
 80019c8:	4b66      	ldr	r3, [pc, #408]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 80019ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ce:	4a65      	ldr	r2, [pc, #404]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019d8:	e024      	b.n	8001a24 <HAL_RCC_OscConfig+0x378>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b05      	cmp	r3, #5
 80019e0:	d110      	bne.n	8001a04 <HAL_RCC_OscConfig+0x358>
 80019e2:	4b60      	ldr	r3, [pc, #384]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 80019e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e8:	4a5e      	ldr	r2, [pc, #376]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 80019f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019f8:	4a5a      	ldr	r2, [pc, #360]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a02:	e00f      	b.n	8001a24 <HAL_RCC_OscConfig+0x378>
 8001a04:	4b57      	ldr	r3, [pc, #348]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a0a:	4a56      	ldr	r2, [pc, #344]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a14:	4b53      	ldr	r3, [pc, #332]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a1a:	4a52      	ldr	r2, [pc, #328]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001a1c:	f023 0304 	bic.w	r3, r3, #4
 8001a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d016      	beq.n	8001a5a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7ff f892 	bl	8000b54 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a34:	f7ff f88e 	bl	8000b54 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e138      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a4a:	4b46      	ldr	r3, [pc, #280]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0ed      	beq.n	8001a34 <HAL_RCC_OscConfig+0x388>
 8001a58:	e015      	b.n	8001a86 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f87b 	bl	8000b54 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7ff f877 	bl	8000b54 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e121      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a78:	4b3a      	ldr	r3, [pc, #232]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1ed      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a86:	7ffb      	ldrb	r3, [r7, #31]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8c:	4b35      	ldr	r3, [pc, #212]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a90:	4a34      	ldr	r2, [pc, #208]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001a92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a96:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d03c      	beq.n	8001b1e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d01c      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001aac:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abc:	f7ff f84a 	bl	8000b54 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ac4:	f7ff f846 	bl	8000b54 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e0f2      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ad6:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001ad8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0ef      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x418>
 8001ae4:	e01b      	b.n	8001b1e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001ae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aec:	4a1d      	ldr	r2, [pc, #116]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001aee:	f023 0301 	bic.w	r3, r3, #1
 8001af2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af6:	f7ff f82d 	bl	8000b54 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001afe:	f7ff f829 	bl	8000b54 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e0d5      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b10:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001b12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1ef      	bne.n	8001afe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 80c9 	beq.w	8001cba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b28:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b0c      	cmp	r3, #12
 8001b32:	f000 8083 	beq.w	8001c3c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d15e      	bne.n	8001bfc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a08      	ldr	r2, [pc, #32]	@ (8001b64 <HAL_RCC_OscConfig+0x4b8>)
 8001b44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4a:	f7ff f803 	bl	8000b54 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b50:	e00c      	b.n	8001b6c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b52:	f7fe ffff 	bl	8000b54 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d905      	bls.n	8001b6c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e0ab      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b6c:	4b55      	ldr	r3, [pc, #340]	@ (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1ec      	bne.n	8001b52 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b78:	4b52      	ldr	r3, [pc, #328]	@ (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	4b52      	ldr	r3, [pc, #328]	@ (8001cc8 <HAL_RCC_OscConfig+0x61c>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6a11      	ldr	r1, [r2, #32]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b88:	3a01      	subs	r2, #1
 8001b8a:	0112      	lsls	r2, r2, #4
 8001b8c:	4311      	orrs	r1, r2
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001b92:	0212      	lsls	r2, r2, #8
 8001b94:	4311      	orrs	r1, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b9a:	0852      	lsrs	r2, r2, #1
 8001b9c:	3a01      	subs	r2, #1
 8001b9e:	0552      	lsls	r2, r2, #21
 8001ba0:	4311      	orrs	r1, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ba6:	0852      	lsrs	r2, r2, #1
 8001ba8:	3a01      	subs	r2, #1
 8001baa:	0652      	lsls	r2, r2, #25
 8001bac:	4311      	orrs	r1, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001bb2:	06d2      	lsls	r2, r2, #27
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	4943      	ldr	r1, [pc, #268]	@ (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bbc:	4b41      	ldr	r3, [pc, #260]	@ (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a40      	ldr	r2, [pc, #256]	@ (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001bc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bc6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bc8:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4a3d      	ldr	r2, [pc, #244]	@ (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001bce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bd2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7fe ffbe 	bl	8000b54 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7fe ffba 	bl	8000b54 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e066      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bee:	4b35      	ldr	r3, [pc, #212]	@ (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x530>
 8001bfa:	e05e      	b.n	8001cba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfc:	4b31      	ldr	r3, [pc, #196]	@ (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a30      	ldr	r2, [pc, #192]	@ (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001c02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7fe ffa4 	bl	8000b54 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c10:	f7fe ffa0 	bl	8000b54 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e04c      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c22:	4b28      	ldr	r3, [pc, #160]	@ (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c2e:	4b25      	ldr	r3, [pc, #148]	@ (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	4924      	ldr	r1, [pc, #144]	@ (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001c34:	4b25      	ldr	r3, [pc, #148]	@ (8001ccc <HAL_RCC_OscConfig+0x620>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	60cb      	str	r3, [r1, #12]
 8001c3a:	e03e      	b.n	8001cba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e039      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c48:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc4 <HAL_RCC_OscConfig+0x618>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 0203 	and.w	r2, r3, #3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d12c      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	3b01      	subs	r3, #1
 8001c68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d123      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d11b      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d113      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c98:	085b      	lsrs	r3, r3, #1
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d109      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cac:	085b      	lsrs	r3, r3, #1
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d001      	beq.n	8001cba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	019f800c 	.word	0x019f800c
 8001ccc:	feeefffc 	.word	0xfeeefffc

08001cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e11e      	b.n	8001f26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b91      	ldr	r3, [pc, #580]	@ (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d910      	bls.n	8001d18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b8e      	ldr	r3, [pc, #568]	@ (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 020f 	bic.w	r2, r3, #15
 8001cfe:	498c      	ldr	r1, [pc, #560]	@ (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d06:	4b8a      	ldr	r3, [pc, #552]	@ (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e106      	b.n	8001f26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d073      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d129      	bne.n	8001d80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2c:	4b81      	ldr	r3, [pc, #516]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0f4      	b.n	8001f26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d3c:	f000 f966 	bl	800200c <RCC_GetSysClockFreqFromPLLSource>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4a7c      	ldr	r2, [pc, #496]	@ (8001f38 <HAL_RCC_ClockConfig+0x268>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d93f      	bls.n	8001dca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d4a:	4b7a      	ldr	r3, [pc, #488]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d009      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d033      	beq.n	8001dca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d12f      	bne.n	8001dca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d6a:	4b72      	ldr	r3, [pc, #456]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d72:	4a70      	ldr	r2, [pc, #448]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d7a:	2380      	movs	r3, #128	@ 0x80
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	e024      	b.n	8001dca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d107      	bne.n	8001d98 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d88:	4b6a      	ldr	r3, [pc, #424]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d109      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0c6      	b.n	8001f26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d98:	4b66      	ldr	r3, [pc, #408]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0be      	b.n	8001f26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001da8:	f000 f8ce 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4a61      	ldr	r2, [pc, #388]	@ (8001f38 <HAL_RCC_ClockConfig+0x268>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d909      	bls.n	8001dca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001db6:	4b5f      	ldr	r3, [pc, #380]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001dbe:	4a5d      	ldr	r2, [pc, #372]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001dc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dc4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001dc6:	2380      	movs	r3, #128	@ 0x80
 8001dc8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dca:	4b5a      	ldr	r3, [pc, #360]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f023 0203 	bic.w	r2, r3, #3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	4957      	ldr	r1, [pc, #348]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ddc:	f7fe feba 	bl	8000b54 <HAL_GetTick>
 8001de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de2:	e00a      	b.n	8001dfa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de4:	f7fe feb6 	bl	8000b54 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e095      	b.n	8001f26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfa:	4b4e      	ldr	r3, [pc, #312]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 020c 	and.w	r2, r3, #12
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d1eb      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d023      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e24:	4b43      	ldr	r3, [pc, #268]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4a42      	ldr	r2, [pc, #264]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001e2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e2e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001e44:	4a3b      	ldr	r2, [pc, #236]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001e46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4c:	4b39      	ldr	r3, [pc, #228]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4936      	ldr	r1, [pc, #216]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2b80      	cmp	r3, #128	@ 0x80
 8001e64:	d105      	bne.n	8001e72 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e66:	4b33      	ldr	r3, [pc, #204]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	4a32      	ldr	r2, [pc, #200]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001e6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e72:	4b2f      	ldr	r3, [pc, #188]	@ (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d21d      	bcs.n	8001ebc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e80:	4b2b      	ldr	r3, [pc, #172]	@ (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f023 020f 	bic.w	r2, r3, #15
 8001e88:	4929      	ldr	r1, [pc, #164]	@ (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e90:	f7fe fe60 	bl	8000b54 <HAL_GetTick>
 8001e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	e00a      	b.n	8001eae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e98:	f7fe fe5c 	bl	8000b54 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e03b      	b.n	8001f26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eae:	4b20      	ldr	r3, [pc, #128]	@ (8001f30 <HAL_RCC_ClockConfig+0x260>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d1ed      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4917      	ldr	r1, [pc, #92]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ee6:	4b13      	ldr	r3, [pc, #76]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	490f      	ldr	r1, [pc, #60]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001efa:	f000 f825 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001efe:	4602      	mov	r2, r0
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <HAL_RCC_ClockConfig+0x264>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	490c      	ldr	r1, [pc, #48]	@ (8001f3c <HAL_RCC_ClockConfig+0x26c>)
 8001f0c:	5ccb      	ldrb	r3, [r1, r3]
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	fa22 f303 	lsr.w	r3, r2, r3
 8001f16:	4a0a      	ldr	r2, [pc, #40]	@ (8001f40 <HAL_RCC_ClockConfig+0x270>)
 8001f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f44 <HAL_RCC_ClockConfig+0x274>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fdcc 	bl	8000abc <HAL_InitTick>
 8001f24:	4603      	mov	r3, r0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40022000 	.word	0x40022000
 8001f34:	40021000 	.word	0x40021000
 8001f38:	04c4b400 	.word	0x04c4b400
 8001f3c:	08002aac 	.word	0x08002aac
 8001f40:	20000000 	.word	0x20000000
 8001f44:	20000004 	.word	0x20000004

08001f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d102      	bne.n	8001f60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002004 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	e047      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f60:	4b27      	ldr	r3, [pc, #156]	@ (8002000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 030c 	and.w	r3, r3, #12
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d102      	bne.n	8001f72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f6c:	4b26      	ldr	r3, [pc, #152]	@ (8002008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	e03e      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f72:	4b23      	ldr	r3, [pc, #140]	@ (8002000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b0c      	cmp	r3, #12
 8001f7c:	d136      	bne.n	8001fec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f7e:	4b20      	ldr	r3, [pc, #128]	@ (8002000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f88:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3301      	adds	r3, #1
 8001f94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d10c      	bne.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f9c:	4a1a      	ldr	r2, [pc, #104]	@ (8002008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa4:	4a16      	ldr	r2, [pc, #88]	@ (8002000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fa6:	68d2      	ldr	r2, [r2, #12]
 8001fa8:	0a12      	lsrs	r2, r2, #8
 8001faa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001fae:	fb02 f303 	mul.w	r3, r2, r3
 8001fb2:	617b      	str	r3, [r7, #20]
      break;
 8001fb4:	e00c      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fb6:	4a13      	ldr	r2, [pc, #76]	@ (8002004 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbe:	4a10      	ldr	r2, [pc, #64]	@ (8002000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fc0:	68d2      	ldr	r2, [r2, #12]
 8001fc2:	0a12      	lsrs	r2, r2, #8
 8001fc4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001fc8:	fb02 f303 	mul.w	r3, r2, r3
 8001fcc:	617b      	str	r3, [r7, #20]
      break;
 8001fce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	0e5b      	lsrs	r3, r3, #25
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	e001      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ff0:	693b      	ldr	r3, [r7, #16]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	371c      	adds	r7, #28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
 8002004:	00f42400 	.word	0x00f42400
 8002008:	02dc6c00 	.word	0x02dc6c00

0800200c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002012:	4b1e      	ldr	r3, [pc, #120]	@ (800208c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800201c:	4b1b      	ldr	r3, [pc, #108]	@ (800208c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	3301      	adds	r3, #1
 8002028:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d10c      	bne.n	800204a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002030:	4a17      	ldr	r2, [pc, #92]	@ (8002090 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	fbb2 f3f3 	udiv	r3, r2, r3
 8002038:	4a14      	ldr	r2, [pc, #80]	@ (800208c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800203a:	68d2      	ldr	r2, [r2, #12]
 800203c:	0a12      	lsrs	r2, r2, #8
 800203e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	617b      	str	r3, [r7, #20]
    break;
 8002048:	e00c      	b.n	8002064 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800204a:	4a12      	ldr	r2, [pc, #72]	@ (8002094 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002052:	4a0e      	ldr	r2, [pc, #56]	@ (800208c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002054:	68d2      	ldr	r2, [r2, #12]
 8002056:	0a12      	lsrs	r2, r2, #8
 8002058:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800205c:	fb02 f303 	mul.w	r3, r2, r3
 8002060:	617b      	str	r3, [r7, #20]
    break;
 8002062:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002064:	4b09      	ldr	r3, [pc, #36]	@ (800208c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	0e5b      	lsrs	r3, r3, #25
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	3301      	adds	r3, #1
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	fbb2 f3f3 	udiv	r3, r2, r3
 800207c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800207e:	687b      	ldr	r3, [r7, #4]
}
 8002080:	4618      	mov	r0, r3
 8002082:	371c      	adds	r7, #28
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	40021000 	.word	0x40021000
 8002090:	02dc6c00 	.word	0x02dc6c00
 8002094:	00f42400 	.word	0x00f42400

08002098 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e09d      	b.n	80021e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d108      	bne.n	80020c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020ba:	d009      	beq.n	80020d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	61da      	str	r2, [r3, #28]
 80020c2:	e005      	b.n	80020d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe fb4c 	bl	8000788 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002106:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002110:	d902      	bls.n	8002118 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	e002      	b.n	800211e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002118:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800211c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002126:	d007      	beq.n	8002138 <HAL_SPI_Init+0xa0>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002130:	d002      	beq.n	8002138 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800217a:	ea42 0103 	orr.w	r1, r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002182:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	0c1b      	lsrs	r3, r3, #16
 8002194:	f003 0204 	and.w	r2, r3, #4
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80021b4:	ea42 0103 	orr.w	r1, r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	69da      	ldr	r2, [r3, #28]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b088      	sub	sp, #32
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	4613      	mov	r3, r2
 80021fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_SPI_Transmit+0x22>
 800220c:	2302      	movs	r3, #2
 800220e:	e15f      	b.n	80024d0 <HAL_SPI_Transmit+0x2e2>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002218:	f7fe fc9c 	bl	8000b54 <HAL_GetTick>
 800221c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b01      	cmp	r3, #1
 800222c:	d002      	beq.n	8002234 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800222e:	2302      	movs	r3, #2
 8002230:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002232:	e148      	b.n	80024c6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <HAL_SPI_Transmit+0x52>
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d102      	bne.n	8002246 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002244:	e13f      	b.n	80024c6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2203      	movs	r2, #3
 800224a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	88fa      	ldrh	r2, [r7, #6]
 800225e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	88fa      	ldrh	r2, [r7, #6]
 8002264:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002290:	d10f      	bne.n	80022b2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022bc:	2b40      	cmp	r3, #64	@ 0x40
 80022be:	d007      	beq.n	80022d0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80022d8:	d94f      	bls.n	800237a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <HAL_SPI_Transmit+0xfa>
 80022e2:	8afb      	ldrh	r3, [r7, #22]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d142      	bne.n	800236e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ec:	881a      	ldrh	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f8:	1c9a      	adds	r2, r3, #2
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002302:	b29b      	uxth	r3, r3
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800230c:	e02f      	b.n	800236e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b02      	cmp	r3, #2
 800231a:	d112      	bne.n	8002342 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002320:	881a      	ldrh	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232c:	1c9a      	adds	r2, r3, #2
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002336:	b29b      	uxth	r3, r3
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002340:	e015      	b.n	800236e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002342:	f7fe fc07 	bl	8000b54 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d803      	bhi.n	800235a <HAL_SPI_Transmit+0x16c>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002358:	d102      	bne.n	8002360 <HAL_SPI_Transmit+0x172>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d106      	bne.n	800236e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800236c:	e0ab      	b.n	80024c6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1ca      	bne.n	800230e <HAL_SPI_Transmit+0x120>
 8002378:	e080      	b.n	800247c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <HAL_SPI_Transmit+0x19a>
 8002382:	8afb      	ldrh	r3, [r7, #22]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d174      	bne.n	8002472 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d912      	bls.n	80023b8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002396:	881a      	ldrh	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a2:	1c9a      	adds	r2, r3, #2
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	3b02      	subs	r3, #2
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80023b6:	e05c      	b.n	8002472 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	330c      	adds	r3, #12
 80023c2:	7812      	ldrb	r2, [r2, #0]
 80023c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80023de:	e048      	b.n	8002472 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d12b      	bne.n	8002446 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d912      	bls.n	800241e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fc:	881a      	ldrh	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002408:	1c9a      	adds	r2, r3, #2
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b02      	subs	r3, #2
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800241c:	e029      	b.n	8002472 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	330c      	adds	r3, #12
 8002428:	7812      	ldrb	r2, [r2, #0]
 800242a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002444:	e015      	b.n	8002472 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002446:	f7fe fb85 	bl	8000b54 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d803      	bhi.n	800245e <HAL_SPI_Transmit+0x270>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245c:	d102      	bne.n	8002464 <HAL_SPI_Transmit+0x276>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d106      	bne.n	8002472 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002470:	e029      	b.n	80024c6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1b1      	bne.n	80023e0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	6839      	ldr	r1, [r7, #0]
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 fa5b 	bl	800293c <SPI_EndRxTxTransaction>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10a      	bne.n	80024b0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	77fb      	strb	r3, [r7, #31]
 80024bc:	e003      	b.n	80024c6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80024ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3720      	adds	r7, #32
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10e      	bne.n	8002518 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002500:	2b00      	cmp	r3, #0
 8002502:	d009      	beq.n	8002518 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	d004      	beq.n	8002518 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	4798      	blx	r3
    return;
 8002516:	e0ce      	b.n	80026b6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_SPI_IRQHandler+0x5e>
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002528:	2b00      	cmp	r3, #0
 800252a:	d004      	beq.n	8002536 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	4798      	blx	r3
    return;
 8002534:	e0bf      	b.n	80026b6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <HAL_SPI_IRQHandler+0x7e>
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	d105      	bne.n	8002556 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80b0 	beq.w	80026b6 <HAL_SPI_IRQHandler+0x1de>
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 80aa 	beq.w	80026b6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002568:	2b00      	cmp	r3, #0
 800256a:	d023      	beq.n	80025b4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b03      	cmp	r3, #3
 8002576:	d011      	beq.n	800259c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800257c:	f043 0204 	orr.w	r2, r3, #4
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	e00b      	b.n	80025b4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	693b      	ldr	r3, [r7, #16]
        return;
 80025b2:	e080      	b.n	80026b6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	f003 0320 	and.w	r3, r3, #32
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d014      	beq.n	80025e8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c2:	f043 0201 	orr.w	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00c      	beq.n	800260c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f6:	f043 0208 	orr.w	r2, r3, #8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002610:	2b00      	cmp	r3, #0
 8002612:	d04f      	beq.n	80026b4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002622:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d104      	bne.n	8002640 <HAL_SPI_IRQHandler+0x168>
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d034      	beq.n	80026aa <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0203 	bic.w	r2, r2, #3
 800264e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002654:	2b00      	cmp	r3, #0
 8002656:	d011      	beq.n	800267c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265c:	4a17      	ldr	r2, [pc, #92]	@ (80026bc <HAL_SPI_IRQHandler+0x1e4>)
 800265e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002664:	4618      	mov	r0, r3
 8002666:	f7fe fc5b 	bl	8000f20 <HAL_DMA_Abort_IT>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002674:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002680:	2b00      	cmp	r3, #0
 8002682:	d016      	beq.n	80026b2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002688:	4a0c      	ldr	r2, [pc, #48]	@ (80026bc <HAL_SPI_IRQHandler+0x1e4>)
 800268a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002690:	4618      	mov	r0, r3
 8002692:	f7fe fc45 	bl	8000f20 <HAL_DMA_Abort_IT>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80026a8:	e003      	b.n	80026b2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f808 	bl	80026c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80026b0:	e000      	b.n	80026b4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80026b2:	bf00      	nop
    return;
 80026b4:	bf00      	nop
  }
}
 80026b6:	3720      	adds	r7, #32
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	080026d5 	.word	0x080026d5

080026c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f7ff ffe5 	bl	80026c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	4613      	mov	r3, r2
 800270e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002710:	f7fe fa20 	bl	8000b54 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	4413      	add	r3, r2
 800271e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002720:	f7fe fa18 	bl	8000b54 <HAL_GetTick>
 8002724:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002726:	4b39      	ldr	r3, [pc, #228]	@ (800280c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	015b      	lsls	r3, r3, #5
 800272c:	0d1b      	lsrs	r3, r3, #20
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	fb02 f303 	mul.w	r3, r2, r3
 8002734:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002736:	e054      	b.n	80027e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273e:	d050      	beq.n	80027e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002740:	f7fe fa08 	bl	8000b54 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	429a      	cmp	r2, r3
 800274e:	d902      	bls.n	8002756 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d13d      	bne.n	80027d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002764:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800276e:	d111      	bne.n	8002794 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002778:	d004      	beq.n	8002784 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002782:	d107      	bne.n	8002794 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002792:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002798:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800279c:	d10f      	bne.n	80027be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e017      	b.n	8002802 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3b01      	subs	r3, #1
 80027e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4013      	ands	r3, r2
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	bf0c      	ite	eq
 80027f2:	2301      	moveq	r3, #1
 80027f4:	2300      	movne	r3, #0
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d19b      	bne.n	8002738 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3720      	adds	r7, #32
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000000 	.word	0x20000000

08002810 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	@ 0x28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002822:	f7fe f997 	bl	8000b54 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	4413      	add	r3, r2
 8002830:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002832:	f7fe f98f 	bl	8000b54 <HAL_GetTick>
 8002836:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	330c      	adds	r3, #12
 800283e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002840:	4b3d      	ldr	r3, [pc, #244]	@ (8002938 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00da      	lsls	r2, r3, #3
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	0d1b      	lsrs	r3, r3, #20
 8002850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002852:	fb02 f303 	mul.w	r3, r2, r3
 8002856:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002858:	e060      	b.n	800291c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002860:	d107      	bne.n	8002872 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d104      	bne.n	8002872 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002870:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002878:	d050      	beq.n	800291c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800287a:	f7fe f96b 	bl	8000b54 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002886:	429a      	cmp	r2, r3
 8002888:	d902      	bls.n	8002890 <SPI_WaitFifoStateUntilTimeout+0x80>
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	2b00      	cmp	r3, #0
 800288e:	d13d      	bne.n	800290c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800289e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028a8:	d111      	bne.n	80028ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028b2:	d004      	beq.n	80028be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028bc:	d107      	bne.n	80028ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028d6:	d10f      	bne.n	80028f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e010      	b.n	800292e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	3b01      	subs	r3, #1
 800291a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	4013      	ands	r3, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	429a      	cmp	r2, r3
 800292a:	d196      	bne.n	800285a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3728      	adds	r7, #40	@ 0x28
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000000 	.word	0x20000000

0800293c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2200      	movs	r2, #0
 8002950:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f7ff ff5b 	bl	8002810 <SPI_WaitFifoStateUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002964:	f043 0220 	orr.w	r2, r3, #32
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e027      	b.n	80029c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2200      	movs	r2, #0
 8002978:	2180      	movs	r1, #128	@ 0x80
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f7ff fec0 	bl	8002700 <SPI_WaitFlagStateUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800298a:	f043 0220 	orr.w	r2, r3, #32
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e014      	b.n	80029c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2200      	movs	r2, #0
 800299e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f7ff ff34 	bl	8002810 <SPI_WaitFifoStateUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b2:	f043 0220 	orr.w	r2, r3, #32
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e000      	b.n	80029c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <memset>:
 80029c8:	4402      	add	r2, r0
 80029ca:	4603      	mov	r3, r0
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d100      	bne.n	80029d2 <memset+0xa>
 80029d0:	4770      	bx	lr
 80029d2:	f803 1b01 	strb.w	r1, [r3], #1
 80029d6:	e7f9      	b.n	80029cc <memset+0x4>

080029d8 <__libc_init_array>:
 80029d8:	b570      	push	{r4, r5, r6, lr}
 80029da:	4d0d      	ldr	r5, [pc, #52]	@ (8002a10 <__libc_init_array+0x38>)
 80029dc:	4c0d      	ldr	r4, [pc, #52]	@ (8002a14 <__libc_init_array+0x3c>)
 80029de:	1b64      	subs	r4, r4, r5
 80029e0:	10a4      	asrs	r4, r4, #2
 80029e2:	2600      	movs	r6, #0
 80029e4:	42a6      	cmp	r6, r4
 80029e6:	d109      	bne.n	80029fc <__libc_init_array+0x24>
 80029e8:	4d0b      	ldr	r5, [pc, #44]	@ (8002a18 <__libc_init_array+0x40>)
 80029ea:	4c0c      	ldr	r4, [pc, #48]	@ (8002a1c <__libc_init_array+0x44>)
 80029ec:	f000 f818 	bl	8002a20 <_init>
 80029f0:	1b64      	subs	r4, r4, r5
 80029f2:	10a4      	asrs	r4, r4, #2
 80029f4:	2600      	movs	r6, #0
 80029f6:	42a6      	cmp	r6, r4
 80029f8:	d105      	bne.n	8002a06 <__libc_init_array+0x2e>
 80029fa:	bd70      	pop	{r4, r5, r6, pc}
 80029fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a00:	4798      	blx	r3
 8002a02:	3601      	adds	r6, #1
 8002a04:	e7ee      	b.n	80029e4 <__libc_init_array+0xc>
 8002a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a0a:	4798      	blx	r3
 8002a0c:	3601      	adds	r6, #1
 8002a0e:	e7f2      	b.n	80029f6 <__libc_init_array+0x1e>
 8002a10:	08002abc 	.word	0x08002abc
 8002a14:	08002abc 	.word	0x08002abc
 8002a18:	08002abc 	.word	0x08002abc
 8002a1c:	08002ac0 	.word	0x08002ac0

08002a20 <_init>:
 8002a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a22:	bf00      	nop
 8002a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a26:	bc08      	pop	{r3}
 8002a28:	469e      	mov	lr, r3
 8002a2a:	4770      	bx	lr

08002a2c <_fini>:
 8002a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2e:	bf00      	nop
 8002a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a32:	bc08      	pop	{r3}
 8002a34:	469e      	mov	lr, r3
 8002a36:	4770      	bx	lr
