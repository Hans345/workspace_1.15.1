
104_StateMachine_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033ec  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  080035c4  080035c4  000045c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de0  08003de0  00005014  2**0
                  CONTENTS
  4 .ARM          00000000  08003de0  08003de0  00005014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003de0  08003de0  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003de0  08003de0  00004de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003de4  08003de4  00004de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003de8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000014  08003dfc  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08003dfc  000051a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f815  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002528  00000000  00000000  00014859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00016d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb9  00000000  00000000  00017e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002612b  00000000  00000000  00018ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012195  00000000  00000000  0003ebf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7388  00000000  00000000  00050d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148111  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004540  00000000  00000000  00148154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0014c694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080035ac 	.word	0x080035ac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	080035ac 	.word	0x080035ac

08000218 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000218:	b590      	push	{r4, r7, lr}
 800021a:	b085      	sub	sp, #20
 800021c:	af02      	add	r7, sp, #8
 800021e:	4604      	mov	r4, r0
 8000220:	4608      	mov	r0, r1
 8000222:	4611      	mov	r1, r2
 8000224:	461a      	mov	r2, r3
 8000226:	4623      	mov	r3, r4
 8000228:	80fb      	strh	r3, [r7, #6]
 800022a:	4603      	mov	r3, r0
 800022c:	80bb      	strh	r3, [r7, #4]
 800022e:	460b      	mov	r3, r1
 8000230:	807b      	strh	r3, [r7, #2]
 8000232:	4613      	mov	r3, r2
 8000234:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000236:	88f8      	ldrh	r0, [r7, #6]
 8000238:	88b9      	ldrh	r1, [r7, #4]
 800023a:	887a      	ldrh	r2, [r7, #2]
 800023c:	883c      	ldrh	r4, [r7, #0]
 800023e:	8b3b      	ldrh	r3, [r7, #24]
 8000240:	9300      	str	r3, [sp, #0]
 8000242:	4623      	mov	r3, r4
 8000244:	f000 fa88 	bl	8000758 <ST7735_FillRectangle>
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	bd90      	pop	{r4, r7, pc}

08000250 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af02      	add	r7, sp, #8
 8000256:	4603      	mov	r3, r0
 8000258:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800025a:	4b08      	ldr	r3, [pc, #32]	@ (800027c <fillScreen+0x2c>)
 800025c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000260:	4b07      	ldr	r3, [pc, #28]	@ (8000280 <fillScreen+0x30>)
 8000262:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000266:	88fb      	ldrh	r3, [r7, #6]
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	460b      	mov	r3, r1
 800026c:	2100      	movs	r1, #0
 800026e:	2000      	movs	r0, #0
 8000270:	f7ff ffd2 	bl	8000218 <fillRect>
}
 8000274:	bf00      	nop
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000030 	.word	0x20000030
 8000280:	20000032 	.word	0x20000032

08000284 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800028e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000292:	f001 fc77 	bl	8001b84 <HAL_GPIO_WritePin>
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}

0800029a <ST7735_Unselect>:

void ST7735_Unselect()
{
 800029a:	b580      	push	{r7, lr}
 800029c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a8:	f001 fc6c 	bl	8001b84 <HAL_GPIO_WritePin>
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <ST7735_Reset>:

void ST7735_Reset()
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2140      	movs	r1, #64	@ 0x40
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002bc:	f001 fc62 	bl	8001b84 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80002c0:	2005      	movs	r0, #5
 80002c2:	f000 ffd9 	bl	8001278 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80002c6:	2201      	movs	r2, #1
 80002c8:	2140      	movs	r1, #64	@ 0x40
 80002ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ce:	f001 fc59 	bl	8001b84 <HAL_GPIO_WritePin>
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002e8:	4806      	ldr	r0, [pc, #24]	@ (8000304 <ST7735_WriteCommand+0x2c>)
 80002ea:	f001 fc4b 	bl	8001b84 <HAL_GPIO_WritePin>
		{

		}
	#endif
	#ifdef WITHOUT_DMA
		HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80002ee:	1df9      	adds	r1, r7, #7
 80002f0:	f04f 33ff 	mov.w	r3, #4294967295
 80002f4:	2201      	movs	r2, #1
 80002f6:	4804      	ldr	r0, [pc, #16]	@ (8000308 <ST7735_WriteCommand+0x30>)
 80002f8:	f002 fae3 	bl	80028c2 <HAL_SPI_Transmit>
	#endif
}
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	48000400 	.word	0x48000400
 8000308:	2000003c 	.word	0x2000003c

0800030c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000316:	2201      	movs	r2, #1
 8000318:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800031c:	4807      	ldr	r0, [pc, #28]	@ (800033c <ST7735_WriteData+0x30>)
 800031e:	f001 fc31 	bl	8001b84 <HAL_GPIO_WritePin>
    	{

    	}
	#endif
	#ifdef WITHOUT_DMA
    	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	b29a      	uxth	r2, r3
 8000326:	f04f 33ff 	mov.w	r3, #4294967295
 800032a:	6879      	ldr	r1, [r7, #4]
 800032c:	4804      	ldr	r0, [pc, #16]	@ (8000340 <ST7735_WriteData+0x34>)
 800032e:	f002 fac8 	bl	80028c2 <HAL_SPI_Transmit>
	#endif
}
 8000332:	bf00      	nop
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	48000400 	.word	0x48000400
 8000340:	2000003c 	.word	0x2000003c

08000344 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	1c5a      	adds	r2, r3, #1
 8000350:	607a      	str	r2, [r7, #4]
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000356:	e034      	b.n	80003c2 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	1c5a      	adds	r2, r3, #1
 800035c:	607a      	str	r2, [r7, #4]
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000362:	7afb      	ldrb	r3, [r7, #11]
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ffb7 	bl	80002d8 <ST7735_WriteCommand>

        numArgs = *addr++;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	1c5a      	adds	r2, r3, #1
 800036e:	607a      	str	r2, [r7, #4]
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000374:	7abb      	ldrb	r3, [r7, #10]
 8000376:	b29b      	uxth	r3, r3
 8000378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800037c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800037e:	7abb      	ldrb	r3, [r7, #10]
 8000380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000384:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000386:	7abb      	ldrb	r3, [r7, #10]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d008      	beq.n	800039e <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800038c:	7abb      	ldrb	r3, [r7, #10]
 800038e:	4619      	mov	r1, r3
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f7ff ffbb 	bl	800030c <ST7735_WriteData>
            addr += numArgs;
 8000396:	7abb      	ldrb	r3, [r7, #10]
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	4413      	add	r3, r2
 800039c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800039e:	89bb      	ldrh	r3, [r7, #12]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d00e      	beq.n	80003c2 <DisplayInit+0x7e>
            ms = *addr++;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	1c5a      	adds	r2, r3, #1
 80003a8:	607a      	str	r2, [r7, #4]
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80003ae:	89bb      	ldrh	r3, [r7, #12]
 80003b0:	2bff      	cmp	r3, #255	@ 0xff
 80003b2:	d102      	bne.n	80003ba <DisplayInit+0x76>
 80003b4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80003b8:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80003ba:	89bb      	ldrh	r3, [r7, #12]
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 ff5b 	bl	8001278 <HAL_Delay>
    while(numCommands--) {
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	1e5a      	subs	r2, r3, #1
 80003c6:	73fa      	strb	r2, [r7, #15]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d1c5      	bne.n	8000358 <DisplayInit+0x14>
        }
    }
}
 80003cc:	bf00      	nop
 80003ce:	bf00      	nop
 80003d0:	3710      	adds	r7, #16
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80003d8:	b590      	push	{r4, r7, lr}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4604      	mov	r4, r0
 80003e0:	4608      	mov	r0, r1
 80003e2:	4611      	mov	r1, r2
 80003e4:	461a      	mov	r2, r3
 80003e6:	4623      	mov	r3, r4
 80003e8:	71fb      	strb	r3, [r7, #7]
 80003ea:	4603      	mov	r3, r0
 80003ec:	71bb      	strb	r3, [r7, #6]
 80003ee:	460b      	mov	r3, r1
 80003f0:	717b      	strb	r3, [r7, #5]
 80003f2:	4613      	mov	r3, r2
 80003f4:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80003f6:	202a      	movs	r0, #42	@ 0x2a
 80003f8:	f7ff ff6e 	bl	80002d8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80003fc:	2300      	movs	r3, #0
 80003fe:	733b      	strb	r3, [r7, #12]
 8000400:	4b17      	ldr	r3, [pc, #92]	@ (8000460 <ST7735_SetAddressWindow+0x88>)
 8000402:	781a      	ldrb	r2, [r3, #0]
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	4413      	add	r3, r2
 8000408:	b2db      	uxtb	r3, r3
 800040a:	737b      	strb	r3, [r7, #13]
 800040c:	2300      	movs	r3, #0
 800040e:	73bb      	strb	r3, [r7, #14]
 8000410:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <ST7735_SetAddressWindow+0x88>)
 8000412:	781a      	ldrb	r2, [r3, #0]
 8000414:	797b      	ldrb	r3, [r7, #5]
 8000416:	4413      	add	r3, r2
 8000418:	b2db      	uxtb	r3, r3
 800041a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800041c:	f107 030c 	add.w	r3, r7, #12
 8000420:	2104      	movs	r1, #4
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff ff72 	bl	800030c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000428:	202b      	movs	r0, #43	@ 0x2b
 800042a:	f7ff ff55 	bl	80002d8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800042e:	4b0d      	ldr	r3, [pc, #52]	@ (8000464 <ST7735_SetAddressWindow+0x8c>)
 8000430:	781a      	ldrb	r2, [r3, #0]
 8000432:	79bb      	ldrb	r3, [r7, #6]
 8000434:	4413      	add	r3, r2
 8000436:	b2db      	uxtb	r3, r3
 8000438:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800043a:	4b0a      	ldr	r3, [pc, #40]	@ (8000464 <ST7735_SetAddressWindow+0x8c>)
 800043c:	781a      	ldrb	r2, [r3, #0]
 800043e:	793b      	ldrb	r3, [r7, #4]
 8000440:	4413      	add	r3, r2
 8000442:	b2db      	uxtb	r3, r3
 8000444:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000446:	f107 030c 	add.w	r3, r7, #12
 800044a:	2104      	movs	r1, #4
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ff5d 	bl	800030c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000452:	202c      	movs	r0, #44	@ 0x2c
 8000454:	f7ff ff40 	bl	80002d8 <ST7735_WriteCommand>
}
 8000458:	bf00      	nop
 800045a:	3714      	adds	r7, #20
 800045c:	46bd      	mov	sp, r7
 800045e:	bd90      	pop	{r4, r7, pc}
 8000460:	20000037 	.word	0x20000037
 8000464:	20000038 	.word	0x20000038

08000468 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000472:	f7ff ff07 	bl	8000284 <ST7735_Select>
    ST7735_Reset();
 8000476:	f7ff ff1b 	bl	80002b0 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800047a:	480c      	ldr	r0, [pc, #48]	@ (80004ac <ST7735_Init+0x44>)
 800047c:	f7ff ff62 	bl	8000344 <DisplayInit>
    DisplayInit(init_cmds2);
 8000480:	480b      	ldr	r0, [pc, #44]	@ (80004b0 <ST7735_Init+0x48>)
 8000482:	f7ff ff5f 	bl	8000344 <DisplayInit>
    DisplayInit(init_cmds3);
 8000486:	480b      	ldr	r0, [pc, #44]	@ (80004b4 <ST7735_Init+0x4c>)
 8000488:	f7ff ff5c 	bl	8000344 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 800048c:	4b0a      	ldr	r3, [pc, #40]	@ (80004b8 <ST7735_Init+0x50>)
 800048e:	2202      	movs	r2, #2
 8000490:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 8000492:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <ST7735_Init+0x54>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	4618      	mov	r0, r3
 800049c:	f000 f810 	bl	80004c0 <ST7735_SetRotation>
    ST7735_Unselect();
 80004a0:	f7ff fefb 	bl	800029a <ST7735_Unselect>

}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	080035f0 	.word	0x080035f0
 80004b0:	08003628 	.word	0x08003628
 80004b4:	08003638 	.word	0x08003638
 80004b8:	20000035 	.word	0x20000035
 80004bc:	20000036 	.word	0x20000036

080004c0 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	f003 0303 	and.w	r3, r3, #3
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	4b33      	ldr	r3, [pc, #204]	@ (80005a4 <ST7735_SetRotation+0xe4>)
 80004d8:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80004da:	4b32      	ldr	r3, [pc, #200]	@ (80005a4 <ST7735_SetRotation+0xe4>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b03      	cmp	r3, #3
 80004e0:	d84e      	bhi.n	8000580 <ST7735_SetRotation+0xc0>
 80004e2:	a201      	add	r2, pc, #4	@ (adr r2, 80004e8 <ST7735_SetRotation+0x28>)
 80004e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e8:	080004f9 	.word	0x080004f9
 80004ec:	0800051b 	.word	0x0800051b
 80004f0:	0800053d 	.word	0x0800053d
 80004f4:	0800055f 	.word	0x0800055f
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80004f8:	23c0      	movs	r3, #192	@ 0xc0
 80004fa:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80004fc:	4b2a      	ldr	r3, [pc, #168]	@ (80005a8 <ST7735_SetRotation+0xe8>)
 80004fe:	2280      	movs	r2, #128	@ 0x80
 8000500:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000502:	4b2a      	ldr	r3, [pc, #168]	@ (80005ac <ST7735_SetRotation+0xec>)
 8000504:	2280      	movs	r2, #128	@ 0x80
 8000506:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000508:	4b29      	ldr	r3, [pc, #164]	@ (80005b0 <ST7735_SetRotation+0xf0>)
 800050a:	781a      	ldrb	r2, [r3, #0]
 800050c:	4b29      	ldr	r3, [pc, #164]	@ (80005b4 <ST7735_SetRotation+0xf4>)
 800050e:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000510:	4b29      	ldr	r3, [pc, #164]	@ (80005b8 <ST7735_SetRotation+0xf8>)
 8000512:	781a      	ldrb	r2, [r3, #0]
 8000514:	4b29      	ldr	r3, [pc, #164]	@ (80005bc <ST7735_SetRotation+0xfc>)
 8000516:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000518:	e032      	b.n	8000580 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800051a:	23a0      	movs	r3, #160	@ 0xa0
 800051c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800051e:	4b23      	ldr	r3, [pc, #140]	@ (80005ac <ST7735_SetRotation+0xec>)
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000524:	4b20      	ldr	r3, [pc, #128]	@ (80005a8 <ST7735_SetRotation+0xe8>)
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800052a:	4b21      	ldr	r3, [pc, #132]	@ (80005b0 <ST7735_SetRotation+0xf0>)
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	4b23      	ldr	r3, [pc, #140]	@ (80005bc <ST7735_SetRotation+0xfc>)
 8000530:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000532:	4b21      	ldr	r3, [pc, #132]	@ (80005b8 <ST7735_SetRotation+0xf8>)
 8000534:	781a      	ldrb	r2, [r3, #0]
 8000536:	4b1f      	ldr	r3, [pc, #124]	@ (80005b4 <ST7735_SetRotation+0xf4>)
 8000538:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800053a:	e021      	b.n	8000580 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800053c:	2300      	movs	r3, #0
 800053e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000540:	4b19      	ldr	r3, [pc, #100]	@ (80005a8 <ST7735_SetRotation+0xe8>)
 8000542:	2280      	movs	r2, #128	@ 0x80
 8000544:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000546:	4b19      	ldr	r3, [pc, #100]	@ (80005ac <ST7735_SetRotation+0xec>)
 8000548:	2280      	movs	r2, #128	@ 0x80
 800054a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 800054c:	4b18      	ldr	r3, [pc, #96]	@ (80005b0 <ST7735_SetRotation+0xf0>)
 800054e:	781a      	ldrb	r2, [r3, #0]
 8000550:	4b18      	ldr	r3, [pc, #96]	@ (80005b4 <ST7735_SetRotation+0xf4>)
 8000552:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000554:	4b18      	ldr	r3, [pc, #96]	@ (80005b8 <ST7735_SetRotation+0xf8>)
 8000556:	781a      	ldrb	r2, [r3, #0]
 8000558:	4b18      	ldr	r3, [pc, #96]	@ (80005bc <ST7735_SetRotation+0xfc>)
 800055a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800055c:	e010      	b.n	8000580 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800055e:	2360      	movs	r3, #96	@ 0x60
 8000560:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000562:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <ST7735_SetRotation+0xec>)
 8000564:	2280      	movs	r2, #128	@ 0x80
 8000566:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000568:	4b0f      	ldr	r3, [pc, #60]	@ (80005a8 <ST7735_SetRotation+0xe8>)
 800056a:	2280      	movs	r2, #128	@ 0x80
 800056c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800056e:	4b10      	ldr	r3, [pc, #64]	@ (80005b0 <ST7735_SetRotation+0xf0>)
 8000570:	781a      	ldrb	r2, [r3, #0]
 8000572:	4b12      	ldr	r3, [pc, #72]	@ (80005bc <ST7735_SetRotation+0xfc>)
 8000574:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000576:	4b10      	ldr	r3, [pc, #64]	@ (80005b8 <ST7735_SetRotation+0xf8>)
 8000578:	781a      	ldrb	r2, [r3, #0]
 800057a:	4b0e      	ldr	r3, [pc, #56]	@ (80005b4 <ST7735_SetRotation+0xf4>)
 800057c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800057e:	bf00      	nop
  }
  ST7735_Select();
 8000580:	f7ff fe80 	bl	8000284 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000584:	2036      	movs	r0, #54	@ 0x36
 8000586:	f7ff fea7 	bl	80002d8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800058a:	f107 030f 	add.w	r3, r7, #15
 800058e:	2101      	movs	r1, #1
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff febb 	bl	800030c <ST7735_WriteData>
  ST7735_Unselect();
 8000596:	f7ff fe80 	bl	800029a <ST7735_Unselect>
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000034 	.word	0x20000034
 80005a8:	20000032 	.word	0x20000032
 80005ac:	20000030 	.word	0x20000030
 80005b0:	20000035 	.word	0x20000035
 80005b4:	20000037 	.word	0x20000037
 80005b8:	20000036 	.word	0x20000036
 80005bc:	20000038 	.word	0x20000038

080005c0 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80005c0:	b082      	sub	sp, #8
 80005c2:	b590      	push	{r4, r7, lr}
 80005c4:	b089      	sub	sp, #36	@ 0x24
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80005ca:	4603      	mov	r3, r0
 80005cc:	80fb      	strh	r3, [r7, #6]
 80005ce:	460b      	mov	r3, r1
 80005d0:	80bb      	strh	r3, [r7, #4]
 80005d2:	4613      	mov	r3, r2
 80005d4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	b2d8      	uxtb	r0, r3
 80005da:	88bb      	ldrh	r3, [r7, #4]
 80005dc:	b2d9      	uxtb	r1, r3
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80005e6:	4413      	add	r3, r2
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	3b01      	subs	r3, #1
 80005ec:	b2dc      	uxtb	r4, r3
 80005ee:	88bb      	ldrh	r3, [r7, #4]
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80005f6:	4413      	add	r3, r2
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	3b01      	subs	r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	4622      	mov	r2, r4
 8000600:	f7ff feea 	bl	80003d8 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]
 8000608:	e043      	b.n	8000692 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800060a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800060c:	78fb      	ldrb	r3, [r7, #3]
 800060e:	3b20      	subs	r3, #32
 8000610:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000614:	fb01 f303 	mul.w	r3, r1, r3
 8000618:	4619      	mov	r1, r3
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	440b      	add	r3, r1
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	4413      	add	r3, r2
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
 800062a:	e029      	b.n	8000680 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	69bb      	ldr	r3, [r7, #24]
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000638:	2b00      	cmp	r3, #0
 800063a:	d00e      	beq.n	800065a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800063c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800063e:	0a1b      	lsrs	r3, r3, #8
 8000640:	b29b      	uxth	r3, r3
 8000642:	b2db      	uxtb	r3, r3
 8000644:	743b      	strb	r3, [r7, #16]
 8000646:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000648:	b2db      	uxtb	r3, r3
 800064a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800064c:	f107 0310 	add.w	r3, r7, #16
 8000650:	2102      	movs	r1, #2
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fe5a 	bl	800030c <ST7735_WriteData>
 8000658:	e00f      	b.n	800067a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800065a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800065e:	0a1b      	lsrs	r3, r3, #8
 8000660:	b29b      	uxth	r3, r3
 8000662:	b2db      	uxtb	r3, r3
 8000664:	733b      	strb	r3, [r7, #12]
 8000666:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800066a:	b2db      	uxtb	r3, r3
 800066c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fe49 	bl	800030c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800067a:	69bb      	ldr	r3, [r7, #24]
 800067c:	3301      	adds	r3, #1
 800067e:	61bb      	str	r3, [r7, #24]
 8000680:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000684:	461a      	mov	r2, r3
 8000686:	69bb      	ldr	r3, [r7, #24]
 8000688:	4293      	cmp	r3, r2
 800068a:	d3cf      	bcc.n	800062c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	3301      	adds	r3, #1
 8000690:	61fb      	str	r3, [r7, #28]
 8000692:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000696:	461a      	mov	r2, r3
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	4293      	cmp	r3, r2
 800069c:	d3b5      	bcc.n	800060a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	3724      	adds	r7, #36	@ 0x24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80006aa:	b002      	add	sp, #8
 80006ac:	4770      	bx	lr
	...

080006b0 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80006b0:	b082      	sub	sp, #8
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b086      	sub	sp, #24
 80006b6:	af04      	add	r7, sp, #16
 80006b8:	603a      	str	r2, [r7, #0]
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	4603      	mov	r3, r0
 80006be:	80fb      	strh	r3, [r7, #6]
 80006c0:	460b      	mov	r3, r1
 80006c2:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80006c4:	f7ff fdde 	bl	8000284 <ST7735_Select>

    while(*str) {
 80006c8:	e033      	b.n	8000732 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	7d3a      	ldrb	r2, [r7, #20]
 80006ce:	4413      	add	r3, r2
 80006d0:	4a1f      	ldr	r2, [pc, #124]	@ (8000750 <ST7735_WriteString+0xa0>)
 80006d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80006d6:	4293      	cmp	r3, r2
 80006d8:	db16      	blt.n	8000708 <ST7735_WriteString+0x58>
            x = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80006de:	7d7b      	ldrb	r3, [r7, #21]
 80006e0:	461a      	mov	r2, r3
 80006e2:	88bb      	ldrh	r3, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 80006e8:	88bb      	ldrh	r3, [r7, #4]
 80006ea:	7d7a      	ldrb	r2, [r7, #21]
 80006ec:	4413      	add	r3, r2
 80006ee:	4a19      	ldr	r2, [pc, #100]	@ (8000754 <ST7735_WriteString+0xa4>)
 80006f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80006f4:	4293      	cmp	r3, r2
 80006f6:	da21      	bge.n	800073c <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b20      	cmp	r3, #32
 80006fe:	d103      	bne.n	8000708 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	3301      	adds	r3, #1
 8000704:	603b      	str	r3, [r7, #0]
                continue;
 8000706:	e014      	b.n	8000732 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	781a      	ldrb	r2, [r3, #0]
 800070c:	88b9      	ldrh	r1, [r7, #4]
 800070e:	88f8      	ldrh	r0, [r7, #6]
 8000710:	8c3b      	ldrh	r3, [r7, #32]
 8000712:	9302      	str	r3, [sp, #8]
 8000714:	8bbb      	ldrh	r3, [r7, #28]
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	f7ff ff4f 	bl	80005c0 <ST7735_WriteChar>
        x += font.width;
 8000722:	7d3b      	ldrb	r3, [r7, #20]
 8000724:	461a      	mov	r2, r3
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	4413      	add	r3, r2
 800072a:	80fb      	strh	r3, [r7, #6]
        str++;
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d1c7      	bne.n	80006ca <ST7735_WriteString+0x1a>
 800073a:	e000      	b.n	800073e <ST7735_WriteString+0x8e>
                break;
 800073c:	bf00      	nop
    }

    ST7735_Unselect();
 800073e:	f7ff fdac 	bl	800029a <ST7735_Unselect>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800074c:	b002      	add	sp, #8
 800074e:	4770      	bx	lr
 8000750:	20000030 	.word	0x20000030
 8000754:	20000032 	.word	0x20000032

08000758 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	4604      	mov	r4, r0
 8000760:	4608      	mov	r0, r1
 8000762:	4611      	mov	r1, r2
 8000764:	461a      	mov	r2, r3
 8000766:	4623      	mov	r3, r4
 8000768:	80fb      	strh	r3, [r7, #6]
 800076a:	4603      	mov	r3, r0
 800076c:	80bb      	strh	r3, [r7, #4]
 800076e:	460b      	mov	r3, r1
 8000770:	807b      	strh	r3, [r7, #2]
 8000772:	4613      	mov	r3, r2
 8000774:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	4a38      	ldr	r2, [pc, #224]	@ (800085c <ST7735_FillRectangle+0x104>)
 800077a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800077e:	4293      	cmp	r3, r2
 8000780:	da67      	bge.n	8000852 <ST7735_FillRectangle+0xfa>
 8000782:	88bb      	ldrh	r3, [r7, #4]
 8000784:	4a36      	ldr	r2, [pc, #216]	@ (8000860 <ST7735_FillRectangle+0x108>)
 8000786:	f9b2 2000 	ldrsh.w	r2, [r2]
 800078a:	4293      	cmp	r3, r2
 800078c:	da61      	bge.n	8000852 <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 800078e:	88fa      	ldrh	r2, [r7, #6]
 8000790:	887b      	ldrh	r3, [r7, #2]
 8000792:	4413      	add	r3, r2
 8000794:	4a31      	ldr	r2, [pc, #196]	@ (800085c <ST7735_FillRectangle+0x104>)
 8000796:	f9b2 2000 	ldrsh.w	r2, [r2]
 800079a:	4293      	cmp	r3, r2
 800079c:	dd06      	ble.n	80007ac <ST7735_FillRectangle+0x54>
 800079e:	4b2f      	ldr	r3, [pc, #188]	@ (800085c <ST7735_FillRectangle+0x104>)
 80007a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 80007ac:	88ba      	ldrh	r2, [r7, #4]
 80007ae:	883b      	ldrh	r3, [r7, #0]
 80007b0:	4413      	add	r3, r2
 80007b2:	4a2b      	ldr	r2, [pc, #172]	@ (8000860 <ST7735_FillRectangle+0x108>)
 80007b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80007b8:	4293      	cmp	r3, r2
 80007ba:	dd06      	ble.n	80007ca <ST7735_FillRectangle+0x72>
 80007bc:	4b28      	ldr	r3, [pc, #160]	@ (8000860 <ST7735_FillRectangle+0x108>)
 80007be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	88bb      	ldrh	r3, [r7, #4]
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80007ca:	f7ff fd5b 	bl	8000284 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	b2d8      	uxtb	r0, r3
 80007d2:	88bb      	ldrh	r3, [r7, #4]
 80007d4:	b2d9      	uxtb	r1, r3
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	887b      	ldrh	r3, [r7, #2]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4413      	add	r3, r2
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	3b01      	subs	r3, #1
 80007e4:	b2dc      	uxtb	r4, r3
 80007e6:	88bb      	ldrh	r3, [r7, #4]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	883b      	ldrh	r3, [r7, #0]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4413      	add	r3, r2
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	3b01      	subs	r3, #1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	4622      	mov	r2, r4
 80007f8:	f7ff fdee 	bl	80003d8 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80007fc:	8c3b      	ldrh	r3, [r7, #32]
 80007fe:	0a1b      	lsrs	r3, r3, #8
 8000800:	b29b      	uxth	r3, r3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	733b      	strb	r3, [r7, #12]
 8000806:	8c3b      	ldrh	r3, [r7, #32]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000812:	4814      	ldr	r0, [pc, #80]	@ (8000864 <ST7735_FillRectangle+0x10c>)
 8000814:	f001 f9b6 	bl	8001b84 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000818:	883b      	ldrh	r3, [r7, #0]
 800081a:	80bb      	strh	r3, [r7, #4]
 800081c:	e013      	b.n	8000846 <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 800081e:	887b      	ldrh	r3, [r7, #2]
 8000820:	80fb      	strh	r3, [r7, #6]
 8000822:	e00a      	b.n	800083a <ST7735_FillRectangle+0xe2>
				{

				}
			#endif
			#ifdef WITHOUT_DMA
				HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000824:	f107 010c 	add.w	r1, r7, #12
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	2202      	movs	r2, #2
 800082e:	480e      	ldr	r0, [pc, #56]	@ (8000868 <ST7735_FillRectangle+0x110>)
 8000830:	f002 f847 	bl	80028c2 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000834:	88fb      	ldrh	r3, [r7, #6]
 8000836:	3b01      	subs	r3, #1
 8000838:	80fb      	strh	r3, [r7, #6]
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d1f1      	bne.n	8000824 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 8000840:	88bb      	ldrh	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	80bb      	strh	r3, [r7, #4]
 8000846:	88bb      	ldrh	r3, [r7, #4]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1e8      	bne.n	800081e <ST7735_FillRectangle+0xc6>
			#endif
        }
    }

    ST7735_Unselect();
 800084c:	f7ff fd25 	bl	800029a <ST7735_Unselect>
 8000850:	e000      	b.n	8000854 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 8000852:	bf00      	nop
}
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	bd90      	pop	{r4, r7, pc}
 800085a:	bf00      	nop
 800085c:	20000030 	.word	0x20000030
 8000860:	20000032 	.word	0x20000032
 8000864:	48000400 	.word	0x48000400
 8000868:	2000003c 	.word	0x2000003c

0800086c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */

/* Interrupts *****************************************************************/
// GPIO Callback
// Diese Callback Funktion wird beim drücken des Taster B1 aufgerufen
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	80fb      	strh	r3, [r7, #6]
	if (handler_state == IDLE && button_flag == 0) {
 8000876:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x68>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d10a      	bne.n	8000894 <HAL_GPIO_EXTI_Callback+0x28>
 800087e:	4b16      	ldr	r3, [pc, #88]	@ (80008d8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d106      	bne.n	8000894 <HAL_GPIO_EXTI_Callback+0x28>
		set_handler_state(LEDON);
 8000886:	2001      	movs	r0, #1
 8000888:	f000 fc2a 	bl	80010e0 <set_handler_state>
		// Start Timer 17
		HAL_TIM_Base_Start_IT(&htim17);
 800088c:	4813      	ldr	r0, [pc, #76]	@ (80008dc <HAL_GPIO_EXTI_Callback+0x70>)
 800088e:	f002 fb49 	bl	8002f24 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim17);
	} else {
		set_handler_state(IDLE);
		button_flag = 0;
	}
}
 8000892:	e01b      	b.n	80008cc <HAL_GPIO_EXTI_Callback+0x60>
	} else if (handler_state == LEDON) {
 8000894:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x68>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d106      	bne.n	80008aa <HAL_GPIO_EXTI_Callback+0x3e>
		set_handler_state(LEDBLINK);
 800089c:	2002      	movs	r0, #2
 800089e:	f000 fc1f 	bl	80010e0 <set_handler_state>
		HAL_TIM_Base_Start_IT(&htim17);
 80008a2:	480e      	ldr	r0, [pc, #56]	@ (80008dc <HAL_GPIO_EXTI_Callback+0x70>)
 80008a4:	f002 fb3e 	bl	8002f24 <HAL_TIM_Base_Start_IT>
}
 80008a8:	e010      	b.n	80008cc <HAL_GPIO_EXTI_Callback+0x60>
	} else if (handler_state == LEDBLINK) {
 80008aa:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x68>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d106      	bne.n	80008c0 <HAL_GPIO_EXTI_Callback+0x54>
		set_handler_state(LEDON);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f000 fc14 	bl	80010e0 <set_handler_state>
		HAL_TIM_Base_Start_IT(&htim17);
 80008b8:	4808      	ldr	r0, [pc, #32]	@ (80008dc <HAL_GPIO_EXTI_Callback+0x70>)
 80008ba:	f002 fb33 	bl	8002f24 <HAL_TIM_Base_Start_IT>
}
 80008be:	e005      	b.n	80008cc <HAL_GPIO_EXTI_Callback+0x60>
		set_handler_state(IDLE);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 fc0d 	bl	80010e0 <set_handler_state>
		button_flag = 0;
 80008c6:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <HAL_GPIO_EXTI_Callback+0x6c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000199 	.word	0x20000199
 80008d8:	20000198 	.word	0x20000198
 80008dc:	2000014c 	.word	0x2000014c

080008e0 <HAL_TIM_PeriodElapsedCallback>:

// Timer Callback
// Diese Callback Funktion wird immer nach erreichen des Timer maximums aufgerufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	// Überprüfe welcher Timer diese callback Funktion aufruft
	if (htim == &htim16) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a16      	ldr	r2, [pc, #88]	@ (8000944 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d10b      	bne.n	8000908 <HAL_TIM_PeriodElapsedCallback+0x28>
		// Toggle PC3 alle 100ms
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 80008f0:	2108      	movs	r1, #8
 80008f2:	4815      	ldr	r0, [pc, #84]	@ (8000948 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80008f4:	f001 f95e 	bl	8001bb4 <HAL_GPIO_TogglePin>
		// Handler Zeit um 100ms erhöhen
		if (handler_state == LEDBLINK) {
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d11c      	bne.n	800093a <HAL_TIM_PeriodElapsedCallback+0x5a>
			inc_handler_currentTime(100);
 8000900:	2064      	movs	r0, #100	@ 0x64
 8000902:	f000 fc0b 	bl	800111c <inc_handler_currentTime>
			button_flag = 1;
		}
		// Toggle PC4 alle 1s
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
	}
}
 8000906:	e018      	b.n	800093a <HAL_TIM_PeriodElapsedCallback+0x5a>
	} else if (htim == &htim17) {
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a11      	ldr	r2, [pc, #68]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d114      	bne.n	800093a <HAL_TIM_PeriodElapsedCallback+0x5a>
		if (HAL_GPIO_ReadPin(B1, B1_PIN)) {
 8000910:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000914:	480c      	ldr	r0, [pc, #48]	@ (8000948 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000916:	f001 f91d 	bl	8001b54 <HAL_GPIO_ReadPin>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d008      	beq.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x52>
			set_handler_state(IDLE);
 8000920:	2000      	movs	r0, #0
 8000922:	f000 fbdd 	bl	80010e0 <set_handler_state>
			HAL_TIM_Base_Stop_IT(&htim17);
 8000926:	480a      	ldr	r0, [pc, #40]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000928:	f002 fb74 	bl	8003014 <HAL_TIM_Base_Stop_IT>
			button_flag = 1;
 800092c:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8000932:	2110      	movs	r1, #16
 8000934:	4804      	ldr	r0, [pc, #16]	@ (8000948 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000936:	f001 f93d 	bl	8001bb4 <HAL_GPIO_TogglePin>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000100 	.word	0x20000100
 8000948:	48000800 	.word	0x48000800
 800094c:	20000199 	.word	0x20000199
 8000950:	2000014c 	.word	0x2000014c
 8000954:	20000198 	.word	0x20000198

08000958 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800095c:	f000 fc1b 	bl	8001196 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000960:	f000 f81c 	bl	800099c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000964:	f000 f91e 	bl	8000ba4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000968:	f000 f8f2 	bl	8000b50 <MX_DMA_Init>
	MX_SPI1_Init();
 800096c:	f000 f862 	bl	8000a34 <MX_SPI1_Init>
	MX_TIM16_Init();
 8000970:	f000 f89e 	bl	8000ab0 <MX_TIM16_Init>
	MX_TIM17_Init();
 8000974:	f000 f8c4 	bl	8000b00 <MX_TIM17_Init>
	/* USER CODE BEGIN 2 */

	// Display Init
	ST7735_Init(1);
 8000978:	2001      	movs	r0, #1
 800097a:	f7ff fd75 	bl	8000468 <ST7735_Init>
	fillScreen(BLACK);
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff fc66 	bl	8000250 <fillScreen>

	// Start Timer 16
	HAL_TIM_Base_Start_IT(&htim16); // Starte Timer 16 im Interrupt Modus
 8000984:	4804      	ldr	r0, [pc, #16]	@ (8000998 <main+0x40>)
 8000986:	f002 facd 	bl	8002f24 <HAL_TIM_Base_Start_IT>

	// Set first State
	set_handler_state(IDLE);
 800098a:	2000      	movs	r0, #0
 800098c:	f000 fba8 	bl	80010e0 <set_handler_state>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		// Run StateMachine
		handler_task();
 8000990:	f000 fb9a 	bl	80010c8 <handler_task>
 8000994:	e7fc      	b.n	8000990 <main+0x38>
 8000996:	bf00      	nop
 8000998:	20000100 	.word	0x20000100

0800099c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b094      	sub	sp, #80	@ 0x50
 80009a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009a2:	f107 0318 	add.w	r3, r7, #24
 80009a6:	2238      	movs	r2, #56	@ 0x38
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 fdd2 	bl	8003554 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009c2:	f001 f929 	bl	8001c18 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d0:	2340      	movs	r3, #64	@ 0x40
 80009d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d4:	2302      	movs	r3, #2
 80009d6:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009d8:	2302      	movs	r3, #2
 80009da:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80009dc:	2304      	movs	r3, #4
 80009de:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 75;
 80009e0:	234b      	movs	r3, #75	@ 0x4b
 80009e2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009f0:	f107 0318 	add.w	r3, r7, #24
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 f9c3 	bl	8001d80 <HAL_RCC_OscConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x68>
		Error_Handler();
 8000a00:	f000 f96a 	bl	8000cd8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a04:	230f      	movs	r3, #15
 8000a06:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2104      	movs	r1, #4
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 fcc1 	bl	80023a4 <HAL_RCC_ClockConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0x90>
		Error_Handler();
 8000a28:	f000 f956 	bl	8000cd8 <Error_Handler>
	}
}
 8000a2c:	bf00      	nop
 8000a2e:	3750      	adds	r7, #80	@ 0x50
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000aac <MX_SPI1_Init+0x78>)
 8000a3c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a44:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a48:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a4c:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a4e:	4b16      	ldr	r3, [pc, #88]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a50:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a54:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a56:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a62:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a68:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a6c:	2210      	movs	r2, #16
 8000a6e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a70:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a76:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a84:	2207      	movs	r2, #7
 8000a86:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a88:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a90:	2208      	movs	r2, #8
 8000a92:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a96:	f001 fe69 	bl	800276c <HAL_SPI_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_SPI1_Init+0x70>
		Error_Handler();
 8000aa0:	f000 f91a 	bl	8000cd8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000003c 	.word	0x2000003c
 8000aac:	40013000 	.word	0x40013000

08000ab0 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <MX_TIM16_Init+0x48>)
 8000ab6:	4a11      	ldr	r2, [pc, #68]	@ (8000afc <MX_TIM16_Init+0x4c>)
 8000ab8:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 15000 - 1;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_TIM16_Init+0x48>)
 8000abc:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8000ac0:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <MX_TIM16_Init+0x48>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1000;
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <MX_TIM16_Init+0x48>)
 8000aca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ace:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_TIM16_Init+0x48>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <MX_TIM16_Init+0x48>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_TIM16_Init+0x48>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000ae2:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_TIM16_Init+0x48>)
 8000ae4:	f002 f9c6 	bl	8002e74 <HAL_TIM_Base_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM16_Init+0x42>
		Error_Handler();
 8000aee:	f000 f8f3 	bl	8000cd8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000100 	.word	0x20000100
 8000afc:	40014400 	.word	0x40014400

08000b00 <MX_TIM17_Init>:
/**
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	/* USER CODE END TIM17_Init 0 */

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 8000b04:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <MX_TIM17_Init+0x48>)
 8000b06:	4a11      	ldr	r2, [pc, #68]	@ (8000b4c <MX_TIM17_Init+0x4c>)
 8000b08:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 15000 - 1;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_TIM17_Init+0x48>)
 8000b0c:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8000b10:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b12:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <MX_TIM17_Init+0x48>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 20000;
 8000b18:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <MX_TIM17_Init+0x48>)
 8000b1a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000b1e:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b20:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <MX_TIM17_Init+0x48>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <MX_TIM17_Init+0x48>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <MX_TIM17_Init+0x48>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <MX_TIM17_Init+0x48>)
 8000b34:	f002 f99e 	bl	8002e74 <HAL_TIM_Base_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM17_Init+0x42>
		Error_Handler();
 8000b3e:	f000 f8cb 	bl	8000cd8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000014c 	.word	0x2000014c
 8000b4c:	40014800 	.word	0x40014800

08000b50 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b56:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <MX_DMA_Init+0x50>)
 8000b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b5a:	4a11      	ldr	r2, [pc, #68]	@ (8000ba0 <MX_DMA_Init+0x50>)
 8000b5c:	f043 0304 	orr.w	r3, r3, #4
 8000b60:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <MX_DMA_Init+0x50>)
 8000b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <MX_DMA_Init+0x50>)
 8000b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b72:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba0 <MX_DMA_Init+0x50>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <MX_DMA_Init+0x50>)
 8000b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	200b      	movs	r0, #11
 8000b8c:	f000 fc71 	bl	8001472 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b90:	200b      	movs	r0, #11
 8000b92:	f000 fc88 	bl	80014a6 <HAL_NVIC_EnableIRQ>

}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	@ 0x28
 8000ba8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b44      	ldr	r3, [pc, #272]	@ (8000ccc <MX_GPIO_Init+0x128>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	4a43      	ldr	r2, [pc, #268]	@ (8000ccc <MX_GPIO_Init+0x128>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc6:	4b41      	ldr	r3, [pc, #260]	@ (8000ccc <MX_GPIO_Init+0x128>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd2:	4b3e      	ldr	r3, [pc, #248]	@ (8000ccc <MX_GPIO_Init+0x128>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd6:	4a3d      	ldr	r2, [pc, #244]	@ (8000ccc <MX_GPIO_Init+0x128>)
 8000bd8:	f043 0320 	orr.w	r3, r3, #32
 8000bdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bde:	4b3b      	ldr	r3, [pc, #236]	@ (8000ccc <MX_GPIO_Init+0x128>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be2:	f003 0320 	and.w	r3, r3, #32
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b38      	ldr	r3, [pc, #224]	@ (8000ccc <MX_GPIO_Init+0x128>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	4a37      	ldr	r2, [pc, #220]	@ (8000ccc <MX_GPIO_Init+0x128>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf6:	4b35      	ldr	r3, [pc, #212]	@ (8000ccc <MX_GPIO_Init+0x128>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b32      	ldr	r3, [pc, #200]	@ (8000ccc <MX_GPIO_Init+0x128>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c06:	4a31      	ldr	r2, [pc, #196]	@ (8000ccc <MX_GPIO_Init+0x128>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000ccc <MX_GPIO_Init+0x128>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2118      	movs	r1, #24
 8000c1e:	482c      	ldr	r0, [pc, #176]	@ (8000cd0 <MX_GPIO_Init+0x12c>)
 8000c20:	f000 ffb0 	bl	8001b84 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_15,
 8000c24:	2200      	movs	r2, #0
 8000c26:	f248 0160 	movw	r1, #32864	@ 0x8060
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2e:	f000 ffa9 	bl	8001b84 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c38:	4826      	ldr	r0, [pc, #152]	@ (8000cd4 <MX_GPIO_Init+0x130>)
 8000c3a:	f000 ffa3 	bl	8001b84 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c42:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c44:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c48:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	481e      	ldr	r0, [pc, #120]	@ (8000cd0 <MX_GPIO_Init+0x12c>)
 8000c56:	f000 fdfb 	bl	8001850 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC3 PC4 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4;
 8000c5a:	2318      	movs	r3, #24
 8000c5c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4817      	ldr	r0, [pc, #92]	@ (8000cd0 <MX_GPIO_Init+0x12c>)
 8000c72:	f000 fded 	bl	8001850 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA5 PA6 PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_15;
 8000c76:	f248 0360 	movw	r3, #32864	@ 0x8060
 8000c7a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c92:	f000 fddd 	bl	8001850 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c9a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	4809      	ldr	r0, [pc, #36]	@ (8000cd4 <MX_GPIO_Init+0x130>)
 8000cb0:	f000 fdce 	bl	8001850 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2028      	movs	r0, #40	@ 0x28
 8000cba:	f000 fbda 	bl	8001472 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cbe:	2028      	movs	r0, #40	@ 0x28
 8000cc0:	f000 fbf1 	bl	80014a6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc4:	bf00      	nop
 8000cc6:	3728      	adds	r7, #40	@ 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	48000800 	.word	0x48000800
 8000cd4:	48000400 	.word	0x48000400

08000cd8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <Error_Handler+0x8>

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <HAL_MspInit+0x44>)
 8000cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cee:	4a0e      	ldr	r2, [pc, #56]	@ (8000d28 <HAL_MspInit+0x44>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <HAL_MspInit+0x44>)
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <HAL_MspInit+0x44>)
 8000d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d06:	4a08      	ldr	r2, [pc, #32]	@ (8000d28 <HAL_MspInit+0x44>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_MspInit+0x44>)
 8000d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d1a:	f001 f821 	bl	8001d60 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40021000 	.word	0x40021000

08000d2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	@ 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a2b      	ldr	r2, [pc, #172]	@ (8000df8 <HAL_SPI_MspInit+0xcc>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d150      	bne.n	8000df0 <HAL_SPI_MspInit+0xc4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dfc <HAL_SPI_MspInit+0xd0>)
 8000d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d52:	4a2a      	ldr	r2, [pc, #168]	@ (8000dfc <HAL_SPI_MspInit+0xd0>)
 8000d54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d58:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d5a:	4b28      	ldr	r3, [pc, #160]	@ (8000dfc <HAL_SPI_MspInit+0xd0>)
 8000d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	4b25      	ldr	r3, [pc, #148]	@ (8000dfc <HAL_SPI_MspInit+0xd0>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6a:	4a24      	ldr	r2, [pc, #144]	@ (8000dfc <HAL_SPI_MspInit+0xd0>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d72:	4b22      	ldr	r3, [pc, #136]	@ (8000dfc <HAL_SPI_MspInit+0xd0>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000d7e:	2328      	movs	r3, #40	@ 0x28
 8000d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d8e:	2305      	movs	r3, #5
 8000d90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	4819      	ldr	r0, [pc, #100]	@ (8000e00 <HAL_SPI_MspInit+0xd4>)
 8000d9a:	f000 fd59 	bl	8001850 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <HAL_SPI_MspInit+0xd8>)
 8000da0:	4a19      	ldr	r2, [pc, #100]	@ (8000e08 <HAL_SPI_MspInit+0xdc>)
 8000da2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000da4:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <HAL_SPI_MspInit+0xd8>)
 8000da6:	220b      	movs	r2, #11
 8000da8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000daa:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <HAL_SPI_MspInit+0xd8>)
 8000dac:	2210      	movs	r2, #16
 8000dae:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db0:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <HAL_SPI_MspInit+0xd8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000db6:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <HAL_SPI_MspInit+0xd8>)
 8000db8:	2280      	movs	r2, #128	@ 0x80
 8000dba:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <HAL_SPI_MspInit+0xd8>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <HAL_SPI_MspInit+0xd8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <HAL_SPI_MspInit+0xd8>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dce:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <HAL_SPI_MspInit+0xd8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000dd4:	480b      	ldr	r0, [pc, #44]	@ (8000e04 <HAL_SPI_MspInit+0xd8>)
 8000dd6:	f000 fb81 	bl	80014dc <HAL_DMA_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <HAL_SPI_MspInit+0xb8>
    {
      Error_Handler();
 8000de0:	f7ff ff7a 	bl	8000cd8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a07      	ldr	r2, [pc, #28]	@ (8000e04 <HAL_SPI_MspInit+0xd8>)
 8000de8:	655a      	str	r2, [r3, #84]	@ 0x54
 8000dea:	4a06      	ldr	r2, [pc, #24]	@ (8000e04 <HAL_SPI_MspInit+0xd8>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000df0:	bf00      	nop
 8000df2:	3728      	adds	r7, #40	@ 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40013000 	.word	0x40013000
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	48000400 	.word	0x48000400
 8000e04:	200000a0 	.word	0x200000a0
 8000e08:	40020008 	.word	0x40020008

08000e0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a1a      	ldr	r2, [pc, #104]	@ (8000e84 <HAL_TIM_Base_MspInit+0x78>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d114      	bne.n	8000e48 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <HAL_TIM_Base_MspInit+0x7c>)
 8000e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e22:	4a19      	ldr	r2, [pc, #100]	@ (8000e88 <HAL_TIM_Base_MspInit+0x7c>)
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e28:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e2a:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <HAL_TIM_Base_MspInit+0x7c>)
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2019      	movs	r0, #25
 8000e3c:	f000 fb19 	bl	8001472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e40:	2019      	movs	r0, #25
 8000e42:	f000 fb30 	bl	80014a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000e46:	e018      	b.n	8000e7a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e8c <HAL_TIM_Base_MspInit+0x80>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d113      	bne.n	8000e7a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000e52:	4b0d      	ldr	r3, [pc, #52]	@ (8000e88 <HAL_TIM_Base_MspInit+0x7c>)
 8000e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e56:	4a0c      	ldr	r2, [pc, #48]	@ (8000e88 <HAL_TIM_Base_MspInit+0x7c>)
 8000e58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <HAL_TIM_Base_MspInit+0x7c>)
 8000e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	201a      	movs	r0, #26
 8000e70:	f000 faff 	bl	8001472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000e74:	201a      	movs	r0, #26
 8000e76:	f000 fb16 	bl	80014a6 <HAL_NVIC_EnableIRQ>
}
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40014400 	.word	0x40014400
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40014800 	.word	0x40014800

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <NMI_Handler+0x4>

08000e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee6:	f000 f9a9 	bl	800123c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <DMA1_Channel1_IRQHandler+0x10>)
 8000ef6:	f000 fb99 	bl	800162c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200000a0 	.word	0x200000a0

08000f04 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f0a:	f002 f8b2 	bl	8003072 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000100 	.word	0x20000100

08000f18 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000f1e:	f002 f8a8 	bl	8003072 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000014c 	.word	0x2000014c

08000f2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f30:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f34:	f000 fe58 	bl	8001be8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <SystemInit+0x20>)
 8000f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f46:	4a05      	ldr	r2, [pc, #20]	@ (8000f5c <SystemInit+0x20>)
 8000f48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <enter_handler_state>:
/* VARIABLES ***********************************************************************************************************/
uint8_t handler_state;
uint8_t prev_handler_state;
uint16_t time_val = 0;

void enter_handler_state(int state) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af04      	add	r7, sp, #16
 8000f66:	6078      	str	r0, [r7, #4]
	switch (state) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d03c      	beq.n	8000fe8 <enter_handler_state+0x88>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	dc4e      	bgt.n	8001012 <enter_handler_state+0xb2>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <enter_handler_state+0x22>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d01b      	beq.n	8000fb8 <enter_handler_state+0x58>
		fillScreen(BLACK);
		ST7735_WriteString(0, 0, "State: LEDBLINK", Font_7x10, GREEN, BLACK);
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 8000f80:	e047      	b.n	8001012 <enter_handler_state+0xb2>
		HAL_GPIO_WritePin(LD2, LD2_PIN, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2120      	movs	r1, #32
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f8a:	f000 fdfb 	bl	8001b84 <HAL_GPIO_WritePin>
		handler_state = IDLE;
 8000f8e:	4b23      	ldr	r3, [pc, #140]	@ (800101c <enter_handler_state+0xbc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
		fillScreen(BLACK);
 8000f94:	2000      	movs	r0, #0
 8000f96:	f7ff f95b 	bl	8000250 <fillScreen>
		ST7735_WriteString(0, 0, "State: IDLE", Font_7x10, GREEN, BLACK);
 8000f9a:	4b21      	ldr	r3, [pc, #132]	@ (8001020 <enter_handler_state+0xc0>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	9202      	str	r2, [sp, #8]
 8000fa0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000fa4:	9201      	str	r2, [sp, #4]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	9200      	str	r2, [sp, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a1d      	ldr	r2, [pc, #116]	@ (8001024 <enter_handler_state+0xc4>)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff fb7d 	bl	80006b0 <ST7735_WriteString>
		break;
 8000fb6:	e02d      	b.n	8001014 <enter_handler_state+0xb4>
		HAL_GPIO_WritePin(LD2, LD2_PIN, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2120      	movs	r1, #32
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc0:	f000 fde0 	bl	8001b84 <HAL_GPIO_WritePin>
		fillScreen(BLACK);
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff f943 	bl	8000250 <fillScreen>
		ST7735_WriteString(0, 0, "State: LEDON", Font_7x10, GREEN, BLACK);
 8000fca:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <enter_handler_state+0xc0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	9202      	str	r2, [sp, #8]
 8000fd0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000fd4:	9201      	str	r2, [sp, #4]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	9200      	str	r2, [sp, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a12      	ldr	r2, [pc, #72]	@ (8001028 <enter_handler_state+0xc8>)
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f7ff fb65 	bl	80006b0 <ST7735_WriteString>
		break;
 8000fe6:	e015      	b.n	8001014 <enter_handler_state+0xb4>
		time_val = 0;
 8000fe8:	4b10      	ldr	r3, [pc, #64]	@ (800102c <enter_handler_state+0xcc>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	801a      	strh	r2, [r3, #0]
		fillScreen(BLACK);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff f92e 	bl	8000250 <fillScreen>
		ST7735_WriteString(0, 0, "State: LEDBLINK", Font_7x10, GREEN, BLACK);
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <enter_handler_state+0xc0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	9202      	str	r2, [sp, #8]
 8000ffa:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000ffe:	9201      	str	r2, [sp, #4]
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	9200      	str	r2, [sp, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <enter_handler_state+0xd0>)
 8001008:	2100      	movs	r1, #0
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff fb50 	bl	80006b0 <ST7735_WriteString>
		break;
 8001010:	e000      	b.n	8001014 <enter_handler_state+0xb4>
		break;
 8001012:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000199 	.word	0x20000199
 8001020:	20000000 	.word	0x20000000
 8001024:	080035c4 	.word	0x080035c4
 8001028:	080035d0 	.word	0x080035d0
 800102c:	2000019c 	.word	0x2000019c
 8001030:	080035e0 	.word	0x080035e0

08001034 <exec_handler_state>:

//-----------------------------------------------------------------------------------------------------------------------

void exec_handler_state(int state) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	switch (state) {
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b02      	cmp	r3, #2
 8001040:	d009      	beq.n	8001056 <exec_handler_state+0x22>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b02      	cmp	r3, #2
 8001046:	dc13      	bgt.n	8001070 <exec_handler_state+0x3c>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d012      	beq.n	8001074 <exec_handler_state+0x40>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d011      	beq.n	8001078 <exec_handler_state+0x44>
			time_val = 0;
		}
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 8001054:	e00c      	b.n	8001070 <exec_handler_state+0x3c>
		if (time_val > 250) {
 8001056:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <exec_handler_state+0x54>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	2bfa      	cmp	r3, #250	@ 0xfa
 800105c:	d90e      	bls.n	800107c <exec_handler_state+0x48>
			HAL_GPIO_TogglePin(LD2, LD2_PIN);
 800105e:	2120      	movs	r1, #32
 8001060:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001064:	f000 fda6 	bl	8001bb4 <HAL_GPIO_TogglePin>
			time_val = 0;
 8001068:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <exec_handler_state+0x54>)
 800106a:	2200      	movs	r2, #0
 800106c:	801a      	strh	r2, [r3, #0]
		break;
 800106e:	e005      	b.n	800107c <exec_handler_state+0x48>
		break;
 8001070:	bf00      	nop
 8001072:	e004      	b.n	800107e <exec_handler_state+0x4a>
		break;
 8001074:	bf00      	nop
 8001076:	e002      	b.n	800107e <exec_handler_state+0x4a>
		break;
 8001078:	bf00      	nop
 800107a:	e000      	b.n	800107e <exec_handler_state+0x4a>
		break;
 800107c:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2000019c 	.word	0x2000019c

0800108c <leave_handler_state>:

//-----------------------------------------------------------------------------------------------------------------------

void leave_handler_state(int state) {
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	switch (state) {
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d009      	beq.n	80010ae <leave_handler_state+0x22>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b02      	cmp	r3, #2
 800109e:	dc08      	bgt.n	80010b2 <leave_handler_state+0x26>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d007      	beq.n	80010b6 <leave_handler_state+0x2a>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d006      	beq.n	80010ba <leave_handler_state+0x2e>
		//--------------------------------------------------------------------------------------
	case LEDBLINK:
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 80010ac:	e001      	b.n	80010b2 <leave_handler_state+0x26>
		break;
 80010ae:	bf00      	nop
 80010b0:	e004      	b.n	80010bc <leave_handler_state+0x30>
		break;
 80010b2:	bf00      	nop
 80010b4:	e002      	b.n	80010bc <leave_handler_state+0x30>
		break;
 80010b6:	bf00      	nop
 80010b8:	e000      	b.n	80010bc <leave_handler_state+0x30>
		break;
 80010ba:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <handler_task>:

//-----------------------------------------------------------------------------------------------------------------------

void handler_task(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	exec_handler_state(handler_state);
 80010cc:	4b03      	ldr	r3, [pc, #12]	@ (80010dc <handler_task+0x14>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ffaf 	bl	8001034 <exec_handler_state>
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000199 	.word	0x20000199

080010e0 <set_handler_state>:

void set_handler_state(uint8_t state) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	prev_handler_state = handler_state;
 80010ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <set_handler_state+0x34>)
 80010ec:	781a      	ldrb	r2, [r3, #0]
 80010ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <set_handler_state+0x38>)
 80010f0:	701a      	strb	r2, [r3, #0]
	handler_state = state;
 80010f2:	4a08      	ldr	r2, [pc, #32]	@ (8001114 <set_handler_state+0x34>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	7013      	strb	r3, [r2, #0]
	leave_handler_state(prev_handler_state);
 80010f8:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <set_handler_state+0x38>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ffc5 	bl	800108c <leave_handler_state>
	enter_handler_state(state);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff2b 	bl	8000f60 <enter_handler_state>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000199 	.word	0x20000199
 8001118:	2000019a 	.word	0x2000019a

0800111c <inc_handler_currentTime>:

uint8_t get_handler_state(void) {
	return handler_state;
}

void inc_handler_currentTime(uint16_t dT) {
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
	time_val = time_val + dT;
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <inc_handler_currentTime+0x24>)
 8001128:	881a      	ldrh	r2, [r3, #0]
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	4413      	add	r3, r2
 800112e:	b29a      	uxth	r2, r3
 8001130:	4b03      	ldr	r3, [pc, #12]	@ (8001140 <inc_handler_currentTime+0x24>)
 8001132:	801a      	strh	r2, [r3, #0]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	2000019c 	.word	0x2000019c

08001144 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001144:	480d      	ldr	r0, [pc, #52]	@ (800117c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001146:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001148:	f7ff fef8 	bl	8000f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800114c:	480c      	ldr	r0, [pc, #48]	@ (8001180 <LoopForever+0x6>)
  ldr r1, =_edata
 800114e:	490d      	ldr	r1, [pc, #52]	@ (8001184 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001150:	4a0d      	ldr	r2, [pc, #52]	@ (8001188 <LoopForever+0xe>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001164:	4c0a      	ldr	r4, [pc, #40]	@ (8001190 <LoopForever+0x16>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001172:	f002 f9f7 	bl	8003564 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001176:	f7ff fbef 	bl	8000958 <main>

0800117a <LoopForever>:

LoopForever:
    b LoopForever
 800117a:	e7fe      	b.n	800117a <LoopForever>
  ldr   r0, =_estack
 800117c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001184:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001188:	08003de8 	.word	0x08003de8
  ldr r2, =_sbss
 800118c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001190:	200001a4 	.word	0x200001a4

08001194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC1_2_IRQHandler>

08001196 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a0:	2003      	movs	r0, #3
 80011a2:	f000 f95b 	bl	800145c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011a6:	200f      	movs	r0, #15
 80011a8:	f000 f80e 	bl	80011c8 <HAL_InitTick>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	e001      	b.n	80011bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011b8:	f7ff fd94 	bl	8000ce4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011bc:	79fb      	ldrb	r3, [r7, #7]

}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011d4:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <HAL_InitTick+0x68>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d022      	beq.n	8001222 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011dc:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HAL_InitTick+0x6c>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b13      	ldr	r3, [pc, #76]	@ (8001230 <HAL_InitTick+0x68>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80011ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 f966 	bl	80014c2 <HAL_SYSTICK_Config>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10f      	bne.n	800121c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b0f      	cmp	r3, #15
 8001200:	d809      	bhi.n	8001216 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001202:	2200      	movs	r2, #0
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	f04f 30ff 	mov.w	r0, #4294967295
 800120a:	f000 f932 	bl	8001472 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800120e:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <HAL_InitTick+0x70>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	e007      	b.n	8001226 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]
 800121a:	e004      	b.n	8001226 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e001      	b.n	8001226 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000010 	.word	0x20000010
 8001234:	20000008 	.word	0x20000008
 8001238:	2000000c 	.word	0x2000000c

0800123c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001240:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <HAL_IncTick+0x1c>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b05      	ldr	r3, [pc, #20]	@ (800125c <HAL_IncTick+0x20>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4413      	add	r3, r2
 800124a:	4a03      	ldr	r2, [pc, #12]	@ (8001258 <HAL_IncTick+0x1c>)
 800124c:	6013      	str	r3, [r2, #0]
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	200001a0 	.word	0x200001a0
 800125c:	20000010 	.word	0x20000010

08001260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b03      	ldr	r3, [pc, #12]	@ (8001274 <HAL_GetTick+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	200001a0 	.word	0x200001a0

08001278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff ffee 	bl	8001260 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d004      	beq.n	800129c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001292:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <HAL_Delay+0x40>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	4413      	add	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800129c:	bf00      	nop
 800129e:	f7ff ffdf 	bl	8001260 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d8f7      	bhi.n	800129e <HAL_Delay+0x26>
  {
  }
}
 80012ae:	bf00      	nop
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000010 	.word	0x20000010

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	@ (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	2b00      	cmp	r3, #0
 8001330:	db0b      	blt.n	800134a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f003 021f 	and.w	r2, r3, #31
 8001338:	4907      	ldr	r1, [pc, #28]	@ (8001358 <__NVIC_EnableIRQ+0x38>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	2001      	movs	r0, #1
 8001342:	fa00 f202 	lsl.w	r2, r0, r2
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000e100 	.word	0xe000e100

0800135c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	@ (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	@ (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	@ 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
         );
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	@ 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001428:	d301      	bcc.n	800142e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142a:	2301      	movs	r3, #1
 800142c:	e00f      	b.n	800144e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142e:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <SysTick_Config+0x40>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001436:	210f      	movs	r1, #15
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f7ff ff8e 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <SysTick_Config+0x40>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001446:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <SysTick_Config+0x40>)
 8001448:	2207      	movs	r2, #7
 800144a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	e000e010 	.word	0xe000e010

0800145c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff29 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001480:	f7ff ff40 	bl	8001304 <__NVIC_GetPriorityGrouping>
 8001484:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	6978      	ldr	r0, [r7, #20]
 800148c:	f7ff ff90 	bl	80013b0 <NVIC_EncodePriority>
 8001490:	4602      	mov	r2, r0
 8001492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff5f 	bl	800135c <__NVIC_SetPriority>
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff33 	bl	8001320 <__NVIC_EnableIRQ>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ffa4 	bl	8001418 <SysTick_Config>
 80014d0:	4603      	mov	r3, r0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e08d      	b.n	800160a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b47      	ldr	r3, [pc, #284]	@ (8001614 <HAL_DMA_Init+0x138>)
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d80f      	bhi.n	800151a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	4b45      	ldr	r3, [pc, #276]	@ (8001618 <HAL_DMA_Init+0x13c>)
 8001502:	4413      	add	r3, r2
 8001504:	4a45      	ldr	r2, [pc, #276]	@ (800161c <HAL_DMA_Init+0x140>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	009a      	lsls	r2, r3, #2
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a42      	ldr	r2, [pc, #264]	@ (8001620 <HAL_DMA_Init+0x144>)
 8001516:	641a      	str	r2, [r3, #64]	@ 0x40
 8001518:	e00e      	b.n	8001538 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	4b40      	ldr	r3, [pc, #256]	@ (8001624 <HAL_DMA_Init+0x148>)
 8001522:	4413      	add	r3, r2
 8001524:	4a3d      	ldr	r2, [pc, #244]	@ (800161c <HAL_DMA_Init+0x140>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	091b      	lsrs	r3, r3, #4
 800152c:	009a      	lsls	r2, r3, #2
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a3c      	ldr	r2, [pc, #240]	@ (8001628 <HAL_DMA_Init+0x14c>)
 8001536:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2202      	movs	r2, #2
 800153c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800154e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001552:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800155c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001568:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001574:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4313      	orrs	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 f8fe 	bl	800178c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001598:	d102      	bne.n	80015a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015b4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d010      	beq.n	80015e0 <HAL_DMA_Init+0x104>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	d80c      	bhi.n	80015e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f91e 	bl	8001808 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	e008      	b.n	80015f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40020407 	.word	0x40020407
 8001618:	bffdfff8 	.word	0xbffdfff8
 800161c:	cccccccd 	.word	0xcccccccd
 8001620:	40020000 	.word	0x40020000
 8001624:	bffdfbf8 	.word	0xbffdfbf8
 8001628:	40020400 	.word	0x40020400

0800162c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001648:	f003 031f 	and.w	r3, r3, #31
 800164c:	2204      	movs	r2, #4
 800164e:	409a      	lsls	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4013      	ands	r3, r2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d026      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x7a>
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	2b00      	cmp	r3, #0
 8001660:	d021      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0320 	and.w	r3, r3, #32
 800166c:	2b00      	cmp	r3, #0
 800166e:	d107      	bne.n	8001680 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0204 	bic.w	r2, r2, #4
 800167e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001684:	f003 021f 	and.w	r2, r3, #31
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168c:	2104      	movs	r1, #4
 800168e:	fa01 f202 	lsl.w	r2, r1, r2
 8001692:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001698:	2b00      	cmp	r3, #0
 800169a:	d071      	beq.n	8001780 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80016a4:	e06c      	b.n	8001780 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	f003 031f 	and.w	r3, r3, #31
 80016ae:	2202      	movs	r2, #2
 80016b0:	409a      	lsls	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d02e      	beq.n	8001718 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d029      	beq.n	8001718 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10b      	bne.n	80016ea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 020a 	bic.w	r2, r2, #10
 80016e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ee:	f003 021f 	and.w	r2, r3, #31
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	2102      	movs	r1, #2
 80016f8:	fa01 f202 	lsl.w	r2, r1, r2
 80016fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170a:	2b00      	cmp	r3, #0
 800170c:	d038      	beq.n	8001780 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001716:	e033      	b.n	8001780 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	2208      	movs	r2, #8
 8001722:	409a      	lsls	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4013      	ands	r3, r2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d02a      	beq.n	8001782 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d025      	beq.n	8001782 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 020e 	bic.w	r2, r2, #14
 8001744:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	f003 021f 	and.w	r2, r3, #31
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	2101      	movs	r1, #1
 8001754:	fa01 f202 	lsl.w	r2, r1, r2
 8001758:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001774:	2b00      	cmp	r3, #0
 8001776:	d004      	beq.n	8001782 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001780:	bf00      	nop
 8001782:	bf00      	nop
}
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800178c:	b480      	push	{r7}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	4b16      	ldr	r3, [pc, #88]	@ (80017f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800179c:	429a      	cmp	r2, r3
 800179e:	d802      	bhi.n	80017a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80017a0:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	e001      	b.n	80017aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80017a8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	3b08      	subs	r3, #8
 80017b6:	4a12      	ldr	r2, [pc, #72]	@ (8001800 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80017b8:	fba2 2303 	umull	r2, r3, r2, r3
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c4:	089b      	lsrs	r3, r3, #2
 80017c6:	009a      	lsls	r2, r3, #2
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4413      	add	r3, r2
 80017cc:	461a      	mov	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001804 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80017d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 031f 	and.w	r3, r3, #31
 80017de:	2201      	movs	r2, #1
 80017e0:	409a      	lsls	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80017e6:	bf00      	nop
 80017e8:	371c      	adds	r7, #28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40020407 	.word	0x40020407
 80017f8:	40020800 	.word	0x40020800
 80017fc:	40020820 	.word	0x40020820
 8001800:	cccccccd 	.word	0xcccccccd
 8001804:	40020880 	.word	0x40020880

08001808 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800181c:	4413      	add	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	461a      	mov	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a08      	ldr	r2, [pc, #32]	@ (800184c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800182a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	3b01      	subs	r3, #1
 8001830:	f003 031f 	and.w	r3, r3, #31
 8001834:	2201      	movs	r2, #1
 8001836:	409a      	lsls	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	1000823f 	.word	0x1000823f
 800184c:	40020940 	.word	0x40020940

08001850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800185e:	e15a      	b.n	8001b16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2101      	movs	r1, #1
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	4013      	ands	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 814c 	beq.w	8001b10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b01      	cmp	r3, #1
 8001882:	d005      	beq.n	8001890 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800188c:	2b02      	cmp	r3, #2
 800188e:	d130      	bne.n	80018f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	2203      	movs	r2, #3
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018c6:	2201      	movs	r2, #1
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	f003 0201 	and.w	r2, r3, #1
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d017      	beq.n	800192e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d123      	bne.n	8001982 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	08da      	lsrs	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3208      	adds	r2, #8
 8001942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001946:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	220f      	movs	r2, #15
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	691a      	ldr	r2, [r3, #16]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	08da      	lsrs	r2, r3, #3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3208      	adds	r2, #8
 800197c:	6939      	ldr	r1, [r7, #16]
 800197e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	2203      	movs	r2, #3
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0203 	and.w	r2, r3, #3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 80a6 	beq.w	8001b10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c4:	4b5b      	ldr	r3, [pc, #364]	@ (8001b34 <HAL_GPIO_Init+0x2e4>)
 80019c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c8:	4a5a      	ldr	r2, [pc, #360]	@ (8001b34 <HAL_GPIO_Init+0x2e4>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80019d0:	4b58      	ldr	r3, [pc, #352]	@ (8001b34 <HAL_GPIO_Init+0x2e4>)
 80019d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019dc:	4a56      	ldr	r2, [pc, #344]	@ (8001b38 <HAL_GPIO_Init+0x2e8>)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	3302      	adds	r3, #2
 80019e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	220f      	movs	r2, #15
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a06:	d01f      	beq.n	8001a48 <HAL_GPIO_Init+0x1f8>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a4c      	ldr	r2, [pc, #304]	@ (8001b3c <HAL_GPIO_Init+0x2ec>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d019      	beq.n	8001a44 <HAL_GPIO_Init+0x1f4>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a4b      	ldr	r2, [pc, #300]	@ (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d013      	beq.n	8001a40 <HAL_GPIO_Init+0x1f0>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a4a      	ldr	r2, [pc, #296]	@ (8001b44 <HAL_GPIO_Init+0x2f4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00d      	beq.n	8001a3c <HAL_GPIO_Init+0x1ec>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a49      	ldr	r2, [pc, #292]	@ (8001b48 <HAL_GPIO_Init+0x2f8>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d007      	beq.n	8001a38 <HAL_GPIO_Init+0x1e8>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a48      	ldr	r2, [pc, #288]	@ (8001b4c <HAL_GPIO_Init+0x2fc>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d101      	bne.n	8001a34 <HAL_GPIO_Init+0x1e4>
 8001a30:	2305      	movs	r3, #5
 8001a32:	e00a      	b.n	8001a4a <HAL_GPIO_Init+0x1fa>
 8001a34:	2306      	movs	r3, #6
 8001a36:	e008      	b.n	8001a4a <HAL_GPIO_Init+0x1fa>
 8001a38:	2304      	movs	r3, #4
 8001a3a:	e006      	b.n	8001a4a <HAL_GPIO_Init+0x1fa>
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e004      	b.n	8001a4a <HAL_GPIO_Init+0x1fa>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e002      	b.n	8001a4a <HAL_GPIO_Init+0x1fa>
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <HAL_GPIO_Init+0x1fa>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	f002 0203 	and.w	r2, r2, #3
 8001a50:	0092      	lsls	r2, r2, #2
 8001a52:	4093      	lsls	r3, r2
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a5a:	4937      	ldr	r1, [pc, #220]	@ (8001b38 <HAL_GPIO_Init+0x2e8>)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	089b      	lsrs	r3, r3, #2
 8001a60:	3302      	adds	r3, #2
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a68:	4b39      	ldr	r3, [pc, #228]	@ (8001b50 <HAL_GPIO_Init+0x300>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a8c:	4a30      	ldr	r2, [pc, #192]	@ (8001b50 <HAL_GPIO_Init+0x300>)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a92:	4b2f      	ldr	r3, [pc, #188]	@ (8001b50 <HAL_GPIO_Init+0x300>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ab6:	4a26      	ldr	r2, [pc, #152]	@ (8001b50 <HAL_GPIO_Init+0x300>)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001abc:	4b24      	ldr	r3, [pc, #144]	@ (8001b50 <HAL_GPIO_Init+0x300>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b50 <HAL_GPIO_Init+0x300>)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b50 <HAL_GPIO_Init+0x300>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b0a:	4a11      	ldr	r2, [pc, #68]	@ (8001b50 <HAL_GPIO_Init+0x300>)
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3301      	adds	r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f47f ae9d 	bne.w	8001860 <HAL_GPIO_Init+0x10>
  }
}
 8001b26:	bf00      	nop
 8001b28:	bf00      	nop
 8001b2a:	371c      	adds	r7, #28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40010000 	.word	0x40010000
 8001b3c:	48000400 	.word	0x48000400
 8001b40:	48000800 	.word	0x48000800
 8001b44:	48000c00 	.word	0x48000c00
 8001b48:	48001000 	.word	0x48001000
 8001b4c:	48001400 	.word	0x48001400
 8001b50:	40010400 	.word	0x40010400

08001b54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	887b      	ldrh	r3, [r7, #2]
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d002      	beq.n	8001b72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	e001      	b.n	8001b76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b72:	2300      	movs	r3, #0
 8001b74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
 8001b90:	4613      	mov	r3, r2
 8001b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b94:	787b      	ldrb	r3, [r7, #1]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b9a:	887a      	ldrh	r2, [r7, #2]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ba0:	e002      	b.n	8001ba8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ba2:	887a      	ldrh	r2, [r7, #2]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43d9      	mvns	r1, r3
 8001bd2:	887b      	ldrh	r3, [r7, #2]
 8001bd4:	400b      	ands	r3, r1
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bf2:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d006      	beq.n	8001c0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bfe:	4a05      	ldr	r2, [pc, #20]	@ (8001c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fe30 	bl	800086c <HAL_GPIO_EXTI_Callback>
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40010400 	.word	0x40010400

08001c18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d141      	bne.n	8001caa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c26:	4b4b      	ldr	r3, [pc, #300]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c32:	d131      	bne.n	8001c98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c34:	4b47      	ldr	r3, [pc, #284]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c3a:	4a46      	ldr	r2, [pc, #280]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c44:	4b43      	ldr	r3, [pc, #268]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c4c:	4a41      	ldr	r2, [pc, #260]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c54:	4b40      	ldr	r3, [pc, #256]	@ (8001d58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2232      	movs	r2, #50	@ 0x32
 8001c5a:	fb02 f303 	mul.w	r3, r2, r3
 8001c5e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	0c9b      	lsrs	r3, r3, #18
 8001c66:	3301      	adds	r3, #1
 8001c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c6a:	e002      	b.n	8001c72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c72:	4b38      	ldr	r3, [pc, #224]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c7e:	d102      	bne.n	8001c86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f2      	bne.n	8001c6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c86:	4b33      	ldr	r3, [pc, #204]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c92:	d158      	bne.n	8001d46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e057      	b.n	8001d48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c98:	4b2e      	ldr	r3, [pc, #184]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ca4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ca8:	e04d      	b.n	8001d46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cb0:	d141      	bne.n	8001d36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cb2:	4b28      	ldr	r3, [pc, #160]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cbe:	d131      	bne.n	8001d24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cc0:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cc6:	4a23      	ldr	r2, [pc, #140]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ccc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd0:	4b20      	ldr	r3, [pc, #128]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cd8:	4a1e      	ldr	r2, [pc, #120]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2232      	movs	r2, #50	@ 0x32
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	4a1c      	ldr	r2, [pc, #112]	@ (8001d5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cec:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf0:	0c9b      	lsrs	r3, r3, #18
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cf6:	e002      	b.n	8001cfe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cfe:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d0a:	d102      	bne.n	8001d12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f2      	bne.n	8001cf8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d12:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d1e:	d112      	bne.n	8001d46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e011      	b.n	8001d48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d24:	4b0b      	ldr	r3, [pc, #44]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d34:	e007      	b.n	8001d46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d36:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d3e:	4a05      	ldr	r2, [pc, #20]	@ (8001d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d44:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40007000 	.word	0x40007000
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	431bde83 	.word	0x431bde83

08001d60 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d64:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	4a04      	ldr	r2, [pc, #16]	@ (8001d7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d6e:	6093      	str	r3, [r2, #8]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40007000 	.word	0x40007000

08001d80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e2fe      	b.n	8002390 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d075      	beq.n	8001e8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d9e:	4b97      	ldr	r3, [pc, #604]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001da8:	4b94      	ldr	r3, [pc, #592]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2b0c      	cmp	r3, #12
 8001db6:	d102      	bne.n	8001dbe <HAL_RCC_OscConfig+0x3e>
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d002      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x44>
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d10b      	bne.n	8001ddc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc4:	4b8d      	ldr	r3, [pc, #564]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d05b      	beq.n	8001e88 <HAL_RCC_OscConfig+0x108>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d157      	bne.n	8001e88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e2d9      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001de4:	d106      	bne.n	8001df4 <HAL_RCC_OscConfig+0x74>
 8001de6:	4b85      	ldr	r3, [pc, #532]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a84      	ldr	r2, [pc, #528]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e01d      	b.n	8001e30 <HAL_RCC_OscConfig+0xb0>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dfc:	d10c      	bne.n	8001e18 <HAL_RCC_OscConfig+0x98>
 8001dfe:	4b7f      	ldr	r3, [pc, #508]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a7e      	ldr	r2, [pc, #504]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001e04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	4b7c      	ldr	r3, [pc, #496]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a7b      	ldr	r2, [pc, #492]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	e00b      	b.n	8001e30 <HAL_RCC_OscConfig+0xb0>
 8001e18:	4b78      	ldr	r3, [pc, #480]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a77      	ldr	r2, [pc, #476]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	4b75      	ldr	r3, [pc, #468]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a74      	ldr	r2, [pc, #464]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001e2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d013      	beq.n	8001e60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7ff fa12 	bl	8001260 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff fa0e 	bl	8001260 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	@ 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e29e      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e52:	4b6a      	ldr	r3, [pc, #424]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0xc0>
 8001e5e:	e014      	b.n	8001e8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7ff f9fe 	bl	8001260 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e68:	f7ff f9fa 	bl	8001260 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	@ 0x64
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e28a      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e7a:	4b60      	ldr	r3, [pc, #384]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0xe8>
 8001e86:	e000      	b.n	8001e8a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d075      	beq.n	8001f82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e96:	4b59      	ldr	r3, [pc, #356]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ea0:	4b56      	ldr	r3, [pc, #344]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2b0c      	cmp	r3, #12
 8001eae:	d102      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x136>
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d002      	beq.n	8001ebc <HAL_RCC_OscConfig+0x13c>
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d11f      	bne.n	8001efc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ebc:	4b4f      	ldr	r3, [pc, #316]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x154>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e25d      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed4:	4b49      	ldr	r3, [pc, #292]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	061b      	lsls	r3, r3, #24
 8001ee2:	4946      	ldr	r1, [pc, #280]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ee8:	4b45      	ldr	r3, [pc, #276]	@ (8002000 <HAL_RCC_OscConfig+0x280>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff f96b 	bl	80011c8 <HAL_InitTick>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d043      	beq.n	8001f80 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e249      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d023      	beq.n	8001f4c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f04:	4b3d      	ldr	r3, [pc, #244]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a3c      	ldr	r2, [pc, #240]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7ff f9a6 	bl	8001260 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f18:	f7ff f9a2 	bl	8001260 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e232      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f2a:	4b34      	ldr	r3, [pc, #208]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f36:	4b31      	ldr	r3, [pc, #196]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	061b      	lsls	r3, r3, #24
 8001f44:	492d      	ldr	r1, [pc, #180]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]
 8001f4a:	e01a      	b.n	8001f82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a2a      	ldr	r2, [pc, #168]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001f52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7ff f982 	bl	8001260 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f60:	f7ff f97e 	bl	8001260 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e20e      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f72:	4b22      	ldr	r3, [pc, #136]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x1e0>
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d041      	beq.n	8002012 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d01c      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f96:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f9c:	4a17      	ldr	r2, [pc, #92]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f95b 	bl	8001260 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fae:	f7ff f957 	bl	8001260 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e1e7      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0ef      	beq.n	8001fae <HAL_RCC_OscConfig+0x22e>
 8001fce:	e020      	b.n	8002012 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fd6:	4a09      	ldr	r2, [pc, #36]	@ (8001ffc <HAL_RCC_OscConfig+0x27c>)
 8001fd8:	f023 0301 	bic.w	r3, r3, #1
 8001fdc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe0:	f7ff f93e 	bl	8001260 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fe6:	e00d      	b.n	8002004 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe8:	f7ff f93a 	bl	8001260 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d906      	bls.n	8002004 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1ca      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000
 8002000:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002004:	4b8c      	ldr	r3, [pc, #560]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 8002006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1ea      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80a6 	beq.w	800216c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002024:	4b84      	ldr	r3, [pc, #528]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_RCC_OscConfig+0x2b4>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <HAL_RCC_OscConfig+0x2b6>
 8002034:	2300      	movs	r3, #0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00d      	beq.n	8002056 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	4b7f      	ldr	r3, [pc, #508]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203e:	4a7e      	ldr	r2, [pc, #504]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 8002040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002044:	6593      	str	r3, [r2, #88]	@ 0x58
 8002046:	4b7c      	ldr	r3, [pc, #496]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 8002048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002052:	2301      	movs	r3, #1
 8002054:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002056:	4b79      	ldr	r3, [pc, #484]	@ (800223c <HAL_RCC_OscConfig+0x4bc>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d118      	bne.n	8002094 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002062:	4b76      	ldr	r3, [pc, #472]	@ (800223c <HAL_RCC_OscConfig+0x4bc>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a75      	ldr	r2, [pc, #468]	@ (800223c <HAL_RCC_OscConfig+0x4bc>)
 8002068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800206c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206e:	f7ff f8f7 	bl	8001260 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002076:	f7ff f8f3 	bl	8001260 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e183      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002088:	4b6c      	ldr	r3, [pc, #432]	@ (800223c <HAL_RCC_OscConfig+0x4bc>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d108      	bne.n	80020ae <HAL_RCC_OscConfig+0x32e>
 800209c:	4b66      	ldr	r3, [pc, #408]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a2:	4a65      	ldr	r2, [pc, #404]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020ac:	e024      	b.n	80020f8 <HAL_RCC_OscConfig+0x378>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d110      	bne.n	80020d8 <HAL_RCC_OscConfig+0x358>
 80020b6:	4b60      	ldr	r3, [pc, #384]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 80020b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020bc:	4a5e      	ldr	r2, [pc, #376]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020cc:	4a5a      	ldr	r2, [pc, #360]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020d6:	e00f      	b.n	80020f8 <HAL_RCC_OscConfig+0x378>
 80020d8:	4b57      	ldr	r3, [pc, #348]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020de:	4a56      	ldr	r2, [pc, #344]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 80020e0:	f023 0301 	bic.w	r3, r3, #1
 80020e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020e8:	4b53      	ldr	r3, [pc, #332]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ee:	4a52      	ldr	r2, [pc, #328]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 80020f0:	f023 0304 	bic.w	r3, r3, #4
 80020f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d016      	beq.n	800212e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002100:	f7ff f8ae 	bl	8001260 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002106:	e00a      	b.n	800211e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002108:	f7ff f8aa 	bl	8001260 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e138      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211e:	4b46      	ldr	r3, [pc, #280]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0ed      	beq.n	8002108 <HAL_RCC_OscConfig+0x388>
 800212c:	e015      	b.n	800215a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212e:	f7ff f897 	bl	8001260 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7ff f893 	bl	8001260 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e121      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800214c:	4b3a      	ldr	r3, [pc, #232]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1ed      	bne.n	8002136 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800215a:	7ffb      	ldrb	r3, [r7, #31]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d105      	bne.n	800216c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002160:	4b35      	ldr	r3, [pc, #212]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 8002162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002164:	4a34      	ldr	r2, [pc, #208]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 8002166:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800216a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	2b00      	cmp	r3, #0
 8002176:	d03c      	beq.n	80021f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d01c      	beq.n	80021ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002180:	4b2d      	ldr	r3, [pc, #180]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 8002182:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002186:	4a2c      	ldr	r2, [pc, #176]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7ff f866 	bl	8001260 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002198:	f7ff f862 	bl	8001260 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e0f2      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021aa:	4b23      	ldr	r3, [pc, #140]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 80021ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0ef      	beq.n	8002198 <HAL_RCC_OscConfig+0x418>
 80021b8:	e01b      	b.n	80021f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 80021bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 80021c2:	f023 0301 	bic.w	r3, r3, #1
 80021c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ca:	f7ff f849 	bl	8001260 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021d2:	f7ff f845 	bl	8001260 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e0d5      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021e4:	4b14      	ldr	r3, [pc, #80]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 80021e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1ef      	bne.n	80021d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 80c9 	beq.w	800238e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 030c 	and.w	r3, r3, #12
 8002204:	2b0c      	cmp	r3, #12
 8002206:	f000 8083 	beq.w	8002310 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d15e      	bne.n	80022d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002212:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a08      	ldr	r2, [pc, #32]	@ (8002238 <HAL_RCC_OscConfig+0x4b8>)
 8002218:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800221c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221e:	f7ff f81f 	bl	8001260 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002224:	e00c      	b.n	8002240 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002226:	f7ff f81b 	bl	8001260 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d905      	bls.n	8002240 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e0ab      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
 8002238:	40021000 	.word	0x40021000
 800223c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002240:	4b55      	ldr	r3, [pc, #340]	@ (8002398 <HAL_RCC_OscConfig+0x618>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1ec      	bne.n	8002226 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800224c:	4b52      	ldr	r3, [pc, #328]	@ (8002398 <HAL_RCC_OscConfig+0x618>)
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	4b52      	ldr	r3, [pc, #328]	@ (800239c <HAL_RCC_OscConfig+0x61c>)
 8002252:	4013      	ands	r3, r2
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6a11      	ldr	r1, [r2, #32]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800225c:	3a01      	subs	r2, #1
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	4311      	orrs	r1, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002266:	0212      	lsls	r2, r2, #8
 8002268:	4311      	orrs	r1, r2
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800226e:	0852      	lsrs	r2, r2, #1
 8002270:	3a01      	subs	r2, #1
 8002272:	0552      	lsls	r2, r2, #21
 8002274:	4311      	orrs	r1, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800227a:	0852      	lsrs	r2, r2, #1
 800227c:	3a01      	subs	r2, #1
 800227e:	0652      	lsls	r2, r2, #25
 8002280:	4311      	orrs	r1, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002286:	06d2      	lsls	r2, r2, #27
 8002288:	430a      	orrs	r2, r1
 800228a:	4943      	ldr	r1, [pc, #268]	@ (8002398 <HAL_RCC_OscConfig+0x618>)
 800228c:	4313      	orrs	r3, r2
 800228e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002290:	4b41      	ldr	r3, [pc, #260]	@ (8002398 <HAL_RCC_OscConfig+0x618>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a40      	ldr	r2, [pc, #256]	@ (8002398 <HAL_RCC_OscConfig+0x618>)
 8002296:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800229a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800229c:	4b3e      	ldr	r3, [pc, #248]	@ (8002398 <HAL_RCC_OscConfig+0x618>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4a3d      	ldr	r2, [pc, #244]	@ (8002398 <HAL_RCC_OscConfig+0x618>)
 80022a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7fe ffda 	bl	8001260 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b0:	f7fe ffd6 	bl	8001260 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e066      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c2:	4b35      	ldr	r3, [pc, #212]	@ (8002398 <HAL_RCC_OscConfig+0x618>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x530>
 80022ce:	e05e      	b.n	800238e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d0:	4b31      	ldr	r3, [pc, #196]	@ (8002398 <HAL_RCC_OscConfig+0x618>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a30      	ldr	r2, [pc, #192]	@ (8002398 <HAL_RCC_OscConfig+0x618>)
 80022d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022dc:	f7fe ffc0 	bl	8001260 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e4:	f7fe ffbc 	bl	8001260 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e04c      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f6:	4b28      	ldr	r3, [pc, #160]	@ (8002398 <HAL_RCC_OscConfig+0x618>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002302:	4b25      	ldr	r3, [pc, #148]	@ (8002398 <HAL_RCC_OscConfig+0x618>)
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	4924      	ldr	r1, [pc, #144]	@ (8002398 <HAL_RCC_OscConfig+0x618>)
 8002308:	4b25      	ldr	r3, [pc, #148]	@ (80023a0 <HAL_RCC_OscConfig+0x620>)
 800230a:	4013      	ands	r3, r2
 800230c:	60cb      	str	r3, [r1, #12]
 800230e:	e03e      	b.n	800238e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e039      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800231c:	4b1e      	ldr	r3, [pc, #120]	@ (8002398 <HAL_RCC_OscConfig+0x618>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 0203 	and.w	r2, r3, #3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	429a      	cmp	r2, r3
 800232e:	d12c      	bne.n	800238a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	3b01      	subs	r3, #1
 800233c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d123      	bne.n	800238a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800234e:	429a      	cmp	r2, r3
 8002350:	d11b      	bne.n	800238a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800235e:	429a      	cmp	r2, r3
 8002360:	d113      	bne.n	800238a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236c:	085b      	lsrs	r3, r3, #1
 800236e:	3b01      	subs	r3, #1
 8002370:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002372:	429a      	cmp	r2, r3
 8002374:	d109      	bne.n	800238a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002380:	085b      	lsrs	r3, r3, #1
 8002382:	3b01      	subs	r3, #1
 8002384:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d001      	beq.n	800238e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3720      	adds	r7, #32
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000
 800239c:	019f800c 	.word	0x019f800c
 80023a0:	feeefffc 	.word	0xfeeefffc

080023a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e11e      	b.n	80025fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b91      	ldr	r3, [pc, #580]	@ (8002604 <HAL_RCC_ClockConfig+0x260>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d910      	bls.n	80023ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b8e      	ldr	r3, [pc, #568]	@ (8002604 <HAL_RCC_ClockConfig+0x260>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 020f 	bic.w	r2, r3, #15
 80023d2:	498c      	ldr	r1, [pc, #560]	@ (8002604 <HAL_RCC_ClockConfig+0x260>)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b8a      	ldr	r3, [pc, #552]	@ (8002604 <HAL_RCC_ClockConfig+0x260>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e106      	b.n	80025fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d073      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d129      	bne.n	8002454 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002400:	4b81      	ldr	r3, [pc, #516]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0f4      	b.n	80025fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002410:	f000 f966 	bl	80026e0 <RCC_GetSysClockFreqFromPLLSource>
 8002414:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4a7c      	ldr	r2, [pc, #496]	@ (800260c <HAL_RCC_ClockConfig+0x268>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d93f      	bls.n	800249e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800241e:	4b7a      	ldr	r3, [pc, #488]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002432:	2b00      	cmp	r3, #0
 8002434:	d033      	beq.n	800249e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800243a:	2b00      	cmp	r3, #0
 800243c:	d12f      	bne.n	800249e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800243e:	4b72      	ldr	r3, [pc, #456]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002446:	4a70      	ldr	r2, [pc, #448]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 8002448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800244c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800244e:	2380      	movs	r3, #128	@ 0x80
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	e024      	b.n	800249e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b02      	cmp	r3, #2
 800245a:	d107      	bne.n	800246c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800245c:	4b6a      	ldr	r3, [pc, #424]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d109      	bne.n	800247c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e0c6      	b.n	80025fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800246c:	4b66      	ldr	r3, [pc, #408]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0be      	b.n	80025fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800247c:	f000 f8ce 	bl	800261c <HAL_RCC_GetSysClockFreq>
 8002480:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4a61      	ldr	r2, [pc, #388]	@ (800260c <HAL_RCC_ClockConfig+0x268>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d909      	bls.n	800249e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800248a:	4b5f      	ldr	r3, [pc, #380]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002492:	4a5d      	ldr	r2, [pc, #372]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 8002494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002498:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800249a:	2380      	movs	r3, #128	@ 0x80
 800249c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800249e:	4b5a      	ldr	r3, [pc, #360]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f023 0203 	bic.w	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4957      	ldr	r1, [pc, #348]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b0:	f7fe fed6 	bl	8001260 <HAL_GetTick>
 80024b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b8:	f7fe fed2 	bl	8001260 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e095      	b.n	80025fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	4b4e      	ldr	r3, [pc, #312]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 020c 	and.w	r2, r3, #12
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	429a      	cmp	r2, r3
 80024de:	d1eb      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d023      	beq.n	8002534 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f8:	4b43      	ldr	r3, [pc, #268]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a42      	ldr	r2, [pc, #264]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 80024fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002502:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002510:	4b3d      	ldr	r3, [pc, #244]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002518:	4a3b      	ldr	r2, [pc, #236]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 800251a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800251e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002520:	4b39      	ldr	r3, [pc, #228]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	4936      	ldr	r1, [pc, #216]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
 8002532:	e008      	b.n	8002546 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	2b80      	cmp	r3, #128	@ 0x80
 8002538:	d105      	bne.n	8002546 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800253a:	4b33      	ldr	r3, [pc, #204]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	4a32      	ldr	r2, [pc, #200]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 8002540:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002544:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002546:	4b2f      	ldr	r3, [pc, #188]	@ (8002604 <HAL_RCC_ClockConfig+0x260>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d21d      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002554:	4b2b      	ldr	r3, [pc, #172]	@ (8002604 <HAL_RCC_ClockConfig+0x260>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f023 020f 	bic.w	r2, r3, #15
 800255c:	4929      	ldr	r1, [pc, #164]	@ (8002604 <HAL_RCC_ClockConfig+0x260>)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	4313      	orrs	r3, r2
 8002562:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002564:	f7fe fe7c 	bl	8001260 <HAL_GetTick>
 8002568:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	e00a      	b.n	8002582 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256c:	f7fe fe78 	bl	8001260 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e03b      	b.n	80025fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b20      	ldr	r3, [pc, #128]	@ (8002604 <HAL_RCC_ClockConfig+0x260>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d1ed      	bne.n	800256c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800259c:	4b1a      	ldr	r3, [pc, #104]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4917      	ldr	r1, [pc, #92]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ba:	4b13      	ldr	r3, [pc, #76]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	490f      	ldr	r1, [pc, #60]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025ce:	f000 f825 	bl	800261c <HAL_RCC_GetSysClockFreq>
 80025d2:	4602      	mov	r2, r0
 80025d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002608 <HAL_RCC_ClockConfig+0x264>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	490c      	ldr	r1, [pc, #48]	@ (8002610 <HAL_RCC_ClockConfig+0x26c>)
 80025e0:	5ccb      	ldrb	r3, [r1, r3]
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002614 <HAL_RCC_ClockConfig+0x270>)
 80025ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002618 <HAL_RCC_ClockConfig+0x274>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fde8 	bl	80011c8 <HAL_InitTick>
 80025f8:	4603      	mov	r3, r0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40022000 	.word	0x40022000
 8002608:	40021000 	.word	0x40021000
 800260c:	04c4b400 	.word	0x04c4b400
 8002610:	08003dd0 	.word	0x08003dd0
 8002614:	20000008 	.word	0x20000008
 8002618:	2000000c 	.word	0x2000000c

0800261c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800261c:	b480      	push	{r7}
 800261e:	b087      	sub	sp, #28
 8002620:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002622:	4b2c      	ldr	r3, [pc, #176]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b04      	cmp	r3, #4
 800262c:	d102      	bne.n	8002634 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800262e:	4b2a      	ldr	r3, [pc, #168]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	e047      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002634:	4b27      	ldr	r3, [pc, #156]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b08      	cmp	r3, #8
 800263e:	d102      	bne.n	8002646 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002640:	4b26      	ldr	r3, [pc, #152]	@ (80026dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	e03e      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002646:	4b23      	ldr	r3, [pc, #140]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b0c      	cmp	r3, #12
 8002650:	d136      	bne.n	80026c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002652:	4b20      	ldr	r3, [pc, #128]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800265c:	4b1d      	ldr	r3, [pc, #116]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	3301      	adds	r3, #1
 8002668:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b03      	cmp	r3, #3
 800266e:	d10c      	bne.n	800268a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002670:	4a1a      	ldr	r2, [pc, #104]	@ (80026dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	fbb2 f3f3 	udiv	r3, r2, r3
 8002678:	4a16      	ldr	r2, [pc, #88]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800267a:	68d2      	ldr	r2, [r2, #12]
 800267c:	0a12      	lsrs	r2, r2, #8
 800267e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	617b      	str	r3, [r7, #20]
      break;
 8002688:	e00c      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800268a:	4a13      	ldr	r2, [pc, #76]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	4a10      	ldr	r2, [pc, #64]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002694:	68d2      	ldr	r2, [r2, #12]
 8002696:	0a12      	lsrs	r2, r2, #8
 8002698:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800269c:	fb02 f303 	mul.w	r3, r2, r3
 80026a0:	617b      	str	r3, [r7, #20]
      break;
 80026a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026a4:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	0e5b      	lsrs	r3, r3, #25
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	3301      	adds	r3, #1
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	e001      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026c4:	693b      	ldr	r3, [r7, #16]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	371c      	adds	r7, #28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000
 80026d8:	00f42400 	.word	0x00f42400
 80026dc:	02dc6c00 	.word	0x02dc6c00

080026e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	3301      	adds	r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d10c      	bne.n	800271e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002704:	4a17      	ldr	r2, [pc, #92]	@ (8002764 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	fbb2 f3f3 	udiv	r3, r2, r3
 800270c:	4a14      	ldr	r2, [pc, #80]	@ (8002760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800270e:	68d2      	ldr	r2, [r2, #12]
 8002710:	0a12      	lsrs	r2, r2, #8
 8002712:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002716:	fb02 f303 	mul.w	r3, r2, r3
 800271a:	617b      	str	r3, [r7, #20]
    break;
 800271c:	e00c      	b.n	8002738 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800271e:	4a12      	ldr	r2, [pc, #72]	@ (8002768 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	fbb2 f3f3 	udiv	r3, r2, r3
 8002726:	4a0e      	ldr	r2, [pc, #56]	@ (8002760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002728:	68d2      	ldr	r2, [r2, #12]
 800272a:	0a12      	lsrs	r2, r2, #8
 800272c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002730:	fb02 f303 	mul.w	r3, r2, r3
 8002734:	617b      	str	r3, [r7, #20]
    break;
 8002736:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002738:	4b09      	ldr	r3, [pc, #36]	@ (8002760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	0e5b      	lsrs	r3, r3, #25
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	3301      	adds	r3, #1
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002750:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002752:	687b      	ldr	r3, [r7, #4]
}
 8002754:	4618      	mov	r0, r3
 8002756:	371c      	adds	r7, #28
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	40021000 	.word	0x40021000
 8002764:	02dc6c00 	.word	0x02dc6c00
 8002768:	00f42400 	.word	0x00f42400

0800276c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e09d      	b.n	80028ba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	2b00      	cmp	r3, #0
 8002784:	d108      	bne.n	8002798 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800278e:	d009      	beq.n	80027a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	61da      	str	r2, [r3, #28]
 8002796:	e005      	b.n	80027a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe fab4 	bl	8000d2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80027e4:	d902      	bls.n	80027ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	e002      	b.n	80027f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80027ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80027fa:	d007      	beq.n	800280c <HAL_SPI_Init+0xa0>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002804:	d002      	beq.n	800280c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800284e:	ea42 0103 	orr.w	r1, r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002856:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	0c1b      	lsrs	r3, r3, #16
 8002868:	f003 0204 	and.w	r2, r3, #4
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002888:	ea42 0103 	orr.w	r1, r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69da      	ldr	r2, [r3, #28]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b088      	sub	sp, #32
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	4613      	mov	r3, r2
 80028d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_SPI_Transmit+0x22>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e15f      	b.n	8002ba4 <HAL_SPI_Transmit+0x2e2>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028ec:	f7fe fcb8 	bl	8001260 <HAL_GetTick>
 80028f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d002      	beq.n	8002908 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002902:	2302      	movs	r3, #2
 8002904:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002906:	e148      	b.n	8002b9a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_SPI_Transmit+0x52>
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d102      	bne.n	800291a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002918:	e13f      	b.n	8002b9a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2203      	movs	r2, #3
 800291e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	88fa      	ldrh	r2, [r7, #6]
 8002932:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	88fa      	ldrh	r2, [r7, #6]
 8002938:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002964:	d10f      	bne.n	8002986 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002974:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002984:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002990:	2b40      	cmp	r3, #64	@ 0x40
 8002992:	d007      	beq.n	80029a4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029ac:	d94f      	bls.n	8002a4e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <HAL_SPI_Transmit+0xfa>
 80029b6:	8afb      	ldrh	r3, [r7, #22]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d142      	bne.n	8002a42 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c0:	881a      	ldrh	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029cc:	1c9a      	adds	r2, r3, #2
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029e0:	e02f      	b.n	8002a42 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d112      	bne.n	8002a16 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f4:	881a      	ldrh	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a00:	1c9a      	adds	r2, r3, #2
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a14:	e015      	b.n	8002a42 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a16:	f7fe fc23 	bl	8001260 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d803      	bhi.n	8002a2e <HAL_SPI_Transmit+0x16c>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d102      	bne.n	8002a34 <HAL_SPI_Transmit+0x172>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d106      	bne.n	8002a42 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002a40:	e0ab      	b.n	8002b9a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1ca      	bne.n	80029e2 <HAL_SPI_Transmit+0x120>
 8002a4c:	e080      	b.n	8002b50 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <HAL_SPI_Transmit+0x19a>
 8002a56:	8afb      	ldrh	r3, [r7, #22]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d174      	bne.n	8002b46 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d912      	bls.n	8002a8c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6a:	881a      	ldrh	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a76:	1c9a      	adds	r2, r3, #2
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b02      	subs	r3, #2
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a8a:	e05c      	b.n	8002b46 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	330c      	adds	r3, #12
 8002a96:	7812      	ldrb	r2, [r2, #0]
 8002a98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002ab2:	e048      	b.n	8002b46 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d12b      	bne.n	8002b1a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d912      	bls.n	8002af2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad0:	881a      	ldrh	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002adc:	1c9a      	adds	r2, r3, #2
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b02      	subs	r3, #2
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002af0:	e029      	b.n	8002b46 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	330c      	adds	r3, #12
 8002afc:	7812      	ldrb	r2, [r2, #0]
 8002afe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b18:	e015      	b.n	8002b46 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b1a:	f7fe fba1 	bl	8001260 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d803      	bhi.n	8002b32 <HAL_SPI_Transmit+0x270>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d102      	bne.n	8002b38 <HAL_SPI_Transmit+0x276>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d106      	bne.n	8002b46 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002b44:	e029      	b.n	8002b9a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1b1      	bne.n	8002ab4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	6839      	ldr	r1, [r7, #0]
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f947 	bl	8002de8 <SPI_EndRxTxTransaction>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10a      	bne.n	8002b84 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	77fb      	strb	r3, [r7, #31]
 8002b90:	e003      	b.n	8002b9a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002ba2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3720      	adds	r7, #32
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bbc:	f7fe fb50 	bl	8001260 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	4413      	add	r3, r2
 8002bca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bcc:	f7fe fb48 	bl	8001260 <HAL_GetTick>
 8002bd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bd2:	4b39      	ldr	r3, [pc, #228]	@ (8002cb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	015b      	lsls	r3, r3, #5
 8002bd8:	0d1b      	lsrs	r3, r3, #20
 8002bda:	69fa      	ldr	r2, [r7, #28]
 8002bdc:	fb02 f303 	mul.w	r3, r2, r3
 8002be0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002be2:	e054      	b.n	8002c8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bea:	d050      	beq.n	8002c8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bec:	f7fe fb38 	bl	8001260 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d902      	bls.n	8002c02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d13d      	bne.n	8002c7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c1a:	d111      	bne.n	8002c40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c24:	d004      	beq.n	8002c30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c2e:	d107      	bne.n	8002c40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c48:	d10f      	bne.n	8002c6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e017      	b.n	8002cae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4013      	ands	r3, r2
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	bf0c      	ite	eq
 8002c9e:	2301      	moveq	r3, #1
 8002ca0:	2300      	movne	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d19b      	bne.n	8002be4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3720      	adds	r7, #32
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000008 	.word	0x20000008

08002cbc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08a      	sub	sp, #40	@ 0x28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002cce:	f7fe fac7 	bl	8001260 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	4413      	add	r3, r2
 8002cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002cde:	f7fe fabf 	bl	8001260 <HAL_GetTick>
 8002ce2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	330c      	adds	r3, #12
 8002cea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002cec:	4b3d      	ldr	r3, [pc, #244]	@ (8002de4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	00da      	lsls	r2, r3, #3
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	0d1b      	lsrs	r3, r3, #20
 8002cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cfe:	fb02 f303 	mul.w	r3, r2, r3
 8002d02:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002d04:	e060      	b.n	8002dc8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002d0c:	d107      	bne.n	8002d1e <SPI_WaitFifoStateUntilTimeout+0x62>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d104      	bne.n	8002d1e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002d1c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d050      	beq.n	8002dc8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d26:	f7fe fa9b 	bl	8001260 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d902      	bls.n	8002d3c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d13d      	bne.n	8002db8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d54:	d111      	bne.n	8002d7a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d5e:	d004      	beq.n	8002d6a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d68:	d107      	bne.n	8002d7a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d78:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d82:	d10f      	bne.n	8002da4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002da2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e010      	b.n	8002dda <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d196      	bne.n	8002d06 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3728      	adds	r7, #40	@ 0x28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000008 	.word	0x20000008

08002de8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f7ff ff5b 	bl	8002cbc <SPI_WaitFifoStateUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d007      	beq.n	8002e1c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e10:	f043 0220 	orr.w	r2, r3, #32
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e027      	b.n	8002e6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2200      	movs	r2, #0
 8002e24:	2180      	movs	r1, #128	@ 0x80
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f7ff fec0 	bl	8002bac <SPI_WaitFlagStateUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d007      	beq.n	8002e42 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e36:	f043 0220 	orr.w	r2, r3, #32
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e014      	b.n	8002e6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f7ff ff34 	bl	8002cbc <SPI_WaitFifoStateUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d007      	beq.n	8002e6a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e5e:	f043 0220 	orr.w	r2, r3, #32
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e000      	b.n	8002e6c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e049      	b.n	8002f1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd ffb6 	bl	8000e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	f000 fa54 	bl	8003360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d001      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e054      	b.n	8002fe6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a26      	ldr	r2, [pc, #152]	@ (8002ff4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d022      	beq.n	8002fa4 <HAL_TIM_Base_Start_IT+0x80>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f66:	d01d      	beq.n	8002fa4 <HAL_TIM_Base_Start_IT+0x80>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a22      	ldr	r2, [pc, #136]	@ (8002ff8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d018      	beq.n	8002fa4 <HAL_TIM_Base_Start_IT+0x80>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a21      	ldr	r2, [pc, #132]	@ (8002ffc <HAL_TIM_Base_Start_IT+0xd8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d013      	beq.n	8002fa4 <HAL_TIM_Base_Start_IT+0x80>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a1f      	ldr	r2, [pc, #124]	@ (8003000 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00e      	beq.n	8002fa4 <HAL_TIM_Base_Start_IT+0x80>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003004 <HAL_TIM_Base_Start_IT+0xe0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d009      	beq.n	8002fa4 <HAL_TIM_Base_Start_IT+0x80>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1c      	ldr	r2, [pc, #112]	@ (8003008 <HAL_TIM_Base_Start_IT+0xe4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d004      	beq.n	8002fa4 <HAL_TIM_Base_Start_IT+0x80>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800300c <HAL_TIM_Base_Start_IT+0xe8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d115      	bne.n	8002fd0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	4b19      	ldr	r3, [pc, #100]	@ (8003010 <HAL_TIM_Base_Start_IT+0xec>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b06      	cmp	r3, #6
 8002fb4:	d015      	beq.n	8002fe2 <HAL_TIM_Base_Start_IT+0xbe>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fbc:	d011      	beq.n	8002fe2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0201 	orr.w	r2, r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fce:	e008      	b.n	8002fe2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	e000      	b.n	8002fe4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40012c00 	.word	0x40012c00
 8002ff8:	40000400 	.word	0x40000400
 8002ffc:	40000800 	.word	0x40000800
 8003000:	40000c00 	.word	0x40000c00
 8003004:	40013400 	.word	0x40013400
 8003008:	40014000 	.word	0x40014000
 800300c:	40015000 	.word	0x40015000
 8003010:	00010007 	.word	0x00010007

08003014 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6a1a      	ldr	r2, [r3, #32]
 8003032:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10f      	bne.n	800305c <HAL_TIM_Base_Stop_IT+0x48>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6a1a      	ldr	r2, [r3, #32]
 8003042:	f244 4344 	movw	r3, #17476	@ 0x4444
 8003046:	4013      	ands	r3, r2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d107      	bne.n	800305c <HAL_TIM_Base_Stop_IT+0x48>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0201 	bic.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d01b      	beq.n	80030d6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f06f 0202 	mvn.w	r2, #2
 80030a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f931 	bl	8003324 <HAL_TIM_IC_CaptureCallback>
 80030c2:	e005      	b.n	80030d0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f923 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f934 	bl	8003338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d020      	beq.n	8003122 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01b      	beq.n	8003122 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f06f 0204 	mvn.w	r2, #4
 80030f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f90b 	bl	8003324 <HAL_TIM_IC_CaptureCallback>
 800310e:	e005      	b.n	800311c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f8fd 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f90e 	bl	8003338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d020      	beq.n	800316e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d01b      	beq.n	800316e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f06f 0208 	mvn.w	r2, #8
 800313e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2204      	movs	r2, #4
 8003144:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f8e5 	bl	8003324 <HAL_TIM_IC_CaptureCallback>
 800315a:	e005      	b.n	8003168 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f8d7 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f8e8 	bl	8003338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b00      	cmp	r3, #0
 8003176:	d020      	beq.n	80031ba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 0310 	and.w	r3, r3, #16
 800317e:	2b00      	cmp	r3, #0
 8003180:	d01b      	beq.n	80031ba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f06f 0210 	mvn.w	r2, #16
 800318a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2208      	movs	r2, #8
 8003190:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f8bf 	bl	8003324 <HAL_TIM_IC_CaptureCallback>
 80031a6:	e005      	b.n	80031b4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f8b1 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f8c2 	bl	8003338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00c      	beq.n	80031de <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f06f 0201 	mvn.w	r2, #1
 80031d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7fd fb81 	bl	80008e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d104      	bne.n	80031f2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00c      	beq.n	800320c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d007      	beq.n	800320c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f968 	bl	80034dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00c      	beq.n	8003230 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800321c:	2b00      	cmp	r3, #0
 800321e:	d007      	beq.n	8003230 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f960 	bl	80034f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00c      	beq.n	8003254 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003240:	2b00      	cmp	r3, #0
 8003242:	d007      	beq.n	8003254 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800324c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f87c 	bl	800334c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00c      	beq.n	8003278 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d007      	beq.n	8003278 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0220 	mvn.w	r2, #32
 8003270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f928 	bl	80034c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00c      	beq.n	800329c <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f934 	bl	8003504 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00c      	beq.n	80032c0 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80032b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f92c 	bl	8003518 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00c      	beq.n	80032e4 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d007      	beq.n	80032e4 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80032dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f924 	bl	800352c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00c      	beq.n	8003308 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d007      	beq.n	8003308 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f91c 	bl	8003540 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a4c      	ldr	r2, [pc, #304]	@ (80034a4 <TIM_Base_SetConfig+0x144>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d017      	beq.n	80033a8 <TIM_Base_SetConfig+0x48>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800337e:	d013      	beq.n	80033a8 <TIM_Base_SetConfig+0x48>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a49      	ldr	r2, [pc, #292]	@ (80034a8 <TIM_Base_SetConfig+0x148>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00f      	beq.n	80033a8 <TIM_Base_SetConfig+0x48>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a48      	ldr	r2, [pc, #288]	@ (80034ac <TIM_Base_SetConfig+0x14c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00b      	beq.n	80033a8 <TIM_Base_SetConfig+0x48>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a47      	ldr	r2, [pc, #284]	@ (80034b0 <TIM_Base_SetConfig+0x150>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d007      	beq.n	80033a8 <TIM_Base_SetConfig+0x48>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a46      	ldr	r2, [pc, #280]	@ (80034b4 <TIM_Base_SetConfig+0x154>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d003      	beq.n	80033a8 <TIM_Base_SetConfig+0x48>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a45      	ldr	r2, [pc, #276]	@ (80034b8 <TIM_Base_SetConfig+0x158>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d108      	bne.n	80033ba <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a39      	ldr	r2, [pc, #228]	@ (80034a4 <TIM_Base_SetConfig+0x144>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d023      	beq.n	800340a <TIM_Base_SetConfig+0xaa>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033c8:	d01f      	beq.n	800340a <TIM_Base_SetConfig+0xaa>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a36      	ldr	r2, [pc, #216]	@ (80034a8 <TIM_Base_SetConfig+0x148>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d01b      	beq.n	800340a <TIM_Base_SetConfig+0xaa>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a35      	ldr	r2, [pc, #212]	@ (80034ac <TIM_Base_SetConfig+0x14c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d017      	beq.n	800340a <TIM_Base_SetConfig+0xaa>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a34      	ldr	r2, [pc, #208]	@ (80034b0 <TIM_Base_SetConfig+0x150>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d013      	beq.n	800340a <TIM_Base_SetConfig+0xaa>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a33      	ldr	r2, [pc, #204]	@ (80034b4 <TIM_Base_SetConfig+0x154>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00f      	beq.n	800340a <TIM_Base_SetConfig+0xaa>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a33      	ldr	r2, [pc, #204]	@ (80034bc <TIM_Base_SetConfig+0x15c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00b      	beq.n	800340a <TIM_Base_SetConfig+0xaa>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a32      	ldr	r2, [pc, #200]	@ (80034c0 <TIM_Base_SetConfig+0x160>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d007      	beq.n	800340a <TIM_Base_SetConfig+0xaa>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a31      	ldr	r2, [pc, #196]	@ (80034c4 <TIM_Base_SetConfig+0x164>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d003      	beq.n	800340a <TIM_Base_SetConfig+0xaa>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a2c      	ldr	r2, [pc, #176]	@ (80034b8 <TIM_Base_SetConfig+0x158>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d108      	bne.n	800341c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4313      	orrs	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a18      	ldr	r2, [pc, #96]	@ (80034a4 <TIM_Base_SetConfig+0x144>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d013      	beq.n	8003470 <TIM_Base_SetConfig+0x110>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a1a      	ldr	r2, [pc, #104]	@ (80034b4 <TIM_Base_SetConfig+0x154>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d00f      	beq.n	8003470 <TIM_Base_SetConfig+0x110>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a1a      	ldr	r2, [pc, #104]	@ (80034bc <TIM_Base_SetConfig+0x15c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d00b      	beq.n	8003470 <TIM_Base_SetConfig+0x110>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a19      	ldr	r2, [pc, #100]	@ (80034c0 <TIM_Base_SetConfig+0x160>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d007      	beq.n	8003470 <TIM_Base_SetConfig+0x110>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a18      	ldr	r2, [pc, #96]	@ (80034c4 <TIM_Base_SetConfig+0x164>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d003      	beq.n	8003470 <TIM_Base_SetConfig+0x110>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a13      	ldr	r2, [pc, #76]	@ (80034b8 <TIM_Base_SetConfig+0x158>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d103      	bne.n	8003478 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b01      	cmp	r3, #1
 8003488:	d105      	bne.n	8003496 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f023 0201 	bic.w	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	611a      	str	r2, [r3, #16]
  }
}
 8003496:	bf00      	nop
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	40000400 	.word	0x40000400
 80034ac:	40000800 	.word	0x40000800
 80034b0:	40000c00 	.word	0x40000c00
 80034b4:	40013400 	.word	0x40013400
 80034b8:	40015000 	.word	0x40015000
 80034bc:	40014000 	.word	0x40014000
 80034c0:	40014400 	.word	0x40014400
 80034c4:	40014800 	.word	0x40014800

080034c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <memset>:
 8003554:	4402      	add	r2, r0
 8003556:	4603      	mov	r3, r0
 8003558:	4293      	cmp	r3, r2
 800355a:	d100      	bne.n	800355e <memset+0xa>
 800355c:	4770      	bx	lr
 800355e:	f803 1b01 	strb.w	r1, [r3], #1
 8003562:	e7f9      	b.n	8003558 <memset+0x4>

08003564 <__libc_init_array>:
 8003564:	b570      	push	{r4, r5, r6, lr}
 8003566:	4d0d      	ldr	r5, [pc, #52]	@ (800359c <__libc_init_array+0x38>)
 8003568:	4c0d      	ldr	r4, [pc, #52]	@ (80035a0 <__libc_init_array+0x3c>)
 800356a:	1b64      	subs	r4, r4, r5
 800356c:	10a4      	asrs	r4, r4, #2
 800356e:	2600      	movs	r6, #0
 8003570:	42a6      	cmp	r6, r4
 8003572:	d109      	bne.n	8003588 <__libc_init_array+0x24>
 8003574:	4d0b      	ldr	r5, [pc, #44]	@ (80035a4 <__libc_init_array+0x40>)
 8003576:	4c0c      	ldr	r4, [pc, #48]	@ (80035a8 <__libc_init_array+0x44>)
 8003578:	f000 f818 	bl	80035ac <_init>
 800357c:	1b64      	subs	r4, r4, r5
 800357e:	10a4      	asrs	r4, r4, #2
 8003580:	2600      	movs	r6, #0
 8003582:	42a6      	cmp	r6, r4
 8003584:	d105      	bne.n	8003592 <__libc_init_array+0x2e>
 8003586:	bd70      	pop	{r4, r5, r6, pc}
 8003588:	f855 3b04 	ldr.w	r3, [r5], #4
 800358c:	4798      	blx	r3
 800358e:	3601      	adds	r6, #1
 8003590:	e7ee      	b.n	8003570 <__libc_init_array+0xc>
 8003592:	f855 3b04 	ldr.w	r3, [r5], #4
 8003596:	4798      	blx	r3
 8003598:	3601      	adds	r6, #1
 800359a:	e7f2      	b.n	8003582 <__libc_init_array+0x1e>
 800359c:	08003de0 	.word	0x08003de0
 80035a0:	08003de0 	.word	0x08003de0
 80035a4:	08003de0 	.word	0x08003de0
 80035a8:	08003de4 	.word	0x08003de4

080035ac <_init>:
 80035ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ae:	bf00      	nop
 80035b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035b2:	bc08      	pop	{r3}
 80035b4:	469e      	mov	lr, r3
 80035b6:	4770      	bx	lr

080035b8 <_fini>:
 80035b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ba:	bf00      	nop
 80035bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035be:	bc08      	pop	{r3}
 80035c0:	469e      	mov	lr, r3
 80035c2:	4770      	bx	lr
