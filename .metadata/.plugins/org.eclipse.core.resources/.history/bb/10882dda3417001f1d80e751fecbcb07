
01_Display_wo_DMA_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a2c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003c04  08003c04  00004c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c88  08003c88  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c88  08003c88  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c88  08003c88  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c88  08003c88  00004c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c8c  08003c8c  00004c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c90  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08003c9c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08003c9c  0000509c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087ca  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018af  00000000  00000000  0000d806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  0000f0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006d9  00000000  00000000  0000f9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244df  00000000  00000000  000100a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009fdb  00000000  00000000  00034588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4b66  00000000  00000000  0003e563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001230c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023fc  00000000  00000000  0012310c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00125508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003bec 	.word	0x08003bec

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003bec 	.word	0x08003bec

08000218 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	80fb      	strh	r3, [r7, #6]
 8000222:	460b      	mov	r3, r1
 8000224:	80bb      	strh	r3, [r7, #4]
 8000226:	4613      	mov	r3, r2
 8000228:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 800022a:	88fb      	ldrh	r3, [r7, #6]
 800022c:	88b9      	ldrh	r1, [r7, #4]
 800022e:	887a      	ldrh	r2, [r7, #2]
 8000230:	4618      	mov	r0, r3
 8000232:	f001 fdcf 	bl	8001dd4 <ST7735_DrawPixel>
}
 8000236:	bf00      	nop
 8000238:	3708      	adds	r7, #8
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}

0800023e <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800023e:	b590      	push	{r4, r7, lr}
 8000240:	b085      	sub	sp, #20
 8000242:	af02      	add	r7, sp, #8
 8000244:	4604      	mov	r4, r0
 8000246:	4608      	mov	r0, r1
 8000248:	4611      	mov	r1, r2
 800024a:	461a      	mov	r2, r3
 800024c:	4623      	mov	r3, r4
 800024e:	80fb      	strh	r3, [r7, #6]
 8000250:	4603      	mov	r3, r0
 8000252:	80bb      	strh	r3, [r7, #4]
 8000254:	460b      	mov	r3, r1
 8000256:	807b      	strh	r3, [r7, #2]
 8000258:	4613      	mov	r3, r2
 800025a:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 800025c:	88f8      	ldrh	r0, [r7, #6]
 800025e:	88b9      	ldrh	r1, [r7, #4]
 8000260:	887a      	ldrh	r2, [r7, #2]
 8000262:	883c      	ldrh	r4, [r7, #0]
 8000264:	8b3b      	ldrh	r3, [r7, #24]
 8000266:	9300      	str	r3, [sp, #0]
 8000268:	4623      	mov	r3, r4
 800026a:	f001 fdf1 	bl	8001e50 <ST7735_FillRectangle>
}
 800026e:	bf00      	nop
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	bd90      	pop	{r4, r7, pc}

08000276 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8000276:	b580      	push	{r7, lr}
 8000278:	b082      	sub	sp, #8
 800027a:	af00      	add	r7, sp, #0
 800027c:	4603      	mov	r3, r0
 800027e:	80fb      	strh	r3, [r7, #6]
 8000280:	460b      	mov	r3, r1
 8000282:	80bb      	strh	r3, [r7, #4]
 8000284:	4613      	mov	r3, r2
 8000286:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8000288:	887a      	ldrh	r2, [r7, #2]
 800028a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800028e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000292:	4618      	mov	r0, r3
 8000294:	f7ff ffc0 	bl	8000218 <drawPixel>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b089      	sub	sp, #36	@ 0x24
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4604      	mov	r4, r0
 80002a8:	4608      	mov	r0, r1
 80002aa:	4611      	mov	r1, r2
 80002ac:	461a      	mov	r2, r3
 80002ae:	4623      	mov	r3, r4
 80002b0:	80fb      	strh	r3, [r7, #6]
 80002b2:	4603      	mov	r3, r0
 80002b4:	80bb      	strh	r3, [r7, #4]
 80002b6:	460b      	mov	r3, r1
 80002b8:	807b      	strh	r3, [r7, #2]
 80002ba:	4613      	mov	r3, r2
 80002bc:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80002be:	f9b7 2000 	ldrsh.w	r2, [r7]
 80002c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80002c6:	1ad3      	subs	r3, r2, r3
 80002c8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80002cc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80002d0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80002d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80002d8:	1acb      	subs	r3, r1, r3
 80002da:	2b00      	cmp	r3, #0
 80002dc:	bfb8      	it	lt
 80002de:	425b      	neglt	r3, r3
 80002e0:	429a      	cmp	r2, r3
 80002e2:	bfcc      	ite	gt
 80002e4:	2301      	movgt	r3, #1
 80002e6:	2300      	movle	r3, #0
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	837b      	strh	r3, [r7, #26]
    if (steep) {
 80002ec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d00b      	beq.n	800030c <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 80002f4:	88fb      	ldrh	r3, [r7, #6]
 80002f6:	833b      	strh	r3, [r7, #24]
 80002f8:	88bb      	ldrh	r3, [r7, #4]
 80002fa:	80fb      	strh	r3, [r7, #6]
 80002fc:	8b3b      	ldrh	r3, [r7, #24]
 80002fe:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8000300:	887b      	ldrh	r3, [r7, #2]
 8000302:	82fb      	strh	r3, [r7, #22]
 8000304:	883b      	ldrh	r3, [r7, #0]
 8000306:	807b      	strh	r3, [r7, #2]
 8000308:	8afb      	ldrh	r3, [r7, #22]
 800030a:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 800030c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000310:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000314:	429a      	cmp	r2, r3
 8000316:	dd0b      	ble.n	8000330 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 8000318:	88fb      	ldrh	r3, [r7, #6]
 800031a:	82bb      	strh	r3, [r7, #20]
 800031c:	887b      	ldrh	r3, [r7, #2]
 800031e:	80fb      	strh	r3, [r7, #6]
 8000320:	8abb      	ldrh	r3, [r7, #20]
 8000322:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8000324:	88bb      	ldrh	r3, [r7, #4]
 8000326:	827b      	strh	r3, [r7, #18]
 8000328:	883b      	ldrh	r3, [r7, #0]
 800032a:	80bb      	strh	r3, [r7, #4]
 800032c:	8a7b      	ldrh	r3, [r7, #18]
 800032e:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8000330:	887a      	ldrh	r2, [r7, #2]
 8000332:	88fb      	ldrh	r3, [r7, #6]
 8000334:	1ad3      	subs	r3, r2, r3
 8000336:	b29b      	uxth	r3, r3
 8000338:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 800033a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800033e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000342:	1ad3      	subs	r3, r2, r3
 8000344:	2b00      	cmp	r3, #0
 8000346:	bfb8      	it	lt
 8000348:	425b      	neglt	r3, r3
 800034a:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 800034c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000350:	0fda      	lsrs	r2, r3, #31
 8000352:	4413      	add	r3, r2
 8000354:	105b      	asrs	r3, r3, #1
 8000356:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 8000358:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800035c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000360:	429a      	cmp	r2, r3
 8000362:	da02      	bge.n	800036a <writeLine+0xca>
        ystep = 1;
 8000364:	2301      	movs	r3, #1
 8000366:	83bb      	strh	r3, [r7, #28]
 8000368:	e031      	b.n	80003ce <writeLine+0x12e>
    } else {
        ystep = -1;
 800036a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800036e:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 8000370:	e02d      	b.n	80003ce <writeLine+0x12e>
        if (steep) {
 8000372:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d008      	beq.n	800038c <writeLine+0xec>
            writePixel(y0, x0, color);
 800037a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800037c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000380:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000384:	4618      	mov	r0, r3
 8000386:	f7ff ff76 	bl	8000276 <writePixel>
 800038a:	e007      	b.n	800039c <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 800038c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800038e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff ff6d 	bl	8000276 <writePixel>
        }
        err -= dy;
 800039c:	8bfa      	ldrh	r2, [r7, #30]
 800039e:	89fb      	ldrh	r3, [r7, #14]
 80003a0:	1ad3      	subs	r3, r2, r3
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 80003a6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	da09      	bge.n	80003c2 <writeLine+0x122>
            y0 += ystep;
 80003ae:	88ba      	ldrh	r2, [r7, #4]
 80003b0:	8bbb      	ldrh	r3, [r7, #28]
 80003b2:	4413      	add	r3, r2
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80003b8:	8bfa      	ldrh	r2, [r7, #30]
 80003ba:	8a3b      	ldrh	r3, [r7, #16]
 80003bc:	4413      	add	r3, r2
 80003be:	b29b      	uxth	r3, r3
 80003c0:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 80003c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	3301      	adds	r3, #1
 80003ca:	b29b      	uxth	r3, r3
 80003cc:	80fb      	strh	r3, [r7, #6]
 80003ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80003d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80003d6:	429a      	cmp	r2, r3
 80003d8:	ddcb      	ble.n	8000372 <writeLine+0xd2>
        }
    }
}
 80003da:	bf00      	nop
 80003dc:	bf00      	nop
 80003de:	3724      	adds	r7, #36	@ 0x24
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd90      	pop	{r4, r7, pc}

080003e4 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80003e4:	b590      	push	{r4, r7, lr}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af02      	add	r7, sp, #8
 80003ea:	4604      	mov	r4, r0
 80003ec:	4608      	mov	r0, r1
 80003ee:	4611      	mov	r1, r2
 80003f0:	461a      	mov	r2, r3
 80003f2:	4623      	mov	r3, r4
 80003f4:	80fb      	strh	r3, [r7, #6]
 80003f6:	4603      	mov	r3, r0
 80003f8:	80bb      	strh	r3, [r7, #4]
 80003fa:	460b      	mov	r3, r1
 80003fc:	807b      	strh	r3, [r7, #2]
 80003fe:	4613      	mov	r3, r2
 8000400:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 8000402:	88ba      	ldrh	r2, [r7, #4]
 8000404:	887b      	ldrh	r3, [r7, #2]
 8000406:	4413      	add	r3, r2
 8000408:	b29b      	uxth	r3, r3
 800040a:	3b01      	subs	r3, #1
 800040c:	b29b      	uxth	r3, r3
 800040e:	b21c      	sxth	r4, r3
 8000410:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000414:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000418:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800041c:	883b      	ldrh	r3, [r7, #0]
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	4623      	mov	r3, r4
 8000422:	f7ff ff3d 	bl	80002a0 <writeLine>
}
 8000426:	bf00      	nop
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	bd90      	pop	{r4, r7, pc}

0800042e <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 800042e:	b590      	push	{r4, r7, lr}
 8000430:	b085      	sub	sp, #20
 8000432:	af02      	add	r7, sp, #8
 8000434:	4604      	mov	r4, r0
 8000436:	4608      	mov	r0, r1
 8000438:	4611      	mov	r1, r2
 800043a:	461a      	mov	r2, r3
 800043c:	4623      	mov	r3, r4
 800043e:	80fb      	strh	r3, [r7, #6]
 8000440:	4603      	mov	r3, r0
 8000442:	80bb      	strh	r3, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	807b      	strh	r3, [r7, #2]
 8000448:	4613      	mov	r3, r2
 800044a:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 800044c:	88fa      	ldrh	r2, [r7, #6]
 800044e:	887b      	ldrh	r3, [r7, #2]
 8000450:	4413      	add	r3, r2
 8000452:	b29b      	uxth	r3, r3
 8000454:	3b01      	subs	r3, #1
 8000456:	b29b      	uxth	r3, r3
 8000458:	b21a      	sxth	r2, r3
 800045a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800045e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000462:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000466:	883b      	ldrh	r3, [r7, #0]
 8000468:	9300      	str	r3, [sp, #0]
 800046a:	4623      	mov	r3, r4
 800046c:	f7ff ff18 	bl	80002a0 <writeLine>
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	bd90      	pop	{r4, r7, pc}

08000478 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8000478:	b590      	push	{r4, r7, lr}
 800047a:	b087      	sub	sp, #28
 800047c:	af02      	add	r7, sp, #8
 800047e:	4604      	mov	r4, r0
 8000480:	4608      	mov	r0, r1
 8000482:	4611      	mov	r1, r2
 8000484:	461a      	mov	r2, r3
 8000486:	4623      	mov	r3, r4
 8000488:	80fb      	strh	r3, [r7, #6]
 800048a:	4603      	mov	r3, r0
 800048c:	80bb      	strh	r3, [r7, #4]
 800048e:	460b      	mov	r3, r1
 8000490:	807b      	strh	r3, [r7, #2]
 8000492:	4613      	mov	r3, r2
 8000494:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 8000496:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800049a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800049e:	429a      	cmp	r2, r3
 80004a0:	d11a      	bne.n	80004d8 <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 80004a2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80004a6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80004aa:	429a      	cmp	r2, r3
 80004ac:	dd05      	ble.n	80004ba <drawLine+0x42>
 80004ae:	88bb      	ldrh	r3, [r7, #4]
 80004b0:	81bb      	strh	r3, [r7, #12]
 80004b2:	883b      	ldrh	r3, [r7, #0]
 80004b4:	80bb      	strh	r3, [r7, #4]
 80004b6:	89bb      	ldrh	r3, [r7, #12]
 80004b8:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80004ba:	883a      	ldrh	r2, [r7, #0]
 80004bc:	88bb      	ldrh	r3, [r7, #4]
 80004be:	1ad3      	subs	r3, r2, r3
 80004c0:	b29b      	uxth	r3, r3
 80004c2:	3301      	adds	r3, #1
 80004c4:	b29b      	uxth	r3, r3
 80004c6:	b21a      	sxth	r2, r3
 80004c8:	8c3b      	ldrh	r3, [r7, #32]
 80004ca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80004ce:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80004d2:	f7ff ff87 	bl	80003e4 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 80004d6:	e02d      	b.n	8000534 <drawLine+0xbc>
    } else if(y0 == y1){
 80004d8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80004dc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d11a      	bne.n	800051a <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 80004e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80004e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	dd05      	ble.n	80004fc <drawLine+0x84>
 80004f0:	88fb      	ldrh	r3, [r7, #6]
 80004f2:	81fb      	strh	r3, [r7, #14]
 80004f4:	887b      	ldrh	r3, [r7, #2]
 80004f6:	80fb      	strh	r3, [r7, #6]
 80004f8:	89fb      	ldrh	r3, [r7, #14]
 80004fa:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80004fc:	887a      	ldrh	r2, [r7, #2]
 80004fe:	88fb      	ldrh	r3, [r7, #6]
 8000500:	1ad3      	subs	r3, r2, r3
 8000502:	b29b      	uxth	r3, r3
 8000504:	3301      	adds	r3, #1
 8000506:	b29b      	uxth	r3, r3
 8000508:	b21a      	sxth	r2, r3
 800050a:	8c3b      	ldrh	r3, [r7, #32]
 800050c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000510:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000514:	f7ff ff8b 	bl	800042e <drawFastHLine>
}
 8000518:	e00c      	b.n	8000534 <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 800051a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800051e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000522:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000526:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800052a:	8c3b      	ldrh	r3, [r7, #32]
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	4623      	mov	r3, r4
 8000530:	f7ff feb6 	bl	80002a0 <writeLine>
}
 8000534:	bf00      	nop
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	bd90      	pop	{r4, r7, pc}

0800053c <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b087      	sub	sp, #28
 8000540:	af00      	add	r7, sp, #0
 8000542:	4604      	mov	r4, r0
 8000544:	4608      	mov	r0, r1
 8000546:	4611      	mov	r1, r2
 8000548:	461a      	mov	r2, r3
 800054a:	4623      	mov	r3, r4
 800054c:	80fb      	strh	r3, [r7, #6]
 800054e:	4603      	mov	r3, r0
 8000550:	80bb      	strh	r3, [r7, #4]
 8000552:	460b      	mov	r3, r1
 8000554:	807b      	strh	r3, [r7, #2]
 8000556:	4613      	mov	r3, r2
 8000558:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 800055a:	887b      	ldrh	r3, [r7, #2]
 800055c:	f1c3 0301 	rsb	r3, r3, #1
 8000560:	b29b      	uxth	r3, r3
 8000562:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000564:	2301      	movs	r3, #1
 8000566:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8000568:	887b      	ldrh	r3, [r7, #2]
 800056a:	461a      	mov	r2, r3
 800056c:	03d2      	lsls	r2, r2, #15
 800056e:	1ad3      	subs	r3, r2, r3
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	b29b      	uxth	r3, r3
 8000574:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 800057a:	887b      	ldrh	r3, [r7, #2]
 800057c:	81fb      	strh	r3, [r7, #14]

    writePixel(x0  , y0+r, color);
 800057e:	88ba      	ldrh	r2, [r7, #4]
 8000580:	887b      	ldrh	r3, [r7, #2]
 8000582:	4413      	add	r3, r2
 8000584:	b29b      	uxth	r3, r3
 8000586:	b219      	sxth	r1, r3
 8000588:	883a      	ldrh	r2, [r7, #0]
 800058a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff fe71 	bl	8000276 <writePixel>
    writePixel(x0  , y0-r, color);
 8000594:	88ba      	ldrh	r2, [r7, #4]
 8000596:	887b      	ldrh	r3, [r7, #2]
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	b29b      	uxth	r3, r3
 800059c:	b219      	sxth	r1, r3
 800059e:	883a      	ldrh	r2, [r7, #0]
 80005a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fe66 	bl	8000276 <writePixel>
    writePixel(x0+r, y0  , color);
 80005aa:	88fa      	ldrh	r2, [r7, #6]
 80005ac:	887b      	ldrh	r3, [r7, #2]
 80005ae:	4413      	add	r3, r2
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	b21b      	sxth	r3, r3
 80005b4:	883a      	ldrh	r2, [r7, #0]
 80005b6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff fe5b 	bl	8000276 <writePixel>
    writePixel(x0-r, y0  , color);
 80005c0:	88fa      	ldrh	r2, [r7, #6]
 80005c2:	887b      	ldrh	r3, [r7, #2]
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	b21b      	sxth	r3, r3
 80005ca:	883a      	ldrh	r2, [r7, #0]
 80005cc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fe50 	bl	8000276 <writePixel>

    while (x<y) {
 80005d6:	e091      	b.n	80006fc <drawCircle+0x1c0>
        if (f >= 0) {
 80005d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	db0e      	blt.n	80005fe <drawCircle+0xc2>
            y--;
 80005e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	3b01      	subs	r3, #1
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80005ec:	8a7b      	ldrh	r3, [r7, #18]
 80005ee:	3302      	adds	r3, #2
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80005f4:	8afa      	ldrh	r2, [r7, #22]
 80005f6:	8a7b      	ldrh	r3, [r7, #18]
 80005f8:	4413      	add	r3, r2
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80005fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000602:	b29b      	uxth	r3, r3
 8000604:	3301      	adds	r3, #1
 8000606:	b29b      	uxth	r3, r3
 8000608:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800060a:	8abb      	ldrh	r3, [r7, #20]
 800060c:	3302      	adds	r3, #2
 800060e:	b29b      	uxth	r3, r3
 8000610:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8000612:	8afa      	ldrh	r2, [r7, #22]
 8000614:	8abb      	ldrh	r3, [r7, #20]
 8000616:	4413      	add	r3, r2
 8000618:	b29b      	uxth	r3, r3
 800061a:	82fb      	strh	r3, [r7, #22]

        writePixel(x0 + x, y0 + y, color);
 800061c:	88fa      	ldrh	r2, [r7, #6]
 800061e:	8a3b      	ldrh	r3, [r7, #16]
 8000620:	4413      	add	r3, r2
 8000622:	b29b      	uxth	r3, r3
 8000624:	b218      	sxth	r0, r3
 8000626:	88ba      	ldrh	r2, [r7, #4]
 8000628:	89fb      	ldrh	r3, [r7, #14]
 800062a:	4413      	add	r3, r2
 800062c:	b29b      	uxth	r3, r3
 800062e:	b21b      	sxth	r3, r3
 8000630:	883a      	ldrh	r2, [r7, #0]
 8000632:	4619      	mov	r1, r3
 8000634:	f7ff fe1f 	bl	8000276 <writePixel>
        writePixel(x0 - x, y0 + y, color);
 8000638:	88fa      	ldrh	r2, [r7, #6]
 800063a:	8a3b      	ldrh	r3, [r7, #16]
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	b29b      	uxth	r3, r3
 8000640:	b218      	sxth	r0, r3
 8000642:	88ba      	ldrh	r2, [r7, #4]
 8000644:	89fb      	ldrh	r3, [r7, #14]
 8000646:	4413      	add	r3, r2
 8000648:	b29b      	uxth	r3, r3
 800064a:	b21b      	sxth	r3, r3
 800064c:	883a      	ldrh	r2, [r7, #0]
 800064e:	4619      	mov	r1, r3
 8000650:	f7ff fe11 	bl	8000276 <writePixel>
        writePixel(x0 + x, y0 - y, color);
 8000654:	88fa      	ldrh	r2, [r7, #6]
 8000656:	8a3b      	ldrh	r3, [r7, #16]
 8000658:	4413      	add	r3, r2
 800065a:	b29b      	uxth	r3, r3
 800065c:	b218      	sxth	r0, r3
 800065e:	88ba      	ldrh	r2, [r7, #4]
 8000660:	89fb      	ldrh	r3, [r7, #14]
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	b29b      	uxth	r3, r3
 8000666:	b21b      	sxth	r3, r3
 8000668:	883a      	ldrh	r2, [r7, #0]
 800066a:	4619      	mov	r1, r3
 800066c:	f7ff fe03 	bl	8000276 <writePixel>
        writePixel(x0 - x, y0 - y, color);
 8000670:	88fa      	ldrh	r2, [r7, #6]
 8000672:	8a3b      	ldrh	r3, [r7, #16]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	b29b      	uxth	r3, r3
 8000678:	b218      	sxth	r0, r3
 800067a:	88ba      	ldrh	r2, [r7, #4]
 800067c:	89fb      	ldrh	r3, [r7, #14]
 800067e:	1ad3      	subs	r3, r2, r3
 8000680:	b29b      	uxth	r3, r3
 8000682:	b21b      	sxth	r3, r3
 8000684:	883a      	ldrh	r2, [r7, #0]
 8000686:	4619      	mov	r1, r3
 8000688:	f7ff fdf5 	bl	8000276 <writePixel>
        writePixel(x0 + y, y0 + x, color);
 800068c:	88fa      	ldrh	r2, [r7, #6]
 800068e:	89fb      	ldrh	r3, [r7, #14]
 8000690:	4413      	add	r3, r2
 8000692:	b29b      	uxth	r3, r3
 8000694:	b218      	sxth	r0, r3
 8000696:	88ba      	ldrh	r2, [r7, #4]
 8000698:	8a3b      	ldrh	r3, [r7, #16]
 800069a:	4413      	add	r3, r2
 800069c:	b29b      	uxth	r3, r3
 800069e:	b21b      	sxth	r3, r3
 80006a0:	883a      	ldrh	r2, [r7, #0]
 80006a2:	4619      	mov	r1, r3
 80006a4:	f7ff fde7 	bl	8000276 <writePixel>
        writePixel(x0 - y, y0 + x, color);
 80006a8:	88fa      	ldrh	r2, [r7, #6]
 80006aa:	89fb      	ldrh	r3, [r7, #14]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	b218      	sxth	r0, r3
 80006b2:	88ba      	ldrh	r2, [r7, #4]
 80006b4:	8a3b      	ldrh	r3, [r7, #16]
 80006b6:	4413      	add	r3, r2
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	883a      	ldrh	r2, [r7, #0]
 80006be:	4619      	mov	r1, r3
 80006c0:	f7ff fdd9 	bl	8000276 <writePixel>
        writePixel(x0 + y, y0 - x, color);
 80006c4:	88fa      	ldrh	r2, [r7, #6]
 80006c6:	89fb      	ldrh	r3, [r7, #14]
 80006c8:	4413      	add	r3, r2
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	b218      	sxth	r0, r3
 80006ce:	88ba      	ldrh	r2, [r7, #4]
 80006d0:	8a3b      	ldrh	r3, [r7, #16]
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	b21b      	sxth	r3, r3
 80006d8:	883a      	ldrh	r2, [r7, #0]
 80006da:	4619      	mov	r1, r3
 80006dc:	f7ff fdcb 	bl	8000276 <writePixel>
        writePixel(x0 - y, y0 - x, color);
 80006e0:	88fa      	ldrh	r2, [r7, #6]
 80006e2:	89fb      	ldrh	r3, [r7, #14]
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	b218      	sxth	r0, r3
 80006ea:	88ba      	ldrh	r2, [r7, #4]
 80006ec:	8a3b      	ldrh	r3, [r7, #16]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	b21b      	sxth	r3, r3
 80006f4:	883a      	ldrh	r2, [r7, #0]
 80006f6:	4619      	mov	r1, r3
 80006f8:	f7ff fdbd 	bl	8000276 <writePixel>
    while (x<y) {
 80006fc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000700:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000704:	429a      	cmp	r2, r3
 8000706:	f6ff af67 	blt.w	80005d8 <drawCircle+0x9c>
    }
}
 800070a:	bf00      	nop
 800070c:	bf00      	nop
 800070e:	371c      	adds	r7, #28
 8000710:	46bd      	mov	sp, r7
 8000712:	bd90      	pop	{r4, r7, pc}

08000714 <drawCircleHelper>:

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b087      	sub	sp, #28
 8000718:	af00      	add	r7, sp, #0
 800071a:	4604      	mov	r4, r0
 800071c:	4608      	mov	r0, r1
 800071e:	4611      	mov	r1, r2
 8000720:	461a      	mov	r2, r3
 8000722:	4623      	mov	r3, r4
 8000724:	80fb      	strh	r3, [r7, #6]
 8000726:	4603      	mov	r3, r0
 8000728:	80bb      	strh	r3, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	807b      	strh	r3, [r7, #2]
 800072e:	4613      	mov	r3, r2
 8000730:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 8000732:	887b      	ldrh	r3, [r7, #2]
 8000734:	f1c3 0301 	rsb	r3, r3, #1
 8000738:	b29b      	uxth	r3, r3
 800073a:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 800073c:	2301      	movs	r3, #1
 800073e:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8000740:	887b      	ldrh	r3, [r7, #2]
 8000742:	461a      	mov	r2, r3
 8000744:	03d2      	lsls	r2, r2, #15
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	b29b      	uxth	r3, r3
 800074c:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8000752:	887b      	ldrh	r3, [r7, #2]
 8000754:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8000756:	e0a5      	b.n	80008a4 <drawCircleHelper+0x190>
        if (f >= 0) {
 8000758:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800075c:	2b00      	cmp	r3, #0
 800075e:	db0e      	blt.n	800077e <drawCircleHelper+0x6a>
            y--;
 8000760:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000764:	b29b      	uxth	r3, r3
 8000766:	3b01      	subs	r3, #1
 8000768:	b29b      	uxth	r3, r3
 800076a:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800076c:	8a7b      	ldrh	r3, [r7, #18]
 800076e:	3302      	adds	r3, #2
 8000770:	b29b      	uxth	r3, r3
 8000772:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8000774:	8afa      	ldrh	r2, [r7, #22]
 8000776:	8a7b      	ldrh	r3, [r7, #18]
 8000778:	4413      	add	r3, r2
 800077a:	b29b      	uxth	r3, r3
 800077c:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800077e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000782:	b29b      	uxth	r3, r3
 8000784:	3301      	adds	r3, #1
 8000786:	b29b      	uxth	r3, r3
 8000788:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800078a:	8abb      	ldrh	r3, [r7, #20]
 800078c:	3302      	adds	r3, #2
 800078e:	b29b      	uxth	r3, r3
 8000790:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8000792:	8afa      	ldrh	r2, [r7, #22]
 8000794:	8abb      	ldrh	r3, [r7, #20]
 8000796:	4413      	add	r3, r2
 8000798:	b29b      	uxth	r3, r3
 800079a:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 800079c:	787b      	ldrb	r3, [r7, #1]
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d01b      	beq.n	80007de <drawCircleHelper+0xca>
            writePixel(x0 + x, y0 + y, color);
 80007a6:	88fa      	ldrh	r2, [r7, #6]
 80007a8:	8a3b      	ldrh	r3, [r7, #16]
 80007aa:	4413      	add	r3, r2
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	b218      	sxth	r0, r3
 80007b0:	88ba      	ldrh	r2, [r7, #4]
 80007b2:	89fb      	ldrh	r3, [r7, #14]
 80007b4:	4413      	add	r3, r2
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	b21b      	sxth	r3, r3
 80007ba:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80007bc:	4619      	mov	r1, r3
 80007be:	f7ff fd5a 	bl	8000276 <writePixel>
            writePixel(x0 + y, y0 + x, color);
 80007c2:	88fa      	ldrh	r2, [r7, #6]
 80007c4:	89fb      	ldrh	r3, [r7, #14]
 80007c6:	4413      	add	r3, r2
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	b218      	sxth	r0, r3
 80007cc:	88ba      	ldrh	r2, [r7, #4]
 80007ce:	8a3b      	ldrh	r3, [r7, #16]
 80007d0:	4413      	add	r3, r2
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80007d8:	4619      	mov	r1, r3
 80007da:	f7ff fd4c 	bl	8000276 <writePixel>
        }
        if (cornername & 0x2) {
 80007de:	787b      	ldrb	r3, [r7, #1]
 80007e0:	f003 0302 	and.w	r3, r3, #2
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d01b      	beq.n	8000820 <drawCircleHelper+0x10c>
            writePixel(x0 + x, y0 - y, color);
 80007e8:	88fa      	ldrh	r2, [r7, #6]
 80007ea:	8a3b      	ldrh	r3, [r7, #16]
 80007ec:	4413      	add	r3, r2
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	b218      	sxth	r0, r3
 80007f2:	88ba      	ldrh	r2, [r7, #4]
 80007f4:	89fb      	ldrh	r3, [r7, #14]
 80007f6:	1ad3      	subs	r3, r2, r3
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80007fe:	4619      	mov	r1, r3
 8000800:	f7ff fd39 	bl	8000276 <writePixel>
            writePixel(x0 + y, y0 - x, color);
 8000804:	88fa      	ldrh	r2, [r7, #6]
 8000806:	89fb      	ldrh	r3, [r7, #14]
 8000808:	4413      	add	r3, r2
 800080a:	b29b      	uxth	r3, r3
 800080c:	b218      	sxth	r0, r3
 800080e:	88ba      	ldrh	r2, [r7, #4]
 8000810:	8a3b      	ldrh	r3, [r7, #16]
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	b29b      	uxth	r3, r3
 8000816:	b21b      	sxth	r3, r3
 8000818:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800081a:	4619      	mov	r1, r3
 800081c:	f7ff fd2b 	bl	8000276 <writePixel>
        }
        if (cornername & 0x8) {
 8000820:	787b      	ldrb	r3, [r7, #1]
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	2b00      	cmp	r3, #0
 8000828:	d01b      	beq.n	8000862 <drawCircleHelper+0x14e>
            writePixel(x0 - y, y0 + x, color);
 800082a:	88fa      	ldrh	r2, [r7, #6]
 800082c:	89fb      	ldrh	r3, [r7, #14]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	b29b      	uxth	r3, r3
 8000832:	b218      	sxth	r0, r3
 8000834:	88ba      	ldrh	r2, [r7, #4]
 8000836:	8a3b      	ldrh	r3, [r7, #16]
 8000838:	4413      	add	r3, r2
 800083a:	b29b      	uxth	r3, r3
 800083c:	b21b      	sxth	r3, r3
 800083e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000840:	4619      	mov	r1, r3
 8000842:	f7ff fd18 	bl	8000276 <writePixel>
            writePixel(x0 - x, y0 + y, color);
 8000846:	88fa      	ldrh	r2, [r7, #6]
 8000848:	8a3b      	ldrh	r3, [r7, #16]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	b29b      	uxth	r3, r3
 800084e:	b218      	sxth	r0, r3
 8000850:	88ba      	ldrh	r2, [r7, #4]
 8000852:	89fb      	ldrh	r3, [r7, #14]
 8000854:	4413      	add	r3, r2
 8000856:	b29b      	uxth	r3, r3
 8000858:	b21b      	sxth	r3, r3
 800085a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800085c:	4619      	mov	r1, r3
 800085e:	f7ff fd0a 	bl	8000276 <writePixel>
        }
        if (cornername & 0x1) {
 8000862:	787b      	ldrb	r3, [r7, #1]
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	2b00      	cmp	r3, #0
 800086a:	d01b      	beq.n	80008a4 <drawCircleHelper+0x190>
            writePixel(x0 - y, y0 - x, color);
 800086c:	88fa      	ldrh	r2, [r7, #6]
 800086e:	89fb      	ldrh	r3, [r7, #14]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	b29b      	uxth	r3, r3
 8000874:	b218      	sxth	r0, r3
 8000876:	88ba      	ldrh	r2, [r7, #4]
 8000878:	8a3b      	ldrh	r3, [r7, #16]
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	b29b      	uxth	r3, r3
 800087e:	b21b      	sxth	r3, r3
 8000880:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000882:	4619      	mov	r1, r3
 8000884:	f7ff fcf7 	bl	8000276 <writePixel>
            writePixel(x0 - x, y0 - y, color);
 8000888:	88fa      	ldrh	r2, [r7, #6]
 800088a:	8a3b      	ldrh	r3, [r7, #16]
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	b29b      	uxth	r3, r3
 8000890:	b218      	sxth	r0, r3
 8000892:	88ba      	ldrh	r2, [r7, #4]
 8000894:	89fb      	ldrh	r3, [r7, #14]
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	b29b      	uxth	r3, r3
 800089a:	b21b      	sxth	r3, r3
 800089c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800089e:	4619      	mov	r1, r3
 80008a0:	f7ff fce9 	bl	8000276 <writePixel>
    while (x<y) {
 80008a4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80008a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	f6ff af53 	blt.w	8000758 <drawCircleHelper+0x44>
        }
    }
}
 80008b2:	bf00      	nop
 80008b4:	bf00      	nop
 80008b6:	371c      	adds	r7, #28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd90      	pop	{r4, r7, pc}

080008bc <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b087      	sub	sp, #28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4604      	mov	r4, r0
 80008c4:	4608      	mov	r0, r1
 80008c6:	4611      	mov	r1, r2
 80008c8:	461a      	mov	r2, r3
 80008ca:	4623      	mov	r3, r4
 80008cc:	80fb      	strh	r3, [r7, #6]
 80008ce:	4603      	mov	r3, r0
 80008d0:	80bb      	strh	r3, [r7, #4]
 80008d2:	460b      	mov	r3, r1
 80008d4:	807b      	strh	r3, [r7, #2]
 80008d6:	4613      	mov	r3, r2
 80008d8:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 80008da:	887b      	ldrh	r3, [r7, #2]
 80008dc:	f1c3 0301 	rsb	r3, r3, #1
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80008e8:	887b      	ldrh	r3, [r7, #2]
 80008ea:	461a      	mov	r2, r3
 80008ec:	03d2      	lsls	r2, r2, #15
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 80008fa:	887b      	ldrh	r3, [r7, #2]
 80008fc:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 80008fe:	8a3b      	ldrh	r3, [r7, #16]
 8000900:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 8000902:	89fb      	ldrh	r3, [r7, #14]
 8000904:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 8000906:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800090a:	b29b      	uxth	r3, r3
 800090c:	3301      	adds	r3, #1
 800090e:	b29b      	uxth	r3, r3
 8000910:	853b      	strh	r3, [r7, #40]	@ 0x28

    while(x < y) {
 8000912:	e095      	b.n	8000a40 <fillCircleHelper+0x184>
        if (f >= 0) {
 8000914:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000918:	2b00      	cmp	r3, #0
 800091a:	db0e      	blt.n	800093a <fillCircleHelper+0x7e>
            y--;
 800091c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000920:	b29b      	uxth	r3, r3
 8000922:	3b01      	subs	r3, #1
 8000924:	b29b      	uxth	r3, r3
 8000926:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000928:	8a7b      	ldrh	r3, [r7, #18]
 800092a:	3302      	adds	r3, #2
 800092c:	b29b      	uxth	r3, r3
 800092e:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8000930:	8afa      	ldrh	r2, [r7, #22]
 8000932:	8a7b      	ldrh	r3, [r7, #18]
 8000934:	4413      	add	r3, r2
 8000936:	b29b      	uxth	r3, r3
 8000938:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800093a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800093e:	b29b      	uxth	r3, r3
 8000940:	3301      	adds	r3, #1
 8000942:	b29b      	uxth	r3, r3
 8000944:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000946:	8abb      	ldrh	r3, [r7, #20]
 8000948:	3302      	adds	r3, #2
 800094a:	b29b      	uxth	r3, r3
 800094c:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800094e:	8afa      	ldrh	r2, [r7, #22]
 8000950:	8abb      	ldrh	r3, [r7, #20]
 8000952:	4413      	add	r3, r2
 8000954:	b29b      	uxth	r3, r3
 8000956:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8000958:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800095c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000960:	429a      	cmp	r2, r3
 8000962:	db31      	blt.n	80009c8 <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8000964:	787b      	ldrb	r3, [r7, #1]
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	2b00      	cmp	r3, #0
 800096c:	d013      	beq.n	8000996 <fillCircleHelper+0xda>
 800096e:	88fa      	ldrh	r2, [r7, #6]
 8000970:	8a3b      	ldrh	r3, [r7, #16]
 8000972:	4413      	add	r3, r2
 8000974:	b29b      	uxth	r3, r3
 8000976:	b218      	sxth	r0, r3
 8000978:	88ba      	ldrh	r2, [r7, #4]
 800097a:	89fb      	ldrh	r3, [r7, #14]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	b29b      	uxth	r3, r3
 8000980:	b219      	sxth	r1, r3
 8000982:	89fb      	ldrh	r3, [r7, #14]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	b29a      	uxth	r2, r3
 8000988:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800098a:	4413      	add	r3, r2
 800098c:	b29b      	uxth	r3, r3
 800098e:	b21a      	sxth	r2, r3
 8000990:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000992:	f7ff fd27 	bl	80003e4 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8000996:	787b      	ldrb	r3, [r7, #1]
 8000998:	f003 0302 	and.w	r3, r3, #2
 800099c:	2b00      	cmp	r3, #0
 800099e:	d013      	beq.n	80009c8 <fillCircleHelper+0x10c>
 80009a0:	88fa      	ldrh	r2, [r7, #6]
 80009a2:	8a3b      	ldrh	r3, [r7, #16]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	b218      	sxth	r0, r3
 80009aa:	88ba      	ldrh	r2, [r7, #4]
 80009ac:	89fb      	ldrh	r3, [r7, #14]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	b219      	sxth	r1, r3
 80009b4:	89fb      	ldrh	r3, [r7, #14]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80009bc:	4413      	add	r3, r2
 80009be:	b29b      	uxth	r3, r3
 80009c0:	b21a      	sxth	r2, r3
 80009c2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80009c4:	f7ff fd0e 	bl	80003e4 <drawFastVLine>
        }
        if(y != py) {
 80009c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80009cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d033      	beq.n	8000a3c <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 80009d4:	787b      	ldrb	r3, [r7, #1]
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d013      	beq.n	8000a06 <fillCircleHelper+0x14a>
 80009de:	88fa      	ldrh	r2, [r7, #6]
 80009e0:	897b      	ldrh	r3, [r7, #10]
 80009e2:	4413      	add	r3, r2
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	b218      	sxth	r0, r3
 80009e8:	88ba      	ldrh	r2, [r7, #4]
 80009ea:	89bb      	ldrh	r3, [r7, #12]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	b219      	sxth	r1, r3
 80009f2:	89bb      	ldrh	r3, [r7, #12]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80009fa:	4413      	add	r3, r2
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	b21a      	sxth	r2, r3
 8000a00:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a02:	f7ff fcef 	bl	80003e4 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8000a06:	787b      	ldrb	r3, [r7, #1]
 8000a08:	f003 0302 	and.w	r3, r3, #2
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d013      	beq.n	8000a38 <fillCircleHelper+0x17c>
 8000a10:	88fa      	ldrh	r2, [r7, #6]
 8000a12:	897b      	ldrh	r3, [r7, #10]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	b218      	sxth	r0, r3
 8000a1a:	88ba      	ldrh	r2, [r7, #4]
 8000a1c:	89bb      	ldrh	r3, [r7, #12]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	b219      	sxth	r1, r3
 8000a24:	89bb      	ldrh	r3, [r7, #12]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a2c:	4413      	add	r3, r2
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	b21a      	sxth	r2, r3
 8000a32:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a34:	f7ff fcd6 	bl	80003e4 <drawFastVLine>
            py = y;
 8000a38:	89fb      	ldrh	r3, [r7, #14]
 8000a3a:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 8000a3c:	8a3b      	ldrh	r3, [r7, #16]
 8000a3e:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8000a40:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000a44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	f6ff af63 	blt.w	8000914 <fillCircleHelper+0x58>
    }
}
 8000a4e:	bf00      	nop
 8000a50:	bf00      	nop
 8000a52:	371c      	adds	r7, #28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd90      	pop	{r4, r7, pc}

08000a58 <fillCircle>:

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af02      	add	r7, sp, #8
 8000a5e:	4604      	mov	r4, r0
 8000a60:	4608      	mov	r0, r1
 8000a62:	4611      	mov	r1, r2
 8000a64:	461a      	mov	r2, r3
 8000a66:	4623      	mov	r3, r4
 8000a68:	80fb      	strh	r3, [r7, #6]
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80bb      	strh	r3, [r7, #4]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	807b      	strh	r3, [r7, #2]
 8000a72:	4613      	mov	r3, r2
 8000a74:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8000a76:	88ba      	ldrh	r2, [r7, #4]
 8000a78:	887b      	ldrh	r3, [r7, #2]
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	b219      	sxth	r1, r3
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	3301      	adds	r3, #1
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	b21a      	sxth	r2, r3
 8000a8c:	883b      	ldrh	r3, [r7, #0]
 8000a8e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000a92:	f7ff fca7 	bl	80003e4 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8000a96:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000a9a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a9e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000aa2:	883b      	ldrh	r3, [r7, #0]
 8000aa4:	9301      	str	r3, [sp, #4]
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	2303      	movs	r3, #3
 8000aac:	f7ff ff06 	bl	80008bc <fillCircleHelper>
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd90      	pop	{r4, r7, pc}

08000ab8 <drawRect>:



void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4604      	mov	r4, r0
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4623      	mov	r3, r4
 8000ac8:	80fb      	strh	r3, [r7, #6]
 8000aca:	4603      	mov	r3, r0
 8000acc:	80bb      	strh	r3, [r7, #4]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	807b      	strh	r3, [r7, #2]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	803b      	strh	r3, [r7, #0]
    drawFastHLine(x, y, w, color);
 8000ad6:	8b3b      	ldrh	r3, [r7, #24]
 8000ad8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000adc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000ae0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000ae4:	f7ff fca3 	bl	800042e <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 8000ae8:	88ba      	ldrh	r2, [r7, #4]
 8000aea:	883b      	ldrh	r3, [r7, #0]
 8000aec:	4413      	add	r3, r2
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	3b01      	subs	r3, #1
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	b219      	sxth	r1, r3
 8000af6:	8b3b      	ldrh	r3, [r7, #24]
 8000af8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000afc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b00:	f7ff fc95 	bl	800042e <drawFastHLine>
    drawFastVLine(x, y, h, color);
 8000b04:	8b3b      	ldrh	r3, [r7, #24]
 8000b06:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b0a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000b0e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b12:	f7ff fc67 	bl	80003e4 <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 8000b16:	88fa      	ldrh	r2, [r7, #6]
 8000b18:	887b      	ldrh	r3, [r7, #2]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	b218      	sxth	r0, r3
 8000b24:	8b3b      	ldrh	r3, [r7, #24]
 8000b26:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b2a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000b2e:	f7ff fc59 	bl	80003e4 <drawFastVLine>
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd90      	pop	{r4, r7, pc}

08000b3a <drawRoundRect>:

void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000b3a:	b590      	push	{r4, r7, lr}
 8000b3c:	b087      	sub	sp, #28
 8000b3e:	af02      	add	r7, sp, #8
 8000b40:	4604      	mov	r4, r0
 8000b42:	4608      	mov	r0, r1
 8000b44:	4611      	mov	r1, r2
 8000b46:	461a      	mov	r2, r3
 8000b48:	4623      	mov	r3, r4
 8000b4a:	80fb      	strh	r3, [r7, #6]
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	80bb      	strh	r3, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	807b      	strh	r3, [r7, #2]
 8000b54:	4613      	mov	r3, r2
 8000b56:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8000b58:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b60:	4293      	cmp	r3, r2
 8000b62:	bfa8      	it	ge
 8000b64:	4613      	movge	r3, r2
 8000b66:	b21b      	sxth	r3, r3
 8000b68:	0fda      	lsrs	r2, r3, #31
 8000b6a:	4413      	add	r3, r2
 8000b6c:	105b      	asrs	r3, r3, #1
 8000b6e:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8000b70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000b74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	dd01      	ble.n	8000b80 <drawRoundRect+0x46>
 8000b7c:	89fb      	ldrh	r3, [r7, #14]
 8000b7e:	843b      	strh	r3, [r7, #32]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 8000b80:	88fa      	ldrh	r2, [r7, #6]
 8000b82:	8c3b      	ldrh	r3, [r7, #32]
 8000b84:	4413      	add	r3, r2
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	b218      	sxth	r0, r3
 8000b8a:	887a      	ldrh	r2, [r7, #2]
 8000b8c:	8c3b      	ldrh	r3, [r7, #32]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000b9a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000b9e:	f7ff fc46 	bl	800042e <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8000ba2:	88fa      	ldrh	r2, [r7, #6]
 8000ba4:	8c3b      	ldrh	r3, [r7, #32]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	b218      	sxth	r0, r3
 8000bac:	88ba      	ldrh	r2, [r7, #4]
 8000bae:	883b      	ldrh	r3, [r7, #0]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	b219      	sxth	r1, r3
 8000bba:	887a      	ldrh	r2, [r7, #2]
 8000bbc:	8c3b      	ldrh	r3, [r7, #32]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	b21a      	sxth	r2, r3
 8000bc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000bca:	f7ff fc30 	bl	800042e <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 8000bce:	88ba      	ldrh	r2, [r7, #4]
 8000bd0:	8c3b      	ldrh	r3, [r7, #32]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	b219      	sxth	r1, r3
 8000bd8:	883a      	ldrh	r2, [r7, #0]
 8000bda:	8c3b      	ldrh	r3, [r7, #32]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	b21a      	sxth	r2, r3
 8000be6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000be8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000bec:	f7ff fbfa 	bl	80003e4 <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 8000bf0:	88fa      	ldrh	r2, [r7, #6]
 8000bf2:	887b      	ldrh	r3, [r7, #2]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	b218      	sxth	r0, r3
 8000bfe:	88ba      	ldrh	r2, [r7, #4]
 8000c00:	8c3b      	ldrh	r3, [r7, #32]
 8000c02:	4413      	add	r3, r2
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	b219      	sxth	r1, r3
 8000c08:	883a      	ldrh	r2, [r7, #0]
 8000c0a:	8c3b      	ldrh	r3, [r7, #32]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	b21a      	sxth	r2, r3
 8000c16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c18:	f7ff fbe4 	bl	80003e4 <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8000c1c:	88fa      	ldrh	r2, [r7, #6]
 8000c1e:	8c3b      	ldrh	r3, [r7, #32]
 8000c20:	4413      	add	r3, r2
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	b218      	sxth	r0, r3
 8000c26:	88ba      	ldrh	r2, [r7, #4]
 8000c28:	8c3b      	ldrh	r3, [r7, #32]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b219      	sxth	r1, r3
 8000c30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000c34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	2301      	movs	r3, #1
 8000c3a:	f7ff fd6b 	bl	8000714 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8000c3e:	88fa      	ldrh	r2, [r7, #6]
 8000c40:	887b      	ldrh	r3, [r7, #2]
 8000c42:	4413      	add	r3, r2
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	8c3b      	ldrh	r3, [r7, #32]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	b218      	sxth	r0, r3
 8000c52:	88ba      	ldrh	r2, [r7, #4]
 8000c54:	8c3b      	ldrh	r3, [r7, #32]
 8000c56:	4413      	add	r3, r2
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	b219      	sxth	r1, r3
 8000c5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000c60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	2302      	movs	r3, #2
 8000c66:	f7ff fd55 	bl	8000714 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8000c6a:	88fa      	ldrh	r2, [r7, #6]
 8000c6c:	887b      	ldrh	r3, [r7, #2]
 8000c6e:	4413      	add	r3, r2
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	8c3b      	ldrh	r3, [r7, #32]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	b218      	sxth	r0, r3
 8000c7e:	88ba      	ldrh	r2, [r7, #4]
 8000c80:	883b      	ldrh	r3, [r7, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	8c3b      	ldrh	r3, [r7, #32]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	b219      	sxth	r1, r3
 8000c92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000c96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	f7ff fd3a 	bl	8000714 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8000ca0:	88fa      	ldrh	r2, [r7, #6]
 8000ca2:	8c3b      	ldrh	r3, [r7, #32]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	b218      	sxth	r0, r3
 8000caa:	88ba      	ldrh	r2, [r7, #4]
 8000cac:	883b      	ldrh	r3, [r7, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	8c3b      	ldrh	r3, [r7, #32]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	b219      	sxth	r1, r3
 8000cbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000cc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2308      	movs	r3, #8
 8000cc8:	f7ff fd24 	bl	8000714 <drawCircleHelper>
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd90      	pop	{r4, r7, pc}

08000cd4 <fillRoundRect>:


void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b087      	sub	sp, #28
 8000cd8:	af02      	add	r7, sp, #8
 8000cda:	4604      	mov	r4, r0
 8000cdc:	4608      	mov	r0, r1
 8000cde:	4611      	mov	r1, r2
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	80fb      	strh	r3, [r7, #6]
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80bb      	strh	r3, [r7, #4]
 8000cea:	460b      	mov	r3, r1
 8000cec:	807b      	strh	r3, [r7, #2]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8000cf2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000cf6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	bfa8      	it	ge
 8000cfe:	4613      	movge	r3, r2
 8000d00:	b21b      	sxth	r3, r3
 8000d02:	0fda      	lsrs	r2, r3, #31
 8000d04:	4413      	add	r3, r2
 8000d06:	105b      	asrs	r3, r3, #1
 8000d08:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8000d0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000d0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	dd01      	ble.n	8000d1a <fillRoundRect+0x46>
 8000d16:	89fb      	ldrh	r3, [r7, #14]
 8000d18:	843b      	strh	r3, [r7, #32]
    // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 8000d1a:	88fa      	ldrh	r2, [r7, #6]
 8000d1c:	8c3b      	ldrh	r3, [r7, #32]
 8000d1e:	4413      	add	r3, r2
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	b218      	sxth	r0, r3
 8000d24:	887a      	ldrh	r2, [r7, #2]
 8000d26:	8c3b      	ldrh	r3, [r7, #32]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	b21a      	sxth	r2, r3
 8000d32:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000d36:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	4623      	mov	r3, r4
 8000d40:	f7ff fa7d 	bl	800023e <fillRect>
    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8000d44:	88fa      	ldrh	r2, [r7, #6]
 8000d46:	887b      	ldrh	r3, [r7, #2]
 8000d48:	4413      	add	r3, r2
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	8c3b      	ldrh	r3, [r7, #32]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	3b01      	subs	r3, #1
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	b218      	sxth	r0, r3
 8000d58:	88ba      	ldrh	r2, [r7, #4]
 8000d5a:	8c3b      	ldrh	r3, [r7, #32]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	b219      	sxth	r1, r3
 8000d62:	883a      	ldrh	r2, [r7, #0]
 8000d64:	8c3b      	ldrh	r3, [r7, #32]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8000d78:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000d7a:	9201      	str	r2, [sp, #4]
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2301      	movs	r3, #1
 8000d80:	4622      	mov	r2, r4
 8000d82:	f7ff fd9b 	bl	80008bc <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8000d86:	88fa      	ldrh	r2, [r7, #6]
 8000d88:	8c3b      	ldrh	r3, [r7, #32]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	b218      	sxth	r0, r3
 8000d90:	88ba      	ldrh	r2, [r7, #4]
 8000d92:	8c3b      	ldrh	r3, [r7, #32]
 8000d94:	4413      	add	r3, r2
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	b219      	sxth	r1, r3
 8000d9a:	883a      	ldrh	r2, [r7, #0]
 8000d9c:	8c3b      	ldrh	r3, [r7, #32]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	3b01      	subs	r3, #1
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	b21b      	sxth	r3, r3
 8000dac:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8000db0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000db2:	9201      	str	r2, [sp, #4]
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2302      	movs	r3, #2
 8000db8:	4622      	mov	r2, r4
 8000dba:	f7ff fd7f 	bl	80008bc <fillCircleHelper>
}
 8000dbe:	bf00      	nop
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd90      	pop	{r4, r7, pc}

08000dc6 <drawTriangle>:


void drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8000dc6:	b590      	push	{r4, r7, lr}
 8000dc8:	b085      	sub	sp, #20
 8000dca:	af02      	add	r7, sp, #8
 8000dcc:	4604      	mov	r4, r0
 8000dce:	4608      	mov	r0, r1
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4623      	mov	r3, r4
 8000dd6:	80fb      	strh	r3, [r7, #6]
 8000dd8:	4603      	mov	r3, r0
 8000dda:	80bb      	strh	r3, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	807b      	strh	r3, [r7, #2]
 8000de0:	4613      	mov	r3, r2
 8000de2:	803b      	strh	r3, [r7, #0]
    drawLine(x0, y0, x1, y1, color);
 8000de4:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000de8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000dec:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000df0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000df4:	8c3b      	ldrh	r3, [r7, #32]
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	4623      	mov	r3, r4
 8000dfa:	f7ff fb3d 	bl	8000478 <drawLine>
    drawLine(x1, y1, x2, y2, color);
 8000dfe:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8000e02:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000e06:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000e0a:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000e0e:	8c3b      	ldrh	r3, [r7, #32]
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	4623      	mov	r3, r4
 8000e14:	f7ff fb30 	bl	8000478 <drawLine>
    drawLine(x2, y2, x0, y0, color);
 8000e18:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000e1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e20:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8000e24:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8000e28:	8c3b      	ldrh	r3, [r7, #32]
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	4623      	mov	r3, r4
 8000e2e:	f7ff fb23 	bl	8000478 <drawLine>
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd90      	pop	{r4, r7, pc}

08000e3a <fillTriangle>:


void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8000e3a:	b590      	push	{r4, r7, lr}
 8000e3c:	b08f      	sub	sp, #60	@ 0x3c
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4604      	mov	r4, r0
 8000e42:	4608      	mov	r0, r1
 8000e44:	4611      	mov	r1, r2
 8000e46:	461a      	mov	r2, r3
 8000e48:	4623      	mov	r3, r4
 8000e4a:	80fb      	strh	r3, [r7, #6]
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	80bb      	strh	r3, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	807b      	strh	r3, [r7, #2]
 8000e54:	4613      	mov	r3, r2
 8000e56:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8000e58:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e5c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dd0b      	ble.n	8000e7c <fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8000e64:	88bb      	ldrh	r3, [r7, #4]
 8000e66:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000e68:	883b      	ldrh	r3, [r7, #0]
 8000e6a:	80bb      	strh	r3, [r7, #4]
 8000e6c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e6e:	803b      	strh	r3, [r7, #0]
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	80fb      	strh	r3, [r7, #6]
 8000e78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000e7a:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8000e7c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e80:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dd0f      	ble.n	8000ea8 <fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8000e88:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000e8c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000e8e:	883b      	ldrh	r3, [r7, #0]
 8000e90:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8000e94:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000e96:	803b      	strh	r3, [r7, #0]
 8000e98:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000e9c:	843b      	strh	r3, [r7, #32]
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8000ea4:	8c3b      	ldrh	r3, [r7, #32]
 8000ea6:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8000ea8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000eac:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	dd0b      	ble.n	8000ecc <fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8000eb4:	88bb      	ldrh	r3, [r7, #4]
 8000eb6:	83fb      	strh	r3, [r7, #30]
 8000eb8:	883b      	ldrh	r3, [r7, #0]
 8000eba:	80bb      	strh	r3, [r7, #4]
 8000ebc:	8bfb      	ldrh	r3, [r7, #30]
 8000ebe:	803b      	strh	r3, [r7, #0]
 8000ec0:	88fb      	ldrh	r3, [r7, #6]
 8000ec2:	83bb      	strh	r3, [r7, #28]
 8000ec4:	887b      	ldrh	r3, [r7, #2]
 8000ec6:	80fb      	strh	r3, [r7, #6]
 8000ec8:	8bbb      	ldrh	r3, [r7, #28]
 8000eca:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8000ecc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ed0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d137      	bne.n	8000f48 <fillTriangle+0x10e>
        a = b = x0;
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8000edc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000ede:	86fb      	strh	r3, [r7, #54]	@ 0x36
        if(x1 < a)      a = x1;
 8000ee0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000ee4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	da02      	bge.n	8000ef2 <fillTriangle+0xb8>
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8000ef0:	e007      	b.n	8000f02 <fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8000ef2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000ef6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8000efa:	429a      	cmp	r2, r3
 8000efc:	dd01      	ble.n	8000f02 <fillTriangle+0xc8>
 8000efe:	887b      	ldrh	r3, [r7, #2]
 8000f00:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if(x2 < a)      a = x2;
 8000f02:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8000f06:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	da03      	bge.n	8000f16 <fillTriangle+0xdc>
 8000f0e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000f12:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8000f14:	e008      	b.n	8000f28 <fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8000f16:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8000f1a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	dd02      	ble.n	8000f28 <fillTriangle+0xee>
 8000f22:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000f26:	86bb      	strh	r3, [r7, #52]	@ 0x34
        drawFastHLine(a, y0, b-a+1, color);
 8000f28:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8000f2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	3301      	adds	r3, #1
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	b21a      	sxth	r2, r3
 8000f36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000f3a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000f3e:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8000f42:	f7ff fa74 	bl	800042e <drawFastHLine>
        return;
 8000f46:	e0d4      	b.n	80010f2 <fillTriangle+0x2b8>
    }

    int16_t
    dx01 = x1 - x0,
 8000f48:	887a      	ldrh	r2, [r7, #2]
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8000f52:	883a      	ldrh	r2, [r7, #0]
 8000f54:	88bb      	ldrh	r3, [r7, #4]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8000f5c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8000f68:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8000f6c:	88bb      	ldrh	r3, [r7, #4]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8000f74:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8000f78:	887b      	ldrh	r3, [r7, #2]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8000f80:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8000f84:	883b      	ldrh	r3, [r7, #0]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb   = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8000f94:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000f98:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d102      	bne.n	8000fa6 <fillTriangle+0x16c>
 8000fa0:	883b      	ldrh	r3, [r7, #0]
 8000fa2:	863b      	strh	r3, [r7, #48]	@ 0x30
 8000fa4:	e003      	b.n	8000fae <fillTriangle+0x174>
    else         last = y1-1; // Skip it
 8000fa6:	883b      	ldrh	r3, [r7, #0]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	863b      	strh	r3, [r7, #48]	@ 0x30

    for(y=y0; y<=last; y++) {
 8000fae:	88bb      	ldrh	r3, [r7, #4]
 8000fb0:	867b      	strh	r3, [r7, #50]	@ 0x32
 8000fb2:	e03e      	b.n	8001032 <fillTriangle+0x1f8>
        a   = x0 + sa / dy01;
 8000fb4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000fb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fba:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        b   = x0 + sb / dy02;
 8000fc8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000fcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000fce:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	86bb      	strh	r3, [r7, #52]	@ 0x34
        sa += dx01;
 8000fdc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fe0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fe2:	4413      	add	r3, r2
 8000fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sb += dx02;
 8000fe6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000fec:	4413      	add	r3, r2
 8000fee:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8000ff0:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8000ff4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	dd05      	ble.n	8001008 <fillTriangle+0x1ce>
 8000ffc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000ffe:	81bb      	strh	r3, [r7, #12]
 8001000:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001002:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001004:	89bb      	ldrh	r3, [r7, #12]
 8001006:	86bb      	strh	r3, [r7, #52]	@ 0x34
        drawFastHLine(a, y, b-a+1, color);
 8001008:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800100a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	b29b      	uxth	r3, r3
 8001010:	3301      	adds	r3, #1
 8001012:	b29b      	uxth	r3, r3
 8001014:	b21a      	sxth	r2, r3
 8001016:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800101a:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 800101e:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8001022:	f7ff fa04 	bl	800042e <drawFastHLine>
    for(y=y0; y<=last; y++) {
 8001026:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800102a:	b29b      	uxth	r3, r3
 800102c:	3301      	adds	r3, #1
 800102e:	b29b      	uxth	r3, r3
 8001030:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001032:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 8001036:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800103a:	429a      	cmp	r2, r3
 800103c:	ddba      	ble.n	8000fb4 <fillTriangle+0x17a>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 800103e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001042:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8001046:	f9b7 2000 	ldrsh.w	r2, [r7]
 800104a:	1a8a      	subs	r2, r1, r2
 800104c:	fb02 f303 	mul.w	r3, r2, r3
 8001050:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8001052:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001056:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 800105a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800105e:	1a8a      	subs	r2, r1, r2
 8001060:	fb02 f303 	mul.w	r3, r2, r3
 8001064:	62bb      	str	r3, [r7, #40]	@ 0x28
    for(; y<=y2; y++) {
 8001066:	e03e      	b.n	80010e6 <fillTriangle+0x2ac>
        a   = x1 + sa / dy12;
 8001068:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800106c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800106e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001072:	b29a      	uxth	r2, r3
 8001074:	887b      	ldrh	r3, [r7, #2]
 8001076:	4413      	add	r3, r2
 8001078:	b29b      	uxth	r3, r3
 800107a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        b   = x0 + sb / dy02;
 800107c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001080:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001082:	fb92 f3f3 	sdiv	r3, r2, r3
 8001086:	b29a      	uxth	r2, r3
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	4413      	add	r3, r2
 800108c:	b29b      	uxth	r3, r3
 800108e:	86bb      	strh	r3, [r7, #52]	@ 0x34
        sa += dx12;
 8001090:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001094:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001096:	4413      	add	r3, r2
 8001098:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sb += dx02;
 800109a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800109e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010a0:	4413      	add	r3, r2
 80010a2:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80010a4:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 80010a8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80010ac:	429a      	cmp	r2, r3
 80010ae:	dd05      	ble.n	80010bc <fillTriangle+0x282>
 80010b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80010b2:	81fb      	strh	r3, [r7, #14]
 80010b4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80010b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80010b8:	89fb      	ldrh	r3, [r7, #14]
 80010ba:	86bb      	strh	r3, [r7, #52]	@ 0x34
        drawFastHLine(a, y, b-a+1, color);
 80010bc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80010be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	3301      	adds	r3, #1
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80010ce:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 80010d2:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 80010d6:	f7ff f9aa 	bl	800042e <drawFastHLine>
    for(; y<=y2; y++) {
 80010da:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80010de:	b29b      	uxth	r3, r3
 80010e0:	3301      	adds	r3, #1
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	867b      	strh	r3, [r7, #50]	@ 0x32
 80010e6:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 80010ea:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80010ee:	429a      	cmp	r2, r3
 80010f0:	ddba      	ble.n	8001068 <fillTriangle+0x22e>
    }
}
 80010f2:	373c      	adds	r7, #60	@ 0x3c
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd90      	pop	{r4, r7, pc}

080010f8 <fillScreen>:

void fillScreen(uint16_t color) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8001102:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <fillScreen+0x2c>)
 8001104:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001108:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <fillScreen+0x30>)
 800110a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	460b      	mov	r3, r1
 8001114:	2100      	movs	r1, #0
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff f891 	bl	800023e <fillRect>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000028 	.word	0x20000028
 8001128:	2000002a 	.word	0x2000002a

0800112c <testLines>:



void testLines(uint16_t color)
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b08b      	sub	sp, #44	@ 0x2c
 8001130:	af02      	add	r7, sp, #8
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 8001136:	4b7c      	ldr	r3, [pc, #496]	@ (8001328 <testLines+0x1fc>)
 8001138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113c:	617b      	str	r3, [r7, #20]
                  h = _height;
 800113e:	4b7b      	ldr	r3, [pc, #492]	@ (800132c <testLines+0x200>)
 8001140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001144:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 8001146:	2000      	movs	r0, #0
 8001148:	f7ff ffd6 	bl	80010f8 <fillScreen>

    x1 = y1 = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	3b01      	subs	r3, #1
 8001158:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
 800115e:	e00f      	b.n	8001180 <testLines+0x54>
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	b218      	sxth	r0, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	b219      	sxth	r1, r3
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	b21a      	sxth	r2, r3
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	b21c      	sxth	r4, r3
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	4623      	mov	r3, r4
 8001176:	f7ff f97f 	bl	8000478 <drawLine>
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3306      	adds	r3, #6
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	429a      	cmp	r2, r3
 8001186:	dbeb      	blt.n	8001160 <testLines+0x34>
    x2    = w - 1;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3b01      	subs	r3, #1
 800118c:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
 8001192:	e00f      	b.n	80011b4 <testLines+0x88>
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	b218      	sxth	r0, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	b219      	sxth	r1, r3
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	b21a      	sxth	r2, r3
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	b21c      	sxth	r4, r3
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	4623      	mov	r3, r4
 80011aa:	f7ff f965 	bl	8000478 <drawLine>
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	3306      	adds	r3, #6
 80011b2:	61bb      	str	r3, [r7, #24]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	dbeb      	blt.n	8001194 <testLines+0x68>

    fillScreen(BLACK);
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff ff9b 	bl	80010f8 <fillScreen>

    x1    = w - 1;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	e00f      	b.n	80011f8 <testLines+0xcc>
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	b218      	sxth	r0, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	b219      	sxth	r1, r3
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	b21c      	sxth	r4, r3
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	4623      	mov	r3, r4
 80011ee:	f7ff f943 	bl	8000478 <drawLine>
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3306      	adds	r3, #6
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	dbeb      	blt.n	80011d8 <testLines+0xac>
    x2    = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
 8001208:	e00f      	b.n	800122a <testLines+0xfe>
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	b218      	sxth	r0, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	b219      	sxth	r1, r3
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	b21a      	sxth	r2, r3
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	b21c      	sxth	r4, r3
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	4623      	mov	r3, r4
 8001220:	f7ff f92a 	bl	8000478 <drawLine>
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	3306      	adds	r3, #6
 8001228:	61bb      	str	r3, [r7, #24]
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	429a      	cmp	r2, r3
 8001230:	dbeb      	blt.n	800120a <testLines+0xde>

    fillScreen(BLACK);
 8001232:	2000      	movs	r0, #0
 8001234:	f7ff ff60 	bl	80010f8 <fillScreen>

    x1    = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	3b01      	subs	r3, #1
 8001240:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
 800124a:	e00f      	b.n	800126c <testLines+0x140>
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	b218      	sxth	r0, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	b219      	sxth	r1, r3
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	b21a      	sxth	r2, r3
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	b21c      	sxth	r4, r3
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	4623      	mov	r3, r4
 8001262:	f7ff f909 	bl	8000478 <drawLine>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3306      	adds	r3, #6
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbeb      	blt.n	800124c <testLines+0x120>
    x2    = w - 1;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	3b01      	subs	r3, #1
 8001278:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	e00f      	b.n	80012a0 <testLines+0x174>
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	b218      	sxth	r0, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	b219      	sxth	r1, r3
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	b21a      	sxth	r2, r3
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	b21c      	sxth	r4, r3
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	4623      	mov	r3, r4
 8001296:	f7ff f8ef 	bl	8000478 <drawLine>
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	3306      	adds	r3, #6
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	dbeb      	blt.n	8001280 <testLines+0x154>

    fillScreen(BLACK);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff ff25 	bl	80010f8 <fillScreen>

    x1    = w - 1;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
 80012c2:	e00f      	b.n	80012e4 <testLines+0x1b8>
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	b218      	sxth	r0, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	b219      	sxth	r1, r3
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	b21a      	sxth	r2, r3
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	b21c      	sxth	r4, r3
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	4623      	mov	r3, r4
 80012da:	f7ff f8cd 	bl	8000478 <drawLine>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3306      	adds	r3, #6
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	69fa      	ldr	r2, [r7, #28]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbeb      	blt.n	80012c4 <testLines+0x198>
    x2    = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 80012f0:	2300      	movs	r3, #0
 80012f2:	61bb      	str	r3, [r7, #24]
 80012f4:	e00f      	b.n	8001316 <testLines+0x1ea>
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	b218      	sxth	r0, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	b219      	sxth	r1, r3
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	b21a      	sxth	r2, r3
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	b21c      	sxth	r4, r3
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	4623      	mov	r3, r4
 800130c:	f7ff f8b4 	bl	8000478 <drawLine>
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	3306      	adds	r3, #6
 8001314:	61bb      	str	r3, [r7, #24]
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	429a      	cmp	r2, r3
 800131c:	dbeb      	blt.n	80012f6 <testLines+0x1ca>

}
 800131e:	bf00      	nop
 8001320:	bf00      	nop
 8001322:	3724      	adds	r7, #36	@ 0x24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd90      	pop	{r4, r7, pc}
 8001328:	20000028 	.word	0x20000028
 800132c:	2000002a 	.word	0x2000002a

08001330 <testFastLines>:

void testFastLines(uint16_t color1, uint16_t color2)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	460a      	mov	r2, r1
 800133a:	80fb      	strh	r3, [r7, #6]
 800133c:	4613      	mov	r3, r2
 800133e:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 8001340:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <testFastLines+0x78>)
 8001342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <testFastLines+0x7c>)
 800134a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134e:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff fed1 	bl	80010f8 <fillScreen>
    for (y = 0; y < h; y += 5) drawFastHLine(0, y, w, color1);
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	e00a      	b.n	8001372 <testFastLines+0x42>
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	b219      	sxth	r1, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	b21a      	sxth	r2, r3
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff f861 	bl	800042e <drawFastHLine>
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	3305      	adds	r3, #5
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	429a      	cmp	r2, r3
 8001378:	dbf0      	blt.n	800135c <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) drawFastVLine(x, 0, h, color2);
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	e00a      	b.n	8001396 <testFastLines+0x66>
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	b218      	sxth	r0, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	b21a      	sxth	r2, r3
 8001388:	88bb      	ldrh	r3, [r7, #4]
 800138a:	2100      	movs	r1, #0
 800138c:	f7ff f82a 	bl	80003e4 <drawFastVLine>
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3305      	adds	r3, #5
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	429a      	cmp	r2, r3
 800139c:	dbf0      	blt.n	8001380 <testFastLines+0x50>
}
 800139e:	bf00      	nop
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000028 	.word	0x20000028
 80013ac:	2000002a 	.word	0x2000002a

080013b0 <testRects>:

void testRects(uint16_t color)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b08b      	sub	sp, #44	@ 0x2c
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	4603      	mov	r3, r0
 80013b8:	80fb      	strh	r3, [r7, #6]
    int           n, i, i2,
                  cx = _width  / 2,
 80013ba:	4b24      	ldr	r3, [pc, #144]	@ (800144c <testRects+0x9c>)
 80013bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c0:	0fda      	lsrs	r2, r3, #31
 80013c2:	4413      	add	r3, r2
 80013c4:	105b      	asrs	r3, r3, #1
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	61bb      	str	r3, [r7, #24]
                  cy = _height / 2;
 80013ca:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <testRects+0xa0>)
 80013cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d0:	0fda      	lsrs	r2, r3, #31
 80013d2:	4413      	add	r3, r2
 80013d4:	105b      	asrs	r3, r3, #1
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	617b      	str	r3, [r7, #20]

    fillScreen(BLACK);
 80013da:	2000      	movs	r0, #0
 80013dc:	f7ff fe8c 	bl	80010f8 <fillScreen>
    n     = min(_width, _height);
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <testRects+0xa0>)
 80013e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013e6:	4b19      	ldr	r3, [pc, #100]	@ (800144c <testRects+0x9c>)
 80013e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ec:	4293      	cmp	r3, r2
 80013ee:	bfa8      	it	ge
 80013f0:	4613      	movge	r3, r2
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	613b      	str	r3, [r7, #16]
    for (i = 2; i < n; i += 6) {
 80013f6:	2302      	movs	r3, #2
 80013f8:	61fb      	str	r3, [r7, #28]
 80013fa:	e01e      	b.n	800143a <testRects+0x8a>
        i2 = i / 2;
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	0fda      	lsrs	r2, r3, #31
 8001400:	4413      	add	r3, r2
 8001402:	105b      	asrs	r3, r3, #1
 8001404:	60fb      	str	r3, [r7, #12]
        drawRect(cx - i2, cy - i2, i, i, color);
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	b29a      	uxth	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	b29b      	uxth	r3, r3
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	b29b      	uxth	r3, r3
 8001412:	b218      	sxth	r0, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	b29a      	uxth	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	b29b      	uxth	r3, r3
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	b29b      	uxth	r3, r3
 8001420:	b219      	sxth	r1, r3
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	b21a      	sxth	r2, r3
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	b21c      	sxth	r4, r3
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	4623      	mov	r3, r4
 8001430:	f7ff fb42 	bl	8000ab8 <drawRect>
    for (i = 2; i < n; i += 6) {
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	3306      	adds	r3, #6
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	429a      	cmp	r2, r3
 8001440:	dbdc      	blt.n	80013fc <testRects+0x4c>
    }

}
 8001442:	bf00      	nop
 8001444:	bf00      	nop
 8001446:	3724      	adds	r7, #36	@ 0x24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd90      	pop	{r4, r7, pc}
 800144c:	20000028 	.word	0x20000028
 8001450:	2000002a 	.word	0x2000002a

08001454 <testFilledRects>:

void testFilledRects(uint16_t color1, uint16_t color2)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b08b      	sub	sp, #44	@ 0x2c
 8001458:	af02      	add	r7, sp, #8
 800145a:	4603      	mov	r3, r0
 800145c:	460a      	mov	r2, r1
 800145e:	80fb      	strh	r3, [r7, #6]
 8001460:	4613      	mov	r3, r2
 8001462:	80bb      	strh	r3, [r7, #4]
    int           n, i, i2,
                  cx = _width  / 2 - 1,
 8001464:	4b30      	ldr	r3, [pc, #192]	@ (8001528 <testFilledRects+0xd4>)
 8001466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146a:	0fda      	lsrs	r2, r3, #31
 800146c:	4413      	add	r3, r2
 800146e:	105b      	asrs	r3, r3, #1
 8001470:	b21b      	sxth	r3, r3
 8001472:	3b01      	subs	r3, #1
 8001474:	61bb      	str	r3, [r7, #24]
                  cy = _height / 2 - 1;
 8001476:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <testFilledRects+0xd8>)
 8001478:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147c:	0fda      	lsrs	r2, r3, #31
 800147e:	4413      	add	r3, r2
 8001480:	105b      	asrs	r3, r3, #1
 8001482:	b21b      	sxth	r3, r3
 8001484:	3b01      	subs	r3, #1
 8001486:	617b      	str	r3, [r7, #20]

    fillScreen(BLACK);
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff fe35 	bl	80010f8 <fillScreen>
    n = min(_width, _height);
 800148e:	4b27      	ldr	r3, [pc, #156]	@ (800152c <testFilledRects+0xd8>)
 8001490:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001494:	4b24      	ldr	r3, [pc, #144]	@ (8001528 <testFilledRects+0xd4>)
 8001496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149a:	4293      	cmp	r3, r2
 800149c:	bfa8      	it	ge
 800149e:	4613      	movge	r3, r2
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	613b      	str	r3, [r7, #16]
    for (i = n; i > 0; i -= 6) {
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	e035      	b.n	8001516 <testFilledRects+0xc2>
        i2    = i / 2;
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	0fda      	lsrs	r2, r3, #31
 80014ae:	4413      	add	r3, r2
 80014b0:	105b      	asrs	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]

        fillRect(cx - i2, cy - i2, i, i, color1);
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	b29b      	uxth	r3, r3
 80014c0:	b218      	sxth	r0, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	b219      	sxth	r1, r3
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	b21c      	sxth	r4, r3
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	4623      	mov	r3, r4
 80014de:	f7fe feae 	bl	800023e <fillRect>

        drawRect(cx - i2, cy - i2, i, i, color2);
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	b218      	sxth	r0, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	b219      	sxth	r1, r3
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	b21a      	sxth	r2, r3
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	b21c      	sxth	r4, r3
 8001506:	88bb      	ldrh	r3, [r7, #4]
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	4623      	mov	r3, r4
 800150c:	f7ff fad4 	bl	8000ab8 <drawRect>
    for (i = n; i > 0; i -= 6) {
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	3b06      	subs	r3, #6
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	2b00      	cmp	r3, #0
 800151a:	dcc6      	bgt.n	80014aa <testFilledRects+0x56>
    }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3724      	adds	r7, #36	@ 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd90      	pop	{r4, r7, pc}
 8001526:	bf00      	nop
 8001528:	20000028 	.word	0x20000028
 800152c:	2000002a 	.word	0x2000002a

08001530 <testFilledCircles>:

void testFilledCircles(uint8_t radius, uint16_t color)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	460a      	mov	r2, r1
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	4613      	mov	r3, r2
 800153e:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 8001540:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <testFilledCircles+0x74>)
 8001542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <testFilledCircles+0x78>)
 800154a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	60fb      	str	r3, [r7, #12]

    fillScreen(BLACK);
 8001556:	2000      	movs	r0, #0
 8001558:	f7ff fdce 	bl	80010f8 <fillScreen>
    for (x = radius; x < w; x += r2) {
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	e017      	b.n	8001592 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	61bb      	str	r3, [r7, #24]
 8001566:	e00c      	b.n	8001582 <testFilledCircles+0x52>
            fillCircle(x, y, radius, color);
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	b218      	sxth	r0, r3
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	b219      	sxth	r1, r3
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	b21a      	sxth	r2, r3
 8001574:	88bb      	ldrh	r3, [r7, #4]
 8001576:	f7ff fa6f 	bl	8000a58 <fillCircle>
        for (y = radius; y < h; y += r2) {
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	429a      	cmp	r2, r3
 8001588:	dbee      	blt.n	8001568 <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	429a      	cmp	r2, r3
 8001598:	dbe3      	blt.n	8001562 <testFilledCircles+0x32>
        }
    }

}
 800159a:	bf00      	nop
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000028 	.word	0x20000028
 80015a8:	2000002a 	.word	0x2000002a

080015ac <testCircles>:

void testCircles(uint8_t radius, uint16_t color)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	460a      	mov	r2, r1
 80015b6:	71fb      	strb	r3, [r7, #7]
 80015b8:	4613      	mov	r3, r2
 80015ba:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 80015c2:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <testCircles+0x7c>)
 80015c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c8:	461a      	mov	r2, r3
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	4413      	add	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 80015d0:	4b16      	ldr	r3, [pc, #88]	@ (800162c <testCircles+0x80>)
 80015d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d6:	461a      	mov	r2, r3
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]

    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
 80015e2:	e017      	b.n	8001614 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	e00c      	b.n	8001604 <testCircles+0x58>
            drawCircle(x, y, radius, color);
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	b218      	sxth	r0, r3
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	b219      	sxth	r1, r3
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	88bb      	ldrh	r3, [r7, #4]
 80015f8:	f7fe ffa0 	bl	800053c <drawCircle>
        for (y = 0; y < h; y += r2) {
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	4413      	add	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	429a      	cmp	r2, r3
 800160a:	dbee      	blt.n	80015ea <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 800160c:	69fa      	ldr	r2, [r7, #28]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	4413      	add	r3, r2
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	69fa      	ldr	r2, [r7, #28]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	dbe3      	blt.n	80015e4 <testCircles+0x38>
        }
    }

}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3720      	adds	r7, #32
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000028 	.word	0x20000028
 800162c:	2000002a 	.word	0x2000002a

08001630 <testTriangles>:

void testTriangles()
{
 8001630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001632:	b089      	sub	sp, #36	@ 0x24
 8001634:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 8001636:	4b2e      	ldr	r3, [pc, #184]	@ (80016f0 <testTriangles+0xc0>)
 8001638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163c:	0fda      	lsrs	r2, r3, #31
 800163e:	4413      	add	r3, r2
 8001640:	105b      	asrs	r3, r3, #1
 8001642:	b21b      	sxth	r3, r3
 8001644:	3b01      	subs	r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 8001648:	4b2a      	ldr	r3, [pc, #168]	@ (80016f4 <testTriangles+0xc4>)
 800164a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164e:	0fda      	lsrs	r2, r3, #31
 8001650:	4413      	add	r3, r2
 8001652:	105b      	asrs	r3, r3, #1
 8001654:	b21b      	sxth	r3, r3
 8001656:	3b01      	subs	r3, #1
 8001658:	607b      	str	r3, [r7, #4]

    fillScreen(BLACK);
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff fd4c 	bl	80010f8 <fillScreen>
    n     = min(cx, cy);
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	4293      	cmp	r3, r2
 8001666:	bfa8      	it	ge
 8001668:	4613      	movge	r3, r2
 800166a:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	e035      	b.n	80016de <testTriangles+0xae>
        drawTriangle(
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	b29a      	uxth	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	b29b      	uxth	r3, r3
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	b29b      	uxth	r3, r3
        drawTriangle(
 8001682:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	b29a      	uxth	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	b29b      	uxth	r3, r3
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	b29b      	uxth	r3, r3
        drawTriangle(
 8001690:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	b29a      	uxth	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	b29b      	uxth	r3, r3
 800169a:	4413      	add	r3, r2
 800169c:	b29b      	uxth	r3, r3
        drawTriangle(
 800169e:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	b29b      	uxth	r3, r3
        drawTriangle(
 80016ac:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	b291      	uxth	r1, r2
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	b292      	uxth	r2, r2
 80016b6:	440a      	add	r2, r1
 80016b8:	b292      	uxth	r2, r2
        drawTriangle(
 80016ba:	b212      	sxth	r2, r2
            color565(0, 0, i));
 80016bc:	68f9      	ldr	r1, [r7, #12]
 80016be:	10c9      	asrs	r1, r1, #3
 80016c0:	b289      	uxth	r1, r1
        drawTriangle(
 80016c2:	f001 011f 	and.w	r1, r1, #31
 80016c6:	b289      	uxth	r1, r1
 80016c8:	9102      	str	r1, [sp, #8]
 80016ca:	9201      	str	r2, [sp, #4]
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	4633      	mov	r3, r6
 80016d0:	462a      	mov	r2, r5
 80016d2:	4621      	mov	r1, r4
 80016d4:	f7ff fb77 	bl	8000dc6 <drawTriangle>
    for (i = 0; i < n; i += 5) {
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3305      	adds	r3, #5
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	dbc5      	blt.n	8001672 <testTriangles+0x42>
    }

}
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f0:	20000028 	.word	0x20000028
 80016f4:	2000002a 	.word	0x2000002a

080016f8 <testFilledTriangles>:

void testFilledTriangles() {
 80016f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fa:	b089      	sub	sp, #36	@ 0x24
 80016fc:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 80016fe:	4b53      	ldr	r3, [pc, #332]	@ (800184c <testFilledTriangles+0x154>)
 8001700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001704:	0fda      	lsrs	r2, r3, #31
 8001706:	4413      	add	r3, r2
 8001708:	105b      	asrs	r3, r3, #1
 800170a:	b21b      	sxth	r3, r3
 800170c:	3b01      	subs	r3, #1
 800170e:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 8001710:	4b4f      	ldr	r3, [pc, #316]	@ (8001850 <testFilledTriangles+0x158>)
 8001712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001716:	0fda      	lsrs	r2, r3, #31
 8001718:	4413      	add	r3, r2
 800171a:	105b      	asrs	r3, r3, #1
 800171c:	b21b      	sxth	r3, r3
 800171e:	3b01      	subs	r3, #1
 8001720:	607b      	str	r3, [r7, #4]

    fillScreen(BLACK);
 8001722:	2000      	movs	r0, #0
 8001724:	f7ff fce8 	bl	80010f8 <fillScreen>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	4293      	cmp	r3, r2
 800172e:	bfa8      	it	ge
 8001730:	4613      	movge	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	e080      	b.n	8001838 <testFilledTriangles+0x140>
    	fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	b21c      	sxth	r4, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	b29a      	uxth	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	b29b      	uxth	r3, r3
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	b29b      	uxth	r3, r3
 8001746:	b21d      	sxth	r5, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	b29a      	uxth	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	b29b      	uxth	r3, r3
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	b29b      	uxth	r3, r3
 8001754:	b21e      	sxth	r6, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	b29a      	uxth	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	b29b      	uxth	r3, r3
 800175e:	4413      	add	r3, r2
 8001760:	b29b      	uxth	r3, r3
 8001762:	fa0f fc83 	sxth.w	ip, r3
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	b29a      	uxth	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	b29b      	uxth	r3, r3
 800176e:	4413      	add	r3, r2
 8001770:	b29b      	uxth	r3, r3
 8001772:	b21b      	sxth	r3, r3
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	b291      	uxth	r1, r2
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	b292      	uxth	r2, r2
 800177c:	440a      	add	r2, r1
 800177e:	b292      	uxth	r2, r2
 8001780:	b212      	sxth	r2, r2
    	                         color565(0, i, i));
 8001782:	68f9      	ldr	r1, [r7, #12]
 8001784:	00c9      	lsls	r1, r1, #3
 8001786:	b209      	sxth	r1, r1
 8001788:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 800178c:	b208      	sxth	r0, r1
 800178e:	68f9      	ldr	r1, [r7, #12]
 8001790:	10c9      	asrs	r1, r1, #3
 8001792:	b209      	sxth	r1, r1
 8001794:	f001 011f 	and.w	r1, r1, #31
 8001798:	b209      	sxth	r1, r1
 800179a:	4301      	orrs	r1, r0
 800179c:	b209      	sxth	r1, r1
    	fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 800179e:	b289      	uxth	r1, r1
 80017a0:	9102      	str	r1, [sp, #8]
 80017a2:	9201      	str	r2, [sp, #4]
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	4663      	mov	r3, ip
 80017a8:	4632      	mov	r2, r6
 80017aa:	4629      	mov	r1, r5
 80017ac:	4620      	mov	r0, r4
 80017ae:	f7ff fb44 	bl	8000e3a <fillTriangle>
    	drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	b21c      	sxth	r4, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	b21d      	sxth	r5, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	b21e      	sxth	r6, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	4413      	add	r3, r2
 80017dc:	b29b      	uxth	r3, r3
 80017de:	fa0f fc83 	sxth.w	ip, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	4413      	add	r3, r2
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	b299      	uxth	r1, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	440b      	add	r3, r1
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	b219      	sxth	r1, r3
    	                         color565(i, i, 0));
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	021b      	lsls	r3, r3, #8
 8001802:	b21b      	sxth	r3, r3
 8001804:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001808:	f023 0307 	bic.w	r3, r3, #7
 800180c:	b218      	sxth	r0, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	b21b      	sxth	r3, r3
 8001814:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001818:	b21b      	sxth	r3, r3
 800181a:	4303      	orrs	r3, r0
 800181c:	b21b      	sxth	r3, r3
    	drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 800181e:	b29b      	uxth	r3, r3
 8001820:	9302      	str	r3, [sp, #8]
 8001822:	9101      	str	r1, [sp, #4]
 8001824:	9200      	str	r2, [sp, #0]
 8001826:	4663      	mov	r3, ip
 8001828:	4632      	mov	r2, r6
 800182a:	4629      	mov	r1, r5
 800182c:	4620      	mov	r0, r4
 800182e:	f7ff faca 	bl	8000dc6 <drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3b05      	subs	r3, #5
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2b0a      	cmp	r3, #10
 800183c:	f73f af7b 	bgt.w	8001736 <testFilledTriangles+0x3e>
    }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800184a:	bf00      	nop
 800184c:	20000028 	.word	0x20000028
 8001850:	2000002a 	.word	0x2000002a

08001854 <testRoundRects>:

void testRoundRects() {
 8001854:	b5b0      	push	{r4, r5, r7, lr}
 8001856:	b08a      	sub	sp, #40	@ 0x28
 8001858:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 800185a:	4b33      	ldr	r3, [pc, #204]	@ (8001928 <testRoundRects+0xd4>)
 800185c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001860:	0fda      	lsrs	r2, r3, #31
 8001862:	4413      	add	r3, r2
 8001864:	105b      	asrs	r3, r3, #1
 8001866:	b21b      	sxth	r3, r3
 8001868:	3b01      	subs	r3, #1
 800186a:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 800186c:	4b2f      	ldr	r3, [pc, #188]	@ (800192c <testRoundRects+0xd8>)
 800186e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001872:	0fda      	lsrs	r2, r3, #31
 8001874:	4413      	add	r3, r2
 8001876:	105b      	asrs	r3, r3, #1
 8001878:	b21b      	sxth	r3, r3
 800187a:	3b01      	subs	r3, #1
 800187c:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 800187e:	2000      	movs	r0, #0
 8001880:	f7ff fc3a 	bl	80010f8 <fillScreen>
    w     = min(_width, _height);
 8001884:	4b29      	ldr	r3, [pc, #164]	@ (800192c <testRoundRects+0xd8>)
 8001886:	f9b3 2000 	ldrsh.w	r2, [r3]
 800188a:	4b27      	ldr	r3, [pc, #156]	@ (8001928 <testRoundRects+0xd4>)
 800188c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001890:	4293      	cmp	r3, r2
 8001892:	bfa8      	it	ge
 8001894:	4613      	movge	r3, r2
 8001896:	b21b      	sxth	r3, r3
 8001898:	60fb      	str	r3, [r7, #12]
    red = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 800189e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80018a8:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	e031      	b.n	8001914 <testRoundRects+0xc0>
        i2 = i / 2;
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	0fda      	lsrs	r2, r3, #31
 80018b4:	4413      	add	r3, r2
 80018b6:	105b      	asrs	r3, r3, #1
 80018b8:	607b      	str	r3, [r7, #4]
        red += step;
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	4413      	add	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	b218      	sxth	r0, r3
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b219      	sxth	r1, r3
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	b21c      	sxth	r4, r3
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	b21d      	sxth	r5, r3
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da00      	bge.n	80018ee <testRoundRects+0x9a>
 80018ec:	3307      	adds	r3, #7
 80018ee:	10db      	asrs	r3, r3, #3
 80018f0:	b21a      	sxth	r2, r3
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80018fc:	f023 0307 	bic.w	r3, r3, #7
 8001900:	b29b      	uxth	r3, r3
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	9200      	str	r2, [sp, #0]
 8001906:	462b      	mov	r3, r5
 8001908:	4622      	mov	r2, r4
 800190a:	f7ff f916 	bl	8000b3a <drawRoundRect>
    for (i = 0; i < w; i += 6) {
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3306      	adds	r3, #6
 8001912:	61fb      	str	r3, [r7, #28]
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	dbc9      	blt.n	80018b0 <testRoundRects+0x5c>
    }

}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3720      	adds	r7, #32
 8001922:	46bd      	mov	sp, r7
 8001924:	bdb0      	pop	{r4, r5, r7, pc}
 8001926:	bf00      	nop
 8001928:	20000028 	.word	0x20000028
 800192c:	2000002a 	.word	0x2000002a

08001930 <testFilledRoundRects>:

void testFilledRoundRects() {
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 8001936:	4b36      	ldr	r3, [pc, #216]	@ (8001a10 <testFilledRoundRects+0xe0>)
 8001938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193c:	0fda      	lsrs	r2, r3, #31
 800193e:	4413      	add	r3, r2
 8001940:	105b      	asrs	r3, r3, #1
 8001942:	b21b      	sxth	r3, r3
 8001944:	3b01      	subs	r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 8001948:	4b32      	ldr	r3, [pc, #200]	@ (8001a14 <testFilledRoundRects+0xe4>)
 800194a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194e:	0fda      	lsrs	r2, r3, #31
 8001950:	4413      	add	r3, r2
 8001952:	105b      	asrs	r3, r3, #1
 8001954:	b21b      	sxth	r3, r3
 8001956:	3b01      	subs	r3, #1
 8001958:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff fbcc 	bl	80010f8 <fillScreen>
    green = 256;
 8001960:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001964:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 8001966:	4b2b      	ldr	r3, [pc, #172]	@ (8001a14 <testFilledRoundRects+0xe4>)
 8001968:	f9b3 2000 	ldrsh.w	r2, [r3]
 800196c:	4b28      	ldr	r3, [pc, #160]	@ (8001a10 <testFilledRoundRects+0xe0>)
 800196e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001972:	4293      	cmp	r3, r2
 8001974:	bfa8      	it	ge
 8001976:	4613      	movge	r3, r2
 8001978:	b21b      	sxth	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001980:	fb93 f3f2 	sdiv	r3, r3, r2
 8001984:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 8001986:	4b23      	ldr	r3, [pc, #140]	@ (8001a14 <testFilledRoundRects+0xe4>)
 8001988:	f9b3 2000 	ldrsh.w	r2, [r3]
 800198c:	4b20      	ldr	r3, [pc, #128]	@ (8001a10 <testFilledRoundRects+0xe0>)
 800198e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001992:	4293      	cmp	r3, r2
 8001994:	bfa8      	it	ge
 8001996:	4613      	movge	r3, r2
 8001998:	b21b      	sxth	r3, r3
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	e02f      	b.n	80019fe <testFilledRoundRects+0xce>
        i2 = i / 2;
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	0fda      	lsrs	r2, r3, #31
 80019a2:	4413      	add	r3, r2
 80019a4:	105b      	asrs	r3, r3, #1
 80019a6:	603b      	str	r3, [r7, #0]
        green -= step;
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	613b      	str	r3, [r7, #16]
        fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	b218      	sxth	r0, r3
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	b219      	sxth	r1, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	b21c      	sxth	r4, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	b21d      	sxth	r5, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	da00      	bge.n	80019dc <testFilledRoundRects+0xac>
 80019da:	3307      	adds	r3, #7
 80019dc:	10db      	asrs	r3, r3, #3
 80019de:	b21b      	sxth	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	00d2      	lsls	r2, r2, #3
 80019e4:	b292      	uxth	r2, r2
 80019e6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80019ea:	b292      	uxth	r2, r2
 80019ec:	9201      	str	r2, [sp, #4]
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	462b      	mov	r3, r5
 80019f2:	4622      	mov	r2, r4
 80019f4:	f7ff f96e 	bl	8000cd4 <fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3b06      	subs	r3, #6
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2b14      	cmp	r3, #20
 8001a02:	dccc      	bgt.n	800199e <testFilledRoundRects+0x6e>
    }

}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000028 	.word	0x20000028
 8001a14:	2000002a 	.word	0x2000002a

08001a18 <testFillScreen>:
void testFillScreen()
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
    fillScreen(BLACK);
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7ff fb6b 	bl	80010f8 <fillScreen>
    fillScreen(RED);
 8001a22:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001a26:	f7ff fb67 	bl	80010f8 <fillScreen>
    fillScreen(GREEN);
 8001a2a:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8001a2e:	f7ff fb63 	bl	80010f8 <fillScreen>
    fillScreen(BLUE);
 8001a32:	201f      	movs	r0, #31
 8001a34:	f7ff fb60 	bl	80010f8 <fillScreen>
    fillScreen(BLACK);
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f7ff fb5d 	bl	80010f8 <fillScreen>
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <testAll>:

void testAll (void)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	af00      	add	r7, sp, #0
	testFillScreen();
 8001a46:	f7ff ffe7 	bl	8001a18 <testFillScreen>
	testLines(CYAN);
 8001a4a:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8001a4e:	f7ff fb6d 	bl	800112c <testLines>
	testFastLines(RED, BLUE);
 8001a52:	211f      	movs	r1, #31
 8001a54:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001a58:	f7ff fc6a 	bl	8001330 <testFastLines>
	testRects(GREEN);
 8001a5c:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8001a60:	f7ff fca6 	bl	80013b0 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 8001a64:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 8001a68:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8001a6c:	f7ff fcf2 	bl	8001454 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 8001a70:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 8001a74:	200a      	movs	r0, #10
 8001a76:	f7ff fd5b 	bl	8001530 <testFilledCircles>
	testCircles(10, WHITE);
 8001a7a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001a7e:	200a      	movs	r0, #10
 8001a80:	f7ff fd94 	bl	80015ac <testCircles>
	testTriangles();
 8001a84:	f7ff fdd4 	bl	8001630 <testTriangles>
	testFilledTriangles();
 8001a88:	f7ff fe36 	bl	80016f8 <testFilledTriangles>
	testRoundRects();
 8001a8c:	f7ff fee2 	bl	8001854 <testRoundRects>
	testFilledRoundRects();
 8001a90:	f7ff ff4e 	bl	8001930 <testFilledRoundRects>
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001aa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aa6:	f000 ff2f 	bl	8002908 <HAL_GPIO_WritePin>
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}

08001aae <ST7735_Unselect>:

void ST7735_Unselect()
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ab8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001abc:	f000 ff24 	bl	8002908 <HAL_GPIO_WritePin>
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <ST7735_Reset>:

void ST7735_Reset()
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2140      	movs	r1, #64	@ 0x40
 8001acc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ad0:	f000 ff1a 	bl	8002908 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001ad4:	2005      	movs	r0, #5
 8001ad6:	f000 fc8f 	bl	80023f8 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8001ada:	2201      	movs	r2, #1
 8001adc:	2140      	movs	r1, #64	@ 0x40
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae2:	f000 ff11 	bl	8002908 <HAL_GPIO_WritePin>
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001afc:	4806      	ldr	r0, [pc, #24]	@ (8001b18 <ST7735_WriteCommand+0x2c>)
 8001afe:	f000 ff03 	bl	8002908 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001b02:	1df9      	adds	r1, r7, #7
 8001b04:	f04f 33ff 	mov.w	r3, #4294967295
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4804      	ldr	r0, [pc, #16]	@ (8001b1c <ST7735_WriteCommand+0x30>)
 8001b0c:	f001 fd69 	bl	80035e2 <HAL_SPI_Transmit>
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	48000400 	.word	0x48000400
 8001b1c:	20000034 	.word	0x20000034

08001b20 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b30:	4807      	ldr	r0, [pc, #28]	@ (8001b50 <ST7735_WriteData+0x30>)
 8001b32:	f000 fee9 	bl	8002908 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4804      	ldr	r0, [pc, #16]	@ (8001b54 <ST7735_WriteData+0x34>)
 8001b42:	f001 fd4e 	bl	80035e2 <HAL_SPI_Transmit>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	48000400 	.word	0x48000400
 8001b54:	20000034 	.word	0x20000034

08001b58 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001b6a:	e034      	b.n	8001bd6 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001b76:	7afb      	ldrb	r3, [r7, #11]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ffb7 	bl	8001aec <ST7735_WriteCommand>

        numArgs = *addr++;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001b88:	7abb      	ldrb	r3, [r7, #10]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b90:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001b92:	7abb      	ldrb	r3, [r7, #10]
 8001b94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b98:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001b9a:	7abb      	ldrb	r3, [r7, #10]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001ba0:	7abb      	ldrb	r3, [r7, #10]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ffbb 	bl	8001b20 <ST7735_WriteData>
            addr += numArgs;
 8001baa:	7abb      	ldrb	r3, [r7, #10]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001bb2:	89bb      	ldrh	r3, [r7, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00e      	beq.n	8001bd6 <DisplayInit+0x7e>
            ms = *addr++;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	1c5a      	adds	r2, r3, #1
 8001bbc:	607a      	str	r2, [r7, #4]
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001bc2:	89bb      	ldrh	r3, [r7, #12]
 8001bc4:	2bff      	cmp	r3, #255	@ 0xff
 8001bc6:	d102      	bne.n	8001bce <DisplayInit+0x76>
 8001bc8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001bcc:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001bce:	89bb      	ldrh	r3, [r7, #12]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 fc11 	bl	80023f8 <HAL_Delay>
    while(numCommands--) {
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	1e5a      	subs	r2, r3, #1
 8001bda:	73fa      	strb	r2, [r7, #15]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1c5      	bne.n	8001b6c <DisplayInit+0x14>
        }
    }
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	4608      	mov	r0, r1
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4623      	mov	r3, r4
 8001bfc:	71fb      	strb	r3, [r7, #7]
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71bb      	strb	r3, [r7, #6]
 8001c02:	460b      	mov	r3, r1
 8001c04:	717b      	strb	r3, [r7, #5]
 8001c06:	4613      	mov	r3, r2
 8001c08:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001c0a:	202a      	movs	r0, #42	@ 0x2a
 8001c0c:	f7ff ff6e 	bl	8001aec <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8001c10:	2300      	movs	r3, #0
 8001c12:	733b      	strb	r3, [r7, #12]
 8001c14:	4b17      	ldr	r3, [pc, #92]	@ (8001c74 <ST7735_SetAddressWindow+0x88>)
 8001c16:	781a      	ldrb	r2, [r3, #0]
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	737b      	strb	r3, [r7, #13]
 8001c20:	2300      	movs	r3, #0
 8001c22:	73bb      	strb	r3, [r7, #14]
 8001c24:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <ST7735_SetAddressWindow+0x88>)
 8001c26:	781a      	ldrb	r2, [r3, #0]
 8001c28:	797b      	ldrb	r3, [r7, #5]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2104      	movs	r1, #4
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff72 	bl	8001b20 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001c3c:	202b      	movs	r0, #43	@ 0x2b
 8001c3e:	f7ff ff55 	bl	8001aec <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8001c42:	4b0d      	ldr	r3, [pc, #52]	@ (8001c78 <ST7735_SetAddressWindow+0x8c>)
 8001c44:	781a      	ldrb	r2, [r3, #0]
 8001c46:	79bb      	ldrb	r3, [r7, #6]
 8001c48:	4413      	add	r3, r2
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <ST7735_SetAddressWindow+0x8c>)
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	793b      	ldrb	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	2104      	movs	r1, #4
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff5d 	bl	8001b20 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001c66:	202c      	movs	r0, #44	@ 0x2c
 8001c68:	f7ff ff40 	bl	8001aec <ST7735_WriteCommand>
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd90      	pop	{r4, r7, pc}
 8001c74:	2000002f 	.word	0x2000002f
 8001c78:	20000030 	.word	0x20000030

08001c7c <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8001c86:	f7ff ff07 	bl	8001a98 <ST7735_Select>
    ST7735_Reset();
 8001c8a:	f7ff ff1b 	bl	8001ac4 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8001c8e:	480c      	ldr	r0, [pc, #48]	@ (8001cc0 <ST7735_Init+0x44>)
 8001c90:	f7ff ff62 	bl	8001b58 <DisplayInit>
    DisplayInit(init_cmds2);
 8001c94:	480b      	ldr	r0, [pc, #44]	@ (8001cc4 <ST7735_Init+0x48>)
 8001c96:	f7ff ff5f 	bl	8001b58 <DisplayInit>
    DisplayInit(init_cmds3);
 8001c9a:	480b      	ldr	r0, [pc, #44]	@ (8001cc8 <ST7735_Init+0x4c>)
 8001c9c:	f7ff ff5c 	bl	8001b58 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <ST7735_Init+0x50>)
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <ST7735_Init+0x54>)
 8001ca8:	2203      	movs	r2, #3
 8001caa:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 f810 	bl	8001cd4 <ST7735_SetRotation>
    ST7735_Unselect();
 8001cb4:	f7ff fefb 	bl	8001aae <ST7735_Unselect>

}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	08003c04 	.word	0x08003c04
 8001cc4:	08003c3c 	.word	0x08003c3c
 8001cc8:	08003c4c 	.word	0x08003c4c
 8001ccc:	2000002d 	.word	0x2000002d
 8001cd0:	2000002e 	.word	0x2000002e

08001cd4 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4b33      	ldr	r3, [pc, #204]	@ (8001db8 <ST7735_SetRotation+0xe4>)
 8001cec:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8001cee:	4b32      	ldr	r3, [pc, #200]	@ (8001db8 <ST7735_SetRotation+0xe4>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d84e      	bhi.n	8001d94 <ST7735_SetRotation+0xc0>
 8001cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cfc <ST7735_SetRotation+0x28>)
 8001cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfc:	08001d0d 	.word	0x08001d0d
 8001d00:	08001d2f 	.word	0x08001d2f
 8001d04:	08001d51 	.word	0x08001d51
 8001d08:	08001d73 	.word	0x08001d73
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001d0c:	23c0      	movs	r3, #192	@ 0xc0
 8001d0e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001d10:	4b2a      	ldr	r3, [pc, #168]	@ (8001dbc <ST7735_SetRotation+0xe8>)
 8001d12:	2280      	movs	r2, #128	@ 0x80
 8001d14:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001d16:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc0 <ST7735_SetRotation+0xec>)
 8001d18:	2280      	movs	r2, #128	@ 0x80
 8001d1a:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8001d1c:	4b29      	ldr	r3, [pc, #164]	@ (8001dc4 <ST7735_SetRotation+0xf0>)
 8001d1e:	781a      	ldrb	r2, [r3, #0]
 8001d20:	4b29      	ldr	r3, [pc, #164]	@ (8001dc8 <ST7735_SetRotation+0xf4>)
 8001d22:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8001d24:	4b29      	ldr	r3, [pc, #164]	@ (8001dcc <ST7735_SetRotation+0xf8>)
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	4b29      	ldr	r3, [pc, #164]	@ (8001dd0 <ST7735_SetRotation+0xfc>)
 8001d2a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001d2c:	e032      	b.n	8001d94 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001d2e:	23a0      	movs	r3, #160	@ 0xa0
 8001d30:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8001d32:	4b23      	ldr	r3, [pc, #140]	@ (8001dc0 <ST7735_SetRotation+0xec>)
 8001d34:	2280      	movs	r2, #128	@ 0x80
 8001d36:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001d38:	4b20      	ldr	r3, [pc, #128]	@ (8001dbc <ST7735_SetRotation+0xe8>)
 8001d3a:	2280      	movs	r2, #128	@ 0x80
 8001d3c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001d3e:	4b21      	ldr	r3, [pc, #132]	@ (8001dc4 <ST7735_SetRotation+0xf0>)
 8001d40:	781a      	ldrb	r2, [r3, #0]
 8001d42:	4b23      	ldr	r3, [pc, #140]	@ (8001dd0 <ST7735_SetRotation+0xfc>)
 8001d44:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001d46:	4b21      	ldr	r3, [pc, #132]	@ (8001dcc <ST7735_SetRotation+0xf8>)
 8001d48:	781a      	ldrb	r2, [r3, #0]
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc8 <ST7735_SetRotation+0xf4>)
 8001d4c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001d4e:	e021      	b.n	8001d94 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001d54:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <ST7735_SetRotation+0xe8>)
 8001d56:	2280      	movs	r2, #128	@ 0x80
 8001d58:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001d5a:	4b19      	ldr	r3, [pc, #100]	@ (8001dc0 <ST7735_SetRotation+0xec>)
 8001d5c:	2280      	movs	r2, #128	@ 0x80
 8001d5e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8001d60:	4b18      	ldr	r3, [pc, #96]	@ (8001dc4 <ST7735_SetRotation+0xf0>)
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	4b18      	ldr	r3, [pc, #96]	@ (8001dc8 <ST7735_SetRotation+0xf4>)
 8001d66:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8001d68:	4b18      	ldr	r3, [pc, #96]	@ (8001dcc <ST7735_SetRotation+0xf8>)
 8001d6a:	781a      	ldrb	r2, [r3, #0]
 8001d6c:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <ST7735_SetRotation+0xfc>)
 8001d6e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001d70:	e010      	b.n	8001d94 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001d72:	2360      	movs	r3, #96	@ 0x60
 8001d74:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8001d76:	4b12      	ldr	r3, [pc, #72]	@ (8001dc0 <ST7735_SetRotation+0xec>)
 8001d78:	2280      	movs	r2, #128	@ 0x80
 8001d7a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <ST7735_SetRotation+0xe8>)
 8001d7e:	2280      	movs	r2, #128	@ 0x80
 8001d80:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001d82:	4b10      	ldr	r3, [pc, #64]	@ (8001dc4 <ST7735_SetRotation+0xf0>)
 8001d84:	781a      	ldrb	r2, [r3, #0]
 8001d86:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <ST7735_SetRotation+0xfc>)
 8001d88:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001d8a:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <ST7735_SetRotation+0xf8>)
 8001d8c:	781a      	ldrb	r2, [r3, #0]
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <ST7735_SetRotation+0xf4>)
 8001d90:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001d92:	bf00      	nop
  }
  ST7735_Select();
 8001d94:	f7ff fe80 	bl	8001a98 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8001d98:	2036      	movs	r0, #54	@ 0x36
 8001d9a:	f7ff fea7 	bl	8001aec <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8001d9e:	f107 030f 	add.w	r3, r7, #15
 8001da2:	2101      	movs	r1, #1
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff febb 	bl	8001b20 <ST7735_WriteData>
  ST7735_Unselect();
 8001daa:	f7ff fe80 	bl	8001aae <ST7735_Unselect>
}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2000002c 	.word	0x2000002c
 8001dbc:	2000002a 	.word	0x2000002a
 8001dc0:	20000028 	.word	0x20000028
 8001dc4:	2000002d 	.word	0x2000002d
 8001dc8:	2000002f 	.word	0x2000002f
 8001dcc:	2000002e 	.word	0x2000002e
 8001dd0:	20000030 	.word	0x20000030

08001dd4 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	80fb      	strh	r3, [r7, #6]
 8001dde:	460b      	mov	r3, r1
 8001de0:	80bb      	strh	r3, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	4a17      	ldr	r2, [pc, #92]	@ (8001e48 <ST7735_DrawPixel+0x74>)
 8001dea:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001dee:	4293      	cmp	r3, r2
 8001df0:	da26      	bge.n	8001e40 <ST7735_DrawPixel+0x6c>
 8001df2:	88bb      	ldrh	r3, [r7, #4]
 8001df4:	4a15      	ldr	r2, [pc, #84]	@ (8001e4c <ST7735_DrawPixel+0x78>)
 8001df6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	da20      	bge.n	8001e40 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 8001dfe:	f7ff fe4b 	bl	8001a98 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	b2d8      	uxtb	r0, r3
 8001e06:	88bb      	ldrh	r3, [r7, #4]
 8001e08:	b2d9      	uxtb	r1, r3
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	88bb      	ldrh	r3, [r7, #4]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	3301      	adds	r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	f7ff fee7 	bl	8001bec <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8001e1e:	887b      	ldrh	r3, [r7, #2]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	733b      	strb	r3, [r7, #12]
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	2102      	movs	r1, #2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fe73 	bl	8001b20 <ST7735_WriteData>

    ST7735_Unselect();
 8001e3a:	f7ff fe38 	bl	8001aae <ST7735_Unselect>
 8001e3e:	e000      	b.n	8001e42 <ST7735_DrawPixel+0x6e>
        return;
 8001e40:	bf00      	nop
}
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000028 	.word	0x20000028
 8001e4c:	2000002a 	.word	0x2000002a

08001e50 <ST7735_FillRectangle>:

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4604      	mov	r4, r0
 8001e58:	4608      	mov	r0, r1
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4623      	mov	r3, r4
 8001e60:	80fb      	strh	r3, [r7, #6]
 8001e62:	4603      	mov	r3, r0
 8001e64:	80bb      	strh	r3, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	807b      	strh	r3, [r7, #2]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	4a38      	ldr	r2, [pc, #224]	@ (8001f54 <ST7735_FillRectangle+0x104>)
 8001e72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001e76:	4293      	cmp	r3, r2
 8001e78:	da67      	bge.n	8001f4a <ST7735_FillRectangle+0xfa>
 8001e7a:	88bb      	ldrh	r3, [r7, #4]
 8001e7c:	4a36      	ldr	r2, [pc, #216]	@ (8001f58 <ST7735_FillRectangle+0x108>)
 8001e7e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001e82:	4293      	cmp	r3, r2
 8001e84:	da61      	bge.n	8001f4a <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 8001e86:	88fa      	ldrh	r2, [r7, #6]
 8001e88:	887b      	ldrh	r3, [r7, #2]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4a31      	ldr	r2, [pc, #196]	@ (8001f54 <ST7735_FillRectangle+0x104>)
 8001e8e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001e92:	4293      	cmp	r3, r2
 8001e94:	dd06      	ble.n	8001ea4 <ST7735_FillRectangle+0x54>
 8001e96:	4b2f      	ldr	r3, [pc, #188]	@ (8001f54 <ST7735_FillRectangle+0x104>)
 8001e98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8001ea4:	88ba      	ldrh	r2, [r7, #4]
 8001ea6:	883b      	ldrh	r3, [r7, #0]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a2b      	ldr	r2, [pc, #172]	@ (8001f58 <ST7735_FillRectangle+0x108>)
 8001eac:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	dd06      	ble.n	8001ec2 <ST7735_FillRectangle+0x72>
 8001eb4:	4b28      	ldr	r3, [pc, #160]	@ (8001f58 <ST7735_FillRectangle+0x108>)
 8001eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	88bb      	ldrh	r3, [r7, #4]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001ec2:	f7ff fde9 	bl	8001a98 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	b2d8      	uxtb	r0, r3
 8001eca:	88bb      	ldrh	r3, [r7, #4]
 8001ecc:	b2d9      	uxtb	r1, r3
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	887b      	ldrh	r3, [r7, #2]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	3b01      	subs	r3, #1
 8001edc:	b2dc      	uxtb	r4, r3
 8001ede:	88bb      	ldrh	r3, [r7, #4]
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	883b      	ldrh	r3, [r7, #0]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	4622      	mov	r2, r4
 8001ef0:	f7ff fe7c 	bl	8001bec <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001ef4:	8c3b      	ldrh	r3, [r7, #32]
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	733b      	strb	r3, [r7, #12]
 8001efe:	8c3b      	ldrh	r3, [r7, #32]
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001f04:	2201      	movs	r2, #1
 8001f06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f0a:	4814      	ldr	r0, [pc, #80]	@ (8001f5c <ST7735_FillRectangle+0x10c>)
 8001f0c:	f000 fcfc 	bl	8002908 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001f10:	883b      	ldrh	r3, [r7, #0]
 8001f12:	80bb      	strh	r3, [r7, #4]
 8001f14:	e013      	b.n	8001f3e <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 8001f16:	887b      	ldrh	r3, [r7, #2]
 8001f18:	80fb      	strh	r3, [r7, #6]
 8001f1a:	e00a      	b.n	8001f32 <ST7735_FillRectangle+0xe2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001f1c:	f107 010c 	add.w	r1, r7, #12
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295
 8001f24:	2202      	movs	r2, #2
 8001f26:	480e      	ldr	r0, [pc, #56]	@ (8001f60 <ST7735_FillRectangle+0x110>)
 8001f28:	f001 fb5b 	bl	80035e2 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	80fb      	strh	r3, [r7, #6]
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f1      	bne.n	8001f1c <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 8001f38:	88bb      	ldrh	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	80bb      	strh	r3, [r7, #4]
 8001f3e:	88bb      	ldrh	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1e8      	bne.n	8001f16 <ST7735_FillRectangle+0xc6>
        }
    }

    ST7735_Unselect();
 8001f44:	f7ff fdb3 	bl	8001aae <ST7735_Unselect>
 8001f48:	e000      	b.n	8001f4c <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 8001f4a:	bf00      	nop
}
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd90      	pop	{r4, r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000028 	.word	0x20000028
 8001f58:	2000002a 	.word	0x2000002a
 8001f5c:	48000400 	.word	0x48000400
 8001f60:	20000034 	.word	0x20000034

08001f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f68:	f000 f9d5 	bl	8002316 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f6c:	f000 f80d 	bl	8001f8a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f70:	f000 f894 	bl	800209c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001f74:	f000 f854 	bl	8002020 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ST7735_Init(0);
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f7ff fe7f 	bl	8001c7c <ST7735_Init>
  fillScreen(BLACK);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff f8ba 	bl	80010f8 <fillScreen>
	  ST7735_SetRotation(3);
	  ST7735_WriteString(0, 0, "Raphael ", Font_11x18, YELLOW, BLACK);
	  ST7735_WriteString(0, 18, "Baumeler", Font_11x18, YELLOW, BLACK);
	  HAL_Delay(1000);
	  fillScreen(BLACK);*/
	  testAll();
 8001f84:	f7ff fd5d 	bl	8001a42 <testAll>
 8001f88:	e7fc      	b.n	8001f84 <main+0x20>

08001f8a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b094      	sub	sp, #80	@ 0x50
 8001f8e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f90:	f107 0318 	add.w	r3, r7, #24
 8001f94:	2238      	movs	r2, #56	@ 0x38
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f001 fdfb 	bl	8003b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fac:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001fb0:	f000 fcc2 	bl	8002938 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fbc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001fca:	230a      	movs	r3, #10
 8001fcc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fda:	f107 0318 	add.w	r3, r7, #24
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 fd5e 	bl	8002aa0 <HAL_RCC_OscConfig>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001fea:	f000 f8bb 	bl	8002164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fee:	230f      	movs	r3, #15
 8001ff0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	2102      	movs	r1, #2
 8002006:	4618      	mov	r0, r3
 8002008:	f001 f85c 	bl	80030c4 <HAL_RCC_ClockConfig>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002012:	f000 f8a7 	bl	8002164 <Error_Handler>
  }
}
 8002016:	bf00      	nop
 8002018:	3750      	adds	r7, #80	@ 0x50
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002024:	4b1b      	ldr	r3, [pc, #108]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002026:	4a1c      	ldr	r2, [pc, #112]	@ (8002098 <MX_SPI1_Init+0x78>)
 8002028:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800202a:	4b1a      	ldr	r3, [pc, #104]	@ (8002094 <MX_SPI1_Init+0x74>)
 800202c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002030:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002032:	4b18      	ldr	r3, [pc, #96]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002034:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002038:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800203a:	4b16      	ldr	r3, [pc, #88]	@ (8002094 <MX_SPI1_Init+0x74>)
 800203c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002040:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002042:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002048:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <MX_SPI1_Init+0x74>)
 800204a:	2200      	movs	r2, #0
 800204c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800204e:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002050:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002054:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002056:	4b0f      	ldr	r3, [pc, #60]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002058:	2210      	movs	r2, #16
 800205a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800205c:	4b0d      	ldr	r3, [pc, #52]	@ (8002094 <MX_SPI1_Init+0x74>)
 800205e:	2200      	movs	r2, #0
 8002060:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002062:	4b0c      	ldr	r3, [pc, #48]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002064:	2200      	movs	r2, #0
 8002066:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002068:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <MX_SPI1_Init+0x74>)
 800206a:	2200      	movs	r2, #0
 800206c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800206e:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002070:	2207      	movs	r2, #7
 8002072:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002074:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002076:	2200      	movs	r2, #0
 8002078:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800207a:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <MX_SPI1_Init+0x74>)
 800207c:	2208      	movs	r2, #8
 800207e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002080:	4804      	ldr	r0, [pc, #16]	@ (8002094 <MX_SPI1_Init+0x74>)
 8002082:	f001 fa03 	bl	800348c <HAL_SPI_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800208c:	f000 f86a 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000034 	.word	0x20000034
 8002098:	40013000 	.word	0x40013000

0800209c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a2:	f107 030c 	add.w	r3, r7, #12
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020b2:	4b2a      	ldr	r3, [pc, #168]	@ (800215c <MX_GPIO_Init+0xc0>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	4a29      	ldr	r2, [pc, #164]	@ (800215c <MX_GPIO_Init+0xc0>)
 80020b8:	f043 0320 	orr.w	r3, r3, #32
 80020bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020be:	4b27      	ldr	r3, [pc, #156]	@ (800215c <MX_GPIO_Init+0xc0>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	4b24      	ldr	r3, [pc, #144]	@ (800215c <MX_GPIO_Init+0xc0>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ce:	4a23      	ldr	r2, [pc, #140]	@ (800215c <MX_GPIO_Init+0xc0>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d6:	4b21      	ldr	r3, [pc, #132]	@ (800215c <MX_GPIO_Init+0xc0>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e2:	4b1e      	ldr	r3, [pc, #120]	@ (800215c <MX_GPIO_Init+0xc0>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e6:	4a1d      	ldr	r2, [pc, #116]	@ (800215c <MX_GPIO_Init+0xc0>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ee:	4b1b      	ldr	r3, [pc, #108]	@ (800215c <MX_GPIO_Init+0xc0>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_15, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	f248 0140 	movw	r1, #32832	@ 0x8040
 8002100:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002104:	f000 fc00 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002108:	2200      	movs	r2, #0
 800210a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800210e:	4814      	ldr	r0, [pc, #80]	@ (8002160 <MX_GPIO_Init+0xc4>)
 8002110:	f000 fbfa 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 8002114:	f248 0340 	movw	r3, #32832	@ 0x8040
 8002118:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211a:	2301      	movs	r3, #1
 800211c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002126:	f107 030c 	add.w	r3, r7, #12
 800212a:	4619      	mov	r1, r3
 800212c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002130:	f000 fa68 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002134:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002138:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213a:	2301      	movs	r3, #1
 800213c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	4619      	mov	r1, r3
 800214c:	4804      	ldr	r0, [pc, #16]	@ (8002160 <MX_GPIO_Init+0xc4>)
 800214e:	f000 fa59 	bl	8002604 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002152:	bf00      	nop
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000
 8002160:	48000400 	.word	0x48000400

08002164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002168:	b672      	cpsid	i
}
 800216a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <Error_Handler+0x8>

08002170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002176:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <HAL_MspInit+0x44>)
 8002178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217a:	4a0e      	ldr	r2, [pc, #56]	@ (80021b4 <HAL_MspInit+0x44>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6613      	str	r3, [r2, #96]	@ 0x60
 8002182:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <HAL_MspInit+0x44>)
 8002184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800218e:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <HAL_MspInit+0x44>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002192:	4a08      	ldr	r2, [pc, #32]	@ (80021b4 <HAL_MspInit+0x44>)
 8002194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002198:	6593      	str	r3, [r2, #88]	@ 0x58
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <HAL_MspInit+0x44>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80021a6:	f000 fc6b 	bl	8002a80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000

080021b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	@ 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a17      	ldr	r2, [pc, #92]	@ (8002234 <HAL_SPI_MspInit+0x7c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d127      	bne.n	800222a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021da:	4b17      	ldr	r3, [pc, #92]	@ (8002238 <HAL_SPI_MspInit+0x80>)
 80021dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021de:	4a16      	ldr	r2, [pc, #88]	@ (8002238 <HAL_SPI_MspInit+0x80>)
 80021e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80021e6:	4b14      	ldr	r3, [pc, #80]	@ (8002238 <HAL_SPI_MspInit+0x80>)
 80021e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f2:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <HAL_SPI_MspInit+0x80>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f6:	4a10      	ldr	r2, [pc, #64]	@ (8002238 <HAL_SPI_MspInit+0x80>)
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <HAL_SPI_MspInit+0x80>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800220a:	2328      	movs	r3, #40	@ 0x28
 800220c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800221a:	2305      	movs	r3, #5
 800221c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221e:	f107 0314 	add.w	r3, r7, #20
 8002222:	4619      	mov	r1, r3
 8002224:	4805      	ldr	r0, [pc, #20]	@ (800223c <HAL_SPI_MspInit+0x84>)
 8002226:	f000 f9ed 	bl	8002604 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800222a:	bf00      	nop
 800222c:	3728      	adds	r7, #40	@ 0x28
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40013000 	.word	0x40013000
 8002238:	40021000 	.word	0x40021000
 800223c:	48000400 	.word	0x48000400

08002240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002244:	bf00      	nop
 8002246:	e7fd      	b.n	8002244 <NMI_Handler+0x4>

08002248 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800224c:	bf00      	nop
 800224e:	e7fd      	b.n	800224c <HardFault_Handler+0x4>

08002250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002254:	bf00      	nop
 8002256:	e7fd      	b.n	8002254 <MemManage_Handler+0x4>

08002258 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800225c:	bf00      	nop
 800225e:	e7fd      	b.n	800225c <BusFault_Handler+0x4>

08002260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002264:	bf00      	nop
 8002266:	e7fd      	b.n	8002264 <UsageFault_Handler+0x4>

08002268 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002296:	f000 f891 	bl	80023bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022a4:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <SystemInit+0x20>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022aa:	4a05      	ldr	r2, [pc, #20]	@ (80022c0 <SystemInit+0x20>)
 80022ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022c4:	480d      	ldr	r0, [pc, #52]	@ (80022fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022c8:	f7ff ffea 	bl	80022a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022cc:	480c      	ldr	r0, [pc, #48]	@ (8002300 <LoopForever+0x6>)
  ldr r1, =_edata
 80022ce:	490d      	ldr	r1, [pc, #52]	@ (8002304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002308 <LoopForever+0xe>)
  movs r3, #0
 80022d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022d4:	e002      	b.n	80022dc <LoopCopyDataInit>

080022d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022da:	3304      	adds	r3, #4

080022dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e0:	d3f9      	bcc.n	80022d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022e2:	4a0a      	ldr	r2, [pc, #40]	@ (800230c <LoopForever+0x12>)
  ldr r4, =_ebss
 80022e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002310 <LoopForever+0x16>)
  movs r3, #0
 80022e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e8:	e001      	b.n	80022ee <LoopFillZerobss>

080022ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022ec:	3204      	adds	r2, #4

080022ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f0:	d3fb      	bcc.n	80022ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022f2:	f001 fc57 	bl	8003ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022f6:	f7ff fe35 	bl	8001f64 <main>

080022fa <LoopForever>:

LoopForever:
    b LoopForever
 80022fa:	e7fe      	b.n	80022fa <LoopForever>
  ldr   r0, =_estack
 80022fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002304:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002308:	08003c90 	.word	0x08003c90
  ldr r2, =_sbss
 800230c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002310:	2000009c 	.word	0x2000009c

08002314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002314:	e7fe      	b.n	8002314 <ADC1_2_IRQHandler>

08002316 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002320:	2003      	movs	r0, #3
 8002322:	f000 f93d 	bl	80025a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002326:	200f      	movs	r0, #15
 8002328:	f000 f80e 	bl	8002348 <HAL_InitTick>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	71fb      	strb	r3, [r7, #7]
 8002336:	e001      	b.n	800233c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002338:	f7ff ff1a 	bl	8002170 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800233c:	79fb      	ldrb	r3, [r7, #7]

}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002354:	4b16      	ldr	r3, [pc, #88]	@ (80023b0 <HAL_InitTick+0x68>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d022      	beq.n	80023a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800235c:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <HAL_InitTick+0x6c>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b13      	ldr	r3, [pc, #76]	@ (80023b0 <HAL_InitTick+0x68>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002368:	fbb1 f3f3 	udiv	r3, r1, r3
 800236c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002370:	4618      	mov	r0, r3
 8002372:	f000 f93a 	bl	80025ea <HAL_SYSTICK_Config>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10f      	bne.n	800239c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b0f      	cmp	r3, #15
 8002380:	d809      	bhi.n	8002396 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002382:	2200      	movs	r2, #0
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	f04f 30ff 	mov.w	r0, #4294967295
 800238a:	f000 f914 	bl	80025b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800238e:	4a0a      	ldr	r2, [pc, #40]	@ (80023b8 <HAL_InitTick+0x70>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	e007      	b.n	80023a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
 800239a:	e004      	b.n	80023a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	e001      	b.n	80023a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000008 	.word	0x20000008
 80023b4:	20000000 	.word	0x20000000
 80023b8:	20000004 	.word	0x20000004

080023bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c0:	4b05      	ldr	r3, [pc, #20]	@ (80023d8 <HAL_IncTick+0x1c>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <HAL_IncTick+0x20>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4413      	add	r3, r2
 80023ca:	4a03      	ldr	r2, [pc, #12]	@ (80023d8 <HAL_IncTick+0x1c>)
 80023cc:	6013      	str	r3, [r2, #0]
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	20000098 	.word	0x20000098
 80023dc:	20000008 	.word	0x20000008

080023e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return uwTick;
 80023e4:	4b03      	ldr	r3, [pc, #12]	@ (80023f4 <HAL_GetTick+0x14>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000098 	.word	0x20000098

080023f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff ffee 	bl	80023e0 <HAL_GetTick>
 8002404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002410:	d004      	beq.n	800241c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002412:	4b09      	ldr	r3, [pc, #36]	@ (8002438 <HAL_Delay+0x40>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4413      	add	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800241c:	bf00      	nop
 800241e:	f7ff ffdf 	bl	80023e0 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	429a      	cmp	r2, r3
 800242c:	d8f7      	bhi.n	800241e <HAL_Delay+0x26>
  {
  }
}
 800242e:	bf00      	nop
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000008 	.word	0x20000008

0800243c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800244c:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <__NVIC_SetPriorityGrouping+0x44>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002458:	4013      	ands	r3, r2
 800245a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002464:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002468:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800246c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246e:	4a04      	ldr	r2, [pc, #16]	@ (8002480 <__NVIC_SetPriorityGrouping+0x44>)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	60d3      	str	r3, [r2, #12]
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002488:	4b04      	ldr	r3, [pc, #16]	@ (800249c <__NVIC_GetPriorityGrouping+0x18>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	f003 0307 	and.w	r3, r3, #7
}
 8002492:	4618      	mov	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	db0a      	blt.n	80024ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	490c      	ldr	r1, [pc, #48]	@ (80024ec <__NVIC_SetPriority+0x4c>)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	0112      	lsls	r2, r2, #4
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	440b      	add	r3, r1
 80024c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c8:	e00a      	b.n	80024e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4908      	ldr	r1, [pc, #32]	@ (80024f0 <__NVIC_SetPriority+0x50>)
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	3b04      	subs	r3, #4
 80024d8:	0112      	lsls	r2, r2, #4
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	440b      	add	r3, r1
 80024de:	761a      	strb	r2, [r3, #24]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000e100 	.word	0xe000e100
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	@ 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f1c3 0307 	rsb	r3, r3, #7
 800250e:	2b04      	cmp	r3, #4
 8002510:	bf28      	it	cs
 8002512:	2304      	movcs	r3, #4
 8002514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3304      	adds	r3, #4
 800251a:	2b06      	cmp	r3, #6
 800251c:	d902      	bls.n	8002524 <NVIC_EncodePriority+0x30>
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3b03      	subs	r3, #3
 8002522:	e000      	b.n	8002526 <NVIC_EncodePriority+0x32>
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	f04f 32ff 	mov.w	r2, #4294967295
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43da      	mvns	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	401a      	ands	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800253c:	f04f 31ff 	mov.w	r1, #4294967295
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	43d9      	mvns	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800254c:	4313      	orrs	r3, r2
         );
}
 800254e:	4618      	mov	r0, r3
 8002550:	3724      	adds	r7, #36	@ 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3b01      	subs	r3, #1
 8002568:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800256c:	d301      	bcc.n	8002572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800256e:	2301      	movs	r3, #1
 8002570:	e00f      	b.n	8002592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002572:	4a0a      	ldr	r2, [pc, #40]	@ (800259c <SysTick_Config+0x40>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3b01      	subs	r3, #1
 8002578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800257a:	210f      	movs	r1, #15
 800257c:	f04f 30ff 	mov.w	r0, #4294967295
 8002580:	f7ff ff8e 	bl	80024a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002584:	4b05      	ldr	r3, [pc, #20]	@ (800259c <SysTick_Config+0x40>)
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800258a:	4b04      	ldr	r3, [pc, #16]	@ (800259c <SysTick_Config+0x40>)
 800258c:	2207      	movs	r2, #7
 800258e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	e000e010 	.word	0xe000e010

080025a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ff47 	bl	800243c <__NVIC_SetPriorityGrouping>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4603      	mov	r3, r0
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025c4:	f7ff ff5e 	bl	8002484 <__NVIC_GetPriorityGrouping>
 80025c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	6978      	ldr	r0, [r7, #20]
 80025d0:	f7ff ff90 	bl	80024f4 <NVIC_EncodePriority>
 80025d4:	4602      	mov	r2, r0
 80025d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff5f 	bl	80024a0 <__NVIC_SetPriority>
}
 80025e2:	bf00      	nop
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff ffb2 	bl	800255c <SysTick_Config>
 80025f8:	4603      	mov	r3, r0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002612:	e15a      	b.n	80028ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	2101      	movs	r1, #1
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	fa01 f303 	lsl.w	r3, r1, r3
 8002620:	4013      	ands	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 814c 	beq.w	80028c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d005      	beq.n	8002644 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002640:	2b02      	cmp	r3, #2
 8002642:	d130      	bne.n	80026a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800267a:	2201      	movs	r2, #1
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	f003 0201 	and.w	r2, r3, #1
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d017      	beq.n	80026e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	2203      	movs	r2, #3
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d123      	bne.n	8002736 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	08da      	lsrs	r2, r3, #3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3208      	adds	r2, #8
 80026f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	220f      	movs	r2, #15
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4013      	ands	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	08da      	lsrs	r2, r3, #3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3208      	adds	r2, #8
 8002730:	6939      	ldr	r1, [r7, #16]
 8002732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	2203      	movs	r2, #3
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 0203 	and.w	r2, r3, #3
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 80a6 	beq.w	80028c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002778:	4b5b      	ldr	r3, [pc, #364]	@ (80028e8 <HAL_GPIO_Init+0x2e4>)
 800277a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800277c:	4a5a      	ldr	r2, [pc, #360]	@ (80028e8 <HAL_GPIO_Init+0x2e4>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6613      	str	r3, [r2, #96]	@ 0x60
 8002784:	4b58      	ldr	r3, [pc, #352]	@ (80028e8 <HAL_GPIO_Init+0x2e4>)
 8002786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002790:	4a56      	ldr	r2, [pc, #344]	@ (80028ec <HAL_GPIO_Init+0x2e8>)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	3302      	adds	r3, #2
 8002798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	220f      	movs	r2, #15
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80027ba:	d01f      	beq.n	80027fc <HAL_GPIO_Init+0x1f8>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a4c      	ldr	r2, [pc, #304]	@ (80028f0 <HAL_GPIO_Init+0x2ec>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d019      	beq.n	80027f8 <HAL_GPIO_Init+0x1f4>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a4b      	ldr	r2, [pc, #300]	@ (80028f4 <HAL_GPIO_Init+0x2f0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d013      	beq.n	80027f4 <HAL_GPIO_Init+0x1f0>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a4a      	ldr	r2, [pc, #296]	@ (80028f8 <HAL_GPIO_Init+0x2f4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d00d      	beq.n	80027f0 <HAL_GPIO_Init+0x1ec>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a49      	ldr	r2, [pc, #292]	@ (80028fc <HAL_GPIO_Init+0x2f8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d007      	beq.n	80027ec <HAL_GPIO_Init+0x1e8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a48      	ldr	r2, [pc, #288]	@ (8002900 <HAL_GPIO_Init+0x2fc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d101      	bne.n	80027e8 <HAL_GPIO_Init+0x1e4>
 80027e4:	2305      	movs	r3, #5
 80027e6:	e00a      	b.n	80027fe <HAL_GPIO_Init+0x1fa>
 80027e8:	2306      	movs	r3, #6
 80027ea:	e008      	b.n	80027fe <HAL_GPIO_Init+0x1fa>
 80027ec:	2304      	movs	r3, #4
 80027ee:	e006      	b.n	80027fe <HAL_GPIO_Init+0x1fa>
 80027f0:	2303      	movs	r3, #3
 80027f2:	e004      	b.n	80027fe <HAL_GPIO_Init+0x1fa>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e002      	b.n	80027fe <HAL_GPIO_Init+0x1fa>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <HAL_GPIO_Init+0x1fa>
 80027fc:	2300      	movs	r3, #0
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	f002 0203 	and.w	r2, r2, #3
 8002804:	0092      	lsls	r2, r2, #2
 8002806:	4093      	lsls	r3, r2
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800280e:	4937      	ldr	r1, [pc, #220]	@ (80028ec <HAL_GPIO_Init+0x2e8>)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	089b      	lsrs	r3, r3, #2
 8002814:	3302      	adds	r3, #2
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800281c:	4b39      	ldr	r3, [pc, #228]	@ (8002904 <HAL_GPIO_Init+0x300>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	43db      	mvns	r3, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002840:	4a30      	ldr	r2, [pc, #192]	@ (8002904 <HAL_GPIO_Init+0x300>)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002846:	4b2f      	ldr	r3, [pc, #188]	@ (8002904 <HAL_GPIO_Init+0x300>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	43db      	mvns	r3, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800286a:	4a26      	ldr	r2, [pc, #152]	@ (8002904 <HAL_GPIO_Init+0x300>)
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002870:	4b24      	ldr	r3, [pc, #144]	@ (8002904 <HAL_GPIO_Init+0x300>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	43db      	mvns	r3, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002894:	4a1b      	ldr	r2, [pc, #108]	@ (8002904 <HAL_GPIO_Init+0x300>)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800289a:	4b1a      	ldr	r3, [pc, #104]	@ (8002904 <HAL_GPIO_Init+0x300>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4013      	ands	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028be:	4a11      	ldr	r2, [pc, #68]	@ (8002904 <HAL_GPIO_Init+0x300>)
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	3301      	adds	r3, #1
 80028c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f47f ae9d 	bne.w	8002614 <HAL_GPIO_Init+0x10>
  }
}
 80028da:	bf00      	nop
 80028dc:	bf00      	nop
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40010000 	.word	0x40010000
 80028f0:	48000400 	.word	0x48000400
 80028f4:	48000800 	.word	0x48000800
 80028f8:	48000c00 	.word	0x48000c00
 80028fc:	48001000 	.word	0x48001000
 8002900:	48001400 	.word	0x48001400
 8002904:	40010400 	.word	0x40010400

08002908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
 8002914:	4613      	mov	r3, r2
 8002916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002918:	787b      	ldrb	r3, [r7, #1]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800291e:	887a      	ldrh	r2, [r7, #2]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002924:	e002      	b.n	800292c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002926:	887a      	ldrh	r2, [r7, #2]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d141      	bne.n	80029ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002946:	4b4b      	ldr	r3, [pc, #300]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800294e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002952:	d131      	bne.n	80029b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002954:	4b47      	ldr	r3, [pc, #284]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800295a:	4a46      	ldr	r2, [pc, #280]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800295c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002960:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002964:	4b43      	ldr	r3, [pc, #268]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800296c:	4a41      	ldr	r2, [pc, #260]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800296e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002972:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002974:	4b40      	ldr	r3, [pc, #256]	@ (8002a78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2232      	movs	r2, #50	@ 0x32
 800297a:	fb02 f303 	mul.w	r3, r2, r3
 800297e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002980:	fba2 2303 	umull	r2, r3, r2, r3
 8002984:	0c9b      	lsrs	r3, r3, #18
 8002986:	3301      	adds	r3, #1
 8002988:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800298a:	e002      	b.n	8002992 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	3b01      	subs	r3, #1
 8002990:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002992:	4b38      	ldr	r3, [pc, #224]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800299a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800299e:	d102      	bne.n	80029a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f2      	bne.n	800298c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029a6:	4b33      	ldr	r3, [pc, #204]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029b2:	d158      	bne.n	8002a66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e057      	b.n	8002a68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029be:	4a2d      	ldr	r2, [pc, #180]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80029c8:	e04d      	b.n	8002a66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029d0:	d141      	bne.n	8002a56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029d2:	4b28      	ldr	r3, [pc, #160]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029de:	d131      	bne.n	8002a44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029e0:	4b24      	ldr	r3, [pc, #144]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029e6:	4a23      	ldr	r2, [pc, #140]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029f0:	4b20      	ldr	r3, [pc, #128]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a00:	4b1d      	ldr	r3, [pc, #116]	@ (8002a78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2232      	movs	r2, #50	@ 0x32
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002a7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a10:	0c9b      	lsrs	r3, r3, #18
 8002a12:	3301      	adds	r3, #1
 8002a14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a16:	e002      	b.n	8002a1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a1e:	4b15      	ldr	r3, [pc, #84]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a2a:	d102      	bne.n	8002a32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f2      	bne.n	8002a18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a32:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a3e:	d112      	bne.n	8002a66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e011      	b.n	8002a68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a44:	4b0b      	ldr	r3, [pc, #44]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a54:	e007      	b.n	8002a66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a56:	4b07      	ldr	r3, [pc, #28]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a5e:	4a05      	ldr	r2, [pc, #20]	@ (8002a74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	40007000 	.word	0x40007000
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	431bde83 	.word	0x431bde83

08002a80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002a84:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4a04      	ldr	r2, [pc, #16]	@ (8002a9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a8e:	6093      	str	r3, [r2, #8]
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40007000 	.word	0x40007000

08002aa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e2fe      	b.n	80030b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d075      	beq.n	8002baa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002abe:	4b97      	ldr	r3, [pc, #604]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ac8:	4b94      	ldr	r3, [pc, #592]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2b0c      	cmp	r3, #12
 8002ad6:	d102      	bne.n	8002ade <HAL_RCC_OscConfig+0x3e>
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d002      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x44>
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d10b      	bne.n	8002afc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae4:	4b8d      	ldr	r3, [pc, #564]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d05b      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x108>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d157      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e2d9      	b.n	80030b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b04:	d106      	bne.n	8002b14 <HAL_RCC_OscConfig+0x74>
 8002b06:	4b85      	ldr	r3, [pc, #532]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a84      	ldr	r2, [pc, #528]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e01d      	b.n	8002b50 <HAL_RCC_OscConfig+0xb0>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x98>
 8002b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a7e      	ldr	r2, [pc, #504]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002b24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	4b7c      	ldr	r3, [pc, #496]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a7b      	ldr	r2, [pc, #492]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e00b      	b.n	8002b50 <HAL_RCC_OscConfig+0xb0>
 8002b38:	4b78      	ldr	r3, [pc, #480]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a77      	ldr	r2, [pc, #476]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	4b75      	ldr	r3, [pc, #468]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a74      	ldr	r2, [pc, #464]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d013      	beq.n	8002b80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7ff fc42 	bl	80023e0 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b60:	f7ff fc3e 	bl	80023e0 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	@ 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e29e      	b.n	80030b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b72:	4b6a      	ldr	r3, [pc, #424]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0xc0>
 8002b7e:	e014      	b.n	8002baa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7ff fc2e 	bl	80023e0 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b88:	f7ff fc2a 	bl	80023e0 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	@ 0x64
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e28a      	b.n	80030b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b9a:	4b60      	ldr	r3, [pc, #384]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0xe8>
 8002ba6:	e000      	b.n	8002baa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d075      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bb6:	4b59      	ldr	r3, [pc, #356]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bc0:	4b56      	ldr	r3, [pc, #344]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b0c      	cmp	r3, #12
 8002bce:	d102      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x136>
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d002      	beq.n	8002bdc <HAL_RCC_OscConfig+0x13c>
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d11f      	bne.n	8002c1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bdc:	4b4f      	ldr	r3, [pc, #316]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x154>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e25d      	b.n	80030b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf4:	4b49      	ldr	r3, [pc, #292]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	061b      	lsls	r3, r3, #24
 8002c02:	4946      	ldr	r1, [pc, #280]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c08:	4b45      	ldr	r3, [pc, #276]	@ (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fb9b 	bl	8002348 <HAL_InitTick>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d043      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e249      	b.n	80030b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d023      	beq.n	8002c6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c24:	4b3d      	ldr	r3, [pc, #244]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a3c      	ldr	r2, [pc, #240]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7ff fbd6 	bl	80023e0 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c38:	f7ff fbd2 	bl	80023e0 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e232      	b.n	80030b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c4a:	4b34      	ldr	r3, [pc, #208]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c56:	4b31      	ldr	r3, [pc, #196]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	061b      	lsls	r3, r3, #24
 8002c64:	492d      	ldr	r1, [pc, #180]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	604b      	str	r3, [r1, #4]
 8002c6a:	e01a      	b.n	8002ca2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a2a      	ldr	r2, [pc, #168]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002c72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7ff fbb2 	bl	80023e0 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c80:	f7ff fbae 	bl	80023e0 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e20e      	b.n	80030b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c92:	4b22      	ldr	r3, [pc, #136]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x1e0>
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ca0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d041      	beq.n	8002d32 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d01c      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb6:	4b19      	ldr	r3, [pc, #100]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cbc:	4a17      	ldr	r2, [pc, #92]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc6:	f7ff fb8b 	bl	80023e0 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cce:	f7ff fb87 	bl	80023e0 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e1e7      	b.n	80030b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0ef      	beq.n	8002cce <HAL_RCC_OscConfig+0x22e>
 8002cee:	e020      	b.n	8002d32 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cf6:	4a09      	ldr	r2, [pc, #36]	@ (8002d1c <HAL_RCC_OscConfig+0x27c>)
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d00:	f7ff fb6e 	bl	80023e0 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d06:	e00d      	b.n	8002d24 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d08:	f7ff fb6a 	bl	80023e0 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d906      	bls.n	8002d24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e1ca      	b.n	80030b0 <HAL_RCC_OscConfig+0x610>
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d24:	4b8c      	ldr	r3, [pc, #560]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1ea      	bne.n	8002d08 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80a6 	beq.w	8002e8c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d40:	2300      	movs	r3, #0
 8002d42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d44:	4b84      	ldr	r3, [pc, #528]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_OscConfig+0x2b4>
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <HAL_RCC_OscConfig+0x2b6>
 8002d54:	2300      	movs	r3, #0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00d      	beq.n	8002d76 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d64:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d66:	4b7c      	ldr	r3, [pc, #496]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d72:	2301      	movs	r3, #1
 8002d74:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d76:	4b79      	ldr	r3, [pc, #484]	@ (8002f5c <HAL_RCC_OscConfig+0x4bc>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d118      	bne.n	8002db4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d82:	4b76      	ldr	r3, [pc, #472]	@ (8002f5c <HAL_RCC_OscConfig+0x4bc>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a75      	ldr	r2, [pc, #468]	@ (8002f5c <HAL_RCC_OscConfig+0x4bc>)
 8002d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8e:	f7ff fb27 	bl	80023e0 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d96:	f7ff fb23 	bl	80023e0 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e183      	b.n	80030b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da8:	4b6c      	ldr	r3, [pc, #432]	@ (8002f5c <HAL_RCC_OscConfig+0x4bc>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d108      	bne.n	8002dce <HAL_RCC_OscConfig+0x32e>
 8002dbc:	4b66      	ldr	r3, [pc, #408]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc2:	4a65      	ldr	r2, [pc, #404]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dcc:	e024      	b.n	8002e18 <HAL_RCC_OscConfig+0x378>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b05      	cmp	r3, #5
 8002dd4:	d110      	bne.n	8002df8 <HAL_RCC_OscConfig+0x358>
 8002dd6:	4b60      	ldr	r3, [pc, #384]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ddc:	4a5e      	ldr	r2, [pc, #376]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002dde:	f043 0304 	orr.w	r3, r3, #4
 8002de2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002de6:	4b5c      	ldr	r3, [pc, #368]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dec:	4a5a      	ldr	r2, [pc, #360]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002df6:	e00f      	b.n	8002e18 <HAL_RCC_OscConfig+0x378>
 8002df8:	4b57      	ldr	r3, [pc, #348]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dfe:	4a56      	ldr	r2, [pc, #344]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e08:	4b53      	ldr	r3, [pc, #332]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0e:	4a52      	ldr	r2, [pc, #328]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002e10:	f023 0304 	bic.w	r3, r3, #4
 8002e14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d016      	beq.n	8002e4e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e20:	f7ff fade 	bl	80023e0 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e26:	e00a      	b.n	8002e3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e28:	f7ff fada 	bl	80023e0 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e138      	b.n	80030b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e3e:	4b46      	ldr	r3, [pc, #280]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0ed      	beq.n	8002e28 <HAL_RCC_OscConfig+0x388>
 8002e4c:	e015      	b.n	8002e7a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4e:	f7ff fac7 	bl	80023e0 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e54:	e00a      	b.n	8002e6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e56:	f7ff fac3 	bl	80023e0 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e121      	b.n	80030b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e6c:	4b3a      	ldr	r3, [pc, #232]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1ed      	bne.n	8002e56 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e7a:	7ffb      	ldrb	r3, [r7, #31]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d105      	bne.n	8002e8c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e80:	4b35      	ldr	r3, [pc, #212]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e84:	4a34      	ldr	r2, [pc, #208]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002e86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e8a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d03c      	beq.n	8002f12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01c      	beq.n	8002eda <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002ea2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ea6:	4a2c      	ldr	r2, [pc, #176]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb0:	f7ff fa96 	bl	80023e0 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002eb8:	f7ff fa92 	bl	80023e0 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e0f2      	b.n	80030b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002eca:	4b23      	ldr	r3, [pc, #140]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002ecc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0ef      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x418>
 8002ed8:	e01b      	b.n	8002f12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eda:	4b1f      	ldr	r3, [pc, #124]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002edc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eea:	f7ff fa79 	bl	80023e0 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ef2:	f7ff fa75 	bl	80023e0 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e0d5      	b.n	80030b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f04:	4b14      	ldr	r3, [pc, #80]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1ef      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 80c9 	beq.w	80030ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b0c      	cmp	r3, #12
 8002f26:	f000 8083 	beq.w	8003030 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d15e      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f32:	4b09      	ldr	r3, [pc, #36]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a08      	ldr	r2, [pc, #32]	@ (8002f58 <HAL_RCC_OscConfig+0x4b8>)
 8002f38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3e:	f7ff fa4f 	bl	80023e0 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f44:	e00c      	b.n	8002f60 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f46:	f7ff fa4b 	bl	80023e0 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d905      	bls.n	8002f60 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e0ab      	b.n	80030b0 <HAL_RCC_OscConfig+0x610>
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f60:	4b55      	ldr	r3, [pc, #340]	@ (80030b8 <HAL_RCC_OscConfig+0x618>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1ec      	bne.n	8002f46 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f6c:	4b52      	ldr	r3, [pc, #328]	@ (80030b8 <HAL_RCC_OscConfig+0x618>)
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	4b52      	ldr	r3, [pc, #328]	@ (80030bc <HAL_RCC_OscConfig+0x61c>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6a11      	ldr	r1, [r2, #32]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f7c:	3a01      	subs	r2, #1
 8002f7e:	0112      	lsls	r2, r2, #4
 8002f80:	4311      	orrs	r1, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002f86:	0212      	lsls	r2, r2, #8
 8002f88:	4311      	orrs	r1, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f8e:	0852      	lsrs	r2, r2, #1
 8002f90:	3a01      	subs	r2, #1
 8002f92:	0552      	lsls	r2, r2, #21
 8002f94:	4311      	orrs	r1, r2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f9a:	0852      	lsrs	r2, r2, #1
 8002f9c:	3a01      	subs	r2, #1
 8002f9e:	0652      	lsls	r2, r2, #25
 8002fa0:	4311      	orrs	r1, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002fa6:	06d2      	lsls	r2, r2, #27
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	4943      	ldr	r1, [pc, #268]	@ (80030b8 <HAL_RCC_OscConfig+0x618>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb0:	4b41      	ldr	r3, [pc, #260]	@ (80030b8 <HAL_RCC_OscConfig+0x618>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a40      	ldr	r2, [pc, #256]	@ (80030b8 <HAL_RCC_OscConfig+0x618>)
 8002fb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fbc:	4b3e      	ldr	r3, [pc, #248]	@ (80030b8 <HAL_RCC_OscConfig+0x618>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4a3d      	ldr	r2, [pc, #244]	@ (80030b8 <HAL_RCC_OscConfig+0x618>)
 8002fc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fc6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7ff fa0a 	bl	80023e0 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7ff fa06 	bl	80023e0 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e066      	b.n	80030b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe2:	4b35      	ldr	r3, [pc, #212]	@ (80030b8 <HAL_RCC_OscConfig+0x618>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x530>
 8002fee:	e05e      	b.n	80030ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff0:	4b31      	ldr	r3, [pc, #196]	@ (80030b8 <HAL_RCC_OscConfig+0x618>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a30      	ldr	r2, [pc, #192]	@ (80030b8 <HAL_RCC_OscConfig+0x618>)
 8002ff6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7ff f9f0 	bl	80023e0 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003004:	f7ff f9ec 	bl	80023e0 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e04c      	b.n	80030b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003016:	4b28      	ldr	r3, [pc, #160]	@ (80030b8 <HAL_RCC_OscConfig+0x618>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003022:	4b25      	ldr	r3, [pc, #148]	@ (80030b8 <HAL_RCC_OscConfig+0x618>)
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	4924      	ldr	r1, [pc, #144]	@ (80030b8 <HAL_RCC_OscConfig+0x618>)
 8003028:	4b25      	ldr	r3, [pc, #148]	@ (80030c0 <HAL_RCC_OscConfig+0x620>)
 800302a:	4013      	ands	r3, r2
 800302c:	60cb      	str	r3, [r1, #12]
 800302e:	e03e      	b.n	80030ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e039      	b.n	80030b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800303c:	4b1e      	ldr	r3, [pc, #120]	@ (80030b8 <HAL_RCC_OscConfig+0x618>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f003 0203 	and.w	r2, r3, #3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	429a      	cmp	r2, r3
 800304e:	d12c      	bne.n	80030aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	3b01      	subs	r3, #1
 800305c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305e:	429a      	cmp	r2, r3
 8003060:	d123      	bne.n	80030aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d11b      	bne.n	80030aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800307e:	429a      	cmp	r2, r3
 8003080:	d113      	bne.n	80030aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	3b01      	subs	r3, #1
 8003090:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003092:	429a      	cmp	r2, r3
 8003094:	d109      	bne.n	80030aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	3b01      	subs	r3, #1
 80030a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d001      	beq.n	80030ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3720      	adds	r7, #32
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000
 80030bc:	019f800c 	.word	0x019f800c
 80030c0:	feeefffc 	.word	0xfeeefffc

080030c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e11e      	b.n	800331a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030dc:	4b91      	ldr	r3, [pc, #580]	@ (8003324 <HAL_RCC_ClockConfig+0x260>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d910      	bls.n	800310c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b8e      	ldr	r3, [pc, #568]	@ (8003324 <HAL_RCC_ClockConfig+0x260>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 020f 	bic.w	r2, r3, #15
 80030f2:	498c      	ldr	r1, [pc, #560]	@ (8003324 <HAL_RCC_ClockConfig+0x260>)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b8a      	ldr	r3, [pc, #552]	@ (8003324 <HAL_RCC_ClockConfig+0x260>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e106      	b.n	800331a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d073      	beq.n	8003200 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b03      	cmp	r3, #3
 800311e:	d129      	bne.n	8003174 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003120:	4b81      	ldr	r3, [pc, #516]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0f4      	b.n	800331a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003130:	f000 f966 	bl	8003400 <RCC_GetSysClockFreqFromPLLSource>
 8003134:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4a7c      	ldr	r2, [pc, #496]	@ (800332c <HAL_RCC_ClockConfig+0x268>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d93f      	bls.n	80031be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800313e:	4b7a      	ldr	r3, [pc, #488]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003152:	2b00      	cmp	r3, #0
 8003154:	d033      	beq.n	80031be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800315a:	2b00      	cmp	r3, #0
 800315c:	d12f      	bne.n	80031be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800315e:	4b72      	ldr	r3, [pc, #456]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003166:	4a70      	ldr	r2, [pc, #448]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 8003168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800316c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800316e:	2380      	movs	r3, #128	@ 0x80
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	e024      	b.n	80031be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d107      	bne.n	800318c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800317c:	4b6a      	ldr	r3, [pc, #424]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d109      	bne.n	800319c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0c6      	b.n	800331a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800318c:	4b66      	ldr	r3, [pc, #408]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0be      	b.n	800331a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800319c:	f000 f8ce 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4a61      	ldr	r2, [pc, #388]	@ (800332c <HAL_RCC_ClockConfig+0x268>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d909      	bls.n	80031be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031b2:	4a5d      	ldr	r2, [pc, #372]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 80031b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80031ba:	2380      	movs	r3, #128	@ 0x80
 80031bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031be:	4b5a      	ldr	r3, [pc, #360]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f023 0203 	bic.w	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4957      	ldr	r1, [pc, #348]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d0:	f7ff f906 	bl	80023e0 <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d8:	f7ff f902 	bl	80023e0 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e095      	b.n	800331a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ee:	4b4e      	ldr	r3, [pc, #312]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 020c 	and.w	r2, r3, #12
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d1eb      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d023      	beq.n	8003254 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003218:	4b43      	ldr	r3, [pc, #268]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4a42      	ldr	r2, [pc, #264]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 800321e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003222:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d007      	beq.n	8003240 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003230:	4b3d      	ldr	r3, [pc, #244]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003238:	4a3b      	ldr	r2, [pc, #236]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 800323a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800323e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003240:	4b39      	ldr	r3, [pc, #228]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4936      	ldr	r1, [pc, #216]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
 8003252:	e008      	b.n	8003266 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b80      	cmp	r3, #128	@ 0x80
 8003258:	d105      	bne.n	8003266 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800325a:	4b33      	ldr	r3, [pc, #204]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	4a32      	ldr	r2, [pc, #200]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 8003260:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003264:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003266:	4b2f      	ldr	r3, [pc, #188]	@ (8003324 <HAL_RCC_ClockConfig+0x260>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d21d      	bcs.n	80032b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003274:	4b2b      	ldr	r3, [pc, #172]	@ (8003324 <HAL_RCC_ClockConfig+0x260>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f023 020f 	bic.w	r2, r3, #15
 800327c:	4929      	ldr	r1, [pc, #164]	@ (8003324 <HAL_RCC_ClockConfig+0x260>)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	4313      	orrs	r3, r2
 8003282:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003284:	f7ff f8ac 	bl	80023e0 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328c:	f7ff f8a8 	bl	80023e0 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e03b      	b.n	800331a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a2:	4b20      	ldr	r3, [pc, #128]	@ (8003324 <HAL_RCC_ClockConfig+0x260>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d1ed      	bne.n	800328c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	4917      	ldr	r1, [pc, #92]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d009      	beq.n	80032ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032da:	4b13      	ldr	r3, [pc, #76]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	490f      	ldr	r1, [pc, #60]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032ee:	f000 f825 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80032f2:	4602      	mov	r2, r0
 80032f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003328 <HAL_RCC_ClockConfig+0x264>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	490c      	ldr	r1, [pc, #48]	@ (8003330 <HAL_RCC_ClockConfig+0x26c>)
 8003300:	5ccb      	ldrb	r3, [r1, r3]
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	fa22 f303 	lsr.w	r3, r2, r3
 800330a:	4a0a      	ldr	r2, [pc, #40]	@ (8003334 <HAL_RCC_ClockConfig+0x270>)
 800330c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800330e:	4b0a      	ldr	r3, [pc, #40]	@ (8003338 <HAL_RCC_ClockConfig+0x274>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff f818 	bl	8002348 <HAL_InitTick>
 8003318:	4603      	mov	r3, r0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40022000 	.word	0x40022000
 8003328:	40021000 	.word	0x40021000
 800332c:	04c4b400 	.word	0x04c4b400
 8003330:	08003c78 	.word	0x08003c78
 8003334:	20000000 	.word	0x20000000
 8003338:	20000004 	.word	0x20000004

0800333c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003342:	4b2c      	ldr	r3, [pc, #176]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b04      	cmp	r3, #4
 800334c:	d102      	bne.n	8003354 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800334e:	4b2a      	ldr	r3, [pc, #168]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	e047      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003354:	4b27      	ldr	r3, [pc, #156]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b08      	cmp	r3, #8
 800335e:	d102      	bne.n	8003366 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003360:	4b26      	ldr	r3, [pc, #152]	@ (80033fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	e03e      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003366:	4b23      	ldr	r3, [pc, #140]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b0c      	cmp	r3, #12
 8003370:	d136      	bne.n	80033e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003372:	4b20      	ldr	r3, [pc, #128]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800337c:	4b1d      	ldr	r3, [pc, #116]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	3301      	adds	r3, #1
 8003388:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b03      	cmp	r3, #3
 800338e:	d10c      	bne.n	80033aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003390:	4a1a      	ldr	r2, [pc, #104]	@ (80033fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	fbb2 f3f3 	udiv	r3, r2, r3
 8003398:	4a16      	ldr	r2, [pc, #88]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800339a:	68d2      	ldr	r2, [r2, #12]
 800339c:	0a12      	lsrs	r2, r2, #8
 800339e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	617b      	str	r3, [r7, #20]
      break;
 80033a8:	e00c      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033aa:	4a13      	ldr	r2, [pc, #76]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b2:	4a10      	ldr	r2, [pc, #64]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033b4:	68d2      	ldr	r2, [r2, #12]
 80033b6:	0a12      	lsrs	r2, r2, #8
 80033b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80033bc:	fb02 f303 	mul.w	r3, r2, r3
 80033c0:	617b      	str	r3, [r7, #20]
      break;
 80033c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033c4:	4b0b      	ldr	r3, [pc, #44]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	0e5b      	lsrs	r3, r3, #25
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	3301      	adds	r3, #1
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	e001      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80033e4:	693b      	ldr	r3, [r7, #16]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000
 80033f8:	00f42400 	.word	0x00f42400
 80033fc:	02dc6c00 	.word	0x02dc6c00

08003400 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003406:	4b1e      	ldr	r3, [pc, #120]	@ (8003480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003410:	4b1b      	ldr	r3, [pc, #108]	@ (8003480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	3301      	adds	r3, #1
 800341c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	2b03      	cmp	r3, #3
 8003422:	d10c      	bne.n	800343e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003424:	4a17      	ldr	r2, [pc, #92]	@ (8003484 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	fbb2 f3f3 	udiv	r3, r2, r3
 800342c:	4a14      	ldr	r2, [pc, #80]	@ (8003480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800342e:	68d2      	ldr	r2, [r2, #12]
 8003430:	0a12      	lsrs	r2, r2, #8
 8003432:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003436:	fb02 f303 	mul.w	r3, r2, r3
 800343a:	617b      	str	r3, [r7, #20]
    break;
 800343c:	e00c      	b.n	8003458 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800343e:	4a12      	ldr	r2, [pc, #72]	@ (8003488 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	fbb2 f3f3 	udiv	r3, r2, r3
 8003446:	4a0e      	ldr	r2, [pc, #56]	@ (8003480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003448:	68d2      	ldr	r2, [r2, #12]
 800344a:	0a12      	lsrs	r2, r2, #8
 800344c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003450:	fb02 f303 	mul.w	r3, r2, r3
 8003454:	617b      	str	r3, [r7, #20]
    break;
 8003456:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003458:	4b09      	ldr	r3, [pc, #36]	@ (8003480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	0e5b      	lsrs	r3, r3, #25
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	3301      	adds	r3, #1
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003472:	687b      	ldr	r3, [r7, #4]
}
 8003474:	4618      	mov	r0, r3
 8003476:	371c      	adds	r7, #28
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	40021000 	.word	0x40021000
 8003484:	02dc6c00 	.word	0x02dc6c00
 8003488:	00f42400 	.word	0x00f42400

0800348c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e09d      	b.n	80035da <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d108      	bne.n	80034b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034ae:	d009      	beq.n	80034c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	61da      	str	r2, [r3, #28]
 80034b6:	e005      	b.n	80034c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fe fe6a 	bl	80021b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003504:	d902      	bls.n	800350c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	e002      	b.n	8003512 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800350c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003510:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800351a:	d007      	beq.n	800352c <HAL_SPI_Init+0xa0>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003524:	d002      	beq.n	800352c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800356e:	ea42 0103 	orr.w	r1, r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003576:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	0c1b      	lsrs	r3, r3, #16
 8003588:	f003 0204 	and.w	r2, r3, #4
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80035a8:	ea42 0103 	orr.w	r1, r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69da      	ldr	r2, [r3, #28]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b088      	sub	sp, #32
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	4613      	mov	r3, r2
 80035f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_SPI_Transmit+0x22>
 8003600:	2302      	movs	r3, #2
 8003602:	e15f      	b.n	80038c4 <HAL_SPI_Transmit+0x2e2>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800360c:	f7fe fee8 	bl	80023e0 <HAL_GetTick>
 8003610:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b01      	cmp	r3, #1
 8003620:	d002      	beq.n	8003628 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003622:	2302      	movs	r3, #2
 8003624:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003626:	e148      	b.n	80038ba <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_SPI_Transmit+0x52>
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d102      	bne.n	800363a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003638:	e13f      	b.n	80038ba <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2203      	movs	r2, #3
 800363e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	88fa      	ldrh	r2, [r7, #6]
 8003652:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	88fa      	ldrh	r2, [r7, #6]
 8003658:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003684:	d10f      	bne.n	80036a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003694:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b0:	2b40      	cmp	r3, #64	@ 0x40
 80036b2:	d007      	beq.n	80036c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036cc:	d94f      	bls.n	800376e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_SPI_Transmit+0xfa>
 80036d6:	8afb      	ldrh	r3, [r7, #22]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d142      	bne.n	8003762 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e0:	881a      	ldrh	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ec:	1c9a      	adds	r2, r3, #2
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003700:	e02f      	b.n	8003762 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b02      	cmp	r3, #2
 800370e:	d112      	bne.n	8003736 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003720:	1c9a      	adds	r2, r3, #2
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003734:	e015      	b.n	8003762 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003736:	f7fe fe53 	bl	80023e0 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d803      	bhi.n	800374e <HAL_SPI_Transmit+0x16c>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374c:	d102      	bne.n	8003754 <HAL_SPI_Transmit+0x172>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d106      	bne.n	8003762 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003760:	e0ab      	b.n	80038ba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1ca      	bne.n	8003702 <HAL_SPI_Transmit+0x120>
 800376c:	e080      	b.n	8003870 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_SPI_Transmit+0x19a>
 8003776:	8afb      	ldrh	r3, [r7, #22]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d174      	bne.n	8003866 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d912      	bls.n	80037ac <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378a:	881a      	ldrh	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003796:	1c9a      	adds	r2, r3, #2
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b02      	subs	r3, #2
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037aa:	e05c      	b.n	8003866 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	330c      	adds	r3, #12
 80037b6:	7812      	ldrb	r2, [r2, #0]
 80037b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80037d2:	e048      	b.n	8003866 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d12b      	bne.n	800383a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d912      	bls.n	8003812 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f0:	881a      	ldrh	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fc:	1c9a      	adds	r2, r3, #2
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b02      	subs	r3, #2
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003810:	e029      	b.n	8003866 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	330c      	adds	r3, #12
 800381c:	7812      	ldrb	r2, [r2, #0]
 800381e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003838:	e015      	b.n	8003866 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800383a:	f7fe fdd1 	bl	80023e0 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d803      	bhi.n	8003852 <HAL_SPI_Transmit+0x270>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003850:	d102      	bne.n	8003858 <HAL_SPI_Transmit+0x276>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d106      	bne.n	8003866 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003864:	e029      	b.n	80038ba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1b1      	bne.n	80037d4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	6839      	ldr	r1, [r7, #0]
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 f947 	bl	8003b08 <SPI_EndRxTxTransaction>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2220      	movs	r2, #32
 8003884:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10a      	bne.n	80038a4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e003      	b.n	80038ba <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80038c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3720      	adds	r7, #32
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	4613      	mov	r3, r2
 80038da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038dc:	f7fe fd80 	bl	80023e0 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	4413      	add	r3, r2
 80038ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038ec:	f7fe fd78 	bl	80023e0 <HAL_GetTick>
 80038f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038f2:	4b39      	ldr	r3, [pc, #228]	@ (80039d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	015b      	lsls	r3, r3, #5
 80038f8:	0d1b      	lsrs	r3, r3, #20
 80038fa:	69fa      	ldr	r2, [r7, #28]
 80038fc:	fb02 f303 	mul.w	r3, r2, r3
 8003900:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003902:	e054      	b.n	80039ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390a:	d050      	beq.n	80039ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800390c:	f7fe fd68 	bl	80023e0 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	69fa      	ldr	r2, [r7, #28]
 8003918:	429a      	cmp	r2, r3
 800391a:	d902      	bls.n	8003922 <SPI_WaitFlagStateUntilTimeout+0x56>
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d13d      	bne.n	800399e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003930:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800393a:	d111      	bne.n	8003960 <SPI_WaitFlagStateUntilTimeout+0x94>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003944:	d004      	beq.n	8003950 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800394e:	d107      	bne.n	8003960 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800395e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003968:	d10f      	bne.n	800398a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003988:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e017      	b.n	80039ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4013      	ands	r3, r2
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	bf0c      	ite	eq
 80039be:	2301      	moveq	r3, #1
 80039c0:	2300      	movne	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d19b      	bne.n	8003904 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3720      	adds	r7, #32
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000000 	.word	0x20000000

080039dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08a      	sub	sp, #40	@ 0x28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80039ea:	2300      	movs	r3, #0
 80039ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80039ee:	f7fe fcf7 	bl	80023e0 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	4413      	add	r3, r2
 80039fc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80039fe:	f7fe fcef 	bl	80023e0 <HAL_GetTick>
 8003a02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	330c      	adds	r3, #12
 8003a0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003a0c:	4b3d      	ldr	r3, [pc, #244]	@ (8003b04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	00da      	lsls	r2, r3, #3
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	0d1b      	lsrs	r3, r3, #20
 8003a1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003a24:	e060      	b.n	8003ae8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003a2c:	d107      	bne.n	8003a3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d104      	bne.n	8003a3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a44:	d050      	beq.n	8003ae8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a46:	f7fe fccb 	bl	80023e0 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d902      	bls.n	8003a5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d13d      	bne.n	8003ad8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a74:	d111      	bne.n	8003a9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a7e:	d004      	beq.n	8003a8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a88:	d107      	bne.n	8003a9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aa2:	d10f      	bne.n	8003ac4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ac2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e010      	b.n	8003afa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	4013      	ands	r3, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d196      	bne.n	8003a26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3728      	adds	r7, #40	@ 0x28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20000000 	.word	0x20000000

08003b08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f7ff ff5b 	bl	80039dc <SPI_WaitFifoStateUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b30:	f043 0220 	orr.w	r2, r3, #32
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e027      	b.n	8003b8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2200      	movs	r2, #0
 8003b44:	2180      	movs	r1, #128	@ 0x80
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f7ff fec0 	bl	80038cc <SPI_WaitFlagStateUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b56:	f043 0220 	orr.w	r2, r3, #32
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e014      	b.n	8003b8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f7ff ff34 	bl	80039dc <SPI_WaitFifoStateUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7e:	f043 0220 	orr.w	r2, r3, #32
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e000      	b.n	8003b8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <memset>:
 8003b94:	4402      	add	r2, r0
 8003b96:	4603      	mov	r3, r0
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d100      	bne.n	8003b9e <memset+0xa>
 8003b9c:	4770      	bx	lr
 8003b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba2:	e7f9      	b.n	8003b98 <memset+0x4>

08003ba4 <__libc_init_array>:
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	4d0d      	ldr	r5, [pc, #52]	@ (8003bdc <__libc_init_array+0x38>)
 8003ba8:	4c0d      	ldr	r4, [pc, #52]	@ (8003be0 <__libc_init_array+0x3c>)
 8003baa:	1b64      	subs	r4, r4, r5
 8003bac:	10a4      	asrs	r4, r4, #2
 8003bae:	2600      	movs	r6, #0
 8003bb0:	42a6      	cmp	r6, r4
 8003bb2:	d109      	bne.n	8003bc8 <__libc_init_array+0x24>
 8003bb4:	4d0b      	ldr	r5, [pc, #44]	@ (8003be4 <__libc_init_array+0x40>)
 8003bb6:	4c0c      	ldr	r4, [pc, #48]	@ (8003be8 <__libc_init_array+0x44>)
 8003bb8:	f000 f818 	bl	8003bec <_init>
 8003bbc:	1b64      	subs	r4, r4, r5
 8003bbe:	10a4      	asrs	r4, r4, #2
 8003bc0:	2600      	movs	r6, #0
 8003bc2:	42a6      	cmp	r6, r4
 8003bc4:	d105      	bne.n	8003bd2 <__libc_init_array+0x2e>
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
 8003bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bcc:	4798      	blx	r3
 8003bce:	3601      	adds	r6, #1
 8003bd0:	e7ee      	b.n	8003bb0 <__libc_init_array+0xc>
 8003bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd6:	4798      	blx	r3
 8003bd8:	3601      	adds	r6, #1
 8003bda:	e7f2      	b.n	8003bc2 <__libc_init_array+0x1e>
 8003bdc:	08003c88 	.word	0x08003c88
 8003be0:	08003c88 	.word	0x08003c88
 8003be4:	08003c88 	.word	0x08003c88
 8003be8:	08003c8c 	.word	0x08003c8c

08003bec <_init>:
 8003bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bee:	bf00      	nop
 8003bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf2:	bc08      	pop	{r3}
 8003bf4:	469e      	mov	lr, r3
 8003bf6:	4770      	bx	lr

08003bf8 <_fini>:
 8003bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfa:	bf00      	nop
 8003bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfe:	bc08      	pop	{r3}
 8003c00:	469e      	mov	lr, r3
 8003c02:	4770      	bx	lr
