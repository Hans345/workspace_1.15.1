
105_MOSFET_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003494  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000814  0800366c  0800366c  0000466c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e80  08003e80  00005014  2**0
                  CONTENTS
  4 .ARM          00000000  08003e80  08003e80  00005014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e80  08003e80  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e80  08003e80  00004e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e84  08003e84  00004e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003e88  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000014  08003e9c  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08003e9c  000051a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f815  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000253a  00000000  00000000  00014859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00016d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb9  00000000  00000000  00017e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002625e  00000000  00000000  00018ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121a3  00000000  00000000  0003ed37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f77fb  00000000  00000000  00050eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001486d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004540  00000000  00000000  00148718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0014cc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003654 	.word	0x08003654

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	08003654 	.word	0x08003654

08000218 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000218:	b590      	push	{r4, r7, lr}
 800021a:	b085      	sub	sp, #20
 800021c:	af02      	add	r7, sp, #8
 800021e:	4604      	mov	r4, r0
 8000220:	4608      	mov	r0, r1
 8000222:	4611      	mov	r1, r2
 8000224:	461a      	mov	r2, r3
 8000226:	4623      	mov	r3, r4
 8000228:	80fb      	strh	r3, [r7, #6]
 800022a:	4603      	mov	r3, r0
 800022c:	80bb      	strh	r3, [r7, #4]
 800022e:	460b      	mov	r3, r1
 8000230:	807b      	strh	r3, [r7, #2]
 8000232:	4613      	mov	r3, r2
 8000234:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000236:	88f8      	ldrh	r0, [r7, #6]
 8000238:	88b9      	ldrh	r1, [r7, #4]
 800023a:	887a      	ldrh	r2, [r7, #2]
 800023c:	883c      	ldrh	r4, [r7, #0]
 800023e:	8b3b      	ldrh	r3, [r7, #24]
 8000240:	9300      	str	r3, [sp, #0]
 8000242:	4623      	mov	r3, r4
 8000244:	f000 fa88 	bl	8000758 <ST7735_FillRectangle>
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	bd90      	pop	{r4, r7, pc}

08000250 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af02      	add	r7, sp, #8
 8000256:	4603      	mov	r3, r0
 8000258:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800025a:	4b08      	ldr	r3, [pc, #32]	@ (800027c <fillScreen+0x2c>)
 800025c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000260:	4b07      	ldr	r3, [pc, #28]	@ (8000280 <fillScreen+0x30>)
 8000262:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000266:	88fb      	ldrh	r3, [r7, #6]
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	460b      	mov	r3, r1
 800026c:	2100      	movs	r1, #0
 800026e:	2000      	movs	r0, #0
 8000270:	f7ff ffd2 	bl	8000218 <fillRect>
}
 8000274:	bf00      	nop
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000030 	.word	0x20000030
 8000280:	20000032 	.word	0x20000032

08000284 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800028e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000292:	f001 fccb 	bl	8001c2c <HAL_GPIO_WritePin>
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}

0800029a <ST7735_Unselect>:

void ST7735_Unselect()
{
 800029a:	b580      	push	{r7, lr}
 800029c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a8:	f001 fcc0 	bl	8001c2c <HAL_GPIO_WritePin>
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <ST7735_Reset>:

void ST7735_Reset()
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2140      	movs	r1, #64	@ 0x40
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002bc:	f001 fcb6 	bl	8001c2c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80002c0:	2005      	movs	r0, #5
 80002c2:	f001 f82d 	bl	8001320 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80002c6:	2201      	movs	r2, #1
 80002c8:	2140      	movs	r1, #64	@ 0x40
 80002ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ce:	f001 fcad 	bl	8001c2c <HAL_GPIO_WritePin>
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002e8:	4806      	ldr	r0, [pc, #24]	@ (8000304 <ST7735_WriteCommand+0x2c>)
 80002ea:	f001 fc9f 	bl	8001c2c <HAL_GPIO_WritePin>
		{

		}
	#endif
	#ifdef WITHOUT_DMA
		HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80002ee:	1df9      	adds	r1, r7, #7
 80002f0:	f04f 33ff 	mov.w	r3, #4294967295
 80002f4:	2201      	movs	r2, #1
 80002f6:	4804      	ldr	r0, [pc, #16]	@ (8000308 <ST7735_WriteCommand+0x30>)
 80002f8:	f002 fb37 	bl	800296a <HAL_SPI_Transmit>
	#endif
}
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	48000400 	.word	0x48000400
 8000308:	2000003c 	.word	0x2000003c

0800030c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000316:	2201      	movs	r2, #1
 8000318:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800031c:	4807      	ldr	r0, [pc, #28]	@ (800033c <ST7735_WriteData+0x30>)
 800031e:	f001 fc85 	bl	8001c2c <HAL_GPIO_WritePin>
    	{

    	}
	#endif
	#ifdef WITHOUT_DMA
    	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	b29a      	uxth	r2, r3
 8000326:	f04f 33ff 	mov.w	r3, #4294967295
 800032a:	6879      	ldr	r1, [r7, #4]
 800032c:	4804      	ldr	r0, [pc, #16]	@ (8000340 <ST7735_WriteData+0x34>)
 800032e:	f002 fb1c 	bl	800296a <HAL_SPI_Transmit>
	#endif
}
 8000332:	bf00      	nop
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	48000400 	.word	0x48000400
 8000340:	2000003c 	.word	0x2000003c

08000344 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	1c5a      	adds	r2, r3, #1
 8000350:	607a      	str	r2, [r7, #4]
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000356:	e034      	b.n	80003c2 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	1c5a      	adds	r2, r3, #1
 800035c:	607a      	str	r2, [r7, #4]
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000362:	7afb      	ldrb	r3, [r7, #11]
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ffb7 	bl	80002d8 <ST7735_WriteCommand>

        numArgs = *addr++;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	1c5a      	adds	r2, r3, #1
 800036e:	607a      	str	r2, [r7, #4]
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000374:	7abb      	ldrb	r3, [r7, #10]
 8000376:	b29b      	uxth	r3, r3
 8000378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800037c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800037e:	7abb      	ldrb	r3, [r7, #10]
 8000380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000384:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000386:	7abb      	ldrb	r3, [r7, #10]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d008      	beq.n	800039e <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800038c:	7abb      	ldrb	r3, [r7, #10]
 800038e:	4619      	mov	r1, r3
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f7ff ffbb 	bl	800030c <ST7735_WriteData>
            addr += numArgs;
 8000396:	7abb      	ldrb	r3, [r7, #10]
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	4413      	add	r3, r2
 800039c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800039e:	89bb      	ldrh	r3, [r7, #12]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d00e      	beq.n	80003c2 <DisplayInit+0x7e>
            ms = *addr++;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	1c5a      	adds	r2, r3, #1
 80003a8:	607a      	str	r2, [r7, #4]
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80003ae:	89bb      	ldrh	r3, [r7, #12]
 80003b0:	2bff      	cmp	r3, #255	@ 0xff
 80003b2:	d102      	bne.n	80003ba <DisplayInit+0x76>
 80003b4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80003b8:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80003ba:	89bb      	ldrh	r3, [r7, #12]
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 ffaf 	bl	8001320 <HAL_Delay>
    while(numCommands--) {
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	1e5a      	subs	r2, r3, #1
 80003c6:	73fa      	strb	r2, [r7, #15]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d1c5      	bne.n	8000358 <DisplayInit+0x14>
        }
    }
}
 80003cc:	bf00      	nop
 80003ce:	bf00      	nop
 80003d0:	3710      	adds	r7, #16
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80003d8:	b590      	push	{r4, r7, lr}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4604      	mov	r4, r0
 80003e0:	4608      	mov	r0, r1
 80003e2:	4611      	mov	r1, r2
 80003e4:	461a      	mov	r2, r3
 80003e6:	4623      	mov	r3, r4
 80003e8:	71fb      	strb	r3, [r7, #7]
 80003ea:	4603      	mov	r3, r0
 80003ec:	71bb      	strb	r3, [r7, #6]
 80003ee:	460b      	mov	r3, r1
 80003f0:	717b      	strb	r3, [r7, #5]
 80003f2:	4613      	mov	r3, r2
 80003f4:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80003f6:	202a      	movs	r0, #42	@ 0x2a
 80003f8:	f7ff ff6e 	bl	80002d8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80003fc:	2300      	movs	r3, #0
 80003fe:	733b      	strb	r3, [r7, #12]
 8000400:	4b17      	ldr	r3, [pc, #92]	@ (8000460 <ST7735_SetAddressWindow+0x88>)
 8000402:	781a      	ldrb	r2, [r3, #0]
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	4413      	add	r3, r2
 8000408:	b2db      	uxtb	r3, r3
 800040a:	737b      	strb	r3, [r7, #13]
 800040c:	2300      	movs	r3, #0
 800040e:	73bb      	strb	r3, [r7, #14]
 8000410:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <ST7735_SetAddressWindow+0x88>)
 8000412:	781a      	ldrb	r2, [r3, #0]
 8000414:	797b      	ldrb	r3, [r7, #5]
 8000416:	4413      	add	r3, r2
 8000418:	b2db      	uxtb	r3, r3
 800041a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800041c:	f107 030c 	add.w	r3, r7, #12
 8000420:	2104      	movs	r1, #4
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff ff72 	bl	800030c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000428:	202b      	movs	r0, #43	@ 0x2b
 800042a:	f7ff ff55 	bl	80002d8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800042e:	4b0d      	ldr	r3, [pc, #52]	@ (8000464 <ST7735_SetAddressWindow+0x8c>)
 8000430:	781a      	ldrb	r2, [r3, #0]
 8000432:	79bb      	ldrb	r3, [r7, #6]
 8000434:	4413      	add	r3, r2
 8000436:	b2db      	uxtb	r3, r3
 8000438:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800043a:	4b0a      	ldr	r3, [pc, #40]	@ (8000464 <ST7735_SetAddressWindow+0x8c>)
 800043c:	781a      	ldrb	r2, [r3, #0]
 800043e:	793b      	ldrb	r3, [r7, #4]
 8000440:	4413      	add	r3, r2
 8000442:	b2db      	uxtb	r3, r3
 8000444:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000446:	f107 030c 	add.w	r3, r7, #12
 800044a:	2104      	movs	r1, #4
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ff5d 	bl	800030c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000452:	202c      	movs	r0, #44	@ 0x2c
 8000454:	f7ff ff40 	bl	80002d8 <ST7735_WriteCommand>
}
 8000458:	bf00      	nop
 800045a:	3714      	adds	r7, #20
 800045c:	46bd      	mov	sp, r7
 800045e:	bd90      	pop	{r4, r7, pc}
 8000460:	20000037 	.word	0x20000037
 8000464:	20000038 	.word	0x20000038

08000468 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000472:	f7ff ff07 	bl	8000284 <ST7735_Select>
    ST7735_Reset();
 8000476:	f7ff ff1b 	bl	80002b0 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800047a:	480c      	ldr	r0, [pc, #48]	@ (80004ac <ST7735_Init+0x44>)
 800047c:	f7ff ff62 	bl	8000344 <DisplayInit>
    DisplayInit(init_cmds2);
 8000480:	480b      	ldr	r0, [pc, #44]	@ (80004b0 <ST7735_Init+0x48>)
 8000482:	f7ff ff5f 	bl	8000344 <DisplayInit>
    DisplayInit(init_cmds3);
 8000486:	480b      	ldr	r0, [pc, #44]	@ (80004b4 <ST7735_Init+0x4c>)
 8000488:	f7ff ff5c 	bl	8000344 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 800048c:	4b0a      	ldr	r3, [pc, #40]	@ (80004b8 <ST7735_Init+0x50>)
 800048e:	2202      	movs	r2, #2
 8000490:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 8000492:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <ST7735_Init+0x54>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	4618      	mov	r0, r3
 800049c:	f000 f810 	bl	80004c0 <ST7735_SetRotation>
    ST7735_Unselect();
 80004a0:	f7ff fefb 	bl	800029a <ST7735_Unselect>

}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	08003690 	.word	0x08003690
 80004b0:	080036c8 	.word	0x080036c8
 80004b4:	080036d8 	.word	0x080036d8
 80004b8:	20000035 	.word	0x20000035
 80004bc:	20000036 	.word	0x20000036

080004c0 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	f003 0303 	and.w	r3, r3, #3
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	4b33      	ldr	r3, [pc, #204]	@ (80005a4 <ST7735_SetRotation+0xe4>)
 80004d8:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80004da:	4b32      	ldr	r3, [pc, #200]	@ (80005a4 <ST7735_SetRotation+0xe4>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b03      	cmp	r3, #3
 80004e0:	d84e      	bhi.n	8000580 <ST7735_SetRotation+0xc0>
 80004e2:	a201      	add	r2, pc, #4	@ (adr r2, 80004e8 <ST7735_SetRotation+0x28>)
 80004e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e8:	080004f9 	.word	0x080004f9
 80004ec:	0800051b 	.word	0x0800051b
 80004f0:	0800053d 	.word	0x0800053d
 80004f4:	0800055f 	.word	0x0800055f
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80004f8:	23c0      	movs	r3, #192	@ 0xc0
 80004fa:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80004fc:	4b2a      	ldr	r3, [pc, #168]	@ (80005a8 <ST7735_SetRotation+0xe8>)
 80004fe:	2280      	movs	r2, #128	@ 0x80
 8000500:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000502:	4b2a      	ldr	r3, [pc, #168]	@ (80005ac <ST7735_SetRotation+0xec>)
 8000504:	2280      	movs	r2, #128	@ 0x80
 8000506:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000508:	4b29      	ldr	r3, [pc, #164]	@ (80005b0 <ST7735_SetRotation+0xf0>)
 800050a:	781a      	ldrb	r2, [r3, #0]
 800050c:	4b29      	ldr	r3, [pc, #164]	@ (80005b4 <ST7735_SetRotation+0xf4>)
 800050e:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000510:	4b29      	ldr	r3, [pc, #164]	@ (80005b8 <ST7735_SetRotation+0xf8>)
 8000512:	781a      	ldrb	r2, [r3, #0]
 8000514:	4b29      	ldr	r3, [pc, #164]	@ (80005bc <ST7735_SetRotation+0xfc>)
 8000516:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000518:	e032      	b.n	8000580 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800051a:	23a0      	movs	r3, #160	@ 0xa0
 800051c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800051e:	4b23      	ldr	r3, [pc, #140]	@ (80005ac <ST7735_SetRotation+0xec>)
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000524:	4b20      	ldr	r3, [pc, #128]	@ (80005a8 <ST7735_SetRotation+0xe8>)
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800052a:	4b21      	ldr	r3, [pc, #132]	@ (80005b0 <ST7735_SetRotation+0xf0>)
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	4b23      	ldr	r3, [pc, #140]	@ (80005bc <ST7735_SetRotation+0xfc>)
 8000530:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000532:	4b21      	ldr	r3, [pc, #132]	@ (80005b8 <ST7735_SetRotation+0xf8>)
 8000534:	781a      	ldrb	r2, [r3, #0]
 8000536:	4b1f      	ldr	r3, [pc, #124]	@ (80005b4 <ST7735_SetRotation+0xf4>)
 8000538:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800053a:	e021      	b.n	8000580 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800053c:	2300      	movs	r3, #0
 800053e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000540:	4b19      	ldr	r3, [pc, #100]	@ (80005a8 <ST7735_SetRotation+0xe8>)
 8000542:	2280      	movs	r2, #128	@ 0x80
 8000544:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000546:	4b19      	ldr	r3, [pc, #100]	@ (80005ac <ST7735_SetRotation+0xec>)
 8000548:	2280      	movs	r2, #128	@ 0x80
 800054a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 800054c:	4b18      	ldr	r3, [pc, #96]	@ (80005b0 <ST7735_SetRotation+0xf0>)
 800054e:	781a      	ldrb	r2, [r3, #0]
 8000550:	4b18      	ldr	r3, [pc, #96]	@ (80005b4 <ST7735_SetRotation+0xf4>)
 8000552:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000554:	4b18      	ldr	r3, [pc, #96]	@ (80005b8 <ST7735_SetRotation+0xf8>)
 8000556:	781a      	ldrb	r2, [r3, #0]
 8000558:	4b18      	ldr	r3, [pc, #96]	@ (80005bc <ST7735_SetRotation+0xfc>)
 800055a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800055c:	e010      	b.n	8000580 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800055e:	2360      	movs	r3, #96	@ 0x60
 8000560:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000562:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <ST7735_SetRotation+0xec>)
 8000564:	2280      	movs	r2, #128	@ 0x80
 8000566:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000568:	4b0f      	ldr	r3, [pc, #60]	@ (80005a8 <ST7735_SetRotation+0xe8>)
 800056a:	2280      	movs	r2, #128	@ 0x80
 800056c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800056e:	4b10      	ldr	r3, [pc, #64]	@ (80005b0 <ST7735_SetRotation+0xf0>)
 8000570:	781a      	ldrb	r2, [r3, #0]
 8000572:	4b12      	ldr	r3, [pc, #72]	@ (80005bc <ST7735_SetRotation+0xfc>)
 8000574:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000576:	4b10      	ldr	r3, [pc, #64]	@ (80005b8 <ST7735_SetRotation+0xf8>)
 8000578:	781a      	ldrb	r2, [r3, #0]
 800057a:	4b0e      	ldr	r3, [pc, #56]	@ (80005b4 <ST7735_SetRotation+0xf4>)
 800057c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800057e:	bf00      	nop
  }
  ST7735_Select();
 8000580:	f7ff fe80 	bl	8000284 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000584:	2036      	movs	r0, #54	@ 0x36
 8000586:	f7ff fea7 	bl	80002d8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800058a:	f107 030f 	add.w	r3, r7, #15
 800058e:	2101      	movs	r1, #1
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff febb 	bl	800030c <ST7735_WriteData>
  ST7735_Unselect();
 8000596:	f7ff fe80 	bl	800029a <ST7735_Unselect>
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000034 	.word	0x20000034
 80005a8:	20000032 	.word	0x20000032
 80005ac:	20000030 	.word	0x20000030
 80005b0:	20000035 	.word	0x20000035
 80005b4:	20000037 	.word	0x20000037
 80005b8:	20000036 	.word	0x20000036
 80005bc:	20000038 	.word	0x20000038

080005c0 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80005c0:	b082      	sub	sp, #8
 80005c2:	b590      	push	{r4, r7, lr}
 80005c4:	b089      	sub	sp, #36	@ 0x24
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80005ca:	4603      	mov	r3, r0
 80005cc:	80fb      	strh	r3, [r7, #6]
 80005ce:	460b      	mov	r3, r1
 80005d0:	80bb      	strh	r3, [r7, #4]
 80005d2:	4613      	mov	r3, r2
 80005d4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	b2d8      	uxtb	r0, r3
 80005da:	88bb      	ldrh	r3, [r7, #4]
 80005dc:	b2d9      	uxtb	r1, r3
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80005e6:	4413      	add	r3, r2
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	3b01      	subs	r3, #1
 80005ec:	b2dc      	uxtb	r4, r3
 80005ee:	88bb      	ldrh	r3, [r7, #4]
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80005f6:	4413      	add	r3, r2
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	3b01      	subs	r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	4622      	mov	r2, r4
 8000600:	f7ff feea 	bl	80003d8 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]
 8000608:	e043      	b.n	8000692 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800060a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800060c:	78fb      	ldrb	r3, [r7, #3]
 800060e:	3b20      	subs	r3, #32
 8000610:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000614:	fb01 f303 	mul.w	r3, r1, r3
 8000618:	4619      	mov	r1, r3
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	440b      	add	r3, r1
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	4413      	add	r3, r2
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
 800062a:	e029      	b.n	8000680 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	69bb      	ldr	r3, [r7, #24]
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000638:	2b00      	cmp	r3, #0
 800063a:	d00e      	beq.n	800065a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800063c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800063e:	0a1b      	lsrs	r3, r3, #8
 8000640:	b29b      	uxth	r3, r3
 8000642:	b2db      	uxtb	r3, r3
 8000644:	743b      	strb	r3, [r7, #16]
 8000646:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000648:	b2db      	uxtb	r3, r3
 800064a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800064c:	f107 0310 	add.w	r3, r7, #16
 8000650:	2102      	movs	r1, #2
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fe5a 	bl	800030c <ST7735_WriteData>
 8000658:	e00f      	b.n	800067a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800065a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800065e:	0a1b      	lsrs	r3, r3, #8
 8000660:	b29b      	uxth	r3, r3
 8000662:	b2db      	uxtb	r3, r3
 8000664:	733b      	strb	r3, [r7, #12]
 8000666:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800066a:	b2db      	uxtb	r3, r3
 800066c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fe49 	bl	800030c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800067a:	69bb      	ldr	r3, [r7, #24]
 800067c:	3301      	adds	r3, #1
 800067e:	61bb      	str	r3, [r7, #24]
 8000680:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000684:	461a      	mov	r2, r3
 8000686:	69bb      	ldr	r3, [r7, #24]
 8000688:	4293      	cmp	r3, r2
 800068a:	d3cf      	bcc.n	800062c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	3301      	adds	r3, #1
 8000690:	61fb      	str	r3, [r7, #28]
 8000692:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000696:	461a      	mov	r2, r3
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	4293      	cmp	r3, r2
 800069c:	d3b5      	bcc.n	800060a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	3724      	adds	r7, #36	@ 0x24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80006aa:	b002      	add	sp, #8
 80006ac:	4770      	bx	lr
	...

080006b0 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80006b0:	b082      	sub	sp, #8
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b086      	sub	sp, #24
 80006b6:	af04      	add	r7, sp, #16
 80006b8:	603a      	str	r2, [r7, #0]
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	4603      	mov	r3, r0
 80006be:	80fb      	strh	r3, [r7, #6]
 80006c0:	460b      	mov	r3, r1
 80006c2:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80006c4:	f7ff fdde 	bl	8000284 <ST7735_Select>

    while(*str) {
 80006c8:	e033      	b.n	8000732 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	7d3a      	ldrb	r2, [r7, #20]
 80006ce:	4413      	add	r3, r2
 80006d0:	4a1f      	ldr	r2, [pc, #124]	@ (8000750 <ST7735_WriteString+0xa0>)
 80006d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80006d6:	4293      	cmp	r3, r2
 80006d8:	db16      	blt.n	8000708 <ST7735_WriteString+0x58>
            x = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80006de:	7d7b      	ldrb	r3, [r7, #21]
 80006e0:	461a      	mov	r2, r3
 80006e2:	88bb      	ldrh	r3, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 80006e8:	88bb      	ldrh	r3, [r7, #4]
 80006ea:	7d7a      	ldrb	r2, [r7, #21]
 80006ec:	4413      	add	r3, r2
 80006ee:	4a19      	ldr	r2, [pc, #100]	@ (8000754 <ST7735_WriteString+0xa4>)
 80006f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80006f4:	4293      	cmp	r3, r2
 80006f6:	da21      	bge.n	800073c <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b20      	cmp	r3, #32
 80006fe:	d103      	bne.n	8000708 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	3301      	adds	r3, #1
 8000704:	603b      	str	r3, [r7, #0]
                continue;
 8000706:	e014      	b.n	8000732 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	781a      	ldrb	r2, [r3, #0]
 800070c:	88b9      	ldrh	r1, [r7, #4]
 800070e:	88f8      	ldrh	r0, [r7, #6]
 8000710:	8c3b      	ldrh	r3, [r7, #32]
 8000712:	9302      	str	r3, [sp, #8]
 8000714:	8bbb      	ldrh	r3, [r7, #28]
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	f7ff ff4f 	bl	80005c0 <ST7735_WriteChar>
        x += font.width;
 8000722:	7d3b      	ldrb	r3, [r7, #20]
 8000724:	461a      	mov	r2, r3
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	4413      	add	r3, r2
 800072a:	80fb      	strh	r3, [r7, #6]
        str++;
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d1c7      	bne.n	80006ca <ST7735_WriteString+0x1a>
 800073a:	e000      	b.n	800073e <ST7735_WriteString+0x8e>
                break;
 800073c:	bf00      	nop
    }

    ST7735_Unselect();
 800073e:	f7ff fdac 	bl	800029a <ST7735_Unselect>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800074c:	b002      	add	sp, #8
 800074e:	4770      	bx	lr
 8000750:	20000030 	.word	0x20000030
 8000754:	20000032 	.word	0x20000032

08000758 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	4604      	mov	r4, r0
 8000760:	4608      	mov	r0, r1
 8000762:	4611      	mov	r1, r2
 8000764:	461a      	mov	r2, r3
 8000766:	4623      	mov	r3, r4
 8000768:	80fb      	strh	r3, [r7, #6]
 800076a:	4603      	mov	r3, r0
 800076c:	80bb      	strh	r3, [r7, #4]
 800076e:	460b      	mov	r3, r1
 8000770:	807b      	strh	r3, [r7, #2]
 8000772:	4613      	mov	r3, r2
 8000774:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	4a38      	ldr	r2, [pc, #224]	@ (800085c <ST7735_FillRectangle+0x104>)
 800077a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800077e:	4293      	cmp	r3, r2
 8000780:	da67      	bge.n	8000852 <ST7735_FillRectangle+0xfa>
 8000782:	88bb      	ldrh	r3, [r7, #4]
 8000784:	4a36      	ldr	r2, [pc, #216]	@ (8000860 <ST7735_FillRectangle+0x108>)
 8000786:	f9b2 2000 	ldrsh.w	r2, [r2]
 800078a:	4293      	cmp	r3, r2
 800078c:	da61      	bge.n	8000852 <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 800078e:	88fa      	ldrh	r2, [r7, #6]
 8000790:	887b      	ldrh	r3, [r7, #2]
 8000792:	4413      	add	r3, r2
 8000794:	4a31      	ldr	r2, [pc, #196]	@ (800085c <ST7735_FillRectangle+0x104>)
 8000796:	f9b2 2000 	ldrsh.w	r2, [r2]
 800079a:	4293      	cmp	r3, r2
 800079c:	dd06      	ble.n	80007ac <ST7735_FillRectangle+0x54>
 800079e:	4b2f      	ldr	r3, [pc, #188]	@ (800085c <ST7735_FillRectangle+0x104>)
 80007a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 80007ac:	88ba      	ldrh	r2, [r7, #4]
 80007ae:	883b      	ldrh	r3, [r7, #0]
 80007b0:	4413      	add	r3, r2
 80007b2:	4a2b      	ldr	r2, [pc, #172]	@ (8000860 <ST7735_FillRectangle+0x108>)
 80007b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80007b8:	4293      	cmp	r3, r2
 80007ba:	dd06      	ble.n	80007ca <ST7735_FillRectangle+0x72>
 80007bc:	4b28      	ldr	r3, [pc, #160]	@ (8000860 <ST7735_FillRectangle+0x108>)
 80007be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	88bb      	ldrh	r3, [r7, #4]
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80007ca:	f7ff fd5b 	bl	8000284 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	b2d8      	uxtb	r0, r3
 80007d2:	88bb      	ldrh	r3, [r7, #4]
 80007d4:	b2d9      	uxtb	r1, r3
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	887b      	ldrh	r3, [r7, #2]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4413      	add	r3, r2
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	3b01      	subs	r3, #1
 80007e4:	b2dc      	uxtb	r4, r3
 80007e6:	88bb      	ldrh	r3, [r7, #4]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	883b      	ldrh	r3, [r7, #0]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4413      	add	r3, r2
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	3b01      	subs	r3, #1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	4622      	mov	r2, r4
 80007f8:	f7ff fdee 	bl	80003d8 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80007fc:	8c3b      	ldrh	r3, [r7, #32]
 80007fe:	0a1b      	lsrs	r3, r3, #8
 8000800:	b29b      	uxth	r3, r3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	733b      	strb	r3, [r7, #12]
 8000806:	8c3b      	ldrh	r3, [r7, #32]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000812:	4814      	ldr	r0, [pc, #80]	@ (8000864 <ST7735_FillRectangle+0x10c>)
 8000814:	f001 fa0a 	bl	8001c2c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000818:	883b      	ldrh	r3, [r7, #0]
 800081a:	80bb      	strh	r3, [r7, #4]
 800081c:	e013      	b.n	8000846 <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 800081e:	887b      	ldrh	r3, [r7, #2]
 8000820:	80fb      	strh	r3, [r7, #6]
 8000822:	e00a      	b.n	800083a <ST7735_FillRectangle+0xe2>
				{

				}
			#endif
			#ifdef WITHOUT_DMA
				HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000824:	f107 010c 	add.w	r1, r7, #12
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	2202      	movs	r2, #2
 800082e:	480e      	ldr	r0, [pc, #56]	@ (8000868 <ST7735_FillRectangle+0x110>)
 8000830:	f002 f89b 	bl	800296a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000834:	88fb      	ldrh	r3, [r7, #6]
 8000836:	3b01      	subs	r3, #1
 8000838:	80fb      	strh	r3, [r7, #6]
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d1f1      	bne.n	8000824 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 8000840:	88bb      	ldrh	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	80bb      	strh	r3, [r7, #4]
 8000846:	88bb      	ldrh	r3, [r7, #4]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1e8      	bne.n	800081e <ST7735_FillRectangle+0xc6>
			#endif
        }
    }

    ST7735_Unselect();
 800084c:	f7ff fd25 	bl	800029a <ST7735_Unselect>
 8000850:	e000      	b.n	8000854 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 8000852:	bf00      	nop
}
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	bd90      	pop	{r4, r7, pc}
 800085a:	bf00      	nop
 800085c:	20000030 	.word	0x20000030
 8000860:	20000032 	.word	0x20000032
 8000864:	48000400 	.word	0x48000400
 8000868:	2000003c 	.word	0x2000003c

0800086c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */

/* Interrupts *****************************************************************/
// GPIO Callback
// Diese Callback Funktion wird beim drücken des Taster B1 aufgerufen
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	80fb      	strh	r3, [r7, #6]
	if (handler_state == IDLE && button_flag == 0) {
 8000876:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x68>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d10a      	bne.n	8000894 <HAL_GPIO_EXTI_Callback+0x28>
 800087e:	4b16      	ldr	r3, [pc, #88]	@ (80008d8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d106      	bne.n	8000894 <HAL_GPIO_EXTI_Callback+0x28>
		set_handler_state(ON1);
 8000886:	2001      	movs	r0, #1
 8000888:	f000 fc7e 	bl	8001188 <set_handler_state>
		// Start Timer 17
		HAL_TIM_Base_Start_IT(&htim17);
 800088c:	4813      	ldr	r0, [pc, #76]	@ (80008dc <HAL_GPIO_EXTI_Callback+0x70>)
 800088e:	f002 fb9d 	bl	8002fcc <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim17);
	} else {
		set_handler_state(IDLE);
		button_flag = 0;
	}
}
 8000892:	e01b      	b.n	80008cc <HAL_GPIO_EXTI_Callback+0x60>
	} else if (handler_state == ON1) {
 8000894:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x68>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d106      	bne.n	80008aa <HAL_GPIO_EXTI_Callback+0x3e>
		set_handler_state(ON2);
 800089c:	2002      	movs	r0, #2
 800089e:	f000 fc73 	bl	8001188 <set_handler_state>
		HAL_TIM_Base_Start_IT(&htim17);
 80008a2:	480e      	ldr	r0, [pc, #56]	@ (80008dc <HAL_GPIO_EXTI_Callback+0x70>)
 80008a4:	f002 fb92 	bl	8002fcc <HAL_TIM_Base_Start_IT>
}
 80008a8:	e010      	b.n	80008cc <HAL_GPIO_EXTI_Callback+0x60>
	} else if (handler_state == ON2) {
 80008aa:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x68>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d106      	bne.n	80008c0 <HAL_GPIO_EXTI_Callback+0x54>
		set_handler_state(ON1);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f000 fc68 	bl	8001188 <set_handler_state>
		HAL_TIM_Base_Start_IT(&htim17);
 80008b8:	4808      	ldr	r0, [pc, #32]	@ (80008dc <HAL_GPIO_EXTI_Callback+0x70>)
 80008ba:	f002 fb87 	bl	8002fcc <HAL_TIM_Base_Start_IT>
}
 80008be:	e005      	b.n	80008cc <HAL_GPIO_EXTI_Callback+0x60>
		set_handler_state(IDLE);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 fc61 	bl	8001188 <set_handler_state>
		button_flag = 0;
 80008c6:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <HAL_GPIO_EXTI_Callback+0x6c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000199 	.word	0x20000199
 80008d8:	20000198 	.word	0x20000198
 80008dc:	2000014c 	.word	0x2000014c

080008e0 <HAL_TIM_PeriodElapsedCallback>:

// Timer Callback
// Diese Callback Funktion wird immer nach erreichen des Timer maximums aufgerufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	// Überprüfe welcher Timer diese callback Funktion aufruft
	if (htim == &htim16) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a16      	ldr	r2, [pc, #88]	@ (8000944 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d10b      	bne.n	8000908 <HAL_TIM_PeriodElapsedCallback+0x28>
		// Toggle PC3 alle 100ms
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 80008f0:	2108      	movs	r1, #8
 80008f2:	4815      	ldr	r0, [pc, #84]	@ (8000948 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80008f4:	f001 f9b2 	bl	8001c5c <HAL_GPIO_TogglePin>
		// Handler Zeit um 100ms erhöhen
		if (handler_state == ON2) {
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d11c      	bne.n	800093a <HAL_TIM_PeriodElapsedCallback+0x5a>
			inc_handler_currentTime(100);
 8000900:	2064      	movs	r0, #100	@ 0x64
 8000902:	f000 fc5f 	bl	80011c4 <inc_handler_currentTime>
			button_flag = 1;
		}
		// Toggle PC4 alle 1s
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
	}
}
 8000906:	e018      	b.n	800093a <HAL_TIM_PeriodElapsedCallback+0x5a>
	} else if (htim == &htim17) {
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a11      	ldr	r2, [pc, #68]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d114      	bne.n	800093a <HAL_TIM_PeriodElapsedCallback+0x5a>
		if (HAL_GPIO_ReadPin(B1, B1_PIN)) {
 8000910:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000914:	480c      	ldr	r0, [pc, #48]	@ (8000948 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000916:	f001 f971 	bl	8001bfc <HAL_GPIO_ReadPin>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d008      	beq.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x52>
			set_handler_state(IDLE);
 8000920:	2000      	movs	r0, #0
 8000922:	f000 fc31 	bl	8001188 <set_handler_state>
			HAL_TIM_Base_Stop_IT(&htim17);
 8000926:	480a      	ldr	r0, [pc, #40]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000928:	f002 fbc8 	bl	80030bc <HAL_TIM_Base_Stop_IT>
			button_flag = 1;
 800092c:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8000932:	2110      	movs	r1, #16
 8000934:	4804      	ldr	r0, [pc, #16]	@ (8000948 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000936:	f001 f991 	bl	8001c5c <HAL_GPIO_TogglePin>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000100 	.word	0x20000100
 8000948:	48000800 	.word	0x48000800
 800094c:	20000199 	.word	0x20000199
 8000950:	2000014c 	.word	0x2000014c
 8000954:	20000198 	.word	0x20000198

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095c:	f000 fc6f 	bl	800123e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000960:	f000 f81c 	bl	800099c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000964:	f000 f91e 	bl	8000ba4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000968:	f000 f8f2 	bl	8000b50 <MX_DMA_Init>
  MX_SPI1_Init();
 800096c:	f000 f862 	bl	8000a34 <MX_SPI1_Init>
  MX_TIM16_Init();
 8000970:	f000 f89e 	bl	8000ab0 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000974:	f000 f8c4 	bl	8000b00 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

	// Display Init
	ST7735_Init(1);
 8000978:	2001      	movs	r0, #1
 800097a:	f7ff fd75 	bl	8000468 <ST7735_Init>
	fillScreen(BLACK);
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff fc66 	bl	8000250 <fillScreen>

	// Start Timer 16
	HAL_TIM_Base_Start_IT(&htim16); // Starte Timer 16 im Interrupt Modus
 8000984:	4804      	ldr	r0, [pc, #16]	@ (8000998 <main+0x40>)
 8000986:	f002 fb21 	bl	8002fcc <HAL_TIM_Base_Start_IT>

	// Set first State
	set_handler_state(IDLE);
 800098a:	2000      	movs	r0, #0
 800098c:	f000 fbfc 	bl	8001188 <set_handler_state>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Run StateMachine
		handler_task();
 8000990:	f000 fbee 	bl	8001170 <handler_task>
 8000994:	e7fc      	b.n	8000990 <main+0x38>
 8000996:	bf00      	nop
 8000998:	20000100 	.word	0x20000100

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b094      	sub	sp, #80	@ 0x50
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 0318 	add.w	r3, r7, #24
 80009a6:	2238      	movs	r2, #56	@ 0x38
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 fe26 	bl	80035fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009c2:	f001 f97d 	bl	8001cc0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d0:	2340      	movs	r3, #64	@ 0x40
 80009d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d4:	2302      	movs	r3, #2
 80009d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009d8:	2302      	movs	r3, #2
 80009da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80009dc:	2304      	movs	r3, #4
 80009de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80009e0:	234b      	movs	r3, #75	@ 0x4b
 80009e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f0:	f107 0318 	add.w	r3, r7, #24
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fa17 	bl	8001e28 <HAL_RCC_OscConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a00:	f000 f96c 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a04:	230f      	movs	r3, #15
 8000a06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2104      	movs	r1, #4
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 fd15 	bl	800244c <HAL_RCC_ClockConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a28:	f000 f958 	bl	8000cdc <Error_Handler>
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	3750      	adds	r7, #80	@ 0x50
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000aac <MX_SPI1_Init+0x78>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a48:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a4c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a4e:	4b16      	ldr	r3, [pc, #88]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a50:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a56:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a62:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a6c:	2210      	movs	r2, #16
 8000a6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a70:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a76:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a84:	2207      	movs	r2, #7
 8000a86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a88:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a90:	2208      	movs	r2, #8
 8000a92:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_SPI1_Init+0x74>)
 8000a96:	f001 febd 	bl	8002814 <HAL_SPI_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000aa0:	f000 f91c 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000003c 	.word	0x2000003c
 8000aac:	40013000 	.word	0x40013000

08000ab0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <MX_TIM16_Init+0x48>)
 8000ab6:	4a11      	ldr	r2, [pc, #68]	@ (8000afc <MX_TIM16_Init+0x4c>)
 8000ab8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 15000 - 1;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_TIM16_Init+0x48>)
 8000abc:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8000ac0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <MX_TIM16_Init+0x48>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <MX_TIM16_Init+0x48>)
 8000aca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ace:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_TIM16_Init+0x48>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <MX_TIM16_Init+0x48>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_TIM16_Init+0x48>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_TIM16_Init+0x48>)
 8000ae4:	f002 fa1a 	bl	8002f1c <HAL_TIM_Base_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000aee:	f000 f8f5 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000100 	.word	0x20000100
 8000afc:	40014400 	.word	0x40014400

08000b00 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000b04:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <MX_TIM17_Init+0x48>)
 8000b06:	4a11      	ldr	r2, [pc, #68]	@ (8000b4c <MX_TIM17_Init+0x4c>)
 8000b08:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 15000 - 1;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_TIM17_Init+0x48>)
 8000b0c:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8000b10:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b12:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <MX_TIM17_Init+0x48>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20000;
 8000b18:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <MX_TIM17_Init+0x48>)
 8000b1a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000b1e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b20:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <MX_TIM17_Init+0x48>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <MX_TIM17_Init+0x48>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <MX_TIM17_Init+0x48>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <MX_TIM17_Init+0x48>)
 8000b34:	f002 f9f2 	bl	8002f1c <HAL_TIM_Base_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000b3e:	f000 f8cd 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000014c 	.word	0x2000014c
 8000b4c:	40014800 	.word	0x40014800

08000b50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b56:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <MX_DMA_Init+0x50>)
 8000b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b5a:	4a11      	ldr	r2, [pc, #68]	@ (8000ba0 <MX_DMA_Init+0x50>)
 8000b5c:	f043 0304 	orr.w	r3, r3, #4
 8000b60:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <MX_DMA_Init+0x50>)
 8000b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <MX_DMA_Init+0x50>)
 8000b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b72:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba0 <MX_DMA_Init+0x50>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <MX_DMA_Init+0x50>)
 8000b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	200b      	movs	r0, #11
 8000b8c:	f000 fcc5 	bl	800151a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b90:	200b      	movs	r0, #11
 8000b92:	f000 fcdc 	bl	800154e <HAL_NVIC_EnableIRQ>

}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	@ 0x28
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b45      	ldr	r3, [pc, #276]	@ (8000cd0 <MX_GPIO_Init+0x12c>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	4a44      	ldr	r2, [pc, #272]	@ (8000cd0 <MX_GPIO_Init+0x12c>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc6:	4b42      	ldr	r3, [pc, #264]	@ (8000cd0 <MX_GPIO_Init+0x12c>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8000cd0 <MX_GPIO_Init+0x12c>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd6:	4a3e      	ldr	r2, [pc, #248]	@ (8000cd0 <MX_GPIO_Init+0x12c>)
 8000bd8:	f043 0320 	orr.w	r3, r3, #32
 8000bdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bde:	4b3c      	ldr	r3, [pc, #240]	@ (8000cd0 <MX_GPIO_Init+0x12c>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be2:	f003 0320 	and.w	r3, r3, #32
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b39      	ldr	r3, [pc, #228]	@ (8000cd0 <MX_GPIO_Init+0x12c>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	4a38      	ldr	r2, [pc, #224]	@ (8000cd0 <MX_GPIO_Init+0x12c>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf6:	4b36      	ldr	r3, [pc, #216]	@ (8000cd0 <MX_GPIO_Init+0x12c>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b33      	ldr	r3, [pc, #204]	@ (8000cd0 <MX_GPIO_Init+0x12c>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c06:	4a32      	ldr	r2, [pc, #200]	@ (8000cd0 <MX_GPIO_Init+0x12c>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0e:	4b30      	ldr	r3, [pc, #192]	@ (8000cd0 <MX_GPIO_Init+0x12c>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Stg2_NMOS1_Pin|GPIO_PIN_3|GPIO_PIN_4|Stg2_NMOS4_Pin
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f640 41fc 	movw	r1, #3324	@ 0xcfc
 8000c20:	482c      	ldr	r0, [pc, #176]	@ (8000cd4 <MX_GPIO_Init+0x130>)
 8000c22:	f001 f803 	bl	8001c2c <HAL_GPIO_WritePin>
                          |Stg3_NMOS1_Pin|Stg3_NMOS3_Pin|Stg3_NMOS2_Pin|Stg3_NMOS4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|Stg1_NMOS2_Pin|Stg1_NMOS1_Pin
 8000c26:	2200      	movs	r2, #0
 8000c28:	f648 31e0 	movw	r1, #35808	@ 0x8be0
 8000c2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c30:	f000 fffc 	bl	8001c2c <HAL_GPIO_WritePin>
                          |Stg1_NMOS3_Pin|Stg2_NMOS3_Pin|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|Stg1_NMOS4_Pin|Stg2_NMOS2_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 418c 	mov.w	r1, #17920	@ 0x4600
 8000c3a:	4827      	ldr	r0, [pc, #156]	@ (8000cd8 <MX_GPIO_Init+0x134>)
 8000c3c:	f000 fff6 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c46:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	481f      	ldr	r0, [pc, #124]	@ (8000cd4 <MX_GPIO_Init+0x130>)
 8000c58:	f000 fe4e 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Stg2_NMOS1_Pin PC3 PC4 Stg2_NMOS4_Pin
                           Stg3_NMOS1_Pin Stg3_NMOS3_Pin Stg3_NMOS2_Pin Stg3_NMOS4_Pin */
  GPIO_InitStruct.Pin = Stg2_NMOS1_Pin|GPIO_PIN_3|GPIO_PIN_4|Stg2_NMOS4_Pin
 8000c5c:	f640 43fc 	movw	r3, #3324	@ 0xcfc
 8000c60:	617b      	str	r3, [r7, #20]
                          |Stg3_NMOS1_Pin|Stg3_NMOS3_Pin|Stg3_NMOS2_Pin|Stg3_NMOS4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4817      	ldr	r0, [pc, #92]	@ (8000cd4 <MX_GPIO_Init+0x130>)
 8000c76:	f000 fe3f 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 Stg1_NMOS2_Pin Stg1_NMOS1_Pin
                           Stg1_NMOS3_Pin Stg2_NMOS3_Pin PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|Stg1_NMOS2_Pin|Stg1_NMOS1_Pin
 8000c7a:	f648 33e0 	movw	r3, #35808	@ 0x8be0
 8000c7e:	617b      	str	r3, [r7, #20]
                          |Stg1_NMOS3_Pin|Stg2_NMOS3_Pin|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c96:	f000 fe2f 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 Stg1_NMOS4_Pin Stg2_NMOS2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|Stg1_NMOS4_Pin|Stg2_NMOS2_Pin;
 8000c9a:	f44f 438c 	mov.w	r3, #17920	@ 0x4600
 8000c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4809      	ldr	r0, [pc, #36]	@ (8000cd8 <MX_GPIO_Init+0x134>)
 8000cb4:	f000 fe20 	bl	80018f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2028      	movs	r0, #40	@ 0x28
 8000cbe:	f000 fc2c 	bl	800151a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cc2:	2028      	movs	r0, #40	@ 0x28
 8000cc4:	f000 fc43 	bl	800154e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc8:	bf00      	nop
 8000cca:	3728      	adds	r7, #40	@ 0x28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	48000800 	.word	0x48000800
 8000cd8:	48000400 	.word	0x48000400

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <Error_Handler+0x8>

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <HAL_MspInit+0x44>)
 8000cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	@ (8000d2c <HAL_MspInit+0x44>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <HAL_MspInit+0x44>)
 8000cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <HAL_MspInit+0x44>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d0a:	4a08      	ldr	r2, [pc, #32]	@ (8000d2c <HAL_MspInit+0x44>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <HAL_MspInit+0x44>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d1e:	f001 f873 	bl	8001e08 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000

08000d30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8000dfc <HAL_SPI_MspInit+0xcc>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d150      	bne.n	8000df4 <HAL_SPI_MspInit+0xc4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d52:	4b2b      	ldr	r3, [pc, #172]	@ (8000e00 <HAL_SPI_MspInit+0xd0>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d56:	4a2a      	ldr	r2, [pc, #168]	@ (8000e00 <HAL_SPI_MspInit+0xd0>)
 8000d58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d5e:	4b28      	ldr	r3, [pc, #160]	@ (8000e00 <HAL_SPI_MspInit+0xd0>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	4b25      	ldr	r3, [pc, #148]	@ (8000e00 <HAL_SPI_MspInit+0xd0>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	4a24      	ldr	r2, [pc, #144]	@ (8000e00 <HAL_SPI_MspInit+0xd0>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d76:	4b22      	ldr	r3, [pc, #136]	@ (8000e00 <HAL_SPI_MspInit+0xd0>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000d82:	2328      	movs	r3, #40	@ 0x28
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d92:	2305      	movs	r3, #5
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4819      	ldr	r0, [pc, #100]	@ (8000e04 <HAL_SPI_MspInit+0xd4>)
 8000d9e:	f000 fdab 	bl	80018f8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8000da2:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <HAL_SPI_MspInit+0xd8>)
 8000da4:	4a19      	ldr	r2, [pc, #100]	@ (8000e0c <HAL_SPI_MspInit+0xdc>)
 8000da6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000da8:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <HAL_SPI_MspInit+0xd8>)
 8000daa:	220b      	movs	r2, #11
 8000dac:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dae:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <HAL_SPI_MspInit+0xd8>)
 8000db0:	2210      	movs	r2, #16
 8000db2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db4:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <HAL_SPI_MspInit+0xd8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dba:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <HAL_SPI_MspInit+0xd8>)
 8000dbc:	2280      	movs	r2, #128	@ 0x80
 8000dbe:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <HAL_SPI_MspInit+0xd8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <HAL_SPI_MspInit+0xd8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <HAL_SPI_MspInit+0xd8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <HAL_SPI_MspInit+0xd8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000dd8:	480b      	ldr	r0, [pc, #44]	@ (8000e08 <HAL_SPI_MspInit+0xd8>)
 8000dda:	f000 fbd3 	bl	8001584 <HAL_DMA_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_SPI_MspInit+0xb8>
    {
      Error_Handler();
 8000de4:	f7ff ff7a 	bl	8000cdc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a07      	ldr	r2, [pc, #28]	@ (8000e08 <HAL_SPI_MspInit+0xd8>)
 8000dec:	655a      	str	r2, [r3, #84]	@ 0x54
 8000dee:	4a06      	ldr	r2, [pc, #24]	@ (8000e08 <HAL_SPI_MspInit+0xd8>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000df4:	bf00      	nop
 8000df6:	3728      	adds	r7, #40	@ 0x28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40013000 	.word	0x40013000
 8000e00:	40021000 	.word	0x40021000
 8000e04:	48000400 	.word	0x48000400
 8000e08:	200000a0 	.word	0x200000a0
 8000e0c:	40020008 	.word	0x40020008

08000e10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8000e88 <HAL_TIM_Base_MspInit+0x78>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d114      	bne.n	8000e4c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <HAL_TIM_Base_MspInit+0x7c>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e26:	4a19      	ldr	r2, [pc, #100]	@ (8000e8c <HAL_TIM_Base_MspInit+0x7c>)
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e2e:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <HAL_TIM_Base_MspInit+0x7c>)
 8000e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2019      	movs	r0, #25
 8000e40:	f000 fb6b 	bl	800151a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e44:	2019      	movs	r0, #25
 8000e46:	f000 fb82 	bl	800154e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000e4a:	e018      	b.n	8000e7e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0f      	ldr	r2, [pc, #60]	@ (8000e90 <HAL_TIM_Base_MspInit+0x80>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d113      	bne.n	8000e7e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000e56:	4b0d      	ldr	r3, [pc, #52]	@ (8000e8c <HAL_TIM_Base_MspInit+0x7c>)
 8000e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e8c <HAL_TIM_Base_MspInit+0x7c>)
 8000e5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e60:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e62:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <HAL_TIM_Base_MspInit+0x7c>)
 8000e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	201a      	movs	r0, #26
 8000e74:	f000 fb51 	bl	800151a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000e78:	201a      	movs	r0, #26
 8000e7a:	f000 fb68 	bl	800154e <HAL_NVIC_EnableIRQ>
}
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40014400 	.word	0x40014400
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40014800 	.word	0x40014800

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <NMI_Handler+0x4>

08000e9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000ebc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eea:	f000 f9fb 	bl	80012e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <DMA1_Channel1_IRQHandler+0x10>)
 8000efa:	f000 fbeb 	bl	80016d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200000a0 	.word	0x200000a0

08000f08 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f0e:	f002 f904 	bl	800311a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000100 	.word	0x20000100

08000f1c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000f22:	f002 f8fa 	bl	800311a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000014c 	.word	0x2000014c

08000f30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f34:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f38:	f000 feaa 	bl	8001c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <SystemInit+0x20>)
 8000f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f4a:	4a05      	ldr	r2, [pc, #20]	@ (8000f60 <SystemInit+0x20>)
 8000f4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <enter_handler_state>:
/* VARIABLES ***********************************************************************************************************/
uint8_t handler_state;
uint8_t prev_handler_state;
uint16_t time_val = 0;

void enter_handler_state(int state) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af04      	add	r7, sp, #16
 8000f6a:	6078      	str	r0, [r7, #4]
	switch (state) {
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d071      	beq.n	8001056 <enter_handler_state+0xf2>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	f300 809d 	bgt.w	80010b4 <enter_handler_state+0x150>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <enter_handler_state+0x24>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d035      	beq.n	8000ff2 <enter_handler_state+0x8e>
		HAL_GPIO_WritePin(Stg1_NMOS2, Stg1_NMOS2_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(Stg1_NMOS3, Stg1_NMOS3_PIN, GPIO_PIN_SET);
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 8000f86:	e095      	b.n	80010b4 <enter_handler_state+0x150>
		HAL_GPIO_WritePin(LD2, LD2_PIN, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2120      	movs	r1, #32
 8000f8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f90:	f000 fe4c 	bl	8001c2c <HAL_GPIO_WritePin>
		handler_state = IDLE;
 8000f94:	4b4a      	ldr	r3, [pc, #296]	@ (80010c0 <enter_handler_state+0x15c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
		fillScreen(BLACK);
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f7ff f958 	bl	8000250 <fillScreen>
		ST7735_WriteString(0, 0, "State: IDLE", Font_7x10, GREEN, BLACK);
 8000fa0:	4b48      	ldr	r3, [pc, #288]	@ (80010c4 <enter_handler_state+0x160>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	9202      	str	r2, [sp, #8]
 8000fa6:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000faa:	9201      	str	r2, [sp, #4]
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	9200      	str	r2, [sp, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a45      	ldr	r2, [pc, #276]	@ (80010c8 <enter_handler_state+0x164>)
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff fb7a 	bl	80006b0 <ST7735_WriteString>
		HAL_GPIO_WritePin(Stg1_NMOS1, Stg1_NMOS1_PIN, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc6:	f000 fe31 	bl	8001c2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stg1_NMOS2, Stg1_NMOS2_PIN, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2180      	movs	r1, #128	@ 0x80
 8000fce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd2:	f000 fe2b 	bl	8001c2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stg1_NMOS3, Stg1_NMOS3_PIN, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe0:	f000 fe24 	bl	8001c2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stg1_NMOS4, Stg1_NMOS4_PIN, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fea:	4838      	ldr	r0, [pc, #224]	@ (80010cc <enter_handler_state+0x168>)
 8000fec:	f000 fe1e 	bl	8001c2c <HAL_GPIO_WritePin>
		break;
 8000ff0:	e061      	b.n	80010b6 <enter_handler_state+0x152>
		HAL_GPIO_WritePin(LD2, LD2_PIN, GPIO_PIN_SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ffa:	f000 fe17 	bl	8001c2c <HAL_GPIO_WritePin>
		fillScreen(BLACK);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f7ff f926 	bl	8000250 <fillScreen>
		ST7735_WriteString(0, 0, "State: ON1", Font_7x10, GREEN, BLACK);
 8001004:	4b2f      	ldr	r3, [pc, #188]	@ (80010c4 <enter_handler_state+0x160>)
 8001006:	2200      	movs	r2, #0
 8001008:	9202      	str	r2, [sp, #8]
 800100a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800100e:	9201      	str	r2, [sp, #4]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	9200      	str	r2, [sp, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a2e      	ldr	r2, [pc, #184]	@ (80010d0 <enter_handler_state+0x16c>)
 8001018:	2100      	movs	r1, #0
 800101a:	2000      	movs	r0, #0
 800101c:	f7ff fb48 	bl	80006b0 <ST7735_WriteString>
		HAL_GPIO_WritePin(Stg1_NMOS1, Stg1_NMOS1_PIN, GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001026:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800102a:	f000 fdff 	bl	8001c2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stg1_NMOS4, Stg1_NMOS4_PIN, GPIO_PIN_SET);
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001034:	4825      	ldr	r0, [pc, #148]	@ (80010cc <enter_handler_state+0x168>)
 8001036:	f000 fdf9 	bl	8001c2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stg1_NMOS2, Stg1_NMOS2_PIN, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2180      	movs	r1, #128	@ 0x80
 800103e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001042:	f000 fdf3 	bl	8001c2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stg1_NMOS3, Stg1_NMOS3_PIN, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800104c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001050:	f000 fdec 	bl	8001c2c <HAL_GPIO_WritePin>
		break;
 8001054:	e02f      	b.n	80010b6 <enter_handler_state+0x152>
		time_val = 0;
 8001056:	4b1f      	ldr	r3, [pc, #124]	@ (80010d4 <enter_handler_state+0x170>)
 8001058:	2200      	movs	r2, #0
 800105a:	801a      	strh	r2, [r3, #0]
		fillScreen(BLACK);
 800105c:	2000      	movs	r0, #0
 800105e:	f7ff f8f7 	bl	8000250 <fillScreen>
		ST7735_WriteString(0, 0, "State: ON2", Font_7x10, GREEN, BLACK);
 8001062:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <enter_handler_state+0x160>)
 8001064:	2200      	movs	r2, #0
 8001066:	9202      	str	r2, [sp, #8]
 8001068:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800106c:	9201      	str	r2, [sp, #4]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	9200      	str	r2, [sp, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a18      	ldr	r2, [pc, #96]	@ (80010d8 <enter_handler_state+0x174>)
 8001076:	2100      	movs	r1, #0
 8001078:	2000      	movs	r0, #0
 800107a:	f7ff fb19 	bl	80006b0 <ST7735_WriteString>
		HAL_GPIO_WritePin(Stg1_NMOS1, Stg1_NMOS1_PIN, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001084:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001088:	f000 fdd0 	bl	8001c2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stg1_NMOS4, Stg1_NMOS4_PIN, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001092:	480e      	ldr	r0, [pc, #56]	@ (80010cc <enter_handler_state+0x168>)
 8001094:	f000 fdca 	bl	8001c2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stg1_NMOS2, Stg1_NMOS2_PIN, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2180      	movs	r1, #128	@ 0x80
 800109c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a0:	f000 fdc4 	bl	8001c2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stg1_NMOS3, Stg1_NMOS3_PIN, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ae:	f000 fdbd 	bl	8001c2c <HAL_GPIO_WritePin>
		break;
 80010b2:	e000      	b.n	80010b6 <enter_handler_state+0x152>
		break;
 80010b4:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000199 	.word	0x20000199
 80010c4:	20000000 	.word	0x20000000
 80010c8:	0800366c 	.word	0x0800366c
 80010cc:	48000400 	.word	0x48000400
 80010d0:	08003678 	.word	0x08003678
 80010d4:	2000019c 	.word	0x2000019c
 80010d8:	08003684 	.word	0x08003684

080010dc <exec_handler_state>:

//-----------------------------------------------------------------------------------------------------------------------

void exec_handler_state(int state) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	switch (state) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d009      	beq.n	80010fe <exec_handler_state+0x22>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	dc13      	bgt.n	8001118 <exec_handler_state+0x3c>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d012      	beq.n	800111c <exec_handler_state+0x40>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d011      	beq.n	8001120 <exec_handler_state+0x44>
			time_val = 0;
		}
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 80010fc:	e00c      	b.n	8001118 <exec_handler_state+0x3c>
		if (time_val > 250) {
 80010fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <exec_handler_state+0x54>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	2bfa      	cmp	r3, #250	@ 0xfa
 8001104:	d90e      	bls.n	8001124 <exec_handler_state+0x48>
			HAL_GPIO_TogglePin(LD2, LD2_PIN);
 8001106:	2120      	movs	r1, #32
 8001108:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800110c:	f000 fda6 	bl	8001c5c <HAL_GPIO_TogglePin>
			time_val = 0;
 8001110:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <exec_handler_state+0x54>)
 8001112:	2200      	movs	r2, #0
 8001114:	801a      	strh	r2, [r3, #0]
		break;
 8001116:	e005      	b.n	8001124 <exec_handler_state+0x48>
		break;
 8001118:	bf00      	nop
 800111a:	e004      	b.n	8001126 <exec_handler_state+0x4a>
		break;
 800111c:	bf00      	nop
 800111e:	e002      	b.n	8001126 <exec_handler_state+0x4a>
		break;
 8001120:	bf00      	nop
 8001122:	e000      	b.n	8001126 <exec_handler_state+0x4a>
		break;
 8001124:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000019c 	.word	0x2000019c

08001134 <leave_handler_state>:

//-----------------------------------------------------------------------------------------------------------------------

void leave_handler_state(int state) {
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	switch (state) {
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d009      	beq.n	8001156 <leave_handler_state+0x22>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b02      	cmp	r3, #2
 8001146:	dc08      	bgt.n	800115a <leave_handler_state+0x26>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d007      	beq.n	800115e <leave_handler_state+0x2a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d006      	beq.n	8001162 <leave_handler_state+0x2e>
		//--------------------------------------------------------------------------------------
	case ON2:
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 8001154:	e001      	b.n	800115a <leave_handler_state+0x26>
		break;
 8001156:	bf00      	nop
 8001158:	e004      	b.n	8001164 <leave_handler_state+0x30>
		break;
 800115a:	bf00      	nop
 800115c:	e002      	b.n	8001164 <leave_handler_state+0x30>
		break;
 800115e:	bf00      	nop
 8001160:	e000      	b.n	8001164 <leave_handler_state+0x30>
		break;
 8001162:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <handler_task>:

//-----------------------------------------------------------------------------------------------------------------------

void handler_task(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	exec_handler_state(handler_state);
 8001174:	4b03      	ldr	r3, [pc, #12]	@ (8001184 <handler_task+0x14>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ffaf 	bl	80010dc <exec_handler_state>
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000199 	.word	0x20000199

08001188 <set_handler_state>:

void set_handler_state(uint8_t state) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	prev_handler_state = handler_state;
 8001192:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <set_handler_state+0x34>)
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <set_handler_state+0x38>)
 8001198:	701a      	strb	r2, [r3, #0]
	handler_state = state;
 800119a:	4a08      	ldr	r2, [pc, #32]	@ (80011bc <set_handler_state+0x34>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	7013      	strb	r3, [r2, #0]
	leave_handler_state(prev_handler_state);
 80011a0:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <set_handler_state+0x38>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ffc5 	bl	8001134 <leave_handler_state>
	enter_handler_state(state);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fed9 	bl	8000f64 <enter_handler_state>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000199 	.word	0x20000199
 80011c0:	2000019a 	.word	0x2000019a

080011c4 <inc_handler_currentTime>:

uint8_t get_handler_state(void) {
	return handler_state;
}

void inc_handler_currentTime(uint16_t dT) {
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	80fb      	strh	r3, [r7, #6]
	time_val = time_val + dT;
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <inc_handler_currentTime+0x24>)
 80011d0:	881a      	ldrh	r2, [r3, #0]
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	4413      	add	r3, r2
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	4b03      	ldr	r3, [pc, #12]	@ (80011e8 <inc_handler_currentTime+0x24>)
 80011da:	801a      	strh	r2, [r3, #0]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	2000019c 	.word	0x2000019c

080011ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011ec:	480d      	ldr	r0, [pc, #52]	@ (8001224 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f0:	f7ff fea6 	bl	8000f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f4:	480c      	ldr	r0, [pc, #48]	@ (8001228 <LoopForever+0x6>)
  ldr r1, =_edata
 80011f6:	490d      	ldr	r1, [pc, #52]	@ (800122c <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001230 <LoopForever+0xe>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <LoopForever+0x12>)
  ldr r4, =_ebss
 800120c:	4c0a      	ldr	r4, [pc, #40]	@ (8001238 <LoopForever+0x16>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121a:	f002 f9f7 	bl	800360c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800121e:	f7ff fb9b 	bl	8000958 <main>

08001222 <LoopForever>:

LoopForever:
    b LoopForever
 8001222:	e7fe      	b.n	8001222 <LoopForever>
  ldr   r0, =_estack
 8001224:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001230:	08003e88 	.word	0x08003e88
  ldr r2, =_sbss
 8001234:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001238:	200001a4 	.word	0x200001a4

0800123c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC1_2_IRQHandler>

0800123e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 f95b 	bl	8001504 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800124e:	200f      	movs	r0, #15
 8001250:	f000 f80e 	bl	8001270 <HAL_InitTick>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	71fb      	strb	r3, [r7, #7]
 800125e:	e001      	b.n	8001264 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001260:	f7ff fd42 	bl	8000ce8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001264:	79fb      	ldrb	r3, [r7, #7]

}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800127c:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <HAL_InitTick+0x68>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d022      	beq.n	80012ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001284:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <HAL_InitTick+0x6c>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <HAL_InitTick+0x68>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001290:	fbb1 f3f3 	udiv	r3, r1, r3
 8001294:	fbb2 f3f3 	udiv	r3, r2, r3
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f966 	bl	800156a <HAL_SYSTICK_Config>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d10f      	bne.n	80012c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b0f      	cmp	r3, #15
 80012a8:	d809      	bhi.n	80012be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012aa:	2200      	movs	r2, #0
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	f04f 30ff 	mov.w	r0, #4294967295
 80012b2:	f000 f932 	bl	800151a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <HAL_InitTick+0x70>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	e007      	b.n	80012ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	e004      	b.n	80012ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e001      	b.n	80012ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000010 	.word	0x20000010
 80012dc:	20000008 	.word	0x20000008
 80012e0:	2000000c 	.word	0x2000000c

080012e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <HAL_IncTick+0x1c>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <HAL_IncTick+0x20>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a03      	ldr	r2, [pc, #12]	@ (8001300 <HAL_IncTick+0x1c>)
 80012f4:	6013      	str	r3, [r2, #0]
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	200001a0 	.word	0x200001a0
 8001304:	20000010 	.word	0x20000010

08001308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return uwTick;
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <HAL_GetTick+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	200001a0 	.word	0x200001a0

08001320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff ffee 	bl	8001308 <HAL_GetTick>
 800132c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001338:	d004      	beq.n	8001344 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800133a:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <HAL_Delay+0x40>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	4413      	add	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001344:	bf00      	nop
 8001346:	f7ff ffdf 	bl	8001308 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	429a      	cmp	r2, r3
 8001354:	d8f7      	bhi.n	8001346 <HAL_Delay+0x26>
  {
  }
}
 8001356:	bf00      	nop
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000010 	.word	0x20000010

08001364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001380:	4013      	ands	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800138c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001396:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60d3      	str	r3, [r2, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b0:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <__NVIC_GetPriorityGrouping+0x18>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	f003 0307 	and.w	r3, r3, #7
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	db0b      	blt.n	80013f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	f003 021f 	and.w	r2, r3, #31
 80013e0:	4907      	ldr	r1, [pc, #28]	@ (8001400 <__NVIC_EnableIRQ+0x38>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	2001      	movs	r0, #1
 80013ea:	fa00 f202 	lsl.w	r2, r0, r2
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e100 	.word	0xe000e100

08001404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	2b00      	cmp	r3, #0
 8001416:	db0a      	blt.n	800142e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	490c      	ldr	r1, [pc, #48]	@ (8001450 <__NVIC_SetPriority+0x4c>)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	0112      	lsls	r2, r2, #4
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	440b      	add	r3, r1
 8001428:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800142c:	e00a      	b.n	8001444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4908      	ldr	r1, [pc, #32]	@ (8001454 <__NVIC_SetPriority+0x50>)
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	3b04      	subs	r3, #4
 800143c:	0112      	lsls	r2, r2, #4
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	440b      	add	r3, r1
 8001442:	761a      	strb	r2, [r3, #24]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000e100 	.word	0xe000e100
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001458:	b480      	push	{r7}
 800145a:	b089      	sub	sp, #36	@ 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f1c3 0307 	rsb	r3, r3, #7
 8001472:	2b04      	cmp	r3, #4
 8001474:	bf28      	it	cs
 8001476:	2304      	movcs	r3, #4
 8001478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3304      	adds	r3, #4
 800147e:	2b06      	cmp	r3, #6
 8001480:	d902      	bls.n	8001488 <NVIC_EncodePriority+0x30>
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3b03      	subs	r3, #3
 8001486:	e000      	b.n	800148a <NVIC_EncodePriority+0x32>
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	f04f 32ff 	mov.w	r2, #4294967295
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	401a      	ands	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a0:	f04f 31ff 	mov.w	r1, #4294967295
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	43d9      	mvns	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	4313      	orrs	r3, r2
         );
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3724      	adds	r7, #36	@ 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014d0:	d301      	bcc.n	80014d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00f      	b.n	80014f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001500 <SysTick_Config+0x40>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014de:	210f      	movs	r1, #15
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f7ff ff8e 	bl	8001404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e8:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <SysTick_Config+0x40>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ee:	4b04      	ldr	r3, [pc, #16]	@ (8001500 <SysTick_Config+0x40>)
 80014f0:	2207      	movs	r2, #7
 80014f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	e000e010 	.word	0xe000e010

08001504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff29 	bl	8001364 <__NVIC_SetPriorityGrouping>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001528:	f7ff ff40 	bl	80013ac <__NVIC_GetPriorityGrouping>
 800152c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f7ff ff90 	bl	8001458 <NVIC_EncodePriority>
 8001538:	4602      	mov	r2, r0
 800153a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff5f 	bl	8001404 <__NVIC_SetPriority>
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff33 	bl	80013c8 <__NVIC_EnableIRQ>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ffa4 	bl	80014c0 <SysTick_Config>
 8001578:	4603      	mov	r3, r0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e08d      	b.n	80016b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	4b47      	ldr	r3, [pc, #284]	@ (80016bc <HAL_DMA_Init+0x138>)
 800159e:	429a      	cmp	r2, r3
 80015a0:	d80f      	bhi.n	80015c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b45      	ldr	r3, [pc, #276]	@ (80016c0 <HAL_DMA_Init+0x13c>)
 80015aa:	4413      	add	r3, r2
 80015ac:	4a45      	ldr	r2, [pc, #276]	@ (80016c4 <HAL_DMA_Init+0x140>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	091b      	lsrs	r3, r3, #4
 80015b4:	009a      	lsls	r2, r3, #2
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a42      	ldr	r2, [pc, #264]	@ (80016c8 <HAL_DMA_Init+0x144>)
 80015be:	641a      	str	r2, [r3, #64]	@ 0x40
 80015c0:	e00e      	b.n	80015e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b40      	ldr	r3, [pc, #256]	@ (80016cc <HAL_DMA_Init+0x148>)
 80015ca:	4413      	add	r3, r2
 80015cc:	4a3d      	ldr	r2, [pc, #244]	@ (80016c4 <HAL_DMA_Init+0x140>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	091b      	lsrs	r3, r3, #4
 80015d4:	009a      	lsls	r2, r3, #2
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a3c      	ldr	r2, [pc, #240]	@ (80016d0 <HAL_DMA_Init+0x14c>)
 80015de:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80015f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80015fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001604:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001610:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800161c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	4313      	orrs	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f8fe 	bl	8001834 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001640:	d102      	bne.n	8001648 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800165c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d010      	beq.n	8001688 <HAL_DMA_Init+0x104>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b04      	cmp	r3, #4
 800166c:	d80c      	bhi.n	8001688 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f91e 	bl	80018b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	e008      	b.n	800169a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40020407 	.word	0x40020407
 80016c0:	bffdfff8 	.word	0xbffdfff8
 80016c4:	cccccccd 	.word	0xcccccccd
 80016c8:	40020000 	.word	0x40020000
 80016cc:	bffdfbf8 	.word	0xbffdfbf8
 80016d0:	40020400 	.word	0x40020400

080016d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f0:	f003 031f 	and.w	r3, r3, #31
 80016f4:	2204      	movs	r2, #4
 80016f6:	409a      	lsls	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d026      	beq.n	800174e <HAL_DMA_IRQHandler+0x7a>
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	d021      	beq.n	800174e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0320 	and.w	r3, r3, #32
 8001714:	2b00      	cmp	r3, #0
 8001716:	d107      	bne.n	8001728 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0204 	bic.w	r2, r2, #4
 8001726:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001734:	2104      	movs	r1, #4
 8001736:	fa01 f202 	lsl.w	r2, r1, r2
 800173a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001740:	2b00      	cmp	r3, #0
 8001742:	d071      	beq.n	8001828 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800174c:	e06c      	b.n	8001828 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001752:	f003 031f 	and.w	r3, r3, #31
 8001756:	2202      	movs	r2, #2
 8001758:	409a      	lsls	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4013      	ands	r3, r2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d02e      	beq.n	80017c0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d029      	beq.n	80017c0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0320 	and.w	r3, r3, #32
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10b      	bne.n	8001792 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 020a 	bic.w	r2, r2, #10
 8001788:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001796:	f003 021f 	and.w	r2, r3, #31
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	2102      	movs	r1, #2
 80017a0:	fa01 f202 	lsl.w	r2, r1, r2
 80017a4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d038      	beq.n	8001828 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80017be:	e033      	b.n	8001828 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c4:	f003 031f 	and.w	r3, r3, #31
 80017c8:	2208      	movs	r2, #8
 80017ca:	409a      	lsls	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d02a      	beq.n	800182a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d025      	beq.n	800182a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 020e 	bic.w	r2, r2, #14
 80017ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f2:	f003 021f 	and.w	r2, r3, #31
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	2101      	movs	r1, #1
 80017fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001800:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800181c:	2b00      	cmp	r3, #0
 800181e:	d004      	beq.n	800182a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001828:	bf00      	nop
 800182a:	bf00      	nop
}
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001834:	b480      	push	{r7}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b16      	ldr	r3, [pc, #88]	@ (800189c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001844:	429a      	cmp	r2, r3
 8001846:	d802      	bhi.n	800184e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001848:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	e001      	b.n	8001852 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001850:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	3b08      	subs	r3, #8
 800185e:	4a12      	ldr	r2, [pc, #72]	@ (80018a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001860:	fba2 2303 	umull	r2, r3, r2, r3
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	009a      	lsls	r2, r3, #2
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4413      	add	r3, r2
 8001874:	461a      	mov	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a0b      	ldr	r2, [pc, #44]	@ (80018ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800187e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	2201      	movs	r2, #1
 8001888:	409a      	lsls	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800188e:	bf00      	nop
 8001890:	371c      	adds	r7, #28
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40020407 	.word	0x40020407
 80018a0:	40020800 	.word	0x40020800
 80018a4:	40020820 	.word	0x40020820
 80018a8:	cccccccd 	.word	0xcccccccd
 80018ac:	40020880 	.word	0x40020880

080018b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	461a      	mov	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a08      	ldr	r2, [pc, #32]	@ (80018f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80018d2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f003 031f 	and.w	r3, r3, #31
 80018dc:	2201      	movs	r2, #1
 80018de:	409a      	lsls	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	1000823f 	.word	0x1000823f
 80018f4:	40020940 	.word	0x40020940

080018f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001906:	e15a      	b.n	8001bbe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	2101      	movs	r1, #1
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	4013      	ands	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 814c 	beq.w	8001bb8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	2b01      	cmp	r3, #1
 800192a:	d005      	beq.n	8001938 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001934:	2b02      	cmp	r3, #2
 8001936:	d130      	bne.n	800199a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800196e:	2201      	movs	r2, #1
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	f003 0201 	and.w	r2, r3, #1
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d017      	beq.n	80019d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	2203      	movs	r2, #3
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d123      	bne.n	8001a2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	08da      	lsrs	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3208      	adds	r2, #8
 80019ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	220f      	movs	r2, #15
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	691a      	ldr	r2, [r3, #16]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	08da      	lsrs	r2, r3, #3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3208      	adds	r2, #8
 8001a24:	6939      	ldr	r1, [r7, #16]
 8001a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 0203 	and.w	r2, r3, #3
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 80a6 	beq.w	8001bb8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8001bdc <HAL_GPIO_Init+0x2e4>)
 8001a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a70:	4a5a      	ldr	r2, [pc, #360]	@ (8001bdc <HAL_GPIO_Init+0x2e4>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a78:	4b58      	ldr	r3, [pc, #352]	@ (8001bdc <HAL_GPIO_Init+0x2e4>)
 8001a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a84:	4a56      	ldr	r2, [pc, #344]	@ (8001be0 <HAL_GPIO_Init+0x2e8>)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	089b      	lsrs	r3, r3, #2
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001aae:	d01f      	beq.n	8001af0 <HAL_GPIO_Init+0x1f8>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a4c      	ldr	r2, [pc, #304]	@ (8001be4 <HAL_GPIO_Init+0x2ec>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d019      	beq.n	8001aec <HAL_GPIO_Init+0x1f4>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a4b      	ldr	r2, [pc, #300]	@ (8001be8 <HAL_GPIO_Init+0x2f0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d013      	beq.n	8001ae8 <HAL_GPIO_Init+0x1f0>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a4a      	ldr	r2, [pc, #296]	@ (8001bec <HAL_GPIO_Init+0x2f4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d00d      	beq.n	8001ae4 <HAL_GPIO_Init+0x1ec>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a49      	ldr	r2, [pc, #292]	@ (8001bf0 <HAL_GPIO_Init+0x2f8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d007      	beq.n	8001ae0 <HAL_GPIO_Init+0x1e8>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a48      	ldr	r2, [pc, #288]	@ (8001bf4 <HAL_GPIO_Init+0x2fc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d101      	bne.n	8001adc <HAL_GPIO_Init+0x1e4>
 8001ad8:	2305      	movs	r3, #5
 8001ada:	e00a      	b.n	8001af2 <HAL_GPIO_Init+0x1fa>
 8001adc:	2306      	movs	r3, #6
 8001ade:	e008      	b.n	8001af2 <HAL_GPIO_Init+0x1fa>
 8001ae0:	2304      	movs	r3, #4
 8001ae2:	e006      	b.n	8001af2 <HAL_GPIO_Init+0x1fa>
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e004      	b.n	8001af2 <HAL_GPIO_Init+0x1fa>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e002      	b.n	8001af2 <HAL_GPIO_Init+0x1fa>
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <HAL_GPIO_Init+0x1fa>
 8001af0:	2300      	movs	r3, #0
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	f002 0203 	and.w	r2, r2, #3
 8001af8:	0092      	lsls	r2, r2, #2
 8001afa:	4093      	lsls	r3, r2
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b02:	4937      	ldr	r1, [pc, #220]	@ (8001be0 <HAL_GPIO_Init+0x2e8>)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	089b      	lsrs	r3, r3, #2
 8001b08:	3302      	adds	r3, #2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b10:	4b39      	ldr	r3, [pc, #228]	@ (8001bf8 <HAL_GPIO_Init+0x300>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b34:	4a30      	ldr	r2, [pc, #192]	@ (8001bf8 <HAL_GPIO_Init+0x300>)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf8 <HAL_GPIO_Init+0x300>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b5e:	4a26      	ldr	r2, [pc, #152]	@ (8001bf8 <HAL_GPIO_Init+0x300>)
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001b64:	4b24      	ldr	r3, [pc, #144]	@ (8001bf8 <HAL_GPIO_Init+0x300>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b88:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf8 <HAL_GPIO_Init+0x300>)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf8 <HAL_GPIO_Init+0x300>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bb2:	4a11      	ldr	r2, [pc, #68]	@ (8001bf8 <HAL_GPIO_Init+0x300>)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f47f ae9d 	bne.w	8001908 <HAL_GPIO_Init+0x10>
  }
}
 8001bce:	bf00      	nop
 8001bd0:	bf00      	nop
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40010000 	.word	0x40010000
 8001be4:	48000400 	.word	0x48000400
 8001be8:	48000800 	.word	0x48000800
 8001bec:	48000c00 	.word	0x48000c00
 8001bf0:	48001000 	.word	0x48001000
 8001bf4:	48001400 	.word	0x48001400
 8001bf8:	40010400 	.word	0x40010400

08001bfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e001      	b.n	8001c1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c3c:	787b      	ldrb	r3, [r7, #1]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c42:	887a      	ldrh	r2, [r7, #2]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c48:	e002      	b.n	8001c50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c6e:	887a      	ldrh	r2, [r7, #2]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4013      	ands	r3, r2
 8001c74:	041a      	lsls	r2, r3, #16
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	43d9      	mvns	r1, r3
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	400b      	ands	r3, r1
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	619a      	str	r2, [r3, #24]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c9a:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d006      	beq.n	8001cb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ca6:	4a05      	ldr	r2, [pc, #20]	@ (8001cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fddc 	bl	800086c <HAL_GPIO_EXTI_Callback>
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40010400 	.word	0x40010400

08001cc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d141      	bne.n	8001d52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cce:	4b4b      	ldr	r3, [pc, #300]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cda:	d131      	bne.n	8001d40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cdc:	4b47      	ldr	r3, [pc, #284]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ce2:	4a46      	ldr	r2, [pc, #280]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ce8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cec:	4b43      	ldr	r3, [pc, #268]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cf4:	4a41      	ldr	r2, [pc, #260]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cfc:	4b40      	ldr	r3, [pc, #256]	@ (8001e00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2232      	movs	r2, #50	@ 0x32
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	4a3f      	ldr	r2, [pc, #252]	@ (8001e04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d08:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0c:	0c9b      	lsrs	r3, r3, #18
 8001d0e:	3301      	adds	r3, #1
 8001d10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d12:	e002      	b.n	8001d1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d1a:	4b38      	ldr	r3, [pc, #224]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d26:	d102      	bne.n	8001d2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f2      	bne.n	8001d14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d2e:	4b33      	ldr	r3, [pc, #204]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d3a:	d158      	bne.n	8001dee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e057      	b.n	8001df0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d40:	4b2e      	ldr	r3, [pc, #184]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d46:	4a2d      	ldr	r2, [pc, #180]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d50:	e04d      	b.n	8001dee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d58:	d141      	bne.n	8001dde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d5a:	4b28      	ldr	r3, [pc, #160]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d66:	d131      	bne.n	8001dcc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d68:	4b24      	ldr	r3, [pc, #144]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d6e:	4a23      	ldr	r2, [pc, #140]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d78:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d80:	4a1e      	ldr	r2, [pc, #120]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d88:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2232      	movs	r2, #50	@ 0x32
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
 8001d92:	4a1c      	ldr	r2, [pc, #112]	@ (8001e04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d94:	fba2 2303 	umull	r2, r3, r2, r3
 8001d98:	0c9b      	lsrs	r3, r3, #18
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d9e:	e002      	b.n	8001da6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001da6:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001db2:	d102      	bne.n	8001dba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f2      	bne.n	8001da0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dba:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dc6:	d112      	bne.n	8001dee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e011      	b.n	8001df0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ddc:	e007      	b.n	8001dee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dde:	4b07      	ldr	r3, [pc, #28]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001de6:	4a05      	ldr	r2, [pc, #20]	@ (8001dfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	40007000 	.word	0x40007000
 8001e00:	20000008 	.word	0x20000008
 8001e04:	431bde83 	.word	0x431bde83

08001e08 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e0c:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	4a04      	ldr	r2, [pc, #16]	@ (8001e24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e16:	6093      	str	r3, [r2, #8]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40007000 	.word	0x40007000

08001e28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e2fe      	b.n	8002438 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d075      	beq.n	8001f32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e46:	4b97      	ldr	r3, [pc, #604]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e50:	4b94      	ldr	r3, [pc, #592]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	2b0c      	cmp	r3, #12
 8001e5e:	d102      	bne.n	8001e66 <HAL_RCC_OscConfig+0x3e>
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d002      	beq.n	8001e6c <HAL_RCC_OscConfig+0x44>
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d10b      	bne.n	8001e84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6c:	4b8d      	ldr	r3, [pc, #564]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d05b      	beq.n	8001f30 <HAL_RCC_OscConfig+0x108>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d157      	bne.n	8001f30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e2d9      	b.n	8002438 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e8c:	d106      	bne.n	8001e9c <HAL_RCC_OscConfig+0x74>
 8001e8e:	4b85      	ldr	r3, [pc, #532]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a84      	ldr	r2, [pc, #528]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	e01d      	b.n	8001ed8 <HAL_RCC_OscConfig+0xb0>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x98>
 8001ea6:	4b7f      	ldr	r3, [pc, #508]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a7e      	ldr	r2, [pc, #504]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001eac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	4b7c      	ldr	r3, [pc, #496]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a7b      	ldr	r2, [pc, #492]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e00b      	b.n	8001ed8 <HAL_RCC_OscConfig+0xb0>
 8001ec0:	4b78      	ldr	r3, [pc, #480]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a77      	ldr	r2, [pc, #476]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001ec6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	4b75      	ldr	r3, [pc, #468]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a74      	ldr	r2, [pc, #464]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001ed2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d013      	beq.n	8001f08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fa12 	bl	8001308 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7ff fa0e 	bl	8001308 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	@ 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e29e      	b.n	8002438 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001efa:	4b6a      	ldr	r3, [pc, #424]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0xc0>
 8001f06:	e014      	b.n	8001f32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7ff f9fe 	bl	8001308 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff f9fa 	bl	8001308 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	@ 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e28a      	b.n	8002438 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f22:	4b60      	ldr	r3, [pc, #384]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0xe8>
 8001f2e:	e000      	b.n	8001f32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d075      	beq.n	800202a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f3e:	4b59      	ldr	r3, [pc, #356]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f48:	4b56      	ldr	r3, [pc, #344]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	2b0c      	cmp	r3, #12
 8001f56:	d102      	bne.n	8001f5e <HAL_RCC_OscConfig+0x136>
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d002      	beq.n	8001f64 <HAL_RCC_OscConfig+0x13c>
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d11f      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f64:	4b4f      	ldr	r3, [pc, #316]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_OscConfig+0x154>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e25d      	b.n	8002438 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7c:	4b49      	ldr	r3, [pc, #292]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	061b      	lsls	r3, r3, #24
 8001f8a:	4946      	ldr	r1, [pc, #280]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f90:	4b45      	ldr	r3, [pc, #276]	@ (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff f96b 	bl	8001270 <HAL_InitTick>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d043      	beq.n	8002028 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e249      	b.n	8002438 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d023      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fac:	4b3d      	ldr	r3, [pc, #244]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a3c      	ldr	r2, [pc, #240]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7ff f9a6 	bl	8001308 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc0:	f7ff f9a2 	bl	8001308 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e232      	b.n	8002438 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd2:	4b34      	ldr	r3, [pc, #208]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fde:	4b31      	ldr	r3, [pc, #196]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	061b      	lsls	r3, r3, #24
 8001fec:	492d      	ldr	r1, [pc, #180]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
 8001ff2:	e01a      	b.n	800202a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a2a      	ldr	r2, [pc, #168]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8001ffa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff f982 	bl	8001308 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002008:	f7ff f97e 	bl	8001308 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e20e      	b.n	8002438 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800201a:	4b22      	ldr	r3, [pc, #136]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x1e0>
 8002026:	e000      	b.n	800202a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002028:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d041      	beq.n	80020ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d01c      	beq.n	8002078 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203e:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8002040:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002044:	4a17      	ldr	r2, [pc, #92]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204e:	f7ff f95b 	bl	8001308 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002056:	f7ff f957 	bl	8001308 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e1e7      	b.n	8002438 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002068:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 800206a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0ef      	beq.n	8002056 <HAL_RCC_OscConfig+0x22e>
 8002076:	e020      	b.n	80020ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002078:	4b0a      	ldr	r3, [pc, #40]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 800207a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800207e:	4a09      	ldr	r2, [pc, #36]	@ (80020a4 <HAL_RCC_OscConfig+0x27c>)
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002088:	f7ff f93e 	bl	8001308 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800208e:	e00d      	b.n	80020ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002090:	f7ff f93a 	bl	8001308 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d906      	bls.n	80020ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e1ca      	b.n	8002438 <HAL_RCC_OscConfig+0x610>
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020ac:	4b8c      	ldr	r3, [pc, #560]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 80020ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1ea      	bne.n	8002090 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 80a6 	beq.w	8002214 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c8:	2300      	movs	r3, #0
 80020ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020cc:	4b84      	ldr	r3, [pc, #528]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_OscConfig+0x2b4>
 80020d8:	2301      	movs	r3, #1
 80020da:	e000      	b.n	80020de <HAL_RCC_OscConfig+0x2b6>
 80020dc:	2300      	movs	r3, #0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00d      	beq.n	80020fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	4b7f      	ldr	r3, [pc, #508]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e6:	4a7e      	ldr	r2, [pc, #504]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ee:	4b7c      	ldr	r3, [pc, #496]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020fa:	2301      	movs	r3, #1
 80020fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020fe:	4b79      	ldr	r3, [pc, #484]	@ (80022e4 <HAL_RCC_OscConfig+0x4bc>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d118      	bne.n	800213c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800210a:	4b76      	ldr	r3, [pc, #472]	@ (80022e4 <HAL_RCC_OscConfig+0x4bc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a75      	ldr	r2, [pc, #468]	@ (80022e4 <HAL_RCC_OscConfig+0x4bc>)
 8002110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002116:	f7ff f8f7 	bl	8001308 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211e:	f7ff f8f3 	bl	8001308 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e183      	b.n	8002438 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002130:	4b6c      	ldr	r3, [pc, #432]	@ (80022e4 <HAL_RCC_OscConfig+0x4bc>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d108      	bne.n	8002156 <HAL_RCC_OscConfig+0x32e>
 8002144:	4b66      	ldr	r3, [pc, #408]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214a:	4a65      	ldr	r2, [pc, #404]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002154:	e024      	b.n	80021a0 <HAL_RCC_OscConfig+0x378>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b05      	cmp	r3, #5
 800215c:	d110      	bne.n	8002180 <HAL_RCC_OscConfig+0x358>
 800215e:	4b60      	ldr	r3, [pc, #384]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 8002160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002164:	4a5e      	ldr	r2, [pc, #376]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 8002166:	f043 0304 	orr.w	r3, r3, #4
 800216a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800216e:	4b5c      	ldr	r3, [pc, #368]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 8002170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002174:	4a5a      	ldr	r2, [pc, #360]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800217e:	e00f      	b.n	80021a0 <HAL_RCC_OscConfig+0x378>
 8002180:	4b57      	ldr	r3, [pc, #348]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002186:	4a56      	ldr	r2, [pc, #344]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 8002188:	f023 0301 	bic.w	r3, r3, #1
 800218c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002190:	4b53      	ldr	r3, [pc, #332]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002196:	4a52      	ldr	r2, [pc, #328]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 8002198:	f023 0304 	bic.w	r3, r3, #4
 800219c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d016      	beq.n	80021d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a8:	f7ff f8ae 	bl	8001308 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b0:	f7ff f8aa 	bl	8001308 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e138      	b.n	8002438 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c6:	4b46      	ldr	r3, [pc, #280]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 80021c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0ed      	beq.n	80021b0 <HAL_RCC_OscConfig+0x388>
 80021d4:	e015      	b.n	8002202 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d6:	f7ff f897 	bl	8001308 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021dc:	e00a      	b.n	80021f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7ff f893 	bl	8001308 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e121      	b.n	8002438 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021f4:	4b3a      	ldr	r3, [pc, #232]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 80021f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ed      	bne.n	80021de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002202:	7ffb      	ldrb	r3, [r7, #31]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d105      	bne.n	8002214 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002208:	4b35      	ldr	r3, [pc, #212]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 800220a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220c:	4a34      	ldr	r2, [pc, #208]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 800220e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002212:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	2b00      	cmp	r3, #0
 800221e:	d03c      	beq.n	800229a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d01c      	beq.n	8002262 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002228:	4b2d      	ldr	r3, [pc, #180]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 800222a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800222e:	4a2c      	ldr	r2, [pc, #176]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002238:	f7ff f866 	bl	8001308 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002240:	f7ff f862 	bl	8001308 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e0f2      	b.n	8002438 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002252:	4b23      	ldr	r3, [pc, #140]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 8002254:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0ef      	beq.n	8002240 <HAL_RCC_OscConfig+0x418>
 8002260:	e01b      	b.n	800229a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002262:	4b1f      	ldr	r3, [pc, #124]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 8002264:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002268:	4a1d      	ldr	r2, [pc, #116]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002272:	f7ff f849 	bl	8001308 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800227a:	f7ff f845 	bl	8001308 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e0d5      	b.n	8002438 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800228c:	4b14      	ldr	r3, [pc, #80]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 800228e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1ef      	bne.n	800227a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 80c9 	beq.w	8002436 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022a4:	4b0e      	ldr	r3, [pc, #56]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b0c      	cmp	r3, #12
 80022ae:	f000 8083 	beq.w	80023b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d15e      	bne.n	8002378 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ba:	4b09      	ldr	r3, [pc, #36]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a08      	ldr	r2, [pc, #32]	@ (80022e0 <HAL_RCC_OscConfig+0x4b8>)
 80022c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7ff f81f 	bl	8001308 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022cc:	e00c      	b.n	80022e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ce:	f7ff f81b 	bl	8001308 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d905      	bls.n	80022e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e0ab      	b.n	8002438 <HAL_RCC_OscConfig+0x610>
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e8:	4b55      	ldr	r3, [pc, #340]	@ (8002440 <HAL_RCC_OscConfig+0x618>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1ec      	bne.n	80022ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022f4:	4b52      	ldr	r3, [pc, #328]	@ (8002440 <HAL_RCC_OscConfig+0x618>)
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	4b52      	ldr	r3, [pc, #328]	@ (8002444 <HAL_RCC_OscConfig+0x61c>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6a11      	ldr	r1, [r2, #32]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002304:	3a01      	subs	r2, #1
 8002306:	0112      	lsls	r2, r2, #4
 8002308:	4311      	orrs	r1, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800230e:	0212      	lsls	r2, r2, #8
 8002310:	4311      	orrs	r1, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002316:	0852      	lsrs	r2, r2, #1
 8002318:	3a01      	subs	r2, #1
 800231a:	0552      	lsls	r2, r2, #21
 800231c:	4311      	orrs	r1, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002322:	0852      	lsrs	r2, r2, #1
 8002324:	3a01      	subs	r2, #1
 8002326:	0652      	lsls	r2, r2, #25
 8002328:	4311      	orrs	r1, r2
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800232e:	06d2      	lsls	r2, r2, #27
 8002330:	430a      	orrs	r2, r1
 8002332:	4943      	ldr	r1, [pc, #268]	@ (8002440 <HAL_RCC_OscConfig+0x618>)
 8002334:	4313      	orrs	r3, r2
 8002336:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002338:	4b41      	ldr	r3, [pc, #260]	@ (8002440 <HAL_RCC_OscConfig+0x618>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a40      	ldr	r2, [pc, #256]	@ (8002440 <HAL_RCC_OscConfig+0x618>)
 800233e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002342:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002344:	4b3e      	ldr	r3, [pc, #248]	@ (8002440 <HAL_RCC_OscConfig+0x618>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4a3d      	ldr	r2, [pc, #244]	@ (8002440 <HAL_RCC_OscConfig+0x618>)
 800234a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800234e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7fe ffda 	bl	8001308 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe ffd6 	bl	8001308 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e066      	b.n	8002438 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236a:	4b35      	ldr	r3, [pc, #212]	@ (8002440 <HAL_RCC_OscConfig+0x618>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x530>
 8002376:	e05e      	b.n	8002436 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002378:	4b31      	ldr	r3, [pc, #196]	@ (8002440 <HAL_RCC_OscConfig+0x618>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a30      	ldr	r2, [pc, #192]	@ (8002440 <HAL_RCC_OscConfig+0x618>)
 800237e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe ffc0 	bl	8001308 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe ffbc 	bl	8001308 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e04c      	b.n	8002438 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800239e:	4b28      	ldr	r3, [pc, #160]	@ (8002440 <HAL_RCC_OscConfig+0x618>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80023aa:	4b25      	ldr	r3, [pc, #148]	@ (8002440 <HAL_RCC_OscConfig+0x618>)
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	4924      	ldr	r1, [pc, #144]	@ (8002440 <HAL_RCC_OscConfig+0x618>)
 80023b0:	4b25      	ldr	r3, [pc, #148]	@ (8002448 <HAL_RCC_OscConfig+0x620>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	60cb      	str	r3, [r1, #12]
 80023b6:	e03e      	b.n	8002436 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e039      	b.n	8002438 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80023c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002440 <HAL_RCC_OscConfig+0x618>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f003 0203 	and.w	r2, r3, #3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d12c      	bne.n	8002432 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e2:	3b01      	subs	r3, #1
 80023e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d123      	bne.n	8002432 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d11b      	bne.n	8002432 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002404:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002406:	429a      	cmp	r2, r3
 8002408:	d113      	bne.n	8002432 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002414:	085b      	lsrs	r3, r3, #1
 8002416:	3b01      	subs	r3, #1
 8002418:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d109      	bne.n	8002432 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002428:	085b      	lsrs	r3, r3, #1
 800242a:	3b01      	subs	r3, #1
 800242c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800242e:	429a      	cmp	r2, r3
 8002430:	d001      	beq.n	8002436 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3720      	adds	r7, #32
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40021000 	.word	0x40021000
 8002444:	019f800c 	.word	0x019f800c
 8002448:	feeefffc 	.word	0xfeeefffc

0800244c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e11e      	b.n	80026a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002464:	4b91      	ldr	r3, [pc, #580]	@ (80026ac <HAL_RCC_ClockConfig+0x260>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d910      	bls.n	8002494 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b8e      	ldr	r3, [pc, #568]	@ (80026ac <HAL_RCC_ClockConfig+0x260>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 020f 	bic.w	r2, r3, #15
 800247a:	498c      	ldr	r1, [pc, #560]	@ (80026ac <HAL_RCC_ClockConfig+0x260>)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	4313      	orrs	r3, r2
 8002480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002482:	4b8a      	ldr	r3, [pc, #552]	@ (80026ac <HAL_RCC_ClockConfig+0x260>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d001      	beq.n	8002494 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e106      	b.n	80026a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d073      	beq.n	8002588 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d129      	bne.n	80024fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a8:	4b81      	ldr	r3, [pc, #516]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0f4      	b.n	80026a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80024b8:	f000 f966 	bl	8002788 <RCC_GetSysClockFreqFromPLLSource>
 80024bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4a7c      	ldr	r2, [pc, #496]	@ (80026b4 <HAL_RCC_ClockConfig+0x268>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d93f      	bls.n	8002546 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024c6:	4b7a      	ldr	r3, [pc, #488]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d033      	beq.n	8002546 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d12f      	bne.n	8002546 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024e6:	4b72      	ldr	r3, [pc, #456]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024ee:	4a70      	ldr	r2, [pc, #448]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 80024f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024f6:	2380      	movs	r3, #128	@ 0x80
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	e024      	b.n	8002546 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d107      	bne.n	8002514 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002504:	4b6a      	ldr	r3, [pc, #424]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d109      	bne.n	8002524 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0c6      	b.n	80026a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002514:	4b66      	ldr	r3, [pc, #408]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0be      	b.n	80026a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002524:	f000 f8ce 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8002528:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4a61      	ldr	r2, [pc, #388]	@ (80026b4 <HAL_RCC_ClockConfig+0x268>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d909      	bls.n	8002546 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002532:	4b5f      	ldr	r3, [pc, #380]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800253a:	4a5d      	ldr	r2, [pc, #372]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 800253c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002540:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002542:	2380      	movs	r3, #128	@ 0x80
 8002544:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002546:	4b5a      	ldr	r3, [pc, #360]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f023 0203 	bic.w	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4957      	ldr	r1, [pc, #348]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 8002554:	4313      	orrs	r3, r2
 8002556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002558:	f7fe fed6 	bl	8001308 <HAL_GetTick>
 800255c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	e00a      	b.n	8002576 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002560:	f7fe fed2 	bl	8001308 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e095      	b.n	80026a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002576:	4b4e      	ldr	r3, [pc, #312]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 020c 	and.w	r2, r3, #12
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	429a      	cmp	r2, r3
 8002586:	d1eb      	bne.n	8002560 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d023      	beq.n	80025dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a0:	4b43      	ldr	r3, [pc, #268]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4a42      	ldr	r2, [pc, #264]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 80025a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d007      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80025b8:	4b3d      	ldr	r3, [pc, #244]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80025c0:	4a3b      	ldr	r2, [pc, #236]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 80025c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c8:	4b39      	ldr	r3, [pc, #228]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4936      	ldr	r1, [pc, #216]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
 80025da:	e008      	b.n	80025ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b80      	cmp	r3, #128	@ 0x80
 80025e0:	d105      	bne.n	80025ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80025e2:	4b33      	ldr	r3, [pc, #204]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	4a32      	ldr	r2, [pc, #200]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 80025e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025ee:	4b2f      	ldr	r3, [pc, #188]	@ (80026ac <HAL_RCC_ClockConfig+0x260>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d21d      	bcs.n	8002638 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fc:	4b2b      	ldr	r3, [pc, #172]	@ (80026ac <HAL_RCC_ClockConfig+0x260>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f023 020f 	bic.w	r2, r3, #15
 8002604:	4929      	ldr	r1, [pc, #164]	@ (80026ac <HAL_RCC_ClockConfig+0x260>)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	4313      	orrs	r3, r2
 800260a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800260c:	f7fe fe7c 	bl	8001308 <HAL_GetTick>
 8002610:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	e00a      	b.n	800262a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002614:	f7fe fe78 	bl	8001308 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e03b      	b.n	80026a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262a:	4b20      	ldr	r3, [pc, #128]	@ (80026ac <HAL_RCC_ClockConfig+0x260>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d1ed      	bne.n	8002614 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002644:	4b1a      	ldr	r3, [pc, #104]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4917      	ldr	r1, [pc, #92]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002662:	4b13      	ldr	r3, [pc, #76]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	490f      	ldr	r1, [pc, #60]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002676:	f000 f825 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 800267a:	4602      	mov	r2, r0
 800267c:	4b0c      	ldr	r3, [pc, #48]	@ (80026b0 <HAL_RCC_ClockConfig+0x264>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	490c      	ldr	r1, [pc, #48]	@ (80026b8 <HAL_RCC_ClockConfig+0x26c>)
 8002688:	5ccb      	ldrb	r3, [r1, r3]
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	fa22 f303 	lsr.w	r3, r2, r3
 8002692:	4a0a      	ldr	r2, [pc, #40]	@ (80026bc <HAL_RCC_ClockConfig+0x270>)
 8002694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002696:	4b0a      	ldr	r3, [pc, #40]	@ (80026c0 <HAL_RCC_ClockConfig+0x274>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fde8 	bl	8001270 <HAL_InitTick>
 80026a0:	4603      	mov	r3, r0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40022000 	.word	0x40022000
 80026b0:	40021000 	.word	0x40021000
 80026b4:	04c4b400 	.word	0x04c4b400
 80026b8:	08003e70 	.word	0x08003e70
 80026bc:	20000008 	.word	0x20000008
 80026c0:	2000000c 	.word	0x2000000c

080026c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026ca:	4b2c      	ldr	r3, [pc, #176]	@ (800277c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d102      	bne.n	80026dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002780 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	e047      	b.n	800276c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026dc:	4b27      	ldr	r3, [pc, #156]	@ (800277c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d102      	bne.n	80026ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026e8:	4b26      	ldr	r3, [pc, #152]	@ (8002784 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	e03e      	b.n	800276c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80026ee:	4b23      	ldr	r3, [pc, #140]	@ (800277c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b0c      	cmp	r3, #12
 80026f8:	d136      	bne.n	8002768 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026fa:	4b20      	ldr	r3, [pc, #128]	@ (800277c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002704:	4b1d      	ldr	r3, [pc, #116]	@ (800277c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	3301      	adds	r3, #1
 8002710:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d10c      	bne.n	8002732 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002718:	4a1a      	ldr	r2, [pc, #104]	@ (8002784 <HAL_RCC_GetSysClockFreq+0xc0>)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002720:	4a16      	ldr	r2, [pc, #88]	@ (800277c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002722:	68d2      	ldr	r2, [r2, #12]
 8002724:	0a12      	lsrs	r2, r2, #8
 8002726:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800272a:	fb02 f303 	mul.w	r3, r2, r3
 800272e:	617b      	str	r3, [r7, #20]
      break;
 8002730:	e00c      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002732:	4a13      	ldr	r2, [pc, #76]	@ (8002780 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	4a10      	ldr	r2, [pc, #64]	@ (800277c <HAL_RCC_GetSysClockFreq+0xb8>)
 800273c:	68d2      	ldr	r2, [r2, #12]
 800273e:	0a12      	lsrs	r2, r2, #8
 8002740:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002744:	fb02 f303 	mul.w	r3, r2, r3
 8002748:	617b      	str	r3, [r7, #20]
      break;
 800274a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800274c:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <HAL_RCC_GetSysClockFreq+0xb8>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	0e5b      	lsrs	r3, r3, #25
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	3301      	adds	r3, #1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	e001      	b.n	800276c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800276c:	693b      	ldr	r3, [r7, #16]
}
 800276e:	4618      	mov	r0, r3
 8002770:	371c      	adds	r7, #28
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	00f42400 	.word	0x00f42400
 8002784:	02dc6c00 	.word	0x02dc6c00

08002788 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800278e:	4b1e      	ldr	r3, [pc, #120]	@ (8002808 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002798:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	3301      	adds	r3, #1
 80027a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d10c      	bne.n	80027c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027ac:	4a17      	ldr	r2, [pc, #92]	@ (800280c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b4:	4a14      	ldr	r2, [pc, #80]	@ (8002808 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027b6:	68d2      	ldr	r2, [r2, #12]
 80027b8:	0a12      	lsrs	r2, r2, #8
 80027ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027be:	fb02 f303 	mul.w	r3, r2, r3
 80027c2:	617b      	str	r3, [r7, #20]
    break;
 80027c4:	e00c      	b.n	80027e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027c6:	4a12      	ldr	r2, [pc, #72]	@ (8002810 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002808 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027d0:	68d2      	ldr	r2, [r2, #12]
 80027d2:	0a12      	lsrs	r2, r2, #8
 80027d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027d8:	fb02 f303 	mul.w	r3, r2, r3
 80027dc:	617b      	str	r3, [r7, #20]
    break;
 80027de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027e0:	4b09      	ldr	r3, [pc, #36]	@ (8002808 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	0e5b      	lsrs	r3, r3, #25
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	3301      	adds	r3, #1
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80027fa:	687b      	ldr	r3, [r7, #4]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	371c      	adds	r7, #28
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	40021000 	.word	0x40021000
 800280c:	02dc6c00 	.word	0x02dc6c00
 8002810:	00f42400 	.word	0x00f42400

08002814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e09d      	b.n	8002962 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282a:	2b00      	cmp	r3, #0
 800282c:	d108      	bne.n	8002840 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002836:	d009      	beq.n	800284c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	61da      	str	r2, [r3, #28]
 800283e:	e005      	b.n	800284c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe fa62 	bl	8000d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002882:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800288c:	d902      	bls.n	8002894 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	e002      	b.n	800289a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002898:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80028a2:	d007      	beq.n	80028b4 <HAL_SPI_Init+0xa0>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80028ac:	d002      	beq.n	80028b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f6:	ea42 0103 	orr.w	r1, r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	0c1b      	lsrs	r3, r3, #16
 8002910:	f003 0204 	and.w	r2, r3, #4
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002930:	ea42 0103 	orr.w	r1, r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002950:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b088      	sub	sp, #32
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	603b      	str	r3, [r7, #0]
 8002976:	4613      	mov	r3, r2
 8002978:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_SPI_Transmit+0x22>
 8002988:	2302      	movs	r3, #2
 800298a:	e15f      	b.n	8002c4c <HAL_SPI_Transmit+0x2e2>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002994:	f7fe fcb8 	bl	8001308 <HAL_GetTick>
 8002998:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d002      	beq.n	80029b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029aa:	2302      	movs	r3, #2
 80029ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029ae:	e148      	b.n	8002c42 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <HAL_SPI_Transmit+0x52>
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029c0:	e13f      	b.n	8002c42 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2203      	movs	r2, #3
 80029c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	88fa      	ldrh	r2, [r7, #6]
 80029da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	88fa      	ldrh	r2, [r7, #6]
 80029e0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a0c:	d10f      	bne.n	8002a2e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a38:	2b40      	cmp	r3, #64	@ 0x40
 8002a3a:	d007      	beq.n	8002a4c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a54:	d94f      	bls.n	8002af6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_SPI_Transmit+0xfa>
 8002a5e:	8afb      	ldrh	r3, [r7, #22]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d142      	bne.n	8002aea <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a68:	881a      	ldrh	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a74:	1c9a      	adds	r2, r3, #2
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a88:	e02f      	b.n	8002aea <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d112      	bne.n	8002abe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9c:	881a      	ldrh	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa8:	1c9a      	adds	r2, r3, #2
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002abc:	e015      	b.n	8002aea <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002abe:	f7fe fc23 	bl	8001308 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d803      	bhi.n	8002ad6 <HAL_SPI_Transmit+0x16c>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d102      	bne.n	8002adc <HAL_SPI_Transmit+0x172>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d106      	bne.n	8002aea <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002ae8:	e0ab      	b.n	8002c42 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1ca      	bne.n	8002a8a <HAL_SPI_Transmit+0x120>
 8002af4:	e080      	b.n	8002bf8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_SPI_Transmit+0x19a>
 8002afe:	8afb      	ldrh	r3, [r7, #22]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d174      	bne.n	8002bee <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d912      	bls.n	8002b34 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b12:	881a      	ldrh	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1e:	1c9a      	adds	r2, r3, #2
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	3b02      	subs	r3, #2
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b32:	e05c      	b.n	8002bee <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	7812      	ldrb	r2, [r2, #0]
 8002b40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002b5a:	e048      	b.n	8002bee <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d12b      	bne.n	8002bc2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d912      	bls.n	8002b9a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b78:	881a      	ldrh	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b84:	1c9a      	adds	r2, r3, #2
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	3b02      	subs	r3, #2
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b98:	e029      	b.n	8002bee <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	330c      	adds	r3, #12
 8002ba4:	7812      	ldrb	r2, [r2, #0]
 8002ba6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002bc0:	e015      	b.n	8002bee <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bc2:	f7fe fba1 	bl	8001308 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d803      	bhi.n	8002bda <HAL_SPI_Transmit+0x270>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d102      	bne.n	8002be0 <HAL_SPI_Transmit+0x276>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d106      	bne.n	8002bee <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002bec:	e029      	b.n	8002c42 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1b1      	bne.n	8002b5c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	6839      	ldr	r1, [r7, #0]
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 f947 	bl	8002e90 <SPI_EndRxTxTransaction>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10a      	bne.n	8002c2c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	77fb      	strb	r3, [r7, #31]
 8002c38:	e003      	b.n	8002c42 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002c4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3720      	adds	r7, #32
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c64:	f7fe fb50 	bl	8001308 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	4413      	add	r3, r2
 8002c72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c74:	f7fe fb48 	bl	8001308 <HAL_GetTick>
 8002c78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c7a:	4b39      	ldr	r3, [pc, #228]	@ (8002d60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	015b      	lsls	r3, r3, #5
 8002c80:	0d1b      	lsrs	r3, r3, #20
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	fb02 f303 	mul.w	r3, r2, r3
 8002c88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c8a:	e054      	b.n	8002d36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c92:	d050      	beq.n	8002d36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c94:	f7fe fb38 	bl	8001308 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	69fa      	ldr	r2, [r7, #28]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d902      	bls.n	8002caa <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d13d      	bne.n	8002d26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002cb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cc2:	d111      	bne.n	8002ce8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ccc:	d004      	beq.n	8002cd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cd6:	d107      	bne.n	8002ce8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ce6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cf0:	d10f      	bne.n	8002d12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e017      	b.n	8002d56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	bf0c      	ite	eq
 8002d46:	2301      	moveq	r3, #1
 8002d48:	2300      	movne	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d19b      	bne.n	8002c8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000008 	.word	0x20000008

08002d64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	@ 0x28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002d76:	f7fe fac7 	bl	8001308 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	4413      	add	r3, r2
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002d86:	f7fe fabf 	bl	8001308 <HAL_GetTick>
 8002d8a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002d94:	4b3d      	ldr	r3, [pc, #244]	@ (8002e8c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00da      	lsls	r2, r3, #3
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	0d1b      	lsrs	r3, r3, #20
 8002da4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002dac:	e060      	b.n	8002e70 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002db4:	d107      	bne.n	8002dc6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d104      	bne.n	8002dc6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dcc:	d050      	beq.n	8002e70 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002dce:	f7fe fa9b 	bl	8001308 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d902      	bls.n	8002de4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d13d      	bne.n	8002e60 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002df2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dfc:	d111      	bne.n	8002e22 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e06:	d004      	beq.n	8002e12 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e10:	d107      	bne.n	8002e22 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e2a:	d10f      	bne.n	8002e4c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e010      	b.n	8002e82 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d196      	bne.n	8002dae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3728      	adds	r7, #40	@ 0x28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000008 	.word	0x20000008

08002e90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f7ff ff5b 	bl	8002d64 <SPI_WaitFifoStateUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d007      	beq.n	8002ec4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb8:	f043 0220 	orr.w	r2, r3, #32
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e027      	b.n	8002f14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2180      	movs	r1, #128	@ 0x80
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f7ff fec0 	bl	8002c54 <SPI_WaitFlagStateUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ede:	f043 0220 	orr.w	r2, r3, #32
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e014      	b.n	8002f14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7ff ff34 	bl	8002d64 <SPI_WaitFifoStateUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d007      	beq.n	8002f12 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f06:	f043 0220 	orr.w	r2, r3, #32
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e000      	b.n	8002f14 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e049      	b.n	8002fc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fd ff64 	bl	8000e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3304      	adds	r3, #4
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f000 fa54 	bl	8003408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d001      	beq.n	8002fe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e054      	b.n	800308e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a26      	ldr	r2, [pc, #152]	@ (800309c <HAL_TIM_Base_Start_IT+0xd0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d022      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x80>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800300e:	d01d      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x80>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a22      	ldr	r2, [pc, #136]	@ (80030a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d018      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x80>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a21      	ldr	r2, [pc, #132]	@ (80030a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d013      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x80>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1f      	ldr	r2, [pc, #124]	@ (80030a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00e      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x80>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a1e      	ldr	r2, [pc, #120]	@ (80030ac <HAL_TIM_Base_Start_IT+0xe0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d009      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x80>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a1c      	ldr	r2, [pc, #112]	@ (80030b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d004      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x80>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1b      	ldr	r2, [pc, #108]	@ (80030b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d115      	bne.n	8003078 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	4b19      	ldr	r3, [pc, #100]	@ (80030b8 <HAL_TIM_Base_Start_IT+0xec>)
 8003054:	4013      	ands	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b06      	cmp	r3, #6
 800305c:	d015      	beq.n	800308a <HAL_TIM_Base_Start_IT+0xbe>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003064:	d011      	beq.n	800308a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0201 	orr.w	r2, r2, #1
 8003074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003076:	e008      	b.n	800308a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	e000      	b.n	800308c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40012c00 	.word	0x40012c00
 80030a0:	40000400 	.word	0x40000400
 80030a4:	40000800 	.word	0x40000800
 80030a8:	40000c00 	.word	0x40000c00
 80030ac:	40013400 	.word	0x40013400
 80030b0:	40014000 	.word	0x40014000
 80030b4:	40015000 	.word	0x40015000
 80030b8:	00010007 	.word	0x00010007

080030bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0201 	bic.w	r2, r2, #1
 80030d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6a1a      	ldr	r2, [r3, #32]
 80030da:	f241 1311 	movw	r3, #4369	@ 0x1111
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10f      	bne.n	8003104 <HAL_TIM_Base_Stop_IT+0x48>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6a1a      	ldr	r2, [r3, #32]
 80030ea:	f244 4344 	movw	r3, #17476	@ 0x4444
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d107      	bne.n	8003104 <HAL_TIM_Base_Stop_IT+0x48>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d020      	beq.n	800317e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01b      	beq.n	800317e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f06f 0202 	mvn.w	r2, #2
 800314e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f931 	bl	80033cc <HAL_TIM_IC_CaptureCallback>
 800316a:	e005      	b.n	8003178 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f923 	bl	80033b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f934 	bl	80033e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b00      	cmp	r3, #0
 8003190:	d01b      	beq.n	80031ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f06f 0204 	mvn.w	r2, #4
 800319a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f90b 	bl	80033cc <HAL_TIM_IC_CaptureCallback>
 80031b6:	e005      	b.n	80031c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f8fd 	bl	80033b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f90e 	bl	80033e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d020      	beq.n	8003216 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d01b      	beq.n	8003216 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f06f 0208 	mvn.w	r2, #8
 80031e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2204      	movs	r2, #4
 80031ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f8e5 	bl	80033cc <HAL_TIM_IC_CaptureCallback>
 8003202:	e005      	b.n	8003210 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f8d7 	bl	80033b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f8e8 	bl	80033e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b00      	cmp	r3, #0
 800321e:	d020      	beq.n	8003262 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	d01b      	beq.n	8003262 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f06f 0210 	mvn.w	r2, #16
 8003232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2208      	movs	r2, #8
 8003238:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f8bf 	bl	80033cc <HAL_TIM_IC_CaptureCallback>
 800324e:	e005      	b.n	800325c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f8b1 	bl	80033b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f8c2 	bl	80033e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00c      	beq.n	8003286 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f06f 0201 	mvn.w	r2, #1
 800327e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7fd fb2d 	bl	80008e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800328c:	2b00      	cmp	r3, #0
 800328e:	d104      	bne.n	800329a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00c      	beq.n	80032b4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d007      	beq.n	80032b4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80032ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f968 	bl	8003584 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00c      	beq.n	80032d8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d007      	beq.n	80032d8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80032d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f960 	bl	8003598 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00c      	beq.n	80032fc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d007      	beq.n	80032fc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80032f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f87c 	bl	80033f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00c      	beq.n	8003320 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0220 	mvn.w	r2, #32
 8003318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f928 	bl	8003570 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00c      	beq.n	8003344 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d007      	beq.n	8003344 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800333c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f934 	bl	80035ac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00c      	beq.n	8003368 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d007      	beq.n	8003368 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f92c 	bl	80035c0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00c      	beq.n	800338c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d007      	beq.n	800338c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f924 	bl	80035d4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00c      	beq.n	80033b0 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d007      	beq.n	80033b0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80033a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f91c 	bl	80035e8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033b0:	bf00      	nop
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a4c      	ldr	r2, [pc, #304]	@ (800354c <TIM_Base_SetConfig+0x144>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d017      	beq.n	8003450 <TIM_Base_SetConfig+0x48>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003426:	d013      	beq.n	8003450 <TIM_Base_SetConfig+0x48>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a49      	ldr	r2, [pc, #292]	@ (8003550 <TIM_Base_SetConfig+0x148>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00f      	beq.n	8003450 <TIM_Base_SetConfig+0x48>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a48      	ldr	r2, [pc, #288]	@ (8003554 <TIM_Base_SetConfig+0x14c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00b      	beq.n	8003450 <TIM_Base_SetConfig+0x48>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a47      	ldr	r2, [pc, #284]	@ (8003558 <TIM_Base_SetConfig+0x150>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d007      	beq.n	8003450 <TIM_Base_SetConfig+0x48>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a46      	ldr	r2, [pc, #280]	@ (800355c <TIM_Base_SetConfig+0x154>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d003      	beq.n	8003450 <TIM_Base_SetConfig+0x48>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a45      	ldr	r2, [pc, #276]	@ (8003560 <TIM_Base_SetConfig+0x158>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d108      	bne.n	8003462 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a39      	ldr	r2, [pc, #228]	@ (800354c <TIM_Base_SetConfig+0x144>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d023      	beq.n	80034b2 <TIM_Base_SetConfig+0xaa>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003470:	d01f      	beq.n	80034b2 <TIM_Base_SetConfig+0xaa>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a36      	ldr	r2, [pc, #216]	@ (8003550 <TIM_Base_SetConfig+0x148>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d01b      	beq.n	80034b2 <TIM_Base_SetConfig+0xaa>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a35      	ldr	r2, [pc, #212]	@ (8003554 <TIM_Base_SetConfig+0x14c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d017      	beq.n	80034b2 <TIM_Base_SetConfig+0xaa>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a34      	ldr	r2, [pc, #208]	@ (8003558 <TIM_Base_SetConfig+0x150>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <TIM_Base_SetConfig+0xaa>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a33      	ldr	r2, [pc, #204]	@ (800355c <TIM_Base_SetConfig+0x154>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00f      	beq.n	80034b2 <TIM_Base_SetConfig+0xaa>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a33      	ldr	r2, [pc, #204]	@ (8003564 <TIM_Base_SetConfig+0x15c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00b      	beq.n	80034b2 <TIM_Base_SetConfig+0xaa>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a32      	ldr	r2, [pc, #200]	@ (8003568 <TIM_Base_SetConfig+0x160>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d007      	beq.n	80034b2 <TIM_Base_SetConfig+0xaa>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a31      	ldr	r2, [pc, #196]	@ (800356c <TIM_Base_SetConfig+0x164>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d003      	beq.n	80034b2 <TIM_Base_SetConfig+0xaa>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003560 <TIM_Base_SetConfig+0x158>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d108      	bne.n	80034c4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a18      	ldr	r2, [pc, #96]	@ (800354c <TIM_Base_SetConfig+0x144>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d013      	beq.n	8003518 <TIM_Base_SetConfig+0x110>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a1a      	ldr	r2, [pc, #104]	@ (800355c <TIM_Base_SetConfig+0x154>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00f      	beq.n	8003518 <TIM_Base_SetConfig+0x110>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003564 <TIM_Base_SetConfig+0x15c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00b      	beq.n	8003518 <TIM_Base_SetConfig+0x110>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a19      	ldr	r2, [pc, #100]	@ (8003568 <TIM_Base_SetConfig+0x160>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d007      	beq.n	8003518 <TIM_Base_SetConfig+0x110>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a18      	ldr	r2, [pc, #96]	@ (800356c <TIM_Base_SetConfig+0x164>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d003      	beq.n	8003518 <TIM_Base_SetConfig+0x110>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a13      	ldr	r2, [pc, #76]	@ (8003560 <TIM_Base_SetConfig+0x158>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d103      	bne.n	8003520 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b01      	cmp	r3, #1
 8003530:	d105      	bne.n	800353e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f023 0201 	bic.w	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	611a      	str	r2, [r3, #16]
  }
}
 800353e:	bf00      	nop
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40012c00 	.word	0x40012c00
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800
 8003558:	40000c00 	.word	0x40000c00
 800355c:	40013400 	.word	0x40013400
 8003560:	40015000 	.word	0x40015000
 8003564:	40014000 	.word	0x40014000
 8003568:	40014400 	.word	0x40014400
 800356c:	40014800 	.word	0x40014800

08003570 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <memset>:
 80035fc:	4402      	add	r2, r0
 80035fe:	4603      	mov	r3, r0
 8003600:	4293      	cmp	r3, r2
 8003602:	d100      	bne.n	8003606 <memset+0xa>
 8003604:	4770      	bx	lr
 8003606:	f803 1b01 	strb.w	r1, [r3], #1
 800360a:	e7f9      	b.n	8003600 <memset+0x4>

0800360c <__libc_init_array>:
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	4d0d      	ldr	r5, [pc, #52]	@ (8003644 <__libc_init_array+0x38>)
 8003610:	4c0d      	ldr	r4, [pc, #52]	@ (8003648 <__libc_init_array+0x3c>)
 8003612:	1b64      	subs	r4, r4, r5
 8003614:	10a4      	asrs	r4, r4, #2
 8003616:	2600      	movs	r6, #0
 8003618:	42a6      	cmp	r6, r4
 800361a:	d109      	bne.n	8003630 <__libc_init_array+0x24>
 800361c:	4d0b      	ldr	r5, [pc, #44]	@ (800364c <__libc_init_array+0x40>)
 800361e:	4c0c      	ldr	r4, [pc, #48]	@ (8003650 <__libc_init_array+0x44>)
 8003620:	f000 f818 	bl	8003654 <_init>
 8003624:	1b64      	subs	r4, r4, r5
 8003626:	10a4      	asrs	r4, r4, #2
 8003628:	2600      	movs	r6, #0
 800362a:	42a6      	cmp	r6, r4
 800362c:	d105      	bne.n	800363a <__libc_init_array+0x2e>
 800362e:	bd70      	pop	{r4, r5, r6, pc}
 8003630:	f855 3b04 	ldr.w	r3, [r5], #4
 8003634:	4798      	blx	r3
 8003636:	3601      	adds	r6, #1
 8003638:	e7ee      	b.n	8003618 <__libc_init_array+0xc>
 800363a:	f855 3b04 	ldr.w	r3, [r5], #4
 800363e:	4798      	blx	r3
 8003640:	3601      	adds	r6, #1
 8003642:	e7f2      	b.n	800362a <__libc_init_array+0x1e>
 8003644:	08003e80 	.word	0x08003e80
 8003648:	08003e80 	.word	0x08003e80
 800364c:	08003e80 	.word	0x08003e80
 8003650:	08003e84 	.word	0x08003e84

08003654 <_init>:
 8003654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003656:	bf00      	nop
 8003658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365a:	bc08      	pop	{r3}
 800365c:	469e      	mov	lr, r3
 800365e:	4770      	bx	lr

08003660 <_fini>:
 8003660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003662:	bf00      	nop
 8003664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003666:	bc08      	pop	{r3}
 8003668:	469e      	mov	lr, r3
 800366a:	4770      	bx	lr
