
012_Display_w_DMA_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028e8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002ac0  08002ac0  00003ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b44  08002b44  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b44  08002b44  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b44  08002b44  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b44  08002b44  00003b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b48  08002b48  00003b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b4c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08002b58  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002b58  000040fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000975a  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf5  00000000  00000000  0000d796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0000f390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000756  00000000  00000000  0000fd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002469a  00000000  00000000  0001049e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aef8  00000000  00000000  00034b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4e31  00000000  00000000  0003fa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124861  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000268c  00000000  00000000  001248a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00126f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002aa8 	.word	0x08002aa8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002aa8 	.word	0x08002aa8

08000218 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000218:	b590      	push	{r4, r7, lr}
 800021a:	b085      	sub	sp, #20
 800021c:	af02      	add	r7, sp, #8
 800021e:	4604      	mov	r4, r0
 8000220:	4608      	mov	r0, r1
 8000222:	4611      	mov	r1, r2
 8000224:	461a      	mov	r2, r3
 8000226:	4623      	mov	r3, r4
 8000228:	80fb      	strh	r3, [r7, #6]
 800022a:	4603      	mov	r3, r0
 800022c:	80bb      	strh	r3, [r7, #4]
 800022e:	460b      	mov	r3, r1
 8000230:	807b      	strh	r3, [r7, #2]
 8000232:	4613      	mov	r3, r2
 8000234:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000236:	88f8      	ldrh	r0, [r7, #6]
 8000238:	88b9      	ldrh	r1, [r7, #4]
 800023a:	887a      	ldrh	r2, [r7, #2]
 800023c:	883c      	ldrh	r4, [r7, #0]
 800023e:	8b3b      	ldrh	r3, [r7, #24]
 8000240:	9300      	str	r3, [sp, #0]
 8000242:	4623      	mov	r3, r4
 8000244:	f000 f9ca 	bl	80005dc <ST7735_FillRectangle>
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	bd90      	pop	{r4, r7, pc}

08000250 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af02      	add	r7, sp, #8
 8000256:	4603      	mov	r3, r0
 8000258:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800025a:	4b08      	ldr	r3, [pc, #32]	@ (800027c <fillScreen+0x2c>)
 800025c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000260:	4b07      	ldr	r3, [pc, #28]	@ (8000280 <fillScreen+0x30>)
 8000262:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000266:	88fb      	ldrh	r3, [r7, #6]
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	460b      	mov	r3, r1
 800026c:	2100      	movs	r1, #0
 800026e:	2000      	movs	r0, #0
 8000270:	f7ff ffd2 	bl	8000218 <fillRect>
}
 8000274:	bf00      	nop
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000028 	.word	0x20000028
 8000280:	2000002a 	.word	0x2000002a

08000284 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800028e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000292:	f001 fa7b 	bl	800178c <HAL_GPIO_WritePin>
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}

0800029a <ST7735_Unselect>:

void ST7735_Unselect()
{
 800029a:	b580      	push	{r7, lr}
 800029c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a8:	f001 fa70 	bl	800178c <HAL_GPIO_WritePin>
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <ST7735_Reset>:

void ST7735_Reset()
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2140      	movs	r1, #64	@ 0x40
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002bc:	f001 fa66 	bl	800178c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80002c0:	2005      	movs	r0, #5
 80002c2:	f000 fd3d 	bl	8000d40 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80002c6:	2201      	movs	r2, #1
 80002c8:	2140      	movs	r1, #64	@ 0x40
 80002ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ce:	f001 fa5d 	bl	800178c <HAL_GPIO_WritePin>
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002e8:	480a      	ldr	r0, [pc, #40]	@ (8000314 <ST7735_WriteCommand+0x3c>)
 80002ea:	f001 fa4f 	bl	800178c <HAL_GPIO_WritePin>
    //HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
 80002ee:	1dfb      	adds	r3, r7, #7
 80002f0:	2201      	movs	r2, #1
 80002f2:	4619      	mov	r1, r3
 80002f4:	4808      	ldr	r0, [pc, #32]	@ (8000318 <ST7735_WriteCommand+0x40>)
 80002f6:	f002 f8b7 	bl	8002468 <HAL_SPI_Transmit_DMA>
	while(hspi1.State == HAL_SPI_STATE_BUSY_TX)
 80002fa:	bf00      	nop
 80002fc:	4b06      	ldr	r3, [pc, #24]	@ (8000318 <ST7735_WriteCommand+0x40>)
 80002fe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8000302:	b2db      	uxtb	r3, r3
 8000304:	2b03      	cmp	r3, #3
 8000306:	d0f9      	beq.n	80002fc <ST7735_WriteCommand+0x24>
	{

	}
}
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	48000400 	.word	0x48000400
 8000318:	20000034 	.word	0x20000034

0800031c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000326:	2201      	movs	r2, #1
 8000328:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800032c:	480a      	ldr	r0, [pc, #40]	@ (8000358 <ST7735_WriteData+0x3c>)
 800032e:	f001 fa2d 	bl	800178c <HAL_GPIO_WritePin>
    //HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	b29b      	uxth	r3, r3
 8000336:	461a      	mov	r2, r3
 8000338:	6879      	ldr	r1, [r7, #4]
 800033a:	4808      	ldr	r0, [pc, #32]	@ (800035c <ST7735_WriteData+0x40>)
 800033c:	f002 f894 	bl	8002468 <HAL_SPI_Transmit_DMA>
	while(hspi1.State == HAL_SPI_STATE_BUSY_TX)
 8000340:	bf00      	nop
 8000342:	4b06      	ldr	r3, [pc, #24]	@ (800035c <ST7735_WriteData+0x40>)
 8000344:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8000348:	b2db      	uxtb	r3, r3
 800034a:	2b03      	cmp	r3, #3
 800034c:	d0f9      	beq.n	8000342 <ST7735_WriteData+0x26>
	{

	}
}
 800034e:	bf00      	nop
 8000350:	bf00      	nop
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	48000400 	.word	0x48000400
 800035c:	20000034 	.word	0x20000034

08000360 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	1c5a      	adds	r2, r3, #1
 800036c:	607a      	str	r2, [r7, #4]
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000372:	e034      	b.n	80003de <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	1c5a      	adds	r2, r3, #1
 8000378:	607a      	str	r2, [r7, #4]
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800037e:	7afb      	ldrb	r3, [r7, #11]
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ffa9 	bl	80002d8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	1c5a      	adds	r2, r3, #1
 800038a:	607a      	str	r2, [r7, #4]
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000390:	7abb      	ldrb	r3, [r7, #10]
 8000392:	b29b      	uxth	r3, r3
 8000394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000398:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800039a:	7abb      	ldrb	r3, [r7, #10]
 800039c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80003a0:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80003a2:	7abb      	ldrb	r3, [r7, #10]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d008      	beq.n	80003ba <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80003a8:	7abb      	ldrb	r3, [r7, #10]
 80003aa:	4619      	mov	r1, r3
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f7ff ffb5 	bl	800031c <ST7735_WriteData>
            addr += numArgs;
 80003b2:	7abb      	ldrb	r3, [r7, #10]
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	4413      	add	r3, r2
 80003b8:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80003ba:	89bb      	ldrh	r3, [r7, #12]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d00e      	beq.n	80003de <DisplayInit+0x7e>
            ms = *addr++;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	1c5a      	adds	r2, r3, #1
 80003c4:	607a      	str	r2, [r7, #4]
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80003ca:	89bb      	ldrh	r3, [r7, #12]
 80003cc:	2bff      	cmp	r3, #255	@ 0xff
 80003ce:	d102      	bne.n	80003d6 <DisplayInit+0x76>
 80003d0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80003d4:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80003d6:	89bb      	ldrh	r3, [r7, #12]
 80003d8:	4618      	mov	r0, r3
 80003da:	f000 fcb1 	bl	8000d40 <HAL_Delay>
    while(numCommands--) {
 80003de:	7bfb      	ldrb	r3, [r7, #15]
 80003e0:	1e5a      	subs	r2, r3, #1
 80003e2:	73fa      	strb	r2, [r7, #15]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d1c5      	bne.n	8000374 <DisplayInit+0x14>
        }
    }
}
 80003e8:	bf00      	nop
 80003ea:	bf00      	nop
 80003ec:	3710      	adds	r7, #16
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4604      	mov	r4, r0
 80003fc:	4608      	mov	r0, r1
 80003fe:	4611      	mov	r1, r2
 8000400:	461a      	mov	r2, r3
 8000402:	4623      	mov	r3, r4
 8000404:	71fb      	strb	r3, [r7, #7]
 8000406:	4603      	mov	r3, r0
 8000408:	71bb      	strb	r3, [r7, #6]
 800040a:	460b      	mov	r3, r1
 800040c:	717b      	strb	r3, [r7, #5]
 800040e:	4613      	mov	r3, r2
 8000410:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000412:	202a      	movs	r0, #42	@ 0x2a
 8000414:	f7ff ff60 	bl	80002d8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000418:	2300      	movs	r3, #0
 800041a:	733b      	strb	r3, [r7, #12]
 800041c:	4b17      	ldr	r3, [pc, #92]	@ (800047c <ST7735_SetAddressWindow+0x88>)
 800041e:	781a      	ldrb	r2, [r3, #0]
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	4413      	add	r3, r2
 8000424:	b2db      	uxtb	r3, r3
 8000426:	737b      	strb	r3, [r7, #13]
 8000428:	2300      	movs	r3, #0
 800042a:	73bb      	strb	r3, [r7, #14]
 800042c:	4b13      	ldr	r3, [pc, #76]	@ (800047c <ST7735_SetAddressWindow+0x88>)
 800042e:	781a      	ldrb	r2, [r3, #0]
 8000430:	797b      	ldrb	r3, [r7, #5]
 8000432:	4413      	add	r3, r2
 8000434:	b2db      	uxtb	r3, r3
 8000436:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000438:	f107 030c 	add.w	r3, r7, #12
 800043c:	2104      	movs	r1, #4
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff ff6c 	bl	800031c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000444:	202b      	movs	r0, #43	@ 0x2b
 8000446:	f7ff ff47 	bl	80002d8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800044a:	4b0d      	ldr	r3, [pc, #52]	@ (8000480 <ST7735_SetAddressWindow+0x8c>)
 800044c:	781a      	ldrb	r2, [r3, #0]
 800044e:	79bb      	ldrb	r3, [r7, #6]
 8000450:	4413      	add	r3, r2
 8000452:	b2db      	uxtb	r3, r3
 8000454:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000456:	4b0a      	ldr	r3, [pc, #40]	@ (8000480 <ST7735_SetAddressWindow+0x8c>)
 8000458:	781a      	ldrb	r2, [r3, #0]
 800045a:	793b      	ldrb	r3, [r7, #4]
 800045c:	4413      	add	r3, r2
 800045e:	b2db      	uxtb	r3, r3
 8000460:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000462:	f107 030c 	add.w	r3, r7, #12
 8000466:	2104      	movs	r1, #4
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff ff57 	bl	800031c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800046e:	202c      	movs	r0, #44	@ 0x2c
 8000470:	f7ff ff32 	bl	80002d8 <ST7735_WriteCommand>
}
 8000474:	bf00      	nop
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	bd90      	pop	{r4, r7, pc}
 800047c:	2000002f 	.word	0x2000002f
 8000480:	20000030 	.word	0x20000030

08000484 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800048e:	f7ff fef9 	bl	8000284 <ST7735_Select>
    ST7735_Reset();
 8000492:	f7ff ff0d 	bl	80002b0 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000496:	480c      	ldr	r0, [pc, #48]	@ (80004c8 <ST7735_Init+0x44>)
 8000498:	f7ff ff62 	bl	8000360 <DisplayInit>
    DisplayInit(init_cmds2);
 800049c:	480b      	ldr	r0, [pc, #44]	@ (80004cc <ST7735_Init+0x48>)
 800049e:	f7ff ff5f 	bl	8000360 <DisplayInit>
    DisplayInit(init_cmds3);
 80004a2:	480b      	ldr	r0, [pc, #44]	@ (80004d0 <ST7735_Init+0x4c>)
 80004a4:	f7ff ff5c 	bl	8000360 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 80004a8:	4b0a      	ldr	r3, [pc, #40]	@ (80004d4 <ST7735_Init+0x50>)
 80004aa:	2202      	movs	r2, #2
 80004ac:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 80004ae:	4b0a      	ldr	r3, [pc, #40]	@ (80004d8 <ST7735_Init+0x54>)
 80004b0:	2203      	movs	r2, #3
 80004b2:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 f810 	bl	80004dc <ST7735_SetRotation>
    ST7735_Unselect();
 80004bc:	f7ff feed 	bl	800029a <ST7735_Unselect>

}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	08002ac0 	.word	0x08002ac0
 80004cc:	08002af8 	.word	0x08002af8
 80004d0:	08002b08 	.word	0x08002b08
 80004d4:	2000002d 	.word	0x2000002d
 80004d8:	2000002e 	.word	0x2000002e

080004dc <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	f003 0303 	and.w	r3, r3, #3
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	4b33      	ldr	r3, [pc, #204]	@ (80005c0 <ST7735_SetRotation+0xe4>)
 80004f4:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80004f6:	4b32      	ldr	r3, [pc, #200]	@ (80005c0 <ST7735_SetRotation+0xe4>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	d84e      	bhi.n	800059c <ST7735_SetRotation+0xc0>
 80004fe:	a201      	add	r2, pc, #4	@ (adr r2, 8000504 <ST7735_SetRotation+0x28>)
 8000500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000504:	08000515 	.word	0x08000515
 8000508:	08000537 	.word	0x08000537
 800050c:	08000559 	.word	0x08000559
 8000510:	0800057b 	.word	0x0800057b
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000514:	23c0      	movs	r3, #192	@ 0xc0
 8000516:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000518:	4b2a      	ldr	r3, [pc, #168]	@ (80005c4 <ST7735_SetRotation+0xe8>)
 800051a:	2280      	movs	r2, #128	@ 0x80
 800051c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800051e:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <ST7735_SetRotation+0xec>)
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000524:	4b29      	ldr	r3, [pc, #164]	@ (80005cc <ST7735_SetRotation+0xf0>)
 8000526:	781a      	ldrb	r2, [r3, #0]
 8000528:	4b29      	ldr	r3, [pc, #164]	@ (80005d0 <ST7735_SetRotation+0xf4>)
 800052a:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 800052c:	4b29      	ldr	r3, [pc, #164]	@ (80005d4 <ST7735_SetRotation+0xf8>)
 800052e:	781a      	ldrb	r2, [r3, #0]
 8000530:	4b29      	ldr	r3, [pc, #164]	@ (80005d8 <ST7735_SetRotation+0xfc>)
 8000532:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000534:	e032      	b.n	800059c <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000536:	23a0      	movs	r3, #160	@ 0xa0
 8000538:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800053a:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <ST7735_SetRotation+0xec>)
 800053c:	2280      	movs	r2, #128	@ 0x80
 800053e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000540:	4b20      	ldr	r3, [pc, #128]	@ (80005c4 <ST7735_SetRotation+0xe8>)
 8000542:	2280      	movs	r2, #128	@ 0x80
 8000544:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000546:	4b21      	ldr	r3, [pc, #132]	@ (80005cc <ST7735_SetRotation+0xf0>)
 8000548:	781a      	ldrb	r2, [r3, #0]
 800054a:	4b23      	ldr	r3, [pc, #140]	@ (80005d8 <ST7735_SetRotation+0xfc>)
 800054c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800054e:	4b21      	ldr	r3, [pc, #132]	@ (80005d4 <ST7735_SetRotation+0xf8>)
 8000550:	781a      	ldrb	r2, [r3, #0]
 8000552:	4b1f      	ldr	r3, [pc, #124]	@ (80005d0 <ST7735_SetRotation+0xf4>)
 8000554:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000556:	e021      	b.n	800059c <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000558:	2300      	movs	r3, #0
 800055a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800055c:	4b19      	ldr	r3, [pc, #100]	@ (80005c4 <ST7735_SetRotation+0xe8>)
 800055e:	2280      	movs	r2, #128	@ 0x80
 8000560:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000562:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <ST7735_SetRotation+0xec>)
 8000564:	2280      	movs	r2, #128	@ 0x80
 8000566:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000568:	4b18      	ldr	r3, [pc, #96]	@ (80005cc <ST7735_SetRotation+0xf0>)
 800056a:	781a      	ldrb	r2, [r3, #0]
 800056c:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <ST7735_SetRotation+0xf4>)
 800056e:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000570:	4b18      	ldr	r3, [pc, #96]	@ (80005d4 <ST7735_SetRotation+0xf8>)
 8000572:	781a      	ldrb	r2, [r3, #0]
 8000574:	4b18      	ldr	r3, [pc, #96]	@ (80005d8 <ST7735_SetRotation+0xfc>)
 8000576:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000578:	e010      	b.n	800059c <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800057a:	2360      	movs	r3, #96	@ 0x60
 800057c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800057e:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <ST7735_SetRotation+0xec>)
 8000580:	2280      	movs	r2, #128	@ 0x80
 8000582:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000584:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <ST7735_SetRotation+0xe8>)
 8000586:	2280      	movs	r2, #128	@ 0x80
 8000588:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800058a:	4b10      	ldr	r3, [pc, #64]	@ (80005cc <ST7735_SetRotation+0xf0>)
 800058c:	781a      	ldrb	r2, [r3, #0]
 800058e:	4b12      	ldr	r3, [pc, #72]	@ (80005d8 <ST7735_SetRotation+0xfc>)
 8000590:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000592:	4b10      	ldr	r3, [pc, #64]	@ (80005d4 <ST7735_SetRotation+0xf8>)
 8000594:	781a      	ldrb	r2, [r3, #0]
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <ST7735_SetRotation+0xf4>)
 8000598:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800059a:	bf00      	nop
  }
  ST7735_Select();
 800059c:	f7ff fe72 	bl	8000284 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80005a0:	2036      	movs	r0, #54	@ 0x36
 80005a2:	f7ff fe99 	bl	80002d8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80005a6:	f107 030f 	add.w	r3, r7, #15
 80005aa:	2101      	movs	r1, #1
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff feb5 	bl	800031c <ST7735_WriteData>
  ST7735_Unselect();
 80005b2:	f7ff fe72 	bl	800029a <ST7735_Unselect>
}
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	2000002c 	.word	0x2000002c
 80005c4:	2000002a 	.word	0x2000002a
 80005c8:	20000028 	.word	0x20000028
 80005cc:	2000002d 	.word	0x2000002d
 80005d0:	2000002f 	.word	0x2000002f
 80005d4:	2000002e 	.word	0x2000002e
 80005d8:	20000030 	.word	0x20000030

080005dc <ST7735_FillRectangle>:

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4604      	mov	r4, r0
 80005e4:	4608      	mov	r0, r1
 80005e6:	4611      	mov	r1, r2
 80005e8:	461a      	mov	r2, r3
 80005ea:	4623      	mov	r3, r4
 80005ec:	80fb      	strh	r3, [r7, #6]
 80005ee:	4603      	mov	r3, r0
 80005f0:	80bb      	strh	r3, [r7, #4]
 80005f2:	460b      	mov	r3, r1
 80005f4:	807b      	strh	r3, [r7, #2]
 80005f6:	4613      	mov	r3, r2
 80005f8:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	4a3b      	ldr	r2, [pc, #236]	@ (80006ec <ST7735_FillRectangle+0x110>)
 80005fe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000602:	4293      	cmp	r3, r2
 8000604:	da6d      	bge.n	80006e2 <ST7735_FillRectangle+0x106>
 8000606:	88bb      	ldrh	r3, [r7, #4]
 8000608:	4a39      	ldr	r2, [pc, #228]	@ (80006f0 <ST7735_FillRectangle+0x114>)
 800060a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800060e:	4293      	cmp	r3, r2
 8000610:	da67      	bge.n	80006e2 <ST7735_FillRectangle+0x106>
    if((x + w - 1) >= _width) w = _width - x;
 8000612:	88fa      	ldrh	r2, [r7, #6]
 8000614:	887b      	ldrh	r3, [r7, #2]
 8000616:	4413      	add	r3, r2
 8000618:	4a34      	ldr	r2, [pc, #208]	@ (80006ec <ST7735_FillRectangle+0x110>)
 800061a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800061e:	4293      	cmp	r3, r2
 8000620:	dd06      	ble.n	8000630 <ST7735_FillRectangle+0x54>
 8000622:	4b32      	ldr	r3, [pc, #200]	@ (80006ec <ST7735_FillRectangle+0x110>)
 8000624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000628:	b29a      	uxth	r2, r3
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000630:	88ba      	ldrh	r2, [r7, #4]
 8000632:	883b      	ldrh	r3, [r7, #0]
 8000634:	4413      	add	r3, r2
 8000636:	4a2e      	ldr	r2, [pc, #184]	@ (80006f0 <ST7735_FillRectangle+0x114>)
 8000638:	f9b2 2000 	ldrsh.w	r2, [r2]
 800063c:	4293      	cmp	r3, r2
 800063e:	dd06      	ble.n	800064e <ST7735_FillRectangle+0x72>
 8000640:	4b2b      	ldr	r3, [pc, #172]	@ (80006f0 <ST7735_FillRectangle+0x114>)
 8000642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000646:	b29a      	uxth	r2, r3
 8000648:	88bb      	ldrh	r3, [r7, #4]
 800064a:	1ad3      	subs	r3, r2, r3
 800064c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800064e:	f7ff fe19 	bl	8000284 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000652:	88fb      	ldrh	r3, [r7, #6]
 8000654:	b2d8      	uxtb	r0, r3
 8000656:	88bb      	ldrh	r3, [r7, #4]
 8000658:	b2d9      	uxtb	r1, r3
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	b2da      	uxtb	r2, r3
 800065e:	887b      	ldrh	r3, [r7, #2]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	4413      	add	r3, r2
 8000664:	b2db      	uxtb	r3, r3
 8000666:	3b01      	subs	r3, #1
 8000668:	b2dc      	uxtb	r4, r3
 800066a:	88bb      	ldrh	r3, [r7, #4]
 800066c:	b2da      	uxtb	r2, r3
 800066e:	883b      	ldrh	r3, [r7, #0]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	4413      	add	r3, r2
 8000674:	b2db      	uxtb	r3, r3
 8000676:	3b01      	subs	r3, #1
 8000678:	b2db      	uxtb	r3, r3
 800067a:	4622      	mov	r2, r4
 800067c:	f7ff feba 	bl	80003f4 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000680:	8c3b      	ldrh	r3, [r7, #32]
 8000682:	0a1b      	lsrs	r3, r3, #8
 8000684:	b29b      	uxth	r3, r3
 8000686:	b2db      	uxtb	r3, r3
 8000688:	733b      	strb	r3, [r7, #12]
 800068a:	8c3b      	ldrh	r3, [r7, #32]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000696:	4817      	ldr	r0, [pc, #92]	@ (80006f4 <ST7735_FillRectangle+0x118>)
 8000698:	f001 f878 	bl	800178c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800069c:	883b      	ldrh	r3, [r7, #0]
 800069e:	80bb      	strh	r3, [r7, #4]
 80006a0:	e019      	b.n	80006d6 <ST7735_FillRectangle+0xfa>
        for(x = w; x > 0; x--) {
 80006a2:	887b      	ldrh	r3, [r7, #2]
 80006a4:	80fb      	strh	r3, [r7, #6]
 80006a6:	e010      	b.n	80006ca <ST7735_FillRectangle+0xee>
            //HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
        	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2202      	movs	r2, #2
 80006ae:	4619      	mov	r1, r3
 80006b0:	4811      	ldr	r0, [pc, #68]	@ (80006f8 <ST7735_FillRectangle+0x11c>)
 80006b2:	f001 fed9 	bl	8002468 <HAL_SPI_Transmit_DMA>
        	while(hspi1.State == HAL_SPI_STATE_BUSY_TX)
 80006b6:	bf00      	nop
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <ST7735_FillRectangle+0x11c>)
 80006ba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d0f9      	beq.n	80006b8 <ST7735_FillRectangle+0xdc>
        for(x = w; x > 0; x--) {
 80006c4:	88fb      	ldrh	r3, [r7, #6]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	80fb      	strh	r3, [r7, #6]
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1eb      	bne.n	80006a8 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 80006d0:	88bb      	ldrh	r3, [r7, #4]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	80bb      	strh	r3, [r7, #4]
 80006d6:	88bb      	ldrh	r3, [r7, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1e2      	bne.n	80006a2 <ST7735_FillRectangle+0xc6>

        	}
        }
    }

    ST7735_Unselect();
 80006dc:	f7ff fddd 	bl	800029a <ST7735_Unselect>
 80006e0:	e000      	b.n	80006e4 <ST7735_FillRectangle+0x108>
    if((x >= _width) || (y >= _height)) return;
 80006e2:	bf00      	nop
}
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd90      	pop	{r4, r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000028 	.word	0x20000028
 80006f0:	2000002a 	.word	0x2000002a
 80006f4:	48000400 	.word	0x48000400
 80006f8:	20000034 	.word	0x20000034

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f000 faac 	bl	8000c5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f81b 	bl	8000740 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SystemCoreClockUpdate();
 800070a:	f000 fa15 	bl	8000b38 <SystemCoreClockUpdate>
  float clk = SystemCoreClock;
 800070e:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <main+0x40>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	ee07 3a90 	vmov	s15, r3
 8000716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800071a:	edc7 7a01 	vstr	s15, [r7, #4]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071e:	f000 f8c1 	bl	80008a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000722:	f000 f895 	bl	8000850 <MX_DMA_Init>
  MX_SPI1_Init();
 8000726:	f000 f855 	bl	80007d4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ST7735_Init(0);
 800072a:	2000      	movs	r0, #0
 800072c:	f7ff feaa 	bl	8000484 <ST7735_Init>
  fillScreen(BLACK);
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff fd8d 	bl	8000250 <fillScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000736:	bf00      	nop
 8000738:	e7fd      	b.n	8000736 <main+0x3a>
 800073a:	bf00      	nop
 800073c:	20000000 	.word	0x20000000

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b094      	sub	sp, #80	@ 0x50
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0318 	add.w	r3, r7, #24
 800074a:	2238      	movs	r2, #56	@ 0x38
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f002 f97e 	bl	8002a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000762:	2000      	movs	r0, #0
 8000764:	f001 f82a 	bl	80017bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000768:	2301      	movs	r3, #1
 800076a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800076c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000770:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	2303      	movs	r3, #3
 8000778:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV12;
 800077a:	230c      	movs	r3, #12
 800077c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800077e:	2355      	movs	r3, #85	@ 0x55
 8000780:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000782:	2302      	movs	r3, #2
 8000784:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000786:	2302      	movs	r3, #2
 8000788:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078e:	f107 0318 	add.w	r3, r7, #24
 8000792:	4618      	mov	r0, r3
 8000794:	f001 f8c6 	bl	8001924 <HAL_RCC_OscConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800079e:	f000 f8e5 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	230f      	movs	r3, #15
 80007a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a6:	2303      	movs	r3, #3
 80007a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2104      	movs	r1, #4
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 fbc4 	bl	8001f48 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007c6:	f000 f8d1 	bl	800096c <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	@ 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <MX_SPI1_Init+0x74>)
 80007da:	4a1c      	ldr	r2, [pc, #112]	@ (800084c <MX_SPI1_Init+0x78>)
 80007dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007de:	4b1a      	ldr	r3, [pc, #104]	@ (8000848 <MX_SPI1_Init+0x74>)
 80007e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80007e6:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <MX_SPI1_Init+0x74>)
 80007e8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007ec:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ee:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <MX_SPI1_Init+0x74>)
 80007f0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80007f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f6:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_SPI1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_SPI1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_SPI1_Init+0x74>)
 8000804:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000808:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800080a:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_SPI1_Init+0x74>)
 800080c:	2210      	movs	r2, #16
 800080e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000810:	4b0d      	ldr	r3, [pc, #52]	@ (8000848 <MX_SPI1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000816:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_SPI1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081c:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <MX_SPI1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_SPI1_Init+0x74>)
 8000824:	2207      	movs	r2, #7
 8000826:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000828:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <MX_SPI1_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_SPI1_Init+0x74>)
 8000830:	2208      	movs	r2, #8
 8000832:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_SPI1_Init+0x74>)
 8000836:	f001 fd6b 	bl	8002310 <HAL_SPI_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000840:	f000 f894 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000034 	.word	0x20000034
 800084c:	40013000 	.word	0x40013000

08000850 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000856:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <MX_DMA_Init+0x50>)
 8000858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800085a:	4a11      	ldr	r2, [pc, #68]	@ (80008a0 <MX_DMA_Init+0x50>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6493      	str	r3, [r2, #72]	@ 0x48
 8000862:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_DMA_Init+0x50>)
 8000864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800086e:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_DMA_Init+0x50>)
 8000870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000872:	4a0b      	ldr	r2, [pc, #44]	@ (80008a0 <MX_DMA_Init+0x50>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6493      	str	r3, [r2, #72]	@ 0x48
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_DMA_Init+0x50>)
 800087c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	200b      	movs	r0, #11
 800088c:	f000 fb55 	bl	8000f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000890:	200b      	movs	r0, #11
 8000892:	f000 fb6c 	bl	8000f6e <HAL_NVIC_EnableIRQ>

}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000964 <MX_GPIO_Init+0xc0>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	4a29      	ldr	r2, [pc, #164]	@ (8000964 <MX_GPIO_Init+0xc0>)
 80008c0:	f043 0320 	orr.w	r3, r3, #32
 80008c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c6:	4b27      	ldr	r3, [pc, #156]	@ (8000964 <MX_GPIO_Init+0xc0>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	f003 0320 	and.w	r3, r3, #32
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b24      	ldr	r3, [pc, #144]	@ (8000964 <MX_GPIO_Init+0xc0>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	4a23      	ldr	r2, [pc, #140]	@ (8000964 <MX_GPIO_Init+0xc0>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008de:	4b21      	ldr	r3, [pc, #132]	@ (8000964 <MX_GPIO_Init+0xc0>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000964 <MX_GPIO_Init+0xc0>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	4a1d      	ldr	r2, [pc, #116]	@ (8000964 <MX_GPIO_Init+0xc0>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <MX_GPIO_Init+0xc0>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_15, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f248 0140 	movw	r1, #32832	@ 0x8040
 8000908:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090c:	f000 ff3e 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000916:	4814      	ldr	r0, [pc, #80]	@ (8000968 <MX_GPIO_Init+0xc4>)
 8000918:	f000 ff38 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 800091c:	f248 0340 	movw	r3, #32832	@ 0x8040
 8000920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	4619      	mov	r1, r3
 8000934:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000938:	f000 fda6 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800093c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000940:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	4619      	mov	r1, r3
 8000954:	4804      	ldr	r0, [pc, #16]	@ (8000968 <MX_GPIO_Init+0xc4>)
 8000956:	f000 fd97 	bl	8001488 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800095a:	bf00      	nop
 800095c:	3720      	adds	r7, #32
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000
 8000968:	48000400 	.word	0x48000400

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <Error_Handler+0x8>

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <HAL_MspInit+0x44>)
 8000980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000982:	4a0e      	ldr	r2, [pc, #56]	@ (80009bc <HAL_MspInit+0x44>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6613      	str	r3, [r2, #96]	@ 0x60
 800098a:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <HAL_MspInit+0x44>)
 800098c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <HAL_MspInit+0x44>)
 8000998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800099a:	4a08      	ldr	r2, [pc, #32]	@ (80009bc <HAL_MspInit+0x44>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <HAL_MspInit+0x44>)
 80009a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009ae:	f000 ffa9 	bl	8001904 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000

080009c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	@ 0x28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a2b      	ldr	r2, [pc, #172]	@ (8000a8c <HAL_SPI_MspInit+0xcc>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d150      	bne.n	8000a84 <HAL_SPI_MspInit+0xc4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a90 <HAL_SPI_MspInit+0xd0>)
 80009e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009e6:	4a2a      	ldr	r2, [pc, #168]	@ (8000a90 <HAL_SPI_MspInit+0xd0>)
 80009e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80009ee:	4b28      	ldr	r3, [pc, #160]	@ (8000a90 <HAL_SPI_MspInit+0xd0>)
 80009f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b25      	ldr	r3, [pc, #148]	@ (8000a90 <HAL_SPI_MspInit+0xd0>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	4a24      	ldr	r2, [pc, #144]	@ (8000a90 <HAL_SPI_MspInit+0xd0>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a06:	4b22      	ldr	r3, [pc, #136]	@ (8000a90 <HAL_SPI_MspInit+0xd0>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000a12:	2328      	movs	r3, #40	@ 0x28
 8000a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a22:	2305      	movs	r3, #5
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4819      	ldr	r0, [pc, #100]	@ (8000a94 <HAL_SPI_MspInit+0xd4>)
 8000a2e:	f000 fd2b 	bl	8001488 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8000a32:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <HAL_SPI_MspInit+0xd8>)
 8000a34:	4a19      	ldr	r2, [pc, #100]	@ (8000a9c <HAL_SPI_MspInit+0xdc>)
 8000a36:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000a38:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <HAL_SPI_MspInit+0xd8>)
 8000a3a:	220b      	movs	r2, #11
 8000a3c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	@ (8000a98 <HAL_SPI_MspInit+0xd8>)
 8000a40:	2210      	movs	r2, #16
 8000a42:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a44:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <HAL_SPI_MspInit+0xd8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	@ (8000a98 <HAL_SPI_MspInit+0xd8>)
 8000a4c:	2280      	movs	r2, #128	@ 0x80
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a50:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <HAL_SPI_MspInit+0xd8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a56:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <HAL_SPI_MspInit+0xd8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <HAL_SPI_MspInit+0xd8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a62:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <HAL_SPI_MspInit+0xd8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000a68:	480b      	ldr	r0, [pc, #44]	@ (8000a98 <HAL_SPI_MspInit+0xd8>)
 8000a6a:	f000 fa9b 	bl	8000fa4 <HAL_DMA_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <HAL_SPI_MspInit+0xb8>
    {
      Error_Handler();
 8000a74:	f7ff ff7a 	bl	800096c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a07      	ldr	r2, [pc, #28]	@ (8000a98 <HAL_SPI_MspInit+0xd8>)
 8000a7c:	655a      	str	r2, [r3, #84]	@ 0x54
 8000a7e:	4a06      	ldr	r2, [pc, #24]	@ (8000a98 <HAL_SPI_MspInit+0xd8>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	@ 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40013000 	.word	0x40013000
 8000a90:	40021000 	.word	0x40021000
 8000a94:	48000400 	.word	0x48000400
 8000a98:	20000098 	.word	0x20000098
 8000a9c:	40020008 	.word	0x40020008

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af6:	f000 f905 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000b04:	4802      	ldr	r0, [pc, #8]	@ (8000b10 <DMA1_Channel1_IRQHandler+0x10>)
 8000b06:	f000 fb70 	bl	80011ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000098 	.word	0x20000098

08000b14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
  uint32_t tmp, pllvco, pllr, pllsource, pllm;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b3e:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf8 <SystemCoreClockUpdate+0xc0>)
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	f003 030c 	and.w	r3, r3, #12
 8000b46:	2b0c      	cmp	r3, #12
 8000b48:	d00e      	beq.n	8000b68 <SystemCoreClockUpdate+0x30>
 8000b4a:	2b0c      	cmp	r3, #12
 8000b4c:	d83e      	bhi.n	8000bcc <SystemCoreClockUpdate+0x94>
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	d002      	beq.n	8000b58 <SystemCoreClockUpdate+0x20>
 8000b52:	2b08      	cmp	r3, #8
 8000b54:	d004      	beq.n	8000b60 <SystemCoreClockUpdate+0x28>
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1U) * 2U;
      SystemCoreClock = pllvco/pllr;
      break;

    default:
      break;
 8000b56:	e039      	b.n	8000bcc <SystemCoreClockUpdate+0x94>
      SystemCoreClock = HSI_VALUE;
 8000b58:	4b28      	ldr	r3, [pc, #160]	@ (8000bfc <SystemCoreClockUpdate+0xc4>)
 8000b5a:	4a29      	ldr	r2, [pc, #164]	@ (8000c00 <SystemCoreClockUpdate+0xc8>)
 8000b5c:	601a      	str	r2, [r3, #0]
      break;
 8000b5e:	e036      	b.n	8000bce <SystemCoreClockUpdate+0x96>
      SystemCoreClock = HSE_VALUE;
 8000b60:	4b26      	ldr	r3, [pc, #152]	@ (8000bfc <SystemCoreClockUpdate+0xc4>)
 8000b62:	4a28      	ldr	r2, [pc, #160]	@ (8000c04 <SystemCoreClockUpdate+0xcc>)
 8000b64:	601a      	str	r2, [r3, #0]
      break;
 8000b66:	e032      	b.n	8000bce <SystemCoreClockUpdate+0x96>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000b68:	4b23      	ldr	r3, [pc, #140]	@ (8000bf8 <SystemCoreClockUpdate+0xc0>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	f003 0303 	and.w	r3, r3, #3
 8000b70:	613b      	str	r3, [r7, #16]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1U ;
 8000b72:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <SystemCoreClockUpdate+0xc0>)
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	091b      	lsrs	r3, r3, #4
 8000b78:	f003 030f 	and.w	r3, r3, #15
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
      if (pllsource == 0x02UL) /* HSI used as PLL clock source */
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d105      	bne.n	8000b92 <SystemCoreClockUpdate+0x5a>
        pllvco = (HSI_VALUE / pllm);
 8000b86:	4a1e      	ldr	r2, [pc, #120]	@ (8000c00 <SystemCoreClockUpdate+0xc8>)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	e004      	b.n	8000b9c <SystemCoreClockUpdate+0x64>
        pllvco = (HSE_VALUE / pllm);
 8000b92:	4a1c      	ldr	r2, [pc, #112]	@ (8000c04 <SystemCoreClockUpdate+0xcc>)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 8000b9c:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <SystemCoreClockUpdate+0xc0>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	fb02 f303 	mul.w	r3, r2, r3
 8000bac:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1U) * 2U;
 8000bae:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <SystemCoreClockUpdate+0xc0>)
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	0e5b      	lsrs	r3, r3, #25
 8000bb4:	f003 0303 	and.w	r3, r3, #3
 8000bb8:	3301      	adds	r3, #1
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	60bb      	str	r3, [r7, #8]
      SystemCoreClock = pllvco/pllr;
 8000bbe:	697a      	ldr	r2, [r7, #20]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc6:	4a0d      	ldr	r2, [pc, #52]	@ (8000bfc <SystemCoreClockUpdate+0xc4>)
 8000bc8:	6013      	str	r3, [r2, #0]
      break;
 8000bca:	e000      	b.n	8000bce <SystemCoreClockUpdate+0x96>
      break;
 8000bcc:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000bce:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <SystemCoreClockUpdate+0xc0>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	091b      	lsrs	r3, r3, #4
 8000bd4:	f003 030f 	and.w	r3, r3, #15
 8000bd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000c08 <SystemCoreClockUpdate+0xd0>)
 8000bda:	5cd3      	ldrb	r3, [r2, r3]
 8000bdc:	607b      	str	r3, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000bde:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <SystemCoreClockUpdate+0xc4>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	fa22 f303 	lsr.w	r3, r2, r3
 8000be8:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <SystemCoreClockUpdate+0xc4>)
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	371c      	adds	r7, #28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	00f42400 	.word	0x00f42400
 8000c04:	02dc6c00 	.word	0x02dc6c00
 8000c08:	08002b34 	.word	0x08002b34

08000c0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c0c:	480d      	ldr	r0, [pc, #52]	@ (8000c44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c0e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c10:	f7ff ff80 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c14:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c16:	490d      	ldr	r1, [pc, #52]	@ (8000c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c18:	4a0d      	ldr	r2, [pc, #52]	@ (8000c50 <LoopForever+0xe>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c58 <LoopForever+0x16>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f001 ff11 	bl	8002a60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c3e:	f7ff fd5d 	bl	80006fc <main>

08000c42 <LoopForever>:

LoopForever:
    b LoopForever
 8000c42:	e7fe      	b.n	8000c42 <LoopForever>
  ldr   r0, =_estack
 8000c44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c50:	08002b4c 	.word	0x08002b4c
  ldr r2, =_sbss
 8000c54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c58:	200000fc 	.word	0x200000fc

08000c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC1_2_IRQHandler>

08000c5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f000 f95b 	bl	8000f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c6e:	200f      	movs	r0, #15
 8000c70:	f000 f80e 	bl	8000c90 <HAL_InitTick>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d002      	beq.n	8000c80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	71fb      	strb	r3, [r7, #7]
 8000c7e:	e001      	b.n	8000c84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c80:	f7ff fe7a 	bl	8000978 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c84:	79fb      	ldrb	r3, [r7, #7]

}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c9c:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <HAL_InitTick+0x68>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d022      	beq.n	8000cea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ca4:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <HAL_InitTick+0x6c>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <HAL_InitTick+0x68>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000cb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 f966 	bl	8000f8a <HAL_SYSTICK_Config>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d10f      	bne.n	8000ce4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b0f      	cmp	r3, #15
 8000cc8:	d809      	bhi.n	8000cde <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	6879      	ldr	r1, [r7, #4]
 8000cce:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd2:	f000 f932 	bl	8000f3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <HAL_InitTick+0x70>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	e007      	b.n	8000cee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	e004      	b.n	8000cee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
 8000ce8:	e001      	b.n	8000cee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000004 	.word	0x20000004

08000d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d08:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <HAL_IncTick+0x1c>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <HAL_IncTick+0x20>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a03      	ldr	r2, [pc, #12]	@ (8000d20 <HAL_IncTick+0x1c>)
 8000d14:	6013      	str	r3, [r2, #0]
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	200000f8 	.word	0x200000f8
 8000d24:	20000008 	.word	0x20000008

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	@ (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	200000f8 	.word	0x200000f8

08000d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d48:	f7ff ffee 	bl	8000d28 <HAL_GetTick>
 8000d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d58:	d004      	beq.n	8000d64 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5a:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <HAL_Delay+0x40>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	4413      	add	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d64:	bf00      	nop
 8000d66:	f7ff ffdf 	bl	8000d28 <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d8f7      	bhi.n	8000d66 <HAL_Delay+0x26>
  {
  }
}
 8000d76:	bf00      	nop
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000008 	.word	0x20000008

08000d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d94:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	@ (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	@ (8000de4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	f003 0307 	and.w	r3, r3, #7
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db0b      	blt.n	8000e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f003 021f 	and.w	r2, r3, #31
 8000e00:	4907      	ldr	r1, [pc, #28]	@ (8000e20 <__NVIC_EnableIRQ+0x38>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	095b      	lsrs	r3, r3, #5
 8000e08:	2001      	movs	r0, #1
 8000e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db0a      	blt.n	8000e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	490c      	ldr	r1, [pc, #48]	@ (8000e70 <__NVIC_SetPriority+0x4c>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	0112      	lsls	r2, r2, #4
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	440b      	add	r3, r1
 8000e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e4c:	e00a      	b.n	8000e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4908      	ldr	r1, [pc, #32]	@ (8000e74 <__NVIC_SetPriority+0x50>)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	0112      	lsls	r2, r2, #4
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	440b      	add	r3, r1
 8000e62:	761a      	strb	r2, [r3, #24]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	@ 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	bf28      	it	cs
 8000e96:	2304      	movcs	r3, #4
 8000e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	d902      	bls.n	8000ea8 <NVIC_EncodePriority+0x30>
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3b03      	subs	r3, #3
 8000ea6:	e000      	b.n	8000eaa <NVIC_EncodePriority+0x32>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	401a      	ands	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43d9      	mvns	r1, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	4313      	orrs	r3, r2
         );
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3724      	adds	r7, #36	@ 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ef0:	d301      	bcc.n	8000ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00f      	b.n	8000f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <SysTick_Config+0x40>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000efe:	210f      	movs	r1, #15
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f7ff ff8e 	bl	8000e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <SysTick_Config+0x40>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0e:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <SysTick_Config+0x40>)
 8000f10:	2207      	movs	r2, #7
 8000f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	e000e010 	.word	0xe000e010

08000f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ff29 	bl	8000d84 <__NVIC_SetPriorityGrouping>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
 8000f46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f48:	f7ff ff40 	bl	8000dcc <__NVIC_GetPriorityGrouping>
 8000f4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	68b9      	ldr	r1, [r7, #8]
 8000f52:	6978      	ldr	r0, [r7, #20]
 8000f54:	f7ff ff90 	bl	8000e78 <NVIC_EncodePriority>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff5f 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f66:	bf00      	nop
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff33 	bl	8000de8 <__NVIC_EnableIRQ>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ffa4 	bl	8000ee0 <SysTick_Config>
 8000f98:	4603      	mov	r3, r0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e08d      	b.n	80010d2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b47      	ldr	r3, [pc, #284]	@ (80010dc <HAL_DMA_Init+0x138>)
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d80f      	bhi.n	8000fe2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b45      	ldr	r3, [pc, #276]	@ (80010e0 <HAL_DMA_Init+0x13c>)
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a45      	ldr	r2, [pc, #276]	@ (80010e4 <HAL_DMA_Init+0x140>)
 8000fce:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd2:	091b      	lsrs	r3, r3, #4
 8000fd4:	009a      	lsls	r2, r3, #2
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a42      	ldr	r2, [pc, #264]	@ (80010e8 <HAL_DMA_Init+0x144>)
 8000fde:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fe0:	e00e      	b.n	8001000 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b40      	ldr	r3, [pc, #256]	@ (80010ec <HAL_DMA_Init+0x148>)
 8000fea:	4413      	add	r3, r2
 8000fec:	4a3d      	ldr	r2, [pc, #244]	@ (80010e4 <HAL_DMA_Init+0x140>)
 8000fee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff2:	091b      	lsrs	r3, r3, #4
 8000ff4:	009a      	lsls	r2, r3, #2
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a3c      	ldr	r2, [pc, #240]	@ (80010f0 <HAL_DMA_Init+0x14c>)
 8000ffe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2202      	movs	r2, #2
 8001004:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800101a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001024:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001030:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800103c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	4313      	orrs	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 f9b6 	bl	80013c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001060:	d102      	bne.n	8001068 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800107c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d010      	beq.n	80010a8 <HAL_DMA_Init+0x104>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b04      	cmp	r3, #4
 800108c:	d80c      	bhi.n	80010a8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 f9d6 	bl	8001440 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	e008      	b.n	80010ba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40020407 	.word	0x40020407
 80010e0:	bffdfff8 	.word	0xbffdfff8
 80010e4:	cccccccd 	.word	0xcccccccd
 80010e8:	40020000 	.word	0x40020000
 80010ec:	bffdfbf8 	.word	0xbffdfbf8
 80010f0:	40020400 	.word	0x40020400

080010f4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800110c:	2b01      	cmp	r3, #1
 800110e:	d101      	bne.n	8001114 <HAL_DMA_Start_IT+0x20>
 8001110:	2302      	movs	r3, #2
 8001112:	e066      	b.n	80011e2 <HAL_DMA_Start_IT+0xee>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b01      	cmp	r3, #1
 8001126:	d155      	bne.n	80011d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2202      	movs	r2, #2
 800112c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0201 	bic.w	r2, r2, #1
 8001144:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	68b9      	ldr	r1, [r7, #8]
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f000 f8fb 	bl	8001348 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	2b00      	cmp	r3, #0
 8001158:	d008      	beq.n	800116c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f042 020e 	orr.w	r2, r2, #14
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	e00f      	b.n	800118c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0204 	bic.w	r2, r2, #4
 800117a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f042 020a 	orr.w	r2, r2, #10
 800118a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d007      	beq.n	80011aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80011a8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d007      	beq.n	80011c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80011c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 0201 	orr.w	r2, r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	e005      	b.n	80011e0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80011dc:	2302      	movs	r3, #2
 80011de:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b084      	sub	sp, #16
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	f003 031f 	and.w	r3, r3, #31
 800120a:	2204      	movs	r2, #4
 800120c:	409a      	lsls	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4013      	ands	r3, r2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d026      	beq.n	8001264 <HAL_DMA_IRQHandler+0x7a>
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d021      	beq.n	8001264 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0320 	and.w	r3, r3, #32
 800122a:	2b00      	cmp	r3, #0
 800122c:	d107      	bne.n	800123e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 0204 	bic.w	r2, r2, #4
 800123c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	f003 021f 	and.w	r2, r3, #31
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124a:	2104      	movs	r1, #4
 800124c:	fa01 f202 	lsl.w	r2, r1, r2
 8001250:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	2b00      	cmp	r3, #0
 8001258:	d071      	beq.n	800133e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001262:	e06c      	b.n	800133e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001268:	f003 031f 	and.w	r3, r3, #31
 800126c:	2202      	movs	r2, #2
 800126e:	409a      	lsls	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d02e      	beq.n	80012d6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d029      	beq.n	80012d6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0320 	and.w	r3, r3, #32
 800128c:	2b00      	cmp	r3, #0
 800128e:	d10b      	bne.n	80012a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 020a 	bic.w	r2, r2, #10
 800129e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	2102      	movs	r1, #2
 80012b6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d038      	beq.n	800133e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80012d4:	e033      	b.n	800133e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	f003 031f 	and.w	r3, r3, #31
 80012de:	2208      	movs	r2, #8
 80012e0:	409a      	lsls	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d02a      	beq.n	8001340 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d025      	beq.n	8001340 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 020e 	bic.w	r2, r2, #14
 8001302:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001308:	f003 021f 	and.w	r2, r3, #31
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001310:	2101      	movs	r1, #1
 8001312:	fa01 f202 	lsl.w	r2, r1, r2
 8001316:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001332:	2b00      	cmp	r3, #0
 8001334:	d004      	beq.n	8001340 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800133e:	bf00      	nop
 8001340:	bf00      	nop
}
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800135e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001364:	2b00      	cmp	r3, #0
 8001366:	d004      	beq.n	8001372 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001370:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	f003 021f 	and.w	r2, r3, #31
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	2101      	movs	r1, #1
 8001380:	fa01 f202 	lsl.w	r2, r1, r2
 8001384:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b10      	cmp	r3, #16
 8001394:	d108      	bne.n	80013a8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013a6:	e007      	b.n	80013b8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	60da      	str	r2, [r3, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b087      	sub	sp, #28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b16      	ldr	r3, [pc, #88]	@ (800142c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d802      	bhi.n	80013de <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80013d8:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	e001      	b.n	80013e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80013de:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80013e0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	3b08      	subs	r3, #8
 80013ee:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	091b      	lsrs	r3, r3, #4
 80013f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	009a      	lsls	r2, r3, #2
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4413      	add	r3, r2
 8001404:	461a      	mov	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a0b      	ldr	r2, [pc, #44]	@ (800143c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800140e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 031f 	and.w	r3, r3, #31
 8001416:	2201      	movs	r2, #1
 8001418:	409a      	lsls	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800141e:	bf00      	nop
 8001420:	371c      	adds	r7, #28
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40020407 	.word	0x40020407
 8001430:	40020800 	.word	0x40020800
 8001434:	40020820 	.word	0x40020820
 8001438:	cccccccd 	.word	0xcccccccd
 800143c:	40020880 	.word	0x40020880

08001440 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001454:	4413      	add	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	461a      	mov	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a08      	ldr	r2, [pc, #32]	@ (8001484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001462:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3b01      	subs	r3, #1
 8001468:	f003 031f 	and.w	r3, r3, #31
 800146c:	2201      	movs	r2, #1
 800146e:	409a      	lsls	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	1000823f 	.word	0x1000823f
 8001484:	40020940 	.word	0x40020940

08001488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001496:	e15a      	b.n	800174e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2101      	movs	r1, #1
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	4013      	ands	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 814c 	beq.w	8001748 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d005      	beq.n	80014c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d130      	bne.n	800152a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014fe:	2201      	movs	r2, #1
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	f003 0201 	and.w	r2, r3, #1
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	2b03      	cmp	r3, #3
 8001534:	d017      	beq.n	8001566 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	2203      	movs	r2, #3
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d123      	bne.n	80015ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	08da      	lsrs	r2, r3, #3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3208      	adds	r2, #8
 800157a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	220f      	movs	r2, #15
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	691a      	ldr	r2, [r3, #16]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	08da      	lsrs	r2, r3, #3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3208      	adds	r2, #8
 80015b4:	6939      	ldr	r1, [r7, #16]
 80015b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	2203      	movs	r2, #3
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0203 	and.w	r2, r3, #3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80a6 	beq.w	8001748 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fc:	4b5b      	ldr	r3, [pc, #364]	@ (800176c <HAL_GPIO_Init+0x2e4>)
 80015fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001600:	4a5a      	ldr	r2, [pc, #360]	@ (800176c <HAL_GPIO_Init+0x2e4>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6613      	str	r3, [r2, #96]	@ 0x60
 8001608:	4b58      	ldr	r3, [pc, #352]	@ (800176c <HAL_GPIO_Init+0x2e4>)
 800160a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001614:	4a56      	ldr	r2, [pc, #344]	@ (8001770 <HAL_GPIO_Init+0x2e8>)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	220f      	movs	r2, #15
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800163e:	d01f      	beq.n	8001680 <HAL_GPIO_Init+0x1f8>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a4c      	ldr	r2, [pc, #304]	@ (8001774 <HAL_GPIO_Init+0x2ec>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d019      	beq.n	800167c <HAL_GPIO_Init+0x1f4>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a4b      	ldr	r2, [pc, #300]	@ (8001778 <HAL_GPIO_Init+0x2f0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d013      	beq.n	8001678 <HAL_GPIO_Init+0x1f0>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a4a      	ldr	r2, [pc, #296]	@ (800177c <HAL_GPIO_Init+0x2f4>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d00d      	beq.n	8001674 <HAL_GPIO_Init+0x1ec>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a49      	ldr	r2, [pc, #292]	@ (8001780 <HAL_GPIO_Init+0x2f8>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d007      	beq.n	8001670 <HAL_GPIO_Init+0x1e8>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a48      	ldr	r2, [pc, #288]	@ (8001784 <HAL_GPIO_Init+0x2fc>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d101      	bne.n	800166c <HAL_GPIO_Init+0x1e4>
 8001668:	2305      	movs	r3, #5
 800166a:	e00a      	b.n	8001682 <HAL_GPIO_Init+0x1fa>
 800166c:	2306      	movs	r3, #6
 800166e:	e008      	b.n	8001682 <HAL_GPIO_Init+0x1fa>
 8001670:	2304      	movs	r3, #4
 8001672:	e006      	b.n	8001682 <HAL_GPIO_Init+0x1fa>
 8001674:	2303      	movs	r3, #3
 8001676:	e004      	b.n	8001682 <HAL_GPIO_Init+0x1fa>
 8001678:	2302      	movs	r3, #2
 800167a:	e002      	b.n	8001682 <HAL_GPIO_Init+0x1fa>
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <HAL_GPIO_Init+0x1fa>
 8001680:	2300      	movs	r3, #0
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	f002 0203 	and.w	r2, r2, #3
 8001688:	0092      	lsls	r2, r2, #2
 800168a:	4093      	lsls	r3, r2
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001692:	4937      	ldr	r1, [pc, #220]	@ (8001770 <HAL_GPIO_Init+0x2e8>)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	089b      	lsrs	r3, r3, #2
 8001698:	3302      	adds	r3, #2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b39      	ldr	r3, [pc, #228]	@ (8001788 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a30      	ldr	r2, [pc, #192]	@ (8001788 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001788 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a26      	ldr	r2, [pc, #152]	@ (8001788 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016f4:	4b24      	ldr	r3, [pc, #144]	@ (8001788 <HAL_GPIO_Init+0x300>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001718:	4a1b      	ldr	r2, [pc, #108]	@ (8001788 <HAL_GPIO_Init+0x300>)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800171e:	4b1a      	ldr	r3, [pc, #104]	@ (8001788 <HAL_GPIO_Init+0x300>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43db      	mvns	r3, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001742:	4a11      	ldr	r2, [pc, #68]	@ (8001788 <HAL_GPIO_Init+0x300>)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	3301      	adds	r3, #1
 800174c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	fa22 f303 	lsr.w	r3, r2, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	f47f ae9d 	bne.w	8001498 <HAL_GPIO_Init+0x10>
  }
}
 800175e:	bf00      	nop
 8001760:	bf00      	nop
 8001762:	371c      	adds	r7, #28
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	40021000 	.word	0x40021000
 8001770:	40010000 	.word	0x40010000
 8001774:	48000400 	.word	0x48000400
 8001778:	48000800 	.word	0x48000800
 800177c:	48000c00 	.word	0x48000c00
 8001780:	48001000 	.word	0x48001000
 8001784:	48001400 	.word	0x48001400
 8001788:	40010400 	.word	0x40010400

0800178c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
 8001798:	4613      	mov	r3, r2
 800179a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800179c:	787b      	ldrb	r3, [r7, #1]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017a2:	887a      	ldrh	r2, [r7, #2]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017a8:	e002      	b.n	80017b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017aa:	887a      	ldrh	r2, [r7, #2]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d141      	bne.n	800184e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ca:	4b4b      	ldr	r3, [pc, #300]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017d6:	d131      	bne.n	800183c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017d8:	4b47      	ldr	r3, [pc, #284]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017de:	4a46      	ldr	r2, [pc, #280]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e8:	4b43      	ldr	r3, [pc, #268]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017f0:	4a41      	ldr	r2, [pc, #260]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017f8:	4b40      	ldr	r3, [pc, #256]	@ (80018fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2232      	movs	r2, #50	@ 0x32
 80017fe:	fb02 f303 	mul.w	r3, r2, r3
 8001802:	4a3f      	ldr	r2, [pc, #252]	@ (8001900 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001804:	fba2 2303 	umull	r2, r3, r2, r3
 8001808:	0c9b      	lsrs	r3, r3, #18
 800180a:	3301      	adds	r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800180e:	e002      	b.n	8001816 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3b01      	subs	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001816:	4b38      	ldr	r3, [pc, #224]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800181e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001822:	d102      	bne.n	800182a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f2      	bne.n	8001810 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800182a:	4b33      	ldr	r3, [pc, #204]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001836:	d158      	bne.n	80018ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e057      	b.n	80018ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800183c:	4b2e      	ldr	r3, [pc, #184]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001842:	4a2d      	ldr	r2, [pc, #180]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001848:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800184c:	e04d      	b.n	80018ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001854:	d141      	bne.n	80018da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001856:	4b28      	ldr	r3, [pc, #160]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800185e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001862:	d131      	bne.n	80018c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b24      	ldr	r3, [pc, #144]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800186a:	4a23      	ldr	r2, [pc, #140]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001874:	4b20      	ldr	r3, [pc, #128]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800187c:	4a1e      	ldr	r2, [pc, #120]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800187e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001882:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001884:	4b1d      	ldr	r3, [pc, #116]	@ (80018fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2232      	movs	r2, #50	@ 0x32
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	4a1c      	ldr	r2, [pc, #112]	@ (8001900 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001890:	fba2 2303 	umull	r2, r3, r2, r3
 8001894:	0c9b      	lsrs	r3, r3, #18
 8001896:	3301      	adds	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800189a:	e002      	b.n	80018a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3b01      	subs	r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018ae:	d102      	bne.n	80018b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f2      	bne.n	800189c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018b6:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018c2:	d112      	bne.n	80018ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e011      	b.n	80018ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018c8:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018ce:	4a0a      	ldr	r2, [pc, #40]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80018d8:	e007      	b.n	80018ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018da:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018e2:	4a05      	ldr	r2, [pc, #20]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	40007000 	.word	0x40007000
 80018fc:	20000000 	.word	0x20000000
 8001900:	431bde83 	.word	0x431bde83

08001904 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001908:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800190e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001912:	6093      	str	r3, [r2, #8]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40007000 	.word	0x40007000

08001924 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e2fe      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d075      	beq.n	8001a2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001942:	4b97      	ldr	r3, [pc, #604]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800194c:	4b94      	ldr	r3, [pc, #592]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2b0c      	cmp	r3, #12
 800195a:	d102      	bne.n	8001962 <HAL_RCC_OscConfig+0x3e>
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d002      	beq.n	8001968 <HAL_RCC_OscConfig+0x44>
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	2b08      	cmp	r3, #8
 8001966:	d10b      	bne.n	8001980 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001968:	4b8d      	ldr	r3, [pc, #564]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d05b      	beq.n	8001a2c <HAL_RCC_OscConfig+0x108>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d157      	bne.n	8001a2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e2d9      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001988:	d106      	bne.n	8001998 <HAL_RCC_OscConfig+0x74>
 800198a:	4b85      	ldr	r3, [pc, #532]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a84      	ldr	r2, [pc, #528]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e01d      	b.n	80019d4 <HAL_RCC_OscConfig+0xb0>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019a0:	d10c      	bne.n	80019bc <HAL_RCC_OscConfig+0x98>
 80019a2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 80019a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	4b7c      	ldr	r3, [pc, #496]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a7b      	ldr	r2, [pc, #492]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 80019b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	e00b      	b.n	80019d4 <HAL_RCC_OscConfig+0xb0>
 80019bc:	4b78      	ldr	r3, [pc, #480]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a77      	ldr	r2, [pc, #476]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 80019c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b75      	ldr	r3, [pc, #468]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a74      	ldr	r2, [pc, #464]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 80019ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d013      	beq.n	8001a04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7ff f9a4 	bl	8000d28 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e4:	f7ff f9a0 	bl	8000d28 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b64      	cmp	r3, #100	@ 0x64
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e29e      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f6:	4b6a      	ldr	r3, [pc, #424]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0xc0>
 8001a02:	e014      	b.n	8001a2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff f990 	bl	8000d28 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff f98c 	bl	8000d28 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	@ 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e28a      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a1e:	4b60      	ldr	r3, [pc, #384]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0xe8>
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d075      	beq.n	8001b26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a3a:	4b59      	ldr	r3, [pc, #356]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
 8001a42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a44:	4b56      	ldr	r3, [pc, #344]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2b0c      	cmp	r3, #12
 8001a52:	d102      	bne.n	8001a5a <HAL_RCC_OscConfig+0x136>
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d002      	beq.n	8001a60 <HAL_RCC_OscConfig+0x13c>
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d11f      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a60:	4b4f      	ldr	r3, [pc, #316]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_OscConfig+0x154>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e25d      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a78:	4b49      	ldr	r3, [pc, #292]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	061b      	lsls	r3, r3, #24
 8001a86:	4946      	ldr	r1, [pc, #280]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a8c:	4b45      	ldr	r3, [pc, #276]	@ (8001ba4 <HAL_RCC_OscConfig+0x280>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff f8fd 	bl	8000c90 <HAL_InitTick>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d043      	beq.n	8001b24 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e249      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d023      	beq.n	8001af0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a3c      	ldr	r2, [pc, #240]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7ff f938 	bl	8000d28 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001abc:	f7ff f934 	bl	8000d28 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e232      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ace:	4b34      	ldr	r3, [pc, #208]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ada:	4b31      	ldr	r3, [pc, #196]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	061b      	lsls	r3, r3, #24
 8001ae8:	492d      	ldr	r1, [pc, #180]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	604b      	str	r3, [r1, #4]
 8001aee:	e01a      	b.n	8001b26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001af0:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a2a      	ldr	r2, [pc, #168]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001af6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff f914 	bl	8000d28 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b04:	f7ff f910 	bl	8000d28 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e20e      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b16:	4b22      	ldr	r3, [pc, #136]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x1e0>
 8001b22:	e000      	b.n	8001b26 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d041      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d01c      	beq.n	8001b74 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b3a:	4b19      	ldr	r3, [pc, #100]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b40:	4a17      	ldr	r2, [pc, #92]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4a:	f7ff f8ed 	bl	8000d28 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b52:	f7ff f8e9 	bl	8000d28 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e1e7      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0ef      	beq.n	8001b52 <HAL_RCC_OscConfig+0x22e>
 8001b72:	e020      	b.n	8001bb6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001b7c:	f023 0301 	bic.w	r3, r3, #1
 8001b80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b84:	f7ff f8d0 	bl	8000d28 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b8a:	e00d      	b.n	8001ba8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b8c:	f7ff f8cc 	bl	8000d28 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d906      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e1ca      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ba8:	4b8c      	ldr	r3, [pc, #560]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1ea      	bne.n	8001b8c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 80a6 	beq.w	8001d10 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001bc8:	4b84      	ldr	r3, [pc, #528]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x2b4>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <HAL_RCC_OscConfig+0x2b6>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00d      	beq.n	8001bfa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	4b7f      	ldr	r3, [pc, #508]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be2:	4a7e      	ldr	r2, [pc, #504]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bea:	4b7c      	ldr	r3, [pc, #496]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bfa:	4b79      	ldr	r3, [pc, #484]	@ (8001de0 <HAL_RCC_OscConfig+0x4bc>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d118      	bne.n	8001c38 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c06:	4b76      	ldr	r3, [pc, #472]	@ (8001de0 <HAL_RCC_OscConfig+0x4bc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a75      	ldr	r2, [pc, #468]	@ (8001de0 <HAL_RCC_OscConfig+0x4bc>)
 8001c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c12:	f7ff f889 	bl	8000d28 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1a:	f7ff f885 	bl	8000d28 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e183      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c2c:	4b6c      	ldr	r3, [pc, #432]	@ (8001de0 <HAL_RCC_OscConfig+0x4bc>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d108      	bne.n	8001c52 <HAL_RCC_OscConfig+0x32e>
 8001c40:	4b66      	ldr	r3, [pc, #408]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c46:	4a65      	ldr	r2, [pc, #404]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c50:	e024      	b.n	8001c9c <HAL_RCC_OscConfig+0x378>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b05      	cmp	r3, #5
 8001c58:	d110      	bne.n	8001c7c <HAL_RCC_OscConfig+0x358>
 8001c5a:	4b60      	ldr	r3, [pc, #384]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c60:	4a5e      	ldr	r2, [pc, #376]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001c62:	f043 0304 	orr.w	r3, r3, #4
 8001c66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c6a:	4b5c      	ldr	r3, [pc, #368]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c70:	4a5a      	ldr	r2, [pc, #360]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c7a:	e00f      	b.n	8001c9c <HAL_RCC_OscConfig+0x378>
 8001c7c:	4b57      	ldr	r3, [pc, #348]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c82:	4a56      	ldr	r2, [pc, #344]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c8c:	4b53      	ldr	r3, [pc, #332]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c92:	4a52      	ldr	r2, [pc, #328]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001c94:	f023 0304 	bic.w	r3, r3, #4
 8001c98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d016      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca4:	f7ff f840 	bl	8000d28 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cac:	f7ff f83c 	bl	8000d28 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e138      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cc2:	4b46      	ldr	r3, [pc, #280]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0ed      	beq.n	8001cac <HAL_RCC_OscConfig+0x388>
 8001cd0:	e015      	b.n	8001cfe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd2:	f7ff f829 	bl	8000d28 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd8:	e00a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7ff f825 	bl	8000d28 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e121      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cf0:	4b3a      	ldr	r3, [pc, #232]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1ed      	bne.n	8001cda <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cfe:	7ffb      	ldrb	r3, [r7, #31]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d105      	bne.n	8001d10 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d04:	4b35      	ldr	r3, [pc, #212]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d08:	4a34      	ldr	r2, [pc, #208]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001d0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d0e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0320 	and.w	r3, r3, #32
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d03c      	beq.n	8001d96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01c      	beq.n	8001d5e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d24:	4b2d      	ldr	r3, [pc, #180]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d2a:	4a2c      	ldr	r2, [pc, #176]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7fe fff8 	bl	8000d28 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d3c:	f7fe fff4 	bl	8000d28 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e0f2      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d4e:	4b23      	ldr	r3, [pc, #140]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001d50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0ef      	beq.n	8001d3c <HAL_RCC_OscConfig+0x418>
 8001d5c:	e01b      	b.n	8001d96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d64:	4a1d      	ldr	r2, [pc, #116]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001d66:	f023 0301 	bic.w	r3, r3, #1
 8001d6a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6e:	f7fe ffdb 	bl	8000d28 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d76:	f7fe ffd7 	bl	8000d28 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e0d5      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d88:	4b14      	ldr	r3, [pc, #80]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001d8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1ef      	bne.n	8001d76 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 80c9 	beq.w	8001f32 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001da0:	4b0e      	ldr	r3, [pc, #56]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 030c 	and.w	r3, r3, #12
 8001da8:	2b0c      	cmp	r3, #12
 8001daa:	f000 8083 	beq.w	8001eb4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d15e      	bne.n	8001e74 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db6:	4b09      	ldr	r3, [pc, #36]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a08      	ldr	r2, [pc, #32]	@ (8001ddc <HAL_RCC_OscConfig+0x4b8>)
 8001dbc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc2:	f7fe ffb1 	bl	8000d28 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc8:	e00c      	b.n	8001de4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dca:	f7fe ffad 	bl	8000d28 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d905      	bls.n	8001de4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e0ab      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de4:	4b55      	ldr	r3, [pc, #340]	@ (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1ec      	bne.n	8001dca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df0:	4b52      	ldr	r3, [pc, #328]	@ (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	4b52      	ldr	r3, [pc, #328]	@ (8001f40 <HAL_RCC_OscConfig+0x61c>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6a11      	ldr	r1, [r2, #32]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e00:	3a01      	subs	r2, #1
 8001e02:	0112      	lsls	r2, r2, #4
 8001e04:	4311      	orrs	r1, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001e0a:	0212      	lsls	r2, r2, #8
 8001e0c:	4311      	orrs	r1, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e12:	0852      	lsrs	r2, r2, #1
 8001e14:	3a01      	subs	r2, #1
 8001e16:	0552      	lsls	r2, r2, #21
 8001e18:	4311      	orrs	r1, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e1e:	0852      	lsrs	r2, r2, #1
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0652      	lsls	r2, r2, #25
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e2a:	06d2      	lsls	r2, r2, #27
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	4943      	ldr	r1, [pc, #268]	@ (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e34:	4b41      	ldr	r3, [pc, #260]	@ (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a40      	ldr	r2, [pc, #256]	@ (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001e3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e3e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e40:	4b3e      	ldr	r3, [pc, #248]	@ (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4a3d      	ldr	r2, [pc, #244]	@ (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001e46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7fe ff6c 	bl	8000d28 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e54:	f7fe ff68 	bl	8000d28 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e066      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e66:	4b35      	ldr	r3, [pc, #212]	@ (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x530>
 8001e72:	e05e      	b.n	8001f32 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e74:	4b31      	ldr	r3, [pc, #196]	@ (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a30      	ldr	r2, [pc, #192]	@ (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001e7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7fe ff52 	bl	8000d28 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e88:	f7fe ff4e 	bl	8000d28 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e04c      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9a:	4b28      	ldr	r3, [pc, #160]	@ (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001ea6:	4b25      	ldr	r3, [pc, #148]	@ (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	4924      	ldr	r1, [pc, #144]	@ (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001eac:	4b25      	ldr	r3, [pc, #148]	@ (8001f44 <HAL_RCC_OscConfig+0x620>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	60cb      	str	r3, [r1, #12]
 8001eb2:	e03e      	b.n	8001f32 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e039      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f3c <HAL_RCC_OscConfig+0x618>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f003 0203 	and.w	r2, r3, #3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d12c      	bne.n	8001f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d123      	bne.n	8001f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d11b      	bne.n	8001f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f00:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d113      	bne.n	8001f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f10:	085b      	lsrs	r3, r3, #1
 8001f12:	3b01      	subs	r3, #1
 8001f14:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d109      	bne.n	8001f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	3b01      	subs	r3, #1
 8001f28:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d001      	beq.n	8001f32 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3720      	adds	r7, #32
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	019f800c 	.word	0x019f800c
 8001f44:	feeefffc 	.word	0xfeeefffc

08001f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e11e      	b.n	800219e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f60:	4b91      	ldr	r3, [pc, #580]	@ (80021a8 <HAL_RCC_ClockConfig+0x260>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d910      	bls.n	8001f90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6e:	4b8e      	ldr	r3, [pc, #568]	@ (80021a8 <HAL_RCC_ClockConfig+0x260>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 020f 	bic.w	r2, r3, #15
 8001f76:	498c      	ldr	r1, [pc, #560]	@ (80021a8 <HAL_RCC_ClockConfig+0x260>)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7e:	4b8a      	ldr	r3, [pc, #552]	@ (80021a8 <HAL_RCC_ClockConfig+0x260>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e106      	b.n	800219e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d073      	beq.n	8002084 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d129      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa4:	4b81      	ldr	r3, [pc, #516]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0f4      	b.n	800219e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fb4:	f000 f966 	bl	8002284 <RCC_GetSysClockFreqFromPLLSource>
 8001fb8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4a7c      	ldr	r2, [pc, #496]	@ (80021b0 <HAL_RCC_ClockConfig+0x268>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d93f      	bls.n	8002042 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001fc2:	4b7a      	ldr	r3, [pc, #488]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d033      	beq.n	8002042 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d12f      	bne.n	8002042 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fe2:	4b72      	ldr	r3, [pc, #456]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fea:	4a70      	ldr	r2, [pc, #448]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 8001fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ff0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ff2:	2380      	movs	r3, #128	@ 0x80
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	e024      	b.n	8002042 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002000:	4b6a      	ldr	r3, [pc, #424]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d109      	bne.n	8002020 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0c6      	b.n	800219e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002010:	4b66      	ldr	r3, [pc, #408]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0be      	b.n	800219e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002020:	f000 f8ce 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 8002024:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4a61      	ldr	r2, [pc, #388]	@ (80021b0 <HAL_RCC_ClockConfig+0x268>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d909      	bls.n	8002042 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800202e:	4b5f      	ldr	r3, [pc, #380]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002036:	4a5d      	ldr	r2, [pc, #372]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 8002038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800203c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800203e:	2380      	movs	r3, #128	@ 0x80
 8002040:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002042:	4b5a      	ldr	r3, [pc, #360]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f023 0203 	bic.w	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4957      	ldr	r1, [pc, #348]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 8002050:	4313      	orrs	r3, r2
 8002052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002054:	f7fe fe68 	bl	8000d28 <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	e00a      	b.n	8002072 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205c:	f7fe fe64 	bl	8000d28 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e095      	b.n	800219e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	4b4e      	ldr	r3, [pc, #312]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 020c 	and.w	r2, r3, #12
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	429a      	cmp	r2, r3
 8002082:	d1eb      	bne.n	800205c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d023      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800209c:	4b43      	ldr	r3, [pc, #268]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4a42      	ldr	r2, [pc, #264]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 80020a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020b4:	4b3d      	ldr	r3, [pc, #244]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80020bc:	4a3b      	ldr	r2, [pc, #236]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 80020be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c4:	4b39      	ldr	r3, [pc, #228]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4936      	ldr	r1, [pc, #216]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
 80020d6:	e008      	b.n	80020ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	2b80      	cmp	r3, #128	@ 0x80
 80020dc:	d105      	bne.n	80020ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80020de:	4b33      	ldr	r3, [pc, #204]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	4a32      	ldr	r2, [pc, #200]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 80020e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80020e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020ea:	4b2f      	ldr	r3, [pc, #188]	@ (80021a8 <HAL_RCC_ClockConfig+0x260>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d21d      	bcs.n	8002134 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f8:	4b2b      	ldr	r3, [pc, #172]	@ (80021a8 <HAL_RCC_ClockConfig+0x260>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 020f 	bic.w	r2, r3, #15
 8002100:	4929      	ldr	r1, [pc, #164]	@ (80021a8 <HAL_RCC_ClockConfig+0x260>)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	4313      	orrs	r3, r2
 8002106:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002108:	f7fe fe0e 	bl	8000d28 <HAL_GetTick>
 800210c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210e:	e00a      	b.n	8002126 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002110:	f7fe fe0a 	bl	8000d28 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e03b      	b.n	800219e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	4b20      	ldr	r3, [pc, #128]	@ (80021a8 <HAL_RCC_ClockConfig+0x260>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d1ed      	bne.n	8002110 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002140:	4b1a      	ldr	r3, [pc, #104]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4917      	ldr	r1, [pc, #92]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 800214e:	4313      	orrs	r3, r2
 8002150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d009      	beq.n	8002172 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800215e:	4b13      	ldr	r3, [pc, #76]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	490f      	ldr	r1, [pc, #60]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 800216e:	4313      	orrs	r3, r2
 8002170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002172:	f000 f825 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 8002176:	4602      	mov	r2, r0
 8002178:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <HAL_RCC_ClockConfig+0x264>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	490c      	ldr	r1, [pc, #48]	@ (80021b4 <HAL_RCC_ClockConfig+0x26c>)
 8002184:	5ccb      	ldrb	r3, [r1, r3]
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	fa22 f303 	lsr.w	r3, r2, r3
 800218e:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <HAL_RCC_ClockConfig+0x270>)
 8002190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002192:	4b0a      	ldr	r3, [pc, #40]	@ (80021bc <HAL_RCC_ClockConfig+0x274>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fd7a 	bl	8000c90 <HAL_InitTick>
 800219c:	4603      	mov	r3, r0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40022000 	.word	0x40022000
 80021ac:	40021000 	.word	0x40021000
 80021b0:	04c4b400 	.word	0x04c4b400
 80021b4:	08002b34 	.word	0x08002b34
 80021b8:	20000000 	.word	0x20000000
 80021bc:	20000004 	.word	0x20000004

080021c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d102      	bne.n	80021d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021d2:	4b2a      	ldr	r3, [pc, #168]	@ (800227c <HAL_RCC_GetSysClockFreq+0xbc>)
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	e047      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80021d8:	4b27      	ldr	r3, [pc, #156]	@ (8002278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d102      	bne.n	80021ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021e4:	4b26      	ldr	r3, [pc, #152]	@ (8002280 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	e03e      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80021ea:	4b23      	ldr	r3, [pc, #140]	@ (8002278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b0c      	cmp	r3, #12
 80021f4:	d136      	bne.n	8002264 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021f6:	4b20      	ldr	r3, [pc, #128]	@ (8002278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002200:	4b1d      	ldr	r3, [pc, #116]	@ (8002278 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	3301      	adds	r3, #1
 800220c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d10c      	bne.n	800222e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002214:	4a1a      	ldr	r2, [pc, #104]	@ (8002280 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	4a16      	ldr	r2, [pc, #88]	@ (8002278 <HAL_RCC_GetSysClockFreq+0xb8>)
 800221e:	68d2      	ldr	r2, [r2, #12]
 8002220:	0a12      	lsrs	r2, r2, #8
 8002222:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	617b      	str	r3, [r7, #20]
      break;
 800222c:	e00c      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800222e:	4a13      	ldr	r2, [pc, #76]	@ (800227c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	fbb2 f3f3 	udiv	r3, r2, r3
 8002236:	4a10      	ldr	r2, [pc, #64]	@ (8002278 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002238:	68d2      	ldr	r2, [r2, #12]
 800223a:	0a12      	lsrs	r2, r2, #8
 800223c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002240:	fb02 f303 	mul.w	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
      break;
 8002246:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002248:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <HAL_RCC_GetSysClockFreq+0xb8>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	0e5b      	lsrs	r3, r3, #25
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	3301      	adds	r3, #1
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	e001      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002268:	693b      	ldr	r3, [r7, #16]
}
 800226a:	4618      	mov	r0, r3
 800226c:	371c      	adds	r7, #28
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
 800227c:	00f42400 	.word	0x00f42400
 8002280:	02dc6c00 	.word	0x02dc6c00

08002284 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800228a:	4b1e      	ldr	r3, [pc, #120]	@ (8002304 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002294:	4b1b      	ldr	r3, [pc, #108]	@ (8002304 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	3301      	adds	r3, #1
 80022a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d10c      	bne.n	80022c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022a8:	4a17      	ldr	r2, [pc, #92]	@ (8002308 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b0:	4a14      	ldr	r2, [pc, #80]	@ (8002304 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022b2:	68d2      	ldr	r2, [r2, #12]
 80022b4:	0a12      	lsrs	r2, r2, #8
 80022b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	617b      	str	r3, [r7, #20]
    break;
 80022c0:	e00c      	b.n	80022dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022c2:	4a12      	ldr	r2, [pc, #72]	@ (800230c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002304 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022cc:	68d2      	ldr	r2, [r2, #12]
 80022ce:	0a12      	lsrs	r2, r2, #8
 80022d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80022d4:	fb02 f303 	mul.w	r3, r2, r3
 80022d8:	617b      	str	r3, [r7, #20]
    break;
 80022da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022dc:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	0e5b      	lsrs	r3, r3, #25
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	3301      	adds	r3, #1
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80022f6:	687b      	ldr	r3, [r7, #4]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	371c      	adds	r7, #28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	40021000 	.word	0x40021000
 8002308:	02dc6c00 	.word	0x02dc6c00
 800230c:	00f42400 	.word	0x00f42400

08002310 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e09d      	b.n	800245e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	2b00      	cmp	r3, #0
 8002328:	d108      	bne.n	800233c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002332:	d009      	beq.n	8002348 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	61da      	str	r2, [r3, #28]
 800233a:	e005      	b.n	8002348 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7fe fb2c 	bl	80009c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800237e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002388:	d902      	bls.n	8002390 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	e002      	b.n	8002396 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002390:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002394:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800239e:	d007      	beq.n	80023b0 <HAL_SPI_Init+0xa0>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80023a8:	d002      	beq.n	80023b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023f2:	ea42 0103 	orr.w	r1, r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	0c1b      	lsrs	r3, r3, #16
 800240c:	f003 0204 	and.w	r2, r3, #4
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800242c:	ea42 0103 	orr.w	r1, r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	69da      	ldr	r2, [r3, #28]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800244c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	4613      	mov	r3, r2
 8002474:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_SPI_Transmit_DMA+0x20>
 8002484:	2302      	movs	r3, #2
 8002486:	e0d4      	b.n	8002632 <HAL_SPI_Transmit_DMA+0x1ca>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b01      	cmp	r3, #1
 800249a:	d002      	beq.n	80024a2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800249c:	2302      	movs	r3, #2
 800249e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024a0:	e0c2      	b.n	8002628 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <HAL_SPI_Transmit_DMA+0x46>
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024b2:	e0b9      	b.n	8002628 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2203      	movs	r2, #3
 80024b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	88fa      	ldrh	r2, [r7, #6]
 80024cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	88fa      	ldrh	r2, [r7, #6]
 80024d2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024fe:	d10f      	bne.n	8002520 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800250e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800251e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002524:	4a45      	ldr	r2, [pc, #276]	@ (800263c <HAL_SPI_Transmit_DMA+0x1d4>)
 8002526:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252c:	4a44      	ldr	r2, [pc, #272]	@ (8002640 <HAL_SPI_Transmit_DMA+0x1d8>)
 800252e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002534:	4a43      	ldr	r2, [pc, #268]	@ (8002644 <HAL_SPI_Transmit_DMA+0x1dc>)
 8002536:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253c:	2200      	movs	r2, #0
 800253e:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800254e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002558:	d82d      	bhi.n	80025b6 <HAL_SPI_Transmit_DMA+0x14e>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002564:	d127      	bne.n	80025b6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800256a:	b29b      	uxth	r3, r3
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10f      	bne.n	8002594 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002582:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002588:	b29b      	uxth	r3, r3
 800258a:	085b      	lsrs	r3, r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002592:	e010      	b.n	80025b6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025a2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	085b      	lsrs	r3, r3, #1
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025be:	4619      	mov	r1, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	330c      	adds	r3, #12
 80025c6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025cc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80025ce:	f7fe fd91 	bl	80010f4 <HAL_DMA_Start_IT>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025dc:	f043 0210 	orr.w	r2, r3, #16
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	75fb      	strb	r3, [r7, #23]

    goto error;
 80025e8:	e01e      	b.n	8002628 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025f4:	2b40      	cmp	r3, #64	@ 0x40
 80025f6:	d007      	beq.n	8002608 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002606:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0220 	orr.w	r2, r2, #32
 8002616:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0202 	orr.w	r2, r2, #2
 8002626:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002630:	7dfb      	ldrb	r3, [r7, #23]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	0800272b 	.word	0x0800272b
 8002640:	08002685 	.word	0x08002685
 8002644:	08002747 	.word	0x08002747

08002648 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002690:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002692:	f7fe fb49 	bl	8000d28 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	d03b      	beq.n	800271e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0220 	bic.w	r2, r2, #32
 80026b4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0202 	bic.w	r2, r2, #2
 80026c4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	2164      	movs	r1, #100	@ 0x64
 80026ca:	6978      	ldr	r0, [r7, #20]
 80026cc:	f000 f97a 	bl	80029c4 <SPI_EndRxTxTransaction>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026da:	f043 0220 	orr.w	r2, r3, #32
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10a      	bne.n	8002700 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2200      	movs	r2, #0
 8002704:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002716:	6978      	ldr	r0, [r7, #20]
 8002718:	f7ff ffaa 	bl	8002670 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800271c:	e002      	b.n	8002724 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800271e:	6978      	ldr	r0, [r7, #20]
 8002720:	f7ff ff92 	bl	8002648 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002736:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f7ff ff8f 	bl	800265c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002752:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0203 	bic.w	r2, r2, #3
 8002762:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002768:	f043 0210 	orr.w	r2, r3, #16
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff ff79 	bl	8002670 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	4613      	mov	r3, r2
 8002796:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002798:	f7fe fac6 	bl	8000d28 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	4413      	add	r3, r2
 80027a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027a8:	f7fe fabe 	bl	8000d28 <HAL_GetTick>
 80027ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027ae:	4b39      	ldr	r3, [pc, #228]	@ (8002894 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	015b      	lsls	r3, r3, #5
 80027b4:	0d1b      	lsrs	r3, r3, #20
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	fb02 f303 	mul.w	r3, r2, r3
 80027bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027be:	e054      	b.n	800286a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c6:	d050      	beq.n	800286a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027c8:	f7fe faae 	bl	8000d28 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d902      	bls.n	80027de <SPI_WaitFlagStateUntilTimeout+0x56>
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d13d      	bne.n	800285a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80027ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027f6:	d111      	bne.n	800281c <SPI_WaitFlagStateUntilTimeout+0x94>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002800:	d004      	beq.n	800280c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800280a:	d107      	bne.n	800281c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800281a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002820:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002824:	d10f      	bne.n	8002846 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002844:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e017      	b.n	800288a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	3b01      	subs	r3, #1
 8002868:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4013      	ands	r3, r2
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	429a      	cmp	r2, r3
 8002878:	bf0c      	ite	eq
 800287a:	2301      	moveq	r3, #1
 800287c:	2300      	movne	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	461a      	mov	r2, r3
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	429a      	cmp	r2, r3
 8002886:	d19b      	bne.n	80027c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3720      	adds	r7, #32
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000000 	.word	0x20000000

08002898 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08a      	sub	sp, #40	@ 0x28
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80028aa:	f7fe fa3d 	bl	8000d28 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b2:	1a9b      	subs	r3, r3, r2
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	4413      	add	r3, r2
 80028b8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80028ba:	f7fe fa35 	bl	8000d28 <HAL_GetTick>
 80028be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	330c      	adds	r3, #12
 80028c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80028c8:	4b3d      	ldr	r3, [pc, #244]	@ (80029c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	00da      	lsls	r2, r3, #3
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	0d1b      	lsrs	r3, r3, #20
 80028d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028da:	fb02 f303 	mul.w	r3, r2, r3
 80028de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80028e0:	e060      	b.n	80029a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80028e8:	d107      	bne.n	80028fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d104      	bne.n	80028fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d050      	beq.n	80029a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002902:	f7fe fa11 	bl	8000d28 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800290e:	429a      	cmp	r2, r3
 8002910:	d902      	bls.n	8002918 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	2b00      	cmp	r3, #0
 8002916:	d13d      	bne.n	8002994 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002926:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002930:	d111      	bne.n	8002956 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800293a:	d004      	beq.n	8002946 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002944:	d107      	bne.n	8002956 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002954:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800295e:	d10f      	bne.n	8002980 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800297e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e010      	b.n	80029b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4013      	ands	r3, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d196      	bne.n	80028e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3728      	adds	r7, #40	@ 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000000 	.word	0x20000000

080029c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f7ff ff5b 	bl	8002898 <SPI_WaitFifoStateUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d007      	beq.n	80029f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ec:	f043 0220 	orr.w	r2, r3, #32
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e027      	b.n	8002a48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2200      	movs	r2, #0
 8002a00:	2180      	movs	r1, #128	@ 0x80
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f7ff fec0 	bl	8002788 <SPI_WaitFlagStateUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a12:	f043 0220 	orr.w	r2, r3, #32
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e014      	b.n	8002a48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f7ff ff34 	bl	8002898 <SPI_WaitFifoStateUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a3a:	f043 0220 	orr.w	r2, r3, #32
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e000      	b.n	8002a48 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <memset>:
 8002a50:	4402      	add	r2, r0
 8002a52:	4603      	mov	r3, r0
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d100      	bne.n	8002a5a <memset+0xa>
 8002a58:	4770      	bx	lr
 8002a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a5e:	e7f9      	b.n	8002a54 <memset+0x4>

08002a60 <__libc_init_array>:
 8002a60:	b570      	push	{r4, r5, r6, lr}
 8002a62:	4d0d      	ldr	r5, [pc, #52]	@ (8002a98 <__libc_init_array+0x38>)
 8002a64:	4c0d      	ldr	r4, [pc, #52]	@ (8002a9c <__libc_init_array+0x3c>)
 8002a66:	1b64      	subs	r4, r4, r5
 8002a68:	10a4      	asrs	r4, r4, #2
 8002a6a:	2600      	movs	r6, #0
 8002a6c:	42a6      	cmp	r6, r4
 8002a6e:	d109      	bne.n	8002a84 <__libc_init_array+0x24>
 8002a70:	4d0b      	ldr	r5, [pc, #44]	@ (8002aa0 <__libc_init_array+0x40>)
 8002a72:	4c0c      	ldr	r4, [pc, #48]	@ (8002aa4 <__libc_init_array+0x44>)
 8002a74:	f000 f818 	bl	8002aa8 <_init>
 8002a78:	1b64      	subs	r4, r4, r5
 8002a7a:	10a4      	asrs	r4, r4, #2
 8002a7c:	2600      	movs	r6, #0
 8002a7e:	42a6      	cmp	r6, r4
 8002a80:	d105      	bne.n	8002a8e <__libc_init_array+0x2e>
 8002a82:	bd70      	pop	{r4, r5, r6, pc}
 8002a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a88:	4798      	blx	r3
 8002a8a:	3601      	adds	r6, #1
 8002a8c:	e7ee      	b.n	8002a6c <__libc_init_array+0xc>
 8002a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a92:	4798      	blx	r3
 8002a94:	3601      	adds	r6, #1
 8002a96:	e7f2      	b.n	8002a7e <__libc_init_array+0x1e>
 8002a98:	08002b44 	.word	0x08002b44
 8002a9c:	08002b44 	.word	0x08002b44
 8002aa0:	08002b44 	.word	0x08002b44
 8002aa4:	08002b48 	.word	0x08002b48

08002aa8 <_init>:
 8002aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aaa:	bf00      	nop
 8002aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aae:	bc08      	pop	{r3}
 8002ab0:	469e      	mov	lr, r3
 8002ab2:	4770      	bx	lr

08002ab4 <_fini>:
 8002ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab6:	bf00      	nop
 8002ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aba:	bc08      	pop	{r3}
 8002abc:	469e      	mov	lr, r3
 8002abe:	4770      	bx	lr
