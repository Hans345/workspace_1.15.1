/*
   Copyright (c) 2019-2021 by Plexim GmbH
   All rights reserved.

   A free license is granted to anyone to use this software for any legal
   non safety-critical purpose, including commercial applications, provided
   that:
   1) IT IS NOT USED TO DIRECTLY OR INDIRECTLY COMPETE WITH PLEXIM, and
   2) THIS COPYRIGHT NOTICE IS PRESERVED in its entirety.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.
 */


#include "includes.h"

#include "plx_dispatcher.h"

/* USER CODE BEGIN Includes */
#include "ST7735.h"
#include "GFX_FUNCTIONS.h"

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* Private function prototypes -----------------------------------------------*/
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_SPI1_Init(void);

void Subsystem_initialize();

#define TSP_VER 0x104
#ifdef TSP_VER
#if (TSP_VER != THIS_TSP_VER)
#error TSP Version mismatch.
#endif
#endif

int main(void)
{
   HAL_Init();

   Subsystem_initialize();

   /* USER CODE BEGIN SysInit */
   SystemCoreClockUpdate();
   float clk = SystemCoreClock;

   /* Initialize all configured peripherals */
   MX_GPIO_Init();
   MX_DMA_Init();
   MX_SPI1_Init();
   ST7735_Init(0);

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		uint8_t data[2] = {182, 182};						 // Data to Transmit 182 = 1011'0110
		// Ohne DMA
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // CS Low
		HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET); 	 // DC
		HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);	 // CS High
		// Mit DMA
		/*HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // CS Low
		HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET); 	 // DC
		HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
		while(hspi1.State == HAL_SPI_STATE_BUSY_TX)
		{

		}
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);	 // CS High*/
	}
}
