
104_StateMachine_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033c4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800359c  0800359c  0000459c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003620  08003620  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003620  08003620  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003620  08003620  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003620  08003620  00004620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003624  08003624  00004624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003628  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  08003634  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08003634  0000519c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5eb  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002435  00000000  00000000  00014627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00016a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb8  00000000  00000000  00017ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026093  00000000  00000000  00018788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011da2  00000000  00000000  0003e81b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7328  00000000  00000000  000505bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001478e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000453c  00000000  00000000  00147928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0014be64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003584 	.word	0x08003584

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003584 	.word	0x08003584

08000218 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000218:	b590      	push	{r4, r7, lr}
 800021a:	b085      	sub	sp, #20
 800021c:	af02      	add	r7, sp, #8
 800021e:	4604      	mov	r4, r0
 8000220:	4608      	mov	r0, r1
 8000222:	4611      	mov	r1, r2
 8000224:	461a      	mov	r2, r3
 8000226:	4623      	mov	r3, r4
 8000228:	80fb      	strh	r3, [r7, #6]
 800022a:	4603      	mov	r3, r0
 800022c:	80bb      	strh	r3, [r7, #4]
 800022e:	460b      	mov	r3, r1
 8000230:	807b      	strh	r3, [r7, #2]
 8000232:	4613      	mov	r3, r2
 8000234:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000236:	88f8      	ldrh	r0, [r7, #6]
 8000238:	88b9      	ldrh	r1, [r7, #4]
 800023a:	887a      	ldrh	r2, [r7, #2]
 800023c:	883c      	ldrh	r4, [r7, #0]
 800023e:	8b3b      	ldrh	r3, [r7, #24]
 8000240:	9300      	str	r3, [sp, #0]
 8000242:	4623      	mov	r3, r4
 8000244:	f000 f9ca 	bl	80005dc <ST7735_FillRectangle>
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	bd90      	pop	{r4, r7, pc}

08000250 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af02      	add	r7, sp, #8
 8000256:	4603      	mov	r3, r0
 8000258:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800025a:	4b08      	ldr	r3, [pc, #32]	@ (800027c <fillScreen+0x2c>)
 800025c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000260:	4b07      	ldr	r3, [pc, #28]	@ (8000280 <fillScreen+0x30>)
 8000262:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000266:	88fb      	ldrh	r3, [r7, #6]
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	460b      	mov	r3, r1
 800026c:	2100      	movs	r1, #0
 800026e:	2000      	movs	r0, #0
 8000270:	f7ff ffd2 	bl	8000218 <fillRect>
}
 8000274:	bf00      	nop
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000028 	.word	0x20000028
 8000280:	2000002a 	.word	0x2000002a

08000284 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800028e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000292:	f001 fc47 	bl	8001b24 <HAL_GPIO_WritePin>
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}

0800029a <ST7735_Unselect>:

void ST7735_Unselect()
{
 800029a:	b580      	push	{r7, lr}
 800029c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a8:	f001 fc3c 	bl	8001b24 <HAL_GPIO_WritePin>
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <ST7735_Reset>:

void ST7735_Reset()
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2140      	movs	r1, #64	@ 0x40
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002bc:	f001 fc32 	bl	8001b24 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80002c0:	2005      	movs	r0, #5
 80002c2:	f000 fef1 	bl	80010a8 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80002c6:	2201      	movs	r2, #1
 80002c8:	2140      	movs	r1, #64	@ 0x40
 80002ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ce:	f001 fc29 	bl	8001b24 <HAL_GPIO_WritePin>
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002e8:	480a      	ldr	r0, [pc, #40]	@ (8000314 <ST7735_WriteCommand+0x3c>)
 80002ea:	f001 fc1b 	bl	8001b24 <HAL_GPIO_WritePin>
	#ifdef WITH_DMA
		HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
 80002ee:	1dfb      	adds	r3, r7, #7
 80002f0:	2201      	movs	r2, #1
 80002f2:	4619      	mov	r1, r3
 80002f4:	4808      	ldr	r0, [pc, #32]	@ (8000318 <ST7735_WriteCommand+0x40>)
 80002f6:	f002 fab5 	bl	8002864 <HAL_SPI_Transmit_DMA>
		while(hspi1.State == HAL_SPI_STATE_BUSY_TX)
 80002fa:	bf00      	nop
 80002fc:	4b06      	ldr	r3, [pc, #24]	@ (8000318 <ST7735_WriteCommand+0x40>)
 80002fe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8000302:	b2db      	uxtb	r3, r3
 8000304:	2b03      	cmp	r3, #3
 8000306:	d0f9      	beq.n	80002fc <ST7735_WriteCommand+0x24>
		}
	#endif
	#ifdef WITHOUT_DMA
		HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
	#endif
}
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	48000400 	.word	0x48000400
 8000318:	20000034 	.word	0x20000034

0800031c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000326:	2201      	movs	r2, #1
 8000328:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800032c:	480a      	ldr	r0, [pc, #40]	@ (8000358 <ST7735_WriteData+0x3c>)
 800032e:	f001 fbf9 	bl	8001b24 <HAL_GPIO_WritePin>
	#ifdef WITH_DMA
    	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	b29b      	uxth	r3, r3
 8000336:	461a      	mov	r2, r3
 8000338:	6879      	ldr	r1, [r7, #4]
 800033a:	4808      	ldr	r0, [pc, #32]	@ (800035c <ST7735_WriteData+0x40>)
 800033c:	f002 fa92 	bl	8002864 <HAL_SPI_Transmit_DMA>
    	while(hspi1.State == HAL_SPI_STATE_BUSY_TX)
 8000340:	bf00      	nop
 8000342:	4b06      	ldr	r3, [pc, #24]	@ (800035c <ST7735_WriteData+0x40>)
 8000344:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8000348:	b2db      	uxtb	r3, r3
 800034a:	2b03      	cmp	r3, #3
 800034c:	d0f9      	beq.n	8000342 <ST7735_WriteData+0x26>
    	}
	#endif
	#ifdef WITHOUT_DMA
    	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
	#endif
}
 800034e:	bf00      	nop
 8000350:	bf00      	nop
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	48000400 	.word	0x48000400
 800035c:	20000034 	.word	0x20000034

08000360 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	1c5a      	adds	r2, r3, #1
 800036c:	607a      	str	r2, [r7, #4]
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000372:	e034      	b.n	80003de <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	1c5a      	adds	r2, r3, #1
 8000378:	607a      	str	r2, [r7, #4]
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800037e:	7afb      	ldrb	r3, [r7, #11]
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ffa9 	bl	80002d8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	1c5a      	adds	r2, r3, #1
 800038a:	607a      	str	r2, [r7, #4]
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000390:	7abb      	ldrb	r3, [r7, #10]
 8000392:	b29b      	uxth	r3, r3
 8000394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000398:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800039a:	7abb      	ldrb	r3, [r7, #10]
 800039c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80003a0:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80003a2:	7abb      	ldrb	r3, [r7, #10]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d008      	beq.n	80003ba <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80003a8:	7abb      	ldrb	r3, [r7, #10]
 80003aa:	4619      	mov	r1, r3
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f7ff ffb5 	bl	800031c <ST7735_WriteData>
            addr += numArgs;
 80003b2:	7abb      	ldrb	r3, [r7, #10]
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	4413      	add	r3, r2
 80003b8:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80003ba:	89bb      	ldrh	r3, [r7, #12]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d00e      	beq.n	80003de <DisplayInit+0x7e>
            ms = *addr++;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	1c5a      	adds	r2, r3, #1
 80003c4:	607a      	str	r2, [r7, #4]
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80003ca:	89bb      	ldrh	r3, [r7, #12]
 80003cc:	2bff      	cmp	r3, #255	@ 0xff
 80003ce:	d102      	bne.n	80003d6 <DisplayInit+0x76>
 80003d0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80003d4:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80003d6:	89bb      	ldrh	r3, [r7, #12]
 80003d8:	4618      	mov	r0, r3
 80003da:	f000 fe65 	bl	80010a8 <HAL_Delay>
    while(numCommands--) {
 80003de:	7bfb      	ldrb	r3, [r7, #15]
 80003e0:	1e5a      	subs	r2, r3, #1
 80003e2:	73fa      	strb	r2, [r7, #15]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d1c5      	bne.n	8000374 <DisplayInit+0x14>
        }
    }
}
 80003e8:	bf00      	nop
 80003ea:	bf00      	nop
 80003ec:	3710      	adds	r7, #16
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4604      	mov	r4, r0
 80003fc:	4608      	mov	r0, r1
 80003fe:	4611      	mov	r1, r2
 8000400:	461a      	mov	r2, r3
 8000402:	4623      	mov	r3, r4
 8000404:	71fb      	strb	r3, [r7, #7]
 8000406:	4603      	mov	r3, r0
 8000408:	71bb      	strb	r3, [r7, #6]
 800040a:	460b      	mov	r3, r1
 800040c:	717b      	strb	r3, [r7, #5]
 800040e:	4613      	mov	r3, r2
 8000410:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000412:	202a      	movs	r0, #42	@ 0x2a
 8000414:	f7ff ff60 	bl	80002d8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000418:	2300      	movs	r3, #0
 800041a:	733b      	strb	r3, [r7, #12]
 800041c:	4b17      	ldr	r3, [pc, #92]	@ (800047c <ST7735_SetAddressWindow+0x88>)
 800041e:	781a      	ldrb	r2, [r3, #0]
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	4413      	add	r3, r2
 8000424:	b2db      	uxtb	r3, r3
 8000426:	737b      	strb	r3, [r7, #13]
 8000428:	2300      	movs	r3, #0
 800042a:	73bb      	strb	r3, [r7, #14]
 800042c:	4b13      	ldr	r3, [pc, #76]	@ (800047c <ST7735_SetAddressWindow+0x88>)
 800042e:	781a      	ldrb	r2, [r3, #0]
 8000430:	797b      	ldrb	r3, [r7, #5]
 8000432:	4413      	add	r3, r2
 8000434:	b2db      	uxtb	r3, r3
 8000436:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000438:	f107 030c 	add.w	r3, r7, #12
 800043c:	2104      	movs	r1, #4
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff ff6c 	bl	800031c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000444:	202b      	movs	r0, #43	@ 0x2b
 8000446:	f7ff ff47 	bl	80002d8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800044a:	4b0d      	ldr	r3, [pc, #52]	@ (8000480 <ST7735_SetAddressWindow+0x8c>)
 800044c:	781a      	ldrb	r2, [r3, #0]
 800044e:	79bb      	ldrb	r3, [r7, #6]
 8000450:	4413      	add	r3, r2
 8000452:	b2db      	uxtb	r3, r3
 8000454:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000456:	4b0a      	ldr	r3, [pc, #40]	@ (8000480 <ST7735_SetAddressWindow+0x8c>)
 8000458:	781a      	ldrb	r2, [r3, #0]
 800045a:	793b      	ldrb	r3, [r7, #4]
 800045c:	4413      	add	r3, r2
 800045e:	b2db      	uxtb	r3, r3
 8000460:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000462:	f107 030c 	add.w	r3, r7, #12
 8000466:	2104      	movs	r1, #4
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff ff57 	bl	800031c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800046e:	202c      	movs	r0, #44	@ 0x2c
 8000470:	f7ff ff32 	bl	80002d8 <ST7735_WriteCommand>
}
 8000474:	bf00      	nop
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	bd90      	pop	{r4, r7, pc}
 800047c:	2000002f 	.word	0x2000002f
 8000480:	20000030 	.word	0x20000030

08000484 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800048e:	f7ff fef9 	bl	8000284 <ST7735_Select>
    ST7735_Reset();
 8000492:	f7ff ff0d 	bl	80002b0 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000496:	480c      	ldr	r0, [pc, #48]	@ (80004c8 <ST7735_Init+0x44>)
 8000498:	f7ff ff62 	bl	8000360 <DisplayInit>
    DisplayInit(init_cmds2);
 800049c:	480b      	ldr	r0, [pc, #44]	@ (80004cc <ST7735_Init+0x48>)
 800049e:	f7ff ff5f 	bl	8000360 <DisplayInit>
    DisplayInit(init_cmds3);
 80004a2:	480b      	ldr	r0, [pc, #44]	@ (80004d0 <ST7735_Init+0x4c>)
 80004a4:	f7ff ff5c 	bl	8000360 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 80004a8:	4b0a      	ldr	r3, [pc, #40]	@ (80004d4 <ST7735_Init+0x50>)
 80004aa:	2202      	movs	r2, #2
 80004ac:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 80004ae:	4b0a      	ldr	r3, [pc, #40]	@ (80004d8 <ST7735_Init+0x54>)
 80004b0:	2203      	movs	r2, #3
 80004b2:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 f810 	bl	80004dc <ST7735_SetRotation>
    ST7735_Unselect();
 80004bc:	f7ff feed 	bl	800029a <ST7735_Unselect>

}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	0800359c 	.word	0x0800359c
 80004cc:	080035d4 	.word	0x080035d4
 80004d0:	080035e4 	.word	0x080035e4
 80004d4:	2000002d 	.word	0x2000002d
 80004d8:	2000002e 	.word	0x2000002e

080004dc <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	f003 0303 	and.w	r3, r3, #3
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	4b33      	ldr	r3, [pc, #204]	@ (80005c0 <ST7735_SetRotation+0xe4>)
 80004f4:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80004f6:	4b32      	ldr	r3, [pc, #200]	@ (80005c0 <ST7735_SetRotation+0xe4>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	d84e      	bhi.n	800059c <ST7735_SetRotation+0xc0>
 80004fe:	a201      	add	r2, pc, #4	@ (adr r2, 8000504 <ST7735_SetRotation+0x28>)
 8000500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000504:	08000515 	.word	0x08000515
 8000508:	08000537 	.word	0x08000537
 800050c:	08000559 	.word	0x08000559
 8000510:	0800057b 	.word	0x0800057b
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000514:	23c0      	movs	r3, #192	@ 0xc0
 8000516:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000518:	4b2a      	ldr	r3, [pc, #168]	@ (80005c4 <ST7735_SetRotation+0xe8>)
 800051a:	2280      	movs	r2, #128	@ 0x80
 800051c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800051e:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <ST7735_SetRotation+0xec>)
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000524:	4b29      	ldr	r3, [pc, #164]	@ (80005cc <ST7735_SetRotation+0xf0>)
 8000526:	781a      	ldrb	r2, [r3, #0]
 8000528:	4b29      	ldr	r3, [pc, #164]	@ (80005d0 <ST7735_SetRotation+0xf4>)
 800052a:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 800052c:	4b29      	ldr	r3, [pc, #164]	@ (80005d4 <ST7735_SetRotation+0xf8>)
 800052e:	781a      	ldrb	r2, [r3, #0]
 8000530:	4b29      	ldr	r3, [pc, #164]	@ (80005d8 <ST7735_SetRotation+0xfc>)
 8000532:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000534:	e032      	b.n	800059c <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000536:	23a0      	movs	r3, #160	@ 0xa0
 8000538:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800053a:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <ST7735_SetRotation+0xec>)
 800053c:	2280      	movs	r2, #128	@ 0x80
 800053e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000540:	4b20      	ldr	r3, [pc, #128]	@ (80005c4 <ST7735_SetRotation+0xe8>)
 8000542:	2280      	movs	r2, #128	@ 0x80
 8000544:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000546:	4b21      	ldr	r3, [pc, #132]	@ (80005cc <ST7735_SetRotation+0xf0>)
 8000548:	781a      	ldrb	r2, [r3, #0]
 800054a:	4b23      	ldr	r3, [pc, #140]	@ (80005d8 <ST7735_SetRotation+0xfc>)
 800054c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800054e:	4b21      	ldr	r3, [pc, #132]	@ (80005d4 <ST7735_SetRotation+0xf8>)
 8000550:	781a      	ldrb	r2, [r3, #0]
 8000552:	4b1f      	ldr	r3, [pc, #124]	@ (80005d0 <ST7735_SetRotation+0xf4>)
 8000554:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000556:	e021      	b.n	800059c <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000558:	2300      	movs	r3, #0
 800055a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800055c:	4b19      	ldr	r3, [pc, #100]	@ (80005c4 <ST7735_SetRotation+0xe8>)
 800055e:	2280      	movs	r2, #128	@ 0x80
 8000560:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000562:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <ST7735_SetRotation+0xec>)
 8000564:	2280      	movs	r2, #128	@ 0x80
 8000566:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000568:	4b18      	ldr	r3, [pc, #96]	@ (80005cc <ST7735_SetRotation+0xf0>)
 800056a:	781a      	ldrb	r2, [r3, #0]
 800056c:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <ST7735_SetRotation+0xf4>)
 800056e:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000570:	4b18      	ldr	r3, [pc, #96]	@ (80005d4 <ST7735_SetRotation+0xf8>)
 8000572:	781a      	ldrb	r2, [r3, #0]
 8000574:	4b18      	ldr	r3, [pc, #96]	@ (80005d8 <ST7735_SetRotation+0xfc>)
 8000576:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000578:	e010      	b.n	800059c <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800057a:	2360      	movs	r3, #96	@ 0x60
 800057c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800057e:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <ST7735_SetRotation+0xec>)
 8000580:	2280      	movs	r2, #128	@ 0x80
 8000582:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000584:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <ST7735_SetRotation+0xe8>)
 8000586:	2280      	movs	r2, #128	@ 0x80
 8000588:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800058a:	4b10      	ldr	r3, [pc, #64]	@ (80005cc <ST7735_SetRotation+0xf0>)
 800058c:	781a      	ldrb	r2, [r3, #0]
 800058e:	4b12      	ldr	r3, [pc, #72]	@ (80005d8 <ST7735_SetRotation+0xfc>)
 8000590:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000592:	4b10      	ldr	r3, [pc, #64]	@ (80005d4 <ST7735_SetRotation+0xf8>)
 8000594:	781a      	ldrb	r2, [r3, #0]
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <ST7735_SetRotation+0xf4>)
 8000598:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800059a:	bf00      	nop
  }
  ST7735_Select();
 800059c:	f7ff fe72 	bl	8000284 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80005a0:	2036      	movs	r0, #54	@ 0x36
 80005a2:	f7ff fe99 	bl	80002d8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80005a6:	f107 030f 	add.w	r3, r7, #15
 80005aa:	2101      	movs	r1, #1
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff feb5 	bl	800031c <ST7735_WriteData>
  ST7735_Unselect();
 80005b2:	f7ff fe72 	bl	800029a <ST7735_Unselect>
}
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	2000002c 	.word	0x2000002c
 80005c4:	2000002a 	.word	0x2000002a
 80005c8:	20000028 	.word	0x20000028
 80005cc:	2000002d 	.word	0x2000002d
 80005d0:	2000002f 	.word	0x2000002f
 80005d4:	2000002e 	.word	0x2000002e
 80005d8:	20000030 	.word	0x20000030

080005dc <ST7735_FillRectangle>:

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4604      	mov	r4, r0
 80005e4:	4608      	mov	r0, r1
 80005e6:	4611      	mov	r1, r2
 80005e8:	461a      	mov	r2, r3
 80005ea:	4623      	mov	r3, r4
 80005ec:	80fb      	strh	r3, [r7, #6]
 80005ee:	4603      	mov	r3, r0
 80005f0:	80bb      	strh	r3, [r7, #4]
 80005f2:	460b      	mov	r3, r1
 80005f4:	807b      	strh	r3, [r7, #2]
 80005f6:	4613      	mov	r3, r2
 80005f8:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	4a3b      	ldr	r2, [pc, #236]	@ (80006ec <ST7735_FillRectangle+0x110>)
 80005fe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000602:	4293      	cmp	r3, r2
 8000604:	da6d      	bge.n	80006e2 <ST7735_FillRectangle+0x106>
 8000606:	88bb      	ldrh	r3, [r7, #4]
 8000608:	4a39      	ldr	r2, [pc, #228]	@ (80006f0 <ST7735_FillRectangle+0x114>)
 800060a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800060e:	4293      	cmp	r3, r2
 8000610:	da67      	bge.n	80006e2 <ST7735_FillRectangle+0x106>
    if((x + w - 1) >= _width) w = _width - x;
 8000612:	88fa      	ldrh	r2, [r7, #6]
 8000614:	887b      	ldrh	r3, [r7, #2]
 8000616:	4413      	add	r3, r2
 8000618:	4a34      	ldr	r2, [pc, #208]	@ (80006ec <ST7735_FillRectangle+0x110>)
 800061a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800061e:	4293      	cmp	r3, r2
 8000620:	dd06      	ble.n	8000630 <ST7735_FillRectangle+0x54>
 8000622:	4b32      	ldr	r3, [pc, #200]	@ (80006ec <ST7735_FillRectangle+0x110>)
 8000624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000628:	b29a      	uxth	r2, r3
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000630:	88ba      	ldrh	r2, [r7, #4]
 8000632:	883b      	ldrh	r3, [r7, #0]
 8000634:	4413      	add	r3, r2
 8000636:	4a2e      	ldr	r2, [pc, #184]	@ (80006f0 <ST7735_FillRectangle+0x114>)
 8000638:	f9b2 2000 	ldrsh.w	r2, [r2]
 800063c:	4293      	cmp	r3, r2
 800063e:	dd06      	ble.n	800064e <ST7735_FillRectangle+0x72>
 8000640:	4b2b      	ldr	r3, [pc, #172]	@ (80006f0 <ST7735_FillRectangle+0x114>)
 8000642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000646:	b29a      	uxth	r2, r3
 8000648:	88bb      	ldrh	r3, [r7, #4]
 800064a:	1ad3      	subs	r3, r2, r3
 800064c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800064e:	f7ff fe19 	bl	8000284 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000652:	88fb      	ldrh	r3, [r7, #6]
 8000654:	b2d8      	uxtb	r0, r3
 8000656:	88bb      	ldrh	r3, [r7, #4]
 8000658:	b2d9      	uxtb	r1, r3
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	b2da      	uxtb	r2, r3
 800065e:	887b      	ldrh	r3, [r7, #2]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	4413      	add	r3, r2
 8000664:	b2db      	uxtb	r3, r3
 8000666:	3b01      	subs	r3, #1
 8000668:	b2dc      	uxtb	r4, r3
 800066a:	88bb      	ldrh	r3, [r7, #4]
 800066c:	b2da      	uxtb	r2, r3
 800066e:	883b      	ldrh	r3, [r7, #0]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	4413      	add	r3, r2
 8000674:	b2db      	uxtb	r3, r3
 8000676:	3b01      	subs	r3, #1
 8000678:	b2db      	uxtb	r3, r3
 800067a:	4622      	mov	r2, r4
 800067c:	f7ff feba 	bl	80003f4 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000680:	8c3b      	ldrh	r3, [r7, #32]
 8000682:	0a1b      	lsrs	r3, r3, #8
 8000684:	b29b      	uxth	r3, r3
 8000686:	b2db      	uxtb	r3, r3
 8000688:	733b      	strb	r3, [r7, #12]
 800068a:	8c3b      	ldrh	r3, [r7, #32]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000696:	4817      	ldr	r0, [pc, #92]	@ (80006f4 <ST7735_FillRectangle+0x118>)
 8000698:	f001 fa44 	bl	8001b24 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800069c:	883b      	ldrh	r3, [r7, #0]
 800069e:	80bb      	strh	r3, [r7, #4]
 80006a0:	e019      	b.n	80006d6 <ST7735_FillRectangle+0xfa>
        for(x = w; x > 0; x--) {
 80006a2:	887b      	ldrh	r3, [r7, #2]
 80006a4:	80fb      	strh	r3, [r7, #6]
 80006a6:	e010      	b.n	80006ca <ST7735_FillRectangle+0xee>
			#ifdef WITH_DMA
        		HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2202      	movs	r2, #2
 80006ae:	4619      	mov	r1, r3
 80006b0:	4811      	ldr	r0, [pc, #68]	@ (80006f8 <ST7735_FillRectangle+0x11c>)
 80006b2:	f002 f8d7 	bl	8002864 <HAL_SPI_Transmit_DMA>
				while(hspi1.State == HAL_SPI_STATE_BUSY_TX)
 80006b6:	bf00      	nop
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <ST7735_FillRectangle+0x11c>)
 80006ba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d0f9      	beq.n	80006b8 <ST7735_FillRectangle+0xdc>
        for(x = w; x > 0; x--) {
 80006c4:	88fb      	ldrh	r3, [r7, #6]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	80fb      	strh	r3, [r7, #6]
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1eb      	bne.n	80006a8 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 80006d0:	88bb      	ldrh	r3, [r7, #4]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	80bb      	strh	r3, [r7, #4]
 80006d6:	88bb      	ldrh	r3, [r7, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1e2      	bne.n	80006a2 <ST7735_FillRectangle+0xc6>
				HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
			#endif
        }
    }

    ST7735_Unselect();
 80006dc:	f7ff fddd 	bl	800029a <ST7735_Unselect>
 80006e0:	e000      	b.n	80006e4 <ST7735_FillRectangle+0x108>
    if((x >= _width) || (y >= _height)) return;
 80006e2:	bf00      	nop
}
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd90      	pop	{r4, r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000028 	.word	0x20000028
 80006f0:	2000002a 	.word	0x2000002a
 80006f4:	48000400 	.word	0x48000400
 80006f8:	20000034 	.word	0x20000034

080006fc <HAL_GPIO_EXTI_Callback>:

/****** Interrupts ******/
// GPIO Callback
// Diese Callback Funktion wird beim drücken des Taster B1 aufgerufen
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	80fb      	strh	r3, [r7, #6]
	if(handler_state == IDLE && flag == 0)
 8000706:	4b17      	ldr	r3, [pc, #92]	@ (8000764 <HAL_GPIO_EXTI_Callback+0x68>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d10a      	bne.n	8000724 <HAL_GPIO_EXTI_Callback+0x28>
 800070e:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d106      	bne.n	8000724 <HAL_GPIO_EXTI_Callback+0x28>
	{
		set_handler_state(LEDON);
 8000716:	2001      	movs	r0, #1
 8000718:	f000 fbfa 	bl	8000f10 <set_handler_state>
    	// Start Timer 17
    	HAL_TIM_Base_Start_IT(&htim17);
 800071c:	4813      	ldr	r0, [pc, #76]	@ (800076c <HAL_GPIO_EXTI_Callback+0x70>)
 800071e:	f002 fbed 	bl	8002efc <HAL_TIM_Base_Start_IT>
	else
	{
		set_handler_state(IDLE);
		flag = 0;
	}
}
 8000722:	e01b      	b.n	800075c <HAL_GPIO_EXTI_Callback+0x60>
	else if(handler_state == LEDON)
 8000724:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <HAL_GPIO_EXTI_Callback+0x68>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d106      	bne.n	800073a <HAL_GPIO_EXTI_Callback+0x3e>
		set_handler_state(LEDBLINK);
 800072c:	2002      	movs	r0, #2
 800072e:	f000 fbef 	bl	8000f10 <set_handler_state>
    	HAL_TIM_Base_Start_IT(&htim17);
 8000732:	480e      	ldr	r0, [pc, #56]	@ (800076c <HAL_GPIO_EXTI_Callback+0x70>)
 8000734:	f002 fbe2 	bl	8002efc <HAL_TIM_Base_Start_IT>
}
 8000738:	e010      	b.n	800075c <HAL_GPIO_EXTI_Callback+0x60>
	else if(handler_state == LEDBLINK)
 800073a:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <HAL_GPIO_EXTI_Callback+0x68>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b02      	cmp	r3, #2
 8000740:	d106      	bne.n	8000750 <HAL_GPIO_EXTI_Callback+0x54>
		set_handler_state(LEDON);
 8000742:	2001      	movs	r0, #1
 8000744:	f000 fbe4 	bl	8000f10 <set_handler_state>
    	HAL_TIM_Base_Start_IT(&htim17);
 8000748:	4808      	ldr	r0, [pc, #32]	@ (800076c <HAL_GPIO_EXTI_Callback+0x70>)
 800074a:	f002 fbd7 	bl	8002efc <HAL_TIM_Base_Start_IT>
}
 800074e:	e005      	b.n	800075c <HAL_GPIO_EXTI_Callback+0x60>
		set_handler_state(IDLE);
 8000750:	2000      	movs	r0, #0
 8000752:	f000 fbdd 	bl	8000f10 <set_handler_state>
		flag = 0;
 8000756:	4b04      	ldr	r3, [pc, #16]	@ (8000768 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000191 	.word	0x20000191
 8000768:	20000190 	.word	0x20000190
 800076c:	20000144 	.word	0x20000144

08000770 <HAL_TIM_PeriodElapsedCallback>:

// Timer Callback
// Diese Callback Funktion wird immer nach erreichen des Timer maximums aufgerufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	// Überprüfe welcher Timer diese callback Funktion aufruft
	if(htim == &htim16)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a16      	ldr	r2, [pc, #88]	@ (80007d4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d10b      	bne.n	8000798 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		// Toggle PC3 alle 100ms
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8000780:	2108      	movs	r1, #8
 8000782:	4815      	ldr	r0, [pc, #84]	@ (80007d8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000784:	f001 f9e6 	bl	8001b54 <HAL_GPIO_TogglePin>
		// Handler Zeit um 100ms erhöhen
		if(handler_state == LEDBLINK)
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d11c      	bne.n	80007ca <HAL_TIM_PeriodElapsedCallback+0x5a>
		{
			inc_handler_currentTime(100);
 8000790:	2064      	movs	r0, #100	@ 0x64
 8000792:	f000 fbdb 	bl	8000f4c <inc_handler_currentTime>
			flag = 1;
		}
		// Toggle PC4 alle 1s
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
	}
}
 8000796:	e018      	b.n	80007ca <HAL_TIM_PeriodElapsedCallback+0x5a>
	else if(htim == &htim17)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a11      	ldr	r2, [pc, #68]	@ (80007e0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d114      	bne.n	80007ca <HAL_TIM_PeriodElapsedCallback+0x5a>
		if(HAL_GPIO_ReadPin(B1, B1_PIN))
 80007a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a4:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80007a6:	f001 f9a5 	bl	8001af4 <HAL_GPIO_ReadPin>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d008      	beq.n	80007c2 <HAL_TIM_PeriodElapsedCallback+0x52>
			set_handler_state(IDLE);
 80007b0:	2000      	movs	r0, #0
 80007b2:	f000 fbad 	bl	8000f10 <set_handler_state>
			HAL_TIM_Base_Stop_IT(&htim17);
 80007b6:	480a      	ldr	r0, [pc, #40]	@ (80007e0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80007b8:	f002 fc18 	bl	8002fec <HAL_TIM_Base_Stop_IT>
			flag = 1;
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 80007c2:	2110      	movs	r1, #16
 80007c4:	4804      	ldr	r0, [pc, #16]	@ (80007d8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80007c6:	f001 f9c5 	bl	8001b54 <HAL_GPIO_TogglePin>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200000f8 	.word	0x200000f8
 80007d8:	48000800 	.word	0x48000800
 80007dc:	20000191 	.word	0x20000191
 80007e0:	20000144 	.word	0x20000144
 80007e4:	20000190 	.word	0x20000190

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f000 fbeb 	bl	8000fc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f826 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f000 f928 	bl	8000a48 <MX_GPIO_Init>
  MX_DMA_Init();
 80007f8:	f000 f8fc 	bl	80009f4 <MX_DMA_Init>
  MX_SPI1_Init();
 80007fc:	f000 f86c 	bl	80008d8 <MX_SPI1_Init>
  MX_TIM16_Init();
 8000800:	f000 f8a8 	bl	8000954 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000804:	f000 f8ce 	bl	80009a4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  /****** Display ******/
  ST7735_Init(0);
 8000808:	2000      	movs	r0, #0
 800080a:	f7ff fe3b 	bl	8000484 <ST7735_Init>
  fillScreen(BLACK);
 800080e:	2000      	movs	r0, #0
 8000810:	f7ff fd1e 	bl	8000250 <fillScreen>

  /****** Timers ******/
  HAL_TIM_Base_Start_IT(&htim16); // Starte Timer 16 im Interrupt Modus
 8000814:	4809      	ldr	r0, [pc, #36]	@ (800083c <main+0x54>)
 8000816:	f002 fb71 	bl	8002efc <HAL_TIM_Base_Start_IT>

  /****** State Machine ******/
  set_handler_state(IDLE);
 800081a:	2000      	movs	r0, #0
 800081c:	f000 fb78 	bl	8000f10 <set_handler_state>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // StateMachine
	  handler_task();
 8000820:	f000 fb6a 	bl	8000ef8 <handler_task>
	  fillScreen(BLACK);
 8000824:	2000      	movs	r0, #0
 8000826:	f7ff fd13 	bl	8000250 <fillScreen>
	  HAL_Delay(100);
 800082a:	2064      	movs	r0, #100	@ 0x64
 800082c:	f000 fc3c 	bl	80010a8 <HAL_Delay>
	  fillScreen(GREEN);
 8000830:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000834:	f7ff fd0c 	bl	8000250 <fillScreen>
	  handler_task();
 8000838:	bf00      	nop
 800083a:	e7f1      	b.n	8000820 <main+0x38>
 800083c:	200000f8 	.word	0x200000f8

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	@ 0x50
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0318 	add.w	r3, r7, #24
 800084a:	2238      	movs	r2, #56	@ 0x38
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f002 fe6c 	bl	800352c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000862:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000866:	f001 f9a7 	bl	8001bb8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800086a:	2302      	movs	r3, #2
 800086c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000874:	2340      	movs	r3, #64	@ 0x40
 8000876:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000878:	2302      	movs	r3, #2
 800087a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800087c:	2302      	movs	r3, #2
 800087e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000880:	2304      	movs	r3, #4
 8000882:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000884:	234b      	movs	r3, #75	@ 0x4b
 8000886:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000888:	2302      	movs	r3, #2
 800088a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800088c:	2302      	movs	r3, #2
 800088e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000890:	2302      	movs	r3, #2
 8000892:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 0318 	add.w	r3, r7, #24
 8000898:	4618      	mov	r0, r3
 800089a:	f001 fa41 	bl	8001d20 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80008a4:	f000 f96a 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	230f      	movs	r3, #15
 80008aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ac:	2303      	movs	r3, #3
 80008ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2104      	movs	r1, #4
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 fd3f 	bl	8002344 <HAL_RCC_ClockConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80008cc:	f000 f956 	bl	8000b7c <Error_Handler>
  }
}
 80008d0:	bf00      	nop
 80008d2:	3750      	adds	r7, #80	@ 0x50
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	@ (800094c <MX_SPI1_Init+0x74>)
 80008de:	4a1c      	ldr	r2, [pc, #112]	@ (8000950 <MX_SPI1_Init+0x78>)
 80008e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <MX_SPI1_Init+0x74>)
 80008e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80008ea:	4b18      	ldr	r3, [pc, #96]	@ (800094c <MX_SPI1_Init+0x74>)
 80008ec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80008f0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f2:	4b16      	ldr	r3, [pc, #88]	@ (800094c <MX_SPI1_Init+0x74>)
 80008f4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80008f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_SPI1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <MX_SPI1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_SPI1_Init+0x74>)
 8000908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800090c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800090e:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_SPI1_Init+0x74>)
 8000910:	2210      	movs	r2, #16
 8000912:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000914:	4b0d      	ldr	r3, [pc, #52]	@ (800094c <MX_SPI1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800091a:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_SPI1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000920:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <MX_SPI1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_SPI1_Init+0x74>)
 8000928:	2207      	movs	r2, #7
 800092a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800092c:	4b07      	ldr	r3, [pc, #28]	@ (800094c <MX_SPI1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_SPI1_Init+0x74>)
 8000934:	2208      	movs	r2, #8
 8000936:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000938:	4804      	ldr	r0, [pc, #16]	@ (800094c <MX_SPI1_Init+0x74>)
 800093a:	f001 fee7 	bl	800270c <HAL_SPI_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000944:	f000 f91a 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000034 	.word	0x20000034
 8000950:	40013000 	.word	0x40013000

08000954 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000958:	4b10      	ldr	r3, [pc, #64]	@ (800099c <MX_TIM16_Init+0x48>)
 800095a:	4a11      	ldr	r2, [pc, #68]	@ (80009a0 <MX_TIM16_Init+0x4c>)
 800095c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 15000 - 1;
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_TIM16_Init+0x48>)
 8000960:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8000964:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000966:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <MX_TIM16_Init+0x48>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 800096c:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <MX_TIM16_Init+0x48>)
 800096e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000972:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_TIM16_Init+0x48>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <MX_TIM16_Init+0x48>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_TIM16_Init+0x48>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_TIM16_Init+0x48>)
 8000988:	f002 fa60 	bl	8002e4c <HAL_TIM_Base_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000992:	f000 f8f3 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000f8 	.word	0x200000f8
 80009a0:	40014400 	.word	0x40014400

080009a4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80009a8:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <MX_TIM17_Init+0x48>)
 80009aa:	4a11      	ldr	r2, [pc, #68]	@ (80009f0 <MX_TIM17_Init+0x4c>)
 80009ac:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 15000 - 1;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_TIM17_Init+0x48>)
 80009b0:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80009b4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b0d      	ldr	r3, [pc, #52]	@ (80009ec <MX_TIM17_Init+0x48>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000;
 80009bc:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <MX_TIM17_Init+0x48>)
 80009be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80009c2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c4:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <MX_TIM17_Init+0x48>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80009ca:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <MX_TIM17_Init+0x48>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <MX_TIM17_Init+0x48>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_TIM17_Init+0x48>)
 80009d8:	f002 fa38 	bl	8002e4c <HAL_TIM_Base_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80009e2:	f000 f8cb 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000144 	.word	0x20000144
 80009f0:	40014800 	.word	0x40014800

080009f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80009fa:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <MX_DMA_Init+0x50>)
 80009fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009fe:	4a11      	ldr	r2, [pc, #68]	@ (8000a44 <MX_DMA_Init+0x50>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a06:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <MX_DMA_Init+0x50>)
 8000a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a12:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <MX_DMA_Init+0x50>)
 8000a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a16:	4a0b      	ldr	r2, [pc, #44]	@ (8000a44 <MX_DMA_Init+0x50>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <MX_DMA_Init+0x50>)
 8000a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	200b      	movs	r0, #11
 8000a30:	f000 fc37 	bl	80012a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a34:	200b      	movs	r0, #11
 8000a36:	f000 fc4e 	bl	80012d6 <HAL_NVIC_EnableIRQ>

}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	@ 0x28
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	4b44      	ldr	r3, [pc, #272]	@ (8000b70 <MX_GPIO_Init+0x128>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	4a43      	ldr	r2, [pc, #268]	@ (8000b70 <MX_GPIO_Init+0x128>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6a:	4b41      	ldr	r3, [pc, #260]	@ (8000b70 <MX_GPIO_Init+0x128>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a76:	4b3e      	ldr	r3, [pc, #248]	@ (8000b70 <MX_GPIO_Init+0x128>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	4a3d      	ldr	r2, [pc, #244]	@ (8000b70 <MX_GPIO_Init+0x128>)
 8000a7c:	f043 0320 	orr.w	r3, r3, #32
 8000a80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a82:	4b3b      	ldr	r3, [pc, #236]	@ (8000b70 <MX_GPIO_Init+0x128>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a86:	f003 0320 	and.w	r3, r3, #32
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b38      	ldr	r3, [pc, #224]	@ (8000b70 <MX_GPIO_Init+0x128>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a92:	4a37      	ldr	r2, [pc, #220]	@ (8000b70 <MX_GPIO_Init+0x128>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a9a:	4b35      	ldr	r3, [pc, #212]	@ (8000b70 <MX_GPIO_Init+0x128>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b32      	ldr	r3, [pc, #200]	@ (8000b70 <MX_GPIO_Init+0x128>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aaa:	4a31      	ldr	r2, [pc, #196]	@ (8000b70 <MX_GPIO_Init+0x128>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8000b70 <MX_GPIO_Init+0x128>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2118      	movs	r1, #24
 8000ac2:	482c      	ldr	r0, [pc, #176]	@ (8000b74 <MX_GPIO_Init+0x12c>)
 8000ac4:	f001 f82e 	bl	8001b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f248 0160 	movw	r1, #32864	@ 0x8060
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad2:	f001 f827 	bl	8001b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000adc:	4826      	ldr	r0, [pc, #152]	@ (8000b78 <MX_GPIO_Init+0x130>)
 8000ade:	f001 f821 	bl	8001b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ae2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ae8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	481e      	ldr	r0, [pc, #120]	@ (8000b74 <MX_GPIO_Init+0x12c>)
 8000afa:	f000 fe79 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000afe:	2318      	movs	r3, #24
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4817      	ldr	r0, [pc, #92]	@ (8000b74 <MX_GPIO_Init+0x12c>)
 8000b16:	f000 fe6b 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8000b1a:	f248 0360 	movw	r3, #32864	@ 0x8060
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b36:	f000 fe5b 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4809      	ldr	r0, [pc, #36]	@ (8000b78 <MX_GPIO_Init+0x130>)
 8000b54:	f000 fe4c 	bl	80017f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2028      	movs	r0, #40	@ 0x28
 8000b5e:	f000 fba0 	bl	80012a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b62:	2028      	movs	r0, #40	@ 0x28
 8000b64:	f000 fbb7 	bl	80012d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	@ 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40021000 	.word	0x40021000
 8000b74:	48000800 	.word	0x48000800
 8000b78:	48000400 	.word	0x48000400

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <Error_Handler+0x8>

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b92:	4a0e      	ldr	r2, [pc, #56]	@ (8000bcc <HAL_MspInit+0x44>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <HAL_MspInit+0x44>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000baa:	4a08      	ldr	r2, [pc, #32]	@ (8000bcc <HAL_MspInit+0x44>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_MspInit+0x44>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bbe:	f001 f89f 	bl	8001d00 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a2b      	ldr	r2, [pc, #172]	@ (8000c9c <HAL_SPI_MspInit+0xcc>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d150      	bne.n	8000c94 <HAL_SPI_MspInit+0xc4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca0 <HAL_SPI_MspInit+0xd0>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8000ca0 <HAL_SPI_MspInit+0xd0>)
 8000bf8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bfc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bfe:	4b28      	ldr	r3, [pc, #160]	@ (8000ca0 <HAL_SPI_MspInit+0xd0>)
 8000c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	4b25      	ldr	r3, [pc, #148]	@ (8000ca0 <HAL_SPI_MspInit+0xd0>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0e:	4a24      	ldr	r2, [pc, #144]	@ (8000ca0 <HAL_SPI_MspInit+0xd0>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c16:	4b22      	ldr	r3, [pc, #136]	@ (8000ca0 <HAL_SPI_MspInit+0xd0>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000c22:	2328      	movs	r3, #40	@ 0x28
 8000c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c32:	2305      	movs	r3, #5
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4819      	ldr	r0, [pc, #100]	@ (8000ca4 <HAL_SPI_MspInit+0xd4>)
 8000c3e:	f000 fdd7 	bl	80017f0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8000c42:	4b19      	ldr	r3, [pc, #100]	@ (8000ca8 <HAL_SPI_MspInit+0xd8>)
 8000c44:	4a19      	ldr	r2, [pc, #100]	@ (8000cac <HAL_SPI_MspInit+0xdc>)
 8000c46:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000c48:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <HAL_SPI_MspInit+0xd8>)
 8000c4a:	220b      	movs	r2, #11
 8000c4c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ca8 <HAL_SPI_MspInit+0xd8>)
 8000c50:	2210      	movs	r2, #16
 8000c52:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c54:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <HAL_SPI_MspInit+0xd8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <HAL_SPI_MspInit+0xd8>)
 8000c5c:	2280      	movs	r2, #128	@ 0x80
 8000c5e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c60:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <HAL_SPI_MspInit+0xd8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c66:	4b10      	ldr	r3, [pc, #64]	@ (8000ca8 <HAL_SPI_MspInit+0xd8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <HAL_SPI_MspInit+0xd8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca8 <HAL_SPI_MspInit+0xd8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000c78:	480b      	ldr	r0, [pc, #44]	@ (8000ca8 <HAL_SPI_MspInit+0xd8>)
 8000c7a:	f000 fb47 	bl	800130c <HAL_DMA_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <HAL_SPI_MspInit+0xb8>
    {
      Error_Handler();
 8000c84:	f7ff ff7a 	bl	8000b7c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a07      	ldr	r2, [pc, #28]	@ (8000ca8 <HAL_SPI_MspInit+0xd8>)
 8000c8c:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c8e:	4a06      	ldr	r2, [pc, #24]	@ (8000ca8 <HAL_SPI_MspInit+0xd8>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	@ 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40013000 	.word	0x40013000
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	48000400 	.word	0x48000400
 8000ca8:	20000098 	.word	0x20000098
 8000cac:	40020008 	.word	0x40020008

08000cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8000d28 <HAL_TIM_Base_MspInit+0x78>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d114      	bne.n	8000cec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <HAL_TIM_Base_MspInit+0x7c>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc6:	4a19      	ldr	r2, [pc, #100]	@ (8000d2c <HAL_TIM_Base_MspInit+0x7c>)
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ccc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cce:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <HAL_TIM_Base_MspInit+0x7c>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2019      	movs	r0, #25
 8000ce0:	f000 fadf 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ce4:	2019      	movs	r0, #25
 8000ce6:	f000 faf6 	bl	80012d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000cea:	e018      	b.n	8000d1e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8000d30 <HAL_TIM_Base_MspInit+0x80>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d113      	bne.n	8000d1e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d2c <HAL_TIM_Base_MspInit+0x7c>)
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8000d2c <HAL_TIM_Base_MspInit+0x7c>)
 8000cfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d00:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d02:	4b0a      	ldr	r3, [pc, #40]	@ (8000d2c <HAL_TIM_Base_MspInit+0x7c>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	201a      	movs	r0, #26
 8000d14:	f000 fac5 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000d18:	201a      	movs	r0, #26
 8000d1a:	f000 fadc 	bl	80012d6 <HAL_NVIC_EnableIRQ>
}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40014400 	.word	0x40014400
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40014800 	.word	0x40014800

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <NMI_Handler+0x4>

08000d3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8a:	f000 f96f 	bl	800106c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000d98:	4802      	ldr	r0, [pc, #8]	@ (8000da4 <DMA1_Channel1_IRQHandler+0x10>)
 8000d9a:	f000 fbda 	bl	8001552 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000098 	.word	0x20000098

08000da8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000dac:	4802      	ldr	r0, [pc, #8]	@ (8000db8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000dae:	f002 f94c 	bl	800304a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200000f8 	.word	0x200000f8

08000dbc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000dc0:	4802      	ldr	r0, [pc, #8]	@ (8000dcc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000dc2:	f002 f942 	bl	800304a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000144 	.word	0x20000144

08000dd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000dd4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000dd8:	f000 fed6 	bl	8001b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <SystemInit+0x20>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dea:	4a05      	ldr	r2, [pc, #20]	@ (8000e00 <SystemInit+0x20>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <enter_handler_state>:
uint8_t handler_state;
uint8_t prev_handler_state;
uint16_t time_val = 0;

void enter_handler_state(int state)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
    switch(state){
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d01a      	beq.n	8000e48 <enter_handler_state+0x44>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	dc1b      	bgt.n	8000e50 <enter_handler_state+0x4c>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <enter_handler_state+0x22>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d00a      	beq.n	8000e3a <enter_handler_state+0x36>
        case LEDBLINK:
        	time_val = 0;
        break;
    //--------------------------------------------------------------------------------------
        default:
        break;
 8000e24:	e014      	b.n	8000e50 <enter_handler_state+0x4c>
        	HAL_GPIO_WritePin(LD2, LD2_PIN, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2120      	movs	r1, #32
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e2e:	f000 fe79 	bl	8001b24 <HAL_GPIO_WritePin>
        	handler_state = IDLE;
 8000e32:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <enter_handler_state+0x58>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
        break;
 8000e38:	e00b      	b.n	8000e52 <enter_handler_state+0x4e>
        	HAL_GPIO_WritePin(LD2, LD2_PIN, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2120      	movs	r1, #32
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e42:	f000 fe6f 	bl	8001b24 <HAL_GPIO_WritePin>
        break;
 8000e46:	e004      	b.n	8000e52 <enter_handler_state+0x4e>
        	time_val = 0;
 8000e48:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <enter_handler_state+0x5c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	801a      	strh	r2, [r3, #0]
        break;
 8000e4e:	e000      	b.n	8000e52 <enter_handler_state+0x4e>
        break;
 8000e50:	bf00      	nop
    //--------------------------------------------------------------------------------------
    }
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000191 	.word	0x20000191
 8000e60:	20000194 	.word	0x20000194

08000e64 <exec_handler_state>:

//-----------------------------------------------------------------------------------------------------------------------

void exec_handler_state(int state)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
    switch(state){
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d009      	beq.n	8000e86 <exec_handler_state+0x22>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	dc14      	bgt.n	8000ea2 <exec_handler_state+0x3e>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d013      	beq.n	8000ea6 <exec_handler_state+0x42>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d012      	beq.n	8000eaa <exec_handler_state+0x46>
				time_val = 0;
			}
        break;
      //--------------------------------------------------------------------------------------
      default:
      break;
 8000e84:	e00d      	b.n	8000ea2 <exec_handler_state+0x3e>
			if (time_val > 1000)
 8000e86:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <exec_handler_state+0x54>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e8e:	d90e      	bls.n	8000eae <exec_handler_state+0x4a>
				HAL_GPIO_TogglePin(LD2, LD2_PIN);
 8000e90:	2120      	movs	r1, #32
 8000e92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e96:	f000 fe5d 	bl	8001b54 <HAL_GPIO_TogglePin>
				time_val = 0;
 8000e9a:	4b07      	ldr	r3, [pc, #28]	@ (8000eb8 <exec_handler_state+0x54>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	801a      	strh	r2, [r3, #0]
        break;
 8000ea0:	e005      	b.n	8000eae <exec_handler_state+0x4a>
      break;
 8000ea2:	bf00      	nop
 8000ea4:	e004      	b.n	8000eb0 <exec_handler_state+0x4c>
        break;
 8000ea6:	bf00      	nop
 8000ea8:	e002      	b.n	8000eb0 <exec_handler_state+0x4c>
        break;
 8000eaa:	bf00      	nop
 8000eac:	e000      	b.n	8000eb0 <exec_handler_state+0x4c>
        break;
 8000eae:	bf00      	nop
      //--------------------------------------------------------------------------------------
    }
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000194 	.word	0x20000194

08000ebc <leave_handler_state>:

//-----------------------------------------------------------------------------------------------------------------------

void leave_handler_state(int state)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    switch(state){
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d009      	beq.n	8000ede <leave_handler_state+0x22>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	dc08      	bgt.n	8000ee2 <leave_handler_state+0x26>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d007      	beq.n	8000ee6 <leave_handler_state+0x2a>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d006      	beq.n	8000eea <leave_handler_state+0x2e>
    //--------------------------------------------------------------------------------------
        case LEDBLINK:
        break;
    //--------------------------------------------------------------------------------------
        default:
        break;
 8000edc:	e001      	b.n	8000ee2 <leave_handler_state+0x26>
        break;
 8000ede:	bf00      	nop
 8000ee0:	e004      	b.n	8000eec <leave_handler_state+0x30>
        break;
 8000ee2:	bf00      	nop
 8000ee4:	e002      	b.n	8000eec <leave_handler_state+0x30>
        break;
 8000ee6:	bf00      	nop
 8000ee8:	e000      	b.n	8000eec <leave_handler_state+0x30>
        break;
 8000eea:	bf00      	nop
    //--------------------------------------------------------------------------------------
    }
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <handler_task>:

//-----------------------------------------------------------------------------------------------------------------------

void handler_task(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
    exec_handler_state(handler_state);
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <handler_task+0x14>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ffaf 	bl	8000e64 <exec_handler_state>
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000191 	.word	0x20000191

08000f10 <set_handler_state>:

void set_handler_state(uint8_t state)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
    prev_handler_state = handler_state;
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <set_handler_state+0x34>)
 8000f1c:	781a      	ldrb	r2, [r3, #0]
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <set_handler_state+0x38>)
 8000f20:	701a      	strb	r2, [r3, #0]
    handler_state = state;
 8000f22:	4a08      	ldr	r2, [pc, #32]	@ (8000f44 <set_handler_state+0x34>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	7013      	strb	r3, [r2, #0]
    leave_handler_state(prev_handler_state);
 8000f28:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <set_handler_state+0x38>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ffc5 	bl	8000ebc <leave_handler_state>
    enter_handler_state(state);
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff65 	bl	8000e04 <enter_handler_state>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000191 	.word	0x20000191
 8000f48:	20000192 	.word	0x20000192

08000f4c <inc_handler_currentTime>:
    return handler_state;
}


void inc_handler_currentTime(uint16_t dT)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	80fb      	strh	r3, [r7, #6]
    time_val = time_val + dT;
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <inc_handler_currentTime+0x24>)
 8000f58:	881a      	ldrh	r2, [r3, #0]
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b03      	ldr	r3, [pc, #12]	@ (8000f70 <inc_handler_currentTime+0x24>)
 8000f62:	801a      	strh	r2, [r3, #0]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	20000194 	.word	0x20000194

08000f74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f74:	480d      	ldr	r0, [pc, #52]	@ (8000fac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f78:	f7ff ff32 	bl	8000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f7c:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f7e:	490d      	ldr	r1, [pc, #52]	@ (8000fb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f80:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb8 <LoopForever+0xe>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f84:	e002      	b.n	8000f8c <LoopCopyDataInit>

08000f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8a:	3304      	adds	r3, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f90:	d3f9      	bcc.n	8000f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f92:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f94:	4c0a      	ldr	r4, [pc, #40]	@ (8000fc0 <LoopForever+0x16>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f98:	e001      	b.n	8000f9e <LoopFillZerobss>

08000f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f9c:	3204      	adds	r2, #4

08000f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa0:	d3fb      	bcc.n	8000f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f002 facb 	bl	800353c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fa6:	f7ff fc1f 	bl	80007e8 <main>

08000faa <LoopForever>:

LoopForever:
    b LoopForever
 8000faa:	e7fe      	b.n	8000faa <LoopForever>
  ldr   r0, =_estack
 8000fac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fb8:	08003628 	.word	0x08003628
  ldr r2, =_sbss
 8000fbc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fc0:	2000019c 	.word	0x2000019c

08000fc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC1_2_IRQHandler>

08000fc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f95b 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fd6:	200f      	movs	r0, #15
 8000fd8:	f000 f80e 	bl	8000ff8 <HAL_InitTick>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	71fb      	strb	r3, [r7, #7]
 8000fe6:	e001      	b.n	8000fec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fe8:	f7ff fdce 	bl	8000b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fec:	79fb      	ldrb	r3, [r7, #7]

}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001004:	4b16      	ldr	r3, [pc, #88]	@ (8001060 <HAL_InitTick+0x68>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d022      	beq.n	8001052 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800100c:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <HAL_InitTick+0x6c>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b13      	ldr	r3, [pc, #76]	@ (8001060 <HAL_InitTick+0x68>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001018:	fbb1 f3f3 	udiv	r3, r1, r3
 800101c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f966 	bl	80012f2 <HAL_SYSTICK_Config>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10f      	bne.n	800104c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b0f      	cmp	r3, #15
 8001030:	d809      	bhi.n	8001046 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001032:	2200      	movs	r2, #0
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	f04f 30ff 	mov.w	r0, #4294967295
 800103a:	f000 f932 	bl	80012a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800103e:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <HAL_InitTick+0x70>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	e007      	b.n	8001056 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	73fb      	strb	r3, [r7, #15]
 800104a:	e004      	b.n	8001056 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	e001      	b.n	8001056 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001056:	7bfb      	ldrb	r3, [r7, #15]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000008 	.word	0x20000008
 8001064:	20000000 	.word	0x20000000
 8001068:	20000004 	.word	0x20000004

0800106c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001070:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <HAL_IncTick+0x1c>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b05      	ldr	r3, [pc, #20]	@ (800108c <HAL_IncTick+0x20>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4413      	add	r3, r2
 800107a:	4a03      	ldr	r2, [pc, #12]	@ (8001088 <HAL_IncTick+0x1c>)
 800107c:	6013      	str	r3, [r2, #0]
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	20000198 	.word	0x20000198
 800108c:	20000008 	.word	0x20000008

08001090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;
 8001094:	4b03      	ldr	r3, [pc, #12]	@ (80010a4 <HAL_GetTick+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000198 	.word	0x20000198

080010a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff ffee 	bl	8001090 <HAL_GetTick>
 80010b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c0:	d004      	beq.n	80010cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <HAL_Delay+0x40>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	4413      	add	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010cc:	bf00      	nop
 80010ce:	f7ff ffdf 	bl	8001090 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d8f7      	bhi.n	80010ce <HAL_Delay+0x26>
  {
  }
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000008 	.word	0x20000008

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	@ (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 021f 	and.w	r2, r3, #31
 8001168:	4907      	ldr	r1, [pc, #28]	@ (8001188 <__NVIC_EnableIRQ+0x38>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	@ (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	@ (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	@ 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	@ 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f7ff ff8e 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	@ (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff29 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012b0:	f7ff ff40 	bl	8001134 <__NVIC_GetPriorityGrouping>
 80012b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f7ff ff90 	bl	80011e0 <NVIC_EncodePriority>
 80012c0:	4602      	mov	r2, r0
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff5f 	bl	800118c <__NVIC_SetPriority>
}
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff33 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffa4 	bl	8001248 <SysTick_Config>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e08d      	b.n	800143a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	4b47      	ldr	r3, [pc, #284]	@ (8001444 <HAL_DMA_Init+0x138>)
 8001326:	429a      	cmp	r2, r3
 8001328:	d80f      	bhi.n	800134a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	4b45      	ldr	r3, [pc, #276]	@ (8001448 <HAL_DMA_Init+0x13c>)
 8001332:	4413      	add	r3, r2
 8001334:	4a45      	ldr	r2, [pc, #276]	@ (800144c <HAL_DMA_Init+0x140>)
 8001336:	fba2 2303 	umull	r2, r3, r2, r3
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	009a      	lsls	r2, r3, #2
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a42      	ldr	r2, [pc, #264]	@ (8001450 <HAL_DMA_Init+0x144>)
 8001346:	641a      	str	r2, [r3, #64]	@ 0x40
 8001348:	e00e      	b.n	8001368 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	4b40      	ldr	r3, [pc, #256]	@ (8001454 <HAL_DMA_Init+0x148>)
 8001352:	4413      	add	r3, r2
 8001354:	4a3d      	ldr	r2, [pc, #244]	@ (800144c <HAL_DMA_Init+0x140>)
 8001356:	fba2 2303 	umull	r2, r3, r2, r3
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	009a      	lsls	r2, r3, #2
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a3c      	ldr	r2, [pc, #240]	@ (8001458 <HAL_DMA_Init+0x14c>)
 8001366:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2202      	movs	r2, #2
 800136c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800137e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001382:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800138c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001398:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f9b6 	bl	800172c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80013c8:	d102      	bne.n	80013d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80013e4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d010      	beq.n	8001410 <HAL_DMA_Init+0x104>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d80c      	bhi.n	8001410 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 f9d6 	bl	80017a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	e008      	b.n	8001422 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40020407 	.word	0x40020407
 8001448:	bffdfff8 	.word	0xbffdfff8
 800144c:	cccccccd 	.word	0xcccccccd
 8001450:	40020000 	.word	0x40020000
 8001454:	bffdfbf8 	.word	0xbffdfbf8
 8001458:	40020400 	.word	0x40020400

0800145c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001474:	2b01      	cmp	r3, #1
 8001476:	d101      	bne.n	800147c <HAL_DMA_Start_IT+0x20>
 8001478:	2302      	movs	r3, #2
 800147a:	e066      	b.n	800154a <HAL_DMA_Start_IT+0xee>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b01      	cmp	r3, #1
 800148e:	d155      	bne.n	800153c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2202      	movs	r2, #2
 8001494:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2200      	movs	r2, #0
 800149c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0201 	bic.w	r2, r2, #1
 80014ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	68b9      	ldr	r1, [r7, #8]
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f000 f8fb 	bl	80016b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d008      	beq.n	80014d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f042 020e 	orr.w	r2, r2, #14
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	e00f      	b.n	80014f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0204 	bic.w	r2, r2, #4
 80014e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 020a 	orr.w	r2, r2, #10
 80014f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800150c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001510:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001516:	2b00      	cmp	r3, #0
 8001518:	d007      	beq.n	800152a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001524:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001528:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 0201 	orr.w	r2, r2, #1
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e005      	b.n	8001548 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001544:	2302      	movs	r3, #2
 8001546:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001548:	7dfb      	ldrb	r3, [r7, #23]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156e:	f003 031f 	and.w	r3, r3, #31
 8001572:	2204      	movs	r2, #4
 8001574:	409a      	lsls	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4013      	ands	r3, r2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d026      	beq.n	80015cc <HAL_DMA_IRQHandler+0x7a>
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d021      	beq.n	80015cc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0320 	and.w	r3, r3, #32
 8001592:	2b00      	cmp	r3, #0
 8001594:	d107      	bne.n	80015a6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0204 	bic.w	r2, r2, #4
 80015a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	f003 021f 	and.w	r2, r3, #31
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	2104      	movs	r1, #4
 80015b4:	fa01 f202 	lsl.w	r2, r1, r2
 80015b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d071      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80015ca:	e06c      	b.n	80016a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d0:	f003 031f 	and.w	r3, r3, #31
 80015d4:	2202      	movs	r2, #2
 80015d6:	409a      	lsls	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d02e      	beq.n	800163e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d029      	beq.n	800163e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0320 	and.w	r3, r3, #32
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10b      	bne.n	8001610 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 020a 	bic.w	r2, r2, #10
 8001606:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001614:	f003 021f 	and.w	r2, r3, #31
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161c:	2102      	movs	r1, #2
 800161e:	fa01 f202 	lsl.w	r2, r1, r2
 8001622:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001630:	2b00      	cmp	r3, #0
 8001632:	d038      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800163c:	e033      	b.n	80016a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001642:	f003 031f 	and.w	r3, r3, #31
 8001646:	2208      	movs	r2, #8
 8001648:	409a      	lsls	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4013      	ands	r3, r2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d02a      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b00      	cmp	r3, #0
 800165a:	d025      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 020e 	bic.w	r2, r2, #14
 800166a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001670:	f003 021f 	and.w	r2, r3, #31
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001678:	2101      	movs	r1, #1
 800167a:	fa01 f202 	lsl.w	r2, r1, r2
 800167e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800169a:	2b00      	cmp	r3, #0
 800169c:	d004      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80016a6:	bf00      	nop
 80016a8:	bf00      	nop
}
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80016c6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d004      	beq.n	80016da <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80016d8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	f003 021f 	and.w	r2, r3, #31
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	2101      	movs	r1, #1
 80016e8:	fa01 f202 	lsl.w	r2, r1, r2
 80016ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b10      	cmp	r3, #16
 80016fc:	d108      	bne.n	8001710 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800170e:	e007      	b.n	8001720 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	60da      	str	r2, [r3, #12]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800172c:	b480      	push	{r7}
 800172e:	b087      	sub	sp, #28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800173c:	429a      	cmp	r2, r3
 800173e:	d802      	bhi.n	8001746 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001740:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	e001      	b.n	800174a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001748:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	3b08      	subs	r3, #8
 8001756:	4a12      	ldr	r2, [pc, #72]	@ (80017a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001758:	fba2 2303 	umull	r2, r3, r2, r3
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	009a      	lsls	r2, r3, #2
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4413      	add	r3, r2
 800176c:	461a      	mov	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a0b      	ldr	r2, [pc, #44]	@ (80017a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001776:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 031f 	and.w	r3, r3, #31
 800177e:	2201      	movs	r2, #1
 8001780:	409a      	lsls	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001786:	bf00      	nop
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40020407 	.word	0x40020407
 8001798:	40020800 	.word	0x40020800
 800179c:	40020820 	.word	0x40020820
 80017a0:	cccccccd 	.word	0xcccccccd
 80017a4:	40020880 	.word	0x40020880

080017a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	461a      	mov	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a08      	ldr	r2, [pc, #32]	@ (80017ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017ca:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f003 031f 	and.w	r3, r3, #31
 80017d4:	2201      	movs	r2, #1
 80017d6:	409a      	lsls	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	1000823f 	.word	0x1000823f
 80017ec:	40020940 	.word	0x40020940

080017f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017fe:	e15a      	b.n	8001ab6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	2101      	movs	r1, #1
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 814c 	beq.w	8001ab0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b01      	cmp	r3, #1
 8001822:	d005      	beq.n	8001830 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800182c:	2b02      	cmp	r3, #2
 800182e:	d130      	bne.n	8001892 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001866:	2201      	movs	r2, #1
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	f003 0201 	and.w	r2, r3, #1
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b03      	cmp	r3, #3
 800189c:	d017      	beq.n	80018ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2203      	movs	r2, #3
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d123      	bne.n	8001922 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	08da      	lsrs	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3208      	adds	r2, #8
 80018e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	220f      	movs	r2, #15
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	691a      	ldr	r2, [r3, #16]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	08da      	lsrs	r2, r3, #3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3208      	adds	r2, #8
 800191c:	6939      	ldr	r1, [r7, #16]
 800191e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	2203      	movs	r2, #3
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0203 	and.w	r2, r3, #3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 80a6 	beq.w	8001ab0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001964:	4b5b      	ldr	r3, [pc, #364]	@ (8001ad4 <HAL_GPIO_Init+0x2e4>)
 8001966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001968:	4a5a      	ldr	r2, [pc, #360]	@ (8001ad4 <HAL_GPIO_Init+0x2e4>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001970:	4b58      	ldr	r3, [pc, #352]	@ (8001ad4 <HAL_GPIO_Init+0x2e4>)
 8001972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197c:	4a56      	ldr	r2, [pc, #344]	@ (8001ad8 <HAL_GPIO_Init+0x2e8>)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	3302      	adds	r3, #2
 8001984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019a6:	d01f      	beq.n	80019e8 <HAL_GPIO_Init+0x1f8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a4c      	ldr	r2, [pc, #304]	@ (8001adc <HAL_GPIO_Init+0x2ec>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d019      	beq.n	80019e4 <HAL_GPIO_Init+0x1f4>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a4b      	ldr	r2, [pc, #300]	@ (8001ae0 <HAL_GPIO_Init+0x2f0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d013      	beq.n	80019e0 <HAL_GPIO_Init+0x1f0>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a4a      	ldr	r2, [pc, #296]	@ (8001ae4 <HAL_GPIO_Init+0x2f4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d00d      	beq.n	80019dc <HAL_GPIO_Init+0x1ec>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a49      	ldr	r2, [pc, #292]	@ (8001ae8 <HAL_GPIO_Init+0x2f8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d007      	beq.n	80019d8 <HAL_GPIO_Init+0x1e8>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a48      	ldr	r2, [pc, #288]	@ (8001aec <HAL_GPIO_Init+0x2fc>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d101      	bne.n	80019d4 <HAL_GPIO_Init+0x1e4>
 80019d0:	2305      	movs	r3, #5
 80019d2:	e00a      	b.n	80019ea <HAL_GPIO_Init+0x1fa>
 80019d4:	2306      	movs	r3, #6
 80019d6:	e008      	b.n	80019ea <HAL_GPIO_Init+0x1fa>
 80019d8:	2304      	movs	r3, #4
 80019da:	e006      	b.n	80019ea <HAL_GPIO_Init+0x1fa>
 80019dc:	2303      	movs	r3, #3
 80019de:	e004      	b.n	80019ea <HAL_GPIO_Init+0x1fa>
 80019e0:	2302      	movs	r3, #2
 80019e2:	e002      	b.n	80019ea <HAL_GPIO_Init+0x1fa>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <HAL_GPIO_Init+0x1fa>
 80019e8:	2300      	movs	r3, #0
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	f002 0203 	and.w	r2, r2, #3
 80019f0:	0092      	lsls	r2, r2, #2
 80019f2:	4093      	lsls	r3, r2
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019fa:	4937      	ldr	r1, [pc, #220]	@ (8001ad8 <HAL_GPIO_Init+0x2e8>)
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	089b      	lsrs	r3, r3, #2
 8001a00:	3302      	adds	r3, #2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a08:	4b39      	ldr	r3, [pc, #228]	@ (8001af0 <HAL_GPIO_Init+0x300>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a2c:	4a30      	ldr	r2, [pc, #192]	@ (8001af0 <HAL_GPIO_Init+0x300>)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a32:	4b2f      	ldr	r3, [pc, #188]	@ (8001af0 <HAL_GPIO_Init+0x300>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a56:	4a26      	ldr	r2, [pc, #152]	@ (8001af0 <HAL_GPIO_Init+0x300>)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a5c:	4b24      	ldr	r3, [pc, #144]	@ (8001af0 <HAL_GPIO_Init+0x300>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a80:	4a1b      	ldr	r2, [pc, #108]	@ (8001af0 <HAL_GPIO_Init+0x300>)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <HAL_GPIO_Init+0x300>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aaa:	4a11      	ldr	r2, [pc, #68]	@ (8001af0 <HAL_GPIO_Init+0x300>)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f47f ae9d 	bne.w	8001800 <HAL_GPIO_Init+0x10>
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	bf00      	nop
 8001aca:	371c      	adds	r7, #28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40010000 	.word	0x40010000
 8001adc:	48000400 	.word	0x48000400
 8001ae0:	48000800 	.word	0x48000800
 8001ae4:	48000c00 	.word	0x48000c00
 8001ae8:	48001000 	.word	0x48001000
 8001aec:	48001400 	.word	0x48001400
 8001af0:	40010400 	.word	0x40010400

08001af4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	887b      	ldrh	r3, [r7, #2]
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	e001      	b.n	8001b16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
 8001b30:	4613      	mov	r3, r2
 8001b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b34:	787b      	ldrb	r3, [r7, #1]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b3a:	887a      	ldrh	r2, [r7, #2]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b40:	e002      	b.n	8001b48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b42:	887a      	ldrh	r2, [r7, #2]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b66:	887a      	ldrh	r2, [r7, #2]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	041a      	lsls	r2, r3, #16
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	43d9      	mvns	r1, r3
 8001b72:	887b      	ldrh	r3, [r7, #2]
 8001b74:	400b      	ands	r3, r1
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	619a      	str	r2, [r3, #24]
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b92:	4b08      	ldr	r3, [pc, #32]	@ (8001bb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d006      	beq.n	8001bac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b9e:	4a05      	ldr	r2, [pc, #20]	@ (8001bb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fda8 	bl	80006fc <HAL_GPIO_EXTI_Callback>
  }
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40010400 	.word	0x40010400

08001bb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d141      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bc6:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bd2:	d131      	bne.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bd4:	4b47      	ldr	r3, [pc, #284]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bda:	4a46      	ldr	r2, [pc, #280]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001be0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be4:	4b43      	ldr	r3, [pc, #268]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bec:	4a41      	ldr	r2, [pc, #260]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bf2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bf4:	4b40      	ldr	r3, [pc, #256]	@ (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2232      	movs	r2, #50	@ 0x32
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	4a3f      	ldr	r2, [pc, #252]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c00:	fba2 2303 	umull	r2, r3, r2, r3
 8001c04:	0c9b      	lsrs	r3, r3, #18
 8001c06:	3301      	adds	r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c0a:	e002      	b.n	8001c12 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c12:	4b38      	ldr	r3, [pc, #224]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c1e:	d102      	bne.n	8001c26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f2      	bne.n	8001c0c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c26:	4b33      	ldr	r3, [pc, #204]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c32:	d158      	bne.n	8001ce6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e057      	b.n	8001ce8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c38:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c48:	e04d      	b.n	8001ce6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c50:	d141      	bne.n	8001cd6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c52:	4b28      	ldr	r3, [pc, #160]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c5e:	d131      	bne.n	8001cc4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c60:	4b24      	ldr	r3, [pc, #144]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c66:	4a23      	ldr	r2, [pc, #140]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c70:	4b20      	ldr	r3, [pc, #128]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c78:	4a1e      	ldr	r2, [pc, #120]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c80:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2232      	movs	r2, #50	@ 0x32
 8001c86:	fb02 f303 	mul.w	r3, r2, r3
 8001c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c90:	0c9b      	lsrs	r3, r3, #18
 8001c92:	3301      	adds	r3, #1
 8001c94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c96:	e002      	b.n	8001c9e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c9e:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001caa:	d102      	bne.n	8001cb2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f2      	bne.n	8001c98 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cb2:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cbe:	d112      	bne.n	8001ce6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e011      	b.n	8001ce8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cca:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001cd4:	e007      	b.n	8001ce6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cd6:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cde:	4a05      	ldr	r2, [pc, #20]	@ (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ce4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	40007000 	.word	0x40007000
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	431bde83 	.word	0x431bde83

08001d00 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d04:	4b05      	ldr	r3, [pc, #20]	@ (8001d1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	4a04      	ldr	r2, [pc, #16]	@ (8001d1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d0e:	6093      	str	r3, [r2, #8]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40007000 	.word	0x40007000

08001d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e2fe      	b.n	8002330 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d075      	beq.n	8001e2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d3e:	4b97      	ldr	r3, [pc, #604]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d48:	4b94      	ldr	r3, [pc, #592]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	2b0c      	cmp	r3, #12
 8001d56:	d102      	bne.n	8001d5e <HAL_RCC_OscConfig+0x3e>
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d002      	beq.n	8001d64 <HAL_RCC_OscConfig+0x44>
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d10b      	bne.n	8001d7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	4b8d      	ldr	r3, [pc, #564]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d05b      	beq.n	8001e28 <HAL_RCC_OscConfig+0x108>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d157      	bne.n	8001e28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e2d9      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d84:	d106      	bne.n	8001d94 <HAL_RCC_OscConfig+0x74>
 8001d86:	4b85      	ldr	r3, [pc, #532]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a84      	ldr	r2, [pc, #528]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	e01d      	b.n	8001dd0 <HAL_RCC_OscConfig+0xb0>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x98>
 8001d9e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a7e      	ldr	r2, [pc, #504]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001da4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	4b7c      	ldr	r3, [pc, #496]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a7b      	ldr	r2, [pc, #492]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e00b      	b.n	8001dd0 <HAL_RCC_OscConfig+0xb0>
 8001db8:	4b78      	ldr	r3, [pc, #480]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a77      	ldr	r2, [pc, #476]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b75      	ldr	r3, [pc, #468]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a74      	ldr	r2, [pc, #464]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001dca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d013      	beq.n	8001e00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7ff f95a 	bl	8001090 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de0:	f7ff f956 	bl	8001090 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	@ 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e29e      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df2:	4b6a      	ldr	r3, [pc, #424]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0xc0>
 8001dfe:	e014      	b.n	8001e2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff f946 	bl	8001090 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e08:	f7ff f942 	bl	8001090 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b64      	cmp	r3, #100	@ 0x64
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e28a      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e1a:	4b60      	ldr	r3, [pc, #384]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0xe8>
 8001e26:	e000      	b.n	8001e2a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d075      	beq.n	8001f22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e36:	4b59      	ldr	r3, [pc, #356]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e40:	4b56      	ldr	r3, [pc, #344]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	2b0c      	cmp	r3, #12
 8001e4e:	d102      	bne.n	8001e56 <HAL_RCC_OscConfig+0x136>
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d002      	beq.n	8001e5c <HAL_RCC_OscConfig+0x13c>
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d11f      	bne.n	8001e9c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e5c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_OscConfig+0x154>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e25d      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e74:	4b49      	ldr	r3, [pc, #292]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	061b      	lsls	r3, r3, #24
 8001e82:	4946      	ldr	r1, [pc, #280]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e88:	4b45      	ldr	r3, [pc, #276]	@ (8001fa0 <HAL_RCC_OscConfig+0x280>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff f8b3 	bl	8000ff8 <HAL_InitTick>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d043      	beq.n	8001f20 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e249      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d023      	beq.n	8001eec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea4:	4b3d      	ldr	r3, [pc, #244]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a3c      	ldr	r2, [pc, #240]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001eaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f8ee 	bl	8001090 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb8:	f7ff f8ea 	bl	8001090 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e232      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eca:	4b34      	ldr	r3, [pc, #208]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed6:	4b31      	ldr	r3, [pc, #196]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	061b      	lsls	r3, r3, #24
 8001ee4:	492d      	ldr	r1, [pc, #180]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
 8001eea:	e01a      	b.n	8001f22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eec:	4b2b      	ldr	r3, [pc, #172]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001ef2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7ff f8ca 	bl	8001090 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f00:	f7ff f8c6 	bl	8001090 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e20e      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f12:	4b22      	ldr	r3, [pc, #136]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x1e0>
 8001f1e:	e000      	b.n	8001f22 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d041      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d01c      	beq.n	8001f70 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f36:	4b19      	ldr	r3, [pc, #100]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f3c:	4a17      	ldr	r2, [pc, #92]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f46:	f7ff f8a3 	bl	8001090 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4e:	f7ff f89f 	bl	8001090 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e1e7      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f60:	4b0e      	ldr	r3, [pc, #56]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0ef      	beq.n	8001f4e <HAL_RCC_OscConfig+0x22e>
 8001f6e:	e020      	b.n	8001fb2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f70:	4b0a      	ldr	r3, [pc, #40]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f76:	4a09      	ldr	r2, [pc, #36]	@ (8001f9c <HAL_RCC_OscConfig+0x27c>)
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f80:	f7ff f886 	bl	8001090 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f86:	e00d      	b.n	8001fa4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f88:	f7ff f882 	bl	8001090 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d906      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e1ca      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa4:	4b8c      	ldr	r3, [pc, #560]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8001fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1ea      	bne.n	8001f88 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80a6 	beq.w	800210c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fc4:	4b84      	ldr	r3, [pc, #528]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x2b4>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2b6>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00d      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	4b7f      	ldr	r3, [pc, #508]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fde:	4a7e      	ldr	r2, [pc, #504]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fe6:	4b7c      	ldr	r3, [pc, #496]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff6:	4b79      	ldr	r3, [pc, #484]	@ (80021dc <HAL_RCC_OscConfig+0x4bc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d118      	bne.n	8002034 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002002:	4b76      	ldr	r3, [pc, #472]	@ (80021dc <HAL_RCC_OscConfig+0x4bc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a75      	ldr	r2, [pc, #468]	@ (80021dc <HAL_RCC_OscConfig+0x4bc>)
 8002008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800200c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200e:	f7ff f83f 	bl	8001090 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002016:	f7ff f83b 	bl	8001090 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e183      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002028:	4b6c      	ldr	r3, [pc, #432]	@ (80021dc <HAL_RCC_OscConfig+0x4bc>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d108      	bne.n	800204e <HAL_RCC_OscConfig+0x32e>
 800203c:	4b66      	ldr	r3, [pc, #408]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002042:	4a65      	ldr	r2, [pc, #404]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800204c:	e024      	b.n	8002098 <HAL_RCC_OscConfig+0x378>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b05      	cmp	r3, #5
 8002054:	d110      	bne.n	8002078 <HAL_RCC_OscConfig+0x358>
 8002056:	4b60      	ldr	r3, [pc, #384]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205c:	4a5e      	ldr	r2, [pc, #376]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 800205e:	f043 0304 	orr.w	r3, r3, #4
 8002062:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002066:	4b5c      	ldr	r3, [pc, #368]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206c:	4a5a      	ldr	r2, [pc, #360]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002076:	e00f      	b.n	8002098 <HAL_RCC_OscConfig+0x378>
 8002078:	4b57      	ldr	r3, [pc, #348]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207e:	4a56      	ldr	r2, [pc, #344]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002088:	4b53      	ldr	r3, [pc, #332]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208e:	4a52      	ldr	r2, [pc, #328]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002090:	f023 0304 	bic.w	r3, r3, #4
 8002094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d016      	beq.n	80020ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7fe fff6 	bl	8001090 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a6:	e00a      	b.n	80020be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a8:	f7fe fff2 	bl	8001090 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e138      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020be:	4b46      	ldr	r3, [pc, #280]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0ed      	beq.n	80020a8 <HAL_RCC_OscConfig+0x388>
 80020cc:	e015      	b.n	80020fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ce:	f7fe ffdf 	bl	8001090 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d4:	e00a      	b.n	80020ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d6:	f7fe ffdb 	bl	8001090 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e121      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ec:	4b3a      	ldr	r3, [pc, #232]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 80020ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1ed      	bne.n	80020d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020fa:	7ffb      	ldrb	r3, [r7, #31]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d105      	bne.n	800210c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002100:	4b35      	ldr	r3, [pc, #212]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002104:	4a34      	ldr	r2, [pc, #208]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002106:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800210a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b00      	cmp	r3, #0
 8002116:	d03c      	beq.n	8002192 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01c      	beq.n	800215a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002120:	4b2d      	ldr	r3, [pc, #180]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002122:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002126:	4a2c      	ldr	r2, [pc, #176]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002130:	f7fe ffae 	bl	8001090 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002138:	f7fe ffaa 	bl	8001090 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e0f2      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800214a:	4b23      	ldr	r3, [pc, #140]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 800214c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0ef      	beq.n	8002138 <HAL_RCC_OscConfig+0x418>
 8002158:	e01b      	b.n	8002192 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800215a:	4b1f      	ldr	r3, [pc, #124]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 800215c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002160:	4a1d      	ldr	r2, [pc, #116]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002162:	f023 0301 	bic.w	r3, r3, #1
 8002166:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216a:	f7fe ff91 	bl	8001090 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002172:	f7fe ff8d 	bl	8001090 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e0d5      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002184:	4b14      	ldr	r3, [pc, #80]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 8002186:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1ef      	bne.n	8002172 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 80c9 	beq.w	800232e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800219c:	4b0e      	ldr	r3, [pc, #56]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b0c      	cmp	r3, #12
 80021a6:	f000 8083 	beq.w	80022b0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d15e      	bne.n	8002270 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b2:	4b09      	ldr	r3, [pc, #36]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a08      	ldr	r2, [pc, #32]	@ (80021d8 <HAL_RCC_OscConfig+0x4b8>)
 80021b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021be:	f7fe ff67 	bl	8001090 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c4:	e00c      	b.n	80021e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c6:	f7fe ff63 	bl	8001090 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d905      	bls.n	80021e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e0ab      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e0:	4b55      	ldr	r3, [pc, #340]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1ec      	bne.n	80021c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ec:	4b52      	ldr	r3, [pc, #328]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	4b52      	ldr	r3, [pc, #328]	@ (800233c <HAL_RCC_OscConfig+0x61c>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6a11      	ldr	r1, [r2, #32]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021fc:	3a01      	subs	r2, #1
 80021fe:	0112      	lsls	r2, r2, #4
 8002200:	4311      	orrs	r1, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002206:	0212      	lsls	r2, r2, #8
 8002208:	4311      	orrs	r1, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800220e:	0852      	lsrs	r2, r2, #1
 8002210:	3a01      	subs	r2, #1
 8002212:	0552      	lsls	r2, r2, #21
 8002214:	4311      	orrs	r1, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800221a:	0852      	lsrs	r2, r2, #1
 800221c:	3a01      	subs	r2, #1
 800221e:	0652      	lsls	r2, r2, #25
 8002220:	4311      	orrs	r1, r2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002226:	06d2      	lsls	r2, r2, #27
 8002228:	430a      	orrs	r2, r1
 800222a:	4943      	ldr	r1, [pc, #268]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 800222c:	4313      	orrs	r3, r2
 800222e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002230:	4b41      	ldr	r3, [pc, #260]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a40      	ldr	r2, [pc, #256]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002236:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800223a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800223c:	4b3e      	ldr	r3, [pc, #248]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a3d      	ldr	r2, [pc, #244]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002242:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002246:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7fe ff22 	bl	8001090 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002250:	f7fe ff1e 	bl	8001090 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e066      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002262:	4b35      	ldr	r3, [pc, #212]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x530>
 800226e:	e05e      	b.n	800232e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002270:	4b31      	ldr	r3, [pc, #196]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a30      	ldr	r2, [pc, #192]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002276:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800227a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe ff08 	bl	8001090 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002284:	f7fe ff04 	bl	8001090 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e04c      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002296:	4b28      	ldr	r3, [pc, #160]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80022a2:	4b25      	ldr	r3, [pc, #148]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	4924      	ldr	r1, [pc, #144]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80022a8:	4b25      	ldr	r3, [pc, #148]	@ (8002340 <HAL_RCC_OscConfig+0x620>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	60cb      	str	r3, [r1, #12]
 80022ae:	e03e      	b.n	800232e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e039      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80022bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f003 0203 	and.w	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d12c      	bne.n	800232a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022da:	3b01      	subs	r3, #1
 80022dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d123      	bne.n	800232a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d11b      	bne.n	800232a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d113      	bne.n	800232a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230c:	085b      	lsrs	r3, r3, #1
 800230e:	3b01      	subs	r3, #1
 8002310:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d109      	bne.n	800232a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002320:	085b      	lsrs	r3, r3, #1
 8002322:	3b01      	subs	r3, #1
 8002324:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	019f800c 	.word	0x019f800c
 8002340:	feeefffc 	.word	0xfeeefffc

08002344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e11e      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800235c:	4b91      	ldr	r3, [pc, #580]	@ (80025a4 <HAL_RCC_ClockConfig+0x260>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d910      	bls.n	800238c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b8e      	ldr	r3, [pc, #568]	@ (80025a4 <HAL_RCC_ClockConfig+0x260>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 020f 	bic.w	r2, r3, #15
 8002372:	498c      	ldr	r1, [pc, #560]	@ (80025a4 <HAL_RCC_ClockConfig+0x260>)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237a:	4b8a      	ldr	r3, [pc, #552]	@ (80025a4 <HAL_RCC_ClockConfig+0x260>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d001      	beq.n	800238c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e106      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d073      	beq.n	8002480 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b03      	cmp	r3, #3
 800239e:	d129      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a0:	4b81      	ldr	r3, [pc, #516]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0f4      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023b0:	f000 f966 	bl	8002680 <RCC_GetSysClockFreqFromPLLSource>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4a7c      	ldr	r2, [pc, #496]	@ (80025ac <HAL_RCC_ClockConfig+0x268>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d93f      	bls.n	800243e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023be:	4b7a      	ldr	r3, [pc, #488]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d033      	beq.n	800243e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d12f      	bne.n	800243e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023de:	4b72      	ldr	r3, [pc, #456]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023e6:	4a70      	ldr	r2, [pc, #448]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80023e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023ee:	2380      	movs	r3, #128	@ 0x80
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	e024      	b.n	800243e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d107      	bne.n	800240c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023fc:	4b6a      	ldr	r3, [pc, #424]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d109      	bne.n	800241c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0c6      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800240c:	4b66      	ldr	r3, [pc, #408]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0be      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800241c:	f000 f8ce 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8002420:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4a61      	ldr	r2, [pc, #388]	@ (80025ac <HAL_RCC_ClockConfig+0x268>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d909      	bls.n	800243e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800242a:	4b5f      	ldr	r3, [pc, #380]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002432:	4a5d      	ldr	r2, [pc, #372]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 8002434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002438:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800243a:	2380      	movs	r3, #128	@ 0x80
 800243c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800243e:	4b5a      	ldr	r3, [pc, #360]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f023 0203 	bic.w	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4957      	ldr	r1, [pc, #348]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800244c:	4313      	orrs	r3, r2
 800244e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002450:	f7fe fe1e 	bl	8001090 <HAL_GetTick>
 8002454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	e00a      	b.n	800246e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002458:	f7fe fe1a 	bl	8001090 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e095      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	4b4e      	ldr	r3, [pc, #312]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 020c 	and.w	r2, r3, #12
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	429a      	cmp	r2, r3
 800247e:	d1eb      	bne.n	8002458 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d023      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002498:	4b43      	ldr	r3, [pc, #268]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a42      	ldr	r2, [pc, #264]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800249e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024b0:	4b3d      	ldr	r3, [pc, #244]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80024b8:	4a3b      	ldr	r2, [pc, #236]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80024ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c0:	4b39      	ldr	r3, [pc, #228]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4936      	ldr	r1, [pc, #216]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	608b      	str	r3, [r1, #8]
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b80      	cmp	r3, #128	@ 0x80
 80024d8:	d105      	bne.n	80024e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024da:	4b33      	ldr	r3, [pc, #204]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	4a32      	ldr	r2, [pc, #200]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 80024e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e6:	4b2f      	ldr	r3, [pc, #188]	@ (80025a4 <HAL_RCC_ClockConfig+0x260>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d21d      	bcs.n	8002530 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f4:	4b2b      	ldr	r3, [pc, #172]	@ (80025a4 <HAL_RCC_ClockConfig+0x260>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f023 020f 	bic.w	r2, r3, #15
 80024fc:	4929      	ldr	r1, [pc, #164]	@ (80025a4 <HAL_RCC_ClockConfig+0x260>)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002504:	f7fe fdc4 	bl	8001090 <HAL_GetTick>
 8002508:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	e00a      	b.n	8002522 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250c:	f7fe fdc0 	bl	8001090 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e03b      	b.n	800259a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b20      	ldr	r3, [pc, #128]	@ (80025a4 <HAL_RCC_ClockConfig+0x260>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d1ed      	bne.n	800250c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800253c:	4b1a      	ldr	r3, [pc, #104]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4917      	ldr	r1, [pc, #92]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800255a:	4b13      	ldr	r3, [pc, #76]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	490f      	ldr	r1, [pc, #60]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800256e:	f000 f825 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8002572:	4602      	mov	r2, r0
 8002574:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <HAL_RCC_ClockConfig+0x264>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	490c      	ldr	r1, [pc, #48]	@ (80025b0 <HAL_RCC_ClockConfig+0x26c>)
 8002580:	5ccb      	ldrb	r3, [r1, r3]
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	fa22 f303 	lsr.w	r3, r2, r3
 800258a:	4a0a      	ldr	r2, [pc, #40]	@ (80025b4 <HAL_RCC_ClockConfig+0x270>)
 800258c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800258e:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <HAL_RCC_ClockConfig+0x274>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fd30 	bl	8000ff8 <HAL_InitTick>
 8002598:	4603      	mov	r3, r0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	04c4b400 	.word	0x04c4b400
 80025b0:	08003610 	.word	0x08003610
 80025b4:	20000000 	.word	0x20000000
 80025b8:	20000004 	.word	0x20000004

080025bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d102      	bne.n	80025d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002678 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	e047      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025d4:	4b27      	ldr	r3, [pc, #156]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d102      	bne.n	80025e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025e0:	4b26      	ldr	r3, [pc, #152]	@ (800267c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	e03e      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025e6:	4b23      	ldr	r3, [pc, #140]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b0c      	cmp	r3, #12
 80025f0:	d136      	bne.n	8002660 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025f2:	4b20      	ldr	r3, [pc, #128]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	3301      	adds	r3, #1
 8002608:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d10c      	bne.n	800262a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002610:	4a1a      	ldr	r2, [pc, #104]	@ (800267c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	fbb2 f3f3 	udiv	r3, r2, r3
 8002618:	4a16      	ldr	r2, [pc, #88]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 800261a:	68d2      	ldr	r2, [r2, #12]
 800261c:	0a12      	lsrs	r2, r2, #8
 800261e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	617b      	str	r3, [r7, #20]
      break;
 8002628:	e00c      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800262a:	4a13      	ldr	r2, [pc, #76]	@ (8002678 <HAL_RCC_GetSysClockFreq+0xbc>)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002632:	4a10      	ldr	r2, [pc, #64]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002634:	68d2      	ldr	r2, [r2, #12]
 8002636:	0a12      	lsrs	r2, r2, #8
 8002638:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800263c:	fb02 f303 	mul.w	r3, r2, r3
 8002640:	617b      	str	r3, [r7, #20]
      break;
 8002642:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002644:	4b0b      	ldr	r3, [pc, #44]	@ (8002674 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	0e5b      	lsrs	r3, r3, #25
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	3301      	adds	r3, #1
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	fbb2 f3f3 	udiv	r3, r2, r3
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	e001      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002664:	693b      	ldr	r3, [r7, #16]
}
 8002666:	4618      	mov	r0, r3
 8002668:	371c      	adds	r7, #28
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000
 8002678:	00f42400 	.word	0x00f42400
 800267c:	02dc6c00 	.word	0x02dc6c00

08002680 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002686:	4b1e      	ldr	r3, [pc, #120]	@ (8002700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002690:	4b1b      	ldr	r3, [pc, #108]	@ (8002700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	3301      	adds	r3, #1
 800269c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d10c      	bne.n	80026be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026a4:	4a17      	ldr	r2, [pc, #92]	@ (8002704 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	4a14      	ldr	r2, [pc, #80]	@ (8002700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ae:	68d2      	ldr	r2, [r2, #12]
 80026b0:	0a12      	lsrs	r2, r2, #8
 80026b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026b6:	fb02 f303 	mul.w	r3, r2, r3
 80026ba:	617b      	str	r3, [r7, #20]
    break;
 80026bc:	e00c      	b.n	80026d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026be:	4a12      	ldr	r2, [pc, #72]	@ (8002708 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026c8:	68d2      	ldr	r2, [r2, #12]
 80026ca:	0a12      	lsrs	r2, r2, #8
 80026cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	617b      	str	r3, [r7, #20]
    break;
 80026d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026d8:	4b09      	ldr	r3, [pc, #36]	@ (8002700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	0e5b      	lsrs	r3, r3, #25
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	3301      	adds	r3, #1
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80026f2:	687b      	ldr	r3, [r7, #4]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	371c      	adds	r7, #28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	40021000 	.word	0x40021000
 8002704:	02dc6c00 	.word	0x02dc6c00
 8002708:	00f42400 	.word	0x00f42400

0800270c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e09d      	b.n	800285a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	2b00      	cmp	r3, #0
 8002724:	d108      	bne.n	8002738 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800272e:	d009      	beq.n	8002744 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
 8002736:	e005      	b.n	8002744 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe fa36 	bl	8000bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800277a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002784:	d902      	bls.n	800278c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	e002      	b.n	8002792 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800278c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002790:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800279a:	d007      	beq.n	80027ac <HAL_SPI_Init+0xa0>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80027a4:	d002      	beq.n	80027ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ee:	ea42 0103 	orr.w	r1, r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	0c1b      	lsrs	r3, r3, #16
 8002808:	f003 0204 	and.w	r2, r3, #4
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002810:	f003 0310 	and.w	r3, r3, #16
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002828:	ea42 0103 	orr.w	r1, r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	69da      	ldr	r2, [r3, #28]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002848:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	4613      	mov	r3, r2
 8002870:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_SPI_Transmit_DMA+0x20>
 8002880:	2302      	movs	r3, #2
 8002882:	e0d4      	b.n	8002a2e <HAL_SPI_Transmit_DMA+0x1ca>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b01      	cmp	r3, #1
 8002896:	d002      	beq.n	800289e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002898:	2302      	movs	r3, #2
 800289a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800289c:	e0c2      	b.n	8002a24 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_SPI_Transmit_DMA+0x46>
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d102      	bne.n	80028b0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028ae:	e0b9      	b.n	8002a24 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2203      	movs	r2, #3
 80028b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	88fa      	ldrh	r2, [r7, #6]
 80028c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	88fa      	ldrh	r2, [r7, #6]
 80028ce:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028fa:	d10f      	bne.n	800291c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800290a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800291a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002920:	4a45      	ldr	r2, [pc, #276]	@ (8002a38 <HAL_SPI_Transmit_DMA+0x1d4>)
 8002922:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002928:	4a44      	ldr	r2, [pc, #272]	@ (8002a3c <HAL_SPI_Transmit_DMA+0x1d8>)
 800292a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002930:	4a43      	ldr	r2, [pc, #268]	@ (8002a40 <HAL_SPI_Transmit_DMA+0x1dc>)
 8002932:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002938:	2200      	movs	r2, #0
 800293a:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800294a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002954:	d82d      	bhi.n	80029b2 <HAL_SPI_Transmit_DMA+0x14e>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002960:	d127      	bne.n	80029b2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002966:	b29b      	uxth	r3, r3
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10f      	bne.n	8002990 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800297e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002984:	b29b      	uxth	r3, r3
 8002986:	085b      	lsrs	r3, r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800298e:	e010      	b.n	80029b2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800299e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	085b      	lsrs	r3, r3, #1
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3301      	adds	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ba:	4619      	mov	r1, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	330c      	adds	r3, #12
 80029c2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029c8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80029ca:	f7fe fd47 	bl	800145c <HAL_DMA_Start_IT>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d8:	f043 0210 	orr.w	r2, r3, #16
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	75fb      	strb	r3, [r7, #23]

    goto error;
 80029e4:	e01e      	b.n	8002a24 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f0:	2b40      	cmp	r3, #64	@ 0x40
 80029f2:	d007      	beq.n	8002a04 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a02:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0220 	orr.w	r2, r2, #32
 8002a12:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0202 	orr.w	r2, r2, #2
 8002a22:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	08002b27 	.word	0x08002b27
 8002a3c:	08002a81 	.word	0x08002a81
 8002a40:	08002b43 	.word	0x08002b43

08002a44 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a8e:	f7fe faff 	bl	8001090 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	d03b      	beq.n	8002b1a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0220 	bic.w	r2, r2, #32
 8002ab0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0202 	bic.w	r2, r2, #2
 8002ac0:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	2164      	movs	r1, #100	@ 0x64
 8002ac6:	6978      	ldr	r0, [r7, #20]
 8002ac8:	f000 f97a 	bl	8002dc0 <SPI_EndRxTxTransaction>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ad6:	f043 0220 	orr.w	r2, r3, #32
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10a      	bne.n	8002afc <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2200      	movs	r2, #0
 8002b00:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002b12:	6978      	ldr	r0, [r7, #20]
 8002b14:	f7ff ffaa 	bl	8002a6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002b18:	e002      	b.n	8002b20 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002b1a:	6978      	ldr	r0, [r7, #20]
 8002b1c:	f7ff ff92 	bl	8002a44 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f7ff ff8f 	bl	8002a58 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b3a:	bf00      	nop
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0203 	bic.w	r2, r2, #3
 8002b5e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b64:	f043 0210 	orr.w	r2, r3, #16
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f7ff ff79 	bl	8002a6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	4613      	mov	r3, r2
 8002b92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b94:	f7fe fa7c 	bl	8001090 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ba4:	f7fe fa74 	bl	8001090 <HAL_GetTick>
 8002ba8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002baa:	4b39      	ldr	r3, [pc, #228]	@ (8002c90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	015b      	lsls	r3, r3, #5
 8002bb0:	0d1b      	lsrs	r3, r3, #20
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	fb02 f303 	mul.w	r3, r2, r3
 8002bb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bba:	e054      	b.n	8002c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc2:	d050      	beq.n	8002c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bc4:	f7fe fa64 	bl	8001090 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	69fa      	ldr	r2, [r7, #28]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d902      	bls.n	8002bda <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d13d      	bne.n	8002c56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002be8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bf2:	d111      	bne.n	8002c18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bfc:	d004      	beq.n	8002c08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c06:	d107      	bne.n	8002c18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c20:	d10f      	bne.n	8002c42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e017      	b.n	8002c86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	bf0c      	ite	eq
 8002c76:	2301      	moveq	r3, #1
 8002c78:	2300      	movne	r3, #0
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d19b      	bne.n	8002bbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3720      	adds	r7, #32
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000000 	.word	0x20000000

08002c94 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08a      	sub	sp, #40	@ 0x28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002ca6:	f7fe f9f3 	bl	8001090 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002cb6:	f7fe f9eb 	bl	8001090 <HAL_GetTick>
 8002cba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	330c      	adds	r3, #12
 8002cc2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002cc4:	4b3d      	ldr	r3, [pc, #244]	@ (8002dbc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00da      	lsls	r2, r3, #3
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	0d1b      	lsrs	r3, r3, #20
 8002cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd6:	fb02 f303 	mul.w	r3, r2, r3
 8002cda:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002cdc:	e060      	b.n	8002da0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002ce4:	d107      	bne.n	8002cf6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d104      	bne.n	8002cf6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfc:	d050      	beq.n	8002da0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002cfe:	f7fe f9c7 	bl	8001090 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d902      	bls.n	8002d14 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d13d      	bne.n	8002d90 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d2c:	d111      	bne.n	8002d52 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d36:	d004      	beq.n	8002d42 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d40:	d107      	bne.n	8002d52 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d5a:	d10f      	bne.n	8002d7c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e010      	b.n	8002db2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	4013      	ands	r3, r2
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d196      	bne.n	8002cde <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3728      	adds	r7, #40	@ 0x28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000000 	.word	0x20000000

08002dc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f7ff ff5b 	bl	8002c94 <SPI_WaitFifoStateUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de8:	f043 0220 	orr.w	r2, r3, #32
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e027      	b.n	8002e44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2180      	movs	r1, #128	@ 0x80
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f7ff fec0 	bl	8002b84 <SPI_WaitFlagStateUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d007      	beq.n	8002e1a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e0e:	f043 0220 	orr.w	r2, r3, #32
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e014      	b.n	8002e44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f7ff ff34 	bl	8002c94 <SPI_WaitFifoStateUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d007      	beq.n	8002e42 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e36:	f043 0220 	orr.w	r2, r3, #32
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e000      	b.n	8002e44 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e049      	b.n	8002ef2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fd ff1c 	bl	8000cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3304      	adds	r3, #4
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f000 fa54 	bl	8003338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d001      	beq.n	8002f14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e054      	b.n	8002fbe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a26      	ldr	r2, [pc, #152]	@ (8002fcc <HAL_TIM_Base_Start_IT+0xd0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d022      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x80>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f3e:	d01d      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x80>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a22      	ldr	r2, [pc, #136]	@ (8002fd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d018      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x80>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a21      	ldr	r2, [pc, #132]	@ (8002fd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d013      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x80>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a1f      	ldr	r2, [pc, #124]	@ (8002fd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00e      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x80>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a1e      	ldr	r2, [pc, #120]	@ (8002fdc <HAL_TIM_Base_Start_IT+0xe0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d009      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x80>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe0 <HAL_TIM_Base_Start_IT+0xe4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d004      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x80>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d115      	bne.n	8002fa8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	4b19      	ldr	r3, [pc, #100]	@ (8002fe8 <HAL_TIM_Base_Start_IT+0xec>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b06      	cmp	r3, #6
 8002f8c:	d015      	beq.n	8002fba <HAL_TIM_Base_Start_IT+0xbe>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f94:	d011      	beq.n	8002fba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0201 	orr.w	r2, r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa6:	e008      	b.n	8002fba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	e000      	b.n	8002fbc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40012c00 	.word	0x40012c00
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40000800 	.word	0x40000800
 8002fd8:	40000c00 	.word	0x40000c00
 8002fdc:	40013400 	.word	0x40013400
 8002fe0:	40014000 	.word	0x40014000
 8002fe4:	40015000 	.word	0x40015000
 8002fe8:	00010007 	.word	0x00010007

08002fec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6a1a      	ldr	r2, [r3, #32]
 800300a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10f      	bne.n	8003034 <HAL_TIM_Base_Stop_IT+0x48>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6a1a      	ldr	r2, [r3, #32]
 800301a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d107      	bne.n	8003034 <HAL_TIM_Base_Stop_IT+0x48>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d020      	beq.n	80030ae <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01b      	beq.n	80030ae <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f06f 0202 	mvn.w	r2, #2
 800307e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f931 	bl	80032fc <HAL_TIM_IC_CaptureCallback>
 800309a:	e005      	b.n	80030a8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f923 	bl	80032e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f934 	bl	8003310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d020      	beq.n	80030fa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d01b      	beq.n	80030fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f06f 0204 	mvn.w	r2, #4
 80030ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f90b 	bl	80032fc <HAL_TIM_IC_CaptureCallback>
 80030e6:	e005      	b.n	80030f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f8fd 	bl	80032e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f90e 	bl	8003310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d020      	beq.n	8003146 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01b      	beq.n	8003146 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f06f 0208 	mvn.w	r2, #8
 8003116:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2204      	movs	r2, #4
 800311c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f8e5 	bl	80032fc <HAL_TIM_IC_CaptureCallback>
 8003132:	e005      	b.n	8003140 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f8d7 	bl	80032e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f8e8 	bl	8003310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b00      	cmp	r3, #0
 800314e:	d020      	beq.n	8003192 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	2b00      	cmp	r3, #0
 8003158:	d01b      	beq.n	8003192 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f06f 0210 	mvn.w	r2, #16
 8003162:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2208      	movs	r2, #8
 8003168:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f8bf 	bl	80032fc <HAL_TIM_IC_CaptureCallback>
 800317e:	e005      	b.n	800318c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f8b1 	bl	80032e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f8c2 	bl	8003310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00c      	beq.n	80031b6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f06f 0201 	mvn.w	r2, #1
 80031ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7fd fadd 	bl	8000770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d104      	bne.n	80031ca <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00c      	beq.n	80031e4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80031dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f968 	bl	80034b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00c      	beq.n	8003208 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d007      	beq.n	8003208 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f960 	bl	80034c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00c      	beq.n	800322c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003218:	2b00      	cmp	r3, #0
 800321a:	d007      	beq.n	800322c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f87c 	bl	8003324 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00c      	beq.n	8003250 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	2b00      	cmp	r3, #0
 800323e:	d007      	beq.n	8003250 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0220 	mvn.w	r2, #32
 8003248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f928 	bl	80034a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00c      	beq.n	8003274 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d007      	beq.n	8003274 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800326c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f934 	bl	80034dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00c      	beq.n	8003298 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d007      	beq.n	8003298 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f92c 	bl	80034f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00c      	beq.n	80032bc <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d007      	beq.n	80032bc <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80032b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f924 	bl	8003504 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00c      	beq.n	80032e0 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d007      	beq.n	80032e0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80032d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f91c 	bl	8003518 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032e0:	bf00      	nop
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a4c      	ldr	r2, [pc, #304]	@ (800347c <TIM_Base_SetConfig+0x144>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d017      	beq.n	8003380 <TIM_Base_SetConfig+0x48>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003356:	d013      	beq.n	8003380 <TIM_Base_SetConfig+0x48>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a49      	ldr	r2, [pc, #292]	@ (8003480 <TIM_Base_SetConfig+0x148>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00f      	beq.n	8003380 <TIM_Base_SetConfig+0x48>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a48      	ldr	r2, [pc, #288]	@ (8003484 <TIM_Base_SetConfig+0x14c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00b      	beq.n	8003380 <TIM_Base_SetConfig+0x48>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a47      	ldr	r2, [pc, #284]	@ (8003488 <TIM_Base_SetConfig+0x150>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d007      	beq.n	8003380 <TIM_Base_SetConfig+0x48>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a46      	ldr	r2, [pc, #280]	@ (800348c <TIM_Base_SetConfig+0x154>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d003      	beq.n	8003380 <TIM_Base_SetConfig+0x48>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a45      	ldr	r2, [pc, #276]	@ (8003490 <TIM_Base_SetConfig+0x158>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d108      	bne.n	8003392 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a39      	ldr	r2, [pc, #228]	@ (800347c <TIM_Base_SetConfig+0x144>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d023      	beq.n	80033e2 <TIM_Base_SetConfig+0xaa>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a0:	d01f      	beq.n	80033e2 <TIM_Base_SetConfig+0xaa>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a36      	ldr	r2, [pc, #216]	@ (8003480 <TIM_Base_SetConfig+0x148>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01b      	beq.n	80033e2 <TIM_Base_SetConfig+0xaa>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a35      	ldr	r2, [pc, #212]	@ (8003484 <TIM_Base_SetConfig+0x14c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d017      	beq.n	80033e2 <TIM_Base_SetConfig+0xaa>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a34      	ldr	r2, [pc, #208]	@ (8003488 <TIM_Base_SetConfig+0x150>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <TIM_Base_SetConfig+0xaa>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a33      	ldr	r2, [pc, #204]	@ (800348c <TIM_Base_SetConfig+0x154>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00f      	beq.n	80033e2 <TIM_Base_SetConfig+0xaa>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a33      	ldr	r2, [pc, #204]	@ (8003494 <TIM_Base_SetConfig+0x15c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00b      	beq.n	80033e2 <TIM_Base_SetConfig+0xaa>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a32      	ldr	r2, [pc, #200]	@ (8003498 <TIM_Base_SetConfig+0x160>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d007      	beq.n	80033e2 <TIM_Base_SetConfig+0xaa>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a31      	ldr	r2, [pc, #196]	@ (800349c <TIM_Base_SetConfig+0x164>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d003      	beq.n	80033e2 <TIM_Base_SetConfig+0xaa>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003490 <TIM_Base_SetConfig+0x158>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d108      	bne.n	80033f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a18      	ldr	r2, [pc, #96]	@ (800347c <TIM_Base_SetConfig+0x144>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d013      	beq.n	8003448 <TIM_Base_SetConfig+0x110>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a1a      	ldr	r2, [pc, #104]	@ (800348c <TIM_Base_SetConfig+0x154>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d00f      	beq.n	8003448 <TIM_Base_SetConfig+0x110>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a1a      	ldr	r2, [pc, #104]	@ (8003494 <TIM_Base_SetConfig+0x15c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00b      	beq.n	8003448 <TIM_Base_SetConfig+0x110>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a19      	ldr	r2, [pc, #100]	@ (8003498 <TIM_Base_SetConfig+0x160>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d007      	beq.n	8003448 <TIM_Base_SetConfig+0x110>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a18      	ldr	r2, [pc, #96]	@ (800349c <TIM_Base_SetConfig+0x164>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d003      	beq.n	8003448 <TIM_Base_SetConfig+0x110>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a13      	ldr	r2, [pc, #76]	@ (8003490 <TIM_Base_SetConfig+0x158>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d103      	bne.n	8003450 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d105      	bne.n	800346e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f023 0201 	bic.w	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	611a      	str	r2, [r3, #16]
  }
}
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40012c00 	.word	0x40012c00
 8003480:	40000400 	.word	0x40000400
 8003484:	40000800 	.word	0x40000800
 8003488:	40000c00 	.word	0x40000c00
 800348c:	40013400 	.word	0x40013400
 8003490:	40015000 	.word	0x40015000
 8003494:	40014000 	.word	0x40014000
 8003498:	40014400 	.word	0x40014400
 800349c:	40014800 	.word	0x40014800

080034a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <memset>:
 800352c:	4402      	add	r2, r0
 800352e:	4603      	mov	r3, r0
 8003530:	4293      	cmp	r3, r2
 8003532:	d100      	bne.n	8003536 <memset+0xa>
 8003534:	4770      	bx	lr
 8003536:	f803 1b01 	strb.w	r1, [r3], #1
 800353a:	e7f9      	b.n	8003530 <memset+0x4>

0800353c <__libc_init_array>:
 800353c:	b570      	push	{r4, r5, r6, lr}
 800353e:	4d0d      	ldr	r5, [pc, #52]	@ (8003574 <__libc_init_array+0x38>)
 8003540:	4c0d      	ldr	r4, [pc, #52]	@ (8003578 <__libc_init_array+0x3c>)
 8003542:	1b64      	subs	r4, r4, r5
 8003544:	10a4      	asrs	r4, r4, #2
 8003546:	2600      	movs	r6, #0
 8003548:	42a6      	cmp	r6, r4
 800354a:	d109      	bne.n	8003560 <__libc_init_array+0x24>
 800354c:	4d0b      	ldr	r5, [pc, #44]	@ (800357c <__libc_init_array+0x40>)
 800354e:	4c0c      	ldr	r4, [pc, #48]	@ (8003580 <__libc_init_array+0x44>)
 8003550:	f000 f818 	bl	8003584 <_init>
 8003554:	1b64      	subs	r4, r4, r5
 8003556:	10a4      	asrs	r4, r4, #2
 8003558:	2600      	movs	r6, #0
 800355a:	42a6      	cmp	r6, r4
 800355c:	d105      	bne.n	800356a <__libc_init_array+0x2e>
 800355e:	bd70      	pop	{r4, r5, r6, pc}
 8003560:	f855 3b04 	ldr.w	r3, [r5], #4
 8003564:	4798      	blx	r3
 8003566:	3601      	adds	r6, #1
 8003568:	e7ee      	b.n	8003548 <__libc_init_array+0xc>
 800356a:	f855 3b04 	ldr.w	r3, [r5], #4
 800356e:	4798      	blx	r3
 8003570:	3601      	adds	r6, #1
 8003572:	e7f2      	b.n	800355a <__libc_init_array+0x1e>
 8003574:	08003620 	.word	0x08003620
 8003578:	08003620 	.word	0x08003620
 800357c:	08003620 	.word	0x08003620
 8003580:	08003624 	.word	0x08003624

08003584 <_init>:
 8003584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003586:	bf00      	nop
 8003588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358a:	bc08      	pop	{r3}
 800358c:	469e      	mov	lr, r3
 800358e:	4770      	bx	lr

08003590 <_fini>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	bf00      	nop
 8003594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003596:	bc08      	pop	{r3}
 8003598:	469e      	mov	lr, r3
 800359a:	4770      	bx	lr
