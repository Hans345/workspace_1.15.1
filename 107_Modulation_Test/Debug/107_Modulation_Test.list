
107_Modulation_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6ac  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fd8  0800c890  0800c890  0000d890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d868  0800d868  0000f1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d868  0800d868  0000e868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d870  0800d870  0000f1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d870  0800d870  0000e870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d874  0800d874  0000e874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d878  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000630  200001e8  0800da60  0000f1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000818  0800da60  0000f818  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c713  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a2  00000000  00000000  0002b92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001978  00000000  00000000  0002efd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013ce  00000000  00000000  00030948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a9f3  00000000  00000000  00031d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dd82  00000000  00000000  0005c709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117dc4  00000000  00000000  0007a48b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019224f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008080  00000000  00000000  00192294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0019a314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c874 	.word	0x0800c874

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800c874 	.word	0x0800c874

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
 8000f92:	460b      	mov	r3, r1
 8000f94:	80bb      	strh	r3, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	88b9      	ldrh	r1, [r7, #4]
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fab5 	bl	8001510 <ST7735_DrawPixel>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000fae:	b590      	push	{r4, r7, lr}
 8000fb0:	b085      	sub	sp, #20
 8000fb2:	af02      	add	r7, sp, #8
 8000fb4:	4604      	mov	r4, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4611      	mov	r1, r2
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4623      	mov	r3, r4
 8000fbe:	80fb      	strh	r3, [r7, #6]
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	80bb      	strh	r3, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000fcc:	88f8      	ldrh	r0, [r7, #6]
 8000fce:	88b9      	ldrh	r1, [r7, #4]
 8000fd0:	887a      	ldrh	r2, [r7, #2]
 8000fd2:	883c      	ldrh	r4, [r7, #0]
 8000fd4:	8b3b      	ldrh	r3, [r7, #24]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4623      	mov	r3, r4
 8000fda:	f000 fba3 	bl	8001724 <ST7735_FillRectangle>
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}

08000fe6 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	80fb      	strh	r3, [r7, #6]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	80bb      	strh	r3, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8000ff8:	887a      	ldrh	r2, [r7, #2]
 8000ffa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ffc0 	bl	8000f88 <drawPixel>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b089      	sub	sp, #36	@ 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	4604      	mov	r4, r0
 8001018:	4608      	mov	r0, r1
 800101a:	4611      	mov	r1, r2
 800101c:	461a      	mov	r2, r3
 800101e:	4623      	mov	r3, r4
 8001020:	80fb      	strh	r3, [r7, #6]
 8001022:	4603      	mov	r3, r0
 8001024:	80bb      	strh	r3, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]
 800102a:	4613      	mov	r3, r2
 800102c:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800102e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001032:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800103c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001040:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001048:	1acb      	subs	r3, r1, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	bfb8      	it	lt
 800104e:	425b      	neglt	r3, r3
 8001050:	429a      	cmp	r2, r3
 8001052:	bfcc      	ite	gt
 8001054:	2301      	movgt	r3, #1
 8001056:	2300      	movle	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	837b      	strh	r3, [r7, #26]
    if (steep) {
 800105c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00b      	beq.n	800107c <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	833b      	strh	r3, [r7, #24]
 8001068:	88bb      	ldrh	r3, [r7, #4]
 800106a:	80fb      	strh	r3, [r7, #6]
 800106c:	8b3b      	ldrh	r3, [r7, #24]
 800106e:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	82fb      	strh	r3, [r7, #22]
 8001074:	883b      	ldrh	r3, [r7, #0]
 8001076:	807b      	strh	r3, [r7, #2]
 8001078:	8afb      	ldrh	r3, [r7, #22]
 800107a:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 800107c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001080:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001084:	429a      	cmp	r2, r3
 8001086:	dd0b      	ble.n	80010a0 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	82bb      	strh	r3, [r7, #20]
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	80fb      	strh	r3, [r7, #6]
 8001090:	8abb      	ldrh	r3, [r7, #20]
 8001092:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8001094:	88bb      	ldrh	r3, [r7, #4]
 8001096:	827b      	strh	r3, [r7, #18]
 8001098:	883b      	ldrh	r3, [r7, #0]
 800109a:	80bb      	strh	r3, [r7, #4]
 800109c:	8a7b      	ldrh	r3, [r7, #18]
 800109e:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80010a0:	887a      	ldrh	r2, [r7, #2]
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 80010aa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80010ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bfb8      	it	lt
 80010b8:	425b      	neglt	r3, r3
 80010ba:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 80010bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010c0:	0fda      	lsrs	r2, r3, #31
 80010c2:	4413      	add	r3, r2
 80010c4:	105b      	asrs	r3, r3, #1
 80010c6:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 80010c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80010cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	da02      	bge.n	80010da <writeLine+0xca>
        ystep = 1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	83bb      	strh	r3, [r7, #28]
 80010d8:	e031      	b.n	800113e <writeLine+0x12e>
    } else {
        ystep = -1;
 80010da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010de:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 80010e0:	e02d      	b.n	800113e <writeLine+0x12e>
        if (steep) {
 80010e2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d008      	beq.n	80010fc <writeLine+0xec>
            writePixel(y0, x0, color);
 80010ea:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80010ec:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80010f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff76 	bl	8000fe6 <writePixel>
 80010fa:	e007      	b.n	800110c <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 80010fc:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80010fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff6d 	bl	8000fe6 <writePixel>
        }
        err -= dy;
 800110c:	8bfa      	ldrh	r2, [r7, #30]
 800110e:	89fb      	ldrh	r3, [r7, #14]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	b29b      	uxth	r3, r3
 8001114:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 8001116:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800111a:	2b00      	cmp	r3, #0
 800111c:	da09      	bge.n	8001132 <writeLine+0x122>
            y0 += ystep;
 800111e:	88ba      	ldrh	r2, [r7, #4]
 8001120:	8bbb      	ldrh	r3, [r7, #28]
 8001122:	4413      	add	r3, r2
 8001124:	b29b      	uxth	r3, r3
 8001126:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8001128:	8bfa      	ldrh	r2, [r7, #30]
 800112a:	8a3b      	ldrh	r3, [r7, #16]
 800112c:	4413      	add	r3, r2
 800112e:	b29b      	uxth	r3, r3
 8001130:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 8001132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001136:	b29b      	uxth	r3, r3
 8001138:	3301      	adds	r3, #1
 800113a:	b29b      	uxth	r3, r3
 800113c:	80fb      	strh	r3, [r7, #6]
 800113e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001142:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001146:	429a      	cmp	r2, r3
 8001148:	ddcb      	ble.n	80010e2 <writeLine+0xd2>
        }
    }
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	3724      	adds	r7, #36	@ 0x24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd90      	pop	{r4, r7, pc}

08001154 <drawFastHLine>:
void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
	writeLine(x, y, x, y + h - 1, color);
}
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b085      	sub	sp, #20
 8001158:	af02      	add	r7, sp, #8
 800115a:	4604      	mov	r4, r0
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4623      	mov	r3, r4
 8001164:	80fb      	strh	r3, [r7, #6]
 8001166:	4603      	mov	r3, r0
 8001168:	80bb      	strh	r3, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	807b      	strh	r3, [r7, #2]
 800116e:	4613      	mov	r3, r2
 8001170:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 8001172:	88fa      	ldrh	r2, [r7, #6]
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	4413      	add	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	3b01      	subs	r3, #1
 800117c:	b29b      	uxth	r3, r3
 800117e:	b21a      	sxth	r2, r3
 8001180:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001184:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001188:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800118c:	883b      	ldrh	r3, [r7, #0]
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	4623      	mov	r3, r4
 8001192:	f7ff ff3d 	bl	8001010 <writeLine>
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bd90      	pop	{r4, r7, pc}
	...

080011a0 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <fillScreen+0x2c>)
 80011ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011b0:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <fillScreen+0x30>)
 80011b2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	460b      	mov	r3, r1
 80011bc:	2100      	movs	r1, #0
 80011be:	2000      	movs	r0, #0
 80011c0:	f7ff fef5 	bl	8000fae <fillRect>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000204 	.word	0x20000204
 80011d0:	20000206 	.word	0x20000206

080011d4 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e2:	f003 ffbf 	bl	8005164 <HAL_GPIO_WritePin>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}

080011ea <ST7735_Unselect>:

void ST7735_Unselect()
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f8:	f003 ffb4 	bl	8005164 <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <ST7735_Reset>:

void ST7735_Reset()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2140      	movs	r1, #64	@ 0x40
 8001208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120c:	f003 ffaa 	bl	8005164 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001210:	2005      	movs	r0, #5
 8001212:	f001 ff1d 	bl	8003050 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8001216:	2201      	movs	r2, #1
 8001218:	2140      	movs	r1, #64	@ 0x40
 800121a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800121e:	f003 ffa1 	bl	8005164 <HAL_GPIO_WritePin>
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001238:	4806      	ldr	r0, [pc, #24]	@ (8001254 <ST7735_WriteCommand+0x2c>)
 800123a:	f003 ff93 	bl	8005164 <HAL_GPIO_WritePin>
		{

		}
	#endif
	#ifdef WITHOUT_DMA
		HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800123e:	1df9      	adds	r1, r7, #7
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	2201      	movs	r2, #1
 8001246:	4804      	ldr	r0, [pc, #16]	@ (8001258 <ST7735_WriteCommand+0x30>)
 8001248:	f005 f8b1 	bl	80063ae <HAL_SPI_Transmit>
	#endif
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	48000400 	.word	0x48000400
 8001258:	200003a8 	.word	0x200003a8

0800125c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001266:	2201      	movs	r2, #1
 8001268:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800126c:	4807      	ldr	r0, [pc, #28]	@ (800128c <ST7735_WriteData+0x30>)
 800126e:	f003 ff79 	bl	8005164 <HAL_GPIO_WritePin>
    	{

    	}
	#endif
	#ifdef WITHOUT_DMA
    	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b29a      	uxth	r2, r3
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4804      	ldr	r0, [pc, #16]	@ (8001290 <ST7735_WriteData+0x34>)
 800127e:	f005 f896 	bl	80063ae <HAL_SPI_Transmit>
	#endif
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	48000400 	.word	0x48000400
 8001290:	200003a8 	.word	0x200003a8

08001294 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80012a6:	e034      	b.n	8001312 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80012b2:	7afb      	ldrb	r3, [r7, #11]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ffb7 	bl	8001228 <ST7735_WriteCommand>

        numArgs = *addr++;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	1c5a      	adds	r2, r3, #1
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80012c4:	7abb      	ldrb	r3, [r7, #10]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012cc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80012ce:	7abb      	ldrb	r3, [r7, #10]
 80012d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012d4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80012d6:	7abb      	ldrb	r3, [r7, #10]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80012dc:	7abb      	ldrb	r3, [r7, #10]
 80012de:	4619      	mov	r1, r3
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ffbb 	bl	800125c <ST7735_WriteData>
            addr += numArgs;
 80012e6:	7abb      	ldrb	r3, [r7, #10]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80012ee:	89bb      	ldrh	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00e      	beq.n	8001312 <DisplayInit+0x7e>
            ms = *addr++;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80012fe:	89bb      	ldrh	r3, [r7, #12]
 8001300:	2bff      	cmp	r3, #255	@ 0xff
 8001302:	d102      	bne.n	800130a <DisplayInit+0x76>
 8001304:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001308:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800130a:	89bb      	ldrh	r3, [r7, #12]
 800130c:	4618      	mov	r0, r3
 800130e:	f001 fe9f 	bl	8003050 <HAL_Delay>
    while(numCommands--) {
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	1e5a      	subs	r2, r3, #1
 8001316:	73fa      	strb	r2, [r7, #15]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1c5      	bne.n	80012a8 <DisplayInit+0x14>
        }
    }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	4604      	mov	r4, r0
 8001330:	4608      	mov	r0, r1
 8001332:	4611      	mov	r1, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4623      	mov	r3, r4
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	4603      	mov	r3, r0
 800133c:	71bb      	strb	r3, [r7, #6]
 800133e:	460b      	mov	r3, r1
 8001340:	717b      	strb	r3, [r7, #5]
 8001342:	4613      	mov	r3, r2
 8001344:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001346:	202a      	movs	r0, #42	@ 0x2a
 8001348:	f7ff ff6e 	bl	8001228 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800134c:	2300      	movs	r3, #0
 800134e:	733b      	strb	r3, [r7, #12]
 8001350:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <ST7735_SetAddressWindow+0x88>)
 8001352:	781a      	ldrb	r2, [r3, #0]
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4413      	add	r3, r2
 8001358:	b2db      	uxtb	r3, r3
 800135a:	737b      	strb	r3, [r7, #13]
 800135c:	2300      	movs	r3, #0
 800135e:	73bb      	strb	r3, [r7, #14]
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <ST7735_SetAddressWindow+0x88>)
 8001362:	781a      	ldrb	r2, [r3, #0]
 8001364:	797b      	ldrb	r3, [r7, #5]
 8001366:	4413      	add	r3, r2
 8001368:	b2db      	uxtb	r3, r3
 800136a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2104      	movs	r1, #4
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff72 	bl	800125c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001378:	202b      	movs	r0, #43	@ 0x2b
 800137a:	f7ff ff55 	bl	8001228 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800137e:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <ST7735_SetAddressWindow+0x8c>)
 8001380:	781a      	ldrb	r2, [r3, #0]
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	4413      	add	r3, r2
 8001386:	b2db      	uxtb	r3, r3
 8001388:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800138a:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <ST7735_SetAddressWindow+0x8c>)
 800138c:	781a      	ldrb	r2, [r3, #0]
 800138e:	793b      	ldrb	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	b2db      	uxtb	r3, r3
 8001394:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2104      	movs	r1, #4
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff5d 	bl	800125c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80013a2:	202c      	movs	r0, #44	@ 0x2c
 80013a4:	f7ff ff40 	bl	8001228 <ST7735_WriteCommand>
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	2000020b 	.word	0x2000020b
 80013b4:	2000020c 	.word	0x2000020c

080013b8 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 80013c2:	f7ff ff07 	bl	80011d4 <ST7735_Select>
    ST7735_Reset();
 80013c6:	f7ff ff1b 	bl	8001200 <ST7735_Reset>
    DisplayInit(init_cmds1);
 80013ca:	480c      	ldr	r0, [pc, #48]	@ (80013fc <ST7735_Init+0x44>)
 80013cc:	f7ff ff62 	bl	8001294 <DisplayInit>
    DisplayInit(init_cmds2);
 80013d0:	480b      	ldr	r0, [pc, #44]	@ (8001400 <ST7735_Init+0x48>)
 80013d2:	f7ff ff5f 	bl	8001294 <DisplayInit>
    DisplayInit(init_cmds3);
 80013d6:	480b      	ldr	r0, [pc, #44]	@ (8001404 <ST7735_Init+0x4c>)
 80013d8:	f7ff ff5c 	bl	8001294 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <ST7735_Init+0x50>)
 80013de:	2202      	movs	r2, #2
 80013e0:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <ST7735_Init+0x54>)
 80013e4:	2203      	movs	r2, #3
 80013e6:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f810 	bl	8001410 <ST7735_SetRotation>
    ST7735_Unselect();
 80013f0:	f7ff fefb 	bl	80011ea <ST7735_Unselect>

}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	0800c908 	.word	0x0800c908
 8001400:	0800c940 	.word	0x0800c940
 8001404:	0800c950 	.word	0x0800c950
 8001408:	20000209 	.word	0x20000209
 800140c:	2000020a 	.word	0x2000020a

08001410 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b33      	ldr	r3, [pc, #204]	@ (80014f4 <ST7735_SetRotation+0xe4>)
 8001428:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800142a:	4b32      	ldr	r3, [pc, #200]	@ (80014f4 <ST7735_SetRotation+0xe4>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d84e      	bhi.n	80014d0 <ST7735_SetRotation+0xc0>
 8001432:	a201      	add	r2, pc, #4	@ (adr r2, 8001438 <ST7735_SetRotation+0x28>)
 8001434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001438:	08001449 	.word	0x08001449
 800143c:	0800146b 	.word	0x0800146b
 8001440:	0800148d 	.word	0x0800148d
 8001444:	080014af 	.word	0x080014af
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001448:	23c0      	movs	r3, #192	@ 0xc0
 800144a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800144c:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001452:	4b2a      	ldr	r3, [pc, #168]	@ (80014fc <ST7735_SetRotation+0xec>)
 8001454:	2280      	movs	r2, #128	@ 0x80
 8001456:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8001458:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <ST7735_SetRotation+0xf0>)
 800145a:	781a      	ldrb	r2, [r3, #0]
 800145c:	4b29      	ldr	r3, [pc, #164]	@ (8001504 <ST7735_SetRotation+0xf4>)
 800145e:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8001460:	4b29      	ldr	r3, [pc, #164]	@ (8001508 <ST7735_SetRotation+0xf8>)
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	4b29      	ldr	r3, [pc, #164]	@ (800150c <ST7735_SetRotation+0xfc>)
 8001466:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001468:	e032      	b.n	80014d0 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800146a:	23a0      	movs	r3, #160	@ 0xa0
 800146c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800146e:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <ST7735_SetRotation+0xec>)
 8001470:	2280      	movs	r2, #128	@ 0x80
 8001472:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001474:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 8001476:	2280      	movs	r2, #128	@ 0x80
 8001478:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800147a:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <ST7735_SetRotation+0xf0>)
 800147c:	781a      	ldrb	r2, [r3, #0]
 800147e:	4b23      	ldr	r3, [pc, #140]	@ (800150c <ST7735_SetRotation+0xfc>)
 8001480:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001482:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <ST7735_SetRotation+0xf8>)
 8001484:	781a      	ldrb	r2, [r3, #0]
 8001486:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <ST7735_SetRotation+0xf4>)
 8001488:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800148a:	e021      	b.n	80014d0 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001490:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 8001492:	2280      	movs	r2, #128	@ 0x80
 8001494:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001496:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <ST7735_SetRotation+0xec>)
 8001498:	2280      	movs	r2, #128	@ 0x80
 800149a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 800149c:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <ST7735_SetRotation+0xf0>)
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <ST7735_SetRotation+0xf4>)
 80014a2:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80014a4:	4b18      	ldr	r3, [pc, #96]	@ (8001508 <ST7735_SetRotation+0xf8>)
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	4b18      	ldr	r3, [pc, #96]	@ (800150c <ST7735_SetRotation+0xfc>)
 80014aa:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80014ac:	e010      	b.n	80014d0 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80014ae:	2360      	movs	r3, #96	@ 0x60
 80014b0:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <ST7735_SetRotation+0xec>)
 80014b4:	2280      	movs	r2, #128	@ 0x80
 80014b6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <ST7735_SetRotation+0xf0>)
 80014c0:	781a      	ldrb	r2, [r3, #0]
 80014c2:	4b12      	ldr	r3, [pc, #72]	@ (800150c <ST7735_SetRotation+0xfc>)
 80014c4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <ST7735_SetRotation+0xf8>)
 80014c8:	781a      	ldrb	r2, [r3, #0]
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <ST7735_SetRotation+0xf4>)
 80014cc:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80014ce:	bf00      	nop
  }
  ST7735_Select();
 80014d0:	f7ff fe80 	bl	80011d4 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80014d4:	2036      	movs	r0, #54	@ 0x36
 80014d6:	f7ff fea7 	bl	8001228 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80014da:	f107 030f 	add.w	r3, r7, #15
 80014de:	2101      	movs	r1, #1
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff febb 	bl	800125c <ST7735_WriteData>
  ST7735_Unselect();
 80014e6:	f7ff fe80 	bl	80011ea <ST7735_Unselect>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000208 	.word	0x20000208
 80014f8:	20000206 	.word	0x20000206
 80014fc:	20000204 	.word	0x20000204
 8001500:	20000209 	.word	0x20000209
 8001504:	2000020b 	.word	0x2000020b
 8001508:	2000020a 	.word	0x2000020a
 800150c:	2000020c 	.word	0x2000020c

08001510 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
 800151a:	460b      	mov	r3, r1
 800151c:	80bb      	strh	r3, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <ST7735_DrawPixel+0x74>)
 8001526:	f9b2 2000 	ldrsh.w	r2, [r2]
 800152a:	4293      	cmp	r3, r2
 800152c:	da26      	bge.n	800157c <ST7735_DrawPixel+0x6c>
 800152e:	88bb      	ldrh	r3, [r7, #4]
 8001530:	4a15      	ldr	r2, [pc, #84]	@ (8001588 <ST7735_DrawPixel+0x78>)
 8001532:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001536:	4293      	cmp	r3, r2
 8001538:	da20      	bge.n	800157c <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 800153a:	f7ff fe4b 	bl	80011d4 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	b2d8      	uxtb	r0, r3
 8001542:	88bb      	ldrh	r3, [r7, #4]
 8001544:	b2d9      	uxtb	r1, r3
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	3301      	adds	r3, #1
 800154c:	b2da      	uxtb	r2, r3
 800154e:	88bb      	ldrh	r3, [r7, #4]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	3301      	adds	r3, #1
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f7ff fee7 	bl	8001328 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	b29b      	uxth	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	733b      	strb	r3, [r7, #12]
 8001564:	887b      	ldrh	r3, [r7, #2]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	2102      	movs	r1, #2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe73 	bl	800125c <ST7735_WriteData>

    ST7735_Unselect();
 8001576:	f7ff fe38 	bl	80011ea <ST7735_Unselect>
 800157a:	e000      	b.n	800157e <ST7735_DrawPixel+0x6e>
        return;
 800157c:	bf00      	nop
}
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000204 	.word	0x20000204
 8001588:	20000206 	.word	0x20000206

0800158c <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800158c:	b082      	sub	sp, #8
 800158e:	b590      	push	{r4, r7, lr}
 8001590:	b089      	sub	sp, #36	@ 0x24
 8001592:	af00      	add	r7, sp, #0
 8001594:	637b      	str	r3, [r7, #52]	@ 0x34
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
 800159a:	460b      	mov	r3, r1
 800159c:	80bb      	strh	r3, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	b2d8      	uxtb	r0, r3
 80015a6:	88bb      	ldrh	r3, [r7, #4]
 80015a8:	b2d9      	uxtb	r1, r3
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80015b2:	4413      	add	r3, r2
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b2dc      	uxtb	r4, r3
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80015c2:	4413      	add	r3, r2
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	3b01      	subs	r3, #1
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4622      	mov	r2, r4
 80015cc:	f7ff feac 	bl	8001328 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
 80015d4:	e043      	b.n	800165e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80015d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	3b20      	subs	r3, #32
 80015dc:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80015e0:	fb01 f303 	mul.w	r3, r1, r3
 80015e4:	4619      	mov	r1, r3
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	440b      	add	r3, r1
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	e029      	b.n	800164c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00e      	beq.n	8001626 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001608:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	b29b      	uxth	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	743b      	strb	r3, [r7, #16]
 8001612:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001614:	b2db      	uxtb	r3, r3
 8001616:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	2102      	movs	r1, #2
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fe1c 	bl	800125c <ST7735_WriteData>
 8001624:	e00f      	b.n	8001646 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001626:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	b29b      	uxth	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	733b      	strb	r3, [r7, #12]
 8001632:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001636:	b2db      	uxtb	r3, r3
 8001638:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	2102      	movs	r1, #2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fe0b 	bl	800125c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	3301      	adds	r3, #1
 800164a:	61bb      	str	r3, [r7, #24]
 800164c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001650:	461a      	mov	r2, r3
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4293      	cmp	r3, r2
 8001656:	d3cf      	bcc.n	80015f8 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	3301      	adds	r3, #1
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001662:	461a      	mov	r2, r3
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	4293      	cmp	r3, r2
 8001668:	d3b5      	bcc.n	80015d6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800166a:	bf00      	nop
 800166c:	bf00      	nop
 800166e:	3724      	adds	r7, #36	@ 0x24
 8001670:	46bd      	mov	sp, r7
 8001672:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001676:	b002      	add	sp, #8
 8001678:	4770      	bx	lr
	...

0800167c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800167c:	b082      	sub	sp, #8
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af04      	add	r7, sp, #16
 8001684:	603a      	str	r2, [r7, #0]
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	4603      	mov	r3, r0
 800168a:	80fb      	strh	r3, [r7, #6]
 800168c:	460b      	mov	r3, r1
 800168e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001690:	f7ff fda0 	bl	80011d4 <ST7735_Select>

    while(*str) {
 8001694:	e033      	b.n	80016fe <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	7d3a      	ldrb	r2, [r7, #20]
 800169a:	4413      	add	r3, r2
 800169c:	4a1f      	ldr	r2, [pc, #124]	@ (800171c <ST7735_WriteString+0xa0>)
 800169e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016a2:	4293      	cmp	r3, r2
 80016a4:	db16      	blt.n	80016d4 <ST7735_WriteString+0x58>
            x = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80016aa:	7d7b      	ldrb	r3, [r7, #21]
 80016ac:	461a      	mov	r2, r3
 80016ae:	88bb      	ldrh	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 80016b4:	88bb      	ldrh	r3, [r7, #4]
 80016b6:	7d7a      	ldrb	r2, [r7, #21]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a19      	ldr	r2, [pc, #100]	@ (8001720 <ST7735_WriteString+0xa4>)
 80016bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016c0:	4293      	cmp	r3, r2
 80016c2:	da21      	bge.n	8001708 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b20      	cmp	r3, #32
 80016ca:	d103      	bne.n	80016d4 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	603b      	str	r3, [r7, #0]
                continue;
 80016d2:	e014      	b.n	80016fe <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	781a      	ldrb	r2, [r3, #0]
 80016d8:	88b9      	ldrh	r1, [r7, #4]
 80016da:	88f8      	ldrh	r0, [r7, #6]
 80016dc:	8c3b      	ldrh	r3, [r7, #32]
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	8bbb      	ldrh	r3, [r7, #28]
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f7ff ff4f 	bl	800158c <ST7735_WriteChar>
        x += font.width;
 80016ee:	7d3b      	ldrb	r3, [r7, #20]
 80016f0:	461a      	mov	r2, r3
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	4413      	add	r3, r2
 80016f6:	80fb      	strh	r3, [r7, #6]
        str++;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	603b      	str	r3, [r7, #0]
    while(*str) {
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1c7      	bne.n	8001696 <ST7735_WriteString+0x1a>
 8001706:	e000      	b.n	800170a <ST7735_WriteString+0x8e>
                break;
 8001708:	bf00      	nop
    }

    ST7735_Unselect();
 800170a:	f7ff fd6e 	bl	80011ea <ST7735_Unselect>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001718:	b002      	add	sp, #8
 800171a:	4770      	bx	lr
 800171c:	20000204 	.word	0x20000204
 8001720:	20000206 	.word	0x20000206

08001724 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	4604      	mov	r4, r0
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4623      	mov	r3, r4
 8001734:	80fb      	strh	r3, [r7, #6]
 8001736:	4603      	mov	r3, r0
 8001738:	80bb      	strh	r3, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	807b      	strh	r3, [r7, #2]
 800173e:	4613      	mov	r3, r2
 8001740:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8001742:	88fb      	ldrh	r3, [r7, #6]
 8001744:	4a38      	ldr	r2, [pc, #224]	@ (8001828 <ST7735_FillRectangle+0x104>)
 8001746:	f9b2 2000 	ldrsh.w	r2, [r2]
 800174a:	4293      	cmp	r3, r2
 800174c:	da67      	bge.n	800181e <ST7735_FillRectangle+0xfa>
 800174e:	88bb      	ldrh	r3, [r7, #4]
 8001750:	4a36      	ldr	r2, [pc, #216]	@ (800182c <ST7735_FillRectangle+0x108>)
 8001752:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001756:	4293      	cmp	r3, r2
 8001758:	da61      	bge.n	800181e <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 800175a:	88fa      	ldrh	r2, [r7, #6]
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	4413      	add	r3, r2
 8001760:	4a31      	ldr	r2, [pc, #196]	@ (8001828 <ST7735_FillRectangle+0x104>)
 8001762:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001766:	4293      	cmp	r3, r2
 8001768:	dd06      	ble.n	8001778 <ST7735_FillRectangle+0x54>
 800176a:	4b2f      	ldr	r3, [pc, #188]	@ (8001828 <ST7735_FillRectangle+0x104>)
 800176c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001770:	b29a      	uxth	r2, r3
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8001778:	88ba      	ldrh	r2, [r7, #4]
 800177a:	883b      	ldrh	r3, [r7, #0]
 800177c:	4413      	add	r3, r2
 800177e:	4a2b      	ldr	r2, [pc, #172]	@ (800182c <ST7735_FillRectangle+0x108>)
 8001780:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001784:	4293      	cmp	r3, r2
 8001786:	dd06      	ble.n	8001796 <ST7735_FillRectangle+0x72>
 8001788:	4b28      	ldr	r3, [pc, #160]	@ (800182c <ST7735_FillRectangle+0x108>)
 800178a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178e:	b29a      	uxth	r2, r3
 8001790:	88bb      	ldrh	r3, [r7, #4]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001796:	f7ff fd1d 	bl	80011d4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	b2d8      	uxtb	r0, r3
 800179e:	88bb      	ldrh	r3, [r7, #4]
 80017a0:	b2d9      	uxtb	r1, r3
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	887b      	ldrh	r3, [r7, #2]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b2dc      	uxtb	r4, r3
 80017b2:	88bb      	ldrh	r3, [r7, #4]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	883b      	ldrh	r3, [r7, #0]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	3b01      	subs	r3, #1
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	4622      	mov	r2, r4
 80017c4:	f7ff fdb0 	bl	8001328 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80017c8:	8c3b      	ldrh	r3, [r7, #32]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	733b      	strb	r3, [r7, #12]
 80017d2:	8c3b      	ldrh	r3, [r7, #32]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017de:	4814      	ldr	r0, [pc, #80]	@ (8001830 <ST7735_FillRectangle+0x10c>)
 80017e0:	f003 fcc0 	bl	8005164 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80017e4:	883b      	ldrh	r3, [r7, #0]
 80017e6:	80bb      	strh	r3, [r7, #4]
 80017e8:	e013      	b.n	8001812 <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	80fb      	strh	r3, [r7, #6]
 80017ee:	e00a      	b.n	8001806 <ST7735_FillRectangle+0xe2>
				{

				}
			#endif
			#ifdef WITHOUT_DMA
				HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80017f0:	f107 010c 	add.w	r1, r7, #12
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
 80017f8:	2202      	movs	r2, #2
 80017fa:	480e      	ldr	r0, [pc, #56]	@ (8001834 <ST7735_FillRectangle+0x110>)
 80017fc:	f004 fdd7 	bl	80063ae <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	3b01      	subs	r3, #1
 8001804:	80fb      	strh	r3, [r7, #6]
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f1      	bne.n	80017f0 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 800180c:	88bb      	ldrh	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	80bb      	strh	r3, [r7, #4]
 8001812:	88bb      	ldrh	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1e8      	bne.n	80017ea <ST7735_FillRectangle+0xc6>
			#endif
        }
    }

    ST7735_Unselect();
 8001818:	f7ff fce7 	bl	80011ea <ST7735_Unselect>
 800181c:	e000      	b.n	8001820 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 800181e:	bf00      	nop
}
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bd90      	pop	{r4, r7, pc}
 8001826:	bf00      	nop
 8001828:	20000204 	.word	0x20000204
 800182c:	20000206 	.word	0x20000206
 8001830:	48000400 	.word	0x48000400
 8001834:	200003a8 	.word	0x200003a8

08001838 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Interrupts *****************************************************************/
// GPIO Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af04      	add	r7, sp, #16
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	// Interrupt Routine
	switch (GPIO_Pin) {
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001848:	d008      	beq.n	800185c <HAL_GPIO_EXTI_Callback+0x24>
 800184a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800184e:	f300 8087 	bgt.w	8001960 <HAL_GPIO_EXTI_Callback+0x128>
 8001852:	2b02      	cmp	r3, #2
 8001854:	d016      	beq.n	8001884 <HAL_GPIO_EXTI_Callback+0x4c>
 8001856:	2b04      	cmp	r3, #4
 8001858:	d04b      	beq.n	80018f2 <HAL_GPIO_EXTI_Callback+0xba>
		sprintf(msg_console, "Taster2 gedrückt! \r\n");
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console),
		HAL_MAX_DELAY);
		break;
	default:
		break;
 800185a:	e081      	b.n	8001960 <HAL_GPIO_EXTI_Callback+0x128>
		switch (handler_state) {
 800185c:	4b43      	ldr	r3, [pc, #268]	@ (800196c <HAL_GPIO_EXTI_Callback+0x134>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <HAL_GPIO_EXTI_Callback+0x32>
 8001864:	2b01      	cmp	r3, #1
 8001866:	d004      	beq.n	8001872 <HAL_GPIO_EXTI_Callback+0x3a>
 8001868:	e007      	b.n	800187a <HAL_GPIO_EXTI_Callback+0x42>
			set_handler_state(ADC_Values);
 800186a:	2001      	movs	r0, #1
 800186c:	f001 fb38 	bl	8002ee0 <set_handler_state>
			break;
 8001870:	e007      	b.n	8001882 <HAL_GPIO_EXTI_Callback+0x4a>
			set_handler_state(IDLE);
 8001872:	2000      	movs	r0, #0
 8001874:	f001 fb34 	bl	8002ee0 <set_handler_state>
			break;
 8001878:	e003      	b.n	8001882 <HAL_GPIO_EXTI_Callback+0x4a>
			set_handler_state(IDLE);
 800187a:	2000      	movs	r0, #0
 800187c:	f001 fb30 	bl	8002ee0 <set_handler_state>
			break;
 8001880:	bf00      	nop
		break;
 8001882:	e06e      	b.n	8001962 <HAL_GPIO_EXTI_Callback+0x12a>
		ST7735_FillRectangle(0, 5 * px_ofs2, 0, px_ofs2, BLACK);
 8001884:	4b3a      	ldr	r3, [pc, #232]	@ (8001970 <HAL_GPIO_EXTI_Callback+0x138>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	0092      	lsls	r2, r2, #2
 800188c:	4413      	add	r3, r2
 800188e:	b299      	uxth	r1, r3
 8001890:	4b37      	ldr	r3, [pc, #220]	@ (8001970 <HAL_GPIO_EXTI_Callback+0x138>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	2300      	movs	r3, #0
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	4613      	mov	r3, r2
 800189c:	2200      	movs	r2, #0
 800189e:	2000      	movs	r0, #0
 80018a0:	f7ff ff40 	bl	8001724 <ST7735_FillRectangle>
		sprintf(msg_display, "Taster1 gedrueckt!");
 80018a4:	4933      	ldr	r1, [pc, #204]	@ (8001974 <HAL_GPIO_EXTI_Callback+0x13c>)
 80018a6:	4834      	ldr	r0, [pc, #208]	@ (8001978 <HAL_GPIO_EXTI_Callback+0x140>)
 80018a8:	f008 f97c 	bl	8009ba4 <siprintf>
		ST7735_WriteString(0, 5 * px_ofs2, msg_display, Font_7x10, GREEN,
 80018ac:	4b30      	ldr	r3, [pc, #192]	@ (8001970 <HAL_GPIO_EXTI_Callback+0x138>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	0092      	lsls	r2, r2, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	b299      	uxth	r1, r3
 80018b8:	4b30      	ldr	r3, [pc, #192]	@ (800197c <HAL_GPIO_EXTI_Callback+0x144>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	9202      	str	r2, [sp, #8]
 80018be:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80018c2:	9201      	str	r2, [sp, #4]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	9200      	str	r2, [sp, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001978 <HAL_GPIO_EXTI_Callback+0x140>)
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff fed5 	bl	800167c <ST7735_WriteString>
		sprintf(msg_console, "Taster1 gedrückt! \r\n");
 80018d2:	492b      	ldr	r1, [pc, #172]	@ (8001980 <HAL_GPIO_EXTI_Callback+0x148>)
 80018d4:	482b      	ldr	r0, [pc, #172]	@ (8001984 <HAL_GPIO_EXTI_Callback+0x14c>)
 80018d6:	f008 f965 	bl	8009ba4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console),
 80018da:	482a      	ldr	r0, [pc, #168]	@ (8001984 <HAL_GPIO_EXTI_Callback+0x14c>)
 80018dc:	f7fe fcf0 	bl	80002c0 <strlen>
 80018e0:	4603      	mov	r3, r0
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
 80018e8:	4926      	ldr	r1, [pc, #152]	@ (8001984 <HAL_GPIO_EXTI_Callback+0x14c>)
 80018ea:	4827      	ldr	r0, [pc, #156]	@ (8001988 <HAL_GPIO_EXTI_Callback+0x150>)
 80018ec:	f006 fd93 	bl	8008416 <HAL_UART_Transmit>
		break;
 80018f0:	e037      	b.n	8001962 <HAL_GPIO_EXTI_Callback+0x12a>
		ST7735_FillRectangle(0, 5 * px_ofs2, 0, px_ofs2, BLACK);
 80018f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <HAL_GPIO_EXTI_Callback+0x138>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	0092      	lsls	r2, r2, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	b299      	uxth	r1, r3
 80018fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001970 <HAL_GPIO_EXTI_Callback+0x138>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	2300      	movs	r3, #0
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	4613      	mov	r3, r2
 800190a:	2200      	movs	r2, #0
 800190c:	2000      	movs	r0, #0
 800190e:	f7ff ff09 	bl	8001724 <ST7735_FillRectangle>
		sprintf(msg_display, "Taster2 gedrueckt!");
 8001912:	491e      	ldr	r1, [pc, #120]	@ (800198c <HAL_GPIO_EXTI_Callback+0x154>)
 8001914:	4818      	ldr	r0, [pc, #96]	@ (8001978 <HAL_GPIO_EXTI_Callback+0x140>)
 8001916:	f008 f945 	bl	8009ba4 <siprintf>
		ST7735_WriteString(0, 5 * px_ofs2, msg_display, Font_7x10, GREEN,
 800191a:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <HAL_GPIO_EXTI_Callback+0x138>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	0092      	lsls	r2, r2, #2
 8001922:	4413      	add	r3, r2
 8001924:	b299      	uxth	r1, r3
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <HAL_GPIO_EXTI_Callback+0x144>)
 8001928:	2200      	movs	r2, #0
 800192a:	9202      	str	r2, [sp, #8]
 800192c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001930:	9201      	str	r2, [sp, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	9200      	str	r2, [sp, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0f      	ldr	r2, [pc, #60]	@ (8001978 <HAL_GPIO_EXTI_Callback+0x140>)
 800193a:	2000      	movs	r0, #0
 800193c:	f7ff fe9e 	bl	800167c <ST7735_WriteString>
		sprintf(msg_console, "Taster2 gedrückt! \r\n");
 8001940:	4913      	ldr	r1, [pc, #76]	@ (8001990 <HAL_GPIO_EXTI_Callback+0x158>)
 8001942:	4810      	ldr	r0, [pc, #64]	@ (8001984 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001944:	f008 f92e 	bl	8009ba4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console),
 8001948:	480e      	ldr	r0, [pc, #56]	@ (8001984 <HAL_GPIO_EXTI_Callback+0x14c>)
 800194a:	f7fe fcb9 	bl	80002c0 <strlen>
 800194e:	4603      	mov	r3, r0
 8001950:	b29a      	uxth	r2, r3
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	490b      	ldr	r1, [pc, #44]	@ (8001984 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001958:	480b      	ldr	r0, [pc, #44]	@ (8001988 <HAL_GPIO_EXTI_Callback+0x150>)
 800195a:	f006 fd5c 	bl	8008416 <HAL_UART_Transmit>
		break;
 800195e:	e000      	b.n	8001962 <HAL_GPIO_EXTI_Callback+0x12a>
		break;
 8001960:	bf00      	nop
	}
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200006ac 	.word	0x200006ac
 8001970:	20000008 	.word	0x20000008
 8001974:	0800c890 	.word	0x0800c890
 8001978:	20000690 	.word	0x20000690
 800197c:	20000000 	.word	0x20000000
 8001980:	0800c8a4 	.word	0x0800c8a4
 8001984:	20000640 	.word	0x20000640
 8001988:	2000059c 	.word	0x2000059c
 800198c:	0800c8bc 	.word	0x0800c8bc
 8001990:	0800c8d0 	.word	0x0800c8d0

08001994 <HAL_TIM_PeriodElapsedCallback>:

// Timer timeout Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001994:	b580      	push	{r7, lr}
 8001996:	ed2d 8b02 	vpush	{d8}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
			set_handler_state(IDLE);
			break;
		}
	}*/
	// Update duty cycle für PWM Modulation alle 20us
	if(htim == &htim2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a2b      	ldr	r2, [pc, #172]	@ (8001a50 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d14c      	bne.n	8001a42 <HAL_TIM_PeriodElapsedCallback+0xae>
	{
		const uint32_t nSamples = fSW/f0;
 80019a8:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 8001a54 <HAL_TIM_PeriodElapsedCallback+0xc0>
 80019ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019b0:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8001a58 <HAL_TIM_PeriodElapsedCallback+0xc4>
 80019b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019bc:	ee17 3a90 	vmov	r3, s15
 80019c0:	617b      	str	r3, [r7, #20]
		const uint32_t MaxPWM_value = 250;
 80019c2:	23fa      	movs	r3, #250	@ 0xfa
 80019c4:	613b      	str	r3, [r7, #16]
		uint32_t PWM_CH1 = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]

		if(PWM_index >= nSamples)
 80019ca:	4b24      	ldr	r3, [pc, #144]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d802      	bhi.n	80019da <HAL_TIM_PeriodElapsedCallback+0x46>
		{
			PWM_index = 1;
 80019d4:	4b21      	ldr	r3, [pc, #132]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
		}

		PWM_CH1 = (uint32_t)(MaxPWM_value*sinf(((2*pi)/nSamples)*PWM_index) + MaxPWM_value);
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	ee07 3a90 	vmov	s15, r3
 80019e0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80019e4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8001a60 <HAL_TIM_PeriodElapsedCallback+0xcc>
 80019e8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019fa:	4b18      	ldr	r3, [pc, #96]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0e:	f00a f9f7 	bl	800be00 <sinf>
 8001a12:	eef0 7a40 	vmov.f32	s15, s0
 8001a16:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	ee07 3a90 	vmov	s15, r3
 8001a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a2c:	ee17 3a90 	vmov	r3, s15
 8001a30:	60fb      	str	r3, [r7, #12]
		if(PWM_CH1 < 0)
		{
			PWM_CH1 = 0;
		}

		TIM1->CCR1 = PWM_CH1;
 8001a32:	4a0c      	ldr	r2, [pc, #48]	@ (8001a64 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6353      	str	r3, [r2, #52]	@ 0x34

		PWM_index++;
 8001a38:	4b08      	ldr	r3, [pc, #32]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	4a07      	ldr	r2, [pc, #28]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001a40:	6013      	str	r3, [r2, #0]
	}
}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	ecbd 8b02 	vpop	{d8}
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000458 	.word	0x20000458
 8001a54:	00004e20 	.word	0x00004e20
 8001a58:	447a0000 	.word	0x447a0000
 8001a5c:	2000000c 	.word	0x2000000c
 8001a60:	40490fdb 	.word	0x40490fdb
 8001a64:	40012c00 	.word	0x40012c00

08001a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a6c:	f001 fa7f 	bl	8002f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a70:	f000 f84a 	bl	8001b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a74:	f000 fbbe 	bl	80021f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a78:	f000 fb76 	bl	8002168 <MX_DMA_Init>
  MX_SPI1_Init();
 8001a7c:	f000 f98e 	bl	8001d9c <MX_SPI1_Init>
  MX_TIM16_Init();
 8001a80:	f000 fad6 	bl	8002030 <MX_TIM16_Init>
  MX_ADC1_Init();
 8001a84:	f000 f88c 	bl	8001ba0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001a88:	f000 fb22 	bl	80020d0 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8001a8c:	f000 faf8 	bl	8002080 <MX_TIM17_Init>
  MX_ADC2_Init();
 8001a90:	f000 f91e 	bl	8001cd0 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001a94:	f000 f9c0 	bl	8001e18 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a98:	f000 fa7c 	bl	8001f94 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	// Display Init
	ST7735_Init(1);
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f7ff fc8b 	bl	80013b8 <ST7735_Init>
	fillScreen(BLACK);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7ff fb7c 	bl	80011a0 <fillScreen>

	// Start Timers im Interrupt Modus
	HAL_TIM_Base_Start_IT(&htim16);
 8001aa8:	4811      	ldr	r0, [pc, #68]	@ (8001af0 <main+0x88>)
 8001aaa:	f004 ffb1 	bl	8006a10 <HAL_TIM_Base_Start_IT>

	// Start ADC1 & ADC2 mit DMA transfer
	HAL_ADC_Start_DMA(&hadc1, AD_RES_BUFFER_ADC1, 3);
 8001aae:	2203      	movs	r2, #3
 8001ab0:	4910      	ldr	r1, [pc, #64]	@ (8001af4 <main+0x8c>)
 8001ab2:	4811      	ldr	r0, [pc, #68]	@ (8001af8 <main+0x90>)
 8001ab4:	f001 fec8 	bl	8003848 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, AD_RES_BUFFER_ADC2, 1);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	4910      	ldr	r1, [pc, #64]	@ (8001afc <main+0x94>)
 8001abc:	4810      	ldr	r0, [pc, #64]	@ (8001b00 <main+0x98>)
 8001abe:	f001 fec3 	bl	8003848 <HAL_ADC_Start_DMA>

	// PWM Timer starten
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); 		// Start positiv Channel CH1
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	480f      	ldr	r0, [pc, #60]	@ (8001b04 <main+0x9c>)
 8001ac6:	f005 f8ab 	bl	8006c20 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); 	// Start negativ Channel CH1N
 8001aca:	2100      	movs	r1, #0
 8001acc:	480d      	ldr	r0, [pc, #52]	@ (8001b04 <main+0x9c>)
 8001ace:	f006 f9fb 	bl	8007ec8 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); 		// Start positiv Channel CH2
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	480b      	ldr	r0, [pc, #44]	@ (8001b04 <main+0x9c>)
 8001ad6:	f005 f8a3 	bl	8006c20 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); 	// Start negativ Channel CH2N
 8001ada:	2104      	movs	r1, #4
 8001adc:	4809      	ldr	r0, [pc, #36]	@ (8001b04 <main+0x9c>)
 8001ade:	f006 f9f3 	bl	8007ec8 <HAL_TIMEx_PWMN_Start>

	// Set first State
	set_handler_state(IDLE);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f001 f9fc 	bl	8002ee0 <set_handler_state>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Run StateMachine
		handler_task();
 8001ae8:	f001 f9ee 	bl	8002ec8 <handler_task>
 8001aec:	e7fc      	b.n	8001ae8 <main+0x80>
 8001aee:	bf00      	nop
 8001af0:	200004a4 	.word	0x200004a4
 8001af4:	20000630 	.word	0x20000630
 8001af8:	20000210 	.word	0x20000210
 8001afc:	2000063c 	.word	0x2000063c
 8001b00:	2000027c 	.word	0x2000027c
 8001b04:	2000040c 	.word	0x2000040c

08001b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b094      	sub	sp, #80	@ 0x50
 8001b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b0e:	f107 0318 	add.w	r3, r7, #24
 8001b12:	2238      	movs	r2, #56	@ 0x38
 8001b14:	2100      	movs	r1, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f008 f8a7 	bl	8009c6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
 8001b28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b2a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b2e:	f003 fb63 	bl	80051f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b32:	2302      	movs	r3, #2
 8001b34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b3c:	2340      	movs	r3, #64	@ 0x40
 8001b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b40:	2302      	movs	r3, #2
 8001b42:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b44:	2302      	movs	r3, #2
 8001b46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001b48:	2304      	movs	r3, #4
 8001b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001b4c:	234b      	movs	r3, #75	@ 0x4b
 8001b4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b50:	2302      	movs	r3, #2
 8001b52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b54:	2302      	movs	r3, #2
 8001b56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b5c:	f107 0318 	add.w	r3, r7, #24
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 fbfd 	bl	8005360 <HAL_RCC_OscConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001b6c:	f000 fbfc 	bl	8002368 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b70:	230f      	movs	r3, #15
 8001b72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b74:	2303      	movs	r3, #3
 8001b76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	2104      	movs	r1, #4
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 fefb 	bl	8005984 <HAL_RCC_ClockConfig>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001b94:	f000 fbe8 	bl	8002368 <Error_Handler>
  }
}
 8001b98:	bf00      	nop
 8001b9a:	3750      	adds	r7, #80	@ 0x50
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08c      	sub	sp, #48	@ 0x30
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f008 f856 	bl	8009c6a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bbe:	4b40      	ldr	r3, [pc, #256]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001bc0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001bc4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001bc8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001bcc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bce:	4b3c      	ldr	r3, [pc, #240]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bd4:	4b3a      	ldr	r3, [pc, #232]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001bda:	4b39      	ldr	r3, [pc, #228]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001be0:	4b37      	ldr	r3, [pc, #220]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001be6:	4b36      	ldr	r3, [pc, #216]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001be8:	2208      	movs	r2, #8
 8001bea:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bec:	4b34      	ldr	r3, [pc, #208]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001bf2:	4b33      	ldr	r3, [pc, #204]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001bf8:	4b31      	ldr	r3, [pc, #196]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bfe:	4b30      	ldr	r3, [pc, #192]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c06:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c12:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c1a:	4b29      	ldr	r3, [pc, #164]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001c20:	4b27      	ldr	r3, [pc, #156]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c28:	4825      	ldr	r0, [pc, #148]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001c2a:	f001 fc51 	bl	80034d0 <HAL_ADC_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001c34:	f000 fb98 	bl	8002368 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c40:	4619      	mov	r1, r3
 8001c42:	481f      	ldr	r0, [pc, #124]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001c44:	f002 fc82 	bl	800454c <HAL_ADCEx_MultiModeConfigChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001c4e:	f000 fb8b 	bl	8002368 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c52:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc4 <MX_ADC1_Init+0x124>)
 8001c54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c56:	2306      	movs	r3, #6
 8001c58:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001c5a:	2307      	movs	r3, #7
 8001c5c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c5e:	237f      	movs	r3, #127	@ 0x7f
 8001c60:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c62:	2304      	movs	r3, #4
 8001c64:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4814      	ldr	r0, [pc, #80]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001c70:	f001 fedc 	bl	8003a2c <HAL_ADC_ConfigChannel>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001c7a:	f000 fb75 	bl	8002368 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c7e:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <MX_ADC1_Init+0x128>)
 8001c80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001c82:	230c      	movs	r3, #12
 8001c84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480d      	ldr	r0, [pc, #52]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001c8c:	f001 fece 	bl	8003a2c <HAL_ADC_ConfigChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001c96:	f000 fb67 	bl	8002368 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <MX_ADC1_Init+0x12c>)
 8001c9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001c9e:	2312      	movs	r3, #18
 8001ca0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4806      	ldr	r0, [pc, #24]	@ (8001cc0 <MX_ADC1_Init+0x120>)
 8001ca8:	f001 fec0 	bl	8003a2c <HAL_ADC_ConfigChannel>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001cb2:	f000 fb59 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	3730      	adds	r7, #48	@ 0x30
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000210 	.word	0x20000210
 8001cc4:	04300002 	.word	0x04300002
 8001cc8:	08600004 	.word	0x08600004
 8001ccc:	3ef08000 	.word	0x3ef08000

08001cd0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	2220      	movs	r2, #32
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f007 ffc4 	bl	8009c6a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d90 <MX_ADC2_Init+0xc0>)
 8001ce4:	4a2b      	ldr	r2, [pc, #172]	@ (8001d94 <MX_ADC2_Init+0xc4>)
 8001ce6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ce8:	4b29      	ldr	r3, [pc, #164]	@ (8001d90 <MX_ADC2_Init+0xc0>)
 8001cea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001cee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001cf0:	4b27      	ldr	r3, [pc, #156]	@ (8001d90 <MX_ADC2_Init+0xc0>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cf6:	4b26      	ldr	r3, [pc, #152]	@ (8001d90 <MX_ADC2_Init+0xc0>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001cfc:	4b24      	ldr	r3, [pc, #144]	@ (8001d90 <MX_ADC2_Init+0xc0>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d02:	4b23      	ldr	r3, [pc, #140]	@ (8001d90 <MX_ADC2_Init+0xc0>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d08:	4b21      	ldr	r3, [pc, #132]	@ (8001d90 <MX_ADC2_Init+0xc0>)
 8001d0a:	2208      	movs	r2, #8
 8001d0c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001d0e:	4b20      	ldr	r3, [pc, #128]	@ (8001d90 <MX_ADC2_Init+0xc0>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001d14:	4b1e      	ldr	r3, [pc, #120]	@ (8001d90 <MX_ADC2_Init+0xc0>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d90 <MX_ADC2_Init+0xc0>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001d20:	4b1b      	ldr	r3, [pc, #108]	@ (8001d90 <MX_ADC2_Init+0xc0>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d28:	4b19      	ldr	r3, [pc, #100]	@ (8001d90 <MX_ADC2_Init+0xc0>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d2e:	4b18      	ldr	r3, [pc, #96]	@ (8001d90 <MX_ADC2_Init+0xc0>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001d34:	4b16      	ldr	r3, [pc, #88]	@ (8001d90 <MX_ADC2_Init+0xc0>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d3c:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <MX_ADC2_Init+0xc0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001d42:	4b13      	ldr	r3, [pc, #76]	@ (8001d90 <MX_ADC2_Init+0xc0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d4a:	4811      	ldr	r0, [pc, #68]	@ (8001d90 <MX_ADC2_Init+0xc0>)
 8001d4c:	f001 fbc0 	bl	80034d0 <HAL_ADC_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001d56:	f000 fb07 	bl	8002368 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <MX_ADC2_Init+0xc8>)
 8001d5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d5e:	2306      	movs	r3, #6
 8001d60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001d62:	2307      	movs	r3, #7
 8001d64:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d66:	237f      	movs	r3, #127	@ 0x7f
 8001d68:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d72:	463b      	mov	r3, r7
 8001d74:	4619      	mov	r1, r3
 8001d76:	4806      	ldr	r0, [pc, #24]	@ (8001d90 <MX_ADC2_Init+0xc0>)
 8001d78:	f001 fe58 	bl	8003a2c <HAL_ADC_ConfigChannel>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001d82:	f000 faf1 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	3720      	adds	r7, #32
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	2000027c 	.word	0x2000027c
 8001d94:	50000100 	.word	0x50000100
 8001d98:	47520000 	.word	0x47520000

08001d9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001da0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <MX_SPI1_Init+0x74>)
 8001da2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e14 <MX_SPI1_Init+0x78>)
 8001da4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001da6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <MX_SPI1_Init+0x74>)
 8001da8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001dac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dae:	4b18      	ldr	r3, [pc, #96]	@ (8001e10 <MX_SPI1_Init+0x74>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001db4:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <MX_SPI1_Init+0x74>)
 8001db6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001dba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <MX_SPI1_Init+0x74>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	@ (8001e10 <MX_SPI1_Init+0x74>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <MX_SPI1_Init+0x74>)
 8001dca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e10 <MX_SPI1_Init+0x74>)
 8001dd2:	2210      	movs	r2, #16
 8001dd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <MX_SPI1_Init+0x74>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <MX_SPI1_Init+0x74>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <MX_SPI1_Init+0x74>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001de8:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <MX_SPI1_Init+0x74>)
 8001dea:	2207      	movs	r2, #7
 8001dec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dee:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <MX_SPI1_Init+0x74>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <MX_SPI1_Init+0x74>)
 8001df6:	2208      	movs	r2, #8
 8001df8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dfa:	4805      	ldr	r0, [pc, #20]	@ (8001e10 <MX_SPI1_Init+0x74>)
 8001dfc:	f004 fa2c 	bl	8006258 <HAL_SPI_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e06:	f000 faaf 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200003a8 	.word	0x200003a8
 8001e14:	40013000 	.word	0x40013000

08001e18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b09c      	sub	sp, #112	@ 0x70
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e1e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e38:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
 8001e48:	615a      	str	r2, [r3, #20]
 8001e4a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	2234      	movs	r2, #52	@ 0x34
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f007 ff09 	bl	8009c6a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e58:	4b4c      	ldr	r3, [pc, #304]	@ (8001f8c <MX_TIM1_Init+0x174>)
 8001e5a:	4a4d      	ldr	r2, [pc, #308]	@ (8001f90 <MX_TIM1_Init+0x178>)
 8001e5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15-1;
 8001e5e:	4b4b      	ldr	r3, [pc, #300]	@ (8001f8c <MX_TIM1_Init+0x174>)
 8001e60:	220e      	movs	r2, #14
 8001e62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e64:	4b49      	ldr	r3, [pc, #292]	@ (8001f8c <MX_TIM1_Init+0x174>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8001e6a:	4b48      	ldr	r3, [pc, #288]	@ (8001f8c <MX_TIM1_Init+0x174>)
 8001e6c:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001e70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e72:	4b46      	ldr	r3, [pc, #280]	@ (8001f8c <MX_TIM1_Init+0x174>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e78:	4b44      	ldr	r3, [pc, #272]	@ (8001f8c <MX_TIM1_Init+0x174>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7e:	4b43      	ldr	r3, [pc, #268]	@ (8001f8c <MX_TIM1_Init+0x174>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e84:	4841      	ldr	r0, [pc, #260]	@ (8001f8c <MX_TIM1_Init+0x174>)
 8001e86:	f004 fd6b 	bl	8006960 <HAL_TIM_Base_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001e90:	f000 fa6a 	bl	8002368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e98:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e9a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	483a      	ldr	r0, [pc, #232]	@ (8001f8c <MX_TIM1_Init+0x174>)
 8001ea2:	f005 fa33 	bl	800730c <HAL_TIM_ConfigClockSource>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001eac:	f000 fa5c 	bl	8002368 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001eb0:	4836      	ldr	r0, [pc, #216]	@ (8001f8c <MX_TIM1_Init+0x174>)
 8001eb2:	f004 fe54 	bl	8006b5e <HAL_TIM_PWM_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001ebc:	f000 fa54 	bl	8002368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ecc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	482e      	ldr	r0, [pc, #184]	@ (8001f8c <MX_TIM1_Init+0x174>)
 8001ed4:	f006 f8ba 	bl	800804c <HAL_TIMEx_MasterConfigSynchronization>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001ede:	f000 fa43 	bl	8002368 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee2:	2360      	movs	r3, #96	@ 0x60
 8001ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 750;
 8001ee6:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8001eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eec:	2300      	movs	r3, #0
 8001eee:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001efc:	2300      	movs	r3, #0
 8001efe:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f00:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f04:	2200      	movs	r2, #0
 8001f06:	4619      	mov	r1, r3
 8001f08:	4820      	ldr	r0, [pc, #128]	@ (8001f8c <MX_TIM1_Init+0x174>)
 8001f0a:	f005 f8eb 	bl	80070e4 <HAL_TIM_PWM_ConfigChannel>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001f14:	f000 fa28 	bl	8002368 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f18:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	4619      	mov	r1, r3
 8001f20:	481a      	ldr	r0, [pc, #104]	@ (8001f8c <MX_TIM1_Init+0x174>)
 8001f22:	f005 f8df 	bl	80070e4 <HAL_TIM_PWM_ConfigChannel>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001f2c:	f000 fa1c 	bl	8002368 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 139;
 8001f3c:	238b      	movs	r3, #139	@ 0x8b
 8001f3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f48:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f60:	2300      	movs	r3, #0
 8001f62:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4807      	ldr	r0, [pc, #28]	@ (8001f8c <MX_TIM1_Init+0x174>)
 8001f6e:	f006 f903 	bl	8008178 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8001f78:	f000 f9f6 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f7c:	4803      	ldr	r0, [pc, #12]	@ (8001f8c <MX_TIM1_Init+0x174>)
 8001f7e:	f000 fc2d 	bl	80027dc <HAL_TIM_MspPostInit>

}
 8001f82:	bf00      	nop
 8001f84:	3770      	adds	r7, #112	@ 0x70
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	2000040c 	.word	0x2000040c
 8001f90:	40012c00 	.word	0x40012c00

08001f94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f9a:	f107 0310 	add.w	r3, r7, #16
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800202c <MX_TIM2_Init+0x98>)
 8001fb4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fb8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15-1;
 8001fba:	4b1c      	ldr	r3, [pc, #112]	@ (800202c <MX_TIM2_Init+0x98>)
 8001fbc:	220e      	movs	r2, #14
 8001fbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <MX_TIM2_Init+0x98>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8001fc6:	4b19      	ldr	r3, [pc, #100]	@ (800202c <MX_TIM2_Init+0x98>)
 8001fc8:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001fcc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fce:	4b17      	ldr	r3, [pc, #92]	@ (800202c <MX_TIM2_Init+0x98>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd4:	4b15      	ldr	r3, [pc, #84]	@ (800202c <MX_TIM2_Init+0x98>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fda:	4814      	ldr	r0, [pc, #80]	@ (800202c <MX_TIM2_Init+0x98>)
 8001fdc:	f004 fcc0 	bl	8006960 <HAL_TIM_Base_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001fe6:	f000 f9bf 	bl	8002368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ff0:	f107 0310 	add.w	r3, r7, #16
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	480d      	ldr	r0, [pc, #52]	@ (800202c <MX_TIM2_Init+0x98>)
 8001ff8:	f005 f988 	bl	800730c <HAL_TIM_ConfigClockSource>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002002:	f000 f9b1 	bl	8002368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002006:	2300      	movs	r3, #0
 8002008:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	4619      	mov	r1, r3
 8002012:	4806      	ldr	r0, [pc, #24]	@ (800202c <MX_TIM2_Init+0x98>)
 8002014:	f006 f81a 	bl	800804c <HAL_TIMEx_MasterConfigSynchronization>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800201e:	f000 f9a3 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002022:	bf00      	nop
 8002024:	3720      	adds	r7, #32
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000458 	.word	0x20000458

08002030 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002034:	4b10      	ldr	r3, [pc, #64]	@ (8002078 <MX_TIM16_Init+0x48>)
 8002036:	4a11      	ldr	r2, [pc, #68]	@ (800207c <MX_TIM16_Init+0x4c>)
 8002038:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 15000 - 1;
 800203a:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <MX_TIM16_Init+0x48>)
 800203c:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8002040:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002042:	4b0d      	ldr	r3, [pc, #52]	@ (8002078 <MX_TIM16_Init+0x48>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8002048:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <MX_TIM16_Init+0x48>)
 800204a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800204e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002050:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <MX_TIM16_Init+0x48>)
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002056:	4b08      	ldr	r3, [pc, #32]	@ (8002078 <MX_TIM16_Init+0x48>)
 8002058:	2200      	movs	r2, #0
 800205a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205c:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <MX_TIM16_Init+0x48>)
 800205e:	2200      	movs	r2, #0
 8002060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002062:	4805      	ldr	r0, [pc, #20]	@ (8002078 <MX_TIM16_Init+0x48>)
 8002064:	f004 fc7c 	bl	8006960 <HAL_TIM_Base_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800206e:	f000 f97b 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200004a4 	.word	0x200004a4
 800207c:	40014400 	.word	0x40014400

08002080 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002084:	4b10      	ldr	r3, [pc, #64]	@ (80020c8 <MX_TIM17_Init+0x48>)
 8002086:	4a11      	ldr	r2, [pc, #68]	@ (80020cc <MX_TIM17_Init+0x4c>)
 8002088:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 15000-1;
 800208a:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <MX_TIM17_Init+0x48>)
 800208c:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8002090:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002092:	4b0d      	ldr	r3, [pc, #52]	@ (80020c8 <MX_TIM17_Init+0x48>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 5000;
 8002098:	4b0b      	ldr	r3, [pc, #44]	@ (80020c8 <MX_TIM17_Init+0x48>)
 800209a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a0:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <MX_TIM17_Init+0x48>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80020a6:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <MX_TIM17_Init+0x48>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ac:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <MX_TIM17_Init+0x48>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80020b2:	4805      	ldr	r0, [pc, #20]	@ (80020c8 <MX_TIM17_Init+0x48>)
 80020b4:	f004 fc54 	bl	8006960 <HAL_TIM_Base_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80020be:	f000 f953 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200004f0 	.word	0x200004f0
 80020cc:	40014800 	.word	0x40014800

080020d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020d4:	4b22      	ldr	r3, [pc, #136]	@ (8002160 <MX_USART2_UART_Init+0x90>)
 80020d6:	4a23      	ldr	r2, [pc, #140]	@ (8002164 <MX_USART2_UART_Init+0x94>)
 80020d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020da:	4b21      	ldr	r3, [pc, #132]	@ (8002160 <MX_USART2_UART_Init+0x90>)
 80020dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002160 <MX_USART2_UART_Init+0x90>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002160 <MX_USART2_UART_Init+0x90>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002160 <MX_USART2_UART_Init+0x90>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002160 <MX_USART2_UART_Init+0x90>)
 80020f6:	220c      	movs	r2, #12
 80020f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020fa:	4b19      	ldr	r3, [pc, #100]	@ (8002160 <MX_USART2_UART_Init+0x90>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002100:	4b17      	ldr	r3, [pc, #92]	@ (8002160 <MX_USART2_UART_Init+0x90>)
 8002102:	2200      	movs	r2, #0
 8002104:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002106:	4b16      	ldr	r3, [pc, #88]	@ (8002160 <MX_USART2_UART_Init+0x90>)
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800210c:	4b14      	ldr	r3, [pc, #80]	@ (8002160 <MX_USART2_UART_Init+0x90>)
 800210e:	2200      	movs	r2, #0
 8002110:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002112:	4b13      	ldr	r3, [pc, #76]	@ (8002160 <MX_USART2_UART_Init+0x90>)
 8002114:	2200      	movs	r2, #0
 8002116:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002118:	4811      	ldr	r0, [pc, #68]	@ (8002160 <MX_USART2_UART_Init+0x90>)
 800211a:	f006 f92c 	bl	8008376 <HAL_UART_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002124:	f000 f920 	bl	8002368 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002128:	2100      	movs	r1, #0
 800212a:	480d      	ldr	r0, [pc, #52]	@ (8002160 <MX_USART2_UART_Init+0x90>)
 800212c:	f006 ff56 	bl	8008fdc <HAL_UARTEx_SetTxFifoThreshold>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002136:	f000 f917 	bl	8002368 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800213a:	2100      	movs	r1, #0
 800213c:	4808      	ldr	r0, [pc, #32]	@ (8002160 <MX_USART2_UART_Init+0x90>)
 800213e:	f006 ff8b 	bl	8009058 <HAL_UARTEx_SetRxFifoThreshold>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002148:	f000 f90e 	bl	8002368 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800214c:	4804      	ldr	r0, [pc, #16]	@ (8002160 <MX_USART2_UART_Init+0x90>)
 800214e:	f006 ff0c 	bl	8008f6a <HAL_UARTEx_DisableFifoMode>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002158:	f000 f906 	bl	8002368 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800215c:	bf00      	nop
 800215e:	bd80      	pop	{r7, pc}
 8002160:	2000059c 	.word	0x2000059c
 8002164:	40004400 	.word	0x40004400

08002168 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800216e:	4b20      	ldr	r3, [pc, #128]	@ (80021f0 <MX_DMA_Init+0x88>)
 8002170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002172:	4a1f      	ldr	r2, [pc, #124]	@ (80021f0 <MX_DMA_Init+0x88>)
 8002174:	f043 0304 	orr.w	r3, r3, #4
 8002178:	6493      	str	r3, [r2, #72]	@ 0x48
 800217a:	4b1d      	ldr	r3, [pc, #116]	@ (80021f0 <MX_DMA_Init+0x88>)
 800217c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002186:	4b1a      	ldr	r3, [pc, #104]	@ (80021f0 <MX_DMA_Init+0x88>)
 8002188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800218a:	4a19      	ldr	r2, [pc, #100]	@ (80021f0 <MX_DMA_Init+0x88>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6493      	str	r3, [r2, #72]	@ 0x48
 8002192:	4b17      	ldr	r3, [pc, #92]	@ (80021f0 <MX_DMA_Init+0x88>)
 8002194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800219e:	4b14      	ldr	r3, [pc, #80]	@ (80021f0 <MX_DMA_Init+0x88>)
 80021a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a2:	4a13      	ldr	r2, [pc, #76]	@ (80021f0 <MX_DMA_Init+0x88>)
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	6493      	str	r3, [r2, #72]	@ 0x48
 80021aa:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <MX_DMA_Init+0x88>)
 80021ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2100      	movs	r1, #0
 80021ba:	200b      	movs	r0, #11
 80021bc:	f002 fba9 	bl	8004912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021c0:	200b      	movs	r0, #11
 80021c2:	f002 fbc0 	bl	8004946 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2100      	movs	r1, #0
 80021ca:	200c      	movs	r0, #12
 80021cc:	f002 fba1 	bl	8004912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80021d0:	200c      	movs	r0, #12
 80021d2:	f002 fbb8 	bl	8004946 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	2038      	movs	r0, #56	@ 0x38
 80021dc:	f002 fb99 	bl	8004912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80021e0:	2038      	movs	r0, #56	@ 0x38
 80021e2:	f002 fbb0 	bl	8004946 <HAL_NVIC_EnableIRQ>

}
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000

080021f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	@ 0x28
 80021f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	60da      	str	r2, [r3, #12]
 8002208:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800220a:	4b54      	ldr	r3, [pc, #336]	@ (800235c <MX_GPIO_Init+0x168>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	4a53      	ldr	r2, [pc, #332]	@ (800235c <MX_GPIO_Init+0x168>)
 8002210:	f043 0304 	orr.w	r3, r3, #4
 8002214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002216:	4b51      	ldr	r3, [pc, #324]	@ (800235c <MX_GPIO_Init+0x168>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002222:	4b4e      	ldr	r3, [pc, #312]	@ (800235c <MX_GPIO_Init+0x168>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	4a4d      	ldr	r2, [pc, #308]	@ (800235c <MX_GPIO_Init+0x168>)
 8002228:	f043 0320 	orr.w	r3, r3, #32
 800222c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800222e:	4b4b      	ldr	r3, [pc, #300]	@ (800235c <MX_GPIO_Init+0x168>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800223a:	4b48      	ldr	r3, [pc, #288]	@ (800235c <MX_GPIO_Init+0x168>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223e:	4a47      	ldr	r2, [pc, #284]	@ (800235c <MX_GPIO_Init+0x168>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002246:	4b45      	ldr	r3, [pc, #276]	@ (800235c <MX_GPIO_Init+0x168>)
 8002248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002252:	4b42      	ldr	r3, [pc, #264]	@ (800235c <MX_GPIO_Init+0x168>)
 8002254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002256:	4a41      	ldr	r2, [pc, #260]	@ (800235c <MX_GPIO_Init+0x168>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800225e:	4b3f      	ldr	r3, [pc, #252]	@ (800235c <MX_GPIO_Init+0x168>)
 8002260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Stg2_NMOS1_Pin|GPIO_PIN_3|GPIO_PIN_4|Stg2_NMOS4_Pin
 800226a:	2200      	movs	r2, #0
 800226c:	f640 41fc 	movw	r1, #3324	@ 0xcfc
 8002270:	483b      	ldr	r0, [pc, #236]	@ (8002360 <MX_GPIO_Init+0x16c>)
 8002272:	f002 ff77 	bl	8005164 <HAL_GPIO_WritePin>
                          |Stg3_NMOS1_Pin|Stg3_NMOS3_Pin|Stg3_NMOS2_Pin|Stg3_NMOS4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPI1_RST_Pin|Stg2_NMOS3_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8002276:	2200      	movs	r2, #0
 8002278:	f648 0160 	movw	r1, #34912	@ 0x8860
 800227c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002280:	f002 ff70 	bl	8005164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_DC_Pin|Stg2_NMOS2_Pin, GPIO_PIN_RESET);
 8002284:	2200      	movs	r2, #0
 8002286:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800228a:	4836      	ldr	r0, [pc, #216]	@ (8002364 <MX_GPIO_Init+0x170>)
 800228c:	f002 ff6a 	bl	8005164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_EXTI13_Pin */
  GPIO_InitStruct.Pin = B1_EXTI13_Pin;
 8002290:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002296:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800229a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	4619      	mov	r1, r3
 80022a6:	482e      	ldr	r0, [pc, #184]	@ (8002360 <MX_GPIO_Init+0x16c>)
 80022a8:	f002 fdda 	bl	8004e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : Stg2_NMOS1_Pin PC3 PC4 Stg2_NMOS4_Pin
                           Stg3_NMOS1_Pin Stg3_NMOS3_Pin Stg3_NMOS2_Pin Stg3_NMOS4_Pin */
  GPIO_InitStruct.Pin = Stg2_NMOS1_Pin|GPIO_PIN_3|GPIO_PIN_4|Stg2_NMOS4_Pin
 80022ac:	f640 43fc 	movw	r3, #3324	@ 0xcfc
 80022b0:	617b      	str	r3, [r7, #20]
                          |Stg3_NMOS1_Pin|Stg3_NMOS3_Pin|Stg3_NMOS2_Pin|Stg3_NMOS4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b2:	2301      	movs	r3, #1
 80022b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022be:	f107 0314 	add.w	r3, r7, #20
 80022c2:	4619      	mov	r1, r3
 80022c4:	4826      	ldr	r0, [pc, #152]	@ (8002360 <MX_GPIO_Init+0x16c>)
 80022c6:	f002 fdcb 	bl	8004e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SPI1_RST_Pin Stg2_NMOS3_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI1_RST_Pin|Stg2_NMOS3_Pin|SPI1_CS_Pin;
 80022ca:	f648 0360 	movw	r3, #34912	@ 0x8860
 80022ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d0:	2301      	movs	r3, #1
 80022d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4619      	mov	r1, r3
 80022e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022e6:	f002 fdbb 	bl	8004e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : Tast1_EXTI1_Pin Tast2_EXTI2_Pin */
  GPIO_InitStruct.Pin = Tast1_EXTI1_Pin|Tast2_EXTI2_Pin;
 80022ea:	2306      	movs	r3, #6
 80022ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022f4:	2302      	movs	r3, #2
 80022f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4619      	mov	r1, r3
 80022fe:	4819      	ldr	r0, [pc, #100]	@ (8002364 <MX_GPIO_Init+0x170>)
 8002300:	f002 fdae 	bl	8004e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_DC_Pin Stg2_NMOS2_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin|Stg2_NMOS2_Pin;
 8002304:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230a:	2301      	movs	r3, #1
 800230c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002312:	2300      	movs	r3, #0
 8002314:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002316:	f107 0314 	add.w	r3, r7, #20
 800231a:	4619      	mov	r1, r3
 800231c:	4811      	ldr	r0, [pc, #68]	@ (8002364 <MX_GPIO_Init+0x170>)
 800231e:	f002 fd9f 	bl	8004e60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	2007      	movs	r0, #7
 8002328:	f002 faf3 	bl	8004912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800232c:	2007      	movs	r0, #7
 800232e:	f002 fb0a 	bl	8004946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2100      	movs	r1, #0
 8002336:	2008      	movs	r0, #8
 8002338:	f002 faeb 	bl	8004912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800233c:	2008      	movs	r0, #8
 800233e:	f002 fb02 	bl	8004946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2100      	movs	r1, #0
 8002346:	2028      	movs	r0, #40	@ 0x28
 8002348:	f002 fae3 	bl	8004912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800234c:	2028      	movs	r0, #40	@ 0x28
 800234e:	f002 fafa 	bl	8004946 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002352:	bf00      	nop
 8002354:	3728      	adds	r7, #40	@ 0x28
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000
 8002360:	48000800 	.word	0x48000800
 8002364:	48000400 	.word	0x48000400

08002368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800236c:	b672      	cpsid	i
}
 800236e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002370:	bf00      	nop
 8002372:	e7fd      	b.n	8002370 <Error_Handler+0x8>

08002374 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237a:	4b0f      	ldr	r3, [pc, #60]	@ (80023b8 <HAL_MspInit+0x44>)
 800237c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800237e:	4a0e      	ldr	r2, [pc, #56]	@ (80023b8 <HAL_MspInit+0x44>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6613      	str	r3, [r2, #96]	@ 0x60
 8002386:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <HAL_MspInit+0x44>)
 8002388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002392:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <HAL_MspInit+0x44>)
 8002394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002396:	4a08      	ldr	r2, [pc, #32]	@ (80023b8 <HAL_MspInit+0x44>)
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800239c:	6593      	str	r3, [r2, #88]	@ 0x58
 800239e:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <HAL_MspInit+0x44>)
 80023a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80023aa:	f002 ffc9 	bl	8005340 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000

080023bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b0a2      	sub	sp, #136	@ 0x88
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023d4:	f107 0320 	add.w	r3, r7, #32
 80023d8:	2254      	movs	r2, #84	@ 0x54
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f007 fc44 	bl	8009c6a <memset>
  if(hadc->Instance==ADC1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023ea:	f040 8082 	bne.w	80024f2 <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80023ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023f2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80023f4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80023f8:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023fa:	f107 0320 	add.w	r3, r7, #32
 80023fe:	4618      	mov	r0, r3
 8002400:	f003 fcdc 	bl	8005dbc <HAL_RCCEx_PeriphCLKConfig>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800240a:	f7ff ffad 	bl	8002368 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800240e:	4b72      	ldr	r3, [pc, #456]	@ (80025d8 <HAL_ADC_MspInit+0x21c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	3301      	adds	r3, #1
 8002414:	4a70      	ldr	r2, [pc, #448]	@ (80025d8 <HAL_ADC_MspInit+0x21c>)
 8002416:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002418:	4b6f      	ldr	r3, [pc, #444]	@ (80025d8 <HAL_ADC_MspInit+0x21c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d10b      	bne.n	8002438 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002420:	4b6e      	ldr	r3, [pc, #440]	@ (80025dc <HAL_ADC_MspInit+0x220>)
 8002422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002424:	4a6d      	ldr	r2, [pc, #436]	@ (80025dc <HAL_ADC_MspInit+0x220>)
 8002426:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800242a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800242c:	4b6b      	ldr	r3, [pc, #428]	@ (80025dc <HAL_ADC_MspInit+0x220>)
 800242e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002430:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002438:	4b68      	ldr	r3, [pc, #416]	@ (80025dc <HAL_ADC_MspInit+0x220>)
 800243a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243c:	4a67      	ldr	r2, [pc, #412]	@ (80025dc <HAL_ADC_MspInit+0x220>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002444:	4b65      	ldr	r3, [pc, #404]	@ (80025dc <HAL_ADC_MspInit+0x220>)
 8002446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002450:	4b62      	ldr	r3, [pc, #392]	@ (80025dc <HAL_ADC_MspInit+0x220>)
 8002452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002454:	4a61      	ldr	r2, [pc, #388]	@ (80025dc <HAL_ADC_MspInit+0x220>)
 8002456:	f043 0302 	orr.w	r3, r3, #2
 800245a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800245c:	4b5f      	ldr	r3, [pc, #380]	@ (80025dc <HAL_ADC_MspInit+0x220>)
 800245e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ADC1_IN1_Poti1_Pin|ADC1_IN2_Poti2_Pin;
 8002468:	2303      	movs	r3, #3
 800246a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800246c:	2303      	movs	r3, #3
 800246e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002474:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002478:	4619      	mov	r1, r3
 800247a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800247e:	f002 fcef 	bl	8004e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002482:	2301      	movs	r3, #1
 8002484:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002486:	2303      	movs	r3, #3
 8002488:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002492:	4619      	mov	r1, r3
 8002494:	4852      	ldr	r0, [pc, #328]	@ (80025e0 <HAL_ADC_MspInit+0x224>)
 8002496:	f002 fce3 	bl	8004e60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800249a:	4b52      	ldr	r3, [pc, #328]	@ (80025e4 <HAL_ADC_MspInit+0x228>)
 800249c:	4a52      	ldr	r2, [pc, #328]	@ (80025e8 <HAL_ADC_MspInit+0x22c>)
 800249e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80024a0:	4b50      	ldr	r3, [pc, #320]	@ (80025e4 <HAL_ADC_MspInit+0x228>)
 80024a2:	2205      	movs	r2, #5
 80024a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024a6:	4b4f      	ldr	r3, [pc, #316]	@ (80025e4 <HAL_ADC_MspInit+0x228>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ac:	4b4d      	ldr	r3, [pc, #308]	@ (80025e4 <HAL_ADC_MspInit+0x228>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80024b2:	4b4c      	ldr	r3, [pc, #304]	@ (80025e4 <HAL_ADC_MspInit+0x228>)
 80024b4:	2280      	movs	r2, #128	@ 0x80
 80024b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024b8:	4b4a      	ldr	r3, [pc, #296]	@ (80025e4 <HAL_ADC_MspInit+0x228>)
 80024ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024c0:	4b48      	ldr	r3, [pc, #288]	@ (80025e4 <HAL_ADC_MspInit+0x228>)
 80024c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80024c6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80024c8:	4b46      	ldr	r3, [pc, #280]	@ (80025e4 <HAL_ADC_MspInit+0x228>)
 80024ca:	2220      	movs	r2, #32
 80024cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024ce:	4b45      	ldr	r3, [pc, #276]	@ (80025e4 <HAL_ADC_MspInit+0x228>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024d4:	4843      	ldr	r0, [pc, #268]	@ (80025e4 <HAL_ADC_MspInit+0x228>)
 80024d6:	f002 fa51 	bl	800497c <HAL_DMA_Init>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 80024e0:	f7ff ff42 	bl	8002368 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a3f      	ldr	r2, [pc, #252]	@ (80025e4 <HAL_ADC_MspInit+0x228>)
 80024e8:	655a      	str	r2, [r3, #84]	@ 0x54
 80024ea:	4a3e      	ldr	r2, [pc, #248]	@ (80025e4 <HAL_ADC_MspInit+0x228>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80024f0:	e06d      	b.n	80025ce <HAL_ADC_MspInit+0x212>
  else if(hadc->Instance==ADC2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a3d      	ldr	r2, [pc, #244]	@ (80025ec <HAL_ADC_MspInit+0x230>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d168      	bne.n	80025ce <HAL_ADC_MspInit+0x212>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80024fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002500:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002502:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002506:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002508:	f107 0320 	add.w	r3, r7, #32
 800250c:	4618      	mov	r0, r3
 800250e:	f003 fc55 	bl	8005dbc <HAL_RCCEx_PeriphCLKConfig>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_ADC_MspInit+0x160>
      Error_Handler();
 8002518:	f7ff ff26 	bl	8002368 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800251c:	4b2e      	ldr	r3, [pc, #184]	@ (80025d8 <HAL_ADC_MspInit+0x21c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	3301      	adds	r3, #1
 8002522:	4a2d      	ldr	r2, [pc, #180]	@ (80025d8 <HAL_ADC_MspInit+0x21c>)
 8002524:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002526:	4b2c      	ldr	r3, [pc, #176]	@ (80025d8 <HAL_ADC_MspInit+0x21c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d10b      	bne.n	8002546 <HAL_ADC_MspInit+0x18a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800252e:	4b2b      	ldr	r3, [pc, #172]	@ (80025dc <HAL_ADC_MspInit+0x220>)
 8002530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002532:	4a2a      	ldr	r2, [pc, #168]	@ (80025dc <HAL_ADC_MspInit+0x220>)
 8002534:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800253a:	4b28      	ldr	r3, [pc, #160]	@ (80025dc <HAL_ADC_MspInit+0x220>)
 800253c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002546:	4b25      	ldr	r3, [pc, #148]	@ (80025dc <HAL_ADC_MspInit+0x220>)
 8002548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800254a:	4a24      	ldr	r2, [pc, #144]	@ (80025dc <HAL_ADC_MspInit+0x220>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002552:	4b22      	ldr	r3, [pc, #136]	@ (80025dc <HAL_ADC_MspInit+0x220>)
 8002554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800255e:	2310      	movs	r3, #16
 8002560:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002562:	2303      	movs	r3, #3
 8002564:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800256e:	4619      	mov	r1, r3
 8002570:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002574:	f002 fc74 	bl	8004e60 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8002578:	4b1d      	ldr	r3, [pc, #116]	@ (80025f0 <HAL_ADC_MspInit+0x234>)
 800257a:	4a1e      	ldr	r2, [pc, #120]	@ (80025f4 <HAL_ADC_MspInit+0x238>)
 800257c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800257e:	4b1c      	ldr	r3, [pc, #112]	@ (80025f0 <HAL_ADC_MspInit+0x234>)
 8002580:	2224      	movs	r2, #36	@ 0x24
 8002582:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002584:	4b1a      	ldr	r3, [pc, #104]	@ (80025f0 <HAL_ADC_MspInit+0x234>)
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800258a:	4b19      	ldr	r3, [pc, #100]	@ (80025f0 <HAL_ADC_MspInit+0x234>)
 800258c:	2200      	movs	r2, #0
 800258e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002590:	4b17      	ldr	r3, [pc, #92]	@ (80025f0 <HAL_ADC_MspInit+0x234>)
 8002592:	2280      	movs	r2, #128	@ 0x80
 8002594:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002596:	4b16      	ldr	r3, [pc, #88]	@ (80025f0 <HAL_ADC_MspInit+0x234>)
 8002598:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800259c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800259e:	4b14      	ldr	r3, [pc, #80]	@ (80025f0 <HAL_ADC_MspInit+0x234>)
 80025a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025a4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80025a6:	4b12      	ldr	r3, [pc, #72]	@ (80025f0 <HAL_ADC_MspInit+0x234>)
 80025a8:	2220      	movs	r2, #32
 80025aa:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80025ac:	4b10      	ldr	r3, [pc, #64]	@ (80025f0 <HAL_ADC_MspInit+0x234>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80025b2:	480f      	ldr	r0, [pc, #60]	@ (80025f0 <HAL_ADC_MspInit+0x234>)
 80025b4:	f002 f9e2 	bl	800497c <HAL_DMA_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_ADC_MspInit+0x206>
      Error_Handler();
 80025be:	f7ff fed3 	bl	8002368 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a0a      	ldr	r2, [pc, #40]	@ (80025f0 <HAL_ADC_MspInit+0x234>)
 80025c6:	655a      	str	r2, [r3, #84]	@ 0x54
 80025c8:	4a09      	ldr	r2, [pc, #36]	@ (80025f0 <HAL_ADC_MspInit+0x234>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80025ce:	bf00      	nop
 80025d0:	3788      	adds	r7, #136	@ 0x88
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	200006a4 	.word	0x200006a4
 80025dc:	40021000 	.word	0x40021000
 80025e0:	48000400 	.word	0x48000400
 80025e4:	200002e8 	.word	0x200002e8
 80025e8:	40020008 	.word	0x40020008
 80025ec:	50000100 	.word	0x50000100
 80025f0:	20000348 	.word	0x20000348
 80025f4:	40020408 	.word	0x40020408

080025f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	@ 0x28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a17      	ldr	r2, [pc, #92]	@ (8002674 <HAL_SPI_MspInit+0x7c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d127      	bne.n	800266a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800261a:	4b17      	ldr	r3, [pc, #92]	@ (8002678 <HAL_SPI_MspInit+0x80>)
 800261c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800261e:	4a16      	ldr	r2, [pc, #88]	@ (8002678 <HAL_SPI_MspInit+0x80>)
 8002620:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002624:	6613      	str	r3, [r2, #96]	@ 0x60
 8002626:	4b14      	ldr	r3, [pc, #80]	@ (8002678 <HAL_SPI_MspInit+0x80>)
 8002628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800262a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	4b11      	ldr	r3, [pc, #68]	@ (8002678 <HAL_SPI_MspInit+0x80>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	4a10      	ldr	r2, [pc, #64]	@ (8002678 <HAL_SPI_MspInit+0x80>)
 8002638:	f043 0302 	orr.w	r3, r3, #2
 800263c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800263e:	4b0e      	ldr	r3, [pc, #56]	@ (8002678 <HAL_SPI_MspInit+0x80>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800264a:	2328      	movs	r3, #40	@ 0x28
 800264c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002656:	2300      	movs	r3, #0
 8002658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800265a:	2305      	movs	r3, #5
 800265c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4619      	mov	r1, r3
 8002664:	4805      	ldr	r0, [pc, #20]	@ (800267c <HAL_SPI_MspInit+0x84>)
 8002666:	f002 fbfb 	bl	8004e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800266a:	bf00      	nop
 800266c:	3728      	adds	r7, #40	@ 0x28
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40013000 	.word	0x40013000
 8002678:	40021000 	.word	0x40021000
 800267c:	48000400 	.word	0x48000400

08002680 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a4d      	ldr	r2, [pc, #308]	@ (80027c4 <HAL_TIM_Base_MspInit+0x144>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d11c      	bne.n	80026cc <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002692:	4b4d      	ldr	r3, [pc, #308]	@ (80027c8 <HAL_TIM_Base_MspInit+0x148>)
 8002694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002696:	4a4c      	ldr	r2, [pc, #304]	@ (80027c8 <HAL_TIM_Base_MspInit+0x148>)
 8002698:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800269c:	6613      	str	r3, [r2, #96]	@ 0x60
 800269e:	4b4a      	ldr	r3, [pc, #296]	@ (80027c8 <HAL_TIM_Base_MspInit+0x148>)
 80026a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80026aa:	2200      	movs	r2, #0
 80026ac:	2100      	movs	r1, #0
 80026ae:	2019      	movs	r0, #25
 80026b0:	f002 f92f 	bl	8004912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80026b4:	2019      	movs	r0, #25
 80026b6:	f002 f946 	bl	8004946 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	201a      	movs	r0, #26
 80026c0:	f002 f927 	bl	8004912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80026c4:	201a      	movs	r0, #26
 80026c6:	f002 f93e 	bl	8004946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80026ca:	e077      	b.n	80027bc <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026d4:	d13f      	bne.n	8002756 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026d6:	4b3c      	ldr	r3, [pc, #240]	@ (80027c8 <HAL_TIM_Base_MspInit+0x148>)
 80026d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026da:	4a3b      	ldr	r2, [pc, #236]	@ (80027c8 <HAL_TIM_Base_MspInit+0x148>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80026e2:	4b39      	ldr	r3, [pc, #228]	@ (80027c8 <HAL_TIM_Base_MspInit+0x148>)
 80026e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_up.Instance = DMA1_Channel2;
 80026ee:	4b37      	ldr	r3, [pc, #220]	@ (80027cc <HAL_TIM_Base_MspInit+0x14c>)
 80026f0:	4a37      	ldr	r2, [pc, #220]	@ (80027d0 <HAL_TIM_Base_MspInit+0x150>)
 80026f2:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Request = DMA_REQUEST_TIM2_UP;
 80026f4:	4b35      	ldr	r3, [pc, #212]	@ (80027cc <HAL_TIM_Base_MspInit+0x14c>)
 80026f6:	223c      	movs	r2, #60	@ 0x3c
 80026f8:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026fa:	4b34      	ldr	r3, [pc, #208]	@ (80027cc <HAL_TIM_Base_MspInit+0x14c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002700:	4b32      	ldr	r3, [pc, #200]	@ (80027cc <HAL_TIM_Base_MspInit+0x14c>)
 8002702:	2200      	movs	r2, #0
 8002704:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8002706:	4b31      	ldr	r3, [pc, #196]	@ (80027cc <HAL_TIM_Base_MspInit+0x14c>)
 8002708:	2280      	movs	r2, #128	@ 0x80
 800270a:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800270c:	4b2f      	ldr	r3, [pc, #188]	@ (80027cc <HAL_TIM_Base_MspInit+0x14c>)
 800270e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002712:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002714:	4b2d      	ldr	r3, [pc, #180]	@ (80027cc <HAL_TIM_Base_MspInit+0x14c>)
 8002716:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800271a:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 800271c:	4b2b      	ldr	r3, [pc, #172]	@ (80027cc <HAL_TIM_Base_MspInit+0x14c>)
 800271e:	2200      	movs	r2, #0
 8002720:	61da      	str	r2, [r3, #28]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8002722:	4b2a      	ldr	r3, [pc, #168]	@ (80027cc <HAL_TIM_Base_MspInit+0x14c>)
 8002724:	2200      	movs	r2, #0
 8002726:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8002728:	4828      	ldr	r0, [pc, #160]	@ (80027cc <HAL_TIM_Base_MspInit+0x14c>)
 800272a:	f002 f927 	bl	800497c <HAL_DMA_Init>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_TIM_Base_MspInit+0xb8>
      Error_Handler();
 8002734:	f7ff fe18 	bl	8002368 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a24      	ldr	r2, [pc, #144]	@ (80027cc <HAL_TIM_Base_MspInit+0x14c>)
 800273c:	621a      	str	r2, [r3, #32]
 800273e:	4a23      	ldr	r2, [pc, #140]	@ (80027cc <HAL_TIM_Base_MspInit+0x14c>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002744:	2200      	movs	r2, #0
 8002746:	2100      	movs	r1, #0
 8002748:	201c      	movs	r0, #28
 800274a:	f002 f8e2 	bl	8004912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800274e:	201c      	movs	r0, #28
 8002750:	f002 f8f9 	bl	8004946 <HAL_NVIC_EnableIRQ>
}
 8002754:	e032      	b.n	80027bc <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM16)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1e      	ldr	r2, [pc, #120]	@ (80027d4 <HAL_TIM_Base_MspInit+0x154>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d114      	bne.n	800278a <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002760:	4b19      	ldr	r3, [pc, #100]	@ (80027c8 <HAL_TIM_Base_MspInit+0x148>)
 8002762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002764:	4a18      	ldr	r2, [pc, #96]	@ (80027c8 <HAL_TIM_Base_MspInit+0x148>)
 8002766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800276a:	6613      	str	r3, [r2, #96]	@ 0x60
 800276c:	4b16      	ldr	r3, [pc, #88]	@ (80027c8 <HAL_TIM_Base_MspInit+0x148>)
 800276e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002778:	2200      	movs	r2, #0
 800277a:	2100      	movs	r1, #0
 800277c:	2019      	movs	r0, #25
 800277e:	f002 f8c8 	bl	8004912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002782:	2019      	movs	r0, #25
 8002784:	f002 f8df 	bl	8004946 <HAL_NVIC_EnableIRQ>
}
 8002788:	e018      	b.n	80027bc <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM17)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a12      	ldr	r2, [pc, #72]	@ (80027d8 <HAL_TIM_Base_MspInit+0x158>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d113      	bne.n	80027bc <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002794:	4b0c      	ldr	r3, [pc, #48]	@ (80027c8 <HAL_TIM_Base_MspInit+0x148>)
 8002796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002798:	4a0b      	ldr	r2, [pc, #44]	@ (80027c8 <HAL_TIM_Base_MspInit+0x148>)
 800279a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800279e:	6613      	str	r3, [r2, #96]	@ 0x60
 80027a0:	4b09      	ldr	r3, [pc, #36]	@ (80027c8 <HAL_TIM_Base_MspInit+0x148>)
 80027a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80027ac:	2200      	movs	r2, #0
 80027ae:	2100      	movs	r1, #0
 80027b0:	201a      	movs	r0, #26
 80027b2:	f002 f8ae 	bl	8004912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80027b6:	201a      	movs	r0, #26
 80027b8:	f002 f8c5 	bl	8004946 <HAL_NVIC_EnableIRQ>
}
 80027bc:	bf00      	nop
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40012c00 	.word	0x40012c00
 80027c8:	40021000 	.word	0x40021000
 80027cc:	2000053c 	.word	0x2000053c
 80027d0:	4002001c 	.word	0x4002001c
 80027d4:	40014400 	.word	0x40014400
 80027d8:	40014800 	.word	0x40014800

080027dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	@ 0x28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a20      	ldr	r2, [pc, #128]	@ (800287c <HAL_TIM_MspPostInit+0xa0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d13a      	bne.n	8002874 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fe:	4b20      	ldr	r3, [pc, #128]	@ (8002880 <HAL_TIM_MspPostInit+0xa4>)
 8002800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002802:	4a1f      	ldr	r2, [pc, #124]	@ (8002880 <HAL_TIM_MspPostInit+0xa4>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800280a:	4b1d      	ldr	r3, [pc, #116]	@ (8002880 <HAL_TIM_MspPostInit+0xa4>)
 800280c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002816:	4b1a      	ldr	r3, [pc, #104]	@ (8002880 <HAL_TIM_MspPostInit+0xa4>)
 8002818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281a:	4a19      	ldr	r2, [pc, #100]	@ (8002880 <HAL_TIM_MspPostInit+0xa4>)
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002822:	4b17      	ldr	r3, [pc, #92]	@ (8002880 <HAL_TIM_MspPostInit+0xa4>)
 8002824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1N_NMOS2_LS_Pin|TIM1_CH1_NMOS1_HS_Pin|TIM1_CH2_NMOS3_HS_Pin;
 800282e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002840:	2306      	movs	r3, #6
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	4619      	mov	r1, r3
 800284a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800284e:	f002 fb07 	bl	8004e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM1_CH2N_NMOS4_LS_Pin;
 8002852:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002858:	2302      	movs	r3, #2
 800285a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002860:	2300      	movs	r3, #0
 8002862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002864:	2306      	movs	r3, #6
 8002866:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM1_CH2N_NMOS4_LS_GPIO_Port, &GPIO_InitStruct);
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	4619      	mov	r1, r3
 800286e:	4805      	ldr	r0, [pc, #20]	@ (8002884 <HAL_TIM_MspPostInit+0xa8>)
 8002870:	f002 faf6 	bl	8004e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002874:	bf00      	nop
 8002876:	3728      	adds	r7, #40	@ 0x28
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40012c00 	.word	0x40012c00
 8002880:	40021000 	.word	0x40021000
 8002884:	48000400 	.word	0x48000400

08002888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b09e      	sub	sp, #120	@ 0x78
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028a0:	f107 0310 	add.w	r3, r7, #16
 80028a4:	2254      	movs	r2, #84	@ 0x54
 80028a6:	2100      	movs	r1, #0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f007 f9de 	bl	8009c6a <memset>
  if(huart->Instance==USART2)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002930 <HAL_UART_MspInit+0xa8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d136      	bne.n	8002926 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80028b8:	2302      	movs	r3, #2
 80028ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80028bc:	2300      	movs	r3, #0
 80028be:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	4618      	mov	r0, r3
 80028c6:	f003 fa79 	bl	8005dbc <HAL_RCCEx_PeriphCLKConfig>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80028d0:	f7ff fd4a 	bl	8002368 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028d4:	4b17      	ldr	r3, [pc, #92]	@ (8002934 <HAL_UART_MspInit+0xac>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d8:	4a16      	ldr	r2, [pc, #88]	@ (8002934 <HAL_UART_MspInit+0xac>)
 80028da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028de:	6593      	str	r3, [r2, #88]	@ 0x58
 80028e0:	4b14      	ldr	r3, [pc, #80]	@ (8002934 <HAL_UART_MspInit+0xac>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ec:	4b11      	ldr	r3, [pc, #68]	@ (8002934 <HAL_UART_MspInit+0xac>)
 80028ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f0:	4a10      	ldr	r2, [pc, #64]	@ (8002934 <HAL_UART_MspInit+0xac>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002934 <HAL_UART_MspInit+0xac>)
 80028fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002904:	230c      	movs	r3, #12
 8002906:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002910:	2300      	movs	r3, #0
 8002912:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002914:	2307      	movs	r3, #7
 8002916:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800291c:	4619      	mov	r1, r3
 800291e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002922:	f002 fa9d 	bl	8004e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002926:	bf00      	nop
 8002928:	3778      	adds	r7, #120	@ 0x78
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40004400 	.word	0x40004400
 8002934:	40021000 	.word	0x40021000

08002938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800293c:	bf00      	nop
 800293e:	e7fd      	b.n	800293c <NMI_Handler+0x4>

08002940 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002944:	bf00      	nop
 8002946:	e7fd      	b.n	8002944 <HardFault_Handler+0x4>

08002948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800294c:	bf00      	nop
 800294e:	e7fd      	b.n	800294c <MemManage_Handler+0x4>

08002950 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002954:	bf00      	nop
 8002956:	e7fd      	b.n	8002954 <BusFault_Handler+0x4>

08002958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800295c:	bf00      	nop
 800295e:	e7fd      	b.n	800295c <UsageFault_Handler+0x4>

08002960 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800298e:	f000 fb41 	bl	8003014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}

08002996 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Tast1_EXTI1_Pin);
 800299a:	2002      	movs	r0, #2
 800299c:	f002 fc14 	bl	80051c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Tast2_EXTI2_Pin);
 80029a8:	2004      	movs	r0, #4
 80029aa:	f002 fc0d 	bl	80051c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029b8:	4802      	ldr	r0, [pc, #8]	@ (80029c4 <DMA1_Channel1_IRQHandler+0x10>)
 80029ba:	f002 f902 	bl	8004bc2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	200002e8 	.word	0x200002e8

080029c8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 80029cc:	4802      	ldr	r0, [pc, #8]	@ (80029d8 <DMA1_Channel2_IRQHandler+0x10>)
 80029ce:	f002 f8f8 	bl	8004bc2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	2000053c 	.word	0x2000053c

080029dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029e0:	4803      	ldr	r0, [pc, #12]	@ (80029f0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80029e2:	f004 fa2f 	bl	8006e44 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80029e6:	4803      	ldr	r0, [pc, #12]	@ (80029f4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80029e8:	f004 fa2c 	bl	8006e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80029ec:	bf00      	nop
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	2000040c 	.word	0x2000040c
 80029f4:	200004a4 	.word	0x200004a4

080029f8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029fc:	4803      	ldr	r0, [pc, #12]	@ (8002a0c <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 80029fe:	f004 fa21 	bl	8006e44 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8002a02:	4803      	ldr	r0, [pc, #12]	@ (8002a10 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8002a04:	f004 fa1e 	bl	8006e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	2000040c 	.word	0x2000040c
 8002a10:	200004f0 	.word	0x200004f0

08002a14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a18:	4802      	ldr	r0, [pc, #8]	@ (8002a24 <TIM2_IRQHandler+0x10>)
 8002a1a:	f004 fa13 	bl	8006e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000458 	.word	0x20000458

08002a28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_EXTI13_Pin);
 8002a2c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002a30:	f002 fbca 	bl	80051c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002a3c:	4802      	ldr	r0, [pc, #8]	@ (8002a48 <DMA2_Channel1_IRQHandler+0x10>)
 8002a3e:	f002 f8c0 	bl	8004bc2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000348 	.word	0x20000348

08002a4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return 1;
 8002a50:	2301      	movs	r3, #1
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <_kill>:

int _kill(int pid, int sig)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a66:	f007 f953 	bl	8009d10 <__errno>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2216      	movs	r2, #22
 8002a6e:	601a      	str	r2, [r3, #0]
  return -1;
 8002a70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <_exit>:

void _exit (int status)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a84:	f04f 31ff 	mov.w	r1, #4294967295
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff ffe7 	bl	8002a5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a8e:	bf00      	nop
 8002a90:	e7fd      	b.n	8002a8e <_exit+0x12>

08002a92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	e00a      	b.n	8002aba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002aa4:	f3af 8000 	nop.w
 8002aa8:	4601      	mov	r1, r0
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	60ba      	str	r2, [r7, #8]
 8002ab0:	b2ca      	uxtb	r2, r1
 8002ab2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	dbf0      	blt.n	8002aa4 <_read+0x12>
  }

  return len;
 8002ac2:	687b      	ldr	r3, [r7, #4]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	e009      	b.n	8002af2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	60ba      	str	r2, [r7, #8]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3301      	adds	r3, #1
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	dbf1      	blt.n	8002ade <_write+0x12>
  }
  return len;
 8002afa:	687b      	ldr	r3, [r7, #4]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <_close>:

int _close(int file)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b2c:	605a      	str	r2, [r3, #4]
  return 0;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <_isatty>:

int _isatty(int file)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b44:	2301      	movs	r3, #1
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b74:	4a14      	ldr	r2, [pc, #80]	@ (8002bc8 <_sbrk+0x5c>)
 8002b76:	4b15      	ldr	r3, [pc, #84]	@ (8002bcc <_sbrk+0x60>)
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b80:	4b13      	ldr	r3, [pc, #76]	@ (8002bd0 <_sbrk+0x64>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b88:	4b11      	ldr	r3, [pc, #68]	@ (8002bd0 <_sbrk+0x64>)
 8002b8a:	4a12      	ldr	r2, [pc, #72]	@ (8002bd4 <_sbrk+0x68>)
 8002b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b8e:	4b10      	ldr	r3, [pc, #64]	@ (8002bd0 <_sbrk+0x64>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4413      	add	r3, r2
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d207      	bcs.n	8002bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b9c:	f007 f8b8 	bl	8009d10 <__errno>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	220c      	movs	r2, #12
 8002ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8002baa:	e009      	b.n	8002bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bac:	4b08      	ldr	r3, [pc, #32]	@ (8002bd0 <_sbrk+0x64>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bb2:	4b07      	ldr	r3, [pc, #28]	@ (8002bd0 <_sbrk+0x64>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	4a05      	ldr	r2, [pc, #20]	@ (8002bd0 <_sbrk+0x64>)
 8002bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20020000 	.word	0x20020000
 8002bcc:	00000400 	.word	0x00000400
 8002bd0:	200006a8 	.word	0x200006a8
 8002bd4:	20000818 	.word	0x20000818

08002bd8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002bdc:	4b06      	ldr	r3, [pc, #24]	@ (8002bf8 <SystemInit+0x20>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be2:	4a05      	ldr	r2, [pc, #20]	@ (8002bf8 <SystemInit+0x20>)
 8002be4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002be8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <enter_handler_state>:
uint8_t px_ofs1 = 11;	// Offset in pixel

adc_raw_values adc_raw_values1;
adc_values adc_values1;

void enter_handler_state(int state) {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af04      	add	r7, sp, #16
 8002c02:	6078      	str	r0, [r7, #4]
	switch (state) {
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <enter_handler_state+0x16>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d024      	beq.n	8002c5a <enter_handler_state+0x5e>
		// Start Timer2 for adjusting duty cycle of the PWM
		HAL_TIM_Base_Start_IT(&htim2);
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 8002c10:	e04d      	b.n	8002cae <enter_handler_state+0xb2>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002c12:	2200      	movs	r2, #0
 8002c14:	2120      	movs	r1, #32
 8002c16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c1a:	f002 faa3 	bl	8005164 <HAL_GPIO_WritePin>
		handler_state = IDLE;
 8002c1e:	4b26      	ldr	r3, [pc, #152]	@ (8002cb8 <enter_handler_state+0xbc>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
		fillScreen(BLACK);
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7fe fabb 	bl	80011a0 <fillScreen>
		ST7735_WriteString(0, 0, "State: IDLE", Font_7x10, GREEN, BLACK);
 8002c2a:	4b24      	ldr	r3, [pc, #144]	@ (8002cbc <enter_handler_state+0xc0>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	9202      	str	r2, [sp, #8]
 8002c30:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002c34:	9201      	str	r2, [sp, #4]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	9200      	str	r2, [sp, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a20      	ldr	r2, [pc, #128]	@ (8002cc0 <enter_handler_state+0xc4>)
 8002c3e:	2100      	movs	r1, #0
 8002c40:	2000      	movs	r0, #0
 8002c42:	f7fe fd1b 	bl	800167c <ST7735_WriteString>
		drawFastHLine(0, px_ofs1, 128, WHITE);
 8002c46:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc4 <enter_handler_state+0xc8>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	b219      	sxth	r1, r3
 8002c4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c50:	2280      	movs	r2, #128	@ 0x80
 8002c52:	2000      	movs	r0, #0
 8002c54:	f7fe fa7e 	bl	8001154 <drawFastHLine>
		break;
 8002c58:	e029      	b.n	8002cae <enter_handler_state+0xb2>
		time_val = 0;
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <enter_handler_state+0xcc>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002c60:	2201      	movs	r2, #1
 8002c62:	2120      	movs	r1, #32
 8002c64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c68:	f002 fa7c 	bl	8005164 <HAL_GPIO_WritePin>
		fillScreen(BLACK);
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7fe fa97 	bl	80011a0 <fillScreen>
		ST7735_WriteString(0, 0, "State: ADC_Values", Font_7x10, GREEN, BLACK);
 8002c72:	4b12      	ldr	r3, [pc, #72]	@ (8002cbc <enter_handler_state+0xc0>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	9202      	str	r2, [sp, #8]
 8002c78:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002c7c:	9201      	str	r2, [sp, #4]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	9200      	str	r2, [sp, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a11      	ldr	r2, [pc, #68]	@ (8002ccc <enter_handler_state+0xd0>)
 8002c86:	2100      	movs	r1, #0
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7fe fcf7 	bl	800167c <ST7735_WriteString>
		drawFastHLine(0, px_ofs1, 128, WHITE);
 8002c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc4 <enter_handler_state+0xc8>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	b219      	sxth	r1, r3
 8002c94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c98:	2280      	movs	r2, #128	@ 0x80
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7fe fa5a 	bl	8001154 <drawFastHLine>
		HAL_TIM_Base_Start_IT(&htim17);
 8002ca0:	480b      	ldr	r0, [pc, #44]	@ (8002cd0 <enter_handler_state+0xd4>)
 8002ca2:	f003 feb5 	bl	8006a10 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim2);
 8002ca6:	480b      	ldr	r0, [pc, #44]	@ (8002cd4 <enter_handler_state+0xd8>)
 8002ca8:	f003 feb2 	bl	8006a10 <HAL_TIM_Base_Start_IT>
		break;
 8002cac:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200006ac 	.word	0x200006ac
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	0800c8e8 	.word	0x0800c8e8
 8002cc4:	20000014 	.word	0x20000014
 8002cc8:	200006ae 	.word	0x200006ae
 8002ccc:	0800c8f4 	.word	0x0800c8f4
 8002cd0:	200004f0 	.word	0x200004f0
 8002cd4:	20000458 	.word	0x20000458

08002cd8 <exec_handler_state>:

//-----------------------------------------------------------------------------------------------------------------------

void exec_handler_state(int state) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
	switch (state) {
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80b9 	beq.w	8002e5a <exec_handler_state+0x182>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d000      	beq.n	8002cf0 <exec_handler_state+0x18>

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 8002cee:	e0b5      	b.n	8002e5c <exec_handler_state+0x184>
		if (time_val > 250) {
 8002cf0:	4b61      	ldr	r3, [pc, #388]	@ (8002e78 <exec_handler_state+0x1a0>)
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	2bfa      	cmp	r3, #250	@ 0xfa
 8002cf6:	d907      	bls.n	8002d08 <exec_handler_state+0x30>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002cf8:	2120      	movs	r1, #32
 8002cfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cfe:	f002 fa49 	bl	8005194 <HAL_GPIO_TogglePin>
			time_val = 0;
 8002d02:	4b5d      	ldr	r3, [pc, #372]	@ (8002e78 <exec_handler_state+0x1a0>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8002d08:	2110      	movs	r1, #16
 8002d0a:	485c      	ldr	r0, [pc, #368]	@ (8002e7c <exec_handler_state+0x1a4>)
 8002d0c:	f002 fa42 	bl	8005194 <HAL_GPIO_TogglePin>
		adc_raw_values1.poti1_V = (AD_RES_BUFFER_ADC1[0] << 4); // Map 12 Bit to 16 Bit values
 8002d10:	4b5b      	ldr	r3, [pc, #364]	@ (8002e80 <exec_handler_state+0x1a8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	4b5a      	ldr	r3, [pc, #360]	@ (8002e84 <exec_handler_state+0x1ac>)
 8002d1c:	801a      	strh	r2, [r3, #0]
		adc_values1.poti1_Vf = (3.3*(float)adc_raw_values1.poti1_V)/65535;
 8002d1e:	4b59      	ldr	r3, [pc, #356]	@ (8002e84 <exec_handler_state+0x1ac>)
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2a:	ee17 0a90 	vmov	r0, s15
 8002d2e:	f7fd fc33 	bl	8000598 <__aeabi_f2d>
 8002d32:	a34d      	add	r3, pc, #308	@ (adr r3, 8002e68 <exec_handler_state+0x190>)
 8002d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d38:	f7fd fc86 	bl	8000648 <__aeabi_dmul>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4610      	mov	r0, r2
 8002d42:	4619      	mov	r1, r3
 8002d44:	a34a      	add	r3, pc, #296	@ (adr r3, 8002e70 <exec_handler_state+0x198>)
 8002d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4a:	f7fd fda7 	bl	800089c <__aeabi_ddiv>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4610      	mov	r0, r2
 8002d54:	4619      	mov	r1, r3
 8002d56:	f7fd ff4f 	bl	8000bf8 <__aeabi_d2f>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4a4a      	ldr	r2, [pc, #296]	@ (8002e88 <exec_handler_state+0x1b0>)
 8002d5e:	6013      	str	r3, [r2, #0]
	    adc_raw_values1.poti2_V = (AD_RES_BUFFER_ADC1[1] << 4);
 8002d60:	4b47      	ldr	r3, [pc, #284]	@ (8002e80 <exec_handler_state+0x1a8>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	4b46      	ldr	r3, [pc, #280]	@ (8002e84 <exec_handler_state+0x1ac>)
 8002d6c:	805a      	strh	r2, [r3, #2]
	    adc_values1.poti2_Vf = (3.3*(float)adc_raw_values1.poti2_V)/65535;
 8002d6e:	4b45      	ldr	r3, [pc, #276]	@ (8002e84 <exec_handler_state+0x1ac>)
 8002d70:	885b      	ldrh	r3, [r3, #2]
 8002d72:	ee07 3a90 	vmov	s15, r3
 8002d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d7a:	ee17 0a90 	vmov	r0, s15
 8002d7e:	f7fd fc0b 	bl	8000598 <__aeabi_f2d>
 8002d82:	a339      	add	r3, pc, #228	@ (adr r3, 8002e68 <exec_handler_state+0x190>)
 8002d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d88:	f7fd fc5e 	bl	8000648 <__aeabi_dmul>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4610      	mov	r0, r2
 8002d92:	4619      	mov	r1, r3
 8002d94:	a336      	add	r3, pc, #216	@ (adr r3, 8002e70 <exec_handler_state+0x198>)
 8002d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9a:	f7fd fd7f 	bl	800089c <__aeabi_ddiv>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4610      	mov	r0, r2
 8002da4:	4619      	mov	r1, r3
 8002da6:	f7fd ff27 	bl	8000bf8 <__aeabi_d2f>
 8002daa:	4603      	mov	r3, r0
 8002dac:	4a36      	ldr	r2, [pc, #216]	@ (8002e88 <exec_handler_state+0x1b0>)
 8002dae:	6053      	str	r3, [r2, #4]
	    adc_raw_values1.bnc1_V = (AD_RES_BUFFER_ADC1[2] << 4);
 8002db0:	4b33      	ldr	r3, [pc, #204]	@ (8002e80 <exec_handler_state+0x1a8>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	4b32      	ldr	r3, [pc, #200]	@ (8002e84 <exec_handler_state+0x1ac>)
 8002dbc:	809a      	strh	r2, [r3, #4]
	    adc_values1.bnc1_Vf = (3.3*(float) adc_raw_values1.bnc1_V)/65535;
 8002dbe:	4b31      	ldr	r3, [pc, #196]	@ (8002e84 <exec_handler_state+0x1ac>)
 8002dc0:	889b      	ldrh	r3, [r3, #4]
 8002dc2:	ee07 3a90 	vmov	s15, r3
 8002dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dca:	ee17 0a90 	vmov	r0, s15
 8002dce:	f7fd fbe3 	bl	8000598 <__aeabi_f2d>
 8002dd2:	a325      	add	r3, pc, #148	@ (adr r3, 8002e68 <exec_handler_state+0x190>)
 8002dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd8:	f7fd fc36 	bl	8000648 <__aeabi_dmul>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	a322      	add	r3, pc, #136	@ (adr r3, 8002e70 <exec_handler_state+0x198>)
 8002de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dea:	f7fd fd57 	bl	800089c <__aeabi_ddiv>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	f7fd feff 	bl	8000bf8 <__aeabi_d2f>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4a22      	ldr	r2, [pc, #136]	@ (8002e88 <exec_handler_state+0x1b0>)
 8002dfe:	6093      	str	r3, [r2, #8]
	    adc_raw_values1.bnc2_V = (AD_RES_BUFFER_ADC2[0] << 4);
 8002e00:	4b22      	ldr	r3, [pc, #136]	@ (8002e8c <exec_handler_state+0x1b4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e84 <exec_handler_state+0x1ac>)
 8002e0c:	80da      	strh	r2, [r3, #6]
	    adc_values1.bnc2_Vf = (3.3*(float) adc_raw_values1.bnc2_V)/65535;
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002e84 <exec_handler_state+0x1ac>)
 8002e10:	88db      	ldrh	r3, [r3, #6]
 8002e12:	ee07 3a90 	vmov	s15, r3
 8002e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e1a:	ee17 0a90 	vmov	r0, s15
 8002e1e:	f7fd fbbb 	bl	8000598 <__aeabi_f2d>
 8002e22:	a311      	add	r3, pc, #68	@ (adr r3, 8002e68 <exec_handler_state+0x190>)
 8002e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e28:	f7fd fc0e 	bl	8000648 <__aeabi_dmul>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4610      	mov	r0, r2
 8002e32:	4619      	mov	r1, r3
 8002e34:	a30e      	add	r3, pc, #56	@ (adr r3, 8002e70 <exec_handler_state+0x198>)
 8002e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3a:	f7fd fd2f 	bl	800089c <__aeabi_ddiv>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4610      	mov	r0, r2
 8002e44:	4619      	mov	r1, r3
 8002e46:	f7fd fed7 	bl	8000bf8 <__aeabi_d2f>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4a0e      	ldr	r2, [pc, #56]	@ (8002e88 <exec_handler_state+0x1b0>)
 8002e4e:	60d3      	str	r3, [r2, #12]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8002e50:	2110      	movs	r1, #16
 8002e52:	480a      	ldr	r0, [pc, #40]	@ (8002e7c <exec_handler_state+0x1a4>)
 8002e54:	f002 f99e 	bl	8005194 <HAL_GPIO_TogglePin>
		break;
 8002e58:	e000      	b.n	8002e5c <exec_handler_state+0x184>
		break;
 8002e5a:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	f3af 8000 	nop.w
 8002e68:	66666666 	.word	0x66666666
 8002e6c:	400a6666 	.word	0x400a6666
 8002e70:	00000000 	.word	0x00000000
 8002e74:	40efffe0 	.word	0x40efffe0
 8002e78:	200006ae 	.word	0x200006ae
 8002e7c:	48000800 	.word	0x48000800
 8002e80:	20000630 	.word	0x20000630
 8002e84:	200006b0 	.word	0x200006b0
 8002e88:	200006b8 	.word	0x200006b8
 8002e8c:	2000063c 	.word	0x2000063c

08002e90 <leave_handler_state>:

//-----------------------------------------------------------------------------------------------------------------------

void leave_handler_state(int state) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	switch (state) {
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <leave_handler_state+0x24>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d000      	beq.n	8002ea6 <leave_handler_state+0x16>
		// Stop Timer2 for updating duty cycle of the PWM
		HAL_TIM_Base_Stop_IT(&htim2);
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 8002ea4:	e007      	b.n	8002eb6 <leave_handler_state+0x26>
		HAL_TIM_Base_Start_IT(&htim17);
 8002ea6:	4806      	ldr	r0, [pc, #24]	@ (8002ec0 <leave_handler_state+0x30>)
 8002ea8:	f003 fdb2 	bl	8006a10 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Stop_IT(&htim2);
 8002eac:	4805      	ldr	r0, [pc, #20]	@ (8002ec4 <leave_handler_state+0x34>)
 8002eae:	f003 fe27 	bl	8006b00 <HAL_TIM_Base_Stop_IT>
		break;
 8002eb2:	e000      	b.n	8002eb6 <leave_handler_state+0x26>
		break;
 8002eb4:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200004f0 	.word	0x200004f0
 8002ec4:	20000458 	.word	0x20000458

08002ec8 <handler_task>:

//-----------------------------------------------------------------------------------------------------------------------

void handler_task(void) {
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
	exec_handler_state(handler_state);
 8002ecc:	4b03      	ldr	r3, [pc, #12]	@ (8002edc <handler_task+0x14>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff01 	bl	8002cd8 <exec_handler_state>
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200006ac 	.word	0x200006ac

08002ee0 <set_handler_state>:

void set_handler_state(uint8_t state) {
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	71fb      	strb	r3, [r7, #7]
	prev_handler_state = handler_state;
 8002eea:	4b0a      	ldr	r3, [pc, #40]	@ (8002f14 <set_handler_state+0x34>)
 8002eec:	781a      	ldrb	r2, [r3, #0]
 8002eee:	4b0a      	ldr	r3, [pc, #40]	@ (8002f18 <set_handler_state+0x38>)
 8002ef0:	701a      	strb	r2, [r3, #0]
	handler_state = state;
 8002ef2:	4a08      	ldr	r2, [pc, #32]	@ (8002f14 <set_handler_state+0x34>)
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	7013      	strb	r3, [r2, #0]
	leave_handler_state(prev_handler_state);
 8002ef8:	4b07      	ldr	r3, [pc, #28]	@ (8002f18 <set_handler_state+0x38>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ffc7 	bl	8002e90 <leave_handler_state>
	enter_handler_state(state);
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fe79 	bl	8002bfc <enter_handler_state>
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	200006ac 	.word	0x200006ac
 8002f18:	200006ad 	.word	0x200006ad

08002f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f1c:	480d      	ldr	r0, [pc, #52]	@ (8002f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f1e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f20:	f7ff fe5a 	bl	8002bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f24:	480c      	ldr	r0, [pc, #48]	@ (8002f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f26:	490d      	ldr	r1, [pc, #52]	@ (8002f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f28:	4a0d      	ldr	r2, [pc, #52]	@ (8002f60 <LoopForever+0xe>)
  movs r3, #0
 8002f2a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002f2c:	e002      	b.n	8002f34 <LoopCopyDataInit>

08002f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f32:	3304      	adds	r3, #4

08002f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f38:	d3f9      	bcc.n	8002f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f3c:	4c0a      	ldr	r4, [pc, #40]	@ (8002f68 <LoopForever+0x16>)
  movs r3, #0
 8002f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f40:	e001      	b.n	8002f46 <LoopFillZerobss>

08002f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f44:	3204      	adds	r2, #4

08002f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f48:	d3fb      	bcc.n	8002f42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f4a:	f006 fee7 	bl	8009d1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f4e:	f7fe fd8b 	bl	8001a68 <main>

08002f52 <LoopForever>:

LoopForever:
    b LoopForever
 8002f52:	e7fe      	b.n	8002f52 <LoopForever>
  ldr   r0, =_estack
 8002f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f5c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002f60:	0800d878 	.word	0x0800d878
  ldr r2, =_sbss
 8002f64:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002f68:	20000818 	.word	0x20000818

08002f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f6c:	e7fe      	b.n	8002f6c <ADC1_2_IRQHandler>

08002f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f78:	2003      	movs	r0, #3
 8002f7a:	f001 fcbf 	bl	80048fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f7e:	200f      	movs	r0, #15
 8002f80:	f000 f80e 	bl	8002fa0 <HAL_InitTick>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	71fb      	strb	r3, [r7, #7]
 8002f8e:	e001      	b.n	8002f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f90:	f7ff f9f0 	bl	8002374 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f94:	79fb      	ldrb	r3, [r7, #7]

}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002fac:	4b16      	ldr	r3, [pc, #88]	@ (8003008 <HAL_InitTick+0x68>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d022      	beq.n	8002ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002fb4:	4b15      	ldr	r3, [pc, #84]	@ (800300c <HAL_InitTick+0x6c>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	4b13      	ldr	r3, [pc, #76]	@ (8003008 <HAL_InitTick+0x68>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f001 fcca 	bl	8004962 <HAL_SYSTICK_Config>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10f      	bne.n	8002ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b0f      	cmp	r3, #15
 8002fd8:	d809      	bhi.n	8002fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe2:	f001 fc96 	bl	8004912 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8003010 <HAL_InitTick+0x70>)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	e007      	b.n	8002ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
 8002ff2:	e004      	b.n	8002ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
 8002ff8:	e001      	b.n	8002ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	2000001c 	.word	0x2000001c
 800300c:	20000010 	.word	0x20000010
 8003010:	20000018 	.word	0x20000018

08003014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003018:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <HAL_IncTick+0x1c>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b05      	ldr	r3, [pc, #20]	@ (8003034 <HAL_IncTick+0x20>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4413      	add	r3, r2
 8003022:	4a03      	ldr	r2, [pc, #12]	@ (8003030 <HAL_IncTick+0x1c>)
 8003024:	6013      	str	r3, [r2, #0]
}
 8003026:	bf00      	nop
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	200006c8 	.word	0x200006c8
 8003034:	2000001c 	.word	0x2000001c

08003038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return uwTick;
 800303c:	4b03      	ldr	r3, [pc, #12]	@ (800304c <HAL_GetTick+0x14>)
 800303e:	681b      	ldr	r3, [r3, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	200006c8 	.word	0x200006c8

08003050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003058:	f7ff ffee 	bl	8003038 <HAL_GetTick>
 800305c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d004      	beq.n	8003074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800306a:	4b09      	ldr	r3, [pc, #36]	@ (8003090 <HAL_Delay+0x40>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4413      	add	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003074:	bf00      	nop
 8003076:	f7ff ffdf 	bl	8003038 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	429a      	cmp	r2, r3
 8003084:	d8f7      	bhi.n	8003076 <HAL_Delay+0x26>
  {
  }
}
 8003086:	bf00      	nop
 8003088:	bf00      	nop
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	2000001c 	.word	0x2000001c

08003094 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	609a      	str	r2, [r3, #8]
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	609a      	str	r2, [r3, #8]
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3360      	adds	r3, #96	@ 0x60
 800310e:	461a      	mov	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	4b08      	ldr	r3, [pc, #32]	@ (8003140 <LL_ADC_SetOffset+0x44>)
 800311e:	4013      	ands	r3, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	4313      	orrs	r3, r2
 800312c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003134:	bf00      	nop
 8003136:	371c      	adds	r7, #28
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	03fff000 	.word	0x03fff000

08003144 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3360      	adds	r3, #96	@ 0x60
 8003152:	461a      	mov	r2, r3
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003164:	4618      	mov	r0, r3
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3360      	adds	r3, #96	@ 0x60
 8003180:	461a      	mov	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	431a      	orrs	r2, r3
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800319a:	bf00      	nop
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b087      	sub	sp, #28
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	3360      	adds	r3, #96	@ 0x60
 80031b6:	461a      	mov	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80031d0:	bf00      	nop
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	3360      	adds	r3, #96	@ 0x60
 80031ec:	461a      	mov	r2, r3
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	431a      	orrs	r2, r3
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003206:	bf00      	nop
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	615a      	str	r2, [r3, #20]
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800325e:	b480      	push	{r7}
 8003260:	b087      	sub	sp, #28
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3330      	adds	r3, #48	@ 0x30
 800326e:	461a      	mov	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	0a1b      	lsrs	r3, r3, #8
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	4413      	add	r3, r2
 800327c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	211f      	movs	r1, #31
 800328a:	fa01 f303 	lsl.w	r3, r1, r3
 800328e:	43db      	mvns	r3, r3
 8003290:	401a      	ands	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	0e9b      	lsrs	r3, r3, #26
 8003296:	f003 011f 	and.w	r1, r3, #31
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f003 031f 	and.w	r3, r3, #31
 80032a0:	fa01 f303 	lsl.w	r3, r1, r3
 80032a4:	431a      	orrs	r2, r3
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032aa:	bf00      	nop
 80032ac:	371c      	adds	r7, #28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b087      	sub	sp, #28
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3314      	adds	r3, #20
 80032c6:	461a      	mov	r2, r3
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	0e5b      	lsrs	r3, r3, #25
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	4413      	add	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	0d1b      	lsrs	r3, r3, #20
 80032de:	f003 031f 	and.w	r3, r3, #31
 80032e2:	2107      	movs	r1, #7
 80032e4:	fa01 f303 	lsl.w	r3, r1, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	401a      	ands	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	0d1b      	lsrs	r3, r3, #20
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	431a      	orrs	r2, r3
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003300:	bf00      	nop
 8003302:	371c      	adds	r7, #28
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003324:	43db      	mvns	r3, r3
 8003326:	401a      	ands	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f003 0318 	and.w	r3, r3, #24
 800332e:	4908      	ldr	r1, [pc, #32]	@ (8003350 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003330:	40d9      	lsrs	r1, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	400b      	ands	r3, r1
 8003336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333a:	431a      	orrs	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003342:	bf00      	nop
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	0007ffff 	.word	0x0007ffff

08003354 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 031f 	and.w	r3, r3, #31
}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003380:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6093      	str	r3, [r2, #8]
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033a8:	d101      	bne.n	80033ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80033cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033f8:	d101      	bne.n	80033fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800341c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003420:	f043 0201 	orr.w	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <LL_ADC_IsEnabled+0x18>
 8003448:	2301      	movs	r3, #1
 800344a:	e000      	b.n	800344e <LL_ADC_IsEnabled+0x1a>
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800346a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800346e:	f043 0204 	orr.w	r2, r3, #4
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b04      	cmp	r3, #4
 8003494:	d101      	bne.n	800349a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d101      	bne.n	80034c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034d0:	b590      	push	{r4, r7, lr}
 80034d2:	b089      	sub	sp, #36	@ 0x24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e1a9      	b.n	800383e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d109      	bne.n	800350c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7fe ff5f 	bl	80023bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff3f 	bl	8003394 <LL_ADC_IsDeepPowerDownEnabled>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d004      	beq.n	8003526 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff25 	bl	8003370 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff ff5a 	bl	80033e4 <LL_ADC_IsInternalRegulatorEnabled>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d115      	bne.n	8003562 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff ff3e 	bl	80033bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003540:	4b9c      	ldr	r3, [pc, #624]	@ (80037b4 <HAL_ADC_Init+0x2e4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	099b      	lsrs	r3, r3, #6
 8003546:	4a9c      	ldr	r2, [pc, #624]	@ (80037b8 <HAL_ADC_Init+0x2e8>)
 8003548:	fba2 2303 	umull	r2, r3, r2, r3
 800354c:	099b      	lsrs	r3, r3, #6
 800354e:	3301      	adds	r3, #1
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003554:	e002      	b.n	800355c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	3b01      	subs	r3, #1
 800355a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f9      	bne.n	8003556 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff ff3c 	bl	80033e4 <LL_ADC_IsInternalRegulatorEnabled>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10d      	bne.n	800358e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003576:	f043 0210 	orr.w	r2, r3, #16
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003582:	f043 0201 	orr.w	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff ff75 	bl	8003482 <LL_ADC_REG_IsConversionOngoing>
 8003598:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f040 8142 	bne.w	800382c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f040 813e 	bne.w	800382c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80035b8:	f043 0202 	orr.w	r2, r3, #2
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff ff35 	bl	8003434 <LL_ADC_IsEnabled>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d141      	bne.n	8003654 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035d8:	d004      	beq.n	80035e4 <HAL_ADC_Init+0x114>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a77      	ldr	r2, [pc, #476]	@ (80037bc <HAL_ADC_Init+0x2ec>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d10f      	bne.n	8003604 <HAL_ADC_Init+0x134>
 80035e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80035e8:	f7ff ff24 	bl	8003434 <LL_ADC_IsEnabled>
 80035ec:	4604      	mov	r4, r0
 80035ee:	4873      	ldr	r0, [pc, #460]	@ (80037bc <HAL_ADC_Init+0x2ec>)
 80035f0:	f7ff ff20 	bl	8003434 <LL_ADC_IsEnabled>
 80035f4:	4603      	mov	r3, r0
 80035f6:	4323      	orrs	r3, r4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf0c      	ite	eq
 80035fc:	2301      	moveq	r3, #1
 80035fe:	2300      	movne	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	e012      	b.n	800362a <HAL_ADC_Init+0x15a>
 8003604:	486e      	ldr	r0, [pc, #440]	@ (80037c0 <HAL_ADC_Init+0x2f0>)
 8003606:	f7ff ff15 	bl	8003434 <LL_ADC_IsEnabled>
 800360a:	4604      	mov	r4, r0
 800360c:	486d      	ldr	r0, [pc, #436]	@ (80037c4 <HAL_ADC_Init+0x2f4>)
 800360e:	f7ff ff11 	bl	8003434 <LL_ADC_IsEnabled>
 8003612:	4603      	mov	r3, r0
 8003614:	431c      	orrs	r4, r3
 8003616:	486c      	ldr	r0, [pc, #432]	@ (80037c8 <HAL_ADC_Init+0x2f8>)
 8003618:	f7ff ff0c 	bl	8003434 <LL_ADC_IsEnabled>
 800361c:	4603      	mov	r3, r0
 800361e:	4323      	orrs	r3, r4
 8003620:	2b00      	cmp	r3, #0
 8003622:	bf0c      	ite	eq
 8003624:	2301      	moveq	r3, #1
 8003626:	2300      	movne	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d012      	beq.n	8003654 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003636:	d004      	beq.n	8003642 <HAL_ADC_Init+0x172>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a5f      	ldr	r2, [pc, #380]	@ (80037bc <HAL_ADC_Init+0x2ec>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d101      	bne.n	8003646 <HAL_ADC_Init+0x176>
 8003642:	4a62      	ldr	r2, [pc, #392]	@ (80037cc <HAL_ADC_Init+0x2fc>)
 8003644:	e000      	b.n	8003648 <HAL_ADC_Init+0x178>
 8003646:	4a62      	ldr	r2, [pc, #392]	@ (80037d0 <HAL_ADC_Init+0x300>)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	4619      	mov	r1, r3
 800364e:	4610      	mov	r0, r2
 8003650:	f7ff fd20 	bl	8003094 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	7f5b      	ldrb	r3, [r3, #29]
 8003658:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800365e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003664:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800366a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003672:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800367e:	2b01      	cmp	r3, #1
 8003680:	d106      	bne.n	8003690 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003686:	3b01      	subs	r3, #1
 8003688:	045b      	lsls	r3, r3, #17
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	2b00      	cmp	r3, #0
 8003696:	d009      	beq.n	80036ac <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	4b48      	ldr	r3, [pc, #288]	@ (80037d4 <HAL_ADC_Init+0x304>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	69b9      	ldr	r1, [r7, #24]
 80036bc:	430b      	orrs	r3, r1
 80036be:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fee4 	bl	80034a8 <LL_ADC_INJ_IsConversionOngoing>
 80036e0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d17f      	bne.n	80037e8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d17c      	bne.n	80037e8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036f2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80036fa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800370a:	f023 0302 	bic.w	r3, r3, #2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	69b9      	ldr	r1, [r7, #24]
 8003714:	430b      	orrs	r3, r1
 8003716:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d017      	beq.n	8003750 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691a      	ldr	r2, [r3, #16]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800372e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003738:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800373c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6911      	ldr	r1, [r2, #16]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	430b      	orrs	r3, r1
 800374a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800374e:	e013      	b.n	8003778 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800375e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003770:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003774:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800377e:	2b01      	cmp	r3, #1
 8003780:	d12a      	bne.n	80037d8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800378c:	f023 0304 	bic.w	r3, r3, #4
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003798:	4311      	orrs	r1, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800379e:	4311      	orrs	r1, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80037a4:	430a      	orrs	r2, r1
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0201 	orr.w	r2, r2, #1
 80037b0:	611a      	str	r2, [r3, #16]
 80037b2:	e019      	b.n	80037e8 <HAL_ADC_Init+0x318>
 80037b4:	20000010 	.word	0x20000010
 80037b8:	053e2d63 	.word	0x053e2d63
 80037bc:	50000100 	.word	0x50000100
 80037c0:	50000400 	.word	0x50000400
 80037c4:	50000500 	.word	0x50000500
 80037c8:	50000600 	.word	0x50000600
 80037cc:	50000300 	.word	0x50000300
 80037d0:	50000700 	.word	0x50000700
 80037d4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0201 	bic.w	r2, r2, #1
 80037e6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d10c      	bne.n	800380a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f6:	f023 010f 	bic.w	r1, r3, #15
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	1e5a      	subs	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	631a      	str	r2, [r3, #48]	@ 0x30
 8003808:	e007      	b.n	800381a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 020f 	bic.w	r2, r2, #15
 8003818:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381e:	f023 0303 	bic.w	r3, r3, #3
 8003822:	f043 0201 	orr.w	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	65da      	str	r2, [r3, #92]	@ 0x5c
 800382a:	e007      	b.n	800383c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003830:	f043 0210 	orr.w	r2, r3, #16
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800383c:	7ffb      	ldrb	r3, [r7, #31]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3724      	adds	r7, #36	@ 0x24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd90      	pop	{r4, r7, pc}
 8003846:	bf00      	nop

08003848 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800385c:	d004      	beq.n	8003868 <HAL_ADC_Start_DMA+0x20>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a5a      	ldr	r2, [pc, #360]	@ (80039cc <HAL_ADC_Start_DMA+0x184>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d101      	bne.n	800386c <HAL_ADC_Start_DMA+0x24>
 8003868:	4b59      	ldr	r3, [pc, #356]	@ (80039d0 <HAL_ADC_Start_DMA+0x188>)
 800386a:	e000      	b.n	800386e <HAL_ADC_Start_DMA+0x26>
 800386c:	4b59      	ldr	r3, [pc, #356]	@ (80039d4 <HAL_ADC_Start_DMA+0x18c>)
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff fd70 	bl	8003354 <LL_ADC_GetMultimode>
 8003874:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff fe01 	bl	8003482 <LL_ADC_REG_IsConversionOngoing>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	f040 809b 	bne.w	80039be <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_ADC_Start_DMA+0x4e>
 8003892:	2302      	movs	r3, #2
 8003894:	e096      	b.n	80039c4 <HAL_ADC_Start_DMA+0x17c>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a4d      	ldr	r2, [pc, #308]	@ (80039d8 <HAL_ADC_Start_DMA+0x190>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d008      	beq.n	80038ba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d005      	beq.n	80038ba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	2b05      	cmp	r3, #5
 80038b2:	d002      	beq.n	80038ba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	2b09      	cmp	r3, #9
 80038b8:	d17a      	bne.n	80039b0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fcf6 	bl	80042ac <ADC_Enable>
 80038c0:	4603      	mov	r3, r0
 80038c2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80038c4:	7dfb      	ldrb	r3, [r7, #23]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d16d      	bne.n	80039a6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038d2:	f023 0301 	bic.w	r3, r3, #1
 80038d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a3a      	ldr	r2, [pc, #232]	@ (80039cc <HAL_ADC_Start_DMA+0x184>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d009      	beq.n	80038fc <HAL_ADC_Start_DMA+0xb4>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a3b      	ldr	r2, [pc, #236]	@ (80039dc <HAL_ADC_Start_DMA+0x194>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d002      	beq.n	80038f8 <HAL_ADC_Start_DMA+0xb0>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	e003      	b.n	8003900 <HAL_ADC_Start_DMA+0xb8>
 80038f8:	4b39      	ldr	r3, [pc, #228]	@ (80039e0 <HAL_ADC_Start_DMA+0x198>)
 80038fa:	e001      	b.n	8003900 <HAL_ADC_Start_DMA+0xb8>
 80038fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	4293      	cmp	r3, r2
 8003906:	d002      	beq.n	800390e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d105      	bne.n	800391a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003912:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d006      	beq.n	8003934 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392a:	f023 0206 	bic.w	r2, r3, #6
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	661a      	str	r2, [r3, #96]	@ 0x60
 8003932:	e002      	b.n	800393a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393e:	4a29      	ldr	r2, [pc, #164]	@ (80039e4 <HAL_ADC_Start_DMA+0x19c>)
 8003940:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003946:	4a28      	ldr	r2, [pc, #160]	@ (80039e8 <HAL_ADC_Start_DMA+0x1a0>)
 8003948:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800394e:	4a27      	ldr	r2, [pc, #156]	@ (80039ec <HAL_ADC_Start_DMA+0x1a4>)
 8003950:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	221c      	movs	r2, #28
 8003958:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0210 	orr.w	r2, r2, #16
 8003970:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0201 	orr.w	r2, r2, #1
 8003980:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3340      	adds	r3, #64	@ 0x40
 800398c:	4619      	mov	r1, r3
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f001 f89b 	bl	8004acc <HAL_DMA_Start_IT>
 8003996:	4603      	mov	r3, r0
 8003998:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff fd5b 	bl	800345a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80039a4:	e00d      	b.n	80039c2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80039ae:	e008      	b.n	80039c2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80039bc:	e001      	b.n	80039c2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039be:	2302      	movs	r3, #2
 80039c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	50000100 	.word	0x50000100
 80039d0:	50000300 	.word	0x50000300
 80039d4:	50000700 	.word	0x50000700
 80039d8:	50000600 	.word	0x50000600
 80039dc:	50000500 	.word	0x50000500
 80039e0:	50000400 	.word	0x50000400
 80039e4:	080043d9 	.word	0x080043d9
 80039e8:	080044b1 	.word	0x080044b1
 80039ec:	080044cd 	.word	0x080044cd

080039f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b0b6      	sub	sp, #216	@ 0xd8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d102      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x24>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	f000 bc13 	b.w	8004276 <HAL_ADC_ConfigChannel+0x84a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fd10 	bl	8003482 <LL_ADC_REG_IsConversionOngoing>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f040 83f3 	bne.w	8004250 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6818      	ldr	r0, [r3, #0]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	6859      	ldr	r1, [r3, #4]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	f7ff fbf1 	bl	800325e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff fcfe 	bl	8003482 <LL_ADC_REG_IsConversionOngoing>
 8003a86:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff fd0a 	bl	80034a8 <LL_ADC_INJ_IsConversionOngoing>
 8003a94:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f040 81d9 	bne.w	8003e54 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003aa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f040 81d4 	bne.w	8003e54 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ab4:	d10f      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	f7ff fbf8 	bl	80032b6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff fb9f 	bl	8003212 <LL_ADC_SetSamplingTimeCommonConfig>
 8003ad4:	e00e      	b.n	8003af4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	6819      	ldr	r1, [r3, #0]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f7ff fbe7 	bl	80032b6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff fb8f 	bl	8003212 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	08db      	lsrs	r3, r3, #3
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d022      	beq.n	8003b5c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6818      	ldr	r0, [r3, #0]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6919      	ldr	r1, [r3, #16]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b26:	f7ff fae9 	bl	80030fc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6919      	ldr	r1, [r3, #16]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	461a      	mov	r2, r3
 8003b38:	f7ff fb35 	bl	80031a6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d102      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x126>
 8003b4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b50:	e000      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x128>
 8003b52:	2300      	movs	r3, #0
 8003b54:	461a      	mov	r2, r3
 8003b56:	f7ff fb41 	bl	80031dc <LL_ADC_SetOffsetSaturation>
 8003b5a:	e17b      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2100      	movs	r1, #0
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff faee 	bl	8003144 <LL_ADC_GetOffsetChannel>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10a      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x15c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2100      	movs	r1, #0
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff fae3 	bl	8003144 <LL_ADC_GetOffsetChannel>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	0e9b      	lsrs	r3, r3, #26
 8003b82:	f003 021f 	and.w	r2, r3, #31
 8003b86:	e01e      	b.n	8003bc6 <HAL_ADC_ConfigChannel+0x19a>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff fad8 	bl	8003144 <LL_ADC_GetOffsetChannel>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b9e:	fa93 f3a3 	rbit	r3, r3
 8003ba2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ba6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003baa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003bae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003bb6:	2320      	movs	r3, #32
 8003bb8:	e004      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003bba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003bbe:	fab3 f383 	clz	r3, r3
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d105      	bne.n	8003bde <HAL_ADC_ConfigChannel+0x1b2>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	0e9b      	lsrs	r3, r3, #26
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	e018      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x1e4>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003bea:	fa93 f3a3 	rbit	r3, r3
 8003bee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003bfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003c02:	2320      	movs	r3, #32
 8003c04:	e004      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003c06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c0a:	fab3 f383 	clz	r3, r3
 8003c0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d106      	bne.n	8003c22 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff faa7 	bl	8003170 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2101      	movs	r1, #1
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff fa8b 	bl	8003144 <LL_ADC_GetOffsetChannel>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10a      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x222>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fa80 	bl	8003144 <LL_ADC_GetOffsetChannel>
 8003c44:	4603      	mov	r3, r0
 8003c46:	0e9b      	lsrs	r3, r3, #26
 8003c48:	f003 021f 	and.w	r2, r3, #31
 8003c4c:	e01e      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x260>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2101      	movs	r1, #1
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff fa75 	bl	8003144 <LL_ADC_GetOffsetChannel>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c64:	fa93 f3a3 	rbit	r3, r3
 8003c68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003c6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003c74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003c7c:	2320      	movs	r3, #32
 8003c7e:	e004      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003c80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c84:	fab3 f383 	clz	r3, r3
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d105      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x278>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	0e9b      	lsrs	r3, r3, #26
 8003c9e:	f003 031f 	and.w	r3, r3, #31
 8003ca2:	e018      	b.n	8003cd6 <HAL_ADC_ConfigChannel+0x2aa>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cb0:	fa93 f3a3 	rbit	r3, r3
 8003cb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003cb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003cc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003cc8:	2320      	movs	r3, #32
 8003cca:	e004      	b.n	8003cd6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003cd0:	fab3 f383 	clz	r3, r3
 8003cd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d106      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff fa44 	bl	8003170 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2102      	movs	r1, #2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff fa28 	bl	8003144 <LL_ADC_GetOffsetChannel>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x2e8>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2102      	movs	r1, #2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff fa1d 	bl	8003144 <LL_ADC_GetOffsetChannel>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	0e9b      	lsrs	r3, r3, #26
 8003d0e:	f003 021f 	and.w	r2, r3, #31
 8003d12:	e01e      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x326>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2102      	movs	r1, #2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff fa12 	bl	8003144 <LL_ADC_GetOffsetChannel>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d2a:	fa93 f3a3 	rbit	r3, r3
 8003d2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003d32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003d3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003d42:	2320      	movs	r3, #32
 8003d44:	e004      	b.n	8003d50 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003d46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d4a:	fab3 f383 	clz	r3, r3
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d105      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x33e>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	0e9b      	lsrs	r3, r3, #26
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	e016      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x36c>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d76:	fa93 f3a3 	rbit	r3, r3
 8003d7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003d7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003d8a:	2320      	movs	r3, #32
 8003d8c:	e004      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d92:	fab3 f383 	clz	r3, r3
 8003d96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d106      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2200      	movs	r2, #0
 8003da2:	2102      	movs	r1, #2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff f9e3 	bl	8003170 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2103      	movs	r1, #3
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff f9c7 	bl	8003144 <LL_ADC_GetOffsetChannel>
 8003db6:	4603      	mov	r3, r0
 8003db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x3aa>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2103      	movs	r1, #3
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff f9bc 	bl	8003144 <LL_ADC_GetOffsetChannel>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	0e9b      	lsrs	r3, r3, #26
 8003dd0:	f003 021f 	and.w	r2, r3, #31
 8003dd4:	e017      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x3da>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2103      	movs	r1, #3
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff f9b1 	bl	8003144 <LL_ADC_GetOffsetChannel>
 8003de2:	4603      	mov	r3, r0
 8003de4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003de8:	fa93 f3a3 	rbit	r3, r3
 8003dec:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003dee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003df0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003df2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003df8:	2320      	movs	r3, #32
 8003dfa:	e003      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003dfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dfe:	fab3 f383 	clz	r3, r3
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d105      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0x3f2>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	0e9b      	lsrs	r3, r3, #26
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	e011      	b.n	8003e42 <HAL_ADC_ConfigChannel+0x416>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e26:	fa93 f3a3 	rbit	r3, r3
 8003e2a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003e2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003e30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003e36:	2320      	movs	r3, #32
 8003e38:	e003      	b.n	8003e42 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003e3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e3c:	fab3 f383 	clz	r3, r3
 8003e40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d106      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2103      	movs	r1, #3
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff f98e 	bl	8003170 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff faeb 	bl	8003434 <LL_ADC_IsEnabled>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f040 813d 	bne.w	80040e0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6819      	ldr	r1, [r3, #0]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	461a      	mov	r2, r3
 8003e74:	f7ff fa4a 	bl	800330c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4aa2      	ldr	r2, [pc, #648]	@ (8004108 <HAL_ADC_ConfigChannel+0x6dc>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	f040 812e 	bne.w	80040e0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10b      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x480>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	0e9b      	lsrs	r3, r3, #26
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	2b09      	cmp	r3, #9
 8003ea2:	bf94      	ite	ls
 8003ea4:	2301      	movls	r3, #1
 8003ea6:	2300      	movhi	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	e019      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0x4b4>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003eb4:	fa93 f3a3 	rbit	r3, r3
 8003eb8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003eba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ebc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003ebe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003ec4:	2320      	movs	r3, #32
 8003ec6:	e003      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003ec8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003eca:	fab3 f383 	clz	r3, r3
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	2b09      	cmp	r3, #9
 8003ed8:	bf94      	ite	ls
 8003eda:	2301      	movls	r3, #1
 8003edc:	2300      	movhi	r3, #0
 8003ede:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d079      	beq.n	8003fd8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d107      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x4d4>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	0e9b      	lsrs	r3, r3, #26
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	069b      	lsls	r3, r3, #26
 8003efa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003efe:	e015      	b.n	8003f2c <HAL_ADC_ConfigChannel+0x500>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f08:	fa93 f3a3 	rbit	r3, r3
 8003f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f10:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003f18:	2320      	movs	r3, #32
 8003f1a:	e003      	b.n	8003f24 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003f1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f1e:	fab3 f383 	clz	r3, r3
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	3301      	adds	r3, #1
 8003f26:	069b      	lsls	r3, r3, #26
 8003f28:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d109      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x520>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	0e9b      	lsrs	r3, r3, #26
 8003f3e:	3301      	adds	r3, #1
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	2101      	movs	r1, #1
 8003f46:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4a:	e017      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x550>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f54:	fa93 f3a3 	rbit	r3, r3
 8003f58:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003f5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003f64:	2320      	movs	r3, #32
 8003f66:	e003      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003f68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f6a:	fab3 f383 	clz	r3, r3
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	3301      	adds	r3, #1
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	2101      	movs	r1, #1
 8003f78:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7c:	ea42 0103 	orr.w	r1, r2, r3
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x576>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	0e9b      	lsrs	r3, r3, #26
 8003f92:	3301      	adds	r3, #1
 8003f94:	f003 021f 	and.w	r2, r3, #31
 8003f98:	4613      	mov	r3, r2
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	4413      	add	r3, r2
 8003f9e:	051b      	lsls	r3, r3, #20
 8003fa0:	e018      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0x5a8>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003faa:	fa93 f3a3 	rbit	r3, r3
 8003fae:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003fba:	2320      	movs	r3, #32
 8003fbc:	e003      	b.n	8003fc6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fc0:	fab3 f383 	clz	r3, r3
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f003 021f 	and.w	r2, r3, #31
 8003fcc:	4613      	mov	r3, r2
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	4413      	add	r3, r2
 8003fd2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	e07e      	b.n	80040d6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d107      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x5c8>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	0e9b      	lsrs	r3, r3, #26
 8003fea:	3301      	adds	r3, #1
 8003fec:	069b      	lsls	r3, r3, #26
 8003fee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ff2:	e015      	b.n	8004020 <HAL_ADC_ConfigChannel+0x5f4>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffc:	fa93 f3a3 	rbit	r3, r3
 8004000:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004004:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800400c:	2320      	movs	r3, #32
 800400e:	e003      	b.n	8004018 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	3301      	adds	r3, #1
 800401a:	069b      	lsls	r3, r3, #26
 800401c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004028:	2b00      	cmp	r3, #0
 800402a:	d109      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x614>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	0e9b      	lsrs	r3, r3, #26
 8004032:	3301      	adds	r3, #1
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	2101      	movs	r1, #1
 800403a:	fa01 f303 	lsl.w	r3, r1, r3
 800403e:	e017      	b.n	8004070 <HAL_ADC_ConfigChannel+0x644>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	fa93 f3a3 	rbit	r3, r3
 800404c:	61fb      	str	r3, [r7, #28]
  return result;
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004058:	2320      	movs	r3, #32
 800405a:	e003      	b.n	8004064 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800405c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405e:	fab3 f383 	clz	r3, r3
 8004062:	b2db      	uxtb	r3, r3
 8004064:	3301      	adds	r3, #1
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	2101      	movs	r1, #1
 800406c:	fa01 f303 	lsl.w	r3, r1, r3
 8004070:	ea42 0103 	orr.w	r1, r2, r3
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10d      	bne.n	800409c <HAL_ADC_ConfigChannel+0x670>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	0e9b      	lsrs	r3, r3, #26
 8004086:	3301      	adds	r3, #1
 8004088:	f003 021f 	and.w	r2, r3, #31
 800408c:	4613      	mov	r3, r2
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	4413      	add	r3, r2
 8004092:	3b1e      	subs	r3, #30
 8004094:	051b      	lsls	r3, r3, #20
 8004096:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800409a:	e01b      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x6a8>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	fa93 f3a3 	rbit	r3, r3
 80040a8:	613b      	str	r3, [r7, #16]
  return result;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80040b4:	2320      	movs	r3, #32
 80040b6:	e003      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	fab3 f383 	clz	r3, r3
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	3301      	adds	r3, #1
 80040c2:	f003 021f 	and.w	r2, r3, #31
 80040c6:	4613      	mov	r3, r2
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	4413      	add	r3, r2
 80040cc:	3b1e      	subs	r3, #30
 80040ce:	051b      	lsls	r3, r3, #20
 80040d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040d4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040da:	4619      	mov	r1, r3
 80040dc:	f7ff f8eb 	bl	80032b6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b09      	ldr	r3, [pc, #36]	@ (800410c <HAL_ADC_ConfigChannel+0x6e0>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 80be 	beq.w	800426a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040f6:	d004      	beq.n	8004102 <HAL_ADC_ConfigChannel+0x6d6>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a04      	ldr	r2, [pc, #16]	@ (8004110 <HAL_ADC_ConfigChannel+0x6e4>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d10a      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x6ec>
 8004102:	4b04      	ldr	r3, [pc, #16]	@ (8004114 <HAL_ADC_ConfigChannel+0x6e8>)
 8004104:	e009      	b.n	800411a <HAL_ADC_ConfigChannel+0x6ee>
 8004106:	bf00      	nop
 8004108:	407f0000 	.word	0x407f0000
 800410c:	80080000 	.word	0x80080000
 8004110:	50000100 	.word	0x50000100
 8004114:	50000300 	.word	0x50000300
 8004118:	4b59      	ldr	r3, [pc, #356]	@ (8004280 <HAL_ADC_ConfigChannel+0x854>)
 800411a:	4618      	mov	r0, r3
 800411c:	f7fe ffe0 	bl	80030e0 <LL_ADC_GetCommonPathInternalCh>
 8004120:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a56      	ldr	r2, [pc, #344]	@ (8004284 <HAL_ADC_ConfigChannel+0x858>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d004      	beq.n	8004138 <HAL_ADC_ConfigChannel+0x70c>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a55      	ldr	r2, [pc, #340]	@ (8004288 <HAL_ADC_ConfigChannel+0x85c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d13a      	bne.n	80041ae <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004138:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800413c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d134      	bne.n	80041ae <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800414c:	d005      	beq.n	800415a <HAL_ADC_ConfigChannel+0x72e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a4e      	ldr	r2, [pc, #312]	@ (800428c <HAL_ADC_ConfigChannel+0x860>)
 8004154:	4293      	cmp	r3, r2
 8004156:	f040 8085 	bne.w	8004264 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004162:	d004      	beq.n	800416e <HAL_ADC_ConfigChannel+0x742>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a49      	ldr	r2, [pc, #292]	@ (8004290 <HAL_ADC_ConfigChannel+0x864>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d101      	bne.n	8004172 <HAL_ADC_ConfigChannel+0x746>
 800416e:	4a49      	ldr	r2, [pc, #292]	@ (8004294 <HAL_ADC_ConfigChannel+0x868>)
 8004170:	e000      	b.n	8004174 <HAL_ADC_ConfigChannel+0x748>
 8004172:	4a43      	ldr	r2, [pc, #268]	@ (8004280 <HAL_ADC_ConfigChannel+0x854>)
 8004174:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004178:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800417c:	4619      	mov	r1, r3
 800417e:	4610      	mov	r0, r2
 8004180:	f7fe ff9b 	bl	80030ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004184:	4b44      	ldr	r3, [pc, #272]	@ (8004298 <HAL_ADC_ConfigChannel+0x86c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	099b      	lsrs	r3, r3, #6
 800418a:	4a44      	ldr	r2, [pc, #272]	@ (800429c <HAL_ADC_ConfigChannel+0x870>)
 800418c:	fba2 2303 	umull	r2, r3, r2, r3
 8004190:	099b      	lsrs	r3, r3, #6
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	4613      	mov	r3, r2
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800419e:	e002      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f9      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041ac:	e05a      	b.n	8004264 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a3b      	ldr	r2, [pc, #236]	@ (80042a0 <HAL_ADC_ConfigChannel+0x874>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d125      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d11f      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a31      	ldr	r2, [pc, #196]	@ (8004290 <HAL_ADC_ConfigChannel+0x864>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d104      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x7ac>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a34      	ldr	r2, [pc, #208]	@ (80042a4 <HAL_ADC_ConfigChannel+0x878>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d047      	beq.n	8004268 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041e0:	d004      	beq.n	80041ec <HAL_ADC_ConfigChannel+0x7c0>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a2a      	ldr	r2, [pc, #168]	@ (8004290 <HAL_ADC_ConfigChannel+0x864>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d101      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x7c4>
 80041ec:	4a29      	ldr	r2, [pc, #164]	@ (8004294 <HAL_ADC_ConfigChannel+0x868>)
 80041ee:	e000      	b.n	80041f2 <HAL_ADC_ConfigChannel+0x7c6>
 80041f0:	4a23      	ldr	r2, [pc, #140]	@ (8004280 <HAL_ADC_ConfigChannel+0x854>)
 80041f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041fa:	4619      	mov	r1, r3
 80041fc:	4610      	mov	r0, r2
 80041fe:	f7fe ff5c 	bl	80030ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004202:	e031      	b.n	8004268 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a27      	ldr	r2, [pc, #156]	@ (80042a8 <HAL_ADC_ConfigChannel+0x87c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d12d      	bne.n	800426a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800420e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d127      	bne.n	800426a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1c      	ldr	r2, [pc, #112]	@ (8004290 <HAL_ADC_ConfigChannel+0x864>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d022      	beq.n	800426a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800422c:	d004      	beq.n	8004238 <HAL_ADC_ConfigChannel+0x80c>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a17      	ldr	r2, [pc, #92]	@ (8004290 <HAL_ADC_ConfigChannel+0x864>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d101      	bne.n	800423c <HAL_ADC_ConfigChannel+0x810>
 8004238:	4a16      	ldr	r2, [pc, #88]	@ (8004294 <HAL_ADC_ConfigChannel+0x868>)
 800423a:	e000      	b.n	800423e <HAL_ADC_ConfigChannel+0x812>
 800423c:	4a10      	ldr	r2, [pc, #64]	@ (8004280 <HAL_ADC_ConfigChannel+0x854>)
 800423e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004242:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004246:	4619      	mov	r1, r3
 8004248:	4610      	mov	r0, r2
 800424a:	f7fe ff36 	bl	80030ba <LL_ADC_SetCommonPathInternalCh>
 800424e:	e00c      	b.n	800426a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004254:	f043 0220 	orr.w	r2, r3, #32
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004262:	e002      	b.n	800426a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004264:	bf00      	nop
 8004266:	e000      	b.n	800426a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004268:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004272:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004276:	4618      	mov	r0, r3
 8004278:	37d8      	adds	r7, #216	@ 0xd8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	50000700 	.word	0x50000700
 8004284:	c3210000 	.word	0xc3210000
 8004288:	90c00010 	.word	0x90c00010
 800428c:	50000600 	.word	0x50000600
 8004290:	50000100 	.word	0x50000100
 8004294:	50000300 	.word	0x50000300
 8004298:	20000010 	.word	0x20000010
 800429c:	053e2d63 	.word	0x053e2d63
 80042a0:	c7520000 	.word	0xc7520000
 80042a4:	50000500 	.word	0x50000500
 80042a8:	cb840000 	.word	0xcb840000

080042ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff f8b9 	bl	8003434 <LL_ADC_IsEnabled>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d176      	bne.n	80043b6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	4b3c      	ldr	r3, [pc, #240]	@ (80043c0 <ADC_Enable+0x114>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00d      	beq.n	80042f2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042da:	f043 0210 	orr.w	r2, r3, #16
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e6:	f043 0201 	orr.w	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e062      	b.n	80043b8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff f888 	bl	800340c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004304:	d004      	beq.n	8004310 <ADC_Enable+0x64>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a2e      	ldr	r2, [pc, #184]	@ (80043c4 <ADC_Enable+0x118>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d101      	bne.n	8004314 <ADC_Enable+0x68>
 8004310:	4b2d      	ldr	r3, [pc, #180]	@ (80043c8 <ADC_Enable+0x11c>)
 8004312:	e000      	b.n	8004316 <ADC_Enable+0x6a>
 8004314:	4b2d      	ldr	r3, [pc, #180]	@ (80043cc <ADC_Enable+0x120>)
 8004316:	4618      	mov	r0, r3
 8004318:	f7fe fee2 	bl	80030e0 <LL_ADC_GetCommonPathInternalCh>
 800431c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800431e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004322:	2b00      	cmp	r3, #0
 8004324:	d013      	beq.n	800434e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004326:	4b2a      	ldr	r3, [pc, #168]	@ (80043d0 <ADC_Enable+0x124>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	099b      	lsrs	r3, r3, #6
 800432c:	4a29      	ldr	r2, [pc, #164]	@ (80043d4 <ADC_Enable+0x128>)
 800432e:	fba2 2303 	umull	r2, r3, r2, r3
 8004332:	099b      	lsrs	r3, r3, #6
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	4613      	mov	r3, r2
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004340:	e002      	b.n	8004348 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	3b01      	subs	r3, #1
 8004346:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f9      	bne.n	8004342 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800434e:	f7fe fe73 	bl	8003038 <HAL_GetTick>
 8004352:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004354:	e028      	b.n	80043a8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff f86a 	bl	8003434 <LL_ADC_IsEnabled>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d104      	bne.n	8004370 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff f84e 	bl	800340c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004370:	f7fe fe62 	bl	8003038 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d914      	bls.n	80043a8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d00d      	beq.n	80043a8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004390:	f043 0210 	orr.w	r2, r3, #16
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800439c:	f043 0201 	orr.w	r2, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e007      	b.n	80043b8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d1cf      	bne.n	8004356 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	8000003f 	.word	0x8000003f
 80043c4:	50000100 	.word	0x50000100
 80043c8:	50000300 	.word	0x50000300
 80043cc:	50000700 	.word	0x50000700
 80043d0:	20000010 	.word	0x20000010
 80043d4:	053e2d63 	.word	0x053e2d63

080043d8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ea:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d14b      	bne.n	800448a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b00      	cmp	r3, #0
 800440a:	d021      	beq.n	8004450 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f7fe ff11 	bl	8003238 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d032      	beq.n	8004482 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d12b      	bne.n	8004482 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800442e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d11f      	bne.n	8004482 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004446:	f043 0201 	orr.w	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800444e:	e018      	b.n	8004482 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d111      	bne.n	8004482 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004462:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800446e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d105      	bne.n	8004482 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800447a:	f043 0201 	orr.w	r2, r3, #1
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f7ff fab4 	bl	80039f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004488:	e00e      	b.n	80044a8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448e:	f003 0310 	and.w	r3, r3, #16
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f7ff fabe 	bl	8003a18 <HAL_ADC_ErrorCallback>
}
 800449c:	e004      	b.n	80044a8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	4798      	blx	r3
}
 80044a8:	bf00      	nop
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044bc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f7ff faa0 	bl	8003a04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044c4:	bf00      	nop
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ea:	f043 0204 	orr.w	r2, r3, #4
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f7ff fa90 	bl	8003a18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <LL_ADC_IsEnabled>:
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <LL_ADC_IsEnabled+0x18>
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <LL_ADC_IsEnabled+0x1a>
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <LL_ADC_REG_IsConversionOngoing>:
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b04      	cmp	r3, #4
 8004538:	d101      	bne.n	800453e <LL_ADC_REG_IsConversionOngoing+0x18>
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800454c:	b590      	push	{r4, r7, lr}
 800454e:	b0a1      	sub	sp, #132	@ 0x84
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004566:	2302      	movs	r3, #2
 8004568:	e0e7      	b.n	800473a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004572:	2300      	movs	r3, #0
 8004574:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004576:	2300      	movs	r3, #0
 8004578:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004582:	d102      	bne.n	800458a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004584:	4b6f      	ldr	r3, [pc, #444]	@ (8004744 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004586:	60bb      	str	r3, [r7, #8]
 8004588:	e009      	b.n	800459e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a6e      	ldr	r2, [pc, #440]	@ (8004748 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d102      	bne.n	800459a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004594:	4b6d      	ldr	r3, [pc, #436]	@ (800474c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004596:	60bb      	str	r3, [r7, #8]
 8004598:	e001      	b.n	800459e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800459a:	2300      	movs	r3, #0
 800459c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10b      	bne.n	80045bc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a8:	f043 0220 	orr.w	r2, r3, #32
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0be      	b.n	800473a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff ffb1 	bl	8004526 <LL_ADC_REG_IsConversionOngoing>
 80045c4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff ffab 	bl	8004526 <LL_ADC_REG_IsConversionOngoing>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f040 80a0 	bne.w	8004718 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80045d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f040 809c 	bne.w	8004718 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045e8:	d004      	beq.n	80045f4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a55      	ldr	r2, [pc, #340]	@ (8004744 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d101      	bne.n	80045f8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80045f4:	4b56      	ldr	r3, [pc, #344]	@ (8004750 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80045f6:	e000      	b.n	80045fa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80045f8:	4b56      	ldr	r3, [pc, #344]	@ (8004754 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80045fa:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d04b      	beq.n	800469c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004604:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	6859      	ldr	r1, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004616:	035b      	lsls	r3, r3, #13
 8004618:	430b      	orrs	r3, r1
 800461a:	431a      	orrs	r2, r3
 800461c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800461e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004628:	d004      	beq.n	8004634 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a45      	ldr	r2, [pc, #276]	@ (8004744 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d10f      	bne.n	8004654 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004634:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004638:	f7ff ff62 	bl	8004500 <LL_ADC_IsEnabled>
 800463c:	4604      	mov	r4, r0
 800463e:	4841      	ldr	r0, [pc, #260]	@ (8004744 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004640:	f7ff ff5e 	bl	8004500 <LL_ADC_IsEnabled>
 8004644:	4603      	mov	r3, r0
 8004646:	4323      	orrs	r3, r4
 8004648:	2b00      	cmp	r3, #0
 800464a:	bf0c      	ite	eq
 800464c:	2301      	moveq	r3, #1
 800464e:	2300      	movne	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	e012      	b.n	800467a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004654:	483c      	ldr	r0, [pc, #240]	@ (8004748 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004656:	f7ff ff53 	bl	8004500 <LL_ADC_IsEnabled>
 800465a:	4604      	mov	r4, r0
 800465c:	483b      	ldr	r0, [pc, #236]	@ (800474c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800465e:	f7ff ff4f 	bl	8004500 <LL_ADC_IsEnabled>
 8004662:	4603      	mov	r3, r0
 8004664:	431c      	orrs	r4, r3
 8004666:	483c      	ldr	r0, [pc, #240]	@ (8004758 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004668:	f7ff ff4a 	bl	8004500 <LL_ADC_IsEnabled>
 800466c:	4603      	mov	r3, r0
 800466e:	4323      	orrs	r3, r4
 8004670:	2b00      	cmp	r3, #0
 8004672:	bf0c      	ite	eq
 8004674:	2301      	moveq	r3, #1
 8004676:	2300      	movne	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d056      	beq.n	800472c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800467e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004686:	f023 030f 	bic.w	r3, r3, #15
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	6811      	ldr	r1, [r2, #0]
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	6892      	ldr	r2, [r2, #8]
 8004692:	430a      	orrs	r2, r1
 8004694:	431a      	orrs	r2, r3
 8004696:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004698:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800469a:	e047      	b.n	800472c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800469c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046a6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046b0:	d004      	beq.n	80046bc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a23      	ldr	r2, [pc, #140]	@ (8004744 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d10f      	bne.n	80046dc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80046bc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80046c0:	f7ff ff1e 	bl	8004500 <LL_ADC_IsEnabled>
 80046c4:	4604      	mov	r4, r0
 80046c6:	481f      	ldr	r0, [pc, #124]	@ (8004744 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046c8:	f7ff ff1a 	bl	8004500 <LL_ADC_IsEnabled>
 80046cc:	4603      	mov	r3, r0
 80046ce:	4323      	orrs	r3, r4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	bf0c      	ite	eq
 80046d4:	2301      	moveq	r3, #1
 80046d6:	2300      	movne	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	e012      	b.n	8004702 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80046dc:	481a      	ldr	r0, [pc, #104]	@ (8004748 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80046de:	f7ff ff0f 	bl	8004500 <LL_ADC_IsEnabled>
 80046e2:	4604      	mov	r4, r0
 80046e4:	4819      	ldr	r0, [pc, #100]	@ (800474c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80046e6:	f7ff ff0b 	bl	8004500 <LL_ADC_IsEnabled>
 80046ea:	4603      	mov	r3, r0
 80046ec:	431c      	orrs	r4, r3
 80046ee:	481a      	ldr	r0, [pc, #104]	@ (8004758 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80046f0:	f7ff ff06 	bl	8004500 <LL_ADC_IsEnabled>
 80046f4:	4603      	mov	r3, r0
 80046f6:	4323      	orrs	r3, r4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	bf0c      	ite	eq
 80046fc:	2301      	moveq	r3, #1
 80046fe:	2300      	movne	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d012      	beq.n	800472c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004706:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800470e:	f023 030f 	bic.w	r3, r3, #15
 8004712:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004714:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004716:	e009      	b.n	800472c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800471c:	f043 0220 	orr.w	r2, r3, #32
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800472a:	e000      	b.n	800472e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800472c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004736:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800473a:	4618      	mov	r0, r3
 800473c:	3784      	adds	r7, #132	@ 0x84
 800473e:	46bd      	mov	sp, r7
 8004740:	bd90      	pop	{r4, r7, pc}
 8004742:	bf00      	nop
 8004744:	50000100 	.word	0x50000100
 8004748:	50000400 	.word	0x50000400
 800474c:	50000500 	.word	0x50000500
 8004750:	50000300 	.word	0x50000300
 8004754:	50000700 	.word	0x50000700
 8004758:	50000600 	.word	0x50000600

0800475c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800476c:	4b0c      	ldr	r3, [pc, #48]	@ (80047a0 <__NVIC_SetPriorityGrouping+0x44>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004778:	4013      	ands	r3, r2
 800477a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004784:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800478c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800478e:	4a04      	ldr	r2, [pc, #16]	@ (80047a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	60d3      	str	r3, [r2, #12]
}
 8004794:	bf00      	nop
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	e000ed00 	.word	0xe000ed00

080047a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047a8:	4b04      	ldr	r3, [pc, #16]	@ (80047bc <__NVIC_GetPriorityGrouping+0x18>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	0a1b      	lsrs	r3, r3, #8
 80047ae:	f003 0307 	and.w	r3, r3, #7
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	e000ed00 	.word	0xe000ed00

080047c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	db0b      	blt.n	80047ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	f003 021f 	and.w	r2, r3, #31
 80047d8:	4907      	ldr	r1, [pc, #28]	@ (80047f8 <__NVIC_EnableIRQ+0x38>)
 80047da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	2001      	movs	r0, #1
 80047e2:	fa00 f202 	lsl.w	r2, r0, r2
 80047e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	e000e100 	.word	0xe000e100

080047fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	6039      	str	r1, [r7, #0]
 8004806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480c:	2b00      	cmp	r3, #0
 800480e:	db0a      	blt.n	8004826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	b2da      	uxtb	r2, r3
 8004814:	490c      	ldr	r1, [pc, #48]	@ (8004848 <__NVIC_SetPriority+0x4c>)
 8004816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481a:	0112      	lsls	r2, r2, #4
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	440b      	add	r3, r1
 8004820:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004824:	e00a      	b.n	800483c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	b2da      	uxtb	r2, r3
 800482a:	4908      	ldr	r1, [pc, #32]	@ (800484c <__NVIC_SetPriority+0x50>)
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	3b04      	subs	r3, #4
 8004834:	0112      	lsls	r2, r2, #4
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	440b      	add	r3, r1
 800483a:	761a      	strb	r2, [r3, #24]
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	e000e100 	.word	0xe000e100
 800484c:	e000ed00 	.word	0xe000ed00

08004850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004850:	b480      	push	{r7}
 8004852:	b089      	sub	sp, #36	@ 0x24
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f1c3 0307 	rsb	r3, r3, #7
 800486a:	2b04      	cmp	r3, #4
 800486c:	bf28      	it	cs
 800486e:	2304      	movcs	r3, #4
 8004870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	3304      	adds	r3, #4
 8004876:	2b06      	cmp	r3, #6
 8004878:	d902      	bls.n	8004880 <NVIC_EncodePriority+0x30>
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	3b03      	subs	r3, #3
 800487e:	e000      	b.n	8004882 <NVIC_EncodePriority+0x32>
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004884:	f04f 32ff 	mov.w	r2, #4294967295
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43da      	mvns	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	401a      	ands	r2, r3
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004898:	f04f 31ff 	mov.w	r1, #4294967295
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	fa01 f303 	lsl.w	r3, r1, r3
 80048a2:	43d9      	mvns	r1, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a8:	4313      	orrs	r3, r2
         );
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3724      	adds	r7, #36	@ 0x24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
	...

080048b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048c8:	d301      	bcc.n	80048ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048ca:	2301      	movs	r3, #1
 80048cc:	e00f      	b.n	80048ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ce:	4a0a      	ldr	r2, [pc, #40]	@ (80048f8 <SysTick_Config+0x40>)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048d6:	210f      	movs	r1, #15
 80048d8:	f04f 30ff 	mov.w	r0, #4294967295
 80048dc:	f7ff ff8e 	bl	80047fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048e0:	4b05      	ldr	r3, [pc, #20]	@ (80048f8 <SysTick_Config+0x40>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048e6:	4b04      	ldr	r3, [pc, #16]	@ (80048f8 <SysTick_Config+0x40>)
 80048e8:	2207      	movs	r2, #7
 80048ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	e000e010 	.word	0xe000e010

080048fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff ff29 	bl	800475c <__NVIC_SetPriorityGrouping>
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b086      	sub	sp, #24
 8004916:	af00      	add	r7, sp, #0
 8004918:	4603      	mov	r3, r0
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
 800491e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004920:	f7ff ff40 	bl	80047a4 <__NVIC_GetPriorityGrouping>
 8004924:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	6978      	ldr	r0, [r7, #20]
 800492c:	f7ff ff90 	bl	8004850 <NVIC_EncodePriority>
 8004930:	4602      	mov	r2, r0
 8004932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004936:	4611      	mov	r1, r2
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff ff5f 	bl	80047fc <__NVIC_SetPriority>
}
 800493e:	bf00      	nop
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	4603      	mov	r3, r0
 800494e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff ff33 	bl	80047c0 <__NVIC_EnableIRQ>
}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7ff ffa4 	bl	80048b8 <SysTick_Config>
 8004970:	4603      	mov	r3, r0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e08d      	b.n	8004aaa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	4b47      	ldr	r3, [pc, #284]	@ (8004ab4 <HAL_DMA_Init+0x138>)
 8004996:	429a      	cmp	r2, r3
 8004998:	d80f      	bhi.n	80049ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	4b45      	ldr	r3, [pc, #276]	@ (8004ab8 <HAL_DMA_Init+0x13c>)
 80049a2:	4413      	add	r3, r2
 80049a4:	4a45      	ldr	r2, [pc, #276]	@ (8004abc <HAL_DMA_Init+0x140>)
 80049a6:	fba2 2303 	umull	r2, r3, r2, r3
 80049aa:	091b      	lsrs	r3, r3, #4
 80049ac:	009a      	lsls	r2, r3, #2
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a42      	ldr	r2, [pc, #264]	@ (8004ac0 <HAL_DMA_Init+0x144>)
 80049b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80049b8:	e00e      	b.n	80049d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	4b40      	ldr	r3, [pc, #256]	@ (8004ac4 <HAL_DMA_Init+0x148>)
 80049c2:	4413      	add	r3, r2
 80049c4:	4a3d      	ldr	r2, [pc, #244]	@ (8004abc <HAL_DMA_Init+0x140>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	091b      	lsrs	r3, r3, #4
 80049cc:	009a      	lsls	r2, r3, #2
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ac8 <HAL_DMA_Init+0x14c>)
 80049d6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80049ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80049fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f9b6 	bl	8004d9c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a38:	d102      	bne.n	8004a40 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a54:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d010      	beq.n	8004a80 <HAL_DMA_Init+0x104>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d80c      	bhi.n	8004a80 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f9d6 	bl	8004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a7c:	605a      	str	r2, [r3, #4]
 8004a7e:	e008      	b.n	8004a92 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40020407 	.word	0x40020407
 8004ab8:	bffdfff8 	.word	0xbffdfff8
 8004abc:	cccccccd 	.word	0xcccccccd
 8004ac0:	40020000 	.word	0x40020000
 8004ac4:	bffdfbf8 	.word	0xbffdfbf8
 8004ac8:	40020400 	.word	0x40020400

08004acc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_DMA_Start_IT+0x20>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e066      	b.n	8004bba <HAL_DMA_Start_IT+0xee>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d155      	bne.n	8004bac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0201 	bic.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f8fb 	bl	8004d20 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d008      	beq.n	8004b44 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 020e 	orr.w	r2, r2, #14
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	e00f      	b.n	8004b64 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0204 	bic.w	r2, r2, #4
 8004b52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 020a 	orr.w	r2, r2, #10
 8004b62:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d007      	beq.n	8004b82 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b80:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d007      	beq.n	8004b9a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b98:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0201 	orr.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	e005      	b.n	8004bb8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bde:	f003 031f 	and.w	r3, r3, #31
 8004be2:	2204      	movs	r2, #4
 8004be4:	409a      	lsls	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4013      	ands	r3, r2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d026      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x7a>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d021      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0320 	and.w	r3, r3, #32
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d107      	bne.n	8004c16 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0204 	bic.w	r2, r2, #4
 8004c14:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c1a:	f003 021f 	and.w	r2, r3, #31
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c22:	2104      	movs	r1, #4
 8004c24:	fa01 f202 	lsl.w	r2, r1, r2
 8004c28:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d071      	beq.n	8004d16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004c3a:	e06c      	b.n	8004d16 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c40:	f003 031f 	and.w	r3, r3, #31
 8004c44:	2202      	movs	r2, #2
 8004c46:	409a      	lsls	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d02e      	beq.n	8004cae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d029      	beq.n	8004cae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10b      	bne.n	8004c80 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 020a 	bic.w	r2, r2, #10
 8004c76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c84:	f003 021f 	and.w	r2, r3, #31
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8c:	2102      	movs	r1, #2
 8004c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d038      	beq.n	8004d16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004cac:	e033      	b.n	8004d16 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb2:	f003 031f 	and.w	r3, r3, #31
 8004cb6:	2208      	movs	r2, #8
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d02a      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d025      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 020e 	bic.w	r2, r2, #14
 8004cda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce0:	f003 021f 	and.w	r2, r3, #31
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce8:	2101      	movs	r1, #1
 8004cea:	fa01 f202 	lsl.w	r2, r1, r2
 8004cee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d004      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d16:	bf00      	nop
 8004d18:	bf00      	nop
}
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d36:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d004      	beq.n	8004d4a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d48:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4e:	f003 021f 	and.w	r2, r3, #31
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	2101      	movs	r1, #1
 8004d58:	fa01 f202 	lsl.w	r2, r1, r2
 8004d5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	2b10      	cmp	r3, #16
 8004d6c:	d108      	bne.n	8004d80 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d7e:	e007      	b.n	8004d90 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	60da      	str	r2, [r3, #12]
}
 8004d90:	bf00      	nop
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	4b16      	ldr	r3, [pc, #88]	@ (8004e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d802      	bhi.n	8004db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004db0:	4b15      	ldr	r3, [pc, #84]	@ (8004e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	e001      	b.n	8004dba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004db6:	4b15      	ldr	r3, [pc, #84]	@ (8004e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004db8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	3b08      	subs	r3, #8
 8004dc6:	4a12      	ldr	r2, [pc, #72]	@ (8004e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dcc:	091b      	lsrs	r3, r3, #4
 8004dce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd4:	089b      	lsrs	r3, r3, #2
 8004dd6:	009a      	lsls	r2, r3, #2
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	4413      	add	r3, r2
 8004ddc:	461a      	mov	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a0b      	ldr	r2, [pc, #44]	@ (8004e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004de6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f003 031f 	and.w	r3, r3, #31
 8004dee:	2201      	movs	r2, #1
 8004df0:	409a      	lsls	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004df6:	bf00      	nop
 8004df8:	371c      	adds	r7, #28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40020407 	.word	0x40020407
 8004e08:	40020800 	.word	0x40020800
 8004e0c:	40020820 	.word	0x40020820
 8004e10:	cccccccd 	.word	0xcccccccd
 8004e14:	40020880 	.word	0x40020880

08004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	461a      	mov	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a08      	ldr	r2, [pc, #32]	@ (8004e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004e3a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	f003 031f 	and.w	r3, r3, #31
 8004e44:	2201      	movs	r2, #1
 8004e46:	409a      	lsls	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004e4c:	bf00      	nop
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	1000823f 	.word	0x1000823f
 8004e5c:	40020940 	.word	0x40020940

08004e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e6e:	e15a      	b.n	8005126 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	2101      	movs	r1, #1
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 814c 	beq.w	8005120 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d005      	beq.n	8004ea0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d130      	bne.n	8004f02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	2203      	movs	r2, #3
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	091b      	lsrs	r3, r3, #4
 8004eec:	f003 0201 	and.w	r2, r3, #1
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d017      	beq.n	8004f3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	2203      	movs	r2, #3
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4013      	ands	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d123      	bne.n	8004f92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	08da      	lsrs	r2, r3, #3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3208      	adds	r2, #8
 8004f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	220f      	movs	r2, #15
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	43db      	mvns	r3, r3
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	691a      	ldr	r2, [r3, #16]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	08da      	lsrs	r2, r3, #3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3208      	adds	r2, #8
 8004f8c:	6939      	ldr	r1, [r7, #16]
 8004f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	2203      	movs	r2, #3
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f003 0203 	and.w	r2, r3, #3
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 80a6 	beq.w	8005120 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fd4:	4b5b      	ldr	r3, [pc, #364]	@ (8005144 <HAL_GPIO_Init+0x2e4>)
 8004fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fd8:	4a5a      	ldr	r2, [pc, #360]	@ (8005144 <HAL_GPIO_Init+0x2e4>)
 8004fda:	f043 0301 	orr.w	r3, r3, #1
 8004fde:	6613      	str	r3, [r2, #96]	@ 0x60
 8004fe0:	4b58      	ldr	r3, [pc, #352]	@ (8005144 <HAL_GPIO_Init+0x2e4>)
 8004fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	60bb      	str	r3, [r7, #8]
 8004fea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fec:	4a56      	ldr	r2, [pc, #344]	@ (8005148 <HAL_GPIO_Init+0x2e8>)
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	089b      	lsrs	r3, r3, #2
 8004ff2:	3302      	adds	r3, #2
 8004ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	220f      	movs	r2, #15
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	43db      	mvns	r3, r3
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4013      	ands	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005016:	d01f      	beq.n	8005058 <HAL_GPIO_Init+0x1f8>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a4c      	ldr	r2, [pc, #304]	@ (800514c <HAL_GPIO_Init+0x2ec>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d019      	beq.n	8005054 <HAL_GPIO_Init+0x1f4>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a4b      	ldr	r2, [pc, #300]	@ (8005150 <HAL_GPIO_Init+0x2f0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d013      	beq.n	8005050 <HAL_GPIO_Init+0x1f0>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a4a      	ldr	r2, [pc, #296]	@ (8005154 <HAL_GPIO_Init+0x2f4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d00d      	beq.n	800504c <HAL_GPIO_Init+0x1ec>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a49      	ldr	r2, [pc, #292]	@ (8005158 <HAL_GPIO_Init+0x2f8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d007      	beq.n	8005048 <HAL_GPIO_Init+0x1e8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a48      	ldr	r2, [pc, #288]	@ (800515c <HAL_GPIO_Init+0x2fc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d101      	bne.n	8005044 <HAL_GPIO_Init+0x1e4>
 8005040:	2305      	movs	r3, #5
 8005042:	e00a      	b.n	800505a <HAL_GPIO_Init+0x1fa>
 8005044:	2306      	movs	r3, #6
 8005046:	e008      	b.n	800505a <HAL_GPIO_Init+0x1fa>
 8005048:	2304      	movs	r3, #4
 800504a:	e006      	b.n	800505a <HAL_GPIO_Init+0x1fa>
 800504c:	2303      	movs	r3, #3
 800504e:	e004      	b.n	800505a <HAL_GPIO_Init+0x1fa>
 8005050:	2302      	movs	r3, #2
 8005052:	e002      	b.n	800505a <HAL_GPIO_Init+0x1fa>
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <HAL_GPIO_Init+0x1fa>
 8005058:	2300      	movs	r3, #0
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	f002 0203 	and.w	r2, r2, #3
 8005060:	0092      	lsls	r2, r2, #2
 8005062:	4093      	lsls	r3, r2
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800506a:	4937      	ldr	r1, [pc, #220]	@ (8005148 <HAL_GPIO_Init+0x2e8>)
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	089b      	lsrs	r3, r3, #2
 8005070:	3302      	adds	r3, #2
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005078:	4b39      	ldr	r3, [pc, #228]	@ (8005160 <HAL_GPIO_Init+0x300>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	43db      	mvns	r3, r3
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	4013      	ands	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800509c:	4a30      	ldr	r2, [pc, #192]	@ (8005160 <HAL_GPIO_Init+0x300>)
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80050a2:	4b2f      	ldr	r3, [pc, #188]	@ (8005160 <HAL_GPIO_Init+0x300>)
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	43db      	mvns	r3, r3
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4013      	ands	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80050c6:	4a26      	ldr	r2, [pc, #152]	@ (8005160 <HAL_GPIO_Init+0x300>)
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80050cc:	4b24      	ldr	r3, [pc, #144]	@ (8005160 <HAL_GPIO_Init+0x300>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	43db      	mvns	r3, r3
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4013      	ands	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80050f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005160 <HAL_GPIO_Init+0x300>)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80050f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005160 <HAL_GPIO_Init+0x300>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	43db      	mvns	r3, r3
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4013      	ands	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800511a:	4a11      	ldr	r2, [pc, #68]	@ (8005160 <HAL_GPIO_Init+0x300>)
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	3301      	adds	r3, #1
 8005124:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	fa22 f303 	lsr.w	r3, r2, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	f47f ae9d 	bne.w	8004e70 <HAL_GPIO_Init+0x10>
  }
}
 8005136:	bf00      	nop
 8005138:	bf00      	nop
 800513a:	371c      	adds	r7, #28
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	40021000 	.word	0x40021000
 8005148:	40010000 	.word	0x40010000
 800514c:	48000400 	.word	0x48000400
 8005150:	48000800 	.word	0x48000800
 8005154:	48000c00 	.word	0x48000c00
 8005158:	48001000 	.word	0x48001000
 800515c:	48001400 	.word	0x48001400
 8005160:	40010400 	.word	0x40010400

08005164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	460b      	mov	r3, r1
 800516e:	807b      	strh	r3, [r7, #2]
 8005170:	4613      	mov	r3, r2
 8005172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005174:	787b      	ldrb	r3, [r7, #1]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800517a:	887a      	ldrh	r2, [r7, #2]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005180:	e002      	b.n	8005188 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005182:	887a      	ldrh	r2, [r7, #2]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051a6:	887a      	ldrh	r2, [r7, #2]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4013      	ands	r3, r2
 80051ac:	041a      	lsls	r2, r3, #16
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	43d9      	mvns	r1, r3
 80051b2:	887b      	ldrh	r3, [r7, #2]
 80051b4:	400b      	ands	r3, r1
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	619a      	str	r2, [r3, #24]
}
 80051bc:	bf00      	nop
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80051d2:	4b08      	ldr	r3, [pc, #32]	@ (80051f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051d4:	695a      	ldr	r2, [r3, #20]
 80051d6:	88fb      	ldrh	r3, [r7, #6]
 80051d8:	4013      	ands	r3, r2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d006      	beq.n	80051ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051de:	4a05      	ldr	r2, [pc, #20]	@ (80051f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051e0:	88fb      	ldrh	r3, [r7, #6]
 80051e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051e4:	88fb      	ldrh	r3, [r7, #6]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fc fb26 	bl	8001838 <HAL_GPIO_EXTI_Callback>
  }
}
 80051ec:	bf00      	nop
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40010400 	.word	0x40010400

080051f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d141      	bne.n	800528a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005206:	4b4b      	ldr	r3, [pc, #300]	@ (8005334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800520e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005212:	d131      	bne.n	8005278 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005214:	4b47      	ldr	r3, [pc, #284]	@ (8005334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800521a:	4a46      	ldr	r2, [pc, #280]	@ (8005334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800521c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005220:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005224:	4b43      	ldr	r3, [pc, #268]	@ (8005334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800522c:	4a41      	ldr	r2, [pc, #260]	@ (8005334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800522e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005232:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005234:	4b40      	ldr	r3, [pc, #256]	@ (8005338 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2232      	movs	r2, #50	@ 0x32
 800523a:	fb02 f303 	mul.w	r3, r2, r3
 800523e:	4a3f      	ldr	r2, [pc, #252]	@ (800533c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005240:	fba2 2303 	umull	r2, r3, r2, r3
 8005244:	0c9b      	lsrs	r3, r3, #18
 8005246:	3301      	adds	r3, #1
 8005248:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800524a:	e002      	b.n	8005252 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	3b01      	subs	r3, #1
 8005250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005252:	4b38      	ldr	r3, [pc, #224]	@ (8005334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800525a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800525e:	d102      	bne.n	8005266 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f2      	bne.n	800524c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005266:	4b33      	ldr	r3, [pc, #204]	@ (8005334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800526e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005272:	d158      	bne.n	8005326 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e057      	b.n	8005328 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005278:	4b2e      	ldr	r3, [pc, #184]	@ (8005334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800527a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800527e:	4a2d      	ldr	r2, [pc, #180]	@ (8005334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005284:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005288:	e04d      	b.n	8005326 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005290:	d141      	bne.n	8005316 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005292:	4b28      	ldr	r3, [pc, #160]	@ (8005334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800529a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800529e:	d131      	bne.n	8005304 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052a0:	4b24      	ldr	r3, [pc, #144]	@ (8005334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052a6:	4a23      	ldr	r2, [pc, #140]	@ (8005334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052b0:	4b20      	ldr	r3, [pc, #128]	@ (8005334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005338 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2232      	movs	r2, #50	@ 0x32
 80052c6:	fb02 f303 	mul.w	r3, r2, r3
 80052ca:	4a1c      	ldr	r2, [pc, #112]	@ (800533c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052cc:	fba2 2303 	umull	r2, r3, r2, r3
 80052d0:	0c9b      	lsrs	r3, r3, #18
 80052d2:	3301      	adds	r3, #1
 80052d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052d6:	e002      	b.n	80052de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3b01      	subs	r3, #1
 80052dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052de:	4b15      	ldr	r3, [pc, #84]	@ (8005334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ea:	d102      	bne.n	80052f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f2      	bne.n	80052d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052f2:	4b10      	ldr	r3, [pc, #64]	@ (8005334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052fe:	d112      	bne.n	8005326 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e011      	b.n	8005328 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005304:	4b0b      	ldr	r3, [pc, #44]	@ (8005334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005306:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800530a:	4a0a      	ldr	r2, [pc, #40]	@ (8005334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800530c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005310:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005314:	e007      	b.n	8005326 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005316:	4b07      	ldr	r3, [pc, #28]	@ (8005334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800531e:	4a05      	ldr	r2, [pc, #20]	@ (8005334 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005320:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005324:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	40007000 	.word	0x40007000
 8005338:	20000010 	.word	0x20000010
 800533c:	431bde83 	.word	0x431bde83

08005340 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005344:	4b05      	ldr	r3, [pc, #20]	@ (800535c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	4a04      	ldr	r2, [pc, #16]	@ (800535c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800534a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800534e:	6093      	str	r3, [r2, #8]
}
 8005350:	bf00      	nop
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40007000 	.word	0x40007000

08005360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e2fe      	b.n	8005970 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d075      	beq.n	800546a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800537e:	4b97      	ldr	r3, [pc, #604]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 030c 	and.w	r3, r3, #12
 8005386:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005388:	4b94      	ldr	r3, [pc, #592]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0303 	and.w	r3, r3, #3
 8005390:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	2b0c      	cmp	r3, #12
 8005396:	d102      	bne.n	800539e <HAL_RCC_OscConfig+0x3e>
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2b03      	cmp	r3, #3
 800539c:	d002      	beq.n	80053a4 <HAL_RCC_OscConfig+0x44>
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d10b      	bne.n	80053bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a4:	4b8d      	ldr	r3, [pc, #564]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d05b      	beq.n	8005468 <HAL_RCC_OscConfig+0x108>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d157      	bne.n	8005468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e2d9      	b.n	8005970 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053c4:	d106      	bne.n	80053d4 <HAL_RCC_OscConfig+0x74>
 80053c6:	4b85      	ldr	r3, [pc, #532]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a84      	ldr	r2, [pc, #528]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 80053cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	e01d      	b.n	8005410 <HAL_RCC_OscConfig+0xb0>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053dc:	d10c      	bne.n	80053f8 <HAL_RCC_OscConfig+0x98>
 80053de:	4b7f      	ldr	r3, [pc, #508]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a7e      	ldr	r2, [pc, #504]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 80053e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	4b7c      	ldr	r3, [pc, #496]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a7b      	ldr	r2, [pc, #492]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 80053f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	e00b      	b.n	8005410 <HAL_RCC_OscConfig+0xb0>
 80053f8:	4b78      	ldr	r3, [pc, #480]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a77      	ldr	r2, [pc, #476]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 80053fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	4b75      	ldr	r3, [pc, #468]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a74      	ldr	r2, [pc, #464]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 800540a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800540e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d013      	beq.n	8005440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005418:	f7fd fe0e 	bl	8003038 <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005420:	f7fd fe0a 	bl	8003038 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b64      	cmp	r3, #100	@ 0x64
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e29e      	b.n	8005970 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005432:	4b6a      	ldr	r3, [pc, #424]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0f0      	beq.n	8005420 <HAL_RCC_OscConfig+0xc0>
 800543e:	e014      	b.n	800546a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005440:	f7fd fdfa 	bl	8003038 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005448:	f7fd fdf6 	bl	8003038 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b64      	cmp	r3, #100	@ 0x64
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e28a      	b.n	8005970 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800545a:	4b60      	ldr	r3, [pc, #384]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0xe8>
 8005466:	e000      	b.n	800546a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d075      	beq.n	8005562 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005476:	4b59      	ldr	r3, [pc, #356]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 030c 	and.w	r3, r3, #12
 800547e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005480:	4b56      	ldr	r3, [pc, #344]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f003 0303 	and.w	r3, r3, #3
 8005488:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b0c      	cmp	r3, #12
 800548e:	d102      	bne.n	8005496 <HAL_RCC_OscConfig+0x136>
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2b02      	cmp	r3, #2
 8005494:	d002      	beq.n	800549c <HAL_RCC_OscConfig+0x13c>
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	2b04      	cmp	r3, #4
 800549a:	d11f      	bne.n	80054dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800549c:	4b4f      	ldr	r3, [pc, #316]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <HAL_RCC_OscConfig+0x154>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e25d      	b.n	8005970 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b4:	4b49      	ldr	r3, [pc, #292]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	061b      	lsls	r3, r3, #24
 80054c2:	4946      	ldr	r1, [pc, #280]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80054c8:	4b45      	ldr	r3, [pc, #276]	@ (80055e0 <HAL_RCC_OscConfig+0x280>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fd fd67 	bl	8002fa0 <HAL_InitTick>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d043      	beq.n	8005560 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e249      	b.n	8005970 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d023      	beq.n	800552c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054e4:	4b3d      	ldr	r3, [pc, #244]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a3c      	ldr	r2, [pc, #240]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 80054ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f0:	f7fd fda2 	bl	8003038 <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054f8:	f7fd fd9e 	bl	8003038 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e232      	b.n	8005970 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800550a:	4b34      	ldr	r3, [pc, #208]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0f0      	beq.n	80054f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005516:	4b31      	ldr	r3, [pc, #196]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	061b      	lsls	r3, r3, #24
 8005524:	492d      	ldr	r1, [pc, #180]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 8005526:	4313      	orrs	r3, r2
 8005528:	604b      	str	r3, [r1, #4]
 800552a:	e01a      	b.n	8005562 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800552c:	4b2b      	ldr	r3, [pc, #172]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a2a      	ldr	r2, [pc, #168]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 8005532:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005538:	f7fd fd7e 	bl	8003038 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005540:	f7fd fd7a 	bl	8003038 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e20e      	b.n	8005970 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005552:	4b22      	ldr	r3, [pc, #136]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1f0      	bne.n	8005540 <HAL_RCC_OscConfig+0x1e0>
 800555e:	e000      	b.n	8005562 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005560:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d041      	beq.n	80055f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d01c      	beq.n	80055b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005576:	4b19      	ldr	r3, [pc, #100]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 8005578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800557c:	4a17      	ldr	r2, [pc, #92]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 800557e:	f043 0301 	orr.w	r3, r3, #1
 8005582:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005586:	f7fd fd57 	bl	8003038 <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800558e:	f7fd fd53 	bl	8003038 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e1e7      	b.n	8005970 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055a0:	4b0e      	ldr	r3, [pc, #56]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 80055a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0ef      	beq.n	800558e <HAL_RCC_OscConfig+0x22e>
 80055ae:	e020      	b.n	80055f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055b0:	4b0a      	ldr	r3, [pc, #40]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 80055b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055b6:	4a09      	ldr	r2, [pc, #36]	@ (80055dc <HAL_RCC_OscConfig+0x27c>)
 80055b8:	f023 0301 	bic.w	r3, r3, #1
 80055bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c0:	f7fd fd3a 	bl	8003038 <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055c6:	e00d      	b.n	80055e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055c8:	f7fd fd36 	bl	8003038 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d906      	bls.n	80055e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e1ca      	b.n	8005970 <HAL_RCC_OscConfig+0x610>
 80055da:	bf00      	nop
 80055dc:	40021000 	.word	0x40021000
 80055e0:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055e4:	4b8c      	ldr	r3, [pc, #560]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 80055e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1ea      	bne.n	80055c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 80a6 	beq.w	800574c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005600:	2300      	movs	r3, #0
 8005602:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005604:	4b84      	ldr	r3, [pc, #528]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 8005606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_RCC_OscConfig+0x2b4>
 8005610:	2301      	movs	r3, #1
 8005612:	e000      	b.n	8005616 <HAL_RCC_OscConfig+0x2b6>
 8005614:	2300      	movs	r3, #0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00d      	beq.n	8005636 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800561a:	4b7f      	ldr	r3, [pc, #508]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 800561c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800561e:	4a7e      	ldr	r2, [pc, #504]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 8005620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005624:	6593      	str	r3, [r2, #88]	@ 0x58
 8005626:	4b7c      	ldr	r3, [pc, #496]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 8005628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800562a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005632:	2301      	movs	r3, #1
 8005634:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005636:	4b79      	ldr	r3, [pc, #484]	@ (800581c <HAL_RCC_OscConfig+0x4bc>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800563e:	2b00      	cmp	r3, #0
 8005640:	d118      	bne.n	8005674 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005642:	4b76      	ldr	r3, [pc, #472]	@ (800581c <HAL_RCC_OscConfig+0x4bc>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a75      	ldr	r2, [pc, #468]	@ (800581c <HAL_RCC_OscConfig+0x4bc>)
 8005648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800564c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800564e:	f7fd fcf3 	bl	8003038 <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005654:	e008      	b.n	8005668 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005656:	f7fd fcef 	bl	8003038 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e183      	b.n	8005970 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005668:	4b6c      	ldr	r3, [pc, #432]	@ (800581c <HAL_RCC_OscConfig+0x4bc>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0f0      	beq.n	8005656 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d108      	bne.n	800568e <HAL_RCC_OscConfig+0x32e>
 800567c:	4b66      	ldr	r3, [pc, #408]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 800567e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005682:	4a65      	ldr	r2, [pc, #404]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 8005684:	f043 0301 	orr.w	r3, r3, #1
 8005688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800568c:	e024      	b.n	80056d8 <HAL_RCC_OscConfig+0x378>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b05      	cmp	r3, #5
 8005694:	d110      	bne.n	80056b8 <HAL_RCC_OscConfig+0x358>
 8005696:	4b60      	ldr	r3, [pc, #384]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 8005698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800569c:	4a5e      	ldr	r2, [pc, #376]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 800569e:	f043 0304 	orr.w	r3, r3, #4
 80056a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056a6:	4b5c      	ldr	r3, [pc, #368]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 80056a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ac:	4a5a      	ldr	r2, [pc, #360]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 80056ae:	f043 0301 	orr.w	r3, r3, #1
 80056b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056b6:	e00f      	b.n	80056d8 <HAL_RCC_OscConfig+0x378>
 80056b8:	4b57      	ldr	r3, [pc, #348]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 80056ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056be:	4a56      	ldr	r2, [pc, #344]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056c8:	4b53      	ldr	r3, [pc, #332]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 80056ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ce:	4a52      	ldr	r2, [pc, #328]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 80056d0:	f023 0304 	bic.w	r3, r3, #4
 80056d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d016      	beq.n	800570e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e0:	f7fd fcaa 	bl	8003038 <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056e6:	e00a      	b.n	80056fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e8:	f7fd fca6 	bl	8003038 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e138      	b.n	8005970 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056fe:	4b46      	ldr	r3, [pc, #280]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 8005700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0ed      	beq.n	80056e8 <HAL_RCC_OscConfig+0x388>
 800570c:	e015      	b.n	800573a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800570e:	f7fd fc93 	bl	8003038 <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005714:	e00a      	b.n	800572c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005716:	f7fd fc8f 	bl	8003038 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005724:	4293      	cmp	r3, r2
 8005726:	d901      	bls.n	800572c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e121      	b.n	8005970 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800572c:	4b3a      	ldr	r3, [pc, #232]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 800572e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1ed      	bne.n	8005716 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800573a:	7ffb      	ldrb	r3, [r7, #31]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d105      	bne.n	800574c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005740:	4b35      	ldr	r3, [pc, #212]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 8005742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005744:	4a34      	ldr	r2, [pc, #208]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 8005746:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800574a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0320 	and.w	r3, r3, #32
 8005754:	2b00      	cmp	r3, #0
 8005756:	d03c      	beq.n	80057d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01c      	beq.n	800579a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005760:	4b2d      	ldr	r3, [pc, #180]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 8005762:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005766:	4a2c      	ldr	r2, [pc, #176]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 8005768:	f043 0301 	orr.w	r3, r3, #1
 800576c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005770:	f7fd fc62 	bl	8003038 <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005778:	f7fd fc5e 	bl	8003038 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e0f2      	b.n	8005970 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800578a:	4b23      	ldr	r3, [pc, #140]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 800578c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0ef      	beq.n	8005778 <HAL_RCC_OscConfig+0x418>
 8005798:	e01b      	b.n	80057d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800579a:	4b1f      	ldr	r3, [pc, #124]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 800579c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 80057a2:	f023 0301 	bic.w	r3, r3, #1
 80057a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057aa:	f7fd fc45 	bl	8003038 <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057b2:	f7fd fc41 	bl	8003038 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e0d5      	b.n	8005970 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057c4:	4b14      	ldr	r3, [pc, #80]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 80057c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1ef      	bne.n	80057b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 80c9 	beq.w	800596e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057dc:	4b0e      	ldr	r3, [pc, #56]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 030c 	and.w	r3, r3, #12
 80057e4:	2b0c      	cmp	r3, #12
 80057e6:	f000 8083 	beq.w	80058f0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d15e      	bne.n	80058b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057f2:	4b09      	ldr	r3, [pc, #36]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a08      	ldr	r2, [pc, #32]	@ (8005818 <HAL_RCC_OscConfig+0x4b8>)
 80057f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fe:	f7fd fc1b 	bl	8003038 <HAL_GetTick>
 8005802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005804:	e00c      	b.n	8005820 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005806:	f7fd fc17 	bl	8003038 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d905      	bls.n	8005820 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e0ab      	b.n	8005970 <HAL_RCC_OscConfig+0x610>
 8005818:	40021000 	.word	0x40021000
 800581c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005820:	4b55      	ldr	r3, [pc, #340]	@ (8005978 <HAL_RCC_OscConfig+0x618>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1ec      	bne.n	8005806 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800582c:	4b52      	ldr	r3, [pc, #328]	@ (8005978 <HAL_RCC_OscConfig+0x618>)
 800582e:	68da      	ldr	r2, [r3, #12]
 8005830:	4b52      	ldr	r3, [pc, #328]	@ (800597c <HAL_RCC_OscConfig+0x61c>)
 8005832:	4013      	ands	r3, r2
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6a11      	ldr	r1, [r2, #32]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800583c:	3a01      	subs	r2, #1
 800583e:	0112      	lsls	r2, r2, #4
 8005840:	4311      	orrs	r1, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005846:	0212      	lsls	r2, r2, #8
 8005848:	4311      	orrs	r1, r2
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800584e:	0852      	lsrs	r2, r2, #1
 8005850:	3a01      	subs	r2, #1
 8005852:	0552      	lsls	r2, r2, #21
 8005854:	4311      	orrs	r1, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800585a:	0852      	lsrs	r2, r2, #1
 800585c:	3a01      	subs	r2, #1
 800585e:	0652      	lsls	r2, r2, #25
 8005860:	4311      	orrs	r1, r2
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005866:	06d2      	lsls	r2, r2, #27
 8005868:	430a      	orrs	r2, r1
 800586a:	4943      	ldr	r1, [pc, #268]	@ (8005978 <HAL_RCC_OscConfig+0x618>)
 800586c:	4313      	orrs	r3, r2
 800586e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005870:	4b41      	ldr	r3, [pc, #260]	@ (8005978 <HAL_RCC_OscConfig+0x618>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a40      	ldr	r2, [pc, #256]	@ (8005978 <HAL_RCC_OscConfig+0x618>)
 8005876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800587a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800587c:	4b3e      	ldr	r3, [pc, #248]	@ (8005978 <HAL_RCC_OscConfig+0x618>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	4a3d      	ldr	r2, [pc, #244]	@ (8005978 <HAL_RCC_OscConfig+0x618>)
 8005882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005886:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005888:	f7fd fbd6 	bl	8003038 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005890:	f7fd fbd2 	bl	8003038 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e066      	b.n	8005970 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058a2:	4b35      	ldr	r3, [pc, #212]	@ (8005978 <HAL_RCC_OscConfig+0x618>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0f0      	beq.n	8005890 <HAL_RCC_OscConfig+0x530>
 80058ae:	e05e      	b.n	800596e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b0:	4b31      	ldr	r3, [pc, #196]	@ (8005978 <HAL_RCC_OscConfig+0x618>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a30      	ldr	r2, [pc, #192]	@ (8005978 <HAL_RCC_OscConfig+0x618>)
 80058b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058bc:	f7fd fbbc 	bl	8003038 <HAL_GetTick>
 80058c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058c2:	e008      	b.n	80058d6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058c4:	f7fd fbb8 	bl	8003038 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e04c      	b.n	8005970 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058d6:	4b28      	ldr	r3, [pc, #160]	@ (8005978 <HAL_RCC_OscConfig+0x618>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1f0      	bne.n	80058c4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80058e2:	4b25      	ldr	r3, [pc, #148]	@ (8005978 <HAL_RCC_OscConfig+0x618>)
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	4924      	ldr	r1, [pc, #144]	@ (8005978 <HAL_RCC_OscConfig+0x618>)
 80058e8:	4b25      	ldr	r3, [pc, #148]	@ (8005980 <HAL_RCC_OscConfig+0x620>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	60cb      	str	r3, [r1, #12]
 80058ee:	e03e      	b.n	800596e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e039      	b.n	8005970 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80058fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005978 <HAL_RCC_OscConfig+0x618>)
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f003 0203 	and.w	r2, r3, #3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	429a      	cmp	r2, r3
 800590e:	d12c      	bne.n	800596a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591a:	3b01      	subs	r3, #1
 800591c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800591e:	429a      	cmp	r2, r3
 8005920:	d123      	bne.n	800596a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800592e:	429a      	cmp	r2, r3
 8005930:	d11b      	bne.n	800596a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800593e:	429a      	cmp	r2, r3
 8005940:	d113      	bne.n	800596a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594c:	085b      	lsrs	r3, r3, #1
 800594e:	3b01      	subs	r3, #1
 8005950:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005952:	429a      	cmp	r2, r3
 8005954:	d109      	bne.n	800596a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005960:	085b      	lsrs	r3, r3, #1
 8005962:	3b01      	subs	r3, #1
 8005964:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005966:	429a      	cmp	r2, r3
 8005968:	d001      	beq.n	800596e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e000      	b.n	8005970 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3720      	adds	r7, #32
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40021000 	.word	0x40021000
 800597c:	019f800c 	.word	0x019f800c
 8005980:	feeefffc 	.word	0xfeeefffc

08005984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800598e:	2300      	movs	r3, #0
 8005990:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e11e      	b.n	8005bda <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800599c:	4b91      	ldr	r3, [pc, #580]	@ (8005be4 <HAL_RCC_ClockConfig+0x260>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 030f 	and.w	r3, r3, #15
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d910      	bls.n	80059cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059aa:	4b8e      	ldr	r3, [pc, #568]	@ (8005be4 <HAL_RCC_ClockConfig+0x260>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f023 020f 	bic.w	r2, r3, #15
 80059b2:	498c      	ldr	r1, [pc, #560]	@ (8005be4 <HAL_RCC_ClockConfig+0x260>)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ba:	4b8a      	ldr	r3, [pc, #552]	@ (8005be4 <HAL_RCC_ClockConfig+0x260>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 030f 	and.w	r3, r3, #15
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d001      	beq.n	80059cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e106      	b.n	8005bda <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d073      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2b03      	cmp	r3, #3
 80059de:	d129      	bne.n	8005a34 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059e0:	4b81      	ldr	r3, [pc, #516]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0f4      	b.n	8005bda <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80059f0:	f000 f99e 	bl	8005d30 <RCC_GetSysClockFreqFromPLLSource>
 80059f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4a7c      	ldr	r2, [pc, #496]	@ (8005bec <HAL_RCC_ClockConfig+0x268>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d93f      	bls.n	8005a7e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80059fe:	4b7a      	ldr	r3, [pc, #488]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d009      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d033      	beq.n	8005a7e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d12f      	bne.n	8005a7e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a1e:	4b72      	ldr	r3, [pc, #456]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a26:	4a70      	ldr	r2, [pc, #448]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a2e:	2380      	movs	r3, #128	@ 0x80
 8005a30:	617b      	str	r3, [r7, #20]
 8005a32:	e024      	b.n	8005a7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d107      	bne.n	8005a4c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a3c:	4b6a      	ldr	r3, [pc, #424]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d109      	bne.n	8005a5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0c6      	b.n	8005bda <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a4c:	4b66      	ldr	r3, [pc, #408]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0be      	b.n	8005bda <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005a5c:	f000 f8ce 	bl	8005bfc <HAL_RCC_GetSysClockFreq>
 8005a60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	4a61      	ldr	r2, [pc, #388]	@ (8005bec <HAL_RCC_ClockConfig+0x268>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d909      	bls.n	8005a7e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a6a:	4b5f      	ldr	r3, [pc, #380]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a72:	4a5d      	ldr	r2, [pc, #372]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a78:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005a7a:	2380      	movs	r3, #128	@ 0x80
 8005a7c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a7e:	4b5a      	ldr	r3, [pc, #360]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f023 0203 	bic.w	r2, r3, #3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	4957      	ldr	r1, [pc, #348]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a90:	f7fd fad2 	bl	8003038 <HAL_GetTick>
 8005a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a96:	e00a      	b.n	8005aae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a98:	f7fd face 	bl	8003038 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e095      	b.n	8005bda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aae:	4b4e      	ldr	r3, [pc, #312]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 020c 	and.w	r2, r3, #12
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d1eb      	bne.n	8005a98 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d023      	beq.n	8005b14 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d005      	beq.n	8005ae4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ad8:	4b43      	ldr	r3, [pc, #268]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	4a42      	ldr	r2, [pc, #264]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005ade:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005ae2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0308 	and.w	r3, r3, #8
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d007      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005af0:	4b3d      	ldr	r3, [pc, #244]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005af8:	4a3b      	ldr	r2, [pc, #236]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005afa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005afe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b00:	4b39      	ldr	r3, [pc, #228]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	4936      	ldr	r1, [pc, #216]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	608b      	str	r3, [r1, #8]
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2b80      	cmp	r3, #128	@ 0x80
 8005b18:	d105      	bne.n	8005b26 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b1a:	4b33      	ldr	r3, [pc, #204]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	4a32      	ldr	r2, [pc, #200]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005b20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b24:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b26:	4b2f      	ldr	r3, [pc, #188]	@ (8005be4 <HAL_RCC_ClockConfig+0x260>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 030f 	and.w	r3, r3, #15
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d21d      	bcs.n	8005b70 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b34:	4b2b      	ldr	r3, [pc, #172]	@ (8005be4 <HAL_RCC_ClockConfig+0x260>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f023 020f 	bic.w	r2, r3, #15
 8005b3c:	4929      	ldr	r1, [pc, #164]	@ (8005be4 <HAL_RCC_ClockConfig+0x260>)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b44:	f7fd fa78 	bl	8003038 <HAL_GetTick>
 8005b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b4a:	e00a      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b4c:	f7fd fa74 	bl	8003038 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e03b      	b.n	8005bda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b62:	4b20      	ldr	r3, [pc, #128]	@ (8005be4 <HAL_RCC_ClockConfig+0x260>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d1ed      	bne.n	8005b4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d008      	beq.n	8005b8e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	4917      	ldr	r1, [pc, #92]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d009      	beq.n	8005bae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b9a:	4b13      	ldr	r3, [pc, #76]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	490f      	ldr	r1, [pc, #60]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bae:	f000 f825 	bl	8005bfc <HAL_RCC_GetSysClockFreq>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8005be8 <HAL_RCC_ClockConfig+0x264>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	091b      	lsrs	r3, r3, #4
 8005bba:	f003 030f 	and.w	r3, r3, #15
 8005bbe:	490c      	ldr	r1, [pc, #48]	@ (8005bf0 <HAL_RCC_ClockConfig+0x26c>)
 8005bc0:	5ccb      	ldrb	r3, [r1, r3]
 8005bc2:	f003 031f 	and.w	r3, r3, #31
 8005bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bca:	4a0a      	ldr	r2, [pc, #40]	@ (8005bf4 <HAL_RCC_ClockConfig+0x270>)
 8005bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005bce:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf8 <HAL_RCC_ClockConfig+0x274>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fd f9e4 	bl	8002fa0 <HAL_InitTick>
 8005bd8:	4603      	mov	r3, r0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	40022000 	.word	0x40022000
 8005be8:	40021000 	.word	0x40021000
 8005bec:	04c4b400 	.word	0x04c4b400
 8005bf0:	0800d0e8 	.word	0x0800d0e8
 8005bf4:	20000010 	.word	0x20000010
 8005bf8:	20000018 	.word	0x20000018

08005bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c02:	4b2c      	ldr	r3, [pc, #176]	@ (8005cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f003 030c 	and.w	r3, r3, #12
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	d102      	bne.n	8005c14 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8005cb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c10:	613b      	str	r3, [r7, #16]
 8005c12:	e047      	b.n	8005ca4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c14:	4b27      	ldr	r3, [pc, #156]	@ (8005cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f003 030c 	and.w	r3, r3, #12
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d102      	bne.n	8005c26 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c20:	4b26      	ldr	r3, [pc, #152]	@ (8005cbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c22:	613b      	str	r3, [r7, #16]
 8005c24:	e03e      	b.n	8005ca4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005c26:	4b23      	ldr	r3, [pc, #140]	@ (8005cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 030c 	and.w	r3, r3, #12
 8005c2e:	2b0c      	cmp	r3, #12
 8005c30:	d136      	bne.n	8005ca0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c32:	4b20      	ldr	r3, [pc, #128]	@ (8005cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8005cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	091b      	lsrs	r3, r3, #4
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	3301      	adds	r3, #1
 8005c48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d10c      	bne.n	8005c6a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c50:	4a1a      	ldr	r2, [pc, #104]	@ (8005cbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c58:	4a16      	ldr	r2, [pc, #88]	@ (8005cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c5a:	68d2      	ldr	r2, [r2, #12]
 8005c5c:	0a12      	lsrs	r2, r2, #8
 8005c5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c62:	fb02 f303 	mul.w	r3, r2, r3
 8005c66:	617b      	str	r3, [r7, #20]
      break;
 8005c68:	e00c      	b.n	8005c84 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c6a:	4a13      	ldr	r2, [pc, #76]	@ (8005cb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c72:	4a10      	ldr	r2, [pc, #64]	@ (8005cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c74:	68d2      	ldr	r2, [r2, #12]
 8005c76:	0a12      	lsrs	r2, r2, #8
 8005c78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c7c:	fb02 f303 	mul.w	r3, r2, r3
 8005c80:	617b      	str	r3, [r7, #20]
      break;
 8005c82:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c84:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	0e5b      	lsrs	r3, r3, #25
 8005c8a:	f003 0303 	and.w	r3, r3, #3
 8005c8e:	3301      	adds	r3, #1
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9c:	613b      	str	r3, [r7, #16]
 8005c9e:	e001      	b.n	8005ca4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ca4:	693b      	ldr	r3, [r7, #16]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	371c      	adds	r7, #28
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	00f42400 	.word	0x00f42400
 8005cbc:	02dc6c00 	.word	0x02dc6c00

08005cc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cc4:	4b03      	ldr	r3, [pc, #12]	@ (8005cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	20000010 	.word	0x20000010

08005cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005cdc:	f7ff fff0 	bl	8005cc0 <HAL_RCC_GetHCLKFreq>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	4b06      	ldr	r3, [pc, #24]	@ (8005cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	0a1b      	lsrs	r3, r3, #8
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	4904      	ldr	r1, [pc, #16]	@ (8005d00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cee:	5ccb      	ldrb	r3, [r1, r3]
 8005cf0:	f003 031f 	and.w	r3, r3, #31
 8005cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	0800d0f8 	.word	0x0800d0f8

08005d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d08:	f7ff ffda 	bl	8005cc0 <HAL_RCC_GetHCLKFreq>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	4b06      	ldr	r3, [pc, #24]	@ (8005d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	0adb      	lsrs	r3, r3, #11
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	4904      	ldr	r1, [pc, #16]	@ (8005d2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d1a:	5ccb      	ldrb	r3, [r1, r3]
 8005d1c:	f003 031f 	and.w	r3, r3, #31
 8005d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	40021000 	.word	0x40021000
 8005d2c:	0800d0f8 	.word	0x0800d0f8

08005d30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d36:	4b1e      	ldr	r3, [pc, #120]	@ (8005db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d40:	4b1b      	ldr	r3, [pc, #108]	@ (8005db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	091b      	lsrs	r3, r3, #4
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d10c      	bne.n	8005d6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d54:	4a17      	ldr	r2, [pc, #92]	@ (8005db4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5c:	4a14      	ldr	r2, [pc, #80]	@ (8005db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d5e:	68d2      	ldr	r2, [r2, #12]
 8005d60:	0a12      	lsrs	r2, r2, #8
 8005d62:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d66:	fb02 f303 	mul.w	r3, r2, r3
 8005d6a:	617b      	str	r3, [r7, #20]
    break;
 8005d6c:	e00c      	b.n	8005d88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d6e:	4a12      	ldr	r2, [pc, #72]	@ (8005db8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d76:	4a0e      	ldr	r2, [pc, #56]	@ (8005db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d78:	68d2      	ldr	r2, [r2, #12]
 8005d7a:	0a12      	lsrs	r2, r2, #8
 8005d7c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d80:	fb02 f303 	mul.w	r3, r2, r3
 8005d84:	617b      	str	r3, [r7, #20]
    break;
 8005d86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d88:	4b09      	ldr	r3, [pc, #36]	@ (8005db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	0e5b      	lsrs	r3, r3, #25
 8005d8e:	f003 0303 	and.w	r3, r3, #3
 8005d92:	3301      	adds	r3, #1
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005da2:	687b      	ldr	r3, [r7, #4]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	371c      	adds	r7, #28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	40021000 	.word	0x40021000
 8005db4:	02dc6c00 	.word	0x02dc6c00
 8005db8:	00f42400 	.word	0x00f42400

08005dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005dc8:	2300      	movs	r3, #0
 8005dca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 8098 	beq.w	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dde:	4b43      	ldr	r3, [pc, #268]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10d      	bne.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dea:	4b40      	ldr	r3, [pc, #256]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dee:	4a3f      	ldr	r2, [pc, #252]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005df4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005df6:	4b3d      	ldr	r3, [pc, #244]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dfe:	60bb      	str	r3, [r7, #8]
 8005e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e02:	2301      	movs	r3, #1
 8005e04:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e06:	4b3a      	ldr	r3, [pc, #232]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a39      	ldr	r2, [pc, #228]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e12:	f7fd f911 	bl	8003038 <HAL_GetTick>
 8005e16:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e18:	e009      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e1a:	f7fd f90d 	bl	8003038 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d902      	bls.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	74fb      	strb	r3, [r7, #19]
        break;
 8005e2c:	e005      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e2e:	4b30      	ldr	r3, [pc, #192]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d0ef      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005e3a:	7cfb      	ldrb	r3, [r7, #19]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d159      	bne.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e40:	4b2a      	ldr	r3, [pc, #168]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e4a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d01e      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d019      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e5c:	4b23      	ldr	r3, [pc, #140]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e68:	4b20      	ldr	r3, [pc, #128]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e78:	4b1c      	ldr	r3, [pc, #112]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e88:	4a18      	ldr	r2, [pc, #96]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d016      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e9a:	f7fd f8cd 	bl	8003038 <HAL_GetTick>
 8005e9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ea0:	e00b      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea2:	f7fd f8c9 	bl	8003038 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d902      	bls.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	74fb      	strb	r3, [r7, #19]
            break;
 8005eb8:	e006      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eba:	4b0c      	ldr	r3, [pc, #48]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d0ec      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005ec8:	7cfb      	ldrb	r3, [r7, #19]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10b      	bne.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ece:	4b07      	ldr	r3, [pc, #28]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005edc:	4903      	ldr	r1, [pc, #12]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ee4:	e008      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ee6:	7cfb      	ldrb	r3, [r7, #19]
 8005ee8:	74bb      	strb	r3, [r7, #18]
 8005eea:	e005      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005eec:	40021000 	.word	0x40021000
 8005ef0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef4:	7cfb      	ldrb	r3, [r7, #19]
 8005ef6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ef8:	7c7b      	ldrb	r3, [r7, #17]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d105      	bne.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005efe:	4ba7      	ldr	r3, [pc, #668]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f02:	4aa6      	ldr	r2, [pc, #664]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f08:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f16:	4ba1      	ldr	r3, [pc, #644]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f1c:	f023 0203 	bic.w	r2, r3, #3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	499d      	ldr	r1, [pc, #628]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00a      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f38:	4b98      	ldr	r3, [pc, #608]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f3e:	f023 020c 	bic.w	r2, r3, #12
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	4995      	ldr	r1, [pc, #596]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0304 	and.w	r3, r3, #4
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f5a:	4b90      	ldr	r3, [pc, #576]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f60:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	498c      	ldr	r1, [pc, #560]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0308 	and.w	r3, r3, #8
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00a      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f7c:	4b87      	ldr	r3, [pc, #540]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	4984      	ldr	r1, [pc, #528]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0310 	and.w	r3, r3, #16
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00a      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f9e:	4b7f      	ldr	r3, [pc, #508]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	497b      	ldr	r1, [pc, #492]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00a      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fc0:	4b76      	ldr	r3, [pc, #472]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	4973      	ldr	r1, [pc, #460]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00a      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fe2:	4b6e      	ldr	r3, [pc, #440]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	496a      	ldr	r1, [pc, #424]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00a      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006004:	4b65      	ldr	r3, [pc, #404]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800600a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	4962      	ldr	r1, [pc, #392]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006014:	4313      	orrs	r3, r2
 8006016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00a      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006026:	4b5d      	ldr	r3, [pc, #372]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800602c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006034:	4959      	ldr	r1, [pc, #356]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006036:	4313      	orrs	r3, r2
 8006038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00a      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006048:	4b54      	ldr	r3, [pc, #336]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800604a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800604e:	f023 0203 	bic.w	r2, r3, #3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006056:	4951      	ldr	r1, [pc, #324]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006058:	4313      	orrs	r3, r2
 800605a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800606a:	4b4c      	ldr	r3, [pc, #304]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800606c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006070:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006078:	4948      	ldr	r1, [pc, #288]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800607a:	4313      	orrs	r3, r2
 800607c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006088:	2b00      	cmp	r3, #0
 800608a:	d015      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800608c:	4b43      	ldr	r3, [pc, #268]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800608e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006092:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609a:	4940      	ldr	r1, [pc, #256]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800609c:	4313      	orrs	r3, r2
 800609e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060aa:	d105      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060ac:	4b3b      	ldr	r3, [pc, #236]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	4a3a      	ldr	r2, [pc, #232]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d015      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060c4:	4b35      	ldr	r3, [pc, #212]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060d2:	4932      	ldr	r1, [pc, #200]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060e2:	d105      	bne.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060e4:	4b2d      	ldr	r3, [pc, #180]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	4a2c      	ldr	r2, [pc, #176]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060ee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d015      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060fc:	4b27      	ldr	r3, [pc, #156]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006102:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610a:	4924      	ldr	r1, [pc, #144]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800610c:	4313      	orrs	r3, r2
 800610e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006116:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800611a:	d105      	bne.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800611c:	4b1f      	ldr	r3, [pc, #124]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	4a1e      	ldr	r2, [pc, #120]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006122:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006126:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d015      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006134:	4b19      	ldr	r3, [pc, #100]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800613a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006142:	4916      	ldr	r1, [pc, #88]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006144:	4313      	orrs	r3, r2
 8006146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006152:	d105      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006154:	4b11      	ldr	r3, [pc, #68]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	4a10      	ldr	r2, [pc, #64]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800615a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800615e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d019      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800616c:	4b0b      	ldr	r3, [pc, #44]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800616e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006172:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617a:	4908      	ldr	r1, [pc, #32]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800617c:	4313      	orrs	r3, r2
 800617e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006186:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800618a:	d109      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800618c:	4b03      	ldr	r3, [pc, #12]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	4a02      	ldr	r2, [pc, #8]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006196:	60d3      	str	r3, [r2, #12]
 8006198:	e002      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800619a:	bf00      	nop
 800619c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d015      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80061ac:	4b29      	ldr	r3, [pc, #164]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ba:	4926      	ldr	r1, [pc, #152]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061ca:	d105      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80061cc:	4b21      	ldr	r3, [pc, #132]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	4a20      	ldr	r2, [pc, #128]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061d6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d015      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80061e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ea:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061f2:	4918      	ldr	r1, [pc, #96]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006202:	d105      	bne.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006204:	4b13      	ldr	r3, [pc, #76]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	4a12      	ldr	r2, [pc, #72]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800620a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800620e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d015      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800621c:	4b0d      	ldr	r3, [pc, #52]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800621e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006222:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800622a:	490a      	ldr	r1, [pc, #40]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800622c:	4313      	orrs	r3, r2
 800622e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006236:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800623a:	d105      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800623c:	4b05      	ldr	r3, [pc, #20]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	4a04      	ldr	r2, [pc, #16]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006242:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006246:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006248:	7cbb      	ldrb	r3, [r7, #18]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	40021000 	.word	0x40021000

08006258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e09d      	b.n	80063a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626e:	2b00      	cmp	r3, #0
 8006270:	d108      	bne.n	8006284 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800627a:	d009      	beq.n	8006290 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	61da      	str	r2, [r3, #28]
 8006282:	e005      	b.n	8006290 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fc f9a4 	bl	80025f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062d0:	d902      	bls.n	80062d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	e002      	b.n	80062de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80062dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80062e6:	d007      	beq.n	80062f8 <HAL_SPI_Init+0xa0>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062f0:	d002      	beq.n	80062f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006308:	431a      	orrs	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	431a      	orrs	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006330:	431a      	orrs	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800633a:	ea42 0103 	orr.w	r1, r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006342:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	0c1b      	lsrs	r3, r3, #16
 8006354:	f003 0204 	and.w	r2, r3, #4
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635c:	f003 0310 	and.w	r3, r3, #16
 8006360:	431a      	orrs	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006366:	f003 0308 	and.w	r3, r3, #8
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006374:	ea42 0103 	orr.w	r1, r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69da      	ldr	r2, [r3, #28]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006394:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b088      	sub	sp, #32
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	60f8      	str	r0, [r7, #12]
 80063b6:	60b9      	str	r1, [r7, #8]
 80063b8:	603b      	str	r3, [r7, #0]
 80063ba:	4613      	mov	r3, r2
 80063bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d101      	bne.n	80063d0 <HAL_SPI_Transmit+0x22>
 80063cc:	2302      	movs	r3, #2
 80063ce:	e15f      	b.n	8006690 <HAL_SPI_Transmit+0x2e2>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063d8:	f7fc fe2e 	bl	8003038 <HAL_GetTick>
 80063dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063de:	88fb      	ldrh	r3, [r7, #6]
 80063e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d002      	beq.n	80063f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063ee:	2302      	movs	r3, #2
 80063f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063f2:	e148      	b.n	8006686 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_SPI_Transmit+0x52>
 80063fa:	88fb      	ldrh	r3, [r7, #6]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d102      	bne.n	8006406 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006404:	e13f      	b.n	8006686 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2203      	movs	r2, #3
 800640a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	88fa      	ldrh	r2, [r7, #6]
 800641e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	88fa      	ldrh	r2, [r7, #6]
 8006424:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006450:	d10f      	bne.n	8006472 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006460:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006470:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800647c:	2b40      	cmp	r3, #64	@ 0x40
 800647e:	d007      	beq.n	8006490 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800648e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006498:	d94f      	bls.n	800653a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <HAL_SPI_Transmit+0xfa>
 80064a2:	8afb      	ldrh	r3, [r7, #22]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d142      	bne.n	800652e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ac:	881a      	ldrh	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b8:	1c9a      	adds	r2, r3, #2
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	3b01      	subs	r3, #1
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064cc:	e02f      	b.n	800652e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d112      	bne.n	8006502 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e0:	881a      	ldrh	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ec:	1c9a      	adds	r2, r3, #2
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006500:	e015      	b.n	800652e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006502:	f7fc fd99 	bl	8003038 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d803      	bhi.n	800651a <HAL_SPI_Transmit+0x16c>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006518:	d102      	bne.n	8006520 <HAL_SPI_Transmit+0x172>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d106      	bne.n	800652e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800652c:	e0ab      	b.n	8006686 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006532:	b29b      	uxth	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1ca      	bne.n	80064ce <HAL_SPI_Transmit+0x120>
 8006538:	e080      	b.n	800663c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <HAL_SPI_Transmit+0x19a>
 8006542:	8afb      	ldrh	r3, [r7, #22]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d174      	bne.n	8006632 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800654c:	b29b      	uxth	r3, r3
 800654e:	2b01      	cmp	r3, #1
 8006550:	d912      	bls.n	8006578 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006556:	881a      	ldrh	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006562:	1c9a      	adds	r2, r3, #2
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b02      	subs	r3, #2
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006576:	e05c      	b.n	8006632 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	330c      	adds	r3, #12
 8006582:	7812      	ldrb	r2, [r2, #0]
 8006584:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006594:	b29b      	uxth	r3, r3
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800659e:	e048      	b.n	8006632 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d12b      	bne.n	8006606 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d912      	bls.n	80065de <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065bc:	881a      	ldrh	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c8:	1c9a      	adds	r2, r3, #2
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	3b02      	subs	r3, #2
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80065dc:	e029      	b.n	8006632 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	330c      	adds	r3, #12
 80065e8:	7812      	ldrb	r2, [r2, #0]
 80065ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	3b01      	subs	r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006604:	e015      	b.n	8006632 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006606:	f7fc fd17 	bl	8003038 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d803      	bhi.n	800661e <HAL_SPI_Transmit+0x270>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661c:	d102      	bne.n	8006624 <HAL_SPI_Transmit+0x276>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d106      	bne.n	8006632 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006630:	e029      	b.n	8006686 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006636:	b29b      	uxth	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1b1      	bne.n	80065a0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	6839      	ldr	r1, [r7, #0]
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 f947 	bl	80068d4 <SPI_EndRxTxTransaction>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2220      	movs	r2, #32
 8006650:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10a      	bne.n	8006670 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800665a:	2300      	movs	r3, #0
 800665c:	613b      	str	r3, [r7, #16]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	613b      	str	r3, [r7, #16]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	613b      	str	r3, [r7, #16]
 800666e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	77fb      	strb	r3, [r7, #31]
 800667c:	e003      	b.n	8006686 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800668e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3720      	adds	r7, #32
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	603b      	str	r3, [r7, #0]
 80066a4:	4613      	mov	r3, r2
 80066a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066a8:	f7fc fcc6 	bl	8003038 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b0:	1a9b      	subs	r3, r3, r2
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	4413      	add	r3, r2
 80066b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066b8:	f7fc fcbe 	bl	8003038 <HAL_GetTick>
 80066bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066be:	4b39      	ldr	r3, [pc, #228]	@ (80067a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	015b      	lsls	r3, r3, #5
 80066c4:	0d1b      	lsrs	r3, r3, #20
 80066c6:	69fa      	ldr	r2, [r7, #28]
 80066c8:	fb02 f303 	mul.w	r3, r2, r3
 80066cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066ce:	e054      	b.n	800677a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d6:	d050      	beq.n	800677a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066d8:	f7fc fcae 	bl	8003038 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d902      	bls.n	80066ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d13d      	bne.n	800676a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80066fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006706:	d111      	bne.n	800672c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006710:	d004      	beq.n	800671c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800671a:	d107      	bne.n	800672c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800672a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006730:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006734:	d10f      	bne.n	8006756 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006754:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e017      	b.n	800679a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	3b01      	subs	r3, #1
 8006778:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4013      	ands	r3, r2
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	429a      	cmp	r2, r3
 8006788:	bf0c      	ite	eq
 800678a:	2301      	moveq	r3, #1
 800678c:	2300      	movne	r3, #0
 800678e:	b2db      	uxtb	r3, r3
 8006790:	461a      	mov	r2, r3
 8006792:	79fb      	ldrb	r3, [r7, #7]
 8006794:	429a      	cmp	r2, r3
 8006796:	d19b      	bne.n	80066d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3720      	adds	r7, #32
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20000010 	.word	0x20000010

080067a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08a      	sub	sp, #40	@ 0x28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80067ba:	f7fc fc3d 	bl	8003038 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c2:	1a9b      	subs	r3, r3, r2
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	4413      	add	r3, r2
 80067c8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80067ca:	f7fc fc35 	bl	8003038 <HAL_GetTick>
 80067ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	330c      	adds	r3, #12
 80067d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80067d8:	4b3d      	ldr	r3, [pc, #244]	@ (80068d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	4613      	mov	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	00da      	lsls	r2, r3, #3
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	0d1b      	lsrs	r3, r3, #20
 80067e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067ea:	fb02 f303 	mul.w	r3, r2, r3
 80067ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80067f0:	e060      	b.n	80068b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80067f8:	d107      	bne.n	800680a <SPI_WaitFifoStateUntilTimeout+0x62>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	b2db      	uxtb	r3, r3
 8006806:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006808:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006810:	d050      	beq.n	80068b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006812:	f7fc fc11 	bl	8003038 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800681e:	429a      	cmp	r2, r3
 8006820:	d902      	bls.n	8006828 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006824:	2b00      	cmp	r3, #0
 8006826:	d13d      	bne.n	80068a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006836:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006840:	d111      	bne.n	8006866 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800684a:	d004      	beq.n	8006856 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006854:	d107      	bne.n	8006866 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006864:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800686a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800686e:	d10f      	bne.n	8006890 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800688e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e010      	b.n	80068c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	3b01      	subs	r3, #1
 80068b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689a      	ldr	r2, [r3, #8]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	4013      	ands	r3, r2
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d196      	bne.n	80067f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3728      	adds	r7, #40	@ 0x28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	20000010 	.word	0x20000010

080068d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af02      	add	r7, sp, #8
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f7ff ff5b 	bl	80067a8 <SPI_WaitFifoStateUntilTimeout>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d007      	beq.n	8006908 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068fc:	f043 0220 	orr.w	r2, r3, #32
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e027      	b.n	8006958 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	2200      	movs	r2, #0
 8006910:	2180      	movs	r1, #128	@ 0x80
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f7ff fec0 	bl	8006698 <SPI_WaitFlagStateUntilTimeout>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d007      	beq.n	800692e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006922:	f043 0220 	orr.w	r2, r3, #32
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e014      	b.n	8006958 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2200      	movs	r2, #0
 8006936:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f7ff ff34 	bl	80067a8 <SPI_WaitFifoStateUntilTimeout>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d007      	beq.n	8006956 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800694a:	f043 0220 	orr.w	r2, r3, #32
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e000      	b.n	8006958 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e049      	b.n	8006a06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d106      	bne.n	800698c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7fb fe7a 	bl	8002680 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	3304      	adds	r3, #4
 800699c:	4619      	mov	r1, r3
 800699e:	4610      	mov	r0, r2
 80069a0:	f000 fdf2 	bl	8007588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
	...

08006a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d001      	beq.n	8006a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e054      	b.n	8006ad2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f042 0201 	orr.w	r2, r2, #1
 8006a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a26      	ldr	r2, [pc, #152]	@ (8006ae0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d022      	beq.n	8006a90 <HAL_TIM_Base_Start_IT+0x80>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a52:	d01d      	beq.n	8006a90 <HAL_TIM_Base_Start_IT+0x80>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a22      	ldr	r2, [pc, #136]	@ (8006ae4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d018      	beq.n	8006a90 <HAL_TIM_Base_Start_IT+0x80>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a21      	ldr	r2, [pc, #132]	@ (8006ae8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d013      	beq.n	8006a90 <HAL_TIM_Base_Start_IT+0x80>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8006aec <HAL_TIM_Base_Start_IT+0xdc>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d00e      	beq.n	8006a90 <HAL_TIM_Base_Start_IT+0x80>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a1e      	ldr	r2, [pc, #120]	@ (8006af0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d009      	beq.n	8006a90 <HAL_TIM_Base_Start_IT+0x80>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a1c      	ldr	r2, [pc, #112]	@ (8006af4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d004      	beq.n	8006a90 <HAL_TIM_Base_Start_IT+0x80>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8006af8 <HAL_TIM_Base_Start_IT+0xe8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d115      	bne.n	8006abc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689a      	ldr	r2, [r3, #8]
 8006a96:	4b19      	ldr	r3, [pc, #100]	@ (8006afc <HAL_TIM_Base_Start_IT+0xec>)
 8006a98:	4013      	ands	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2b06      	cmp	r3, #6
 8006aa0:	d015      	beq.n	8006ace <HAL_TIM_Base_Start_IT+0xbe>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aa8:	d011      	beq.n	8006ace <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f042 0201 	orr.w	r2, r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aba:	e008      	b.n	8006ace <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0201 	orr.w	r2, r2, #1
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	e000      	b.n	8006ad0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ace:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	40012c00 	.word	0x40012c00
 8006ae4:	40000400 	.word	0x40000400
 8006ae8:	40000800 	.word	0x40000800
 8006aec:	40000c00 	.word	0x40000c00
 8006af0:	40013400 	.word	0x40013400
 8006af4:	40014000 	.word	0x40014000
 8006af8:	40015000 	.word	0x40015000
 8006afc:	00010007 	.word	0x00010007

08006b00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0201 	bic.w	r2, r2, #1
 8006b16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6a1a      	ldr	r2, [r3, #32]
 8006b1e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006b22:	4013      	ands	r3, r2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10f      	bne.n	8006b48 <HAL_TIM_Base_Stop_IT+0x48>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6a1a      	ldr	r2, [r3, #32]
 8006b2e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006b32:	4013      	ands	r3, r2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d107      	bne.n	8006b48 <HAL_TIM_Base_Stop_IT+0x48>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0201 	bic.w	r2, r2, #1
 8006b46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b082      	sub	sp, #8
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e049      	b.n	8006c04 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d106      	bne.n	8006b8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f841 	bl	8006c0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	4610      	mov	r0, r2
 8006b9e:	f000 fcf3 	bl	8007588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d109      	bne.n	8006c44 <HAL_TIM_PWM_Start+0x24>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	bf14      	ite	ne
 8006c3c:	2301      	movne	r3, #1
 8006c3e:	2300      	moveq	r3, #0
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	e03c      	b.n	8006cbe <HAL_TIM_PWM_Start+0x9e>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2b04      	cmp	r3, #4
 8006c48:	d109      	bne.n	8006c5e <HAL_TIM_PWM_Start+0x3e>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	bf14      	ite	ne
 8006c56:	2301      	movne	r3, #1
 8006c58:	2300      	moveq	r3, #0
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	e02f      	b.n	8006cbe <HAL_TIM_PWM_Start+0x9e>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d109      	bne.n	8006c78 <HAL_TIM_PWM_Start+0x58>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	bf14      	ite	ne
 8006c70:	2301      	movne	r3, #1
 8006c72:	2300      	moveq	r3, #0
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	e022      	b.n	8006cbe <HAL_TIM_PWM_Start+0x9e>
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b0c      	cmp	r3, #12
 8006c7c:	d109      	bne.n	8006c92 <HAL_TIM_PWM_Start+0x72>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	bf14      	ite	ne
 8006c8a:	2301      	movne	r3, #1
 8006c8c:	2300      	moveq	r3, #0
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	e015      	b.n	8006cbe <HAL_TIM_PWM_Start+0x9e>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b10      	cmp	r3, #16
 8006c96:	d109      	bne.n	8006cac <HAL_TIM_PWM_Start+0x8c>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	bf14      	ite	ne
 8006ca4:	2301      	movne	r3, #1
 8006ca6:	2300      	moveq	r3, #0
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	e008      	b.n	8006cbe <HAL_TIM_PWM_Start+0x9e>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	bf14      	ite	ne
 8006cb8:	2301      	movne	r3, #1
 8006cba:	2300      	moveq	r3, #0
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e0a6      	b.n	8006e14 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d104      	bne.n	8006cd6 <HAL_TIM_PWM_Start+0xb6>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cd4:	e023      	b.n	8006d1e <HAL_TIM_PWM_Start+0xfe>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	d104      	bne.n	8006ce6 <HAL_TIM_PWM_Start+0xc6>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ce4:	e01b      	b.n	8006d1e <HAL_TIM_PWM_Start+0xfe>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b08      	cmp	r3, #8
 8006cea:	d104      	bne.n	8006cf6 <HAL_TIM_PWM_Start+0xd6>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cf4:	e013      	b.n	8006d1e <HAL_TIM_PWM_Start+0xfe>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	2b0c      	cmp	r3, #12
 8006cfa:	d104      	bne.n	8006d06 <HAL_TIM_PWM_Start+0xe6>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d04:	e00b      	b.n	8006d1e <HAL_TIM_PWM_Start+0xfe>
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	d104      	bne.n	8006d16 <HAL_TIM_PWM_Start+0xf6>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d14:	e003      	b.n	8006d1e <HAL_TIM_PWM_Start+0xfe>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2202      	movs	r2, #2
 8006d1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2201      	movs	r2, #1
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f001 f8a8 	bl	8007e7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a3a      	ldr	r2, [pc, #232]	@ (8006e1c <HAL_TIM_PWM_Start+0x1fc>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d018      	beq.n	8006d68 <HAL_TIM_PWM_Start+0x148>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a39      	ldr	r2, [pc, #228]	@ (8006e20 <HAL_TIM_PWM_Start+0x200>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d013      	beq.n	8006d68 <HAL_TIM_PWM_Start+0x148>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a37      	ldr	r2, [pc, #220]	@ (8006e24 <HAL_TIM_PWM_Start+0x204>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00e      	beq.n	8006d68 <HAL_TIM_PWM_Start+0x148>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a36      	ldr	r2, [pc, #216]	@ (8006e28 <HAL_TIM_PWM_Start+0x208>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d009      	beq.n	8006d68 <HAL_TIM_PWM_Start+0x148>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a34      	ldr	r2, [pc, #208]	@ (8006e2c <HAL_TIM_PWM_Start+0x20c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d004      	beq.n	8006d68 <HAL_TIM_PWM_Start+0x148>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a33      	ldr	r2, [pc, #204]	@ (8006e30 <HAL_TIM_PWM_Start+0x210>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d101      	bne.n	8006d6c <HAL_TIM_PWM_Start+0x14c>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e000      	b.n	8006d6e <HAL_TIM_PWM_Start+0x14e>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d007      	beq.n	8006d82 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d80:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a25      	ldr	r2, [pc, #148]	@ (8006e1c <HAL_TIM_PWM_Start+0x1fc>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d022      	beq.n	8006dd2 <HAL_TIM_PWM_Start+0x1b2>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d94:	d01d      	beq.n	8006dd2 <HAL_TIM_PWM_Start+0x1b2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a26      	ldr	r2, [pc, #152]	@ (8006e34 <HAL_TIM_PWM_Start+0x214>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d018      	beq.n	8006dd2 <HAL_TIM_PWM_Start+0x1b2>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a24      	ldr	r2, [pc, #144]	@ (8006e38 <HAL_TIM_PWM_Start+0x218>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d013      	beq.n	8006dd2 <HAL_TIM_PWM_Start+0x1b2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a23      	ldr	r2, [pc, #140]	@ (8006e3c <HAL_TIM_PWM_Start+0x21c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d00e      	beq.n	8006dd2 <HAL_TIM_PWM_Start+0x1b2>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a19      	ldr	r2, [pc, #100]	@ (8006e20 <HAL_TIM_PWM_Start+0x200>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d009      	beq.n	8006dd2 <HAL_TIM_PWM_Start+0x1b2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a18      	ldr	r2, [pc, #96]	@ (8006e24 <HAL_TIM_PWM_Start+0x204>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d004      	beq.n	8006dd2 <HAL_TIM_PWM_Start+0x1b2>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a18      	ldr	r2, [pc, #96]	@ (8006e30 <HAL_TIM_PWM_Start+0x210>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d115      	bne.n	8006dfe <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689a      	ldr	r2, [r3, #8]
 8006dd8:	4b19      	ldr	r3, [pc, #100]	@ (8006e40 <HAL_TIM_PWM_Start+0x220>)
 8006dda:	4013      	ands	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2b06      	cmp	r3, #6
 8006de2:	d015      	beq.n	8006e10 <HAL_TIM_PWM_Start+0x1f0>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dea:	d011      	beq.n	8006e10 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0201 	orr.w	r2, r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dfc:	e008      	b.n	8006e10 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f042 0201 	orr.w	r2, r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	e000      	b.n	8006e12 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	40012c00 	.word	0x40012c00
 8006e20:	40013400 	.word	0x40013400
 8006e24:	40014000 	.word	0x40014000
 8006e28:	40014400 	.word	0x40014400
 8006e2c:	40014800 	.word	0x40014800
 8006e30:	40015000 	.word	0x40015000
 8006e34:	40000400 	.word	0x40000400
 8006e38:	40000800 	.word	0x40000800
 8006e3c:	40000c00 	.word	0x40000c00
 8006e40:	00010007 	.word	0x00010007

08006e44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d020      	beq.n	8006ea8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01b      	beq.n	8006ea8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f06f 0202 	mvn.w	r2, #2
 8006e78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d003      	beq.n	8006e96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fb5c 	bl	800754c <HAL_TIM_IC_CaptureCallback>
 8006e94:	e005      	b.n	8006ea2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fb4e 	bl	8007538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fb5f 	bl	8007560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f003 0304 	and.w	r3, r3, #4
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d020      	beq.n	8006ef4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01b      	beq.n	8006ef4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f06f 0204 	mvn.w	r2, #4
 8006ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2202      	movs	r2, #2
 8006eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fb36 	bl	800754c <HAL_TIM_IC_CaptureCallback>
 8006ee0:	e005      	b.n	8006eee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fb28 	bl	8007538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fb39 	bl	8007560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f003 0308 	and.w	r3, r3, #8
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d020      	beq.n	8006f40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f003 0308 	and.w	r3, r3, #8
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d01b      	beq.n	8006f40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f06f 0208 	mvn.w	r2, #8
 8006f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2204      	movs	r2, #4
 8006f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	f003 0303 	and.w	r3, r3, #3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fb10 	bl	800754c <HAL_TIM_IC_CaptureCallback>
 8006f2c:	e005      	b.n	8006f3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fb02 	bl	8007538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fb13 	bl	8007560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f003 0310 	and.w	r3, r3, #16
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d020      	beq.n	8006f8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f003 0310 	and.w	r3, r3, #16
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d01b      	beq.n	8006f8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f06f 0210 	mvn.w	r2, #16
 8006f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2208      	movs	r2, #8
 8006f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 faea 	bl	800754c <HAL_TIM_IC_CaptureCallback>
 8006f78:	e005      	b.n	8006f86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fadc 	bl	8007538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 faed 	bl	8007560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00c      	beq.n	8006fb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d007      	beq.n	8006fb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f06f 0201 	mvn.w	r2, #1
 8006fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fa fcf2 	bl	8001994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d104      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00c      	beq.n	8006fde <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d007      	beq.n	8006fde <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f001 f96b 	bl	80082b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00c      	beq.n	8007002 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d007      	beq.n	8007002 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f001 f963 	bl	80082c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00c      	beq.n	8007026 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007012:	2b00      	cmp	r3, #0
 8007014:	d007      	beq.n	8007026 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800701e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 faa7 	bl	8007574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	f003 0320 	and.w	r3, r3, #32
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00c      	beq.n	800704a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f003 0320 	and.w	r3, r3, #32
 8007036:	2b00      	cmp	r3, #0
 8007038:	d007      	beq.n	800704a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f06f 0220 	mvn.w	r2, #32
 8007042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 f92b 	bl	80082a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00c      	beq.n	800706e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d007      	beq.n	800706e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f001 f937 	bl	80082dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00c      	beq.n	8007092 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d007      	beq.n	8007092 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800708a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f001 f92f 	bl	80082f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00c      	beq.n	80070b6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d007      	beq.n	80070b6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80070ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f001 f927 	bl	8008304 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00c      	beq.n	80070da <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d007      	beq.n	80070da <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80070d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f001 f91f 	bl	8008318 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070da:	bf00      	nop
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
	...

080070e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d101      	bne.n	8007102 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070fe:	2302      	movs	r3, #2
 8007100:	e0ff      	b.n	8007302 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b14      	cmp	r3, #20
 800710e:	f200 80f0 	bhi.w	80072f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007112:	a201      	add	r2, pc, #4	@ (adr r2, 8007118 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007118:	0800716d 	.word	0x0800716d
 800711c:	080072f3 	.word	0x080072f3
 8007120:	080072f3 	.word	0x080072f3
 8007124:	080072f3 	.word	0x080072f3
 8007128:	080071ad 	.word	0x080071ad
 800712c:	080072f3 	.word	0x080072f3
 8007130:	080072f3 	.word	0x080072f3
 8007134:	080072f3 	.word	0x080072f3
 8007138:	080071ef 	.word	0x080071ef
 800713c:	080072f3 	.word	0x080072f3
 8007140:	080072f3 	.word	0x080072f3
 8007144:	080072f3 	.word	0x080072f3
 8007148:	0800722f 	.word	0x0800722f
 800714c:	080072f3 	.word	0x080072f3
 8007150:	080072f3 	.word	0x080072f3
 8007154:	080072f3 	.word	0x080072f3
 8007158:	08007271 	.word	0x08007271
 800715c:	080072f3 	.word	0x080072f3
 8007160:	080072f3 	.word	0x080072f3
 8007164:	080072f3 	.word	0x080072f3
 8007168:	080072b1 	.word	0x080072b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68b9      	ldr	r1, [r7, #8]
 8007172:	4618      	mov	r0, r3
 8007174:	f000 fabc 	bl	80076f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699a      	ldr	r2, [r3, #24]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f042 0208 	orr.w	r2, r2, #8
 8007186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699a      	ldr	r2, [r3, #24]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0204 	bic.w	r2, r2, #4
 8007196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6999      	ldr	r1, [r3, #24]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	691a      	ldr	r2, [r3, #16]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	619a      	str	r2, [r3, #24]
      break;
 80071aa:	e0a5      	b.n	80072f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68b9      	ldr	r1, [r7, #8]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 fb36 	bl	8007824 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	699a      	ldr	r2, [r3, #24]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	699a      	ldr	r2, [r3, #24]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6999      	ldr	r1, [r3, #24]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	021a      	lsls	r2, r3, #8
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	619a      	str	r2, [r3, #24]
      break;
 80071ec:	e084      	b.n	80072f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68b9      	ldr	r1, [r7, #8]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 fba9 	bl	800794c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69da      	ldr	r2, [r3, #28]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f042 0208 	orr.w	r2, r2, #8
 8007208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69da      	ldr	r2, [r3, #28]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f022 0204 	bic.w	r2, r2, #4
 8007218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69d9      	ldr	r1, [r3, #28]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	691a      	ldr	r2, [r3, #16]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	430a      	orrs	r2, r1
 800722a:	61da      	str	r2, [r3, #28]
      break;
 800722c:	e064      	b.n	80072f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68b9      	ldr	r1, [r7, #8]
 8007234:	4618      	mov	r0, r3
 8007236:	f000 fc1b 	bl	8007a70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	69da      	ldr	r2, [r3, #28]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69da      	ldr	r2, [r3, #28]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69d9      	ldr	r1, [r3, #28]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	021a      	lsls	r2, r3, #8
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	61da      	str	r2, [r3, #28]
      break;
 800726e:	e043      	b.n	80072f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68b9      	ldr	r1, [r7, #8]
 8007276:	4618      	mov	r0, r3
 8007278:	f000 fc8e 	bl	8007b98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f042 0208 	orr.w	r2, r2, #8
 800728a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0204 	bic.w	r2, r2, #4
 800729a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	691a      	ldr	r2, [r3, #16]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80072ae:	e023      	b.n	80072f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68b9      	ldr	r1, [r7, #8]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 fcd8 	bl	8007c6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072da:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	021a      	lsls	r2, r3, #8
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	430a      	orrs	r2, r1
 80072ee:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80072f0:	e002      	b.n	80072f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	75fb      	strb	r3, [r7, #23]
      break;
 80072f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007300:	7dfb      	ldrb	r3, [r7, #23]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop

0800730c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007320:	2b01      	cmp	r3, #1
 8007322:	d101      	bne.n	8007328 <HAL_TIM_ConfigClockSource+0x1c>
 8007324:	2302      	movs	r3, #2
 8007326:	e0f6      	b.n	8007516 <HAL_TIM_ConfigClockSource+0x20a>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007346:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800734a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007352:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a6f      	ldr	r2, [pc, #444]	@ (8007520 <HAL_TIM_ConfigClockSource+0x214>)
 8007362:	4293      	cmp	r3, r2
 8007364:	f000 80c1 	beq.w	80074ea <HAL_TIM_ConfigClockSource+0x1de>
 8007368:	4a6d      	ldr	r2, [pc, #436]	@ (8007520 <HAL_TIM_ConfigClockSource+0x214>)
 800736a:	4293      	cmp	r3, r2
 800736c:	f200 80c6 	bhi.w	80074fc <HAL_TIM_ConfigClockSource+0x1f0>
 8007370:	4a6c      	ldr	r2, [pc, #432]	@ (8007524 <HAL_TIM_ConfigClockSource+0x218>)
 8007372:	4293      	cmp	r3, r2
 8007374:	f000 80b9 	beq.w	80074ea <HAL_TIM_ConfigClockSource+0x1de>
 8007378:	4a6a      	ldr	r2, [pc, #424]	@ (8007524 <HAL_TIM_ConfigClockSource+0x218>)
 800737a:	4293      	cmp	r3, r2
 800737c:	f200 80be 	bhi.w	80074fc <HAL_TIM_ConfigClockSource+0x1f0>
 8007380:	4a69      	ldr	r2, [pc, #420]	@ (8007528 <HAL_TIM_ConfigClockSource+0x21c>)
 8007382:	4293      	cmp	r3, r2
 8007384:	f000 80b1 	beq.w	80074ea <HAL_TIM_ConfigClockSource+0x1de>
 8007388:	4a67      	ldr	r2, [pc, #412]	@ (8007528 <HAL_TIM_ConfigClockSource+0x21c>)
 800738a:	4293      	cmp	r3, r2
 800738c:	f200 80b6 	bhi.w	80074fc <HAL_TIM_ConfigClockSource+0x1f0>
 8007390:	4a66      	ldr	r2, [pc, #408]	@ (800752c <HAL_TIM_ConfigClockSource+0x220>)
 8007392:	4293      	cmp	r3, r2
 8007394:	f000 80a9 	beq.w	80074ea <HAL_TIM_ConfigClockSource+0x1de>
 8007398:	4a64      	ldr	r2, [pc, #400]	@ (800752c <HAL_TIM_ConfigClockSource+0x220>)
 800739a:	4293      	cmp	r3, r2
 800739c:	f200 80ae 	bhi.w	80074fc <HAL_TIM_ConfigClockSource+0x1f0>
 80073a0:	4a63      	ldr	r2, [pc, #396]	@ (8007530 <HAL_TIM_ConfigClockSource+0x224>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	f000 80a1 	beq.w	80074ea <HAL_TIM_ConfigClockSource+0x1de>
 80073a8:	4a61      	ldr	r2, [pc, #388]	@ (8007530 <HAL_TIM_ConfigClockSource+0x224>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	f200 80a6 	bhi.w	80074fc <HAL_TIM_ConfigClockSource+0x1f0>
 80073b0:	4a60      	ldr	r2, [pc, #384]	@ (8007534 <HAL_TIM_ConfigClockSource+0x228>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	f000 8099 	beq.w	80074ea <HAL_TIM_ConfigClockSource+0x1de>
 80073b8:	4a5e      	ldr	r2, [pc, #376]	@ (8007534 <HAL_TIM_ConfigClockSource+0x228>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	f200 809e 	bhi.w	80074fc <HAL_TIM_ConfigClockSource+0x1f0>
 80073c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80073c4:	f000 8091 	beq.w	80074ea <HAL_TIM_ConfigClockSource+0x1de>
 80073c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80073cc:	f200 8096 	bhi.w	80074fc <HAL_TIM_ConfigClockSource+0x1f0>
 80073d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073d4:	f000 8089 	beq.w	80074ea <HAL_TIM_ConfigClockSource+0x1de>
 80073d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073dc:	f200 808e 	bhi.w	80074fc <HAL_TIM_ConfigClockSource+0x1f0>
 80073e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073e4:	d03e      	beq.n	8007464 <HAL_TIM_ConfigClockSource+0x158>
 80073e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073ea:	f200 8087 	bhi.w	80074fc <HAL_TIM_ConfigClockSource+0x1f0>
 80073ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073f2:	f000 8086 	beq.w	8007502 <HAL_TIM_ConfigClockSource+0x1f6>
 80073f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073fa:	d87f      	bhi.n	80074fc <HAL_TIM_ConfigClockSource+0x1f0>
 80073fc:	2b70      	cmp	r3, #112	@ 0x70
 80073fe:	d01a      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x12a>
 8007400:	2b70      	cmp	r3, #112	@ 0x70
 8007402:	d87b      	bhi.n	80074fc <HAL_TIM_ConfigClockSource+0x1f0>
 8007404:	2b60      	cmp	r3, #96	@ 0x60
 8007406:	d050      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x19e>
 8007408:	2b60      	cmp	r3, #96	@ 0x60
 800740a:	d877      	bhi.n	80074fc <HAL_TIM_ConfigClockSource+0x1f0>
 800740c:	2b50      	cmp	r3, #80	@ 0x50
 800740e:	d03c      	beq.n	800748a <HAL_TIM_ConfigClockSource+0x17e>
 8007410:	2b50      	cmp	r3, #80	@ 0x50
 8007412:	d873      	bhi.n	80074fc <HAL_TIM_ConfigClockSource+0x1f0>
 8007414:	2b40      	cmp	r3, #64	@ 0x40
 8007416:	d058      	beq.n	80074ca <HAL_TIM_ConfigClockSource+0x1be>
 8007418:	2b40      	cmp	r3, #64	@ 0x40
 800741a:	d86f      	bhi.n	80074fc <HAL_TIM_ConfigClockSource+0x1f0>
 800741c:	2b30      	cmp	r3, #48	@ 0x30
 800741e:	d064      	beq.n	80074ea <HAL_TIM_ConfigClockSource+0x1de>
 8007420:	2b30      	cmp	r3, #48	@ 0x30
 8007422:	d86b      	bhi.n	80074fc <HAL_TIM_ConfigClockSource+0x1f0>
 8007424:	2b20      	cmp	r3, #32
 8007426:	d060      	beq.n	80074ea <HAL_TIM_ConfigClockSource+0x1de>
 8007428:	2b20      	cmp	r3, #32
 800742a:	d867      	bhi.n	80074fc <HAL_TIM_ConfigClockSource+0x1f0>
 800742c:	2b00      	cmp	r3, #0
 800742e:	d05c      	beq.n	80074ea <HAL_TIM_ConfigClockSource+0x1de>
 8007430:	2b10      	cmp	r3, #16
 8007432:	d05a      	beq.n	80074ea <HAL_TIM_ConfigClockSource+0x1de>
 8007434:	e062      	b.n	80074fc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007446:	f000 fcf9 	bl	8007e3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007458:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	609a      	str	r2, [r3, #8]
      break;
 8007462:	e04f      	b.n	8007504 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007474:	f000 fce2 	bl	8007e3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007486:	609a      	str	r2, [r3, #8]
      break;
 8007488:	e03c      	b.n	8007504 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007496:	461a      	mov	r2, r3
 8007498:	f000 fc54 	bl	8007d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2150      	movs	r1, #80	@ 0x50
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 fcad 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 80074a8:	e02c      	b.n	8007504 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074b6:	461a      	mov	r2, r3
 80074b8:	f000 fc73 	bl	8007da2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2160      	movs	r1, #96	@ 0x60
 80074c2:	4618      	mov	r0, r3
 80074c4:	f000 fc9d 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 80074c8:	e01c      	b.n	8007504 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074d6:	461a      	mov	r2, r3
 80074d8:	f000 fc34 	bl	8007d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2140      	movs	r1, #64	@ 0x40
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 fc8d 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 80074e8:	e00c      	b.n	8007504 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4619      	mov	r1, r3
 80074f4:	4610      	mov	r0, r2
 80074f6:	f000 fc84 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 80074fa:	e003      	b.n	8007504 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007500:	e000      	b.n	8007504 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007502:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007514:	7bfb      	ldrb	r3, [r7, #15]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	00100070 	.word	0x00100070
 8007524:	00100060 	.word	0x00100060
 8007528:	00100050 	.word	0x00100050
 800752c:	00100040 	.word	0x00100040
 8007530:	00100030 	.word	0x00100030
 8007534:	00100020 	.word	0x00100020

08007538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a4c      	ldr	r2, [pc, #304]	@ (80076cc <TIM_Base_SetConfig+0x144>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d017      	beq.n	80075d0 <TIM_Base_SetConfig+0x48>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075a6:	d013      	beq.n	80075d0 <TIM_Base_SetConfig+0x48>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a49      	ldr	r2, [pc, #292]	@ (80076d0 <TIM_Base_SetConfig+0x148>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d00f      	beq.n	80075d0 <TIM_Base_SetConfig+0x48>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a48      	ldr	r2, [pc, #288]	@ (80076d4 <TIM_Base_SetConfig+0x14c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d00b      	beq.n	80075d0 <TIM_Base_SetConfig+0x48>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a47      	ldr	r2, [pc, #284]	@ (80076d8 <TIM_Base_SetConfig+0x150>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d007      	beq.n	80075d0 <TIM_Base_SetConfig+0x48>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a46      	ldr	r2, [pc, #280]	@ (80076dc <TIM_Base_SetConfig+0x154>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d003      	beq.n	80075d0 <TIM_Base_SetConfig+0x48>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a45      	ldr	r2, [pc, #276]	@ (80076e0 <TIM_Base_SetConfig+0x158>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d108      	bne.n	80075e2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	4313      	orrs	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a39      	ldr	r2, [pc, #228]	@ (80076cc <TIM_Base_SetConfig+0x144>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d023      	beq.n	8007632 <TIM_Base_SetConfig+0xaa>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075f0:	d01f      	beq.n	8007632 <TIM_Base_SetConfig+0xaa>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a36      	ldr	r2, [pc, #216]	@ (80076d0 <TIM_Base_SetConfig+0x148>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d01b      	beq.n	8007632 <TIM_Base_SetConfig+0xaa>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a35      	ldr	r2, [pc, #212]	@ (80076d4 <TIM_Base_SetConfig+0x14c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d017      	beq.n	8007632 <TIM_Base_SetConfig+0xaa>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a34      	ldr	r2, [pc, #208]	@ (80076d8 <TIM_Base_SetConfig+0x150>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d013      	beq.n	8007632 <TIM_Base_SetConfig+0xaa>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a33      	ldr	r2, [pc, #204]	@ (80076dc <TIM_Base_SetConfig+0x154>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d00f      	beq.n	8007632 <TIM_Base_SetConfig+0xaa>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a33      	ldr	r2, [pc, #204]	@ (80076e4 <TIM_Base_SetConfig+0x15c>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d00b      	beq.n	8007632 <TIM_Base_SetConfig+0xaa>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a32      	ldr	r2, [pc, #200]	@ (80076e8 <TIM_Base_SetConfig+0x160>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d007      	beq.n	8007632 <TIM_Base_SetConfig+0xaa>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a31      	ldr	r2, [pc, #196]	@ (80076ec <TIM_Base_SetConfig+0x164>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d003      	beq.n	8007632 <TIM_Base_SetConfig+0xaa>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a2c      	ldr	r2, [pc, #176]	@ (80076e0 <TIM_Base_SetConfig+0x158>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d108      	bne.n	8007644 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	4313      	orrs	r3, r2
 8007642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	4313      	orrs	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a18      	ldr	r2, [pc, #96]	@ (80076cc <TIM_Base_SetConfig+0x144>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d013      	beq.n	8007698 <TIM_Base_SetConfig+0x110>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a1a      	ldr	r2, [pc, #104]	@ (80076dc <TIM_Base_SetConfig+0x154>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d00f      	beq.n	8007698 <TIM_Base_SetConfig+0x110>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a1a      	ldr	r2, [pc, #104]	@ (80076e4 <TIM_Base_SetConfig+0x15c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d00b      	beq.n	8007698 <TIM_Base_SetConfig+0x110>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a19      	ldr	r2, [pc, #100]	@ (80076e8 <TIM_Base_SetConfig+0x160>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d007      	beq.n	8007698 <TIM_Base_SetConfig+0x110>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a18      	ldr	r2, [pc, #96]	@ (80076ec <TIM_Base_SetConfig+0x164>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d003      	beq.n	8007698 <TIM_Base_SetConfig+0x110>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a13      	ldr	r2, [pc, #76]	@ (80076e0 <TIM_Base_SetConfig+0x158>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d103      	bne.n	80076a0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	691a      	ldr	r2, [r3, #16]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d105      	bne.n	80076be <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	f023 0201 	bic.w	r2, r3, #1
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	611a      	str	r2, [r3, #16]
  }
}
 80076be:	bf00      	nop
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	40012c00 	.word	0x40012c00
 80076d0:	40000400 	.word	0x40000400
 80076d4:	40000800 	.word	0x40000800
 80076d8:	40000c00 	.word	0x40000c00
 80076dc:	40013400 	.word	0x40013400
 80076e0:	40015000 	.word	0x40015000
 80076e4:	40014000 	.word	0x40014000
 80076e8:	40014400 	.word	0x40014400
 80076ec:	40014800 	.word	0x40014800

080076f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b087      	sub	sp, #28
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	f023 0201 	bic.w	r2, r3, #1
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800771e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f023 0303 	bic.w	r3, r3, #3
 800772a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	4313      	orrs	r3, r2
 8007734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f023 0302 	bic.w	r3, r3, #2
 800773c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	4313      	orrs	r3, r2
 8007746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a30      	ldr	r2, [pc, #192]	@ (800780c <TIM_OC1_SetConfig+0x11c>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d013      	beq.n	8007778 <TIM_OC1_SetConfig+0x88>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a2f      	ldr	r2, [pc, #188]	@ (8007810 <TIM_OC1_SetConfig+0x120>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d00f      	beq.n	8007778 <TIM_OC1_SetConfig+0x88>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a2e      	ldr	r2, [pc, #184]	@ (8007814 <TIM_OC1_SetConfig+0x124>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d00b      	beq.n	8007778 <TIM_OC1_SetConfig+0x88>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a2d      	ldr	r2, [pc, #180]	@ (8007818 <TIM_OC1_SetConfig+0x128>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d007      	beq.n	8007778 <TIM_OC1_SetConfig+0x88>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a2c      	ldr	r2, [pc, #176]	@ (800781c <TIM_OC1_SetConfig+0x12c>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d003      	beq.n	8007778 <TIM_OC1_SetConfig+0x88>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a2b      	ldr	r2, [pc, #172]	@ (8007820 <TIM_OC1_SetConfig+0x130>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d10c      	bne.n	8007792 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	f023 0308 	bic.w	r3, r3, #8
 800777e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	4313      	orrs	r3, r2
 8007788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f023 0304 	bic.w	r3, r3, #4
 8007790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a1d      	ldr	r2, [pc, #116]	@ (800780c <TIM_OC1_SetConfig+0x11c>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d013      	beq.n	80077c2 <TIM_OC1_SetConfig+0xd2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a1c      	ldr	r2, [pc, #112]	@ (8007810 <TIM_OC1_SetConfig+0x120>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d00f      	beq.n	80077c2 <TIM_OC1_SetConfig+0xd2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007814 <TIM_OC1_SetConfig+0x124>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d00b      	beq.n	80077c2 <TIM_OC1_SetConfig+0xd2>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a1a      	ldr	r2, [pc, #104]	@ (8007818 <TIM_OC1_SetConfig+0x128>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d007      	beq.n	80077c2 <TIM_OC1_SetConfig+0xd2>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a19      	ldr	r2, [pc, #100]	@ (800781c <TIM_OC1_SetConfig+0x12c>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d003      	beq.n	80077c2 <TIM_OC1_SetConfig+0xd2>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a18      	ldr	r2, [pc, #96]	@ (8007820 <TIM_OC1_SetConfig+0x130>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d111      	bne.n	80077e6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80077d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	4313      	orrs	r3, r2
 80077da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	621a      	str	r2, [r3, #32]
}
 8007800:	bf00      	nop
 8007802:	371c      	adds	r7, #28
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	40012c00 	.word	0x40012c00
 8007810:	40013400 	.word	0x40013400
 8007814:	40014000 	.word	0x40014000
 8007818:	40014400 	.word	0x40014400
 800781c:	40014800 	.word	0x40014800
 8007820:	40015000 	.word	0x40015000

08007824 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	f023 0210 	bic.w	r2, r3, #16
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800785e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	4313      	orrs	r3, r2
 800786a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f023 0320 	bic.w	r3, r3, #32
 8007872:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	011b      	lsls	r3, r3, #4
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	4313      	orrs	r3, r2
 800787e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a2c      	ldr	r2, [pc, #176]	@ (8007934 <TIM_OC2_SetConfig+0x110>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d007      	beq.n	8007898 <TIM_OC2_SetConfig+0x74>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a2b      	ldr	r2, [pc, #172]	@ (8007938 <TIM_OC2_SetConfig+0x114>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d003      	beq.n	8007898 <TIM_OC2_SetConfig+0x74>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a2a      	ldr	r2, [pc, #168]	@ (800793c <TIM_OC2_SetConfig+0x118>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d10d      	bne.n	80078b4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800789e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	011b      	lsls	r3, r3, #4
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a1f      	ldr	r2, [pc, #124]	@ (8007934 <TIM_OC2_SetConfig+0x110>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d013      	beq.n	80078e4 <TIM_OC2_SetConfig+0xc0>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a1e      	ldr	r2, [pc, #120]	@ (8007938 <TIM_OC2_SetConfig+0x114>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d00f      	beq.n	80078e4 <TIM_OC2_SetConfig+0xc0>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a1e      	ldr	r2, [pc, #120]	@ (8007940 <TIM_OC2_SetConfig+0x11c>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d00b      	beq.n	80078e4 <TIM_OC2_SetConfig+0xc0>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a1d      	ldr	r2, [pc, #116]	@ (8007944 <TIM_OC2_SetConfig+0x120>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d007      	beq.n	80078e4 <TIM_OC2_SetConfig+0xc0>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a1c      	ldr	r2, [pc, #112]	@ (8007948 <TIM_OC2_SetConfig+0x124>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d003      	beq.n	80078e4 <TIM_OC2_SetConfig+0xc0>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a17      	ldr	r2, [pc, #92]	@ (800793c <TIM_OC2_SetConfig+0x118>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d113      	bne.n	800790c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80078ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80078f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4313      	orrs	r3, r2
 800790a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	621a      	str	r2, [r3, #32]
}
 8007926:	bf00      	nop
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	40012c00 	.word	0x40012c00
 8007938:	40013400 	.word	0x40013400
 800793c:	40015000 	.word	0x40015000
 8007940:	40014000 	.word	0x40014000
 8007944:	40014400 	.word	0x40014400
 8007948:	40014800 	.word	0x40014800

0800794c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a1b      	ldr	r3, [r3, #32]
 8007960:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800797a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800797e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f023 0303 	bic.w	r3, r3, #3
 8007986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	4313      	orrs	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	021b      	lsls	r3, r3, #8
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a2b      	ldr	r2, [pc, #172]	@ (8007a58 <TIM_OC3_SetConfig+0x10c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d007      	beq.n	80079be <TIM_OC3_SetConfig+0x72>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a2a      	ldr	r2, [pc, #168]	@ (8007a5c <TIM_OC3_SetConfig+0x110>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d003      	beq.n	80079be <TIM_OC3_SetConfig+0x72>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a29      	ldr	r2, [pc, #164]	@ (8007a60 <TIM_OC3_SetConfig+0x114>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d10d      	bne.n	80079da <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80079c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	021b      	lsls	r3, r3, #8
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80079d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a1e      	ldr	r2, [pc, #120]	@ (8007a58 <TIM_OC3_SetConfig+0x10c>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d013      	beq.n	8007a0a <TIM_OC3_SetConfig+0xbe>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a1d      	ldr	r2, [pc, #116]	@ (8007a5c <TIM_OC3_SetConfig+0x110>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d00f      	beq.n	8007a0a <TIM_OC3_SetConfig+0xbe>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a1d      	ldr	r2, [pc, #116]	@ (8007a64 <TIM_OC3_SetConfig+0x118>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d00b      	beq.n	8007a0a <TIM_OC3_SetConfig+0xbe>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a1c      	ldr	r2, [pc, #112]	@ (8007a68 <TIM_OC3_SetConfig+0x11c>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d007      	beq.n	8007a0a <TIM_OC3_SetConfig+0xbe>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a1b      	ldr	r2, [pc, #108]	@ (8007a6c <TIM_OC3_SetConfig+0x120>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d003      	beq.n	8007a0a <TIM_OC3_SetConfig+0xbe>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a16      	ldr	r2, [pc, #88]	@ (8007a60 <TIM_OC3_SetConfig+0x114>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d113      	bne.n	8007a32 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	011b      	lsls	r3, r3, #4
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	011b      	lsls	r3, r3, #4
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	685a      	ldr	r2, [r3, #4]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	621a      	str	r2, [r3, #32]
}
 8007a4c:	bf00      	nop
 8007a4e:	371c      	adds	r7, #28
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	40012c00 	.word	0x40012c00
 8007a5c:	40013400 	.word	0x40013400
 8007a60:	40015000 	.word	0x40015000
 8007a64:	40014000 	.word	0x40014000
 8007a68:	40014400 	.word	0x40014400
 8007a6c:	40014800 	.word	0x40014800

08007a70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a1b      	ldr	r3, [r3, #32]
 8007a84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	69db      	ldr	r3, [r3, #28]
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	021b      	lsls	r3, r3, #8
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007abe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	031b      	lsls	r3, r3, #12
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a2c      	ldr	r2, [pc, #176]	@ (8007b80 <TIM_OC4_SetConfig+0x110>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d007      	beq.n	8007ae4 <TIM_OC4_SetConfig+0x74>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a2b      	ldr	r2, [pc, #172]	@ (8007b84 <TIM_OC4_SetConfig+0x114>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d003      	beq.n	8007ae4 <TIM_OC4_SetConfig+0x74>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a2a      	ldr	r2, [pc, #168]	@ (8007b88 <TIM_OC4_SetConfig+0x118>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d10d      	bne.n	8007b00 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	031b      	lsls	r3, r3, #12
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007afe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a1f      	ldr	r2, [pc, #124]	@ (8007b80 <TIM_OC4_SetConfig+0x110>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d013      	beq.n	8007b30 <TIM_OC4_SetConfig+0xc0>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007b84 <TIM_OC4_SetConfig+0x114>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d00f      	beq.n	8007b30 <TIM_OC4_SetConfig+0xc0>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a1e      	ldr	r2, [pc, #120]	@ (8007b8c <TIM_OC4_SetConfig+0x11c>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d00b      	beq.n	8007b30 <TIM_OC4_SetConfig+0xc0>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8007b90 <TIM_OC4_SetConfig+0x120>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d007      	beq.n	8007b30 <TIM_OC4_SetConfig+0xc0>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a1c      	ldr	r2, [pc, #112]	@ (8007b94 <TIM_OC4_SetConfig+0x124>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d003      	beq.n	8007b30 <TIM_OC4_SetConfig+0xc0>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a17      	ldr	r2, [pc, #92]	@ (8007b88 <TIM_OC4_SetConfig+0x118>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d113      	bne.n	8007b58 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b36:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b3e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	695b      	ldr	r3, [r3, #20]
 8007b44:	019b      	lsls	r3, r3, #6
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	019b      	lsls	r3, r3, #6
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	621a      	str	r2, [r3, #32]
}
 8007b72:	bf00      	nop
 8007b74:	371c      	adds	r7, #28
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	40012c00 	.word	0x40012c00
 8007b84:	40013400 	.word	0x40013400
 8007b88:	40015000 	.word	0x40015000
 8007b8c:	40014000 	.word	0x40014000
 8007b90:	40014400 	.word	0x40014400
 8007b94:	40014800 	.word	0x40014800

08007b98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b087      	sub	sp, #28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a1b      	ldr	r3, [r3, #32]
 8007bac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007bdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	041b      	lsls	r3, r3, #16
 8007be4:	693a      	ldr	r2, [r7, #16]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a19      	ldr	r2, [pc, #100]	@ (8007c54 <TIM_OC5_SetConfig+0xbc>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d013      	beq.n	8007c1a <TIM_OC5_SetConfig+0x82>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a18      	ldr	r2, [pc, #96]	@ (8007c58 <TIM_OC5_SetConfig+0xc0>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d00f      	beq.n	8007c1a <TIM_OC5_SetConfig+0x82>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a17      	ldr	r2, [pc, #92]	@ (8007c5c <TIM_OC5_SetConfig+0xc4>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d00b      	beq.n	8007c1a <TIM_OC5_SetConfig+0x82>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a16      	ldr	r2, [pc, #88]	@ (8007c60 <TIM_OC5_SetConfig+0xc8>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d007      	beq.n	8007c1a <TIM_OC5_SetConfig+0x82>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a15      	ldr	r2, [pc, #84]	@ (8007c64 <TIM_OC5_SetConfig+0xcc>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d003      	beq.n	8007c1a <TIM_OC5_SetConfig+0x82>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a14      	ldr	r2, [pc, #80]	@ (8007c68 <TIM_OC5_SetConfig+0xd0>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d109      	bne.n	8007c2e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	621a      	str	r2, [r3, #32]
}
 8007c48:	bf00      	nop
 8007c4a:	371c      	adds	r7, #28
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	40012c00 	.word	0x40012c00
 8007c58:	40013400 	.word	0x40013400
 8007c5c:	40014000 	.word	0x40014000
 8007c60:	40014400 	.word	0x40014400
 8007c64:	40014800 	.word	0x40014800
 8007c68:	40015000 	.word	0x40015000

08007c6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	021b      	lsls	r3, r3, #8
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	051b      	lsls	r3, r3, #20
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8007d2c <TIM_OC6_SetConfig+0xc0>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d013      	beq.n	8007cf0 <TIM_OC6_SetConfig+0x84>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a19      	ldr	r2, [pc, #100]	@ (8007d30 <TIM_OC6_SetConfig+0xc4>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d00f      	beq.n	8007cf0 <TIM_OC6_SetConfig+0x84>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a18      	ldr	r2, [pc, #96]	@ (8007d34 <TIM_OC6_SetConfig+0xc8>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d00b      	beq.n	8007cf0 <TIM_OC6_SetConfig+0x84>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a17      	ldr	r2, [pc, #92]	@ (8007d38 <TIM_OC6_SetConfig+0xcc>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d007      	beq.n	8007cf0 <TIM_OC6_SetConfig+0x84>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a16      	ldr	r2, [pc, #88]	@ (8007d3c <TIM_OC6_SetConfig+0xd0>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d003      	beq.n	8007cf0 <TIM_OC6_SetConfig+0x84>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a15      	ldr	r2, [pc, #84]	@ (8007d40 <TIM_OC6_SetConfig+0xd4>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d109      	bne.n	8007d04 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	029b      	lsls	r3, r3, #10
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	621a      	str	r2, [r3, #32]
}
 8007d1e:	bf00      	nop
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	40012c00 	.word	0x40012c00
 8007d30:	40013400 	.word	0x40013400
 8007d34:	40014000 	.word	0x40014000
 8007d38:	40014400 	.word	0x40014400
 8007d3c:	40014800 	.word	0x40014800
 8007d40:	40015000 	.word	0x40015000

08007d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6a1b      	ldr	r3, [r3, #32]
 8007d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	f023 0201 	bic.w	r2, r3, #1
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	011b      	lsls	r3, r3, #4
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f023 030a 	bic.w	r3, r3, #10
 8007d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	621a      	str	r2, [r3, #32]
}
 8007d96:	bf00      	nop
 8007d98:	371c      	adds	r7, #28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b087      	sub	sp, #28
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	f023 0210 	bic.w	r2, r3, #16
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007dcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	031b      	lsls	r3, r3, #12
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007dde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	011b      	lsls	r3, r3, #4
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	621a      	str	r2, [r3, #32]
}
 8007df6:	bf00      	nop
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b085      	sub	sp, #20
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007e18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	f043 0307 	orr.w	r3, r3, #7
 8007e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	609a      	str	r2, [r3, #8]
}
 8007e30:	bf00      	nop
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
 8007e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	021a      	lsls	r2, r3, #8
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	609a      	str	r2, [r3, #8]
}
 8007e70:	bf00      	nop
 8007e72:	371c      	adds	r7, #28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b087      	sub	sp, #28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	f003 031f 	and.w	r3, r3, #31
 8007e8e:	2201      	movs	r2, #1
 8007e90:	fa02 f303 	lsl.w	r3, r2, r3
 8007e94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6a1a      	ldr	r2, [r3, #32]
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	43db      	mvns	r3, r3
 8007e9e:	401a      	ands	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6a1a      	ldr	r2, [r3, #32]
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f003 031f 	and.w	r3, r3, #31
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	621a      	str	r2, [r3, #32]
}
 8007eba:	bf00      	nop
 8007ebc:	371c      	adds	r7, #28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
	...

08007ec8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d109      	bne.n	8007eec <HAL_TIMEx_PWMN_Start+0x24>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	bf14      	ite	ne
 8007ee4:	2301      	movne	r3, #1
 8007ee6:	2300      	moveq	r3, #0
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	e022      	b.n	8007f32 <HAL_TIMEx_PWMN_Start+0x6a>
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	d109      	bne.n	8007f06 <HAL_TIMEx_PWMN_Start+0x3e>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	bf14      	ite	ne
 8007efe:	2301      	movne	r3, #1
 8007f00:	2300      	moveq	r3, #0
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	e015      	b.n	8007f32 <HAL_TIMEx_PWMN_Start+0x6a>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b08      	cmp	r3, #8
 8007f0a:	d109      	bne.n	8007f20 <HAL_TIMEx_PWMN_Start+0x58>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	bf14      	ite	ne
 8007f18:	2301      	movne	r3, #1
 8007f1a:	2300      	moveq	r3, #0
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	e008      	b.n	8007f32 <HAL_TIMEx_PWMN_Start+0x6a>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	bf14      	ite	ne
 8007f2c:	2301      	movne	r3, #1
 8007f2e:	2300      	moveq	r3, #0
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e073      	b.n	8008022 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d104      	bne.n	8007f4a <HAL_TIMEx_PWMN_Start+0x82>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f48:	e013      	b.n	8007f72 <HAL_TIMEx_PWMN_Start+0xaa>
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	2b04      	cmp	r3, #4
 8007f4e:	d104      	bne.n	8007f5a <HAL_TIMEx_PWMN_Start+0x92>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2202      	movs	r2, #2
 8007f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f58:	e00b      	b.n	8007f72 <HAL_TIMEx_PWMN_Start+0xaa>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2b08      	cmp	r3, #8
 8007f5e:	d104      	bne.n	8007f6a <HAL_TIMEx_PWMN_Start+0xa2>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2202      	movs	r2, #2
 8007f64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f68:	e003      	b.n	8007f72 <HAL_TIMEx_PWMN_Start+0xaa>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2202      	movs	r2, #2
 8007f6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2204      	movs	r2, #4
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 f9d6 	bl	800832c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f8e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a25      	ldr	r2, [pc, #148]	@ (800802c <HAL_TIMEx_PWMN_Start+0x164>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d022      	beq.n	8007fe0 <HAL_TIMEx_PWMN_Start+0x118>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fa2:	d01d      	beq.n	8007fe0 <HAL_TIMEx_PWMN_Start+0x118>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a21      	ldr	r2, [pc, #132]	@ (8008030 <HAL_TIMEx_PWMN_Start+0x168>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d018      	beq.n	8007fe0 <HAL_TIMEx_PWMN_Start+0x118>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a20      	ldr	r2, [pc, #128]	@ (8008034 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d013      	beq.n	8007fe0 <HAL_TIMEx_PWMN_Start+0x118>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8008038 <HAL_TIMEx_PWMN_Start+0x170>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d00e      	beq.n	8007fe0 <HAL_TIMEx_PWMN_Start+0x118>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a1d      	ldr	r2, [pc, #116]	@ (800803c <HAL_TIMEx_PWMN_Start+0x174>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d009      	beq.n	8007fe0 <HAL_TIMEx_PWMN_Start+0x118>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8008040 <HAL_TIMEx_PWMN_Start+0x178>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d004      	beq.n	8007fe0 <HAL_TIMEx_PWMN_Start+0x118>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a1a      	ldr	r2, [pc, #104]	@ (8008044 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d115      	bne.n	800800c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689a      	ldr	r2, [r3, #8]
 8007fe6:	4b18      	ldr	r3, [pc, #96]	@ (8008048 <HAL_TIMEx_PWMN_Start+0x180>)
 8007fe8:	4013      	ands	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b06      	cmp	r3, #6
 8007ff0:	d015      	beq.n	800801e <HAL_TIMEx_PWMN_Start+0x156>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ff8:	d011      	beq.n	800801e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f042 0201 	orr.w	r2, r2, #1
 8008008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800800a:	e008      	b.n	800801e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f042 0201 	orr.w	r2, r2, #1
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	e000      	b.n	8008020 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800801e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	40012c00 	.word	0x40012c00
 8008030:	40000400 	.word	0x40000400
 8008034:	40000800 	.word	0x40000800
 8008038:	40000c00 	.word	0x40000c00
 800803c:	40013400 	.word	0x40013400
 8008040:	40014000 	.word	0x40014000
 8008044:	40015000 	.word	0x40015000
 8008048:	00010007 	.word	0x00010007

0800804c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800805c:	2b01      	cmp	r3, #1
 800805e:	d101      	bne.n	8008064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008060:	2302      	movs	r3, #2
 8008062:	e074      	b.n	800814e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2202      	movs	r2, #2
 8008070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a34      	ldr	r2, [pc, #208]	@ (800815c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d009      	beq.n	80080a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a33      	ldr	r2, [pc, #204]	@ (8008160 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d004      	beq.n	80080a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a31      	ldr	r2, [pc, #196]	@ (8008164 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d108      	bne.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80080a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80080ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a21      	ldr	r2, [pc, #132]	@ (800815c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d022      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080e4:	d01d      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a1f      	ldr	r2, [pc, #124]	@ (8008168 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d018      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a1d      	ldr	r2, [pc, #116]	@ (800816c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d013      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008170 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d00e      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a15      	ldr	r2, [pc, #84]	@ (8008160 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d009      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a18      	ldr	r2, [pc, #96]	@ (8008174 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d004      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a11      	ldr	r2, [pc, #68]	@ (8008164 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d10c      	bne.n	800813c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008128:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	4313      	orrs	r3, r2
 8008132:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	40012c00 	.word	0x40012c00
 8008160:	40013400 	.word	0x40013400
 8008164:	40015000 	.word	0x40015000
 8008168:	40000400 	.word	0x40000400
 800816c:	40000800 	.word	0x40000800
 8008170:	40000c00 	.word	0x40000c00
 8008174:	40014000 	.word	0x40014000

08008178 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800818c:	2b01      	cmp	r3, #1
 800818e:	d101      	bne.n	8008194 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008190:	2302      	movs	r3, #2
 8008192:	e078      	b.n	8008286 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	041b      	lsls	r3, r3, #16
 800820a:	4313      	orrs	r3, r2
 800820c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	69db      	ldr	r3, [r3, #28]
 8008218:	4313      	orrs	r3, r2
 800821a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a1c      	ldr	r2, [pc, #112]	@ (8008294 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d009      	beq.n	800823a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a1b      	ldr	r2, [pc, #108]	@ (8008298 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d004      	beq.n	800823a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a19      	ldr	r2, [pc, #100]	@ (800829c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d11c      	bne.n	8008274 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008244:	051b      	lsls	r3, r3, #20
 8008246:	4313      	orrs	r3, r2
 8008248:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	6a1b      	ldr	r3, [r3, #32]
 8008254:	4313      	orrs	r3, r2
 8008256:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008262:	4313      	orrs	r3, r2
 8008264:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008270:	4313      	orrs	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	40012c00 	.word	0x40012c00
 8008298:	40013400 	.word	0x40013400
 800829c:	40015000 	.word	0x40015000

080082a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800832c:	b480      	push	{r7}
 800832e:	b087      	sub	sp, #28
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	f003 030f 	and.w	r3, r3, #15
 800833e:	2204      	movs	r2, #4
 8008340:	fa02 f303 	lsl.w	r3, r2, r3
 8008344:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6a1a      	ldr	r2, [r3, #32]
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	43db      	mvns	r3, r3
 800834e:	401a      	ands	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6a1a      	ldr	r2, [r3, #32]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	f003 030f 	and.w	r3, r3, #15
 800835e:	6879      	ldr	r1, [r7, #4]
 8008360:	fa01 f303 	lsl.w	r3, r1, r3
 8008364:	431a      	orrs	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	621a      	str	r2, [r3, #32]
}
 800836a:	bf00      	nop
 800836c:	371c      	adds	r7, #28
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr

08008376 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b082      	sub	sp, #8
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e042      	b.n	800840e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800838e:	2b00      	cmp	r3, #0
 8008390:	d106      	bne.n	80083a0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f7fa fa74 	bl	8002888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2224      	movs	r2, #36	@ 0x24
 80083a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f022 0201 	bic.w	r2, r2, #1
 80083b6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d002      	beq.n	80083c6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fbb3 	bl	8008b2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f8b4 	bl	8008534 <UART_SetConfig>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d101      	bne.n	80083d6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e01b      	b.n	800840e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f042 0201 	orr.w	r2, r2, #1
 8008404:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fc32 	bl	8008c70 <UART_CheckIdleState>
 800840c:	4603      	mov	r3, r0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b08a      	sub	sp, #40	@ 0x28
 800841a:	af02      	add	r7, sp, #8
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	603b      	str	r3, [r7, #0]
 8008422:	4613      	mov	r3, r2
 8008424:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800842c:	2b20      	cmp	r3, #32
 800842e:	d17b      	bne.n	8008528 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d002      	beq.n	800843c <HAL_UART_Transmit+0x26>
 8008436:	88fb      	ldrh	r3, [r7, #6]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e074      	b.n	800852a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2221      	movs	r2, #33	@ 0x21
 800844c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008450:	f7fa fdf2 	bl	8003038 <HAL_GetTick>
 8008454:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	88fa      	ldrh	r2, [r7, #6]
 800845a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	88fa      	ldrh	r2, [r7, #6]
 8008462:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800846e:	d108      	bne.n	8008482 <HAL_UART_Transmit+0x6c>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d104      	bne.n	8008482 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008478:	2300      	movs	r3, #0
 800847a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	61bb      	str	r3, [r7, #24]
 8008480:	e003      	b.n	800848a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008486:	2300      	movs	r3, #0
 8008488:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800848a:	e030      	b.n	80084ee <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	2200      	movs	r2, #0
 8008494:	2180      	movs	r1, #128	@ 0x80
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 fc94 	bl	8008dc4 <UART_WaitOnFlagUntilTimeout>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d005      	beq.n	80084ae <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2220      	movs	r2, #32
 80084a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e03d      	b.n	800852a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10b      	bne.n	80084cc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	881b      	ldrh	r3, [r3, #0]
 80084b8:	461a      	mov	r2, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	3302      	adds	r3, #2
 80084c8:	61bb      	str	r3, [r7, #24]
 80084ca:	e007      	b.n	80084dc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	781a      	ldrb	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	3301      	adds	r3, #1
 80084da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	3b01      	subs	r3, #1
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1c8      	bne.n	800848c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2200      	movs	r2, #0
 8008502:	2140      	movs	r1, #64	@ 0x40
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 fc5d 	bl	8008dc4 <UART_WaitOnFlagUntilTimeout>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d005      	beq.n	800851c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2220      	movs	r2, #32
 8008514:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e006      	b.n	800852a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2220      	movs	r2, #32
 8008520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008524:	2300      	movs	r3, #0
 8008526:	e000      	b.n	800852a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008528:	2302      	movs	r3, #2
  }
}
 800852a:	4618      	mov	r0, r3
 800852c:	3720      	adds	r7, #32
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
	...

08008534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008538:	b08c      	sub	sp, #48	@ 0x30
 800853a:	af00      	add	r7, sp, #0
 800853c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	689a      	ldr	r2, [r3, #8]
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	431a      	orrs	r2, r3
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	431a      	orrs	r2, r3
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	4313      	orrs	r3, r2
 800855a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	4baa      	ldr	r3, [pc, #680]	@ (800880c <UART_SetConfig+0x2d8>)
 8008564:	4013      	ands	r3, r2
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	6812      	ldr	r2, [r2, #0]
 800856a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800856c:	430b      	orrs	r3, r1
 800856e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	68da      	ldr	r2, [r3, #12]
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	430a      	orrs	r2, r1
 8008584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a9f      	ldr	r2, [pc, #636]	@ (8008810 <UART_SetConfig+0x2dc>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d004      	beq.n	80085a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800859c:	4313      	orrs	r3, r2
 800859e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80085aa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	6812      	ldr	r2, [r2, #0]
 80085b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085b4:	430b      	orrs	r3, r1
 80085b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085be:	f023 010f 	bic.w	r1, r3, #15
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	430a      	orrs	r2, r1
 80085cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a90      	ldr	r2, [pc, #576]	@ (8008814 <UART_SetConfig+0x2e0>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d125      	bne.n	8008624 <UART_SetConfig+0xf0>
 80085d8:	4b8f      	ldr	r3, [pc, #572]	@ (8008818 <UART_SetConfig+0x2e4>)
 80085da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085de:	f003 0303 	and.w	r3, r3, #3
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	d81a      	bhi.n	800861c <UART_SetConfig+0xe8>
 80085e6:	a201      	add	r2, pc, #4	@ (adr r2, 80085ec <UART_SetConfig+0xb8>)
 80085e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ec:	080085fd 	.word	0x080085fd
 80085f0:	0800860d 	.word	0x0800860d
 80085f4:	08008605 	.word	0x08008605
 80085f8:	08008615 	.word	0x08008615
 80085fc:	2301      	movs	r3, #1
 80085fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008602:	e116      	b.n	8008832 <UART_SetConfig+0x2fe>
 8008604:	2302      	movs	r3, #2
 8008606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800860a:	e112      	b.n	8008832 <UART_SetConfig+0x2fe>
 800860c:	2304      	movs	r3, #4
 800860e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008612:	e10e      	b.n	8008832 <UART_SetConfig+0x2fe>
 8008614:	2308      	movs	r3, #8
 8008616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800861a:	e10a      	b.n	8008832 <UART_SetConfig+0x2fe>
 800861c:	2310      	movs	r3, #16
 800861e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008622:	e106      	b.n	8008832 <UART_SetConfig+0x2fe>
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a7c      	ldr	r2, [pc, #496]	@ (800881c <UART_SetConfig+0x2e8>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d138      	bne.n	80086a0 <UART_SetConfig+0x16c>
 800862e:	4b7a      	ldr	r3, [pc, #488]	@ (8008818 <UART_SetConfig+0x2e4>)
 8008630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008634:	f003 030c 	and.w	r3, r3, #12
 8008638:	2b0c      	cmp	r3, #12
 800863a:	d82d      	bhi.n	8008698 <UART_SetConfig+0x164>
 800863c:	a201      	add	r2, pc, #4	@ (adr r2, 8008644 <UART_SetConfig+0x110>)
 800863e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008642:	bf00      	nop
 8008644:	08008679 	.word	0x08008679
 8008648:	08008699 	.word	0x08008699
 800864c:	08008699 	.word	0x08008699
 8008650:	08008699 	.word	0x08008699
 8008654:	08008689 	.word	0x08008689
 8008658:	08008699 	.word	0x08008699
 800865c:	08008699 	.word	0x08008699
 8008660:	08008699 	.word	0x08008699
 8008664:	08008681 	.word	0x08008681
 8008668:	08008699 	.word	0x08008699
 800866c:	08008699 	.word	0x08008699
 8008670:	08008699 	.word	0x08008699
 8008674:	08008691 	.word	0x08008691
 8008678:	2300      	movs	r3, #0
 800867a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800867e:	e0d8      	b.n	8008832 <UART_SetConfig+0x2fe>
 8008680:	2302      	movs	r3, #2
 8008682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008686:	e0d4      	b.n	8008832 <UART_SetConfig+0x2fe>
 8008688:	2304      	movs	r3, #4
 800868a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800868e:	e0d0      	b.n	8008832 <UART_SetConfig+0x2fe>
 8008690:	2308      	movs	r3, #8
 8008692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008696:	e0cc      	b.n	8008832 <UART_SetConfig+0x2fe>
 8008698:	2310      	movs	r3, #16
 800869a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800869e:	e0c8      	b.n	8008832 <UART_SetConfig+0x2fe>
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a5e      	ldr	r2, [pc, #376]	@ (8008820 <UART_SetConfig+0x2ec>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d125      	bne.n	80086f6 <UART_SetConfig+0x1c2>
 80086aa:	4b5b      	ldr	r3, [pc, #364]	@ (8008818 <UART_SetConfig+0x2e4>)
 80086ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80086b4:	2b30      	cmp	r3, #48	@ 0x30
 80086b6:	d016      	beq.n	80086e6 <UART_SetConfig+0x1b2>
 80086b8:	2b30      	cmp	r3, #48	@ 0x30
 80086ba:	d818      	bhi.n	80086ee <UART_SetConfig+0x1ba>
 80086bc:	2b20      	cmp	r3, #32
 80086be:	d00a      	beq.n	80086d6 <UART_SetConfig+0x1a2>
 80086c0:	2b20      	cmp	r3, #32
 80086c2:	d814      	bhi.n	80086ee <UART_SetConfig+0x1ba>
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d002      	beq.n	80086ce <UART_SetConfig+0x19a>
 80086c8:	2b10      	cmp	r3, #16
 80086ca:	d008      	beq.n	80086de <UART_SetConfig+0x1aa>
 80086cc:	e00f      	b.n	80086ee <UART_SetConfig+0x1ba>
 80086ce:	2300      	movs	r3, #0
 80086d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086d4:	e0ad      	b.n	8008832 <UART_SetConfig+0x2fe>
 80086d6:	2302      	movs	r3, #2
 80086d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086dc:	e0a9      	b.n	8008832 <UART_SetConfig+0x2fe>
 80086de:	2304      	movs	r3, #4
 80086e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086e4:	e0a5      	b.n	8008832 <UART_SetConfig+0x2fe>
 80086e6:	2308      	movs	r3, #8
 80086e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086ec:	e0a1      	b.n	8008832 <UART_SetConfig+0x2fe>
 80086ee:	2310      	movs	r3, #16
 80086f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086f4:	e09d      	b.n	8008832 <UART_SetConfig+0x2fe>
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a4a      	ldr	r2, [pc, #296]	@ (8008824 <UART_SetConfig+0x2f0>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d125      	bne.n	800874c <UART_SetConfig+0x218>
 8008700:	4b45      	ldr	r3, [pc, #276]	@ (8008818 <UART_SetConfig+0x2e4>)
 8008702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008706:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800870a:	2bc0      	cmp	r3, #192	@ 0xc0
 800870c:	d016      	beq.n	800873c <UART_SetConfig+0x208>
 800870e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008710:	d818      	bhi.n	8008744 <UART_SetConfig+0x210>
 8008712:	2b80      	cmp	r3, #128	@ 0x80
 8008714:	d00a      	beq.n	800872c <UART_SetConfig+0x1f8>
 8008716:	2b80      	cmp	r3, #128	@ 0x80
 8008718:	d814      	bhi.n	8008744 <UART_SetConfig+0x210>
 800871a:	2b00      	cmp	r3, #0
 800871c:	d002      	beq.n	8008724 <UART_SetConfig+0x1f0>
 800871e:	2b40      	cmp	r3, #64	@ 0x40
 8008720:	d008      	beq.n	8008734 <UART_SetConfig+0x200>
 8008722:	e00f      	b.n	8008744 <UART_SetConfig+0x210>
 8008724:	2300      	movs	r3, #0
 8008726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800872a:	e082      	b.n	8008832 <UART_SetConfig+0x2fe>
 800872c:	2302      	movs	r3, #2
 800872e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008732:	e07e      	b.n	8008832 <UART_SetConfig+0x2fe>
 8008734:	2304      	movs	r3, #4
 8008736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800873a:	e07a      	b.n	8008832 <UART_SetConfig+0x2fe>
 800873c:	2308      	movs	r3, #8
 800873e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008742:	e076      	b.n	8008832 <UART_SetConfig+0x2fe>
 8008744:	2310      	movs	r3, #16
 8008746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800874a:	e072      	b.n	8008832 <UART_SetConfig+0x2fe>
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a35      	ldr	r2, [pc, #212]	@ (8008828 <UART_SetConfig+0x2f4>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d12a      	bne.n	80087ac <UART_SetConfig+0x278>
 8008756:	4b30      	ldr	r3, [pc, #192]	@ (8008818 <UART_SetConfig+0x2e4>)
 8008758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800875c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008760:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008764:	d01a      	beq.n	800879c <UART_SetConfig+0x268>
 8008766:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800876a:	d81b      	bhi.n	80087a4 <UART_SetConfig+0x270>
 800876c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008770:	d00c      	beq.n	800878c <UART_SetConfig+0x258>
 8008772:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008776:	d815      	bhi.n	80087a4 <UART_SetConfig+0x270>
 8008778:	2b00      	cmp	r3, #0
 800877a:	d003      	beq.n	8008784 <UART_SetConfig+0x250>
 800877c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008780:	d008      	beq.n	8008794 <UART_SetConfig+0x260>
 8008782:	e00f      	b.n	80087a4 <UART_SetConfig+0x270>
 8008784:	2300      	movs	r3, #0
 8008786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800878a:	e052      	b.n	8008832 <UART_SetConfig+0x2fe>
 800878c:	2302      	movs	r3, #2
 800878e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008792:	e04e      	b.n	8008832 <UART_SetConfig+0x2fe>
 8008794:	2304      	movs	r3, #4
 8008796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800879a:	e04a      	b.n	8008832 <UART_SetConfig+0x2fe>
 800879c:	2308      	movs	r3, #8
 800879e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087a2:	e046      	b.n	8008832 <UART_SetConfig+0x2fe>
 80087a4:	2310      	movs	r3, #16
 80087a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087aa:	e042      	b.n	8008832 <UART_SetConfig+0x2fe>
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a17      	ldr	r2, [pc, #92]	@ (8008810 <UART_SetConfig+0x2dc>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d13a      	bne.n	800882c <UART_SetConfig+0x2f8>
 80087b6:	4b18      	ldr	r3, [pc, #96]	@ (8008818 <UART_SetConfig+0x2e4>)
 80087b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80087c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087c4:	d01a      	beq.n	80087fc <UART_SetConfig+0x2c8>
 80087c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087ca:	d81b      	bhi.n	8008804 <UART_SetConfig+0x2d0>
 80087cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087d0:	d00c      	beq.n	80087ec <UART_SetConfig+0x2b8>
 80087d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087d6:	d815      	bhi.n	8008804 <UART_SetConfig+0x2d0>
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <UART_SetConfig+0x2b0>
 80087dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087e0:	d008      	beq.n	80087f4 <UART_SetConfig+0x2c0>
 80087e2:	e00f      	b.n	8008804 <UART_SetConfig+0x2d0>
 80087e4:	2300      	movs	r3, #0
 80087e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ea:	e022      	b.n	8008832 <UART_SetConfig+0x2fe>
 80087ec:	2302      	movs	r3, #2
 80087ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087f2:	e01e      	b.n	8008832 <UART_SetConfig+0x2fe>
 80087f4:	2304      	movs	r3, #4
 80087f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087fa:	e01a      	b.n	8008832 <UART_SetConfig+0x2fe>
 80087fc:	2308      	movs	r3, #8
 80087fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008802:	e016      	b.n	8008832 <UART_SetConfig+0x2fe>
 8008804:	2310      	movs	r3, #16
 8008806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800880a:	e012      	b.n	8008832 <UART_SetConfig+0x2fe>
 800880c:	cfff69f3 	.word	0xcfff69f3
 8008810:	40008000 	.word	0x40008000
 8008814:	40013800 	.word	0x40013800
 8008818:	40021000 	.word	0x40021000
 800881c:	40004400 	.word	0x40004400
 8008820:	40004800 	.word	0x40004800
 8008824:	40004c00 	.word	0x40004c00
 8008828:	40005000 	.word	0x40005000
 800882c:	2310      	movs	r3, #16
 800882e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4aae      	ldr	r2, [pc, #696]	@ (8008af0 <UART_SetConfig+0x5bc>)
 8008838:	4293      	cmp	r3, r2
 800883a:	f040 8097 	bne.w	800896c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800883e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008842:	2b08      	cmp	r3, #8
 8008844:	d823      	bhi.n	800888e <UART_SetConfig+0x35a>
 8008846:	a201      	add	r2, pc, #4	@ (adr r2, 800884c <UART_SetConfig+0x318>)
 8008848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884c:	08008871 	.word	0x08008871
 8008850:	0800888f 	.word	0x0800888f
 8008854:	08008879 	.word	0x08008879
 8008858:	0800888f 	.word	0x0800888f
 800885c:	0800887f 	.word	0x0800887f
 8008860:	0800888f 	.word	0x0800888f
 8008864:	0800888f 	.word	0x0800888f
 8008868:	0800888f 	.word	0x0800888f
 800886c:	08008887 	.word	0x08008887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008870:	f7fd fa32 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 8008874:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008876:	e010      	b.n	800889a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008878:	4b9e      	ldr	r3, [pc, #632]	@ (8008af4 <UART_SetConfig+0x5c0>)
 800887a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800887c:	e00d      	b.n	800889a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800887e:	f7fd f9bd 	bl	8005bfc <HAL_RCC_GetSysClockFreq>
 8008882:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008884:	e009      	b.n	800889a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800888a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800888c:	e005      	b.n	800889a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008898:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800889a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889c:	2b00      	cmp	r3, #0
 800889e:	f000 8130 	beq.w	8008b02 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088a6:	4a94      	ldr	r2, [pc, #592]	@ (8008af8 <UART_SetConfig+0x5c4>)
 80088a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088ac:	461a      	mov	r2, r3
 80088ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80088b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	4613      	mov	r3, r2
 80088bc:	005b      	lsls	r3, r3, #1
 80088be:	4413      	add	r3, r2
 80088c0:	69ba      	ldr	r2, [r7, #24]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d305      	bcc.n	80088d2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088cc:	69ba      	ldr	r2, [r7, #24]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d903      	bls.n	80088da <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80088d8:	e113      	b.n	8008b02 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088dc:	2200      	movs	r2, #0
 80088de:	60bb      	str	r3, [r7, #8]
 80088e0:	60fa      	str	r2, [r7, #12]
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e6:	4a84      	ldr	r2, [pc, #528]	@ (8008af8 <UART_SetConfig+0x5c4>)
 80088e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	2200      	movs	r2, #0
 80088f0:	603b      	str	r3, [r7, #0]
 80088f2:	607a      	str	r2, [r7, #4]
 80088f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088fc:	f7f8 f9cc 	bl	8000c98 <__aeabi_uldivmod>
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	4610      	mov	r0, r2
 8008906:	4619      	mov	r1, r3
 8008908:	f04f 0200 	mov.w	r2, #0
 800890c:	f04f 0300 	mov.w	r3, #0
 8008910:	020b      	lsls	r3, r1, #8
 8008912:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008916:	0202      	lsls	r2, r0, #8
 8008918:	6979      	ldr	r1, [r7, #20]
 800891a:	6849      	ldr	r1, [r1, #4]
 800891c:	0849      	lsrs	r1, r1, #1
 800891e:	2000      	movs	r0, #0
 8008920:	460c      	mov	r4, r1
 8008922:	4605      	mov	r5, r0
 8008924:	eb12 0804 	adds.w	r8, r2, r4
 8008928:	eb43 0905 	adc.w	r9, r3, r5
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	469a      	mov	sl, r3
 8008934:	4693      	mov	fp, r2
 8008936:	4652      	mov	r2, sl
 8008938:	465b      	mov	r3, fp
 800893a:	4640      	mov	r0, r8
 800893c:	4649      	mov	r1, r9
 800893e:	f7f8 f9ab 	bl	8000c98 <__aeabi_uldivmod>
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	4613      	mov	r3, r2
 8008948:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800894a:	6a3b      	ldr	r3, [r7, #32]
 800894c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008950:	d308      	bcc.n	8008964 <UART_SetConfig+0x430>
 8008952:	6a3b      	ldr	r3, [r7, #32]
 8008954:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008958:	d204      	bcs.n	8008964 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	6a3a      	ldr	r2, [r7, #32]
 8008960:	60da      	str	r2, [r3, #12]
 8008962:	e0ce      	b.n	8008b02 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800896a:	e0ca      	b.n	8008b02 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	69db      	ldr	r3, [r3, #28]
 8008970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008974:	d166      	bne.n	8008a44 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008976:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800897a:	2b08      	cmp	r3, #8
 800897c:	d827      	bhi.n	80089ce <UART_SetConfig+0x49a>
 800897e:	a201      	add	r2, pc, #4	@ (adr r2, 8008984 <UART_SetConfig+0x450>)
 8008980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008984:	080089a9 	.word	0x080089a9
 8008988:	080089b1 	.word	0x080089b1
 800898c:	080089b9 	.word	0x080089b9
 8008990:	080089cf 	.word	0x080089cf
 8008994:	080089bf 	.word	0x080089bf
 8008998:	080089cf 	.word	0x080089cf
 800899c:	080089cf 	.word	0x080089cf
 80089a0:	080089cf 	.word	0x080089cf
 80089a4:	080089c7 	.word	0x080089c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089a8:	f7fd f996 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 80089ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089ae:	e014      	b.n	80089da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089b0:	f7fd f9a8 	bl	8005d04 <HAL_RCC_GetPCLK2Freq>
 80089b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089b6:	e010      	b.n	80089da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089b8:	4b4e      	ldr	r3, [pc, #312]	@ (8008af4 <UART_SetConfig+0x5c0>)
 80089ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089bc:	e00d      	b.n	80089da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089be:	f7fd f91d 	bl	8005bfc <HAL_RCC_GetSysClockFreq>
 80089c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089c4:	e009      	b.n	80089da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089cc:	e005      	b.n	80089da <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80089ce:	2300      	movs	r3, #0
 80089d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80089d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f000 8090 	beq.w	8008b02 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e6:	4a44      	ldr	r2, [pc, #272]	@ (8008af8 <UART_SetConfig+0x5c4>)
 80089e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089ec:	461a      	mov	r2, r3
 80089ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80089f4:	005a      	lsls	r2, r3, #1
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	085b      	lsrs	r3, r3, #1
 80089fc:	441a      	add	r2, r3
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a08:	6a3b      	ldr	r3, [r7, #32]
 8008a0a:	2b0f      	cmp	r3, #15
 8008a0c:	d916      	bls.n	8008a3c <UART_SetConfig+0x508>
 8008a0e:	6a3b      	ldr	r3, [r7, #32]
 8008a10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a14:	d212      	bcs.n	8008a3c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	f023 030f 	bic.w	r3, r3, #15
 8008a1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a20:	6a3b      	ldr	r3, [r7, #32]
 8008a22:	085b      	lsrs	r3, r3, #1
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	f003 0307 	and.w	r3, r3, #7
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	8bfb      	ldrh	r3, [r7, #30]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	8bfa      	ldrh	r2, [r7, #30]
 8008a38:	60da      	str	r2, [r3, #12]
 8008a3a:	e062      	b.n	8008b02 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a42:	e05e      	b.n	8008b02 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a44:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a48:	2b08      	cmp	r3, #8
 8008a4a:	d828      	bhi.n	8008a9e <UART_SetConfig+0x56a>
 8008a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a54 <UART_SetConfig+0x520>)
 8008a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a52:	bf00      	nop
 8008a54:	08008a79 	.word	0x08008a79
 8008a58:	08008a81 	.word	0x08008a81
 8008a5c:	08008a89 	.word	0x08008a89
 8008a60:	08008a9f 	.word	0x08008a9f
 8008a64:	08008a8f 	.word	0x08008a8f
 8008a68:	08008a9f 	.word	0x08008a9f
 8008a6c:	08008a9f 	.word	0x08008a9f
 8008a70:	08008a9f 	.word	0x08008a9f
 8008a74:	08008a97 	.word	0x08008a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a78:	f7fd f92e 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 8008a7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a7e:	e014      	b.n	8008aaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a80:	f7fd f940 	bl	8005d04 <HAL_RCC_GetPCLK2Freq>
 8008a84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a86:	e010      	b.n	8008aaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a88:	4b1a      	ldr	r3, [pc, #104]	@ (8008af4 <UART_SetConfig+0x5c0>)
 8008a8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a8c:	e00d      	b.n	8008aaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a8e:	f7fd f8b5 	bl	8005bfc <HAL_RCC_GetSysClockFreq>
 8008a92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a94:	e009      	b.n	8008aaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a9c:	e005      	b.n	8008aaa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008aa8:	bf00      	nop
    }

    if (pclk != 0U)
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d028      	beq.n	8008b02 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab4:	4a10      	ldr	r2, [pc, #64]	@ (8008af8 <UART_SetConfig+0x5c4>)
 8008ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aba:	461a      	mov	r2, r3
 8008abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008abe:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	085b      	lsrs	r3, r3, #1
 8008ac8:	441a      	add	r2, r3
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ad4:	6a3b      	ldr	r3, [r7, #32]
 8008ad6:	2b0f      	cmp	r3, #15
 8008ad8:	d910      	bls.n	8008afc <UART_SetConfig+0x5c8>
 8008ada:	6a3b      	ldr	r3, [r7, #32]
 8008adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ae0:	d20c      	bcs.n	8008afc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ae2:	6a3b      	ldr	r3, [r7, #32]
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	60da      	str	r2, [r3, #12]
 8008aec:	e009      	b.n	8008b02 <UART_SetConfig+0x5ce>
 8008aee:	bf00      	nop
 8008af0:	40008000 	.word	0x40008000
 8008af4:	00f42400 	.word	0x00f42400
 8008af8:	0800d100 	.word	0x0800d100
      }
      else
      {
        ret = HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	2200      	movs	r2, #0
 8008b16:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008b1e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3730      	adds	r7, #48	@ 0x30
 8008b26:	46bd      	mov	sp, r7
 8008b28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b38:	f003 0308 	and.w	r3, r3, #8
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00a      	beq.n	8008b56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	430a      	orrs	r2, r1
 8008b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00a      	beq.n	8008b78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	430a      	orrs	r2, r1
 8008b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b7c:	f003 0302 	and.w	r3, r3, #2
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00a      	beq.n	8008b9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	430a      	orrs	r2, r1
 8008b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b9e:	f003 0304 	and.w	r3, r3, #4
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00a      	beq.n	8008bbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc0:	f003 0310 	and.w	r3, r3, #16
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00a      	beq.n	8008bde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	430a      	orrs	r2, r1
 8008bdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be2:	f003 0320 	and.w	r3, r3, #32
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	430a      	orrs	r2, r1
 8008bfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d01a      	beq.n	8008c42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	430a      	orrs	r2, r1
 8008c20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c2a:	d10a      	bne.n	8008c42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	430a      	orrs	r2, r1
 8008c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00a      	beq.n	8008c64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	430a      	orrs	r2, r1
 8008c62:	605a      	str	r2, [r3, #4]
  }
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b098      	sub	sp, #96	@ 0x60
 8008c74:	af02      	add	r7, sp, #8
 8008c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c80:	f7fa f9da 	bl	8003038 <HAL_GetTick>
 8008c84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0308 	and.w	r3, r3, #8
 8008c90:	2b08      	cmp	r3, #8
 8008c92:	d12f      	bne.n	8008cf4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f88e 	bl	8008dc4 <UART_WaitOnFlagUntilTimeout>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d022      	beq.n	8008cf4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb6:	e853 3f00 	ldrex	r3, [r3]
 8008cba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ccc:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cd4:	e841 2300 	strex	r3, r2, [r1]
 8008cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1e6      	bne.n	8008cae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2220      	movs	r2, #32
 8008ce4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	e063      	b.n	8008dbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 0304 	and.w	r3, r3, #4
 8008cfe:	2b04      	cmp	r3, #4
 8008d00:	d149      	bne.n	8008d96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d06:	9300      	str	r3, [sp, #0]
 8008d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f857 	bl	8008dc4 <UART_WaitOnFlagUntilTimeout>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d03c      	beq.n	8008d96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d24:	e853 3f00 	ldrex	r3, [r3]
 8008d28:	623b      	str	r3, [r7, #32]
   return(result);
 8008d2a:	6a3b      	ldr	r3, [r7, #32]
 8008d2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	461a      	mov	r2, r3
 8008d38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d42:	e841 2300 	strex	r3, r2, [r1]
 8008d46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1e6      	bne.n	8008d1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3308      	adds	r3, #8
 8008d54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	e853 3f00 	ldrex	r3, [r3]
 8008d5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f023 0301 	bic.w	r3, r3, #1
 8008d64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3308      	adds	r3, #8
 8008d6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d6e:	61fa      	str	r2, [r7, #28]
 8008d70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	69b9      	ldr	r1, [r7, #24]
 8008d74:	69fa      	ldr	r2, [r7, #28]
 8008d76:	e841 2300 	strex	r3, r2, [r1]
 8008d7a:	617b      	str	r3, [r7, #20]
   return(result);
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1e5      	bne.n	8008d4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2220      	movs	r2, #32
 8008d86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e012      	b.n	8008dbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2220      	movs	r2, #32
 8008da2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3758      	adds	r7, #88	@ 0x58
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	603b      	str	r3, [r7, #0]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dd4:	e04f      	b.n	8008e76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ddc:	d04b      	beq.n	8008e76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dde:	f7fa f92b 	bl	8003038 <HAL_GetTick>
 8008de2:	4602      	mov	r2, r0
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	69ba      	ldr	r2, [r7, #24]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d302      	bcc.n	8008df4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008df4:	2303      	movs	r3, #3
 8008df6:	e04e      	b.n	8008e96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 0304 	and.w	r3, r3, #4
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d037      	beq.n	8008e76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	2b80      	cmp	r3, #128	@ 0x80
 8008e0a:	d034      	beq.n	8008e76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	2b40      	cmp	r3, #64	@ 0x40
 8008e10:	d031      	beq.n	8008e76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	69db      	ldr	r3, [r3, #28]
 8008e18:	f003 0308 	and.w	r3, r3, #8
 8008e1c:	2b08      	cmp	r3, #8
 8008e1e:	d110      	bne.n	8008e42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2208      	movs	r2, #8
 8008e26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f000 f838 	bl	8008e9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2208      	movs	r2, #8
 8008e32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e029      	b.n	8008e96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	69db      	ldr	r3, [r3, #28]
 8008e48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e50:	d111      	bne.n	8008e76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f000 f81e 	bl	8008e9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2220      	movs	r2, #32
 8008e66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008e72:	2303      	movs	r3, #3
 8008e74:	e00f      	b.n	8008e96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	69da      	ldr	r2, [r3, #28]
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	4013      	ands	r3, r2
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	bf0c      	ite	eq
 8008e86:	2301      	moveq	r3, #1
 8008e88:	2300      	movne	r3, #0
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	79fb      	ldrb	r3, [r7, #7]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d0a0      	beq.n	8008dd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e9e:	b480      	push	{r7}
 8008ea0:	b095      	sub	sp, #84	@ 0x54
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eae:	e853 3f00 	ldrex	r3, [r3]
 8008eb2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ec4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ec6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008eca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e6      	bne.n	8008ea6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3308      	adds	r3, #8
 8008ede:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee0:	6a3b      	ldr	r3, [r7, #32]
 8008ee2:	e853 3f00 	ldrex	r3, [r3]
 8008ee6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008eee:	f023 0301 	bic.w	r3, r3, #1
 8008ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3308      	adds	r3, #8
 8008efa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008efc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f04:	e841 2300 	strex	r3, r2, [r1]
 8008f08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e3      	bne.n	8008ed8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d118      	bne.n	8008f4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	e853 3f00 	ldrex	r3, [r3]
 8008f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	f023 0310 	bic.w	r3, r3, #16
 8008f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	461a      	mov	r2, r3
 8008f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f36:	61bb      	str	r3, [r7, #24]
 8008f38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3a:	6979      	ldr	r1, [r7, #20]
 8008f3c:	69ba      	ldr	r2, [r7, #24]
 8008f3e:	e841 2300 	strex	r3, r2, [r1]
 8008f42:	613b      	str	r3, [r7, #16]
   return(result);
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1e6      	bne.n	8008f18 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008f5e:	bf00      	nop
 8008f60:	3754      	adds	r7, #84	@ 0x54
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b085      	sub	sp, #20
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d101      	bne.n	8008f80 <HAL_UARTEx_DisableFifoMode+0x16>
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	e027      	b.n	8008fd0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2224      	movs	r2, #36	@ 0x24
 8008f8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f022 0201 	bic.w	r2, r2, #1
 8008fa6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008fae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2220      	movs	r2, #32
 8008fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d101      	bne.n	8008ff4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	e02d      	b.n	8009050 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2224      	movs	r2, #36	@ 0x24
 8009000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f022 0201 	bic.w	r2, r2, #1
 800901a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	430a      	orrs	r2, r1
 800902e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f84f 	bl	80090d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2220      	movs	r2, #32
 8009042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009068:	2b01      	cmp	r3, #1
 800906a:	d101      	bne.n	8009070 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800906c:	2302      	movs	r3, #2
 800906e:	e02d      	b.n	80090cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2224      	movs	r2, #36	@ 0x24
 800907c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f022 0201 	bic.w	r2, r2, #1
 8009096:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	430a      	orrs	r2, r1
 80090aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 f811 	bl	80090d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2220      	movs	r2, #32
 80090be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d108      	bne.n	80090f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80090f4:	e031      	b.n	800915a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80090f6:	2308      	movs	r3, #8
 80090f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80090fa:	2308      	movs	r3, #8
 80090fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	0e5b      	lsrs	r3, r3, #25
 8009106:	b2db      	uxtb	r3, r3
 8009108:	f003 0307 	and.w	r3, r3, #7
 800910c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	0f5b      	lsrs	r3, r3, #29
 8009116:	b2db      	uxtb	r3, r3
 8009118:	f003 0307 	and.w	r3, r3, #7
 800911c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800911e:	7bbb      	ldrb	r3, [r7, #14]
 8009120:	7b3a      	ldrb	r2, [r7, #12]
 8009122:	4911      	ldr	r1, [pc, #68]	@ (8009168 <UARTEx_SetNbDataToProcess+0x94>)
 8009124:	5c8a      	ldrb	r2, [r1, r2]
 8009126:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800912a:	7b3a      	ldrb	r2, [r7, #12]
 800912c:	490f      	ldr	r1, [pc, #60]	@ (800916c <UARTEx_SetNbDataToProcess+0x98>)
 800912e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009130:	fb93 f3f2 	sdiv	r3, r3, r2
 8009134:	b29a      	uxth	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800913c:	7bfb      	ldrb	r3, [r7, #15]
 800913e:	7b7a      	ldrb	r2, [r7, #13]
 8009140:	4909      	ldr	r1, [pc, #36]	@ (8009168 <UARTEx_SetNbDataToProcess+0x94>)
 8009142:	5c8a      	ldrb	r2, [r1, r2]
 8009144:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009148:	7b7a      	ldrb	r2, [r7, #13]
 800914a:	4908      	ldr	r1, [pc, #32]	@ (800916c <UARTEx_SetNbDataToProcess+0x98>)
 800914c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800914e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009152:	b29a      	uxth	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800915a:	bf00      	nop
 800915c:	3714      	adds	r7, #20
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	0800d118 	.word	0x0800d118
 800916c:	0800d120 	.word	0x0800d120

08009170 <__cvt>:
 8009170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009174:	ec57 6b10 	vmov	r6, r7, d0
 8009178:	2f00      	cmp	r7, #0
 800917a:	460c      	mov	r4, r1
 800917c:	4619      	mov	r1, r3
 800917e:	463b      	mov	r3, r7
 8009180:	bfbb      	ittet	lt
 8009182:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009186:	461f      	movlt	r7, r3
 8009188:	2300      	movge	r3, #0
 800918a:	232d      	movlt	r3, #45	@ 0x2d
 800918c:	700b      	strb	r3, [r1, #0]
 800918e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009190:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009194:	4691      	mov	r9, r2
 8009196:	f023 0820 	bic.w	r8, r3, #32
 800919a:	bfbc      	itt	lt
 800919c:	4632      	movlt	r2, r6
 800919e:	4616      	movlt	r6, r2
 80091a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80091a4:	d005      	beq.n	80091b2 <__cvt+0x42>
 80091a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80091aa:	d100      	bne.n	80091ae <__cvt+0x3e>
 80091ac:	3401      	adds	r4, #1
 80091ae:	2102      	movs	r1, #2
 80091b0:	e000      	b.n	80091b4 <__cvt+0x44>
 80091b2:	2103      	movs	r1, #3
 80091b4:	ab03      	add	r3, sp, #12
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	ab02      	add	r3, sp, #8
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	ec47 6b10 	vmov	d0, r6, r7
 80091c0:	4653      	mov	r3, sl
 80091c2:	4622      	mov	r2, r4
 80091c4:	f000 fe5c 	bl	8009e80 <_dtoa_r>
 80091c8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80091cc:	4605      	mov	r5, r0
 80091ce:	d119      	bne.n	8009204 <__cvt+0x94>
 80091d0:	f019 0f01 	tst.w	r9, #1
 80091d4:	d00e      	beq.n	80091f4 <__cvt+0x84>
 80091d6:	eb00 0904 	add.w	r9, r0, r4
 80091da:	2200      	movs	r2, #0
 80091dc:	2300      	movs	r3, #0
 80091de:	4630      	mov	r0, r6
 80091e0:	4639      	mov	r1, r7
 80091e2:	f7f7 fc99 	bl	8000b18 <__aeabi_dcmpeq>
 80091e6:	b108      	cbz	r0, 80091ec <__cvt+0x7c>
 80091e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80091ec:	2230      	movs	r2, #48	@ 0x30
 80091ee:	9b03      	ldr	r3, [sp, #12]
 80091f0:	454b      	cmp	r3, r9
 80091f2:	d31e      	bcc.n	8009232 <__cvt+0xc2>
 80091f4:	9b03      	ldr	r3, [sp, #12]
 80091f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091f8:	1b5b      	subs	r3, r3, r5
 80091fa:	4628      	mov	r0, r5
 80091fc:	6013      	str	r3, [r2, #0]
 80091fe:	b004      	add	sp, #16
 8009200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009204:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009208:	eb00 0904 	add.w	r9, r0, r4
 800920c:	d1e5      	bne.n	80091da <__cvt+0x6a>
 800920e:	7803      	ldrb	r3, [r0, #0]
 8009210:	2b30      	cmp	r3, #48	@ 0x30
 8009212:	d10a      	bne.n	800922a <__cvt+0xba>
 8009214:	2200      	movs	r2, #0
 8009216:	2300      	movs	r3, #0
 8009218:	4630      	mov	r0, r6
 800921a:	4639      	mov	r1, r7
 800921c:	f7f7 fc7c 	bl	8000b18 <__aeabi_dcmpeq>
 8009220:	b918      	cbnz	r0, 800922a <__cvt+0xba>
 8009222:	f1c4 0401 	rsb	r4, r4, #1
 8009226:	f8ca 4000 	str.w	r4, [sl]
 800922a:	f8da 3000 	ldr.w	r3, [sl]
 800922e:	4499      	add	r9, r3
 8009230:	e7d3      	b.n	80091da <__cvt+0x6a>
 8009232:	1c59      	adds	r1, r3, #1
 8009234:	9103      	str	r1, [sp, #12]
 8009236:	701a      	strb	r2, [r3, #0]
 8009238:	e7d9      	b.n	80091ee <__cvt+0x7e>

0800923a <__exponent>:
 800923a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800923c:	2900      	cmp	r1, #0
 800923e:	bfba      	itte	lt
 8009240:	4249      	neglt	r1, r1
 8009242:	232d      	movlt	r3, #45	@ 0x2d
 8009244:	232b      	movge	r3, #43	@ 0x2b
 8009246:	2909      	cmp	r1, #9
 8009248:	7002      	strb	r2, [r0, #0]
 800924a:	7043      	strb	r3, [r0, #1]
 800924c:	dd29      	ble.n	80092a2 <__exponent+0x68>
 800924e:	f10d 0307 	add.w	r3, sp, #7
 8009252:	461d      	mov	r5, r3
 8009254:	270a      	movs	r7, #10
 8009256:	461a      	mov	r2, r3
 8009258:	fbb1 f6f7 	udiv	r6, r1, r7
 800925c:	fb07 1416 	mls	r4, r7, r6, r1
 8009260:	3430      	adds	r4, #48	@ 0x30
 8009262:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009266:	460c      	mov	r4, r1
 8009268:	2c63      	cmp	r4, #99	@ 0x63
 800926a:	f103 33ff 	add.w	r3, r3, #4294967295
 800926e:	4631      	mov	r1, r6
 8009270:	dcf1      	bgt.n	8009256 <__exponent+0x1c>
 8009272:	3130      	adds	r1, #48	@ 0x30
 8009274:	1e94      	subs	r4, r2, #2
 8009276:	f803 1c01 	strb.w	r1, [r3, #-1]
 800927a:	1c41      	adds	r1, r0, #1
 800927c:	4623      	mov	r3, r4
 800927e:	42ab      	cmp	r3, r5
 8009280:	d30a      	bcc.n	8009298 <__exponent+0x5e>
 8009282:	f10d 0309 	add.w	r3, sp, #9
 8009286:	1a9b      	subs	r3, r3, r2
 8009288:	42ac      	cmp	r4, r5
 800928a:	bf88      	it	hi
 800928c:	2300      	movhi	r3, #0
 800928e:	3302      	adds	r3, #2
 8009290:	4403      	add	r3, r0
 8009292:	1a18      	subs	r0, r3, r0
 8009294:	b003      	add	sp, #12
 8009296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009298:	f813 6b01 	ldrb.w	r6, [r3], #1
 800929c:	f801 6f01 	strb.w	r6, [r1, #1]!
 80092a0:	e7ed      	b.n	800927e <__exponent+0x44>
 80092a2:	2330      	movs	r3, #48	@ 0x30
 80092a4:	3130      	adds	r1, #48	@ 0x30
 80092a6:	7083      	strb	r3, [r0, #2]
 80092a8:	70c1      	strb	r1, [r0, #3]
 80092aa:	1d03      	adds	r3, r0, #4
 80092ac:	e7f1      	b.n	8009292 <__exponent+0x58>
	...

080092b0 <_printf_float>:
 80092b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b4:	b08d      	sub	sp, #52	@ 0x34
 80092b6:	460c      	mov	r4, r1
 80092b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80092bc:	4616      	mov	r6, r2
 80092be:	461f      	mov	r7, r3
 80092c0:	4605      	mov	r5, r0
 80092c2:	f000 fcdb 	bl	8009c7c <_localeconv_r>
 80092c6:	6803      	ldr	r3, [r0, #0]
 80092c8:	9304      	str	r3, [sp, #16]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7f6 fff8 	bl	80002c0 <strlen>
 80092d0:	2300      	movs	r3, #0
 80092d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80092d4:	f8d8 3000 	ldr.w	r3, [r8]
 80092d8:	9005      	str	r0, [sp, #20]
 80092da:	3307      	adds	r3, #7
 80092dc:	f023 0307 	bic.w	r3, r3, #7
 80092e0:	f103 0208 	add.w	r2, r3, #8
 80092e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80092e8:	f8d4 b000 	ldr.w	fp, [r4]
 80092ec:	f8c8 2000 	str.w	r2, [r8]
 80092f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80092f8:	9307      	str	r3, [sp, #28]
 80092fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80092fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009302:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009306:	4b9c      	ldr	r3, [pc, #624]	@ (8009578 <_printf_float+0x2c8>)
 8009308:	f04f 32ff 	mov.w	r2, #4294967295
 800930c:	f7f7 fc36 	bl	8000b7c <__aeabi_dcmpun>
 8009310:	bb70      	cbnz	r0, 8009370 <_printf_float+0xc0>
 8009312:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009316:	4b98      	ldr	r3, [pc, #608]	@ (8009578 <_printf_float+0x2c8>)
 8009318:	f04f 32ff 	mov.w	r2, #4294967295
 800931c:	f7f7 fc10 	bl	8000b40 <__aeabi_dcmple>
 8009320:	bb30      	cbnz	r0, 8009370 <_printf_float+0xc0>
 8009322:	2200      	movs	r2, #0
 8009324:	2300      	movs	r3, #0
 8009326:	4640      	mov	r0, r8
 8009328:	4649      	mov	r1, r9
 800932a:	f7f7 fbff 	bl	8000b2c <__aeabi_dcmplt>
 800932e:	b110      	cbz	r0, 8009336 <_printf_float+0x86>
 8009330:	232d      	movs	r3, #45	@ 0x2d
 8009332:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009336:	4a91      	ldr	r2, [pc, #580]	@ (800957c <_printf_float+0x2cc>)
 8009338:	4b91      	ldr	r3, [pc, #580]	@ (8009580 <_printf_float+0x2d0>)
 800933a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800933e:	bf94      	ite	ls
 8009340:	4690      	movls	r8, r2
 8009342:	4698      	movhi	r8, r3
 8009344:	2303      	movs	r3, #3
 8009346:	6123      	str	r3, [r4, #16]
 8009348:	f02b 0304 	bic.w	r3, fp, #4
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	f04f 0900 	mov.w	r9, #0
 8009352:	9700      	str	r7, [sp, #0]
 8009354:	4633      	mov	r3, r6
 8009356:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009358:	4621      	mov	r1, r4
 800935a:	4628      	mov	r0, r5
 800935c:	f000 f9d2 	bl	8009704 <_printf_common>
 8009360:	3001      	adds	r0, #1
 8009362:	f040 808d 	bne.w	8009480 <_printf_float+0x1d0>
 8009366:	f04f 30ff 	mov.w	r0, #4294967295
 800936a:	b00d      	add	sp, #52	@ 0x34
 800936c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009370:	4642      	mov	r2, r8
 8009372:	464b      	mov	r3, r9
 8009374:	4640      	mov	r0, r8
 8009376:	4649      	mov	r1, r9
 8009378:	f7f7 fc00 	bl	8000b7c <__aeabi_dcmpun>
 800937c:	b140      	cbz	r0, 8009390 <_printf_float+0xe0>
 800937e:	464b      	mov	r3, r9
 8009380:	2b00      	cmp	r3, #0
 8009382:	bfbc      	itt	lt
 8009384:	232d      	movlt	r3, #45	@ 0x2d
 8009386:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800938a:	4a7e      	ldr	r2, [pc, #504]	@ (8009584 <_printf_float+0x2d4>)
 800938c:	4b7e      	ldr	r3, [pc, #504]	@ (8009588 <_printf_float+0x2d8>)
 800938e:	e7d4      	b.n	800933a <_printf_float+0x8a>
 8009390:	6863      	ldr	r3, [r4, #4]
 8009392:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009396:	9206      	str	r2, [sp, #24]
 8009398:	1c5a      	adds	r2, r3, #1
 800939a:	d13b      	bne.n	8009414 <_printf_float+0x164>
 800939c:	2306      	movs	r3, #6
 800939e:	6063      	str	r3, [r4, #4]
 80093a0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80093a4:	2300      	movs	r3, #0
 80093a6:	6022      	str	r2, [r4, #0]
 80093a8:	9303      	str	r3, [sp, #12]
 80093aa:	ab0a      	add	r3, sp, #40	@ 0x28
 80093ac:	e9cd a301 	strd	sl, r3, [sp, #4]
 80093b0:	ab09      	add	r3, sp, #36	@ 0x24
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	6861      	ldr	r1, [r4, #4]
 80093b6:	ec49 8b10 	vmov	d0, r8, r9
 80093ba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80093be:	4628      	mov	r0, r5
 80093c0:	f7ff fed6 	bl	8009170 <__cvt>
 80093c4:	9b06      	ldr	r3, [sp, #24]
 80093c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80093c8:	2b47      	cmp	r3, #71	@ 0x47
 80093ca:	4680      	mov	r8, r0
 80093cc:	d129      	bne.n	8009422 <_printf_float+0x172>
 80093ce:	1cc8      	adds	r0, r1, #3
 80093d0:	db02      	blt.n	80093d8 <_printf_float+0x128>
 80093d2:	6863      	ldr	r3, [r4, #4]
 80093d4:	4299      	cmp	r1, r3
 80093d6:	dd41      	ble.n	800945c <_printf_float+0x1ac>
 80093d8:	f1aa 0a02 	sub.w	sl, sl, #2
 80093dc:	fa5f fa8a 	uxtb.w	sl, sl
 80093e0:	3901      	subs	r1, #1
 80093e2:	4652      	mov	r2, sl
 80093e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80093e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80093ea:	f7ff ff26 	bl	800923a <__exponent>
 80093ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80093f0:	1813      	adds	r3, r2, r0
 80093f2:	2a01      	cmp	r2, #1
 80093f4:	4681      	mov	r9, r0
 80093f6:	6123      	str	r3, [r4, #16]
 80093f8:	dc02      	bgt.n	8009400 <_printf_float+0x150>
 80093fa:	6822      	ldr	r2, [r4, #0]
 80093fc:	07d2      	lsls	r2, r2, #31
 80093fe:	d501      	bpl.n	8009404 <_printf_float+0x154>
 8009400:	3301      	adds	r3, #1
 8009402:	6123      	str	r3, [r4, #16]
 8009404:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009408:	2b00      	cmp	r3, #0
 800940a:	d0a2      	beq.n	8009352 <_printf_float+0xa2>
 800940c:	232d      	movs	r3, #45	@ 0x2d
 800940e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009412:	e79e      	b.n	8009352 <_printf_float+0xa2>
 8009414:	9a06      	ldr	r2, [sp, #24]
 8009416:	2a47      	cmp	r2, #71	@ 0x47
 8009418:	d1c2      	bne.n	80093a0 <_printf_float+0xf0>
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1c0      	bne.n	80093a0 <_printf_float+0xf0>
 800941e:	2301      	movs	r3, #1
 8009420:	e7bd      	b.n	800939e <_printf_float+0xee>
 8009422:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009426:	d9db      	bls.n	80093e0 <_printf_float+0x130>
 8009428:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800942c:	d118      	bne.n	8009460 <_printf_float+0x1b0>
 800942e:	2900      	cmp	r1, #0
 8009430:	6863      	ldr	r3, [r4, #4]
 8009432:	dd0b      	ble.n	800944c <_printf_float+0x19c>
 8009434:	6121      	str	r1, [r4, #16]
 8009436:	b913      	cbnz	r3, 800943e <_printf_float+0x18e>
 8009438:	6822      	ldr	r2, [r4, #0]
 800943a:	07d0      	lsls	r0, r2, #31
 800943c:	d502      	bpl.n	8009444 <_printf_float+0x194>
 800943e:	3301      	adds	r3, #1
 8009440:	440b      	add	r3, r1
 8009442:	6123      	str	r3, [r4, #16]
 8009444:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009446:	f04f 0900 	mov.w	r9, #0
 800944a:	e7db      	b.n	8009404 <_printf_float+0x154>
 800944c:	b913      	cbnz	r3, 8009454 <_printf_float+0x1a4>
 800944e:	6822      	ldr	r2, [r4, #0]
 8009450:	07d2      	lsls	r2, r2, #31
 8009452:	d501      	bpl.n	8009458 <_printf_float+0x1a8>
 8009454:	3302      	adds	r3, #2
 8009456:	e7f4      	b.n	8009442 <_printf_float+0x192>
 8009458:	2301      	movs	r3, #1
 800945a:	e7f2      	b.n	8009442 <_printf_float+0x192>
 800945c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009460:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009462:	4299      	cmp	r1, r3
 8009464:	db05      	blt.n	8009472 <_printf_float+0x1c2>
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	6121      	str	r1, [r4, #16]
 800946a:	07d8      	lsls	r0, r3, #31
 800946c:	d5ea      	bpl.n	8009444 <_printf_float+0x194>
 800946e:	1c4b      	adds	r3, r1, #1
 8009470:	e7e7      	b.n	8009442 <_printf_float+0x192>
 8009472:	2900      	cmp	r1, #0
 8009474:	bfd4      	ite	le
 8009476:	f1c1 0202 	rsble	r2, r1, #2
 800947a:	2201      	movgt	r2, #1
 800947c:	4413      	add	r3, r2
 800947e:	e7e0      	b.n	8009442 <_printf_float+0x192>
 8009480:	6823      	ldr	r3, [r4, #0]
 8009482:	055a      	lsls	r2, r3, #21
 8009484:	d407      	bmi.n	8009496 <_printf_float+0x1e6>
 8009486:	6923      	ldr	r3, [r4, #16]
 8009488:	4642      	mov	r2, r8
 800948a:	4631      	mov	r1, r6
 800948c:	4628      	mov	r0, r5
 800948e:	47b8      	blx	r7
 8009490:	3001      	adds	r0, #1
 8009492:	d12b      	bne.n	80094ec <_printf_float+0x23c>
 8009494:	e767      	b.n	8009366 <_printf_float+0xb6>
 8009496:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800949a:	f240 80dd 	bls.w	8009658 <_printf_float+0x3a8>
 800949e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80094a2:	2200      	movs	r2, #0
 80094a4:	2300      	movs	r3, #0
 80094a6:	f7f7 fb37 	bl	8000b18 <__aeabi_dcmpeq>
 80094aa:	2800      	cmp	r0, #0
 80094ac:	d033      	beq.n	8009516 <_printf_float+0x266>
 80094ae:	4a37      	ldr	r2, [pc, #220]	@ (800958c <_printf_float+0x2dc>)
 80094b0:	2301      	movs	r3, #1
 80094b2:	4631      	mov	r1, r6
 80094b4:	4628      	mov	r0, r5
 80094b6:	47b8      	blx	r7
 80094b8:	3001      	adds	r0, #1
 80094ba:	f43f af54 	beq.w	8009366 <_printf_float+0xb6>
 80094be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80094c2:	4543      	cmp	r3, r8
 80094c4:	db02      	blt.n	80094cc <_printf_float+0x21c>
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	07d8      	lsls	r0, r3, #31
 80094ca:	d50f      	bpl.n	80094ec <_printf_float+0x23c>
 80094cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094d0:	4631      	mov	r1, r6
 80094d2:	4628      	mov	r0, r5
 80094d4:	47b8      	blx	r7
 80094d6:	3001      	adds	r0, #1
 80094d8:	f43f af45 	beq.w	8009366 <_printf_float+0xb6>
 80094dc:	f04f 0900 	mov.w	r9, #0
 80094e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80094e4:	f104 0a1a 	add.w	sl, r4, #26
 80094e8:	45c8      	cmp	r8, r9
 80094ea:	dc09      	bgt.n	8009500 <_printf_float+0x250>
 80094ec:	6823      	ldr	r3, [r4, #0]
 80094ee:	079b      	lsls	r3, r3, #30
 80094f0:	f100 8103 	bmi.w	80096fa <_printf_float+0x44a>
 80094f4:	68e0      	ldr	r0, [r4, #12]
 80094f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094f8:	4298      	cmp	r0, r3
 80094fa:	bfb8      	it	lt
 80094fc:	4618      	movlt	r0, r3
 80094fe:	e734      	b.n	800936a <_printf_float+0xba>
 8009500:	2301      	movs	r3, #1
 8009502:	4652      	mov	r2, sl
 8009504:	4631      	mov	r1, r6
 8009506:	4628      	mov	r0, r5
 8009508:	47b8      	blx	r7
 800950a:	3001      	adds	r0, #1
 800950c:	f43f af2b 	beq.w	8009366 <_printf_float+0xb6>
 8009510:	f109 0901 	add.w	r9, r9, #1
 8009514:	e7e8      	b.n	80094e8 <_printf_float+0x238>
 8009516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009518:	2b00      	cmp	r3, #0
 800951a:	dc39      	bgt.n	8009590 <_printf_float+0x2e0>
 800951c:	4a1b      	ldr	r2, [pc, #108]	@ (800958c <_printf_float+0x2dc>)
 800951e:	2301      	movs	r3, #1
 8009520:	4631      	mov	r1, r6
 8009522:	4628      	mov	r0, r5
 8009524:	47b8      	blx	r7
 8009526:	3001      	adds	r0, #1
 8009528:	f43f af1d 	beq.w	8009366 <_printf_float+0xb6>
 800952c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009530:	ea59 0303 	orrs.w	r3, r9, r3
 8009534:	d102      	bne.n	800953c <_printf_float+0x28c>
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	07d9      	lsls	r1, r3, #31
 800953a:	d5d7      	bpl.n	80094ec <_printf_float+0x23c>
 800953c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009540:	4631      	mov	r1, r6
 8009542:	4628      	mov	r0, r5
 8009544:	47b8      	blx	r7
 8009546:	3001      	adds	r0, #1
 8009548:	f43f af0d 	beq.w	8009366 <_printf_float+0xb6>
 800954c:	f04f 0a00 	mov.w	sl, #0
 8009550:	f104 0b1a 	add.w	fp, r4, #26
 8009554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009556:	425b      	negs	r3, r3
 8009558:	4553      	cmp	r3, sl
 800955a:	dc01      	bgt.n	8009560 <_printf_float+0x2b0>
 800955c:	464b      	mov	r3, r9
 800955e:	e793      	b.n	8009488 <_printf_float+0x1d8>
 8009560:	2301      	movs	r3, #1
 8009562:	465a      	mov	r2, fp
 8009564:	4631      	mov	r1, r6
 8009566:	4628      	mov	r0, r5
 8009568:	47b8      	blx	r7
 800956a:	3001      	adds	r0, #1
 800956c:	f43f aefb 	beq.w	8009366 <_printf_float+0xb6>
 8009570:	f10a 0a01 	add.w	sl, sl, #1
 8009574:	e7ee      	b.n	8009554 <_printf_float+0x2a4>
 8009576:	bf00      	nop
 8009578:	7fefffff 	.word	0x7fefffff
 800957c:	0800d128 	.word	0x0800d128
 8009580:	0800d12c 	.word	0x0800d12c
 8009584:	0800d130 	.word	0x0800d130
 8009588:	0800d134 	.word	0x0800d134
 800958c:	0800d138 	.word	0x0800d138
 8009590:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009592:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009596:	4553      	cmp	r3, sl
 8009598:	bfa8      	it	ge
 800959a:	4653      	movge	r3, sl
 800959c:	2b00      	cmp	r3, #0
 800959e:	4699      	mov	r9, r3
 80095a0:	dc36      	bgt.n	8009610 <_printf_float+0x360>
 80095a2:	f04f 0b00 	mov.w	fp, #0
 80095a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095aa:	f104 021a 	add.w	r2, r4, #26
 80095ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80095b0:	9306      	str	r3, [sp, #24]
 80095b2:	eba3 0309 	sub.w	r3, r3, r9
 80095b6:	455b      	cmp	r3, fp
 80095b8:	dc31      	bgt.n	800961e <_printf_float+0x36e>
 80095ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095bc:	459a      	cmp	sl, r3
 80095be:	dc3a      	bgt.n	8009636 <_printf_float+0x386>
 80095c0:	6823      	ldr	r3, [r4, #0]
 80095c2:	07da      	lsls	r2, r3, #31
 80095c4:	d437      	bmi.n	8009636 <_printf_float+0x386>
 80095c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095c8:	ebaa 0903 	sub.w	r9, sl, r3
 80095cc:	9b06      	ldr	r3, [sp, #24]
 80095ce:	ebaa 0303 	sub.w	r3, sl, r3
 80095d2:	4599      	cmp	r9, r3
 80095d4:	bfa8      	it	ge
 80095d6:	4699      	movge	r9, r3
 80095d8:	f1b9 0f00 	cmp.w	r9, #0
 80095dc:	dc33      	bgt.n	8009646 <_printf_float+0x396>
 80095de:	f04f 0800 	mov.w	r8, #0
 80095e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095e6:	f104 0b1a 	add.w	fp, r4, #26
 80095ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ec:	ebaa 0303 	sub.w	r3, sl, r3
 80095f0:	eba3 0309 	sub.w	r3, r3, r9
 80095f4:	4543      	cmp	r3, r8
 80095f6:	f77f af79 	ble.w	80094ec <_printf_float+0x23c>
 80095fa:	2301      	movs	r3, #1
 80095fc:	465a      	mov	r2, fp
 80095fe:	4631      	mov	r1, r6
 8009600:	4628      	mov	r0, r5
 8009602:	47b8      	blx	r7
 8009604:	3001      	adds	r0, #1
 8009606:	f43f aeae 	beq.w	8009366 <_printf_float+0xb6>
 800960a:	f108 0801 	add.w	r8, r8, #1
 800960e:	e7ec      	b.n	80095ea <_printf_float+0x33a>
 8009610:	4642      	mov	r2, r8
 8009612:	4631      	mov	r1, r6
 8009614:	4628      	mov	r0, r5
 8009616:	47b8      	blx	r7
 8009618:	3001      	adds	r0, #1
 800961a:	d1c2      	bne.n	80095a2 <_printf_float+0x2f2>
 800961c:	e6a3      	b.n	8009366 <_printf_float+0xb6>
 800961e:	2301      	movs	r3, #1
 8009620:	4631      	mov	r1, r6
 8009622:	4628      	mov	r0, r5
 8009624:	9206      	str	r2, [sp, #24]
 8009626:	47b8      	blx	r7
 8009628:	3001      	adds	r0, #1
 800962a:	f43f ae9c 	beq.w	8009366 <_printf_float+0xb6>
 800962e:	9a06      	ldr	r2, [sp, #24]
 8009630:	f10b 0b01 	add.w	fp, fp, #1
 8009634:	e7bb      	b.n	80095ae <_printf_float+0x2fe>
 8009636:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800963a:	4631      	mov	r1, r6
 800963c:	4628      	mov	r0, r5
 800963e:	47b8      	blx	r7
 8009640:	3001      	adds	r0, #1
 8009642:	d1c0      	bne.n	80095c6 <_printf_float+0x316>
 8009644:	e68f      	b.n	8009366 <_printf_float+0xb6>
 8009646:	9a06      	ldr	r2, [sp, #24]
 8009648:	464b      	mov	r3, r9
 800964a:	4442      	add	r2, r8
 800964c:	4631      	mov	r1, r6
 800964e:	4628      	mov	r0, r5
 8009650:	47b8      	blx	r7
 8009652:	3001      	adds	r0, #1
 8009654:	d1c3      	bne.n	80095de <_printf_float+0x32e>
 8009656:	e686      	b.n	8009366 <_printf_float+0xb6>
 8009658:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800965c:	f1ba 0f01 	cmp.w	sl, #1
 8009660:	dc01      	bgt.n	8009666 <_printf_float+0x3b6>
 8009662:	07db      	lsls	r3, r3, #31
 8009664:	d536      	bpl.n	80096d4 <_printf_float+0x424>
 8009666:	2301      	movs	r3, #1
 8009668:	4642      	mov	r2, r8
 800966a:	4631      	mov	r1, r6
 800966c:	4628      	mov	r0, r5
 800966e:	47b8      	blx	r7
 8009670:	3001      	adds	r0, #1
 8009672:	f43f ae78 	beq.w	8009366 <_printf_float+0xb6>
 8009676:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800967a:	4631      	mov	r1, r6
 800967c:	4628      	mov	r0, r5
 800967e:	47b8      	blx	r7
 8009680:	3001      	adds	r0, #1
 8009682:	f43f ae70 	beq.w	8009366 <_printf_float+0xb6>
 8009686:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800968a:	2200      	movs	r2, #0
 800968c:	2300      	movs	r3, #0
 800968e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009692:	f7f7 fa41 	bl	8000b18 <__aeabi_dcmpeq>
 8009696:	b9c0      	cbnz	r0, 80096ca <_printf_float+0x41a>
 8009698:	4653      	mov	r3, sl
 800969a:	f108 0201 	add.w	r2, r8, #1
 800969e:	4631      	mov	r1, r6
 80096a0:	4628      	mov	r0, r5
 80096a2:	47b8      	blx	r7
 80096a4:	3001      	adds	r0, #1
 80096a6:	d10c      	bne.n	80096c2 <_printf_float+0x412>
 80096a8:	e65d      	b.n	8009366 <_printf_float+0xb6>
 80096aa:	2301      	movs	r3, #1
 80096ac:	465a      	mov	r2, fp
 80096ae:	4631      	mov	r1, r6
 80096b0:	4628      	mov	r0, r5
 80096b2:	47b8      	blx	r7
 80096b4:	3001      	adds	r0, #1
 80096b6:	f43f ae56 	beq.w	8009366 <_printf_float+0xb6>
 80096ba:	f108 0801 	add.w	r8, r8, #1
 80096be:	45d0      	cmp	r8, sl
 80096c0:	dbf3      	blt.n	80096aa <_printf_float+0x3fa>
 80096c2:	464b      	mov	r3, r9
 80096c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80096c8:	e6df      	b.n	800948a <_printf_float+0x1da>
 80096ca:	f04f 0800 	mov.w	r8, #0
 80096ce:	f104 0b1a 	add.w	fp, r4, #26
 80096d2:	e7f4      	b.n	80096be <_printf_float+0x40e>
 80096d4:	2301      	movs	r3, #1
 80096d6:	4642      	mov	r2, r8
 80096d8:	e7e1      	b.n	800969e <_printf_float+0x3ee>
 80096da:	2301      	movs	r3, #1
 80096dc:	464a      	mov	r2, r9
 80096de:	4631      	mov	r1, r6
 80096e0:	4628      	mov	r0, r5
 80096e2:	47b8      	blx	r7
 80096e4:	3001      	adds	r0, #1
 80096e6:	f43f ae3e 	beq.w	8009366 <_printf_float+0xb6>
 80096ea:	f108 0801 	add.w	r8, r8, #1
 80096ee:	68e3      	ldr	r3, [r4, #12]
 80096f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80096f2:	1a5b      	subs	r3, r3, r1
 80096f4:	4543      	cmp	r3, r8
 80096f6:	dcf0      	bgt.n	80096da <_printf_float+0x42a>
 80096f8:	e6fc      	b.n	80094f4 <_printf_float+0x244>
 80096fa:	f04f 0800 	mov.w	r8, #0
 80096fe:	f104 0919 	add.w	r9, r4, #25
 8009702:	e7f4      	b.n	80096ee <_printf_float+0x43e>

08009704 <_printf_common>:
 8009704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009708:	4616      	mov	r6, r2
 800970a:	4698      	mov	r8, r3
 800970c:	688a      	ldr	r2, [r1, #8]
 800970e:	690b      	ldr	r3, [r1, #16]
 8009710:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009714:	4293      	cmp	r3, r2
 8009716:	bfb8      	it	lt
 8009718:	4613      	movlt	r3, r2
 800971a:	6033      	str	r3, [r6, #0]
 800971c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009720:	4607      	mov	r7, r0
 8009722:	460c      	mov	r4, r1
 8009724:	b10a      	cbz	r2, 800972a <_printf_common+0x26>
 8009726:	3301      	adds	r3, #1
 8009728:	6033      	str	r3, [r6, #0]
 800972a:	6823      	ldr	r3, [r4, #0]
 800972c:	0699      	lsls	r1, r3, #26
 800972e:	bf42      	ittt	mi
 8009730:	6833      	ldrmi	r3, [r6, #0]
 8009732:	3302      	addmi	r3, #2
 8009734:	6033      	strmi	r3, [r6, #0]
 8009736:	6825      	ldr	r5, [r4, #0]
 8009738:	f015 0506 	ands.w	r5, r5, #6
 800973c:	d106      	bne.n	800974c <_printf_common+0x48>
 800973e:	f104 0a19 	add.w	sl, r4, #25
 8009742:	68e3      	ldr	r3, [r4, #12]
 8009744:	6832      	ldr	r2, [r6, #0]
 8009746:	1a9b      	subs	r3, r3, r2
 8009748:	42ab      	cmp	r3, r5
 800974a:	dc26      	bgt.n	800979a <_printf_common+0x96>
 800974c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009750:	6822      	ldr	r2, [r4, #0]
 8009752:	3b00      	subs	r3, #0
 8009754:	bf18      	it	ne
 8009756:	2301      	movne	r3, #1
 8009758:	0692      	lsls	r2, r2, #26
 800975a:	d42b      	bmi.n	80097b4 <_printf_common+0xb0>
 800975c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009760:	4641      	mov	r1, r8
 8009762:	4638      	mov	r0, r7
 8009764:	47c8      	blx	r9
 8009766:	3001      	adds	r0, #1
 8009768:	d01e      	beq.n	80097a8 <_printf_common+0xa4>
 800976a:	6823      	ldr	r3, [r4, #0]
 800976c:	6922      	ldr	r2, [r4, #16]
 800976e:	f003 0306 	and.w	r3, r3, #6
 8009772:	2b04      	cmp	r3, #4
 8009774:	bf02      	ittt	eq
 8009776:	68e5      	ldreq	r5, [r4, #12]
 8009778:	6833      	ldreq	r3, [r6, #0]
 800977a:	1aed      	subeq	r5, r5, r3
 800977c:	68a3      	ldr	r3, [r4, #8]
 800977e:	bf0c      	ite	eq
 8009780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009784:	2500      	movne	r5, #0
 8009786:	4293      	cmp	r3, r2
 8009788:	bfc4      	itt	gt
 800978a:	1a9b      	subgt	r3, r3, r2
 800978c:	18ed      	addgt	r5, r5, r3
 800978e:	2600      	movs	r6, #0
 8009790:	341a      	adds	r4, #26
 8009792:	42b5      	cmp	r5, r6
 8009794:	d11a      	bne.n	80097cc <_printf_common+0xc8>
 8009796:	2000      	movs	r0, #0
 8009798:	e008      	b.n	80097ac <_printf_common+0xa8>
 800979a:	2301      	movs	r3, #1
 800979c:	4652      	mov	r2, sl
 800979e:	4641      	mov	r1, r8
 80097a0:	4638      	mov	r0, r7
 80097a2:	47c8      	blx	r9
 80097a4:	3001      	adds	r0, #1
 80097a6:	d103      	bne.n	80097b0 <_printf_common+0xac>
 80097a8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b0:	3501      	adds	r5, #1
 80097b2:	e7c6      	b.n	8009742 <_printf_common+0x3e>
 80097b4:	18e1      	adds	r1, r4, r3
 80097b6:	1c5a      	adds	r2, r3, #1
 80097b8:	2030      	movs	r0, #48	@ 0x30
 80097ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80097be:	4422      	add	r2, r4
 80097c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80097c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80097c8:	3302      	adds	r3, #2
 80097ca:	e7c7      	b.n	800975c <_printf_common+0x58>
 80097cc:	2301      	movs	r3, #1
 80097ce:	4622      	mov	r2, r4
 80097d0:	4641      	mov	r1, r8
 80097d2:	4638      	mov	r0, r7
 80097d4:	47c8      	blx	r9
 80097d6:	3001      	adds	r0, #1
 80097d8:	d0e6      	beq.n	80097a8 <_printf_common+0xa4>
 80097da:	3601      	adds	r6, #1
 80097dc:	e7d9      	b.n	8009792 <_printf_common+0x8e>
	...

080097e0 <_printf_i>:
 80097e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097e4:	7e0f      	ldrb	r7, [r1, #24]
 80097e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80097e8:	2f78      	cmp	r7, #120	@ 0x78
 80097ea:	4691      	mov	r9, r2
 80097ec:	4680      	mov	r8, r0
 80097ee:	460c      	mov	r4, r1
 80097f0:	469a      	mov	sl, r3
 80097f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80097f6:	d807      	bhi.n	8009808 <_printf_i+0x28>
 80097f8:	2f62      	cmp	r7, #98	@ 0x62
 80097fa:	d80a      	bhi.n	8009812 <_printf_i+0x32>
 80097fc:	2f00      	cmp	r7, #0
 80097fe:	f000 80d2 	beq.w	80099a6 <_printf_i+0x1c6>
 8009802:	2f58      	cmp	r7, #88	@ 0x58
 8009804:	f000 80b9 	beq.w	800997a <_printf_i+0x19a>
 8009808:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800980c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009810:	e03a      	b.n	8009888 <_printf_i+0xa8>
 8009812:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009816:	2b15      	cmp	r3, #21
 8009818:	d8f6      	bhi.n	8009808 <_printf_i+0x28>
 800981a:	a101      	add	r1, pc, #4	@ (adr r1, 8009820 <_printf_i+0x40>)
 800981c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009820:	08009879 	.word	0x08009879
 8009824:	0800988d 	.word	0x0800988d
 8009828:	08009809 	.word	0x08009809
 800982c:	08009809 	.word	0x08009809
 8009830:	08009809 	.word	0x08009809
 8009834:	08009809 	.word	0x08009809
 8009838:	0800988d 	.word	0x0800988d
 800983c:	08009809 	.word	0x08009809
 8009840:	08009809 	.word	0x08009809
 8009844:	08009809 	.word	0x08009809
 8009848:	08009809 	.word	0x08009809
 800984c:	0800998d 	.word	0x0800998d
 8009850:	080098b7 	.word	0x080098b7
 8009854:	08009947 	.word	0x08009947
 8009858:	08009809 	.word	0x08009809
 800985c:	08009809 	.word	0x08009809
 8009860:	080099af 	.word	0x080099af
 8009864:	08009809 	.word	0x08009809
 8009868:	080098b7 	.word	0x080098b7
 800986c:	08009809 	.word	0x08009809
 8009870:	08009809 	.word	0x08009809
 8009874:	0800994f 	.word	0x0800994f
 8009878:	6833      	ldr	r3, [r6, #0]
 800987a:	1d1a      	adds	r2, r3, #4
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	6032      	str	r2, [r6, #0]
 8009880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009884:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009888:	2301      	movs	r3, #1
 800988a:	e09d      	b.n	80099c8 <_printf_i+0x1e8>
 800988c:	6833      	ldr	r3, [r6, #0]
 800988e:	6820      	ldr	r0, [r4, #0]
 8009890:	1d19      	adds	r1, r3, #4
 8009892:	6031      	str	r1, [r6, #0]
 8009894:	0606      	lsls	r6, r0, #24
 8009896:	d501      	bpl.n	800989c <_printf_i+0xbc>
 8009898:	681d      	ldr	r5, [r3, #0]
 800989a:	e003      	b.n	80098a4 <_printf_i+0xc4>
 800989c:	0645      	lsls	r5, r0, #25
 800989e:	d5fb      	bpl.n	8009898 <_printf_i+0xb8>
 80098a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80098a4:	2d00      	cmp	r5, #0
 80098a6:	da03      	bge.n	80098b0 <_printf_i+0xd0>
 80098a8:	232d      	movs	r3, #45	@ 0x2d
 80098aa:	426d      	negs	r5, r5
 80098ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098b0:	4859      	ldr	r0, [pc, #356]	@ (8009a18 <_printf_i+0x238>)
 80098b2:	230a      	movs	r3, #10
 80098b4:	e011      	b.n	80098da <_printf_i+0xfa>
 80098b6:	6821      	ldr	r1, [r4, #0]
 80098b8:	6833      	ldr	r3, [r6, #0]
 80098ba:	0608      	lsls	r0, r1, #24
 80098bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80098c0:	d402      	bmi.n	80098c8 <_printf_i+0xe8>
 80098c2:	0649      	lsls	r1, r1, #25
 80098c4:	bf48      	it	mi
 80098c6:	b2ad      	uxthmi	r5, r5
 80098c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80098ca:	4853      	ldr	r0, [pc, #332]	@ (8009a18 <_printf_i+0x238>)
 80098cc:	6033      	str	r3, [r6, #0]
 80098ce:	bf14      	ite	ne
 80098d0:	230a      	movne	r3, #10
 80098d2:	2308      	moveq	r3, #8
 80098d4:	2100      	movs	r1, #0
 80098d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80098da:	6866      	ldr	r6, [r4, #4]
 80098dc:	60a6      	str	r6, [r4, #8]
 80098de:	2e00      	cmp	r6, #0
 80098e0:	bfa2      	ittt	ge
 80098e2:	6821      	ldrge	r1, [r4, #0]
 80098e4:	f021 0104 	bicge.w	r1, r1, #4
 80098e8:	6021      	strge	r1, [r4, #0]
 80098ea:	b90d      	cbnz	r5, 80098f0 <_printf_i+0x110>
 80098ec:	2e00      	cmp	r6, #0
 80098ee:	d04b      	beq.n	8009988 <_printf_i+0x1a8>
 80098f0:	4616      	mov	r6, r2
 80098f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80098f6:	fb03 5711 	mls	r7, r3, r1, r5
 80098fa:	5dc7      	ldrb	r7, [r0, r7]
 80098fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009900:	462f      	mov	r7, r5
 8009902:	42bb      	cmp	r3, r7
 8009904:	460d      	mov	r5, r1
 8009906:	d9f4      	bls.n	80098f2 <_printf_i+0x112>
 8009908:	2b08      	cmp	r3, #8
 800990a:	d10b      	bne.n	8009924 <_printf_i+0x144>
 800990c:	6823      	ldr	r3, [r4, #0]
 800990e:	07df      	lsls	r7, r3, #31
 8009910:	d508      	bpl.n	8009924 <_printf_i+0x144>
 8009912:	6923      	ldr	r3, [r4, #16]
 8009914:	6861      	ldr	r1, [r4, #4]
 8009916:	4299      	cmp	r1, r3
 8009918:	bfde      	ittt	le
 800991a:	2330      	movle	r3, #48	@ 0x30
 800991c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009920:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009924:	1b92      	subs	r2, r2, r6
 8009926:	6122      	str	r2, [r4, #16]
 8009928:	f8cd a000 	str.w	sl, [sp]
 800992c:	464b      	mov	r3, r9
 800992e:	aa03      	add	r2, sp, #12
 8009930:	4621      	mov	r1, r4
 8009932:	4640      	mov	r0, r8
 8009934:	f7ff fee6 	bl	8009704 <_printf_common>
 8009938:	3001      	adds	r0, #1
 800993a:	d14a      	bne.n	80099d2 <_printf_i+0x1f2>
 800993c:	f04f 30ff 	mov.w	r0, #4294967295
 8009940:	b004      	add	sp, #16
 8009942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009946:	6823      	ldr	r3, [r4, #0]
 8009948:	f043 0320 	orr.w	r3, r3, #32
 800994c:	6023      	str	r3, [r4, #0]
 800994e:	4833      	ldr	r0, [pc, #204]	@ (8009a1c <_printf_i+0x23c>)
 8009950:	2778      	movs	r7, #120	@ 0x78
 8009952:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009956:	6823      	ldr	r3, [r4, #0]
 8009958:	6831      	ldr	r1, [r6, #0]
 800995a:	061f      	lsls	r7, r3, #24
 800995c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009960:	d402      	bmi.n	8009968 <_printf_i+0x188>
 8009962:	065f      	lsls	r7, r3, #25
 8009964:	bf48      	it	mi
 8009966:	b2ad      	uxthmi	r5, r5
 8009968:	6031      	str	r1, [r6, #0]
 800996a:	07d9      	lsls	r1, r3, #31
 800996c:	bf44      	itt	mi
 800996e:	f043 0320 	orrmi.w	r3, r3, #32
 8009972:	6023      	strmi	r3, [r4, #0]
 8009974:	b11d      	cbz	r5, 800997e <_printf_i+0x19e>
 8009976:	2310      	movs	r3, #16
 8009978:	e7ac      	b.n	80098d4 <_printf_i+0xf4>
 800997a:	4827      	ldr	r0, [pc, #156]	@ (8009a18 <_printf_i+0x238>)
 800997c:	e7e9      	b.n	8009952 <_printf_i+0x172>
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	f023 0320 	bic.w	r3, r3, #32
 8009984:	6023      	str	r3, [r4, #0]
 8009986:	e7f6      	b.n	8009976 <_printf_i+0x196>
 8009988:	4616      	mov	r6, r2
 800998a:	e7bd      	b.n	8009908 <_printf_i+0x128>
 800998c:	6833      	ldr	r3, [r6, #0]
 800998e:	6825      	ldr	r5, [r4, #0]
 8009990:	6961      	ldr	r1, [r4, #20]
 8009992:	1d18      	adds	r0, r3, #4
 8009994:	6030      	str	r0, [r6, #0]
 8009996:	062e      	lsls	r6, r5, #24
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	d501      	bpl.n	80099a0 <_printf_i+0x1c0>
 800999c:	6019      	str	r1, [r3, #0]
 800999e:	e002      	b.n	80099a6 <_printf_i+0x1c6>
 80099a0:	0668      	lsls	r0, r5, #25
 80099a2:	d5fb      	bpl.n	800999c <_printf_i+0x1bc>
 80099a4:	8019      	strh	r1, [r3, #0]
 80099a6:	2300      	movs	r3, #0
 80099a8:	6123      	str	r3, [r4, #16]
 80099aa:	4616      	mov	r6, r2
 80099ac:	e7bc      	b.n	8009928 <_printf_i+0x148>
 80099ae:	6833      	ldr	r3, [r6, #0]
 80099b0:	1d1a      	adds	r2, r3, #4
 80099b2:	6032      	str	r2, [r6, #0]
 80099b4:	681e      	ldr	r6, [r3, #0]
 80099b6:	6862      	ldr	r2, [r4, #4]
 80099b8:	2100      	movs	r1, #0
 80099ba:	4630      	mov	r0, r6
 80099bc:	f7f6 fc30 	bl	8000220 <memchr>
 80099c0:	b108      	cbz	r0, 80099c6 <_printf_i+0x1e6>
 80099c2:	1b80      	subs	r0, r0, r6
 80099c4:	6060      	str	r0, [r4, #4]
 80099c6:	6863      	ldr	r3, [r4, #4]
 80099c8:	6123      	str	r3, [r4, #16]
 80099ca:	2300      	movs	r3, #0
 80099cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099d0:	e7aa      	b.n	8009928 <_printf_i+0x148>
 80099d2:	6923      	ldr	r3, [r4, #16]
 80099d4:	4632      	mov	r2, r6
 80099d6:	4649      	mov	r1, r9
 80099d8:	4640      	mov	r0, r8
 80099da:	47d0      	blx	sl
 80099dc:	3001      	adds	r0, #1
 80099de:	d0ad      	beq.n	800993c <_printf_i+0x15c>
 80099e0:	6823      	ldr	r3, [r4, #0]
 80099e2:	079b      	lsls	r3, r3, #30
 80099e4:	d413      	bmi.n	8009a0e <_printf_i+0x22e>
 80099e6:	68e0      	ldr	r0, [r4, #12]
 80099e8:	9b03      	ldr	r3, [sp, #12]
 80099ea:	4298      	cmp	r0, r3
 80099ec:	bfb8      	it	lt
 80099ee:	4618      	movlt	r0, r3
 80099f0:	e7a6      	b.n	8009940 <_printf_i+0x160>
 80099f2:	2301      	movs	r3, #1
 80099f4:	4632      	mov	r2, r6
 80099f6:	4649      	mov	r1, r9
 80099f8:	4640      	mov	r0, r8
 80099fa:	47d0      	blx	sl
 80099fc:	3001      	adds	r0, #1
 80099fe:	d09d      	beq.n	800993c <_printf_i+0x15c>
 8009a00:	3501      	adds	r5, #1
 8009a02:	68e3      	ldr	r3, [r4, #12]
 8009a04:	9903      	ldr	r1, [sp, #12]
 8009a06:	1a5b      	subs	r3, r3, r1
 8009a08:	42ab      	cmp	r3, r5
 8009a0a:	dcf2      	bgt.n	80099f2 <_printf_i+0x212>
 8009a0c:	e7eb      	b.n	80099e6 <_printf_i+0x206>
 8009a0e:	2500      	movs	r5, #0
 8009a10:	f104 0619 	add.w	r6, r4, #25
 8009a14:	e7f5      	b.n	8009a02 <_printf_i+0x222>
 8009a16:	bf00      	nop
 8009a18:	0800d13a 	.word	0x0800d13a
 8009a1c:	0800d14b 	.word	0x0800d14b

08009a20 <std>:
 8009a20:	2300      	movs	r3, #0
 8009a22:	b510      	push	{r4, lr}
 8009a24:	4604      	mov	r4, r0
 8009a26:	e9c0 3300 	strd	r3, r3, [r0]
 8009a2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a2e:	6083      	str	r3, [r0, #8]
 8009a30:	8181      	strh	r1, [r0, #12]
 8009a32:	6643      	str	r3, [r0, #100]	@ 0x64
 8009a34:	81c2      	strh	r2, [r0, #14]
 8009a36:	6183      	str	r3, [r0, #24]
 8009a38:	4619      	mov	r1, r3
 8009a3a:	2208      	movs	r2, #8
 8009a3c:	305c      	adds	r0, #92	@ 0x5c
 8009a3e:	f000 f914 	bl	8009c6a <memset>
 8009a42:	4b0d      	ldr	r3, [pc, #52]	@ (8009a78 <std+0x58>)
 8009a44:	6263      	str	r3, [r4, #36]	@ 0x24
 8009a46:	4b0d      	ldr	r3, [pc, #52]	@ (8009a7c <std+0x5c>)
 8009a48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a80 <std+0x60>)
 8009a4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a84 <std+0x64>)
 8009a50:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a52:	4b0d      	ldr	r3, [pc, #52]	@ (8009a88 <std+0x68>)
 8009a54:	6224      	str	r4, [r4, #32]
 8009a56:	429c      	cmp	r4, r3
 8009a58:	d006      	beq.n	8009a68 <std+0x48>
 8009a5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a5e:	4294      	cmp	r4, r2
 8009a60:	d002      	beq.n	8009a68 <std+0x48>
 8009a62:	33d0      	adds	r3, #208	@ 0xd0
 8009a64:	429c      	cmp	r4, r3
 8009a66:	d105      	bne.n	8009a74 <std+0x54>
 8009a68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a70:	f000 b978 	b.w	8009d64 <__retarget_lock_init_recursive>
 8009a74:	bd10      	pop	{r4, pc}
 8009a76:	bf00      	nop
 8009a78:	08009be5 	.word	0x08009be5
 8009a7c:	08009c07 	.word	0x08009c07
 8009a80:	08009c3f 	.word	0x08009c3f
 8009a84:	08009c63 	.word	0x08009c63
 8009a88:	200006cc 	.word	0x200006cc

08009a8c <stdio_exit_handler>:
 8009a8c:	4a02      	ldr	r2, [pc, #8]	@ (8009a98 <stdio_exit_handler+0xc>)
 8009a8e:	4903      	ldr	r1, [pc, #12]	@ (8009a9c <stdio_exit_handler+0x10>)
 8009a90:	4803      	ldr	r0, [pc, #12]	@ (8009aa0 <stdio_exit_handler+0x14>)
 8009a92:	f000 b869 	b.w	8009b68 <_fwalk_sglue>
 8009a96:	bf00      	nop
 8009a98:	20000020 	.word	0x20000020
 8009a9c:	0800b6c5 	.word	0x0800b6c5
 8009aa0:	20000030 	.word	0x20000030

08009aa4 <cleanup_stdio>:
 8009aa4:	6841      	ldr	r1, [r0, #4]
 8009aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8009ad8 <cleanup_stdio+0x34>)
 8009aa8:	4299      	cmp	r1, r3
 8009aaa:	b510      	push	{r4, lr}
 8009aac:	4604      	mov	r4, r0
 8009aae:	d001      	beq.n	8009ab4 <cleanup_stdio+0x10>
 8009ab0:	f001 fe08 	bl	800b6c4 <_fflush_r>
 8009ab4:	68a1      	ldr	r1, [r4, #8]
 8009ab6:	4b09      	ldr	r3, [pc, #36]	@ (8009adc <cleanup_stdio+0x38>)
 8009ab8:	4299      	cmp	r1, r3
 8009aba:	d002      	beq.n	8009ac2 <cleanup_stdio+0x1e>
 8009abc:	4620      	mov	r0, r4
 8009abe:	f001 fe01 	bl	800b6c4 <_fflush_r>
 8009ac2:	68e1      	ldr	r1, [r4, #12]
 8009ac4:	4b06      	ldr	r3, [pc, #24]	@ (8009ae0 <cleanup_stdio+0x3c>)
 8009ac6:	4299      	cmp	r1, r3
 8009ac8:	d004      	beq.n	8009ad4 <cleanup_stdio+0x30>
 8009aca:	4620      	mov	r0, r4
 8009acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ad0:	f001 bdf8 	b.w	800b6c4 <_fflush_r>
 8009ad4:	bd10      	pop	{r4, pc}
 8009ad6:	bf00      	nop
 8009ad8:	200006cc 	.word	0x200006cc
 8009adc:	20000734 	.word	0x20000734
 8009ae0:	2000079c 	.word	0x2000079c

08009ae4 <global_stdio_init.part.0>:
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8009b14 <global_stdio_init.part.0+0x30>)
 8009ae8:	4c0b      	ldr	r4, [pc, #44]	@ (8009b18 <global_stdio_init.part.0+0x34>)
 8009aea:	4a0c      	ldr	r2, [pc, #48]	@ (8009b1c <global_stdio_init.part.0+0x38>)
 8009aec:	601a      	str	r2, [r3, #0]
 8009aee:	4620      	mov	r0, r4
 8009af0:	2200      	movs	r2, #0
 8009af2:	2104      	movs	r1, #4
 8009af4:	f7ff ff94 	bl	8009a20 <std>
 8009af8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009afc:	2201      	movs	r2, #1
 8009afe:	2109      	movs	r1, #9
 8009b00:	f7ff ff8e 	bl	8009a20 <std>
 8009b04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009b08:	2202      	movs	r2, #2
 8009b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b0e:	2112      	movs	r1, #18
 8009b10:	f7ff bf86 	b.w	8009a20 <std>
 8009b14:	20000804 	.word	0x20000804
 8009b18:	200006cc 	.word	0x200006cc
 8009b1c:	08009a8d 	.word	0x08009a8d

08009b20 <__sfp_lock_acquire>:
 8009b20:	4801      	ldr	r0, [pc, #4]	@ (8009b28 <__sfp_lock_acquire+0x8>)
 8009b22:	f000 b920 	b.w	8009d66 <__retarget_lock_acquire_recursive>
 8009b26:	bf00      	nop
 8009b28:	2000080d 	.word	0x2000080d

08009b2c <__sfp_lock_release>:
 8009b2c:	4801      	ldr	r0, [pc, #4]	@ (8009b34 <__sfp_lock_release+0x8>)
 8009b2e:	f000 b91b 	b.w	8009d68 <__retarget_lock_release_recursive>
 8009b32:	bf00      	nop
 8009b34:	2000080d 	.word	0x2000080d

08009b38 <__sinit>:
 8009b38:	b510      	push	{r4, lr}
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	f7ff fff0 	bl	8009b20 <__sfp_lock_acquire>
 8009b40:	6a23      	ldr	r3, [r4, #32]
 8009b42:	b11b      	cbz	r3, 8009b4c <__sinit+0x14>
 8009b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b48:	f7ff bff0 	b.w	8009b2c <__sfp_lock_release>
 8009b4c:	4b04      	ldr	r3, [pc, #16]	@ (8009b60 <__sinit+0x28>)
 8009b4e:	6223      	str	r3, [r4, #32]
 8009b50:	4b04      	ldr	r3, [pc, #16]	@ (8009b64 <__sinit+0x2c>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1f5      	bne.n	8009b44 <__sinit+0xc>
 8009b58:	f7ff ffc4 	bl	8009ae4 <global_stdio_init.part.0>
 8009b5c:	e7f2      	b.n	8009b44 <__sinit+0xc>
 8009b5e:	bf00      	nop
 8009b60:	08009aa5 	.word	0x08009aa5
 8009b64:	20000804 	.word	0x20000804

08009b68 <_fwalk_sglue>:
 8009b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b6c:	4607      	mov	r7, r0
 8009b6e:	4688      	mov	r8, r1
 8009b70:	4614      	mov	r4, r2
 8009b72:	2600      	movs	r6, #0
 8009b74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b78:	f1b9 0901 	subs.w	r9, r9, #1
 8009b7c:	d505      	bpl.n	8009b8a <_fwalk_sglue+0x22>
 8009b7e:	6824      	ldr	r4, [r4, #0]
 8009b80:	2c00      	cmp	r4, #0
 8009b82:	d1f7      	bne.n	8009b74 <_fwalk_sglue+0xc>
 8009b84:	4630      	mov	r0, r6
 8009b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b8a:	89ab      	ldrh	r3, [r5, #12]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d907      	bls.n	8009ba0 <_fwalk_sglue+0x38>
 8009b90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b94:	3301      	adds	r3, #1
 8009b96:	d003      	beq.n	8009ba0 <_fwalk_sglue+0x38>
 8009b98:	4629      	mov	r1, r5
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	47c0      	blx	r8
 8009b9e:	4306      	orrs	r6, r0
 8009ba0:	3568      	adds	r5, #104	@ 0x68
 8009ba2:	e7e9      	b.n	8009b78 <_fwalk_sglue+0x10>

08009ba4 <siprintf>:
 8009ba4:	b40e      	push	{r1, r2, r3}
 8009ba6:	b500      	push	{lr}
 8009ba8:	b09c      	sub	sp, #112	@ 0x70
 8009baa:	ab1d      	add	r3, sp, #116	@ 0x74
 8009bac:	9002      	str	r0, [sp, #8]
 8009bae:	9006      	str	r0, [sp, #24]
 8009bb0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009bb4:	4809      	ldr	r0, [pc, #36]	@ (8009bdc <siprintf+0x38>)
 8009bb6:	9107      	str	r1, [sp, #28]
 8009bb8:	9104      	str	r1, [sp, #16]
 8009bba:	4909      	ldr	r1, [pc, #36]	@ (8009be0 <siprintf+0x3c>)
 8009bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bc0:	9105      	str	r1, [sp, #20]
 8009bc2:	6800      	ldr	r0, [r0, #0]
 8009bc4:	9301      	str	r3, [sp, #4]
 8009bc6:	a902      	add	r1, sp, #8
 8009bc8:	f001 fbfc 	bl	800b3c4 <_svfiprintf_r>
 8009bcc:	9b02      	ldr	r3, [sp, #8]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	701a      	strb	r2, [r3, #0]
 8009bd2:	b01c      	add	sp, #112	@ 0x70
 8009bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bd8:	b003      	add	sp, #12
 8009bda:	4770      	bx	lr
 8009bdc:	2000002c 	.word	0x2000002c
 8009be0:	ffff0208 	.word	0xffff0208

08009be4 <__sread>:
 8009be4:	b510      	push	{r4, lr}
 8009be6:	460c      	mov	r4, r1
 8009be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bec:	f000 f86c 	bl	8009cc8 <_read_r>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	bfab      	itete	ge
 8009bf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009bf6:	89a3      	ldrhlt	r3, [r4, #12]
 8009bf8:	181b      	addge	r3, r3, r0
 8009bfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009bfe:	bfac      	ite	ge
 8009c00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009c02:	81a3      	strhlt	r3, [r4, #12]
 8009c04:	bd10      	pop	{r4, pc}

08009c06 <__swrite>:
 8009c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c0a:	461f      	mov	r7, r3
 8009c0c:	898b      	ldrh	r3, [r1, #12]
 8009c0e:	05db      	lsls	r3, r3, #23
 8009c10:	4605      	mov	r5, r0
 8009c12:	460c      	mov	r4, r1
 8009c14:	4616      	mov	r6, r2
 8009c16:	d505      	bpl.n	8009c24 <__swrite+0x1e>
 8009c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f000 f840 	bl	8009ca4 <_lseek_r>
 8009c24:	89a3      	ldrh	r3, [r4, #12]
 8009c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c2e:	81a3      	strh	r3, [r4, #12]
 8009c30:	4632      	mov	r2, r6
 8009c32:	463b      	mov	r3, r7
 8009c34:	4628      	mov	r0, r5
 8009c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c3a:	f000 b857 	b.w	8009cec <_write_r>

08009c3e <__sseek>:
 8009c3e:	b510      	push	{r4, lr}
 8009c40:	460c      	mov	r4, r1
 8009c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c46:	f000 f82d 	bl	8009ca4 <_lseek_r>
 8009c4a:	1c43      	adds	r3, r0, #1
 8009c4c:	89a3      	ldrh	r3, [r4, #12]
 8009c4e:	bf15      	itete	ne
 8009c50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009c52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009c56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009c5a:	81a3      	strheq	r3, [r4, #12]
 8009c5c:	bf18      	it	ne
 8009c5e:	81a3      	strhne	r3, [r4, #12]
 8009c60:	bd10      	pop	{r4, pc}

08009c62 <__sclose>:
 8009c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c66:	f000 b80d 	b.w	8009c84 <_close_r>

08009c6a <memset>:
 8009c6a:	4402      	add	r2, r0
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d100      	bne.n	8009c74 <memset+0xa>
 8009c72:	4770      	bx	lr
 8009c74:	f803 1b01 	strb.w	r1, [r3], #1
 8009c78:	e7f9      	b.n	8009c6e <memset+0x4>
	...

08009c7c <_localeconv_r>:
 8009c7c:	4800      	ldr	r0, [pc, #0]	@ (8009c80 <_localeconv_r+0x4>)
 8009c7e:	4770      	bx	lr
 8009c80:	2000016c 	.word	0x2000016c

08009c84 <_close_r>:
 8009c84:	b538      	push	{r3, r4, r5, lr}
 8009c86:	4d06      	ldr	r5, [pc, #24]	@ (8009ca0 <_close_r+0x1c>)
 8009c88:	2300      	movs	r3, #0
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	4608      	mov	r0, r1
 8009c8e:	602b      	str	r3, [r5, #0]
 8009c90:	f7f8 ff38 	bl	8002b04 <_close>
 8009c94:	1c43      	adds	r3, r0, #1
 8009c96:	d102      	bne.n	8009c9e <_close_r+0x1a>
 8009c98:	682b      	ldr	r3, [r5, #0]
 8009c9a:	b103      	cbz	r3, 8009c9e <_close_r+0x1a>
 8009c9c:	6023      	str	r3, [r4, #0]
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ca0:	20000808 	.word	0x20000808

08009ca4 <_lseek_r>:
 8009ca4:	b538      	push	{r3, r4, r5, lr}
 8009ca6:	4d07      	ldr	r5, [pc, #28]	@ (8009cc4 <_lseek_r+0x20>)
 8009ca8:	4604      	mov	r4, r0
 8009caa:	4608      	mov	r0, r1
 8009cac:	4611      	mov	r1, r2
 8009cae:	2200      	movs	r2, #0
 8009cb0:	602a      	str	r2, [r5, #0]
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	f7f8 ff4d 	bl	8002b52 <_lseek>
 8009cb8:	1c43      	adds	r3, r0, #1
 8009cba:	d102      	bne.n	8009cc2 <_lseek_r+0x1e>
 8009cbc:	682b      	ldr	r3, [r5, #0]
 8009cbe:	b103      	cbz	r3, 8009cc2 <_lseek_r+0x1e>
 8009cc0:	6023      	str	r3, [r4, #0]
 8009cc2:	bd38      	pop	{r3, r4, r5, pc}
 8009cc4:	20000808 	.word	0x20000808

08009cc8 <_read_r>:
 8009cc8:	b538      	push	{r3, r4, r5, lr}
 8009cca:	4d07      	ldr	r5, [pc, #28]	@ (8009ce8 <_read_r+0x20>)
 8009ccc:	4604      	mov	r4, r0
 8009cce:	4608      	mov	r0, r1
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	602a      	str	r2, [r5, #0]
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	f7f8 fedb 	bl	8002a92 <_read>
 8009cdc:	1c43      	adds	r3, r0, #1
 8009cde:	d102      	bne.n	8009ce6 <_read_r+0x1e>
 8009ce0:	682b      	ldr	r3, [r5, #0]
 8009ce2:	b103      	cbz	r3, 8009ce6 <_read_r+0x1e>
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	bd38      	pop	{r3, r4, r5, pc}
 8009ce8:	20000808 	.word	0x20000808

08009cec <_write_r>:
 8009cec:	b538      	push	{r3, r4, r5, lr}
 8009cee:	4d07      	ldr	r5, [pc, #28]	@ (8009d0c <_write_r+0x20>)
 8009cf0:	4604      	mov	r4, r0
 8009cf2:	4608      	mov	r0, r1
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	602a      	str	r2, [r5, #0]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	f7f8 fee6 	bl	8002acc <_write>
 8009d00:	1c43      	adds	r3, r0, #1
 8009d02:	d102      	bne.n	8009d0a <_write_r+0x1e>
 8009d04:	682b      	ldr	r3, [r5, #0]
 8009d06:	b103      	cbz	r3, 8009d0a <_write_r+0x1e>
 8009d08:	6023      	str	r3, [r4, #0]
 8009d0a:	bd38      	pop	{r3, r4, r5, pc}
 8009d0c:	20000808 	.word	0x20000808

08009d10 <__errno>:
 8009d10:	4b01      	ldr	r3, [pc, #4]	@ (8009d18 <__errno+0x8>)
 8009d12:	6818      	ldr	r0, [r3, #0]
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	2000002c 	.word	0x2000002c

08009d1c <__libc_init_array>:
 8009d1c:	b570      	push	{r4, r5, r6, lr}
 8009d1e:	4d0d      	ldr	r5, [pc, #52]	@ (8009d54 <__libc_init_array+0x38>)
 8009d20:	4c0d      	ldr	r4, [pc, #52]	@ (8009d58 <__libc_init_array+0x3c>)
 8009d22:	1b64      	subs	r4, r4, r5
 8009d24:	10a4      	asrs	r4, r4, #2
 8009d26:	2600      	movs	r6, #0
 8009d28:	42a6      	cmp	r6, r4
 8009d2a:	d109      	bne.n	8009d40 <__libc_init_array+0x24>
 8009d2c:	4d0b      	ldr	r5, [pc, #44]	@ (8009d5c <__libc_init_array+0x40>)
 8009d2e:	4c0c      	ldr	r4, [pc, #48]	@ (8009d60 <__libc_init_array+0x44>)
 8009d30:	f002 fda0 	bl	800c874 <_init>
 8009d34:	1b64      	subs	r4, r4, r5
 8009d36:	10a4      	asrs	r4, r4, #2
 8009d38:	2600      	movs	r6, #0
 8009d3a:	42a6      	cmp	r6, r4
 8009d3c:	d105      	bne.n	8009d4a <__libc_init_array+0x2e>
 8009d3e:	bd70      	pop	{r4, r5, r6, pc}
 8009d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d44:	4798      	blx	r3
 8009d46:	3601      	adds	r6, #1
 8009d48:	e7ee      	b.n	8009d28 <__libc_init_array+0xc>
 8009d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d4e:	4798      	blx	r3
 8009d50:	3601      	adds	r6, #1
 8009d52:	e7f2      	b.n	8009d3a <__libc_init_array+0x1e>
 8009d54:	0800d870 	.word	0x0800d870
 8009d58:	0800d870 	.word	0x0800d870
 8009d5c:	0800d870 	.word	0x0800d870
 8009d60:	0800d874 	.word	0x0800d874

08009d64 <__retarget_lock_init_recursive>:
 8009d64:	4770      	bx	lr

08009d66 <__retarget_lock_acquire_recursive>:
 8009d66:	4770      	bx	lr

08009d68 <__retarget_lock_release_recursive>:
 8009d68:	4770      	bx	lr

08009d6a <quorem>:
 8009d6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d6e:	6903      	ldr	r3, [r0, #16]
 8009d70:	690c      	ldr	r4, [r1, #16]
 8009d72:	42a3      	cmp	r3, r4
 8009d74:	4607      	mov	r7, r0
 8009d76:	db7e      	blt.n	8009e76 <quorem+0x10c>
 8009d78:	3c01      	subs	r4, #1
 8009d7a:	f101 0814 	add.w	r8, r1, #20
 8009d7e:	00a3      	lsls	r3, r4, #2
 8009d80:	f100 0514 	add.w	r5, r0, #20
 8009d84:	9300      	str	r3, [sp, #0]
 8009d86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d8a:	9301      	str	r3, [sp, #4]
 8009d8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d94:	3301      	adds	r3, #1
 8009d96:	429a      	cmp	r2, r3
 8009d98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009da0:	d32e      	bcc.n	8009e00 <quorem+0x96>
 8009da2:	f04f 0a00 	mov.w	sl, #0
 8009da6:	46c4      	mov	ip, r8
 8009da8:	46ae      	mov	lr, r5
 8009daa:	46d3      	mov	fp, sl
 8009dac:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009db0:	b298      	uxth	r0, r3
 8009db2:	fb06 a000 	mla	r0, r6, r0, sl
 8009db6:	0c02      	lsrs	r2, r0, #16
 8009db8:	0c1b      	lsrs	r3, r3, #16
 8009dba:	fb06 2303 	mla	r3, r6, r3, r2
 8009dbe:	f8de 2000 	ldr.w	r2, [lr]
 8009dc2:	b280      	uxth	r0, r0
 8009dc4:	b292      	uxth	r2, r2
 8009dc6:	1a12      	subs	r2, r2, r0
 8009dc8:	445a      	add	r2, fp
 8009dca:	f8de 0000 	ldr.w	r0, [lr]
 8009dce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009dd8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009ddc:	b292      	uxth	r2, r2
 8009dde:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009de2:	45e1      	cmp	r9, ip
 8009de4:	f84e 2b04 	str.w	r2, [lr], #4
 8009de8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009dec:	d2de      	bcs.n	8009dac <quorem+0x42>
 8009dee:	9b00      	ldr	r3, [sp, #0]
 8009df0:	58eb      	ldr	r3, [r5, r3]
 8009df2:	b92b      	cbnz	r3, 8009e00 <quorem+0x96>
 8009df4:	9b01      	ldr	r3, [sp, #4]
 8009df6:	3b04      	subs	r3, #4
 8009df8:	429d      	cmp	r5, r3
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	d32f      	bcc.n	8009e5e <quorem+0xf4>
 8009dfe:	613c      	str	r4, [r7, #16]
 8009e00:	4638      	mov	r0, r7
 8009e02:	f001 f97b 	bl	800b0fc <__mcmp>
 8009e06:	2800      	cmp	r0, #0
 8009e08:	db25      	blt.n	8009e56 <quorem+0xec>
 8009e0a:	4629      	mov	r1, r5
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e12:	f8d1 c000 	ldr.w	ip, [r1]
 8009e16:	fa1f fe82 	uxth.w	lr, r2
 8009e1a:	fa1f f38c 	uxth.w	r3, ip
 8009e1e:	eba3 030e 	sub.w	r3, r3, lr
 8009e22:	4403      	add	r3, r0
 8009e24:	0c12      	lsrs	r2, r2, #16
 8009e26:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009e2a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e34:	45c1      	cmp	r9, r8
 8009e36:	f841 3b04 	str.w	r3, [r1], #4
 8009e3a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e3e:	d2e6      	bcs.n	8009e0e <quorem+0xa4>
 8009e40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e48:	b922      	cbnz	r2, 8009e54 <quorem+0xea>
 8009e4a:	3b04      	subs	r3, #4
 8009e4c:	429d      	cmp	r5, r3
 8009e4e:	461a      	mov	r2, r3
 8009e50:	d30b      	bcc.n	8009e6a <quorem+0x100>
 8009e52:	613c      	str	r4, [r7, #16]
 8009e54:	3601      	adds	r6, #1
 8009e56:	4630      	mov	r0, r6
 8009e58:	b003      	add	sp, #12
 8009e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5e:	6812      	ldr	r2, [r2, #0]
 8009e60:	3b04      	subs	r3, #4
 8009e62:	2a00      	cmp	r2, #0
 8009e64:	d1cb      	bne.n	8009dfe <quorem+0x94>
 8009e66:	3c01      	subs	r4, #1
 8009e68:	e7c6      	b.n	8009df8 <quorem+0x8e>
 8009e6a:	6812      	ldr	r2, [r2, #0]
 8009e6c:	3b04      	subs	r3, #4
 8009e6e:	2a00      	cmp	r2, #0
 8009e70:	d1ef      	bne.n	8009e52 <quorem+0xe8>
 8009e72:	3c01      	subs	r4, #1
 8009e74:	e7ea      	b.n	8009e4c <quorem+0xe2>
 8009e76:	2000      	movs	r0, #0
 8009e78:	e7ee      	b.n	8009e58 <quorem+0xee>
 8009e7a:	0000      	movs	r0, r0
 8009e7c:	0000      	movs	r0, r0
	...

08009e80 <_dtoa_r>:
 8009e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e84:	69c7      	ldr	r7, [r0, #28]
 8009e86:	b099      	sub	sp, #100	@ 0x64
 8009e88:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009e8c:	ec55 4b10 	vmov	r4, r5, d0
 8009e90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009e92:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e94:	4683      	mov	fp, r0
 8009e96:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e9a:	b97f      	cbnz	r7, 8009ebc <_dtoa_r+0x3c>
 8009e9c:	2010      	movs	r0, #16
 8009e9e:	f000 fdfd 	bl	800aa9c <malloc>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	f8cb 001c 	str.w	r0, [fp, #28]
 8009ea8:	b920      	cbnz	r0, 8009eb4 <_dtoa_r+0x34>
 8009eaa:	4ba7      	ldr	r3, [pc, #668]	@ (800a148 <_dtoa_r+0x2c8>)
 8009eac:	21ef      	movs	r1, #239	@ 0xef
 8009eae:	48a7      	ldr	r0, [pc, #668]	@ (800a14c <_dtoa_r+0x2cc>)
 8009eb0:	f001 fc68 	bl	800b784 <__assert_func>
 8009eb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009eb8:	6007      	str	r7, [r0, #0]
 8009eba:	60c7      	str	r7, [r0, #12]
 8009ebc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ec0:	6819      	ldr	r1, [r3, #0]
 8009ec2:	b159      	cbz	r1, 8009edc <_dtoa_r+0x5c>
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	604a      	str	r2, [r1, #4]
 8009ec8:	2301      	movs	r3, #1
 8009eca:	4093      	lsls	r3, r2
 8009ecc:	608b      	str	r3, [r1, #8]
 8009ece:	4658      	mov	r0, fp
 8009ed0:	f000 feda 	bl	800ac88 <_Bfree>
 8009ed4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	601a      	str	r2, [r3, #0]
 8009edc:	1e2b      	subs	r3, r5, #0
 8009ede:	bfb9      	ittee	lt
 8009ee0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009ee4:	9303      	strlt	r3, [sp, #12]
 8009ee6:	2300      	movge	r3, #0
 8009ee8:	6033      	strge	r3, [r6, #0]
 8009eea:	9f03      	ldr	r7, [sp, #12]
 8009eec:	4b98      	ldr	r3, [pc, #608]	@ (800a150 <_dtoa_r+0x2d0>)
 8009eee:	bfbc      	itt	lt
 8009ef0:	2201      	movlt	r2, #1
 8009ef2:	6032      	strlt	r2, [r6, #0]
 8009ef4:	43bb      	bics	r3, r7
 8009ef6:	d112      	bne.n	8009f1e <_dtoa_r+0x9e>
 8009ef8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009efa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009efe:	6013      	str	r3, [r2, #0]
 8009f00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f04:	4323      	orrs	r3, r4
 8009f06:	f000 854d 	beq.w	800a9a4 <_dtoa_r+0xb24>
 8009f0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a164 <_dtoa_r+0x2e4>
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f000 854f 	beq.w	800a9b4 <_dtoa_r+0xb34>
 8009f16:	f10a 0303 	add.w	r3, sl, #3
 8009f1a:	f000 bd49 	b.w	800a9b0 <_dtoa_r+0xb30>
 8009f1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f22:	2200      	movs	r2, #0
 8009f24:	ec51 0b17 	vmov	r0, r1, d7
 8009f28:	2300      	movs	r3, #0
 8009f2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009f2e:	f7f6 fdf3 	bl	8000b18 <__aeabi_dcmpeq>
 8009f32:	4680      	mov	r8, r0
 8009f34:	b158      	cbz	r0, 8009f4e <_dtoa_r+0xce>
 8009f36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009f38:	2301      	movs	r3, #1
 8009f3a:	6013      	str	r3, [r2, #0]
 8009f3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f3e:	b113      	cbz	r3, 8009f46 <_dtoa_r+0xc6>
 8009f40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009f42:	4b84      	ldr	r3, [pc, #528]	@ (800a154 <_dtoa_r+0x2d4>)
 8009f44:	6013      	str	r3, [r2, #0]
 8009f46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a168 <_dtoa_r+0x2e8>
 8009f4a:	f000 bd33 	b.w	800a9b4 <_dtoa_r+0xb34>
 8009f4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009f52:	aa16      	add	r2, sp, #88	@ 0x58
 8009f54:	a917      	add	r1, sp, #92	@ 0x5c
 8009f56:	4658      	mov	r0, fp
 8009f58:	f001 f980 	bl	800b25c <__d2b>
 8009f5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009f60:	4681      	mov	r9, r0
 8009f62:	2e00      	cmp	r6, #0
 8009f64:	d077      	beq.n	800a056 <_dtoa_r+0x1d6>
 8009f66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009f78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009f7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009f80:	4619      	mov	r1, r3
 8009f82:	2200      	movs	r2, #0
 8009f84:	4b74      	ldr	r3, [pc, #464]	@ (800a158 <_dtoa_r+0x2d8>)
 8009f86:	f7f6 f9a7 	bl	80002d8 <__aeabi_dsub>
 8009f8a:	a369      	add	r3, pc, #420	@ (adr r3, 800a130 <_dtoa_r+0x2b0>)
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	f7f6 fb5a 	bl	8000648 <__aeabi_dmul>
 8009f94:	a368      	add	r3, pc, #416	@ (adr r3, 800a138 <_dtoa_r+0x2b8>)
 8009f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9a:	f7f6 f99f 	bl	80002dc <__adddf3>
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	460d      	mov	r5, r1
 8009fa4:	f7f6 fae6 	bl	8000574 <__aeabi_i2d>
 8009fa8:	a365      	add	r3, pc, #404	@ (adr r3, 800a140 <_dtoa_r+0x2c0>)
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	f7f6 fb4b 	bl	8000648 <__aeabi_dmul>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	4629      	mov	r1, r5
 8009fba:	f7f6 f98f 	bl	80002dc <__adddf3>
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	460d      	mov	r5, r1
 8009fc2:	f7f6 fdf1 	bl	8000ba8 <__aeabi_d2iz>
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	4607      	mov	r7, r0
 8009fca:	2300      	movs	r3, #0
 8009fcc:	4620      	mov	r0, r4
 8009fce:	4629      	mov	r1, r5
 8009fd0:	f7f6 fdac 	bl	8000b2c <__aeabi_dcmplt>
 8009fd4:	b140      	cbz	r0, 8009fe8 <_dtoa_r+0x168>
 8009fd6:	4638      	mov	r0, r7
 8009fd8:	f7f6 facc 	bl	8000574 <__aeabi_i2d>
 8009fdc:	4622      	mov	r2, r4
 8009fde:	462b      	mov	r3, r5
 8009fe0:	f7f6 fd9a 	bl	8000b18 <__aeabi_dcmpeq>
 8009fe4:	b900      	cbnz	r0, 8009fe8 <_dtoa_r+0x168>
 8009fe6:	3f01      	subs	r7, #1
 8009fe8:	2f16      	cmp	r7, #22
 8009fea:	d851      	bhi.n	800a090 <_dtoa_r+0x210>
 8009fec:	4b5b      	ldr	r3, [pc, #364]	@ (800a15c <_dtoa_r+0x2dc>)
 8009fee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ffa:	f7f6 fd97 	bl	8000b2c <__aeabi_dcmplt>
 8009ffe:	2800      	cmp	r0, #0
 800a000:	d048      	beq.n	800a094 <_dtoa_r+0x214>
 800a002:	3f01      	subs	r7, #1
 800a004:	2300      	movs	r3, #0
 800a006:	9312      	str	r3, [sp, #72]	@ 0x48
 800a008:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a00a:	1b9b      	subs	r3, r3, r6
 800a00c:	1e5a      	subs	r2, r3, #1
 800a00e:	bf44      	itt	mi
 800a010:	f1c3 0801 	rsbmi	r8, r3, #1
 800a014:	2300      	movmi	r3, #0
 800a016:	9208      	str	r2, [sp, #32]
 800a018:	bf54      	ite	pl
 800a01a:	f04f 0800 	movpl.w	r8, #0
 800a01e:	9308      	strmi	r3, [sp, #32]
 800a020:	2f00      	cmp	r7, #0
 800a022:	db39      	blt.n	800a098 <_dtoa_r+0x218>
 800a024:	9b08      	ldr	r3, [sp, #32]
 800a026:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a028:	443b      	add	r3, r7
 800a02a:	9308      	str	r3, [sp, #32]
 800a02c:	2300      	movs	r3, #0
 800a02e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a032:	2b09      	cmp	r3, #9
 800a034:	d864      	bhi.n	800a100 <_dtoa_r+0x280>
 800a036:	2b05      	cmp	r3, #5
 800a038:	bfc4      	itt	gt
 800a03a:	3b04      	subgt	r3, #4
 800a03c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a040:	f1a3 0302 	sub.w	r3, r3, #2
 800a044:	bfcc      	ite	gt
 800a046:	2400      	movgt	r4, #0
 800a048:	2401      	movle	r4, #1
 800a04a:	2b03      	cmp	r3, #3
 800a04c:	d863      	bhi.n	800a116 <_dtoa_r+0x296>
 800a04e:	e8df f003 	tbb	[pc, r3]
 800a052:	372a      	.short	0x372a
 800a054:	5535      	.short	0x5535
 800a056:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a05a:	441e      	add	r6, r3
 800a05c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a060:	2b20      	cmp	r3, #32
 800a062:	bfc1      	itttt	gt
 800a064:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a068:	409f      	lslgt	r7, r3
 800a06a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a06e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a072:	bfd6      	itet	le
 800a074:	f1c3 0320 	rsble	r3, r3, #32
 800a078:	ea47 0003 	orrgt.w	r0, r7, r3
 800a07c:	fa04 f003 	lslle.w	r0, r4, r3
 800a080:	f7f6 fa68 	bl	8000554 <__aeabi_ui2d>
 800a084:	2201      	movs	r2, #1
 800a086:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a08a:	3e01      	subs	r6, #1
 800a08c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a08e:	e777      	b.n	8009f80 <_dtoa_r+0x100>
 800a090:	2301      	movs	r3, #1
 800a092:	e7b8      	b.n	800a006 <_dtoa_r+0x186>
 800a094:	9012      	str	r0, [sp, #72]	@ 0x48
 800a096:	e7b7      	b.n	800a008 <_dtoa_r+0x188>
 800a098:	427b      	negs	r3, r7
 800a09a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a09c:	2300      	movs	r3, #0
 800a09e:	eba8 0807 	sub.w	r8, r8, r7
 800a0a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a0a4:	e7c4      	b.n	800a030 <_dtoa_r+0x1b0>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	dc35      	bgt.n	800a11c <_dtoa_r+0x29c>
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	9307      	str	r3, [sp, #28]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a0ba:	e00b      	b.n	800a0d4 <_dtoa_r+0x254>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e7f3      	b.n	800a0a8 <_dtoa_r+0x228>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0c6:	18fb      	adds	r3, r7, r3
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	9307      	str	r3, [sp, #28]
 800a0d0:	bfb8      	it	lt
 800a0d2:	2301      	movlt	r3, #1
 800a0d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a0d8:	2100      	movs	r1, #0
 800a0da:	2204      	movs	r2, #4
 800a0dc:	f102 0514 	add.w	r5, r2, #20
 800a0e0:	429d      	cmp	r5, r3
 800a0e2:	d91f      	bls.n	800a124 <_dtoa_r+0x2a4>
 800a0e4:	6041      	str	r1, [r0, #4]
 800a0e6:	4658      	mov	r0, fp
 800a0e8:	f000 fd8e 	bl	800ac08 <_Balloc>
 800a0ec:	4682      	mov	sl, r0
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d13c      	bne.n	800a16c <_dtoa_r+0x2ec>
 800a0f2:	4b1b      	ldr	r3, [pc, #108]	@ (800a160 <_dtoa_r+0x2e0>)
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a0fa:	e6d8      	b.n	8009eae <_dtoa_r+0x2e>
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e7e0      	b.n	800a0c2 <_dtoa_r+0x242>
 800a100:	2401      	movs	r4, #1
 800a102:	2300      	movs	r3, #0
 800a104:	9309      	str	r3, [sp, #36]	@ 0x24
 800a106:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a108:	f04f 33ff 	mov.w	r3, #4294967295
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	9307      	str	r3, [sp, #28]
 800a110:	2200      	movs	r2, #0
 800a112:	2312      	movs	r3, #18
 800a114:	e7d0      	b.n	800a0b8 <_dtoa_r+0x238>
 800a116:	2301      	movs	r3, #1
 800a118:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a11a:	e7f5      	b.n	800a108 <_dtoa_r+0x288>
 800a11c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	9307      	str	r3, [sp, #28]
 800a122:	e7d7      	b.n	800a0d4 <_dtoa_r+0x254>
 800a124:	3101      	adds	r1, #1
 800a126:	0052      	lsls	r2, r2, #1
 800a128:	e7d8      	b.n	800a0dc <_dtoa_r+0x25c>
 800a12a:	bf00      	nop
 800a12c:	f3af 8000 	nop.w
 800a130:	636f4361 	.word	0x636f4361
 800a134:	3fd287a7 	.word	0x3fd287a7
 800a138:	8b60c8b3 	.word	0x8b60c8b3
 800a13c:	3fc68a28 	.word	0x3fc68a28
 800a140:	509f79fb 	.word	0x509f79fb
 800a144:	3fd34413 	.word	0x3fd34413
 800a148:	0800d169 	.word	0x0800d169
 800a14c:	0800d180 	.word	0x0800d180
 800a150:	7ff00000 	.word	0x7ff00000
 800a154:	0800d139 	.word	0x0800d139
 800a158:	3ff80000 	.word	0x3ff80000
 800a15c:	0800d278 	.word	0x0800d278
 800a160:	0800d1d8 	.word	0x0800d1d8
 800a164:	0800d165 	.word	0x0800d165
 800a168:	0800d138 	.word	0x0800d138
 800a16c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a170:	6018      	str	r0, [r3, #0]
 800a172:	9b07      	ldr	r3, [sp, #28]
 800a174:	2b0e      	cmp	r3, #14
 800a176:	f200 80a4 	bhi.w	800a2c2 <_dtoa_r+0x442>
 800a17a:	2c00      	cmp	r4, #0
 800a17c:	f000 80a1 	beq.w	800a2c2 <_dtoa_r+0x442>
 800a180:	2f00      	cmp	r7, #0
 800a182:	dd33      	ble.n	800a1ec <_dtoa_r+0x36c>
 800a184:	4bad      	ldr	r3, [pc, #692]	@ (800a43c <_dtoa_r+0x5bc>)
 800a186:	f007 020f 	and.w	r2, r7, #15
 800a18a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a18e:	ed93 7b00 	vldr	d7, [r3]
 800a192:	05f8      	lsls	r0, r7, #23
 800a194:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a198:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a19c:	d516      	bpl.n	800a1cc <_dtoa_r+0x34c>
 800a19e:	4ba8      	ldr	r3, [pc, #672]	@ (800a440 <_dtoa_r+0x5c0>)
 800a1a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1a8:	f7f6 fb78 	bl	800089c <__aeabi_ddiv>
 800a1ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1b0:	f004 040f 	and.w	r4, r4, #15
 800a1b4:	2603      	movs	r6, #3
 800a1b6:	4da2      	ldr	r5, [pc, #648]	@ (800a440 <_dtoa_r+0x5c0>)
 800a1b8:	b954      	cbnz	r4, 800a1d0 <_dtoa_r+0x350>
 800a1ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1c2:	f7f6 fb6b 	bl	800089c <__aeabi_ddiv>
 800a1c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1ca:	e028      	b.n	800a21e <_dtoa_r+0x39e>
 800a1cc:	2602      	movs	r6, #2
 800a1ce:	e7f2      	b.n	800a1b6 <_dtoa_r+0x336>
 800a1d0:	07e1      	lsls	r1, r4, #31
 800a1d2:	d508      	bpl.n	800a1e6 <_dtoa_r+0x366>
 800a1d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a1dc:	f7f6 fa34 	bl	8000648 <__aeabi_dmul>
 800a1e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1e4:	3601      	adds	r6, #1
 800a1e6:	1064      	asrs	r4, r4, #1
 800a1e8:	3508      	adds	r5, #8
 800a1ea:	e7e5      	b.n	800a1b8 <_dtoa_r+0x338>
 800a1ec:	f000 80d2 	beq.w	800a394 <_dtoa_r+0x514>
 800a1f0:	427c      	negs	r4, r7
 800a1f2:	4b92      	ldr	r3, [pc, #584]	@ (800a43c <_dtoa_r+0x5bc>)
 800a1f4:	4d92      	ldr	r5, [pc, #584]	@ (800a440 <_dtoa_r+0x5c0>)
 800a1f6:	f004 020f 	and.w	r2, r4, #15
 800a1fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a202:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a206:	f7f6 fa1f 	bl	8000648 <__aeabi_dmul>
 800a20a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a20e:	1124      	asrs	r4, r4, #4
 800a210:	2300      	movs	r3, #0
 800a212:	2602      	movs	r6, #2
 800a214:	2c00      	cmp	r4, #0
 800a216:	f040 80b2 	bne.w	800a37e <_dtoa_r+0x4fe>
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1d3      	bne.n	800a1c6 <_dtoa_r+0x346>
 800a21e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a220:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a224:	2b00      	cmp	r3, #0
 800a226:	f000 80b7 	beq.w	800a398 <_dtoa_r+0x518>
 800a22a:	4b86      	ldr	r3, [pc, #536]	@ (800a444 <_dtoa_r+0x5c4>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	4620      	mov	r0, r4
 800a230:	4629      	mov	r1, r5
 800a232:	f7f6 fc7b 	bl	8000b2c <__aeabi_dcmplt>
 800a236:	2800      	cmp	r0, #0
 800a238:	f000 80ae 	beq.w	800a398 <_dtoa_r+0x518>
 800a23c:	9b07      	ldr	r3, [sp, #28]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	f000 80aa 	beq.w	800a398 <_dtoa_r+0x518>
 800a244:	9b00      	ldr	r3, [sp, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	dd37      	ble.n	800a2ba <_dtoa_r+0x43a>
 800a24a:	1e7b      	subs	r3, r7, #1
 800a24c:	9304      	str	r3, [sp, #16]
 800a24e:	4620      	mov	r0, r4
 800a250:	4b7d      	ldr	r3, [pc, #500]	@ (800a448 <_dtoa_r+0x5c8>)
 800a252:	2200      	movs	r2, #0
 800a254:	4629      	mov	r1, r5
 800a256:	f7f6 f9f7 	bl	8000648 <__aeabi_dmul>
 800a25a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a25e:	9c00      	ldr	r4, [sp, #0]
 800a260:	3601      	adds	r6, #1
 800a262:	4630      	mov	r0, r6
 800a264:	f7f6 f986 	bl	8000574 <__aeabi_i2d>
 800a268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a26c:	f7f6 f9ec 	bl	8000648 <__aeabi_dmul>
 800a270:	4b76      	ldr	r3, [pc, #472]	@ (800a44c <_dtoa_r+0x5cc>)
 800a272:	2200      	movs	r2, #0
 800a274:	f7f6 f832 	bl	80002dc <__adddf3>
 800a278:	4605      	mov	r5, r0
 800a27a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a27e:	2c00      	cmp	r4, #0
 800a280:	f040 808d 	bne.w	800a39e <_dtoa_r+0x51e>
 800a284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a288:	4b71      	ldr	r3, [pc, #452]	@ (800a450 <_dtoa_r+0x5d0>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	f7f6 f824 	bl	80002d8 <__aeabi_dsub>
 800a290:	4602      	mov	r2, r0
 800a292:	460b      	mov	r3, r1
 800a294:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a298:	462a      	mov	r2, r5
 800a29a:	4633      	mov	r3, r6
 800a29c:	f7f6 fc64 	bl	8000b68 <__aeabi_dcmpgt>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	f040 828b 	bne.w	800a7bc <_dtoa_r+0x93c>
 800a2a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2aa:	462a      	mov	r2, r5
 800a2ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a2b0:	f7f6 fc3c 	bl	8000b2c <__aeabi_dcmplt>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	f040 8128 	bne.w	800a50a <_dtoa_r+0x68a>
 800a2ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a2be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a2c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f2c0 815a 	blt.w	800a57e <_dtoa_r+0x6fe>
 800a2ca:	2f0e      	cmp	r7, #14
 800a2cc:	f300 8157 	bgt.w	800a57e <_dtoa_r+0x6fe>
 800a2d0:	4b5a      	ldr	r3, [pc, #360]	@ (800a43c <_dtoa_r+0x5bc>)
 800a2d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a2d6:	ed93 7b00 	vldr	d7, [r3]
 800a2da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	ed8d 7b00 	vstr	d7, [sp]
 800a2e2:	da03      	bge.n	800a2ec <_dtoa_r+0x46c>
 800a2e4:	9b07      	ldr	r3, [sp, #28]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f340 8101 	ble.w	800a4ee <_dtoa_r+0x66e>
 800a2ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a2f0:	4656      	mov	r6, sl
 800a2f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	f7f6 facf 	bl	800089c <__aeabi_ddiv>
 800a2fe:	f7f6 fc53 	bl	8000ba8 <__aeabi_d2iz>
 800a302:	4680      	mov	r8, r0
 800a304:	f7f6 f936 	bl	8000574 <__aeabi_i2d>
 800a308:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a30c:	f7f6 f99c 	bl	8000648 <__aeabi_dmul>
 800a310:	4602      	mov	r2, r0
 800a312:	460b      	mov	r3, r1
 800a314:	4620      	mov	r0, r4
 800a316:	4629      	mov	r1, r5
 800a318:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a31c:	f7f5 ffdc 	bl	80002d8 <__aeabi_dsub>
 800a320:	f806 4b01 	strb.w	r4, [r6], #1
 800a324:	9d07      	ldr	r5, [sp, #28]
 800a326:	eba6 040a 	sub.w	r4, r6, sl
 800a32a:	42a5      	cmp	r5, r4
 800a32c:	4602      	mov	r2, r0
 800a32e:	460b      	mov	r3, r1
 800a330:	f040 8117 	bne.w	800a562 <_dtoa_r+0x6e2>
 800a334:	f7f5 ffd2 	bl	80002dc <__adddf3>
 800a338:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a33c:	4604      	mov	r4, r0
 800a33e:	460d      	mov	r5, r1
 800a340:	f7f6 fc12 	bl	8000b68 <__aeabi_dcmpgt>
 800a344:	2800      	cmp	r0, #0
 800a346:	f040 80f9 	bne.w	800a53c <_dtoa_r+0x6bc>
 800a34a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a34e:	4620      	mov	r0, r4
 800a350:	4629      	mov	r1, r5
 800a352:	f7f6 fbe1 	bl	8000b18 <__aeabi_dcmpeq>
 800a356:	b118      	cbz	r0, 800a360 <_dtoa_r+0x4e0>
 800a358:	f018 0f01 	tst.w	r8, #1
 800a35c:	f040 80ee 	bne.w	800a53c <_dtoa_r+0x6bc>
 800a360:	4649      	mov	r1, r9
 800a362:	4658      	mov	r0, fp
 800a364:	f000 fc90 	bl	800ac88 <_Bfree>
 800a368:	2300      	movs	r3, #0
 800a36a:	7033      	strb	r3, [r6, #0]
 800a36c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a36e:	3701      	adds	r7, #1
 800a370:	601f      	str	r7, [r3, #0]
 800a372:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a374:	2b00      	cmp	r3, #0
 800a376:	f000 831d 	beq.w	800a9b4 <_dtoa_r+0xb34>
 800a37a:	601e      	str	r6, [r3, #0]
 800a37c:	e31a      	b.n	800a9b4 <_dtoa_r+0xb34>
 800a37e:	07e2      	lsls	r2, r4, #31
 800a380:	d505      	bpl.n	800a38e <_dtoa_r+0x50e>
 800a382:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a386:	f7f6 f95f 	bl	8000648 <__aeabi_dmul>
 800a38a:	3601      	adds	r6, #1
 800a38c:	2301      	movs	r3, #1
 800a38e:	1064      	asrs	r4, r4, #1
 800a390:	3508      	adds	r5, #8
 800a392:	e73f      	b.n	800a214 <_dtoa_r+0x394>
 800a394:	2602      	movs	r6, #2
 800a396:	e742      	b.n	800a21e <_dtoa_r+0x39e>
 800a398:	9c07      	ldr	r4, [sp, #28]
 800a39a:	9704      	str	r7, [sp, #16]
 800a39c:	e761      	b.n	800a262 <_dtoa_r+0x3e2>
 800a39e:	4b27      	ldr	r3, [pc, #156]	@ (800a43c <_dtoa_r+0x5bc>)
 800a3a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a3a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3aa:	4454      	add	r4, sl
 800a3ac:	2900      	cmp	r1, #0
 800a3ae:	d053      	beq.n	800a458 <_dtoa_r+0x5d8>
 800a3b0:	4928      	ldr	r1, [pc, #160]	@ (800a454 <_dtoa_r+0x5d4>)
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	f7f6 fa72 	bl	800089c <__aeabi_ddiv>
 800a3b8:	4633      	mov	r3, r6
 800a3ba:	462a      	mov	r2, r5
 800a3bc:	f7f5 ff8c 	bl	80002d8 <__aeabi_dsub>
 800a3c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a3c4:	4656      	mov	r6, sl
 800a3c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3ca:	f7f6 fbed 	bl	8000ba8 <__aeabi_d2iz>
 800a3ce:	4605      	mov	r5, r0
 800a3d0:	f7f6 f8d0 	bl	8000574 <__aeabi_i2d>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3dc:	f7f5 ff7c 	bl	80002d8 <__aeabi_dsub>
 800a3e0:	3530      	adds	r5, #48	@ 0x30
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3ea:	f806 5b01 	strb.w	r5, [r6], #1
 800a3ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a3f2:	f7f6 fb9b 	bl	8000b2c <__aeabi_dcmplt>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d171      	bne.n	800a4de <_dtoa_r+0x65e>
 800a3fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3fe:	4911      	ldr	r1, [pc, #68]	@ (800a444 <_dtoa_r+0x5c4>)
 800a400:	2000      	movs	r0, #0
 800a402:	f7f5 ff69 	bl	80002d8 <__aeabi_dsub>
 800a406:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a40a:	f7f6 fb8f 	bl	8000b2c <__aeabi_dcmplt>
 800a40e:	2800      	cmp	r0, #0
 800a410:	f040 8095 	bne.w	800a53e <_dtoa_r+0x6be>
 800a414:	42a6      	cmp	r6, r4
 800a416:	f43f af50 	beq.w	800a2ba <_dtoa_r+0x43a>
 800a41a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a41e:	4b0a      	ldr	r3, [pc, #40]	@ (800a448 <_dtoa_r+0x5c8>)
 800a420:	2200      	movs	r2, #0
 800a422:	f7f6 f911 	bl	8000648 <__aeabi_dmul>
 800a426:	4b08      	ldr	r3, [pc, #32]	@ (800a448 <_dtoa_r+0x5c8>)
 800a428:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a42c:	2200      	movs	r2, #0
 800a42e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a432:	f7f6 f909 	bl	8000648 <__aeabi_dmul>
 800a436:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a43a:	e7c4      	b.n	800a3c6 <_dtoa_r+0x546>
 800a43c:	0800d278 	.word	0x0800d278
 800a440:	0800d250 	.word	0x0800d250
 800a444:	3ff00000 	.word	0x3ff00000
 800a448:	40240000 	.word	0x40240000
 800a44c:	401c0000 	.word	0x401c0000
 800a450:	40140000 	.word	0x40140000
 800a454:	3fe00000 	.word	0x3fe00000
 800a458:	4631      	mov	r1, r6
 800a45a:	4628      	mov	r0, r5
 800a45c:	f7f6 f8f4 	bl	8000648 <__aeabi_dmul>
 800a460:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a464:	9415      	str	r4, [sp, #84]	@ 0x54
 800a466:	4656      	mov	r6, sl
 800a468:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a46c:	f7f6 fb9c 	bl	8000ba8 <__aeabi_d2iz>
 800a470:	4605      	mov	r5, r0
 800a472:	f7f6 f87f 	bl	8000574 <__aeabi_i2d>
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a47e:	f7f5 ff2b 	bl	80002d8 <__aeabi_dsub>
 800a482:	3530      	adds	r5, #48	@ 0x30
 800a484:	f806 5b01 	strb.w	r5, [r6], #1
 800a488:	4602      	mov	r2, r0
 800a48a:	460b      	mov	r3, r1
 800a48c:	42a6      	cmp	r6, r4
 800a48e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a492:	f04f 0200 	mov.w	r2, #0
 800a496:	d124      	bne.n	800a4e2 <_dtoa_r+0x662>
 800a498:	4bac      	ldr	r3, [pc, #688]	@ (800a74c <_dtoa_r+0x8cc>)
 800a49a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a49e:	f7f5 ff1d 	bl	80002dc <__adddf3>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4aa:	f7f6 fb5d 	bl	8000b68 <__aeabi_dcmpgt>
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	d145      	bne.n	800a53e <_dtoa_r+0x6be>
 800a4b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a4b6:	49a5      	ldr	r1, [pc, #660]	@ (800a74c <_dtoa_r+0x8cc>)
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	f7f5 ff0d 	bl	80002d8 <__aeabi_dsub>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4c6:	f7f6 fb31 	bl	8000b2c <__aeabi_dcmplt>
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	f43f aef5 	beq.w	800a2ba <_dtoa_r+0x43a>
 800a4d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a4d2:	1e73      	subs	r3, r6, #1
 800a4d4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a4d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a4da:	2b30      	cmp	r3, #48	@ 0x30
 800a4dc:	d0f8      	beq.n	800a4d0 <_dtoa_r+0x650>
 800a4de:	9f04      	ldr	r7, [sp, #16]
 800a4e0:	e73e      	b.n	800a360 <_dtoa_r+0x4e0>
 800a4e2:	4b9b      	ldr	r3, [pc, #620]	@ (800a750 <_dtoa_r+0x8d0>)
 800a4e4:	f7f6 f8b0 	bl	8000648 <__aeabi_dmul>
 800a4e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4ec:	e7bc      	b.n	800a468 <_dtoa_r+0x5e8>
 800a4ee:	d10c      	bne.n	800a50a <_dtoa_r+0x68a>
 800a4f0:	4b98      	ldr	r3, [pc, #608]	@ (800a754 <_dtoa_r+0x8d4>)
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4f8:	f7f6 f8a6 	bl	8000648 <__aeabi_dmul>
 800a4fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a500:	f7f6 fb28 	bl	8000b54 <__aeabi_dcmpge>
 800a504:	2800      	cmp	r0, #0
 800a506:	f000 8157 	beq.w	800a7b8 <_dtoa_r+0x938>
 800a50a:	2400      	movs	r4, #0
 800a50c:	4625      	mov	r5, r4
 800a50e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a510:	43db      	mvns	r3, r3
 800a512:	9304      	str	r3, [sp, #16]
 800a514:	4656      	mov	r6, sl
 800a516:	2700      	movs	r7, #0
 800a518:	4621      	mov	r1, r4
 800a51a:	4658      	mov	r0, fp
 800a51c:	f000 fbb4 	bl	800ac88 <_Bfree>
 800a520:	2d00      	cmp	r5, #0
 800a522:	d0dc      	beq.n	800a4de <_dtoa_r+0x65e>
 800a524:	b12f      	cbz	r7, 800a532 <_dtoa_r+0x6b2>
 800a526:	42af      	cmp	r7, r5
 800a528:	d003      	beq.n	800a532 <_dtoa_r+0x6b2>
 800a52a:	4639      	mov	r1, r7
 800a52c:	4658      	mov	r0, fp
 800a52e:	f000 fbab 	bl	800ac88 <_Bfree>
 800a532:	4629      	mov	r1, r5
 800a534:	4658      	mov	r0, fp
 800a536:	f000 fba7 	bl	800ac88 <_Bfree>
 800a53a:	e7d0      	b.n	800a4de <_dtoa_r+0x65e>
 800a53c:	9704      	str	r7, [sp, #16]
 800a53e:	4633      	mov	r3, r6
 800a540:	461e      	mov	r6, r3
 800a542:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a546:	2a39      	cmp	r2, #57	@ 0x39
 800a548:	d107      	bne.n	800a55a <_dtoa_r+0x6da>
 800a54a:	459a      	cmp	sl, r3
 800a54c:	d1f8      	bne.n	800a540 <_dtoa_r+0x6c0>
 800a54e:	9a04      	ldr	r2, [sp, #16]
 800a550:	3201      	adds	r2, #1
 800a552:	9204      	str	r2, [sp, #16]
 800a554:	2230      	movs	r2, #48	@ 0x30
 800a556:	f88a 2000 	strb.w	r2, [sl]
 800a55a:	781a      	ldrb	r2, [r3, #0]
 800a55c:	3201      	adds	r2, #1
 800a55e:	701a      	strb	r2, [r3, #0]
 800a560:	e7bd      	b.n	800a4de <_dtoa_r+0x65e>
 800a562:	4b7b      	ldr	r3, [pc, #492]	@ (800a750 <_dtoa_r+0x8d0>)
 800a564:	2200      	movs	r2, #0
 800a566:	f7f6 f86f 	bl	8000648 <__aeabi_dmul>
 800a56a:	2200      	movs	r2, #0
 800a56c:	2300      	movs	r3, #0
 800a56e:	4604      	mov	r4, r0
 800a570:	460d      	mov	r5, r1
 800a572:	f7f6 fad1 	bl	8000b18 <__aeabi_dcmpeq>
 800a576:	2800      	cmp	r0, #0
 800a578:	f43f aebb 	beq.w	800a2f2 <_dtoa_r+0x472>
 800a57c:	e6f0      	b.n	800a360 <_dtoa_r+0x4e0>
 800a57e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a580:	2a00      	cmp	r2, #0
 800a582:	f000 80db 	beq.w	800a73c <_dtoa_r+0x8bc>
 800a586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a588:	2a01      	cmp	r2, #1
 800a58a:	f300 80bf 	bgt.w	800a70c <_dtoa_r+0x88c>
 800a58e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a590:	2a00      	cmp	r2, #0
 800a592:	f000 80b7 	beq.w	800a704 <_dtoa_r+0x884>
 800a596:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a59a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a59c:	4646      	mov	r6, r8
 800a59e:	9a08      	ldr	r2, [sp, #32]
 800a5a0:	2101      	movs	r1, #1
 800a5a2:	441a      	add	r2, r3
 800a5a4:	4658      	mov	r0, fp
 800a5a6:	4498      	add	r8, r3
 800a5a8:	9208      	str	r2, [sp, #32]
 800a5aa:	f000 fc21 	bl	800adf0 <__i2b>
 800a5ae:	4605      	mov	r5, r0
 800a5b0:	b15e      	cbz	r6, 800a5ca <_dtoa_r+0x74a>
 800a5b2:	9b08      	ldr	r3, [sp, #32]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	dd08      	ble.n	800a5ca <_dtoa_r+0x74a>
 800a5b8:	42b3      	cmp	r3, r6
 800a5ba:	9a08      	ldr	r2, [sp, #32]
 800a5bc:	bfa8      	it	ge
 800a5be:	4633      	movge	r3, r6
 800a5c0:	eba8 0803 	sub.w	r8, r8, r3
 800a5c4:	1af6      	subs	r6, r6, r3
 800a5c6:	1ad3      	subs	r3, r2, r3
 800a5c8:	9308      	str	r3, [sp, #32]
 800a5ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5cc:	b1f3      	cbz	r3, 800a60c <_dtoa_r+0x78c>
 800a5ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f000 80b7 	beq.w	800a744 <_dtoa_r+0x8c4>
 800a5d6:	b18c      	cbz	r4, 800a5fc <_dtoa_r+0x77c>
 800a5d8:	4629      	mov	r1, r5
 800a5da:	4622      	mov	r2, r4
 800a5dc:	4658      	mov	r0, fp
 800a5de:	f000 fcc7 	bl	800af70 <__pow5mult>
 800a5e2:	464a      	mov	r2, r9
 800a5e4:	4601      	mov	r1, r0
 800a5e6:	4605      	mov	r5, r0
 800a5e8:	4658      	mov	r0, fp
 800a5ea:	f000 fc17 	bl	800ae1c <__multiply>
 800a5ee:	4649      	mov	r1, r9
 800a5f0:	9004      	str	r0, [sp, #16]
 800a5f2:	4658      	mov	r0, fp
 800a5f4:	f000 fb48 	bl	800ac88 <_Bfree>
 800a5f8:	9b04      	ldr	r3, [sp, #16]
 800a5fa:	4699      	mov	r9, r3
 800a5fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5fe:	1b1a      	subs	r2, r3, r4
 800a600:	d004      	beq.n	800a60c <_dtoa_r+0x78c>
 800a602:	4649      	mov	r1, r9
 800a604:	4658      	mov	r0, fp
 800a606:	f000 fcb3 	bl	800af70 <__pow5mult>
 800a60a:	4681      	mov	r9, r0
 800a60c:	2101      	movs	r1, #1
 800a60e:	4658      	mov	r0, fp
 800a610:	f000 fbee 	bl	800adf0 <__i2b>
 800a614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a616:	4604      	mov	r4, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f000 81cf 	beq.w	800a9bc <_dtoa_r+0xb3c>
 800a61e:	461a      	mov	r2, r3
 800a620:	4601      	mov	r1, r0
 800a622:	4658      	mov	r0, fp
 800a624:	f000 fca4 	bl	800af70 <__pow5mult>
 800a628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	4604      	mov	r4, r0
 800a62e:	f300 8095 	bgt.w	800a75c <_dtoa_r+0x8dc>
 800a632:	9b02      	ldr	r3, [sp, #8]
 800a634:	2b00      	cmp	r3, #0
 800a636:	f040 8087 	bne.w	800a748 <_dtoa_r+0x8c8>
 800a63a:	9b03      	ldr	r3, [sp, #12]
 800a63c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a640:	2b00      	cmp	r3, #0
 800a642:	f040 8089 	bne.w	800a758 <_dtoa_r+0x8d8>
 800a646:	9b03      	ldr	r3, [sp, #12]
 800a648:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a64c:	0d1b      	lsrs	r3, r3, #20
 800a64e:	051b      	lsls	r3, r3, #20
 800a650:	b12b      	cbz	r3, 800a65e <_dtoa_r+0x7de>
 800a652:	9b08      	ldr	r3, [sp, #32]
 800a654:	3301      	adds	r3, #1
 800a656:	9308      	str	r3, [sp, #32]
 800a658:	f108 0801 	add.w	r8, r8, #1
 800a65c:	2301      	movs	r3, #1
 800a65e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a660:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a662:	2b00      	cmp	r3, #0
 800a664:	f000 81b0 	beq.w	800a9c8 <_dtoa_r+0xb48>
 800a668:	6923      	ldr	r3, [r4, #16]
 800a66a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a66e:	6918      	ldr	r0, [r3, #16]
 800a670:	f000 fb72 	bl	800ad58 <__hi0bits>
 800a674:	f1c0 0020 	rsb	r0, r0, #32
 800a678:	9b08      	ldr	r3, [sp, #32]
 800a67a:	4418      	add	r0, r3
 800a67c:	f010 001f 	ands.w	r0, r0, #31
 800a680:	d077      	beq.n	800a772 <_dtoa_r+0x8f2>
 800a682:	f1c0 0320 	rsb	r3, r0, #32
 800a686:	2b04      	cmp	r3, #4
 800a688:	dd6b      	ble.n	800a762 <_dtoa_r+0x8e2>
 800a68a:	9b08      	ldr	r3, [sp, #32]
 800a68c:	f1c0 001c 	rsb	r0, r0, #28
 800a690:	4403      	add	r3, r0
 800a692:	4480      	add	r8, r0
 800a694:	4406      	add	r6, r0
 800a696:	9308      	str	r3, [sp, #32]
 800a698:	f1b8 0f00 	cmp.w	r8, #0
 800a69c:	dd05      	ble.n	800a6aa <_dtoa_r+0x82a>
 800a69e:	4649      	mov	r1, r9
 800a6a0:	4642      	mov	r2, r8
 800a6a2:	4658      	mov	r0, fp
 800a6a4:	f000 fcbe 	bl	800b024 <__lshift>
 800a6a8:	4681      	mov	r9, r0
 800a6aa:	9b08      	ldr	r3, [sp, #32]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	dd05      	ble.n	800a6bc <_dtoa_r+0x83c>
 800a6b0:	4621      	mov	r1, r4
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	4658      	mov	r0, fp
 800a6b6:	f000 fcb5 	bl	800b024 <__lshift>
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d059      	beq.n	800a776 <_dtoa_r+0x8f6>
 800a6c2:	4621      	mov	r1, r4
 800a6c4:	4648      	mov	r0, r9
 800a6c6:	f000 fd19 	bl	800b0fc <__mcmp>
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	da53      	bge.n	800a776 <_dtoa_r+0x8f6>
 800a6ce:	1e7b      	subs	r3, r7, #1
 800a6d0:	9304      	str	r3, [sp, #16]
 800a6d2:	4649      	mov	r1, r9
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	220a      	movs	r2, #10
 800a6d8:	4658      	mov	r0, fp
 800a6da:	f000 faf7 	bl	800accc <__multadd>
 800a6de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6e0:	4681      	mov	r9, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f000 8172 	beq.w	800a9cc <_dtoa_r+0xb4c>
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	220a      	movs	r2, #10
 800a6ee:	4658      	mov	r0, fp
 800a6f0:	f000 faec 	bl	800accc <__multadd>
 800a6f4:	9b00      	ldr	r3, [sp, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	4605      	mov	r5, r0
 800a6fa:	dc67      	bgt.n	800a7cc <_dtoa_r+0x94c>
 800a6fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	dc41      	bgt.n	800a786 <_dtoa_r+0x906>
 800a702:	e063      	b.n	800a7cc <_dtoa_r+0x94c>
 800a704:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a706:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a70a:	e746      	b.n	800a59a <_dtoa_r+0x71a>
 800a70c:	9b07      	ldr	r3, [sp, #28]
 800a70e:	1e5c      	subs	r4, r3, #1
 800a710:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a712:	42a3      	cmp	r3, r4
 800a714:	bfbf      	itttt	lt
 800a716:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a718:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a71a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a71c:	1ae3      	sublt	r3, r4, r3
 800a71e:	bfb4      	ite	lt
 800a720:	18d2      	addlt	r2, r2, r3
 800a722:	1b1c      	subge	r4, r3, r4
 800a724:	9b07      	ldr	r3, [sp, #28]
 800a726:	bfbc      	itt	lt
 800a728:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a72a:	2400      	movlt	r4, #0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	bfb5      	itete	lt
 800a730:	eba8 0603 	sublt.w	r6, r8, r3
 800a734:	9b07      	ldrge	r3, [sp, #28]
 800a736:	2300      	movlt	r3, #0
 800a738:	4646      	movge	r6, r8
 800a73a:	e730      	b.n	800a59e <_dtoa_r+0x71e>
 800a73c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a73e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a740:	4646      	mov	r6, r8
 800a742:	e735      	b.n	800a5b0 <_dtoa_r+0x730>
 800a744:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a746:	e75c      	b.n	800a602 <_dtoa_r+0x782>
 800a748:	2300      	movs	r3, #0
 800a74a:	e788      	b.n	800a65e <_dtoa_r+0x7de>
 800a74c:	3fe00000 	.word	0x3fe00000
 800a750:	40240000 	.word	0x40240000
 800a754:	40140000 	.word	0x40140000
 800a758:	9b02      	ldr	r3, [sp, #8]
 800a75a:	e780      	b.n	800a65e <_dtoa_r+0x7de>
 800a75c:	2300      	movs	r3, #0
 800a75e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a760:	e782      	b.n	800a668 <_dtoa_r+0x7e8>
 800a762:	d099      	beq.n	800a698 <_dtoa_r+0x818>
 800a764:	9a08      	ldr	r2, [sp, #32]
 800a766:	331c      	adds	r3, #28
 800a768:	441a      	add	r2, r3
 800a76a:	4498      	add	r8, r3
 800a76c:	441e      	add	r6, r3
 800a76e:	9208      	str	r2, [sp, #32]
 800a770:	e792      	b.n	800a698 <_dtoa_r+0x818>
 800a772:	4603      	mov	r3, r0
 800a774:	e7f6      	b.n	800a764 <_dtoa_r+0x8e4>
 800a776:	9b07      	ldr	r3, [sp, #28]
 800a778:	9704      	str	r7, [sp, #16]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	dc20      	bgt.n	800a7c0 <_dtoa_r+0x940>
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a782:	2b02      	cmp	r3, #2
 800a784:	dd1e      	ble.n	800a7c4 <_dtoa_r+0x944>
 800a786:	9b00      	ldr	r3, [sp, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f47f aec0 	bne.w	800a50e <_dtoa_r+0x68e>
 800a78e:	4621      	mov	r1, r4
 800a790:	2205      	movs	r2, #5
 800a792:	4658      	mov	r0, fp
 800a794:	f000 fa9a 	bl	800accc <__multadd>
 800a798:	4601      	mov	r1, r0
 800a79a:	4604      	mov	r4, r0
 800a79c:	4648      	mov	r0, r9
 800a79e:	f000 fcad 	bl	800b0fc <__mcmp>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	f77f aeb3 	ble.w	800a50e <_dtoa_r+0x68e>
 800a7a8:	4656      	mov	r6, sl
 800a7aa:	2331      	movs	r3, #49	@ 0x31
 800a7ac:	f806 3b01 	strb.w	r3, [r6], #1
 800a7b0:	9b04      	ldr	r3, [sp, #16]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	9304      	str	r3, [sp, #16]
 800a7b6:	e6ae      	b.n	800a516 <_dtoa_r+0x696>
 800a7b8:	9c07      	ldr	r4, [sp, #28]
 800a7ba:	9704      	str	r7, [sp, #16]
 800a7bc:	4625      	mov	r5, r4
 800a7be:	e7f3      	b.n	800a7a8 <_dtoa_r+0x928>
 800a7c0:	9b07      	ldr	r3, [sp, #28]
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f000 8104 	beq.w	800a9d4 <_dtoa_r+0xb54>
 800a7cc:	2e00      	cmp	r6, #0
 800a7ce:	dd05      	ble.n	800a7dc <_dtoa_r+0x95c>
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	4632      	mov	r2, r6
 800a7d4:	4658      	mov	r0, fp
 800a7d6:	f000 fc25 	bl	800b024 <__lshift>
 800a7da:	4605      	mov	r5, r0
 800a7dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d05a      	beq.n	800a898 <_dtoa_r+0xa18>
 800a7e2:	6869      	ldr	r1, [r5, #4]
 800a7e4:	4658      	mov	r0, fp
 800a7e6:	f000 fa0f 	bl	800ac08 <_Balloc>
 800a7ea:	4606      	mov	r6, r0
 800a7ec:	b928      	cbnz	r0, 800a7fa <_dtoa_r+0x97a>
 800a7ee:	4b84      	ldr	r3, [pc, #528]	@ (800aa00 <_dtoa_r+0xb80>)
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a7f6:	f7ff bb5a 	b.w	8009eae <_dtoa_r+0x2e>
 800a7fa:	692a      	ldr	r2, [r5, #16]
 800a7fc:	3202      	adds	r2, #2
 800a7fe:	0092      	lsls	r2, r2, #2
 800a800:	f105 010c 	add.w	r1, r5, #12
 800a804:	300c      	adds	r0, #12
 800a806:	f000 ffaf 	bl	800b768 <memcpy>
 800a80a:	2201      	movs	r2, #1
 800a80c:	4631      	mov	r1, r6
 800a80e:	4658      	mov	r0, fp
 800a810:	f000 fc08 	bl	800b024 <__lshift>
 800a814:	f10a 0301 	add.w	r3, sl, #1
 800a818:	9307      	str	r3, [sp, #28]
 800a81a:	9b00      	ldr	r3, [sp, #0]
 800a81c:	4453      	add	r3, sl
 800a81e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a820:	9b02      	ldr	r3, [sp, #8]
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	462f      	mov	r7, r5
 800a828:	930a      	str	r3, [sp, #40]	@ 0x28
 800a82a:	4605      	mov	r5, r0
 800a82c:	9b07      	ldr	r3, [sp, #28]
 800a82e:	4621      	mov	r1, r4
 800a830:	3b01      	subs	r3, #1
 800a832:	4648      	mov	r0, r9
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	f7ff fa98 	bl	8009d6a <quorem>
 800a83a:	4639      	mov	r1, r7
 800a83c:	9002      	str	r0, [sp, #8]
 800a83e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a842:	4648      	mov	r0, r9
 800a844:	f000 fc5a 	bl	800b0fc <__mcmp>
 800a848:	462a      	mov	r2, r5
 800a84a:	9008      	str	r0, [sp, #32]
 800a84c:	4621      	mov	r1, r4
 800a84e:	4658      	mov	r0, fp
 800a850:	f000 fc70 	bl	800b134 <__mdiff>
 800a854:	68c2      	ldr	r2, [r0, #12]
 800a856:	4606      	mov	r6, r0
 800a858:	bb02      	cbnz	r2, 800a89c <_dtoa_r+0xa1c>
 800a85a:	4601      	mov	r1, r0
 800a85c:	4648      	mov	r0, r9
 800a85e:	f000 fc4d 	bl	800b0fc <__mcmp>
 800a862:	4602      	mov	r2, r0
 800a864:	4631      	mov	r1, r6
 800a866:	4658      	mov	r0, fp
 800a868:	920e      	str	r2, [sp, #56]	@ 0x38
 800a86a:	f000 fa0d 	bl	800ac88 <_Bfree>
 800a86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a870:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a872:	9e07      	ldr	r6, [sp, #28]
 800a874:	ea43 0102 	orr.w	r1, r3, r2
 800a878:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a87a:	4319      	orrs	r1, r3
 800a87c:	d110      	bne.n	800a8a0 <_dtoa_r+0xa20>
 800a87e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a882:	d029      	beq.n	800a8d8 <_dtoa_r+0xa58>
 800a884:	9b08      	ldr	r3, [sp, #32]
 800a886:	2b00      	cmp	r3, #0
 800a888:	dd02      	ble.n	800a890 <_dtoa_r+0xa10>
 800a88a:	9b02      	ldr	r3, [sp, #8]
 800a88c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a890:	9b00      	ldr	r3, [sp, #0]
 800a892:	f883 8000 	strb.w	r8, [r3]
 800a896:	e63f      	b.n	800a518 <_dtoa_r+0x698>
 800a898:	4628      	mov	r0, r5
 800a89a:	e7bb      	b.n	800a814 <_dtoa_r+0x994>
 800a89c:	2201      	movs	r2, #1
 800a89e:	e7e1      	b.n	800a864 <_dtoa_r+0x9e4>
 800a8a0:	9b08      	ldr	r3, [sp, #32]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	db04      	blt.n	800a8b0 <_dtoa_r+0xa30>
 800a8a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a8a8:	430b      	orrs	r3, r1
 800a8aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a8ac:	430b      	orrs	r3, r1
 800a8ae:	d120      	bne.n	800a8f2 <_dtoa_r+0xa72>
 800a8b0:	2a00      	cmp	r2, #0
 800a8b2:	dded      	ble.n	800a890 <_dtoa_r+0xa10>
 800a8b4:	4649      	mov	r1, r9
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	4658      	mov	r0, fp
 800a8ba:	f000 fbb3 	bl	800b024 <__lshift>
 800a8be:	4621      	mov	r1, r4
 800a8c0:	4681      	mov	r9, r0
 800a8c2:	f000 fc1b 	bl	800b0fc <__mcmp>
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	dc03      	bgt.n	800a8d2 <_dtoa_r+0xa52>
 800a8ca:	d1e1      	bne.n	800a890 <_dtoa_r+0xa10>
 800a8cc:	f018 0f01 	tst.w	r8, #1
 800a8d0:	d0de      	beq.n	800a890 <_dtoa_r+0xa10>
 800a8d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a8d6:	d1d8      	bne.n	800a88a <_dtoa_r+0xa0a>
 800a8d8:	9a00      	ldr	r2, [sp, #0]
 800a8da:	2339      	movs	r3, #57	@ 0x39
 800a8dc:	7013      	strb	r3, [r2, #0]
 800a8de:	4633      	mov	r3, r6
 800a8e0:	461e      	mov	r6, r3
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a8e8:	2a39      	cmp	r2, #57	@ 0x39
 800a8ea:	d052      	beq.n	800a992 <_dtoa_r+0xb12>
 800a8ec:	3201      	adds	r2, #1
 800a8ee:	701a      	strb	r2, [r3, #0]
 800a8f0:	e612      	b.n	800a518 <_dtoa_r+0x698>
 800a8f2:	2a00      	cmp	r2, #0
 800a8f4:	dd07      	ble.n	800a906 <_dtoa_r+0xa86>
 800a8f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a8fa:	d0ed      	beq.n	800a8d8 <_dtoa_r+0xa58>
 800a8fc:	9a00      	ldr	r2, [sp, #0]
 800a8fe:	f108 0301 	add.w	r3, r8, #1
 800a902:	7013      	strb	r3, [r2, #0]
 800a904:	e608      	b.n	800a518 <_dtoa_r+0x698>
 800a906:	9b07      	ldr	r3, [sp, #28]
 800a908:	9a07      	ldr	r2, [sp, #28]
 800a90a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a90e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a910:	4293      	cmp	r3, r2
 800a912:	d028      	beq.n	800a966 <_dtoa_r+0xae6>
 800a914:	4649      	mov	r1, r9
 800a916:	2300      	movs	r3, #0
 800a918:	220a      	movs	r2, #10
 800a91a:	4658      	mov	r0, fp
 800a91c:	f000 f9d6 	bl	800accc <__multadd>
 800a920:	42af      	cmp	r7, r5
 800a922:	4681      	mov	r9, r0
 800a924:	f04f 0300 	mov.w	r3, #0
 800a928:	f04f 020a 	mov.w	r2, #10
 800a92c:	4639      	mov	r1, r7
 800a92e:	4658      	mov	r0, fp
 800a930:	d107      	bne.n	800a942 <_dtoa_r+0xac2>
 800a932:	f000 f9cb 	bl	800accc <__multadd>
 800a936:	4607      	mov	r7, r0
 800a938:	4605      	mov	r5, r0
 800a93a:	9b07      	ldr	r3, [sp, #28]
 800a93c:	3301      	adds	r3, #1
 800a93e:	9307      	str	r3, [sp, #28]
 800a940:	e774      	b.n	800a82c <_dtoa_r+0x9ac>
 800a942:	f000 f9c3 	bl	800accc <__multadd>
 800a946:	4629      	mov	r1, r5
 800a948:	4607      	mov	r7, r0
 800a94a:	2300      	movs	r3, #0
 800a94c:	220a      	movs	r2, #10
 800a94e:	4658      	mov	r0, fp
 800a950:	f000 f9bc 	bl	800accc <__multadd>
 800a954:	4605      	mov	r5, r0
 800a956:	e7f0      	b.n	800a93a <_dtoa_r+0xaba>
 800a958:	9b00      	ldr	r3, [sp, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	bfcc      	ite	gt
 800a95e:	461e      	movgt	r6, r3
 800a960:	2601      	movle	r6, #1
 800a962:	4456      	add	r6, sl
 800a964:	2700      	movs	r7, #0
 800a966:	4649      	mov	r1, r9
 800a968:	2201      	movs	r2, #1
 800a96a:	4658      	mov	r0, fp
 800a96c:	f000 fb5a 	bl	800b024 <__lshift>
 800a970:	4621      	mov	r1, r4
 800a972:	4681      	mov	r9, r0
 800a974:	f000 fbc2 	bl	800b0fc <__mcmp>
 800a978:	2800      	cmp	r0, #0
 800a97a:	dcb0      	bgt.n	800a8de <_dtoa_r+0xa5e>
 800a97c:	d102      	bne.n	800a984 <_dtoa_r+0xb04>
 800a97e:	f018 0f01 	tst.w	r8, #1
 800a982:	d1ac      	bne.n	800a8de <_dtoa_r+0xa5e>
 800a984:	4633      	mov	r3, r6
 800a986:	461e      	mov	r6, r3
 800a988:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a98c:	2a30      	cmp	r2, #48	@ 0x30
 800a98e:	d0fa      	beq.n	800a986 <_dtoa_r+0xb06>
 800a990:	e5c2      	b.n	800a518 <_dtoa_r+0x698>
 800a992:	459a      	cmp	sl, r3
 800a994:	d1a4      	bne.n	800a8e0 <_dtoa_r+0xa60>
 800a996:	9b04      	ldr	r3, [sp, #16]
 800a998:	3301      	adds	r3, #1
 800a99a:	9304      	str	r3, [sp, #16]
 800a99c:	2331      	movs	r3, #49	@ 0x31
 800a99e:	f88a 3000 	strb.w	r3, [sl]
 800a9a2:	e5b9      	b.n	800a518 <_dtoa_r+0x698>
 800a9a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a9a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800aa04 <_dtoa_r+0xb84>
 800a9aa:	b11b      	cbz	r3, 800a9b4 <_dtoa_r+0xb34>
 800a9ac:	f10a 0308 	add.w	r3, sl, #8
 800a9b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a9b2:	6013      	str	r3, [r2, #0]
 800a9b4:	4650      	mov	r0, sl
 800a9b6:	b019      	add	sp, #100	@ 0x64
 800a9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	f77f ae37 	ble.w	800a632 <_dtoa_r+0x7b2>
 800a9c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9c8:	2001      	movs	r0, #1
 800a9ca:	e655      	b.n	800a678 <_dtoa_r+0x7f8>
 800a9cc:	9b00      	ldr	r3, [sp, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f77f aed6 	ble.w	800a780 <_dtoa_r+0x900>
 800a9d4:	4656      	mov	r6, sl
 800a9d6:	4621      	mov	r1, r4
 800a9d8:	4648      	mov	r0, r9
 800a9da:	f7ff f9c6 	bl	8009d6a <quorem>
 800a9de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a9e2:	f806 8b01 	strb.w	r8, [r6], #1
 800a9e6:	9b00      	ldr	r3, [sp, #0]
 800a9e8:	eba6 020a 	sub.w	r2, r6, sl
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	ddb3      	ble.n	800a958 <_dtoa_r+0xad8>
 800a9f0:	4649      	mov	r1, r9
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	220a      	movs	r2, #10
 800a9f6:	4658      	mov	r0, fp
 800a9f8:	f000 f968 	bl	800accc <__multadd>
 800a9fc:	4681      	mov	r9, r0
 800a9fe:	e7ea      	b.n	800a9d6 <_dtoa_r+0xb56>
 800aa00:	0800d1d8 	.word	0x0800d1d8
 800aa04:	0800d15c 	.word	0x0800d15c

0800aa08 <_free_r>:
 800aa08:	b538      	push	{r3, r4, r5, lr}
 800aa0a:	4605      	mov	r5, r0
 800aa0c:	2900      	cmp	r1, #0
 800aa0e:	d041      	beq.n	800aa94 <_free_r+0x8c>
 800aa10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa14:	1f0c      	subs	r4, r1, #4
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	bfb8      	it	lt
 800aa1a:	18e4      	addlt	r4, r4, r3
 800aa1c:	f000 f8e8 	bl	800abf0 <__malloc_lock>
 800aa20:	4a1d      	ldr	r2, [pc, #116]	@ (800aa98 <_free_r+0x90>)
 800aa22:	6813      	ldr	r3, [r2, #0]
 800aa24:	b933      	cbnz	r3, 800aa34 <_free_r+0x2c>
 800aa26:	6063      	str	r3, [r4, #4]
 800aa28:	6014      	str	r4, [r2, #0]
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa30:	f000 b8e4 	b.w	800abfc <__malloc_unlock>
 800aa34:	42a3      	cmp	r3, r4
 800aa36:	d908      	bls.n	800aa4a <_free_r+0x42>
 800aa38:	6820      	ldr	r0, [r4, #0]
 800aa3a:	1821      	adds	r1, r4, r0
 800aa3c:	428b      	cmp	r3, r1
 800aa3e:	bf01      	itttt	eq
 800aa40:	6819      	ldreq	r1, [r3, #0]
 800aa42:	685b      	ldreq	r3, [r3, #4]
 800aa44:	1809      	addeq	r1, r1, r0
 800aa46:	6021      	streq	r1, [r4, #0]
 800aa48:	e7ed      	b.n	800aa26 <_free_r+0x1e>
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	b10b      	cbz	r3, 800aa54 <_free_r+0x4c>
 800aa50:	42a3      	cmp	r3, r4
 800aa52:	d9fa      	bls.n	800aa4a <_free_r+0x42>
 800aa54:	6811      	ldr	r1, [r2, #0]
 800aa56:	1850      	adds	r0, r2, r1
 800aa58:	42a0      	cmp	r0, r4
 800aa5a:	d10b      	bne.n	800aa74 <_free_r+0x6c>
 800aa5c:	6820      	ldr	r0, [r4, #0]
 800aa5e:	4401      	add	r1, r0
 800aa60:	1850      	adds	r0, r2, r1
 800aa62:	4283      	cmp	r3, r0
 800aa64:	6011      	str	r1, [r2, #0]
 800aa66:	d1e0      	bne.n	800aa2a <_free_r+0x22>
 800aa68:	6818      	ldr	r0, [r3, #0]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	6053      	str	r3, [r2, #4]
 800aa6e:	4408      	add	r0, r1
 800aa70:	6010      	str	r0, [r2, #0]
 800aa72:	e7da      	b.n	800aa2a <_free_r+0x22>
 800aa74:	d902      	bls.n	800aa7c <_free_r+0x74>
 800aa76:	230c      	movs	r3, #12
 800aa78:	602b      	str	r3, [r5, #0]
 800aa7a:	e7d6      	b.n	800aa2a <_free_r+0x22>
 800aa7c:	6820      	ldr	r0, [r4, #0]
 800aa7e:	1821      	adds	r1, r4, r0
 800aa80:	428b      	cmp	r3, r1
 800aa82:	bf04      	itt	eq
 800aa84:	6819      	ldreq	r1, [r3, #0]
 800aa86:	685b      	ldreq	r3, [r3, #4]
 800aa88:	6063      	str	r3, [r4, #4]
 800aa8a:	bf04      	itt	eq
 800aa8c:	1809      	addeq	r1, r1, r0
 800aa8e:	6021      	streq	r1, [r4, #0]
 800aa90:	6054      	str	r4, [r2, #4]
 800aa92:	e7ca      	b.n	800aa2a <_free_r+0x22>
 800aa94:	bd38      	pop	{r3, r4, r5, pc}
 800aa96:	bf00      	nop
 800aa98:	20000814 	.word	0x20000814

0800aa9c <malloc>:
 800aa9c:	4b02      	ldr	r3, [pc, #8]	@ (800aaa8 <malloc+0xc>)
 800aa9e:	4601      	mov	r1, r0
 800aaa0:	6818      	ldr	r0, [r3, #0]
 800aaa2:	f000 b825 	b.w	800aaf0 <_malloc_r>
 800aaa6:	bf00      	nop
 800aaa8:	2000002c 	.word	0x2000002c

0800aaac <sbrk_aligned>:
 800aaac:	b570      	push	{r4, r5, r6, lr}
 800aaae:	4e0f      	ldr	r6, [pc, #60]	@ (800aaec <sbrk_aligned+0x40>)
 800aab0:	460c      	mov	r4, r1
 800aab2:	6831      	ldr	r1, [r6, #0]
 800aab4:	4605      	mov	r5, r0
 800aab6:	b911      	cbnz	r1, 800aabe <sbrk_aligned+0x12>
 800aab8:	f000 fe46 	bl	800b748 <_sbrk_r>
 800aabc:	6030      	str	r0, [r6, #0]
 800aabe:	4621      	mov	r1, r4
 800aac0:	4628      	mov	r0, r5
 800aac2:	f000 fe41 	bl	800b748 <_sbrk_r>
 800aac6:	1c43      	adds	r3, r0, #1
 800aac8:	d103      	bne.n	800aad2 <sbrk_aligned+0x26>
 800aaca:	f04f 34ff 	mov.w	r4, #4294967295
 800aace:	4620      	mov	r0, r4
 800aad0:	bd70      	pop	{r4, r5, r6, pc}
 800aad2:	1cc4      	adds	r4, r0, #3
 800aad4:	f024 0403 	bic.w	r4, r4, #3
 800aad8:	42a0      	cmp	r0, r4
 800aada:	d0f8      	beq.n	800aace <sbrk_aligned+0x22>
 800aadc:	1a21      	subs	r1, r4, r0
 800aade:	4628      	mov	r0, r5
 800aae0:	f000 fe32 	bl	800b748 <_sbrk_r>
 800aae4:	3001      	adds	r0, #1
 800aae6:	d1f2      	bne.n	800aace <sbrk_aligned+0x22>
 800aae8:	e7ef      	b.n	800aaca <sbrk_aligned+0x1e>
 800aaea:	bf00      	nop
 800aaec:	20000810 	.word	0x20000810

0800aaf0 <_malloc_r>:
 800aaf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaf4:	1ccd      	adds	r5, r1, #3
 800aaf6:	f025 0503 	bic.w	r5, r5, #3
 800aafa:	3508      	adds	r5, #8
 800aafc:	2d0c      	cmp	r5, #12
 800aafe:	bf38      	it	cc
 800ab00:	250c      	movcc	r5, #12
 800ab02:	2d00      	cmp	r5, #0
 800ab04:	4606      	mov	r6, r0
 800ab06:	db01      	blt.n	800ab0c <_malloc_r+0x1c>
 800ab08:	42a9      	cmp	r1, r5
 800ab0a:	d904      	bls.n	800ab16 <_malloc_r+0x26>
 800ab0c:	230c      	movs	r3, #12
 800ab0e:	6033      	str	r3, [r6, #0]
 800ab10:	2000      	movs	r0, #0
 800ab12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800abec <_malloc_r+0xfc>
 800ab1a:	f000 f869 	bl	800abf0 <__malloc_lock>
 800ab1e:	f8d8 3000 	ldr.w	r3, [r8]
 800ab22:	461c      	mov	r4, r3
 800ab24:	bb44      	cbnz	r4, 800ab78 <_malloc_r+0x88>
 800ab26:	4629      	mov	r1, r5
 800ab28:	4630      	mov	r0, r6
 800ab2a:	f7ff ffbf 	bl	800aaac <sbrk_aligned>
 800ab2e:	1c43      	adds	r3, r0, #1
 800ab30:	4604      	mov	r4, r0
 800ab32:	d158      	bne.n	800abe6 <_malloc_r+0xf6>
 800ab34:	f8d8 4000 	ldr.w	r4, [r8]
 800ab38:	4627      	mov	r7, r4
 800ab3a:	2f00      	cmp	r7, #0
 800ab3c:	d143      	bne.n	800abc6 <_malloc_r+0xd6>
 800ab3e:	2c00      	cmp	r4, #0
 800ab40:	d04b      	beq.n	800abda <_malloc_r+0xea>
 800ab42:	6823      	ldr	r3, [r4, #0]
 800ab44:	4639      	mov	r1, r7
 800ab46:	4630      	mov	r0, r6
 800ab48:	eb04 0903 	add.w	r9, r4, r3
 800ab4c:	f000 fdfc 	bl	800b748 <_sbrk_r>
 800ab50:	4581      	cmp	r9, r0
 800ab52:	d142      	bne.n	800abda <_malloc_r+0xea>
 800ab54:	6821      	ldr	r1, [r4, #0]
 800ab56:	1a6d      	subs	r5, r5, r1
 800ab58:	4629      	mov	r1, r5
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	f7ff ffa6 	bl	800aaac <sbrk_aligned>
 800ab60:	3001      	adds	r0, #1
 800ab62:	d03a      	beq.n	800abda <_malloc_r+0xea>
 800ab64:	6823      	ldr	r3, [r4, #0]
 800ab66:	442b      	add	r3, r5
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	f8d8 3000 	ldr.w	r3, [r8]
 800ab6e:	685a      	ldr	r2, [r3, #4]
 800ab70:	bb62      	cbnz	r2, 800abcc <_malloc_r+0xdc>
 800ab72:	f8c8 7000 	str.w	r7, [r8]
 800ab76:	e00f      	b.n	800ab98 <_malloc_r+0xa8>
 800ab78:	6822      	ldr	r2, [r4, #0]
 800ab7a:	1b52      	subs	r2, r2, r5
 800ab7c:	d420      	bmi.n	800abc0 <_malloc_r+0xd0>
 800ab7e:	2a0b      	cmp	r2, #11
 800ab80:	d917      	bls.n	800abb2 <_malloc_r+0xc2>
 800ab82:	1961      	adds	r1, r4, r5
 800ab84:	42a3      	cmp	r3, r4
 800ab86:	6025      	str	r5, [r4, #0]
 800ab88:	bf18      	it	ne
 800ab8a:	6059      	strne	r1, [r3, #4]
 800ab8c:	6863      	ldr	r3, [r4, #4]
 800ab8e:	bf08      	it	eq
 800ab90:	f8c8 1000 	streq.w	r1, [r8]
 800ab94:	5162      	str	r2, [r4, r5]
 800ab96:	604b      	str	r3, [r1, #4]
 800ab98:	4630      	mov	r0, r6
 800ab9a:	f000 f82f 	bl	800abfc <__malloc_unlock>
 800ab9e:	f104 000b 	add.w	r0, r4, #11
 800aba2:	1d23      	adds	r3, r4, #4
 800aba4:	f020 0007 	bic.w	r0, r0, #7
 800aba8:	1ac2      	subs	r2, r0, r3
 800abaa:	bf1c      	itt	ne
 800abac:	1a1b      	subne	r3, r3, r0
 800abae:	50a3      	strne	r3, [r4, r2]
 800abb0:	e7af      	b.n	800ab12 <_malloc_r+0x22>
 800abb2:	6862      	ldr	r2, [r4, #4]
 800abb4:	42a3      	cmp	r3, r4
 800abb6:	bf0c      	ite	eq
 800abb8:	f8c8 2000 	streq.w	r2, [r8]
 800abbc:	605a      	strne	r2, [r3, #4]
 800abbe:	e7eb      	b.n	800ab98 <_malloc_r+0xa8>
 800abc0:	4623      	mov	r3, r4
 800abc2:	6864      	ldr	r4, [r4, #4]
 800abc4:	e7ae      	b.n	800ab24 <_malloc_r+0x34>
 800abc6:	463c      	mov	r4, r7
 800abc8:	687f      	ldr	r7, [r7, #4]
 800abca:	e7b6      	b.n	800ab3a <_malloc_r+0x4a>
 800abcc:	461a      	mov	r2, r3
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	42a3      	cmp	r3, r4
 800abd2:	d1fb      	bne.n	800abcc <_malloc_r+0xdc>
 800abd4:	2300      	movs	r3, #0
 800abd6:	6053      	str	r3, [r2, #4]
 800abd8:	e7de      	b.n	800ab98 <_malloc_r+0xa8>
 800abda:	230c      	movs	r3, #12
 800abdc:	6033      	str	r3, [r6, #0]
 800abde:	4630      	mov	r0, r6
 800abe0:	f000 f80c 	bl	800abfc <__malloc_unlock>
 800abe4:	e794      	b.n	800ab10 <_malloc_r+0x20>
 800abe6:	6005      	str	r5, [r0, #0]
 800abe8:	e7d6      	b.n	800ab98 <_malloc_r+0xa8>
 800abea:	bf00      	nop
 800abec:	20000814 	.word	0x20000814

0800abf0 <__malloc_lock>:
 800abf0:	4801      	ldr	r0, [pc, #4]	@ (800abf8 <__malloc_lock+0x8>)
 800abf2:	f7ff b8b8 	b.w	8009d66 <__retarget_lock_acquire_recursive>
 800abf6:	bf00      	nop
 800abf8:	2000080c 	.word	0x2000080c

0800abfc <__malloc_unlock>:
 800abfc:	4801      	ldr	r0, [pc, #4]	@ (800ac04 <__malloc_unlock+0x8>)
 800abfe:	f7ff b8b3 	b.w	8009d68 <__retarget_lock_release_recursive>
 800ac02:	bf00      	nop
 800ac04:	2000080c 	.word	0x2000080c

0800ac08 <_Balloc>:
 800ac08:	b570      	push	{r4, r5, r6, lr}
 800ac0a:	69c6      	ldr	r6, [r0, #28]
 800ac0c:	4604      	mov	r4, r0
 800ac0e:	460d      	mov	r5, r1
 800ac10:	b976      	cbnz	r6, 800ac30 <_Balloc+0x28>
 800ac12:	2010      	movs	r0, #16
 800ac14:	f7ff ff42 	bl	800aa9c <malloc>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	61e0      	str	r0, [r4, #28]
 800ac1c:	b920      	cbnz	r0, 800ac28 <_Balloc+0x20>
 800ac1e:	4b18      	ldr	r3, [pc, #96]	@ (800ac80 <_Balloc+0x78>)
 800ac20:	4818      	ldr	r0, [pc, #96]	@ (800ac84 <_Balloc+0x7c>)
 800ac22:	216b      	movs	r1, #107	@ 0x6b
 800ac24:	f000 fdae 	bl	800b784 <__assert_func>
 800ac28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac2c:	6006      	str	r6, [r0, #0]
 800ac2e:	60c6      	str	r6, [r0, #12]
 800ac30:	69e6      	ldr	r6, [r4, #28]
 800ac32:	68f3      	ldr	r3, [r6, #12]
 800ac34:	b183      	cbz	r3, 800ac58 <_Balloc+0x50>
 800ac36:	69e3      	ldr	r3, [r4, #28]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac3e:	b9b8      	cbnz	r0, 800ac70 <_Balloc+0x68>
 800ac40:	2101      	movs	r1, #1
 800ac42:	fa01 f605 	lsl.w	r6, r1, r5
 800ac46:	1d72      	adds	r2, r6, #5
 800ac48:	0092      	lsls	r2, r2, #2
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f000 fdb8 	bl	800b7c0 <_calloc_r>
 800ac50:	b160      	cbz	r0, 800ac6c <_Balloc+0x64>
 800ac52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac56:	e00e      	b.n	800ac76 <_Balloc+0x6e>
 800ac58:	2221      	movs	r2, #33	@ 0x21
 800ac5a:	2104      	movs	r1, #4
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	f000 fdaf 	bl	800b7c0 <_calloc_r>
 800ac62:	69e3      	ldr	r3, [r4, #28]
 800ac64:	60f0      	str	r0, [r6, #12]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1e4      	bne.n	800ac36 <_Balloc+0x2e>
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	bd70      	pop	{r4, r5, r6, pc}
 800ac70:	6802      	ldr	r2, [r0, #0]
 800ac72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac76:	2300      	movs	r3, #0
 800ac78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac7c:	e7f7      	b.n	800ac6e <_Balloc+0x66>
 800ac7e:	bf00      	nop
 800ac80:	0800d169 	.word	0x0800d169
 800ac84:	0800d1e9 	.word	0x0800d1e9

0800ac88 <_Bfree>:
 800ac88:	b570      	push	{r4, r5, r6, lr}
 800ac8a:	69c6      	ldr	r6, [r0, #28]
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	460c      	mov	r4, r1
 800ac90:	b976      	cbnz	r6, 800acb0 <_Bfree+0x28>
 800ac92:	2010      	movs	r0, #16
 800ac94:	f7ff ff02 	bl	800aa9c <malloc>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	61e8      	str	r0, [r5, #28]
 800ac9c:	b920      	cbnz	r0, 800aca8 <_Bfree+0x20>
 800ac9e:	4b09      	ldr	r3, [pc, #36]	@ (800acc4 <_Bfree+0x3c>)
 800aca0:	4809      	ldr	r0, [pc, #36]	@ (800acc8 <_Bfree+0x40>)
 800aca2:	218f      	movs	r1, #143	@ 0x8f
 800aca4:	f000 fd6e 	bl	800b784 <__assert_func>
 800aca8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acac:	6006      	str	r6, [r0, #0]
 800acae:	60c6      	str	r6, [r0, #12]
 800acb0:	b13c      	cbz	r4, 800acc2 <_Bfree+0x3a>
 800acb2:	69eb      	ldr	r3, [r5, #28]
 800acb4:	6862      	ldr	r2, [r4, #4]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800acbc:	6021      	str	r1, [r4, #0]
 800acbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800acc2:	bd70      	pop	{r4, r5, r6, pc}
 800acc4:	0800d169 	.word	0x0800d169
 800acc8:	0800d1e9 	.word	0x0800d1e9

0800accc <__multadd>:
 800accc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd0:	690d      	ldr	r5, [r1, #16]
 800acd2:	4607      	mov	r7, r0
 800acd4:	460c      	mov	r4, r1
 800acd6:	461e      	mov	r6, r3
 800acd8:	f101 0c14 	add.w	ip, r1, #20
 800acdc:	2000      	movs	r0, #0
 800acde:	f8dc 3000 	ldr.w	r3, [ip]
 800ace2:	b299      	uxth	r1, r3
 800ace4:	fb02 6101 	mla	r1, r2, r1, r6
 800ace8:	0c1e      	lsrs	r6, r3, #16
 800acea:	0c0b      	lsrs	r3, r1, #16
 800acec:	fb02 3306 	mla	r3, r2, r6, r3
 800acf0:	b289      	uxth	r1, r1
 800acf2:	3001      	adds	r0, #1
 800acf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800acf8:	4285      	cmp	r5, r0
 800acfa:	f84c 1b04 	str.w	r1, [ip], #4
 800acfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad02:	dcec      	bgt.n	800acde <__multadd+0x12>
 800ad04:	b30e      	cbz	r6, 800ad4a <__multadd+0x7e>
 800ad06:	68a3      	ldr	r3, [r4, #8]
 800ad08:	42ab      	cmp	r3, r5
 800ad0a:	dc19      	bgt.n	800ad40 <__multadd+0x74>
 800ad0c:	6861      	ldr	r1, [r4, #4]
 800ad0e:	4638      	mov	r0, r7
 800ad10:	3101      	adds	r1, #1
 800ad12:	f7ff ff79 	bl	800ac08 <_Balloc>
 800ad16:	4680      	mov	r8, r0
 800ad18:	b928      	cbnz	r0, 800ad26 <__multadd+0x5a>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	4b0c      	ldr	r3, [pc, #48]	@ (800ad50 <__multadd+0x84>)
 800ad1e:	480d      	ldr	r0, [pc, #52]	@ (800ad54 <__multadd+0x88>)
 800ad20:	21ba      	movs	r1, #186	@ 0xba
 800ad22:	f000 fd2f 	bl	800b784 <__assert_func>
 800ad26:	6922      	ldr	r2, [r4, #16]
 800ad28:	3202      	adds	r2, #2
 800ad2a:	f104 010c 	add.w	r1, r4, #12
 800ad2e:	0092      	lsls	r2, r2, #2
 800ad30:	300c      	adds	r0, #12
 800ad32:	f000 fd19 	bl	800b768 <memcpy>
 800ad36:	4621      	mov	r1, r4
 800ad38:	4638      	mov	r0, r7
 800ad3a:	f7ff ffa5 	bl	800ac88 <_Bfree>
 800ad3e:	4644      	mov	r4, r8
 800ad40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad44:	3501      	adds	r5, #1
 800ad46:	615e      	str	r6, [r3, #20]
 800ad48:	6125      	str	r5, [r4, #16]
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad50:	0800d1d8 	.word	0x0800d1d8
 800ad54:	0800d1e9 	.word	0x0800d1e9

0800ad58 <__hi0bits>:
 800ad58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	bf36      	itet	cc
 800ad60:	0403      	lslcc	r3, r0, #16
 800ad62:	2000      	movcs	r0, #0
 800ad64:	2010      	movcc	r0, #16
 800ad66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ad6a:	bf3c      	itt	cc
 800ad6c:	021b      	lslcc	r3, r3, #8
 800ad6e:	3008      	addcc	r0, #8
 800ad70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad74:	bf3c      	itt	cc
 800ad76:	011b      	lslcc	r3, r3, #4
 800ad78:	3004      	addcc	r0, #4
 800ad7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad7e:	bf3c      	itt	cc
 800ad80:	009b      	lslcc	r3, r3, #2
 800ad82:	3002      	addcc	r0, #2
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	db05      	blt.n	800ad94 <__hi0bits+0x3c>
 800ad88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ad8c:	f100 0001 	add.w	r0, r0, #1
 800ad90:	bf08      	it	eq
 800ad92:	2020      	moveq	r0, #32
 800ad94:	4770      	bx	lr

0800ad96 <__lo0bits>:
 800ad96:	6803      	ldr	r3, [r0, #0]
 800ad98:	4602      	mov	r2, r0
 800ad9a:	f013 0007 	ands.w	r0, r3, #7
 800ad9e:	d00b      	beq.n	800adb8 <__lo0bits+0x22>
 800ada0:	07d9      	lsls	r1, r3, #31
 800ada2:	d421      	bmi.n	800ade8 <__lo0bits+0x52>
 800ada4:	0798      	lsls	r0, r3, #30
 800ada6:	bf49      	itett	mi
 800ada8:	085b      	lsrmi	r3, r3, #1
 800adaa:	089b      	lsrpl	r3, r3, #2
 800adac:	2001      	movmi	r0, #1
 800adae:	6013      	strmi	r3, [r2, #0]
 800adb0:	bf5c      	itt	pl
 800adb2:	6013      	strpl	r3, [r2, #0]
 800adb4:	2002      	movpl	r0, #2
 800adb6:	4770      	bx	lr
 800adb8:	b299      	uxth	r1, r3
 800adba:	b909      	cbnz	r1, 800adc0 <__lo0bits+0x2a>
 800adbc:	0c1b      	lsrs	r3, r3, #16
 800adbe:	2010      	movs	r0, #16
 800adc0:	b2d9      	uxtb	r1, r3
 800adc2:	b909      	cbnz	r1, 800adc8 <__lo0bits+0x32>
 800adc4:	3008      	adds	r0, #8
 800adc6:	0a1b      	lsrs	r3, r3, #8
 800adc8:	0719      	lsls	r1, r3, #28
 800adca:	bf04      	itt	eq
 800adcc:	091b      	lsreq	r3, r3, #4
 800adce:	3004      	addeq	r0, #4
 800add0:	0799      	lsls	r1, r3, #30
 800add2:	bf04      	itt	eq
 800add4:	089b      	lsreq	r3, r3, #2
 800add6:	3002      	addeq	r0, #2
 800add8:	07d9      	lsls	r1, r3, #31
 800adda:	d403      	bmi.n	800ade4 <__lo0bits+0x4e>
 800addc:	085b      	lsrs	r3, r3, #1
 800adde:	f100 0001 	add.w	r0, r0, #1
 800ade2:	d003      	beq.n	800adec <__lo0bits+0x56>
 800ade4:	6013      	str	r3, [r2, #0]
 800ade6:	4770      	bx	lr
 800ade8:	2000      	movs	r0, #0
 800adea:	4770      	bx	lr
 800adec:	2020      	movs	r0, #32
 800adee:	4770      	bx	lr

0800adf0 <__i2b>:
 800adf0:	b510      	push	{r4, lr}
 800adf2:	460c      	mov	r4, r1
 800adf4:	2101      	movs	r1, #1
 800adf6:	f7ff ff07 	bl	800ac08 <_Balloc>
 800adfa:	4602      	mov	r2, r0
 800adfc:	b928      	cbnz	r0, 800ae0a <__i2b+0x1a>
 800adfe:	4b05      	ldr	r3, [pc, #20]	@ (800ae14 <__i2b+0x24>)
 800ae00:	4805      	ldr	r0, [pc, #20]	@ (800ae18 <__i2b+0x28>)
 800ae02:	f240 1145 	movw	r1, #325	@ 0x145
 800ae06:	f000 fcbd 	bl	800b784 <__assert_func>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	6144      	str	r4, [r0, #20]
 800ae0e:	6103      	str	r3, [r0, #16]
 800ae10:	bd10      	pop	{r4, pc}
 800ae12:	bf00      	nop
 800ae14:	0800d1d8 	.word	0x0800d1d8
 800ae18:	0800d1e9 	.word	0x0800d1e9

0800ae1c <__multiply>:
 800ae1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae20:	4614      	mov	r4, r2
 800ae22:	690a      	ldr	r2, [r1, #16]
 800ae24:	6923      	ldr	r3, [r4, #16]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	bfa8      	it	ge
 800ae2a:	4623      	movge	r3, r4
 800ae2c:	460f      	mov	r7, r1
 800ae2e:	bfa4      	itt	ge
 800ae30:	460c      	movge	r4, r1
 800ae32:	461f      	movge	r7, r3
 800ae34:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ae38:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ae3c:	68a3      	ldr	r3, [r4, #8]
 800ae3e:	6861      	ldr	r1, [r4, #4]
 800ae40:	eb0a 0609 	add.w	r6, sl, r9
 800ae44:	42b3      	cmp	r3, r6
 800ae46:	b085      	sub	sp, #20
 800ae48:	bfb8      	it	lt
 800ae4a:	3101      	addlt	r1, #1
 800ae4c:	f7ff fedc 	bl	800ac08 <_Balloc>
 800ae50:	b930      	cbnz	r0, 800ae60 <__multiply+0x44>
 800ae52:	4602      	mov	r2, r0
 800ae54:	4b44      	ldr	r3, [pc, #272]	@ (800af68 <__multiply+0x14c>)
 800ae56:	4845      	ldr	r0, [pc, #276]	@ (800af6c <__multiply+0x150>)
 800ae58:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ae5c:	f000 fc92 	bl	800b784 <__assert_func>
 800ae60:	f100 0514 	add.w	r5, r0, #20
 800ae64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae68:	462b      	mov	r3, r5
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	4543      	cmp	r3, r8
 800ae6e:	d321      	bcc.n	800aeb4 <__multiply+0x98>
 800ae70:	f107 0114 	add.w	r1, r7, #20
 800ae74:	f104 0214 	add.w	r2, r4, #20
 800ae78:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ae7c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ae80:	9302      	str	r3, [sp, #8]
 800ae82:	1b13      	subs	r3, r2, r4
 800ae84:	3b15      	subs	r3, #21
 800ae86:	f023 0303 	bic.w	r3, r3, #3
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	f104 0715 	add.w	r7, r4, #21
 800ae90:	42ba      	cmp	r2, r7
 800ae92:	bf38      	it	cc
 800ae94:	2304      	movcc	r3, #4
 800ae96:	9301      	str	r3, [sp, #4]
 800ae98:	9b02      	ldr	r3, [sp, #8]
 800ae9a:	9103      	str	r1, [sp, #12]
 800ae9c:	428b      	cmp	r3, r1
 800ae9e:	d80c      	bhi.n	800aeba <__multiply+0x9e>
 800aea0:	2e00      	cmp	r6, #0
 800aea2:	dd03      	ble.n	800aeac <__multiply+0x90>
 800aea4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d05b      	beq.n	800af64 <__multiply+0x148>
 800aeac:	6106      	str	r6, [r0, #16]
 800aeae:	b005      	add	sp, #20
 800aeb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb4:	f843 2b04 	str.w	r2, [r3], #4
 800aeb8:	e7d8      	b.n	800ae6c <__multiply+0x50>
 800aeba:	f8b1 a000 	ldrh.w	sl, [r1]
 800aebe:	f1ba 0f00 	cmp.w	sl, #0
 800aec2:	d024      	beq.n	800af0e <__multiply+0xf2>
 800aec4:	f104 0e14 	add.w	lr, r4, #20
 800aec8:	46a9      	mov	r9, r5
 800aeca:	f04f 0c00 	mov.w	ip, #0
 800aece:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aed2:	f8d9 3000 	ldr.w	r3, [r9]
 800aed6:	fa1f fb87 	uxth.w	fp, r7
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	fb0a 330b 	mla	r3, sl, fp, r3
 800aee0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aee4:	f8d9 7000 	ldr.w	r7, [r9]
 800aee8:	4463      	add	r3, ip
 800aeea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aeee:	fb0a c70b 	mla	r7, sl, fp, ip
 800aef2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aefc:	4572      	cmp	r2, lr
 800aefe:	f849 3b04 	str.w	r3, [r9], #4
 800af02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800af06:	d8e2      	bhi.n	800aece <__multiply+0xb2>
 800af08:	9b01      	ldr	r3, [sp, #4]
 800af0a:	f845 c003 	str.w	ip, [r5, r3]
 800af0e:	9b03      	ldr	r3, [sp, #12]
 800af10:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800af14:	3104      	adds	r1, #4
 800af16:	f1b9 0f00 	cmp.w	r9, #0
 800af1a:	d021      	beq.n	800af60 <__multiply+0x144>
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	f104 0c14 	add.w	ip, r4, #20
 800af22:	46ae      	mov	lr, r5
 800af24:	f04f 0a00 	mov.w	sl, #0
 800af28:	f8bc b000 	ldrh.w	fp, [ip]
 800af2c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800af30:	fb09 770b 	mla	r7, r9, fp, r7
 800af34:	4457      	add	r7, sl
 800af36:	b29b      	uxth	r3, r3
 800af38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800af3c:	f84e 3b04 	str.w	r3, [lr], #4
 800af40:	f85c 3b04 	ldr.w	r3, [ip], #4
 800af44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af48:	f8be 3000 	ldrh.w	r3, [lr]
 800af4c:	fb09 330a 	mla	r3, r9, sl, r3
 800af50:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800af54:	4562      	cmp	r2, ip
 800af56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af5a:	d8e5      	bhi.n	800af28 <__multiply+0x10c>
 800af5c:	9f01      	ldr	r7, [sp, #4]
 800af5e:	51eb      	str	r3, [r5, r7]
 800af60:	3504      	adds	r5, #4
 800af62:	e799      	b.n	800ae98 <__multiply+0x7c>
 800af64:	3e01      	subs	r6, #1
 800af66:	e79b      	b.n	800aea0 <__multiply+0x84>
 800af68:	0800d1d8 	.word	0x0800d1d8
 800af6c:	0800d1e9 	.word	0x0800d1e9

0800af70 <__pow5mult>:
 800af70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af74:	4615      	mov	r5, r2
 800af76:	f012 0203 	ands.w	r2, r2, #3
 800af7a:	4607      	mov	r7, r0
 800af7c:	460e      	mov	r6, r1
 800af7e:	d007      	beq.n	800af90 <__pow5mult+0x20>
 800af80:	4c25      	ldr	r4, [pc, #148]	@ (800b018 <__pow5mult+0xa8>)
 800af82:	3a01      	subs	r2, #1
 800af84:	2300      	movs	r3, #0
 800af86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af8a:	f7ff fe9f 	bl	800accc <__multadd>
 800af8e:	4606      	mov	r6, r0
 800af90:	10ad      	asrs	r5, r5, #2
 800af92:	d03d      	beq.n	800b010 <__pow5mult+0xa0>
 800af94:	69fc      	ldr	r4, [r7, #28]
 800af96:	b97c      	cbnz	r4, 800afb8 <__pow5mult+0x48>
 800af98:	2010      	movs	r0, #16
 800af9a:	f7ff fd7f 	bl	800aa9c <malloc>
 800af9e:	4602      	mov	r2, r0
 800afa0:	61f8      	str	r0, [r7, #28]
 800afa2:	b928      	cbnz	r0, 800afb0 <__pow5mult+0x40>
 800afa4:	4b1d      	ldr	r3, [pc, #116]	@ (800b01c <__pow5mult+0xac>)
 800afa6:	481e      	ldr	r0, [pc, #120]	@ (800b020 <__pow5mult+0xb0>)
 800afa8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800afac:	f000 fbea 	bl	800b784 <__assert_func>
 800afb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afb4:	6004      	str	r4, [r0, #0]
 800afb6:	60c4      	str	r4, [r0, #12]
 800afb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800afbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afc0:	b94c      	cbnz	r4, 800afd6 <__pow5mult+0x66>
 800afc2:	f240 2171 	movw	r1, #625	@ 0x271
 800afc6:	4638      	mov	r0, r7
 800afc8:	f7ff ff12 	bl	800adf0 <__i2b>
 800afcc:	2300      	movs	r3, #0
 800afce:	f8c8 0008 	str.w	r0, [r8, #8]
 800afd2:	4604      	mov	r4, r0
 800afd4:	6003      	str	r3, [r0, #0]
 800afd6:	f04f 0900 	mov.w	r9, #0
 800afda:	07eb      	lsls	r3, r5, #31
 800afdc:	d50a      	bpl.n	800aff4 <__pow5mult+0x84>
 800afde:	4631      	mov	r1, r6
 800afe0:	4622      	mov	r2, r4
 800afe2:	4638      	mov	r0, r7
 800afe4:	f7ff ff1a 	bl	800ae1c <__multiply>
 800afe8:	4631      	mov	r1, r6
 800afea:	4680      	mov	r8, r0
 800afec:	4638      	mov	r0, r7
 800afee:	f7ff fe4b 	bl	800ac88 <_Bfree>
 800aff2:	4646      	mov	r6, r8
 800aff4:	106d      	asrs	r5, r5, #1
 800aff6:	d00b      	beq.n	800b010 <__pow5mult+0xa0>
 800aff8:	6820      	ldr	r0, [r4, #0]
 800affa:	b938      	cbnz	r0, 800b00c <__pow5mult+0x9c>
 800affc:	4622      	mov	r2, r4
 800affe:	4621      	mov	r1, r4
 800b000:	4638      	mov	r0, r7
 800b002:	f7ff ff0b 	bl	800ae1c <__multiply>
 800b006:	6020      	str	r0, [r4, #0]
 800b008:	f8c0 9000 	str.w	r9, [r0]
 800b00c:	4604      	mov	r4, r0
 800b00e:	e7e4      	b.n	800afda <__pow5mult+0x6a>
 800b010:	4630      	mov	r0, r6
 800b012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b016:	bf00      	nop
 800b018:	0800d244 	.word	0x0800d244
 800b01c:	0800d169 	.word	0x0800d169
 800b020:	0800d1e9 	.word	0x0800d1e9

0800b024 <__lshift>:
 800b024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b028:	460c      	mov	r4, r1
 800b02a:	6849      	ldr	r1, [r1, #4]
 800b02c:	6923      	ldr	r3, [r4, #16]
 800b02e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b032:	68a3      	ldr	r3, [r4, #8]
 800b034:	4607      	mov	r7, r0
 800b036:	4691      	mov	r9, r2
 800b038:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b03c:	f108 0601 	add.w	r6, r8, #1
 800b040:	42b3      	cmp	r3, r6
 800b042:	db0b      	blt.n	800b05c <__lshift+0x38>
 800b044:	4638      	mov	r0, r7
 800b046:	f7ff fddf 	bl	800ac08 <_Balloc>
 800b04a:	4605      	mov	r5, r0
 800b04c:	b948      	cbnz	r0, 800b062 <__lshift+0x3e>
 800b04e:	4602      	mov	r2, r0
 800b050:	4b28      	ldr	r3, [pc, #160]	@ (800b0f4 <__lshift+0xd0>)
 800b052:	4829      	ldr	r0, [pc, #164]	@ (800b0f8 <__lshift+0xd4>)
 800b054:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b058:	f000 fb94 	bl	800b784 <__assert_func>
 800b05c:	3101      	adds	r1, #1
 800b05e:	005b      	lsls	r3, r3, #1
 800b060:	e7ee      	b.n	800b040 <__lshift+0x1c>
 800b062:	2300      	movs	r3, #0
 800b064:	f100 0114 	add.w	r1, r0, #20
 800b068:	f100 0210 	add.w	r2, r0, #16
 800b06c:	4618      	mov	r0, r3
 800b06e:	4553      	cmp	r3, sl
 800b070:	db33      	blt.n	800b0da <__lshift+0xb6>
 800b072:	6920      	ldr	r0, [r4, #16]
 800b074:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b078:	f104 0314 	add.w	r3, r4, #20
 800b07c:	f019 091f 	ands.w	r9, r9, #31
 800b080:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b084:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b088:	d02b      	beq.n	800b0e2 <__lshift+0xbe>
 800b08a:	f1c9 0e20 	rsb	lr, r9, #32
 800b08e:	468a      	mov	sl, r1
 800b090:	2200      	movs	r2, #0
 800b092:	6818      	ldr	r0, [r3, #0]
 800b094:	fa00 f009 	lsl.w	r0, r0, r9
 800b098:	4310      	orrs	r0, r2
 800b09a:	f84a 0b04 	str.w	r0, [sl], #4
 800b09e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0a2:	459c      	cmp	ip, r3
 800b0a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b0a8:	d8f3      	bhi.n	800b092 <__lshift+0x6e>
 800b0aa:	ebac 0304 	sub.w	r3, ip, r4
 800b0ae:	3b15      	subs	r3, #21
 800b0b0:	f023 0303 	bic.w	r3, r3, #3
 800b0b4:	3304      	adds	r3, #4
 800b0b6:	f104 0015 	add.w	r0, r4, #21
 800b0ba:	4584      	cmp	ip, r0
 800b0bc:	bf38      	it	cc
 800b0be:	2304      	movcc	r3, #4
 800b0c0:	50ca      	str	r2, [r1, r3]
 800b0c2:	b10a      	cbz	r2, 800b0c8 <__lshift+0xa4>
 800b0c4:	f108 0602 	add.w	r6, r8, #2
 800b0c8:	3e01      	subs	r6, #1
 800b0ca:	4638      	mov	r0, r7
 800b0cc:	612e      	str	r6, [r5, #16]
 800b0ce:	4621      	mov	r1, r4
 800b0d0:	f7ff fdda 	bl	800ac88 <_Bfree>
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0da:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0de:	3301      	adds	r3, #1
 800b0e0:	e7c5      	b.n	800b06e <__lshift+0x4a>
 800b0e2:	3904      	subs	r1, #4
 800b0e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0ec:	459c      	cmp	ip, r3
 800b0ee:	d8f9      	bhi.n	800b0e4 <__lshift+0xc0>
 800b0f0:	e7ea      	b.n	800b0c8 <__lshift+0xa4>
 800b0f2:	bf00      	nop
 800b0f4:	0800d1d8 	.word	0x0800d1d8
 800b0f8:	0800d1e9 	.word	0x0800d1e9

0800b0fc <__mcmp>:
 800b0fc:	690a      	ldr	r2, [r1, #16]
 800b0fe:	4603      	mov	r3, r0
 800b100:	6900      	ldr	r0, [r0, #16]
 800b102:	1a80      	subs	r0, r0, r2
 800b104:	b530      	push	{r4, r5, lr}
 800b106:	d10e      	bne.n	800b126 <__mcmp+0x2a>
 800b108:	3314      	adds	r3, #20
 800b10a:	3114      	adds	r1, #20
 800b10c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b110:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b114:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b118:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b11c:	4295      	cmp	r5, r2
 800b11e:	d003      	beq.n	800b128 <__mcmp+0x2c>
 800b120:	d205      	bcs.n	800b12e <__mcmp+0x32>
 800b122:	f04f 30ff 	mov.w	r0, #4294967295
 800b126:	bd30      	pop	{r4, r5, pc}
 800b128:	42a3      	cmp	r3, r4
 800b12a:	d3f3      	bcc.n	800b114 <__mcmp+0x18>
 800b12c:	e7fb      	b.n	800b126 <__mcmp+0x2a>
 800b12e:	2001      	movs	r0, #1
 800b130:	e7f9      	b.n	800b126 <__mcmp+0x2a>
	...

0800b134 <__mdiff>:
 800b134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b138:	4689      	mov	r9, r1
 800b13a:	4606      	mov	r6, r0
 800b13c:	4611      	mov	r1, r2
 800b13e:	4648      	mov	r0, r9
 800b140:	4614      	mov	r4, r2
 800b142:	f7ff ffdb 	bl	800b0fc <__mcmp>
 800b146:	1e05      	subs	r5, r0, #0
 800b148:	d112      	bne.n	800b170 <__mdiff+0x3c>
 800b14a:	4629      	mov	r1, r5
 800b14c:	4630      	mov	r0, r6
 800b14e:	f7ff fd5b 	bl	800ac08 <_Balloc>
 800b152:	4602      	mov	r2, r0
 800b154:	b928      	cbnz	r0, 800b162 <__mdiff+0x2e>
 800b156:	4b3f      	ldr	r3, [pc, #252]	@ (800b254 <__mdiff+0x120>)
 800b158:	f240 2137 	movw	r1, #567	@ 0x237
 800b15c:	483e      	ldr	r0, [pc, #248]	@ (800b258 <__mdiff+0x124>)
 800b15e:	f000 fb11 	bl	800b784 <__assert_func>
 800b162:	2301      	movs	r3, #1
 800b164:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b168:	4610      	mov	r0, r2
 800b16a:	b003      	add	sp, #12
 800b16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b170:	bfbc      	itt	lt
 800b172:	464b      	movlt	r3, r9
 800b174:	46a1      	movlt	r9, r4
 800b176:	4630      	mov	r0, r6
 800b178:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b17c:	bfba      	itte	lt
 800b17e:	461c      	movlt	r4, r3
 800b180:	2501      	movlt	r5, #1
 800b182:	2500      	movge	r5, #0
 800b184:	f7ff fd40 	bl	800ac08 <_Balloc>
 800b188:	4602      	mov	r2, r0
 800b18a:	b918      	cbnz	r0, 800b194 <__mdiff+0x60>
 800b18c:	4b31      	ldr	r3, [pc, #196]	@ (800b254 <__mdiff+0x120>)
 800b18e:	f240 2145 	movw	r1, #581	@ 0x245
 800b192:	e7e3      	b.n	800b15c <__mdiff+0x28>
 800b194:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b198:	6926      	ldr	r6, [r4, #16]
 800b19a:	60c5      	str	r5, [r0, #12]
 800b19c:	f109 0310 	add.w	r3, r9, #16
 800b1a0:	f109 0514 	add.w	r5, r9, #20
 800b1a4:	f104 0e14 	add.w	lr, r4, #20
 800b1a8:	f100 0b14 	add.w	fp, r0, #20
 800b1ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b1b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b1b4:	9301      	str	r3, [sp, #4]
 800b1b6:	46d9      	mov	r9, fp
 800b1b8:	f04f 0c00 	mov.w	ip, #0
 800b1bc:	9b01      	ldr	r3, [sp, #4]
 800b1be:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b1c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b1c6:	9301      	str	r3, [sp, #4]
 800b1c8:	fa1f f38a 	uxth.w	r3, sl
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	b283      	uxth	r3, r0
 800b1d0:	1acb      	subs	r3, r1, r3
 800b1d2:	0c00      	lsrs	r0, r0, #16
 800b1d4:	4463      	add	r3, ip
 800b1d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b1da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b1e4:	4576      	cmp	r6, lr
 800b1e6:	f849 3b04 	str.w	r3, [r9], #4
 800b1ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b1ee:	d8e5      	bhi.n	800b1bc <__mdiff+0x88>
 800b1f0:	1b33      	subs	r3, r6, r4
 800b1f2:	3b15      	subs	r3, #21
 800b1f4:	f023 0303 	bic.w	r3, r3, #3
 800b1f8:	3415      	adds	r4, #21
 800b1fa:	3304      	adds	r3, #4
 800b1fc:	42a6      	cmp	r6, r4
 800b1fe:	bf38      	it	cc
 800b200:	2304      	movcc	r3, #4
 800b202:	441d      	add	r5, r3
 800b204:	445b      	add	r3, fp
 800b206:	461e      	mov	r6, r3
 800b208:	462c      	mov	r4, r5
 800b20a:	4544      	cmp	r4, r8
 800b20c:	d30e      	bcc.n	800b22c <__mdiff+0xf8>
 800b20e:	f108 0103 	add.w	r1, r8, #3
 800b212:	1b49      	subs	r1, r1, r5
 800b214:	f021 0103 	bic.w	r1, r1, #3
 800b218:	3d03      	subs	r5, #3
 800b21a:	45a8      	cmp	r8, r5
 800b21c:	bf38      	it	cc
 800b21e:	2100      	movcc	r1, #0
 800b220:	440b      	add	r3, r1
 800b222:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b226:	b191      	cbz	r1, 800b24e <__mdiff+0x11a>
 800b228:	6117      	str	r7, [r2, #16]
 800b22a:	e79d      	b.n	800b168 <__mdiff+0x34>
 800b22c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b230:	46e6      	mov	lr, ip
 800b232:	0c08      	lsrs	r0, r1, #16
 800b234:	fa1c fc81 	uxtah	ip, ip, r1
 800b238:	4471      	add	r1, lr
 800b23a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b23e:	b289      	uxth	r1, r1
 800b240:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b244:	f846 1b04 	str.w	r1, [r6], #4
 800b248:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b24c:	e7dd      	b.n	800b20a <__mdiff+0xd6>
 800b24e:	3f01      	subs	r7, #1
 800b250:	e7e7      	b.n	800b222 <__mdiff+0xee>
 800b252:	bf00      	nop
 800b254:	0800d1d8 	.word	0x0800d1d8
 800b258:	0800d1e9 	.word	0x0800d1e9

0800b25c <__d2b>:
 800b25c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b260:	460f      	mov	r7, r1
 800b262:	2101      	movs	r1, #1
 800b264:	ec59 8b10 	vmov	r8, r9, d0
 800b268:	4616      	mov	r6, r2
 800b26a:	f7ff fccd 	bl	800ac08 <_Balloc>
 800b26e:	4604      	mov	r4, r0
 800b270:	b930      	cbnz	r0, 800b280 <__d2b+0x24>
 800b272:	4602      	mov	r2, r0
 800b274:	4b23      	ldr	r3, [pc, #140]	@ (800b304 <__d2b+0xa8>)
 800b276:	4824      	ldr	r0, [pc, #144]	@ (800b308 <__d2b+0xac>)
 800b278:	f240 310f 	movw	r1, #783	@ 0x30f
 800b27c:	f000 fa82 	bl	800b784 <__assert_func>
 800b280:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b284:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b288:	b10d      	cbz	r5, 800b28e <__d2b+0x32>
 800b28a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b28e:	9301      	str	r3, [sp, #4]
 800b290:	f1b8 0300 	subs.w	r3, r8, #0
 800b294:	d023      	beq.n	800b2de <__d2b+0x82>
 800b296:	4668      	mov	r0, sp
 800b298:	9300      	str	r3, [sp, #0]
 800b29a:	f7ff fd7c 	bl	800ad96 <__lo0bits>
 800b29e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b2a2:	b1d0      	cbz	r0, 800b2da <__d2b+0x7e>
 800b2a4:	f1c0 0320 	rsb	r3, r0, #32
 800b2a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ac:	430b      	orrs	r3, r1
 800b2ae:	40c2      	lsrs	r2, r0
 800b2b0:	6163      	str	r3, [r4, #20]
 800b2b2:	9201      	str	r2, [sp, #4]
 800b2b4:	9b01      	ldr	r3, [sp, #4]
 800b2b6:	61a3      	str	r3, [r4, #24]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	bf0c      	ite	eq
 800b2bc:	2201      	moveq	r2, #1
 800b2be:	2202      	movne	r2, #2
 800b2c0:	6122      	str	r2, [r4, #16]
 800b2c2:	b1a5      	cbz	r5, 800b2ee <__d2b+0x92>
 800b2c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b2c8:	4405      	add	r5, r0
 800b2ca:	603d      	str	r5, [r7, #0]
 800b2cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b2d0:	6030      	str	r0, [r6, #0]
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	b003      	add	sp, #12
 800b2d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2da:	6161      	str	r1, [r4, #20]
 800b2dc:	e7ea      	b.n	800b2b4 <__d2b+0x58>
 800b2de:	a801      	add	r0, sp, #4
 800b2e0:	f7ff fd59 	bl	800ad96 <__lo0bits>
 800b2e4:	9b01      	ldr	r3, [sp, #4]
 800b2e6:	6163      	str	r3, [r4, #20]
 800b2e8:	3020      	adds	r0, #32
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	e7e8      	b.n	800b2c0 <__d2b+0x64>
 800b2ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b2f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b2f6:	6038      	str	r0, [r7, #0]
 800b2f8:	6918      	ldr	r0, [r3, #16]
 800b2fa:	f7ff fd2d 	bl	800ad58 <__hi0bits>
 800b2fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b302:	e7e5      	b.n	800b2d0 <__d2b+0x74>
 800b304:	0800d1d8 	.word	0x0800d1d8
 800b308:	0800d1e9 	.word	0x0800d1e9

0800b30c <__ssputs_r>:
 800b30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b310:	688e      	ldr	r6, [r1, #8]
 800b312:	461f      	mov	r7, r3
 800b314:	42be      	cmp	r6, r7
 800b316:	680b      	ldr	r3, [r1, #0]
 800b318:	4682      	mov	sl, r0
 800b31a:	460c      	mov	r4, r1
 800b31c:	4690      	mov	r8, r2
 800b31e:	d82d      	bhi.n	800b37c <__ssputs_r+0x70>
 800b320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b324:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b328:	d026      	beq.n	800b378 <__ssputs_r+0x6c>
 800b32a:	6965      	ldr	r5, [r4, #20]
 800b32c:	6909      	ldr	r1, [r1, #16]
 800b32e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b332:	eba3 0901 	sub.w	r9, r3, r1
 800b336:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b33a:	1c7b      	adds	r3, r7, #1
 800b33c:	444b      	add	r3, r9
 800b33e:	106d      	asrs	r5, r5, #1
 800b340:	429d      	cmp	r5, r3
 800b342:	bf38      	it	cc
 800b344:	461d      	movcc	r5, r3
 800b346:	0553      	lsls	r3, r2, #21
 800b348:	d527      	bpl.n	800b39a <__ssputs_r+0x8e>
 800b34a:	4629      	mov	r1, r5
 800b34c:	f7ff fbd0 	bl	800aaf0 <_malloc_r>
 800b350:	4606      	mov	r6, r0
 800b352:	b360      	cbz	r0, 800b3ae <__ssputs_r+0xa2>
 800b354:	6921      	ldr	r1, [r4, #16]
 800b356:	464a      	mov	r2, r9
 800b358:	f000 fa06 	bl	800b768 <memcpy>
 800b35c:	89a3      	ldrh	r3, [r4, #12]
 800b35e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b366:	81a3      	strh	r3, [r4, #12]
 800b368:	6126      	str	r6, [r4, #16]
 800b36a:	6165      	str	r5, [r4, #20]
 800b36c:	444e      	add	r6, r9
 800b36e:	eba5 0509 	sub.w	r5, r5, r9
 800b372:	6026      	str	r6, [r4, #0]
 800b374:	60a5      	str	r5, [r4, #8]
 800b376:	463e      	mov	r6, r7
 800b378:	42be      	cmp	r6, r7
 800b37a:	d900      	bls.n	800b37e <__ssputs_r+0x72>
 800b37c:	463e      	mov	r6, r7
 800b37e:	6820      	ldr	r0, [r4, #0]
 800b380:	4632      	mov	r2, r6
 800b382:	4641      	mov	r1, r8
 800b384:	f000 f9c6 	bl	800b714 <memmove>
 800b388:	68a3      	ldr	r3, [r4, #8]
 800b38a:	1b9b      	subs	r3, r3, r6
 800b38c:	60a3      	str	r3, [r4, #8]
 800b38e:	6823      	ldr	r3, [r4, #0]
 800b390:	4433      	add	r3, r6
 800b392:	6023      	str	r3, [r4, #0]
 800b394:	2000      	movs	r0, #0
 800b396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b39a:	462a      	mov	r2, r5
 800b39c:	f000 fa36 	bl	800b80c <_realloc_r>
 800b3a0:	4606      	mov	r6, r0
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	d1e0      	bne.n	800b368 <__ssputs_r+0x5c>
 800b3a6:	6921      	ldr	r1, [r4, #16]
 800b3a8:	4650      	mov	r0, sl
 800b3aa:	f7ff fb2d 	bl	800aa08 <_free_r>
 800b3ae:	230c      	movs	r3, #12
 800b3b0:	f8ca 3000 	str.w	r3, [sl]
 800b3b4:	89a3      	ldrh	r3, [r4, #12]
 800b3b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3ba:	81a3      	strh	r3, [r4, #12]
 800b3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c0:	e7e9      	b.n	800b396 <__ssputs_r+0x8a>
	...

0800b3c4 <_svfiprintf_r>:
 800b3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c8:	4698      	mov	r8, r3
 800b3ca:	898b      	ldrh	r3, [r1, #12]
 800b3cc:	061b      	lsls	r3, r3, #24
 800b3ce:	b09d      	sub	sp, #116	@ 0x74
 800b3d0:	4607      	mov	r7, r0
 800b3d2:	460d      	mov	r5, r1
 800b3d4:	4614      	mov	r4, r2
 800b3d6:	d510      	bpl.n	800b3fa <_svfiprintf_r+0x36>
 800b3d8:	690b      	ldr	r3, [r1, #16]
 800b3da:	b973      	cbnz	r3, 800b3fa <_svfiprintf_r+0x36>
 800b3dc:	2140      	movs	r1, #64	@ 0x40
 800b3de:	f7ff fb87 	bl	800aaf0 <_malloc_r>
 800b3e2:	6028      	str	r0, [r5, #0]
 800b3e4:	6128      	str	r0, [r5, #16]
 800b3e6:	b930      	cbnz	r0, 800b3f6 <_svfiprintf_r+0x32>
 800b3e8:	230c      	movs	r3, #12
 800b3ea:	603b      	str	r3, [r7, #0]
 800b3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f0:	b01d      	add	sp, #116	@ 0x74
 800b3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f6:	2340      	movs	r3, #64	@ 0x40
 800b3f8:	616b      	str	r3, [r5, #20]
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3fe:	2320      	movs	r3, #32
 800b400:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b404:	f8cd 800c 	str.w	r8, [sp, #12]
 800b408:	2330      	movs	r3, #48	@ 0x30
 800b40a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b5a8 <_svfiprintf_r+0x1e4>
 800b40e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b412:	f04f 0901 	mov.w	r9, #1
 800b416:	4623      	mov	r3, r4
 800b418:	469a      	mov	sl, r3
 800b41a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b41e:	b10a      	cbz	r2, 800b424 <_svfiprintf_r+0x60>
 800b420:	2a25      	cmp	r2, #37	@ 0x25
 800b422:	d1f9      	bne.n	800b418 <_svfiprintf_r+0x54>
 800b424:	ebba 0b04 	subs.w	fp, sl, r4
 800b428:	d00b      	beq.n	800b442 <_svfiprintf_r+0x7e>
 800b42a:	465b      	mov	r3, fp
 800b42c:	4622      	mov	r2, r4
 800b42e:	4629      	mov	r1, r5
 800b430:	4638      	mov	r0, r7
 800b432:	f7ff ff6b 	bl	800b30c <__ssputs_r>
 800b436:	3001      	adds	r0, #1
 800b438:	f000 80a7 	beq.w	800b58a <_svfiprintf_r+0x1c6>
 800b43c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b43e:	445a      	add	r2, fp
 800b440:	9209      	str	r2, [sp, #36]	@ 0x24
 800b442:	f89a 3000 	ldrb.w	r3, [sl]
 800b446:	2b00      	cmp	r3, #0
 800b448:	f000 809f 	beq.w	800b58a <_svfiprintf_r+0x1c6>
 800b44c:	2300      	movs	r3, #0
 800b44e:	f04f 32ff 	mov.w	r2, #4294967295
 800b452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b456:	f10a 0a01 	add.w	sl, sl, #1
 800b45a:	9304      	str	r3, [sp, #16]
 800b45c:	9307      	str	r3, [sp, #28]
 800b45e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b462:	931a      	str	r3, [sp, #104]	@ 0x68
 800b464:	4654      	mov	r4, sl
 800b466:	2205      	movs	r2, #5
 800b468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b46c:	484e      	ldr	r0, [pc, #312]	@ (800b5a8 <_svfiprintf_r+0x1e4>)
 800b46e:	f7f4 fed7 	bl	8000220 <memchr>
 800b472:	9a04      	ldr	r2, [sp, #16]
 800b474:	b9d8      	cbnz	r0, 800b4ae <_svfiprintf_r+0xea>
 800b476:	06d0      	lsls	r0, r2, #27
 800b478:	bf44      	itt	mi
 800b47a:	2320      	movmi	r3, #32
 800b47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b480:	0711      	lsls	r1, r2, #28
 800b482:	bf44      	itt	mi
 800b484:	232b      	movmi	r3, #43	@ 0x2b
 800b486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b48a:	f89a 3000 	ldrb.w	r3, [sl]
 800b48e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b490:	d015      	beq.n	800b4be <_svfiprintf_r+0xfa>
 800b492:	9a07      	ldr	r2, [sp, #28]
 800b494:	4654      	mov	r4, sl
 800b496:	2000      	movs	r0, #0
 800b498:	f04f 0c0a 	mov.w	ip, #10
 800b49c:	4621      	mov	r1, r4
 800b49e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4a2:	3b30      	subs	r3, #48	@ 0x30
 800b4a4:	2b09      	cmp	r3, #9
 800b4a6:	d94b      	bls.n	800b540 <_svfiprintf_r+0x17c>
 800b4a8:	b1b0      	cbz	r0, 800b4d8 <_svfiprintf_r+0x114>
 800b4aa:	9207      	str	r2, [sp, #28]
 800b4ac:	e014      	b.n	800b4d8 <_svfiprintf_r+0x114>
 800b4ae:	eba0 0308 	sub.w	r3, r0, r8
 800b4b2:	fa09 f303 	lsl.w	r3, r9, r3
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	9304      	str	r3, [sp, #16]
 800b4ba:	46a2      	mov	sl, r4
 800b4bc:	e7d2      	b.n	800b464 <_svfiprintf_r+0xa0>
 800b4be:	9b03      	ldr	r3, [sp, #12]
 800b4c0:	1d19      	adds	r1, r3, #4
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	9103      	str	r1, [sp, #12]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	bfbb      	ittet	lt
 800b4ca:	425b      	neglt	r3, r3
 800b4cc:	f042 0202 	orrlt.w	r2, r2, #2
 800b4d0:	9307      	strge	r3, [sp, #28]
 800b4d2:	9307      	strlt	r3, [sp, #28]
 800b4d4:	bfb8      	it	lt
 800b4d6:	9204      	strlt	r2, [sp, #16]
 800b4d8:	7823      	ldrb	r3, [r4, #0]
 800b4da:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4dc:	d10a      	bne.n	800b4f4 <_svfiprintf_r+0x130>
 800b4de:	7863      	ldrb	r3, [r4, #1]
 800b4e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4e2:	d132      	bne.n	800b54a <_svfiprintf_r+0x186>
 800b4e4:	9b03      	ldr	r3, [sp, #12]
 800b4e6:	1d1a      	adds	r2, r3, #4
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	9203      	str	r2, [sp, #12]
 800b4ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4f0:	3402      	adds	r4, #2
 800b4f2:	9305      	str	r3, [sp, #20]
 800b4f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b5b8 <_svfiprintf_r+0x1f4>
 800b4f8:	7821      	ldrb	r1, [r4, #0]
 800b4fa:	2203      	movs	r2, #3
 800b4fc:	4650      	mov	r0, sl
 800b4fe:	f7f4 fe8f 	bl	8000220 <memchr>
 800b502:	b138      	cbz	r0, 800b514 <_svfiprintf_r+0x150>
 800b504:	9b04      	ldr	r3, [sp, #16]
 800b506:	eba0 000a 	sub.w	r0, r0, sl
 800b50a:	2240      	movs	r2, #64	@ 0x40
 800b50c:	4082      	lsls	r2, r0
 800b50e:	4313      	orrs	r3, r2
 800b510:	3401      	adds	r4, #1
 800b512:	9304      	str	r3, [sp, #16]
 800b514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b518:	4824      	ldr	r0, [pc, #144]	@ (800b5ac <_svfiprintf_r+0x1e8>)
 800b51a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b51e:	2206      	movs	r2, #6
 800b520:	f7f4 fe7e 	bl	8000220 <memchr>
 800b524:	2800      	cmp	r0, #0
 800b526:	d036      	beq.n	800b596 <_svfiprintf_r+0x1d2>
 800b528:	4b21      	ldr	r3, [pc, #132]	@ (800b5b0 <_svfiprintf_r+0x1ec>)
 800b52a:	bb1b      	cbnz	r3, 800b574 <_svfiprintf_r+0x1b0>
 800b52c:	9b03      	ldr	r3, [sp, #12]
 800b52e:	3307      	adds	r3, #7
 800b530:	f023 0307 	bic.w	r3, r3, #7
 800b534:	3308      	adds	r3, #8
 800b536:	9303      	str	r3, [sp, #12]
 800b538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b53a:	4433      	add	r3, r6
 800b53c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b53e:	e76a      	b.n	800b416 <_svfiprintf_r+0x52>
 800b540:	fb0c 3202 	mla	r2, ip, r2, r3
 800b544:	460c      	mov	r4, r1
 800b546:	2001      	movs	r0, #1
 800b548:	e7a8      	b.n	800b49c <_svfiprintf_r+0xd8>
 800b54a:	2300      	movs	r3, #0
 800b54c:	3401      	adds	r4, #1
 800b54e:	9305      	str	r3, [sp, #20]
 800b550:	4619      	mov	r1, r3
 800b552:	f04f 0c0a 	mov.w	ip, #10
 800b556:	4620      	mov	r0, r4
 800b558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b55c:	3a30      	subs	r2, #48	@ 0x30
 800b55e:	2a09      	cmp	r2, #9
 800b560:	d903      	bls.n	800b56a <_svfiprintf_r+0x1a6>
 800b562:	2b00      	cmp	r3, #0
 800b564:	d0c6      	beq.n	800b4f4 <_svfiprintf_r+0x130>
 800b566:	9105      	str	r1, [sp, #20]
 800b568:	e7c4      	b.n	800b4f4 <_svfiprintf_r+0x130>
 800b56a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b56e:	4604      	mov	r4, r0
 800b570:	2301      	movs	r3, #1
 800b572:	e7f0      	b.n	800b556 <_svfiprintf_r+0x192>
 800b574:	ab03      	add	r3, sp, #12
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	462a      	mov	r2, r5
 800b57a:	4b0e      	ldr	r3, [pc, #56]	@ (800b5b4 <_svfiprintf_r+0x1f0>)
 800b57c:	a904      	add	r1, sp, #16
 800b57e:	4638      	mov	r0, r7
 800b580:	f7fd fe96 	bl	80092b0 <_printf_float>
 800b584:	1c42      	adds	r2, r0, #1
 800b586:	4606      	mov	r6, r0
 800b588:	d1d6      	bne.n	800b538 <_svfiprintf_r+0x174>
 800b58a:	89ab      	ldrh	r3, [r5, #12]
 800b58c:	065b      	lsls	r3, r3, #25
 800b58e:	f53f af2d 	bmi.w	800b3ec <_svfiprintf_r+0x28>
 800b592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b594:	e72c      	b.n	800b3f0 <_svfiprintf_r+0x2c>
 800b596:	ab03      	add	r3, sp, #12
 800b598:	9300      	str	r3, [sp, #0]
 800b59a:	462a      	mov	r2, r5
 800b59c:	4b05      	ldr	r3, [pc, #20]	@ (800b5b4 <_svfiprintf_r+0x1f0>)
 800b59e:	a904      	add	r1, sp, #16
 800b5a0:	4638      	mov	r0, r7
 800b5a2:	f7fe f91d 	bl	80097e0 <_printf_i>
 800b5a6:	e7ed      	b.n	800b584 <_svfiprintf_r+0x1c0>
 800b5a8:	0800d340 	.word	0x0800d340
 800b5ac:	0800d34a 	.word	0x0800d34a
 800b5b0:	080092b1 	.word	0x080092b1
 800b5b4:	0800b30d 	.word	0x0800b30d
 800b5b8:	0800d346 	.word	0x0800d346

0800b5bc <__sflush_r>:
 800b5bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c4:	0716      	lsls	r6, r2, #28
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	460c      	mov	r4, r1
 800b5ca:	d454      	bmi.n	800b676 <__sflush_r+0xba>
 800b5cc:	684b      	ldr	r3, [r1, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	dc02      	bgt.n	800b5d8 <__sflush_r+0x1c>
 800b5d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	dd48      	ble.n	800b66a <__sflush_r+0xae>
 800b5d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5da:	2e00      	cmp	r6, #0
 800b5dc:	d045      	beq.n	800b66a <__sflush_r+0xae>
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b5e4:	682f      	ldr	r7, [r5, #0]
 800b5e6:	6a21      	ldr	r1, [r4, #32]
 800b5e8:	602b      	str	r3, [r5, #0]
 800b5ea:	d030      	beq.n	800b64e <__sflush_r+0x92>
 800b5ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b5ee:	89a3      	ldrh	r3, [r4, #12]
 800b5f0:	0759      	lsls	r1, r3, #29
 800b5f2:	d505      	bpl.n	800b600 <__sflush_r+0x44>
 800b5f4:	6863      	ldr	r3, [r4, #4]
 800b5f6:	1ad2      	subs	r2, r2, r3
 800b5f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b5fa:	b10b      	cbz	r3, 800b600 <__sflush_r+0x44>
 800b5fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b5fe:	1ad2      	subs	r2, r2, r3
 800b600:	2300      	movs	r3, #0
 800b602:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b604:	6a21      	ldr	r1, [r4, #32]
 800b606:	4628      	mov	r0, r5
 800b608:	47b0      	blx	r6
 800b60a:	1c43      	adds	r3, r0, #1
 800b60c:	89a3      	ldrh	r3, [r4, #12]
 800b60e:	d106      	bne.n	800b61e <__sflush_r+0x62>
 800b610:	6829      	ldr	r1, [r5, #0]
 800b612:	291d      	cmp	r1, #29
 800b614:	d82b      	bhi.n	800b66e <__sflush_r+0xb2>
 800b616:	4a2a      	ldr	r2, [pc, #168]	@ (800b6c0 <__sflush_r+0x104>)
 800b618:	410a      	asrs	r2, r1
 800b61a:	07d6      	lsls	r6, r2, #31
 800b61c:	d427      	bmi.n	800b66e <__sflush_r+0xb2>
 800b61e:	2200      	movs	r2, #0
 800b620:	6062      	str	r2, [r4, #4]
 800b622:	04d9      	lsls	r1, r3, #19
 800b624:	6922      	ldr	r2, [r4, #16]
 800b626:	6022      	str	r2, [r4, #0]
 800b628:	d504      	bpl.n	800b634 <__sflush_r+0x78>
 800b62a:	1c42      	adds	r2, r0, #1
 800b62c:	d101      	bne.n	800b632 <__sflush_r+0x76>
 800b62e:	682b      	ldr	r3, [r5, #0]
 800b630:	b903      	cbnz	r3, 800b634 <__sflush_r+0x78>
 800b632:	6560      	str	r0, [r4, #84]	@ 0x54
 800b634:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b636:	602f      	str	r7, [r5, #0]
 800b638:	b1b9      	cbz	r1, 800b66a <__sflush_r+0xae>
 800b63a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b63e:	4299      	cmp	r1, r3
 800b640:	d002      	beq.n	800b648 <__sflush_r+0x8c>
 800b642:	4628      	mov	r0, r5
 800b644:	f7ff f9e0 	bl	800aa08 <_free_r>
 800b648:	2300      	movs	r3, #0
 800b64a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b64c:	e00d      	b.n	800b66a <__sflush_r+0xae>
 800b64e:	2301      	movs	r3, #1
 800b650:	4628      	mov	r0, r5
 800b652:	47b0      	blx	r6
 800b654:	4602      	mov	r2, r0
 800b656:	1c50      	adds	r0, r2, #1
 800b658:	d1c9      	bne.n	800b5ee <__sflush_r+0x32>
 800b65a:	682b      	ldr	r3, [r5, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d0c6      	beq.n	800b5ee <__sflush_r+0x32>
 800b660:	2b1d      	cmp	r3, #29
 800b662:	d001      	beq.n	800b668 <__sflush_r+0xac>
 800b664:	2b16      	cmp	r3, #22
 800b666:	d11e      	bne.n	800b6a6 <__sflush_r+0xea>
 800b668:	602f      	str	r7, [r5, #0]
 800b66a:	2000      	movs	r0, #0
 800b66c:	e022      	b.n	800b6b4 <__sflush_r+0xf8>
 800b66e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b672:	b21b      	sxth	r3, r3
 800b674:	e01b      	b.n	800b6ae <__sflush_r+0xf2>
 800b676:	690f      	ldr	r7, [r1, #16]
 800b678:	2f00      	cmp	r7, #0
 800b67a:	d0f6      	beq.n	800b66a <__sflush_r+0xae>
 800b67c:	0793      	lsls	r3, r2, #30
 800b67e:	680e      	ldr	r6, [r1, #0]
 800b680:	bf08      	it	eq
 800b682:	694b      	ldreq	r3, [r1, #20]
 800b684:	600f      	str	r7, [r1, #0]
 800b686:	bf18      	it	ne
 800b688:	2300      	movne	r3, #0
 800b68a:	eba6 0807 	sub.w	r8, r6, r7
 800b68e:	608b      	str	r3, [r1, #8]
 800b690:	f1b8 0f00 	cmp.w	r8, #0
 800b694:	dde9      	ble.n	800b66a <__sflush_r+0xae>
 800b696:	6a21      	ldr	r1, [r4, #32]
 800b698:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b69a:	4643      	mov	r3, r8
 800b69c:	463a      	mov	r2, r7
 800b69e:	4628      	mov	r0, r5
 800b6a0:	47b0      	blx	r6
 800b6a2:	2800      	cmp	r0, #0
 800b6a4:	dc08      	bgt.n	800b6b8 <__sflush_r+0xfc>
 800b6a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6ae:	81a3      	strh	r3, [r4, #12]
 800b6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6b8:	4407      	add	r7, r0
 800b6ba:	eba8 0800 	sub.w	r8, r8, r0
 800b6be:	e7e7      	b.n	800b690 <__sflush_r+0xd4>
 800b6c0:	dfbffffe 	.word	0xdfbffffe

0800b6c4 <_fflush_r>:
 800b6c4:	b538      	push	{r3, r4, r5, lr}
 800b6c6:	690b      	ldr	r3, [r1, #16]
 800b6c8:	4605      	mov	r5, r0
 800b6ca:	460c      	mov	r4, r1
 800b6cc:	b913      	cbnz	r3, 800b6d4 <_fflush_r+0x10>
 800b6ce:	2500      	movs	r5, #0
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	bd38      	pop	{r3, r4, r5, pc}
 800b6d4:	b118      	cbz	r0, 800b6de <_fflush_r+0x1a>
 800b6d6:	6a03      	ldr	r3, [r0, #32]
 800b6d8:	b90b      	cbnz	r3, 800b6de <_fflush_r+0x1a>
 800b6da:	f7fe fa2d 	bl	8009b38 <__sinit>
 800b6de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d0f3      	beq.n	800b6ce <_fflush_r+0xa>
 800b6e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b6e8:	07d0      	lsls	r0, r2, #31
 800b6ea:	d404      	bmi.n	800b6f6 <_fflush_r+0x32>
 800b6ec:	0599      	lsls	r1, r3, #22
 800b6ee:	d402      	bmi.n	800b6f6 <_fflush_r+0x32>
 800b6f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6f2:	f7fe fb38 	bl	8009d66 <__retarget_lock_acquire_recursive>
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	4621      	mov	r1, r4
 800b6fa:	f7ff ff5f 	bl	800b5bc <__sflush_r>
 800b6fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b700:	07da      	lsls	r2, r3, #31
 800b702:	4605      	mov	r5, r0
 800b704:	d4e4      	bmi.n	800b6d0 <_fflush_r+0xc>
 800b706:	89a3      	ldrh	r3, [r4, #12]
 800b708:	059b      	lsls	r3, r3, #22
 800b70a:	d4e1      	bmi.n	800b6d0 <_fflush_r+0xc>
 800b70c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b70e:	f7fe fb2b 	bl	8009d68 <__retarget_lock_release_recursive>
 800b712:	e7dd      	b.n	800b6d0 <_fflush_r+0xc>

0800b714 <memmove>:
 800b714:	4288      	cmp	r0, r1
 800b716:	b510      	push	{r4, lr}
 800b718:	eb01 0402 	add.w	r4, r1, r2
 800b71c:	d902      	bls.n	800b724 <memmove+0x10>
 800b71e:	4284      	cmp	r4, r0
 800b720:	4623      	mov	r3, r4
 800b722:	d807      	bhi.n	800b734 <memmove+0x20>
 800b724:	1e43      	subs	r3, r0, #1
 800b726:	42a1      	cmp	r1, r4
 800b728:	d008      	beq.n	800b73c <memmove+0x28>
 800b72a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b72e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b732:	e7f8      	b.n	800b726 <memmove+0x12>
 800b734:	4402      	add	r2, r0
 800b736:	4601      	mov	r1, r0
 800b738:	428a      	cmp	r2, r1
 800b73a:	d100      	bne.n	800b73e <memmove+0x2a>
 800b73c:	bd10      	pop	{r4, pc}
 800b73e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b746:	e7f7      	b.n	800b738 <memmove+0x24>

0800b748 <_sbrk_r>:
 800b748:	b538      	push	{r3, r4, r5, lr}
 800b74a:	4d06      	ldr	r5, [pc, #24]	@ (800b764 <_sbrk_r+0x1c>)
 800b74c:	2300      	movs	r3, #0
 800b74e:	4604      	mov	r4, r0
 800b750:	4608      	mov	r0, r1
 800b752:	602b      	str	r3, [r5, #0]
 800b754:	f7f7 fa0a 	bl	8002b6c <_sbrk>
 800b758:	1c43      	adds	r3, r0, #1
 800b75a:	d102      	bne.n	800b762 <_sbrk_r+0x1a>
 800b75c:	682b      	ldr	r3, [r5, #0]
 800b75e:	b103      	cbz	r3, 800b762 <_sbrk_r+0x1a>
 800b760:	6023      	str	r3, [r4, #0]
 800b762:	bd38      	pop	{r3, r4, r5, pc}
 800b764:	20000808 	.word	0x20000808

0800b768 <memcpy>:
 800b768:	440a      	add	r2, r1
 800b76a:	4291      	cmp	r1, r2
 800b76c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b770:	d100      	bne.n	800b774 <memcpy+0xc>
 800b772:	4770      	bx	lr
 800b774:	b510      	push	{r4, lr}
 800b776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b77a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b77e:	4291      	cmp	r1, r2
 800b780:	d1f9      	bne.n	800b776 <memcpy+0xe>
 800b782:	bd10      	pop	{r4, pc}

0800b784 <__assert_func>:
 800b784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b786:	4614      	mov	r4, r2
 800b788:	461a      	mov	r2, r3
 800b78a:	4b09      	ldr	r3, [pc, #36]	@ (800b7b0 <__assert_func+0x2c>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4605      	mov	r5, r0
 800b790:	68d8      	ldr	r0, [r3, #12]
 800b792:	b954      	cbnz	r4, 800b7aa <__assert_func+0x26>
 800b794:	4b07      	ldr	r3, [pc, #28]	@ (800b7b4 <__assert_func+0x30>)
 800b796:	461c      	mov	r4, r3
 800b798:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b79c:	9100      	str	r1, [sp, #0]
 800b79e:	462b      	mov	r3, r5
 800b7a0:	4905      	ldr	r1, [pc, #20]	@ (800b7b8 <__assert_func+0x34>)
 800b7a2:	f000 f86f 	bl	800b884 <fiprintf>
 800b7a6:	f000 f87f 	bl	800b8a8 <abort>
 800b7aa:	4b04      	ldr	r3, [pc, #16]	@ (800b7bc <__assert_func+0x38>)
 800b7ac:	e7f4      	b.n	800b798 <__assert_func+0x14>
 800b7ae:	bf00      	nop
 800b7b0:	2000002c 	.word	0x2000002c
 800b7b4:	0800d396 	.word	0x0800d396
 800b7b8:	0800d368 	.word	0x0800d368
 800b7bc:	0800d35b 	.word	0x0800d35b

0800b7c0 <_calloc_r>:
 800b7c0:	b570      	push	{r4, r5, r6, lr}
 800b7c2:	fba1 5402 	umull	r5, r4, r1, r2
 800b7c6:	b93c      	cbnz	r4, 800b7d8 <_calloc_r+0x18>
 800b7c8:	4629      	mov	r1, r5
 800b7ca:	f7ff f991 	bl	800aaf0 <_malloc_r>
 800b7ce:	4606      	mov	r6, r0
 800b7d0:	b928      	cbnz	r0, 800b7de <_calloc_r+0x1e>
 800b7d2:	2600      	movs	r6, #0
 800b7d4:	4630      	mov	r0, r6
 800b7d6:	bd70      	pop	{r4, r5, r6, pc}
 800b7d8:	220c      	movs	r2, #12
 800b7da:	6002      	str	r2, [r0, #0]
 800b7dc:	e7f9      	b.n	800b7d2 <_calloc_r+0x12>
 800b7de:	462a      	mov	r2, r5
 800b7e0:	4621      	mov	r1, r4
 800b7e2:	f7fe fa42 	bl	8009c6a <memset>
 800b7e6:	e7f5      	b.n	800b7d4 <_calloc_r+0x14>

0800b7e8 <__ascii_mbtowc>:
 800b7e8:	b082      	sub	sp, #8
 800b7ea:	b901      	cbnz	r1, 800b7ee <__ascii_mbtowc+0x6>
 800b7ec:	a901      	add	r1, sp, #4
 800b7ee:	b142      	cbz	r2, 800b802 <__ascii_mbtowc+0x1a>
 800b7f0:	b14b      	cbz	r3, 800b806 <__ascii_mbtowc+0x1e>
 800b7f2:	7813      	ldrb	r3, [r2, #0]
 800b7f4:	600b      	str	r3, [r1, #0]
 800b7f6:	7812      	ldrb	r2, [r2, #0]
 800b7f8:	1e10      	subs	r0, r2, #0
 800b7fa:	bf18      	it	ne
 800b7fc:	2001      	movne	r0, #1
 800b7fe:	b002      	add	sp, #8
 800b800:	4770      	bx	lr
 800b802:	4610      	mov	r0, r2
 800b804:	e7fb      	b.n	800b7fe <__ascii_mbtowc+0x16>
 800b806:	f06f 0001 	mvn.w	r0, #1
 800b80a:	e7f8      	b.n	800b7fe <__ascii_mbtowc+0x16>

0800b80c <_realloc_r>:
 800b80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b810:	4680      	mov	r8, r0
 800b812:	4615      	mov	r5, r2
 800b814:	460c      	mov	r4, r1
 800b816:	b921      	cbnz	r1, 800b822 <_realloc_r+0x16>
 800b818:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b81c:	4611      	mov	r1, r2
 800b81e:	f7ff b967 	b.w	800aaf0 <_malloc_r>
 800b822:	b92a      	cbnz	r2, 800b830 <_realloc_r+0x24>
 800b824:	f7ff f8f0 	bl	800aa08 <_free_r>
 800b828:	2400      	movs	r4, #0
 800b82a:	4620      	mov	r0, r4
 800b82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b830:	f000 f841 	bl	800b8b6 <_malloc_usable_size_r>
 800b834:	4285      	cmp	r5, r0
 800b836:	4606      	mov	r6, r0
 800b838:	d802      	bhi.n	800b840 <_realloc_r+0x34>
 800b83a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b83e:	d8f4      	bhi.n	800b82a <_realloc_r+0x1e>
 800b840:	4629      	mov	r1, r5
 800b842:	4640      	mov	r0, r8
 800b844:	f7ff f954 	bl	800aaf0 <_malloc_r>
 800b848:	4607      	mov	r7, r0
 800b84a:	2800      	cmp	r0, #0
 800b84c:	d0ec      	beq.n	800b828 <_realloc_r+0x1c>
 800b84e:	42b5      	cmp	r5, r6
 800b850:	462a      	mov	r2, r5
 800b852:	4621      	mov	r1, r4
 800b854:	bf28      	it	cs
 800b856:	4632      	movcs	r2, r6
 800b858:	f7ff ff86 	bl	800b768 <memcpy>
 800b85c:	4621      	mov	r1, r4
 800b85e:	4640      	mov	r0, r8
 800b860:	f7ff f8d2 	bl	800aa08 <_free_r>
 800b864:	463c      	mov	r4, r7
 800b866:	e7e0      	b.n	800b82a <_realloc_r+0x1e>

0800b868 <__ascii_wctomb>:
 800b868:	4603      	mov	r3, r0
 800b86a:	4608      	mov	r0, r1
 800b86c:	b141      	cbz	r1, 800b880 <__ascii_wctomb+0x18>
 800b86e:	2aff      	cmp	r2, #255	@ 0xff
 800b870:	d904      	bls.n	800b87c <__ascii_wctomb+0x14>
 800b872:	228a      	movs	r2, #138	@ 0x8a
 800b874:	601a      	str	r2, [r3, #0]
 800b876:	f04f 30ff 	mov.w	r0, #4294967295
 800b87a:	4770      	bx	lr
 800b87c:	700a      	strb	r2, [r1, #0]
 800b87e:	2001      	movs	r0, #1
 800b880:	4770      	bx	lr
	...

0800b884 <fiprintf>:
 800b884:	b40e      	push	{r1, r2, r3}
 800b886:	b503      	push	{r0, r1, lr}
 800b888:	4601      	mov	r1, r0
 800b88a:	ab03      	add	r3, sp, #12
 800b88c:	4805      	ldr	r0, [pc, #20]	@ (800b8a4 <fiprintf+0x20>)
 800b88e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b892:	6800      	ldr	r0, [r0, #0]
 800b894:	9301      	str	r3, [sp, #4]
 800b896:	f000 f83f 	bl	800b918 <_vfiprintf_r>
 800b89a:	b002      	add	sp, #8
 800b89c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8a0:	b003      	add	sp, #12
 800b8a2:	4770      	bx	lr
 800b8a4:	2000002c 	.word	0x2000002c

0800b8a8 <abort>:
 800b8a8:	b508      	push	{r3, lr}
 800b8aa:	2006      	movs	r0, #6
 800b8ac:	f000 fa08 	bl	800bcc0 <raise>
 800b8b0:	2001      	movs	r0, #1
 800b8b2:	f7f7 f8e3 	bl	8002a7c <_exit>

0800b8b6 <_malloc_usable_size_r>:
 800b8b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8ba:	1f18      	subs	r0, r3, #4
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	bfbc      	itt	lt
 800b8c0:	580b      	ldrlt	r3, [r1, r0]
 800b8c2:	18c0      	addlt	r0, r0, r3
 800b8c4:	4770      	bx	lr

0800b8c6 <__sfputc_r>:
 800b8c6:	6893      	ldr	r3, [r2, #8]
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	b410      	push	{r4}
 800b8ce:	6093      	str	r3, [r2, #8]
 800b8d0:	da08      	bge.n	800b8e4 <__sfputc_r+0x1e>
 800b8d2:	6994      	ldr	r4, [r2, #24]
 800b8d4:	42a3      	cmp	r3, r4
 800b8d6:	db01      	blt.n	800b8dc <__sfputc_r+0x16>
 800b8d8:	290a      	cmp	r1, #10
 800b8da:	d103      	bne.n	800b8e4 <__sfputc_r+0x1e>
 800b8dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8e0:	f000 b932 	b.w	800bb48 <__swbuf_r>
 800b8e4:	6813      	ldr	r3, [r2, #0]
 800b8e6:	1c58      	adds	r0, r3, #1
 800b8e8:	6010      	str	r0, [r2, #0]
 800b8ea:	7019      	strb	r1, [r3, #0]
 800b8ec:	4608      	mov	r0, r1
 800b8ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8f2:	4770      	bx	lr

0800b8f4 <__sfputs_r>:
 800b8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	460f      	mov	r7, r1
 800b8fa:	4614      	mov	r4, r2
 800b8fc:	18d5      	adds	r5, r2, r3
 800b8fe:	42ac      	cmp	r4, r5
 800b900:	d101      	bne.n	800b906 <__sfputs_r+0x12>
 800b902:	2000      	movs	r0, #0
 800b904:	e007      	b.n	800b916 <__sfputs_r+0x22>
 800b906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b90a:	463a      	mov	r2, r7
 800b90c:	4630      	mov	r0, r6
 800b90e:	f7ff ffda 	bl	800b8c6 <__sfputc_r>
 800b912:	1c43      	adds	r3, r0, #1
 800b914:	d1f3      	bne.n	800b8fe <__sfputs_r+0xa>
 800b916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b918 <_vfiprintf_r>:
 800b918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b91c:	460d      	mov	r5, r1
 800b91e:	b09d      	sub	sp, #116	@ 0x74
 800b920:	4614      	mov	r4, r2
 800b922:	4698      	mov	r8, r3
 800b924:	4606      	mov	r6, r0
 800b926:	b118      	cbz	r0, 800b930 <_vfiprintf_r+0x18>
 800b928:	6a03      	ldr	r3, [r0, #32]
 800b92a:	b90b      	cbnz	r3, 800b930 <_vfiprintf_r+0x18>
 800b92c:	f7fe f904 	bl	8009b38 <__sinit>
 800b930:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b932:	07d9      	lsls	r1, r3, #31
 800b934:	d405      	bmi.n	800b942 <_vfiprintf_r+0x2a>
 800b936:	89ab      	ldrh	r3, [r5, #12]
 800b938:	059a      	lsls	r2, r3, #22
 800b93a:	d402      	bmi.n	800b942 <_vfiprintf_r+0x2a>
 800b93c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b93e:	f7fe fa12 	bl	8009d66 <__retarget_lock_acquire_recursive>
 800b942:	89ab      	ldrh	r3, [r5, #12]
 800b944:	071b      	lsls	r3, r3, #28
 800b946:	d501      	bpl.n	800b94c <_vfiprintf_r+0x34>
 800b948:	692b      	ldr	r3, [r5, #16]
 800b94a:	b99b      	cbnz	r3, 800b974 <_vfiprintf_r+0x5c>
 800b94c:	4629      	mov	r1, r5
 800b94e:	4630      	mov	r0, r6
 800b950:	f000 f938 	bl	800bbc4 <__swsetup_r>
 800b954:	b170      	cbz	r0, 800b974 <_vfiprintf_r+0x5c>
 800b956:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b958:	07dc      	lsls	r4, r3, #31
 800b95a:	d504      	bpl.n	800b966 <_vfiprintf_r+0x4e>
 800b95c:	f04f 30ff 	mov.w	r0, #4294967295
 800b960:	b01d      	add	sp, #116	@ 0x74
 800b962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b966:	89ab      	ldrh	r3, [r5, #12]
 800b968:	0598      	lsls	r0, r3, #22
 800b96a:	d4f7      	bmi.n	800b95c <_vfiprintf_r+0x44>
 800b96c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b96e:	f7fe f9fb 	bl	8009d68 <__retarget_lock_release_recursive>
 800b972:	e7f3      	b.n	800b95c <_vfiprintf_r+0x44>
 800b974:	2300      	movs	r3, #0
 800b976:	9309      	str	r3, [sp, #36]	@ 0x24
 800b978:	2320      	movs	r3, #32
 800b97a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b97e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b982:	2330      	movs	r3, #48	@ 0x30
 800b984:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bb34 <_vfiprintf_r+0x21c>
 800b988:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b98c:	f04f 0901 	mov.w	r9, #1
 800b990:	4623      	mov	r3, r4
 800b992:	469a      	mov	sl, r3
 800b994:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b998:	b10a      	cbz	r2, 800b99e <_vfiprintf_r+0x86>
 800b99a:	2a25      	cmp	r2, #37	@ 0x25
 800b99c:	d1f9      	bne.n	800b992 <_vfiprintf_r+0x7a>
 800b99e:	ebba 0b04 	subs.w	fp, sl, r4
 800b9a2:	d00b      	beq.n	800b9bc <_vfiprintf_r+0xa4>
 800b9a4:	465b      	mov	r3, fp
 800b9a6:	4622      	mov	r2, r4
 800b9a8:	4629      	mov	r1, r5
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	f7ff ffa2 	bl	800b8f4 <__sfputs_r>
 800b9b0:	3001      	adds	r0, #1
 800b9b2:	f000 80a7 	beq.w	800bb04 <_vfiprintf_r+0x1ec>
 800b9b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9b8:	445a      	add	r2, fp
 800b9ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f000 809f 	beq.w	800bb04 <_vfiprintf_r+0x1ec>
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9d0:	f10a 0a01 	add.w	sl, sl, #1
 800b9d4:	9304      	str	r3, [sp, #16]
 800b9d6:	9307      	str	r3, [sp, #28]
 800b9d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9de:	4654      	mov	r4, sl
 800b9e0:	2205      	movs	r2, #5
 800b9e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9e6:	4853      	ldr	r0, [pc, #332]	@ (800bb34 <_vfiprintf_r+0x21c>)
 800b9e8:	f7f4 fc1a 	bl	8000220 <memchr>
 800b9ec:	9a04      	ldr	r2, [sp, #16]
 800b9ee:	b9d8      	cbnz	r0, 800ba28 <_vfiprintf_r+0x110>
 800b9f0:	06d1      	lsls	r1, r2, #27
 800b9f2:	bf44      	itt	mi
 800b9f4:	2320      	movmi	r3, #32
 800b9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9fa:	0713      	lsls	r3, r2, #28
 800b9fc:	bf44      	itt	mi
 800b9fe:	232b      	movmi	r3, #43	@ 0x2b
 800ba00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba04:	f89a 3000 	ldrb.w	r3, [sl]
 800ba08:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba0a:	d015      	beq.n	800ba38 <_vfiprintf_r+0x120>
 800ba0c:	9a07      	ldr	r2, [sp, #28]
 800ba0e:	4654      	mov	r4, sl
 800ba10:	2000      	movs	r0, #0
 800ba12:	f04f 0c0a 	mov.w	ip, #10
 800ba16:	4621      	mov	r1, r4
 800ba18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba1c:	3b30      	subs	r3, #48	@ 0x30
 800ba1e:	2b09      	cmp	r3, #9
 800ba20:	d94b      	bls.n	800baba <_vfiprintf_r+0x1a2>
 800ba22:	b1b0      	cbz	r0, 800ba52 <_vfiprintf_r+0x13a>
 800ba24:	9207      	str	r2, [sp, #28]
 800ba26:	e014      	b.n	800ba52 <_vfiprintf_r+0x13a>
 800ba28:	eba0 0308 	sub.w	r3, r0, r8
 800ba2c:	fa09 f303 	lsl.w	r3, r9, r3
 800ba30:	4313      	orrs	r3, r2
 800ba32:	9304      	str	r3, [sp, #16]
 800ba34:	46a2      	mov	sl, r4
 800ba36:	e7d2      	b.n	800b9de <_vfiprintf_r+0xc6>
 800ba38:	9b03      	ldr	r3, [sp, #12]
 800ba3a:	1d19      	adds	r1, r3, #4
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	9103      	str	r1, [sp, #12]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	bfbb      	ittet	lt
 800ba44:	425b      	neglt	r3, r3
 800ba46:	f042 0202 	orrlt.w	r2, r2, #2
 800ba4a:	9307      	strge	r3, [sp, #28]
 800ba4c:	9307      	strlt	r3, [sp, #28]
 800ba4e:	bfb8      	it	lt
 800ba50:	9204      	strlt	r2, [sp, #16]
 800ba52:	7823      	ldrb	r3, [r4, #0]
 800ba54:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba56:	d10a      	bne.n	800ba6e <_vfiprintf_r+0x156>
 800ba58:	7863      	ldrb	r3, [r4, #1]
 800ba5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba5c:	d132      	bne.n	800bac4 <_vfiprintf_r+0x1ac>
 800ba5e:	9b03      	ldr	r3, [sp, #12]
 800ba60:	1d1a      	adds	r2, r3, #4
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	9203      	str	r2, [sp, #12]
 800ba66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba6a:	3402      	adds	r4, #2
 800ba6c:	9305      	str	r3, [sp, #20]
 800ba6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bb44 <_vfiprintf_r+0x22c>
 800ba72:	7821      	ldrb	r1, [r4, #0]
 800ba74:	2203      	movs	r2, #3
 800ba76:	4650      	mov	r0, sl
 800ba78:	f7f4 fbd2 	bl	8000220 <memchr>
 800ba7c:	b138      	cbz	r0, 800ba8e <_vfiprintf_r+0x176>
 800ba7e:	9b04      	ldr	r3, [sp, #16]
 800ba80:	eba0 000a 	sub.w	r0, r0, sl
 800ba84:	2240      	movs	r2, #64	@ 0x40
 800ba86:	4082      	lsls	r2, r0
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	3401      	adds	r4, #1
 800ba8c:	9304      	str	r3, [sp, #16]
 800ba8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba92:	4829      	ldr	r0, [pc, #164]	@ (800bb38 <_vfiprintf_r+0x220>)
 800ba94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba98:	2206      	movs	r2, #6
 800ba9a:	f7f4 fbc1 	bl	8000220 <memchr>
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d03f      	beq.n	800bb22 <_vfiprintf_r+0x20a>
 800baa2:	4b26      	ldr	r3, [pc, #152]	@ (800bb3c <_vfiprintf_r+0x224>)
 800baa4:	bb1b      	cbnz	r3, 800baee <_vfiprintf_r+0x1d6>
 800baa6:	9b03      	ldr	r3, [sp, #12]
 800baa8:	3307      	adds	r3, #7
 800baaa:	f023 0307 	bic.w	r3, r3, #7
 800baae:	3308      	adds	r3, #8
 800bab0:	9303      	str	r3, [sp, #12]
 800bab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bab4:	443b      	add	r3, r7
 800bab6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bab8:	e76a      	b.n	800b990 <_vfiprintf_r+0x78>
 800baba:	fb0c 3202 	mla	r2, ip, r2, r3
 800babe:	460c      	mov	r4, r1
 800bac0:	2001      	movs	r0, #1
 800bac2:	e7a8      	b.n	800ba16 <_vfiprintf_r+0xfe>
 800bac4:	2300      	movs	r3, #0
 800bac6:	3401      	adds	r4, #1
 800bac8:	9305      	str	r3, [sp, #20]
 800baca:	4619      	mov	r1, r3
 800bacc:	f04f 0c0a 	mov.w	ip, #10
 800bad0:	4620      	mov	r0, r4
 800bad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bad6:	3a30      	subs	r2, #48	@ 0x30
 800bad8:	2a09      	cmp	r2, #9
 800bada:	d903      	bls.n	800bae4 <_vfiprintf_r+0x1cc>
 800badc:	2b00      	cmp	r3, #0
 800bade:	d0c6      	beq.n	800ba6e <_vfiprintf_r+0x156>
 800bae0:	9105      	str	r1, [sp, #20]
 800bae2:	e7c4      	b.n	800ba6e <_vfiprintf_r+0x156>
 800bae4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bae8:	4604      	mov	r4, r0
 800baea:	2301      	movs	r3, #1
 800baec:	e7f0      	b.n	800bad0 <_vfiprintf_r+0x1b8>
 800baee:	ab03      	add	r3, sp, #12
 800baf0:	9300      	str	r3, [sp, #0]
 800baf2:	462a      	mov	r2, r5
 800baf4:	4b12      	ldr	r3, [pc, #72]	@ (800bb40 <_vfiprintf_r+0x228>)
 800baf6:	a904      	add	r1, sp, #16
 800baf8:	4630      	mov	r0, r6
 800bafa:	f7fd fbd9 	bl	80092b0 <_printf_float>
 800bafe:	4607      	mov	r7, r0
 800bb00:	1c78      	adds	r0, r7, #1
 800bb02:	d1d6      	bne.n	800bab2 <_vfiprintf_r+0x19a>
 800bb04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb06:	07d9      	lsls	r1, r3, #31
 800bb08:	d405      	bmi.n	800bb16 <_vfiprintf_r+0x1fe>
 800bb0a:	89ab      	ldrh	r3, [r5, #12]
 800bb0c:	059a      	lsls	r2, r3, #22
 800bb0e:	d402      	bmi.n	800bb16 <_vfiprintf_r+0x1fe>
 800bb10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb12:	f7fe f929 	bl	8009d68 <__retarget_lock_release_recursive>
 800bb16:	89ab      	ldrh	r3, [r5, #12]
 800bb18:	065b      	lsls	r3, r3, #25
 800bb1a:	f53f af1f 	bmi.w	800b95c <_vfiprintf_r+0x44>
 800bb1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb20:	e71e      	b.n	800b960 <_vfiprintf_r+0x48>
 800bb22:	ab03      	add	r3, sp, #12
 800bb24:	9300      	str	r3, [sp, #0]
 800bb26:	462a      	mov	r2, r5
 800bb28:	4b05      	ldr	r3, [pc, #20]	@ (800bb40 <_vfiprintf_r+0x228>)
 800bb2a:	a904      	add	r1, sp, #16
 800bb2c:	4630      	mov	r0, r6
 800bb2e:	f7fd fe57 	bl	80097e0 <_printf_i>
 800bb32:	e7e4      	b.n	800bafe <_vfiprintf_r+0x1e6>
 800bb34:	0800d340 	.word	0x0800d340
 800bb38:	0800d34a 	.word	0x0800d34a
 800bb3c:	080092b1 	.word	0x080092b1
 800bb40:	0800b8f5 	.word	0x0800b8f5
 800bb44:	0800d346 	.word	0x0800d346

0800bb48 <__swbuf_r>:
 800bb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4a:	460e      	mov	r6, r1
 800bb4c:	4614      	mov	r4, r2
 800bb4e:	4605      	mov	r5, r0
 800bb50:	b118      	cbz	r0, 800bb5a <__swbuf_r+0x12>
 800bb52:	6a03      	ldr	r3, [r0, #32]
 800bb54:	b90b      	cbnz	r3, 800bb5a <__swbuf_r+0x12>
 800bb56:	f7fd ffef 	bl	8009b38 <__sinit>
 800bb5a:	69a3      	ldr	r3, [r4, #24]
 800bb5c:	60a3      	str	r3, [r4, #8]
 800bb5e:	89a3      	ldrh	r3, [r4, #12]
 800bb60:	071a      	lsls	r2, r3, #28
 800bb62:	d501      	bpl.n	800bb68 <__swbuf_r+0x20>
 800bb64:	6923      	ldr	r3, [r4, #16]
 800bb66:	b943      	cbnz	r3, 800bb7a <__swbuf_r+0x32>
 800bb68:	4621      	mov	r1, r4
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	f000 f82a 	bl	800bbc4 <__swsetup_r>
 800bb70:	b118      	cbz	r0, 800bb7a <__swbuf_r+0x32>
 800bb72:	f04f 37ff 	mov.w	r7, #4294967295
 800bb76:	4638      	mov	r0, r7
 800bb78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb7a:	6823      	ldr	r3, [r4, #0]
 800bb7c:	6922      	ldr	r2, [r4, #16]
 800bb7e:	1a98      	subs	r0, r3, r2
 800bb80:	6963      	ldr	r3, [r4, #20]
 800bb82:	b2f6      	uxtb	r6, r6
 800bb84:	4283      	cmp	r3, r0
 800bb86:	4637      	mov	r7, r6
 800bb88:	dc05      	bgt.n	800bb96 <__swbuf_r+0x4e>
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	f7ff fd99 	bl	800b6c4 <_fflush_r>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	d1ed      	bne.n	800bb72 <__swbuf_r+0x2a>
 800bb96:	68a3      	ldr	r3, [r4, #8]
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	60a3      	str	r3, [r4, #8]
 800bb9c:	6823      	ldr	r3, [r4, #0]
 800bb9e:	1c5a      	adds	r2, r3, #1
 800bba0:	6022      	str	r2, [r4, #0]
 800bba2:	701e      	strb	r6, [r3, #0]
 800bba4:	6962      	ldr	r2, [r4, #20]
 800bba6:	1c43      	adds	r3, r0, #1
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d004      	beq.n	800bbb6 <__swbuf_r+0x6e>
 800bbac:	89a3      	ldrh	r3, [r4, #12]
 800bbae:	07db      	lsls	r3, r3, #31
 800bbb0:	d5e1      	bpl.n	800bb76 <__swbuf_r+0x2e>
 800bbb2:	2e0a      	cmp	r6, #10
 800bbb4:	d1df      	bne.n	800bb76 <__swbuf_r+0x2e>
 800bbb6:	4621      	mov	r1, r4
 800bbb8:	4628      	mov	r0, r5
 800bbba:	f7ff fd83 	bl	800b6c4 <_fflush_r>
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	d0d9      	beq.n	800bb76 <__swbuf_r+0x2e>
 800bbc2:	e7d6      	b.n	800bb72 <__swbuf_r+0x2a>

0800bbc4 <__swsetup_r>:
 800bbc4:	b538      	push	{r3, r4, r5, lr}
 800bbc6:	4b29      	ldr	r3, [pc, #164]	@ (800bc6c <__swsetup_r+0xa8>)
 800bbc8:	4605      	mov	r5, r0
 800bbca:	6818      	ldr	r0, [r3, #0]
 800bbcc:	460c      	mov	r4, r1
 800bbce:	b118      	cbz	r0, 800bbd8 <__swsetup_r+0x14>
 800bbd0:	6a03      	ldr	r3, [r0, #32]
 800bbd2:	b90b      	cbnz	r3, 800bbd8 <__swsetup_r+0x14>
 800bbd4:	f7fd ffb0 	bl	8009b38 <__sinit>
 800bbd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbdc:	0719      	lsls	r1, r3, #28
 800bbde:	d422      	bmi.n	800bc26 <__swsetup_r+0x62>
 800bbe0:	06da      	lsls	r2, r3, #27
 800bbe2:	d407      	bmi.n	800bbf4 <__swsetup_r+0x30>
 800bbe4:	2209      	movs	r2, #9
 800bbe6:	602a      	str	r2, [r5, #0]
 800bbe8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbec:	81a3      	strh	r3, [r4, #12]
 800bbee:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf2:	e033      	b.n	800bc5c <__swsetup_r+0x98>
 800bbf4:	0758      	lsls	r0, r3, #29
 800bbf6:	d512      	bpl.n	800bc1e <__swsetup_r+0x5a>
 800bbf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbfa:	b141      	cbz	r1, 800bc0e <__swsetup_r+0x4a>
 800bbfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc00:	4299      	cmp	r1, r3
 800bc02:	d002      	beq.n	800bc0a <__swsetup_r+0x46>
 800bc04:	4628      	mov	r0, r5
 800bc06:	f7fe feff 	bl	800aa08 <_free_r>
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc0e:	89a3      	ldrh	r3, [r4, #12]
 800bc10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bc14:	81a3      	strh	r3, [r4, #12]
 800bc16:	2300      	movs	r3, #0
 800bc18:	6063      	str	r3, [r4, #4]
 800bc1a:	6923      	ldr	r3, [r4, #16]
 800bc1c:	6023      	str	r3, [r4, #0]
 800bc1e:	89a3      	ldrh	r3, [r4, #12]
 800bc20:	f043 0308 	orr.w	r3, r3, #8
 800bc24:	81a3      	strh	r3, [r4, #12]
 800bc26:	6923      	ldr	r3, [r4, #16]
 800bc28:	b94b      	cbnz	r3, 800bc3e <__swsetup_r+0x7a>
 800bc2a:	89a3      	ldrh	r3, [r4, #12]
 800bc2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bc30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc34:	d003      	beq.n	800bc3e <__swsetup_r+0x7a>
 800bc36:	4621      	mov	r1, r4
 800bc38:	4628      	mov	r0, r5
 800bc3a:	f000 f883 	bl	800bd44 <__smakebuf_r>
 800bc3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc42:	f013 0201 	ands.w	r2, r3, #1
 800bc46:	d00a      	beq.n	800bc5e <__swsetup_r+0x9a>
 800bc48:	2200      	movs	r2, #0
 800bc4a:	60a2      	str	r2, [r4, #8]
 800bc4c:	6962      	ldr	r2, [r4, #20]
 800bc4e:	4252      	negs	r2, r2
 800bc50:	61a2      	str	r2, [r4, #24]
 800bc52:	6922      	ldr	r2, [r4, #16]
 800bc54:	b942      	cbnz	r2, 800bc68 <__swsetup_r+0xa4>
 800bc56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bc5a:	d1c5      	bne.n	800bbe8 <__swsetup_r+0x24>
 800bc5c:	bd38      	pop	{r3, r4, r5, pc}
 800bc5e:	0799      	lsls	r1, r3, #30
 800bc60:	bf58      	it	pl
 800bc62:	6962      	ldrpl	r2, [r4, #20]
 800bc64:	60a2      	str	r2, [r4, #8]
 800bc66:	e7f4      	b.n	800bc52 <__swsetup_r+0x8e>
 800bc68:	2000      	movs	r0, #0
 800bc6a:	e7f7      	b.n	800bc5c <__swsetup_r+0x98>
 800bc6c:	2000002c 	.word	0x2000002c

0800bc70 <_raise_r>:
 800bc70:	291f      	cmp	r1, #31
 800bc72:	b538      	push	{r3, r4, r5, lr}
 800bc74:	4605      	mov	r5, r0
 800bc76:	460c      	mov	r4, r1
 800bc78:	d904      	bls.n	800bc84 <_raise_r+0x14>
 800bc7a:	2316      	movs	r3, #22
 800bc7c:	6003      	str	r3, [r0, #0]
 800bc7e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc82:	bd38      	pop	{r3, r4, r5, pc}
 800bc84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc86:	b112      	cbz	r2, 800bc8e <_raise_r+0x1e>
 800bc88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc8c:	b94b      	cbnz	r3, 800bca2 <_raise_r+0x32>
 800bc8e:	4628      	mov	r0, r5
 800bc90:	f000 f830 	bl	800bcf4 <_getpid_r>
 800bc94:	4622      	mov	r2, r4
 800bc96:	4601      	mov	r1, r0
 800bc98:	4628      	mov	r0, r5
 800bc9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc9e:	f000 b817 	b.w	800bcd0 <_kill_r>
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d00a      	beq.n	800bcbc <_raise_r+0x4c>
 800bca6:	1c59      	adds	r1, r3, #1
 800bca8:	d103      	bne.n	800bcb2 <_raise_r+0x42>
 800bcaa:	2316      	movs	r3, #22
 800bcac:	6003      	str	r3, [r0, #0]
 800bcae:	2001      	movs	r0, #1
 800bcb0:	e7e7      	b.n	800bc82 <_raise_r+0x12>
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bcb8:	4620      	mov	r0, r4
 800bcba:	4798      	blx	r3
 800bcbc:	2000      	movs	r0, #0
 800bcbe:	e7e0      	b.n	800bc82 <_raise_r+0x12>

0800bcc0 <raise>:
 800bcc0:	4b02      	ldr	r3, [pc, #8]	@ (800bccc <raise+0xc>)
 800bcc2:	4601      	mov	r1, r0
 800bcc4:	6818      	ldr	r0, [r3, #0]
 800bcc6:	f7ff bfd3 	b.w	800bc70 <_raise_r>
 800bcca:	bf00      	nop
 800bccc:	2000002c 	.word	0x2000002c

0800bcd0 <_kill_r>:
 800bcd0:	b538      	push	{r3, r4, r5, lr}
 800bcd2:	4d07      	ldr	r5, [pc, #28]	@ (800bcf0 <_kill_r+0x20>)
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	4608      	mov	r0, r1
 800bcda:	4611      	mov	r1, r2
 800bcdc:	602b      	str	r3, [r5, #0]
 800bcde:	f7f6 febd 	bl	8002a5c <_kill>
 800bce2:	1c43      	adds	r3, r0, #1
 800bce4:	d102      	bne.n	800bcec <_kill_r+0x1c>
 800bce6:	682b      	ldr	r3, [r5, #0]
 800bce8:	b103      	cbz	r3, 800bcec <_kill_r+0x1c>
 800bcea:	6023      	str	r3, [r4, #0]
 800bcec:	bd38      	pop	{r3, r4, r5, pc}
 800bcee:	bf00      	nop
 800bcf0:	20000808 	.word	0x20000808

0800bcf4 <_getpid_r>:
 800bcf4:	f7f6 beaa 	b.w	8002a4c <_getpid>

0800bcf8 <__swhatbuf_r>:
 800bcf8:	b570      	push	{r4, r5, r6, lr}
 800bcfa:	460c      	mov	r4, r1
 800bcfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd00:	2900      	cmp	r1, #0
 800bd02:	b096      	sub	sp, #88	@ 0x58
 800bd04:	4615      	mov	r5, r2
 800bd06:	461e      	mov	r6, r3
 800bd08:	da0d      	bge.n	800bd26 <__swhatbuf_r+0x2e>
 800bd0a:	89a3      	ldrh	r3, [r4, #12]
 800bd0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bd10:	f04f 0100 	mov.w	r1, #0
 800bd14:	bf14      	ite	ne
 800bd16:	2340      	movne	r3, #64	@ 0x40
 800bd18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	6031      	str	r1, [r6, #0]
 800bd20:	602b      	str	r3, [r5, #0]
 800bd22:	b016      	add	sp, #88	@ 0x58
 800bd24:	bd70      	pop	{r4, r5, r6, pc}
 800bd26:	466a      	mov	r2, sp
 800bd28:	f000 f848 	bl	800bdbc <_fstat_r>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	dbec      	blt.n	800bd0a <__swhatbuf_r+0x12>
 800bd30:	9901      	ldr	r1, [sp, #4]
 800bd32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bd36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bd3a:	4259      	negs	r1, r3
 800bd3c:	4159      	adcs	r1, r3
 800bd3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd42:	e7eb      	b.n	800bd1c <__swhatbuf_r+0x24>

0800bd44 <__smakebuf_r>:
 800bd44:	898b      	ldrh	r3, [r1, #12]
 800bd46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd48:	079d      	lsls	r5, r3, #30
 800bd4a:	4606      	mov	r6, r0
 800bd4c:	460c      	mov	r4, r1
 800bd4e:	d507      	bpl.n	800bd60 <__smakebuf_r+0x1c>
 800bd50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bd54:	6023      	str	r3, [r4, #0]
 800bd56:	6123      	str	r3, [r4, #16]
 800bd58:	2301      	movs	r3, #1
 800bd5a:	6163      	str	r3, [r4, #20]
 800bd5c:	b003      	add	sp, #12
 800bd5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd60:	ab01      	add	r3, sp, #4
 800bd62:	466a      	mov	r2, sp
 800bd64:	f7ff ffc8 	bl	800bcf8 <__swhatbuf_r>
 800bd68:	9f00      	ldr	r7, [sp, #0]
 800bd6a:	4605      	mov	r5, r0
 800bd6c:	4639      	mov	r1, r7
 800bd6e:	4630      	mov	r0, r6
 800bd70:	f7fe febe 	bl	800aaf0 <_malloc_r>
 800bd74:	b948      	cbnz	r0, 800bd8a <__smakebuf_r+0x46>
 800bd76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd7a:	059a      	lsls	r2, r3, #22
 800bd7c:	d4ee      	bmi.n	800bd5c <__smakebuf_r+0x18>
 800bd7e:	f023 0303 	bic.w	r3, r3, #3
 800bd82:	f043 0302 	orr.w	r3, r3, #2
 800bd86:	81a3      	strh	r3, [r4, #12]
 800bd88:	e7e2      	b.n	800bd50 <__smakebuf_r+0xc>
 800bd8a:	89a3      	ldrh	r3, [r4, #12]
 800bd8c:	6020      	str	r0, [r4, #0]
 800bd8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd92:	81a3      	strh	r3, [r4, #12]
 800bd94:	9b01      	ldr	r3, [sp, #4]
 800bd96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd9a:	b15b      	cbz	r3, 800bdb4 <__smakebuf_r+0x70>
 800bd9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bda0:	4630      	mov	r0, r6
 800bda2:	f000 f81d 	bl	800bde0 <_isatty_r>
 800bda6:	b128      	cbz	r0, 800bdb4 <__smakebuf_r+0x70>
 800bda8:	89a3      	ldrh	r3, [r4, #12]
 800bdaa:	f023 0303 	bic.w	r3, r3, #3
 800bdae:	f043 0301 	orr.w	r3, r3, #1
 800bdb2:	81a3      	strh	r3, [r4, #12]
 800bdb4:	89a3      	ldrh	r3, [r4, #12]
 800bdb6:	431d      	orrs	r5, r3
 800bdb8:	81a5      	strh	r5, [r4, #12]
 800bdba:	e7cf      	b.n	800bd5c <__smakebuf_r+0x18>

0800bdbc <_fstat_r>:
 800bdbc:	b538      	push	{r3, r4, r5, lr}
 800bdbe:	4d07      	ldr	r5, [pc, #28]	@ (800bddc <_fstat_r+0x20>)
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	4608      	mov	r0, r1
 800bdc6:	4611      	mov	r1, r2
 800bdc8:	602b      	str	r3, [r5, #0]
 800bdca:	f7f6 fea7 	bl	8002b1c <_fstat>
 800bdce:	1c43      	adds	r3, r0, #1
 800bdd0:	d102      	bne.n	800bdd8 <_fstat_r+0x1c>
 800bdd2:	682b      	ldr	r3, [r5, #0]
 800bdd4:	b103      	cbz	r3, 800bdd8 <_fstat_r+0x1c>
 800bdd6:	6023      	str	r3, [r4, #0]
 800bdd8:	bd38      	pop	{r3, r4, r5, pc}
 800bdda:	bf00      	nop
 800bddc:	20000808 	.word	0x20000808

0800bde0 <_isatty_r>:
 800bde0:	b538      	push	{r3, r4, r5, lr}
 800bde2:	4d06      	ldr	r5, [pc, #24]	@ (800bdfc <_isatty_r+0x1c>)
 800bde4:	2300      	movs	r3, #0
 800bde6:	4604      	mov	r4, r0
 800bde8:	4608      	mov	r0, r1
 800bdea:	602b      	str	r3, [r5, #0]
 800bdec:	f7f6 fea6 	bl	8002b3c <_isatty>
 800bdf0:	1c43      	adds	r3, r0, #1
 800bdf2:	d102      	bne.n	800bdfa <_isatty_r+0x1a>
 800bdf4:	682b      	ldr	r3, [r5, #0]
 800bdf6:	b103      	cbz	r3, 800bdfa <_isatty_r+0x1a>
 800bdf8:	6023      	str	r3, [r4, #0]
 800bdfa:	bd38      	pop	{r3, r4, r5, pc}
 800bdfc:	20000808 	.word	0x20000808

0800be00 <sinf>:
 800be00:	ee10 3a10 	vmov	r3, s0
 800be04:	b507      	push	{r0, r1, r2, lr}
 800be06:	4a1f      	ldr	r2, [pc, #124]	@ (800be84 <sinf+0x84>)
 800be08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d807      	bhi.n	800be20 <sinf+0x20>
 800be10:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800be88 <sinf+0x88>
 800be14:	2000      	movs	r0, #0
 800be16:	b003      	add	sp, #12
 800be18:	f85d eb04 	ldr.w	lr, [sp], #4
 800be1c:	f000 b88e 	b.w	800bf3c <__kernel_sinf>
 800be20:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800be24:	d304      	bcc.n	800be30 <sinf+0x30>
 800be26:	ee30 0a40 	vsub.f32	s0, s0, s0
 800be2a:	b003      	add	sp, #12
 800be2c:	f85d fb04 	ldr.w	pc, [sp], #4
 800be30:	4668      	mov	r0, sp
 800be32:	f000 f8cb 	bl	800bfcc <__ieee754_rem_pio2f>
 800be36:	f000 0003 	and.w	r0, r0, #3
 800be3a:	2801      	cmp	r0, #1
 800be3c:	d00a      	beq.n	800be54 <sinf+0x54>
 800be3e:	2802      	cmp	r0, #2
 800be40:	d00f      	beq.n	800be62 <sinf+0x62>
 800be42:	b9c0      	cbnz	r0, 800be76 <sinf+0x76>
 800be44:	eddd 0a01 	vldr	s1, [sp, #4]
 800be48:	ed9d 0a00 	vldr	s0, [sp]
 800be4c:	2001      	movs	r0, #1
 800be4e:	f000 f875 	bl	800bf3c <__kernel_sinf>
 800be52:	e7ea      	b.n	800be2a <sinf+0x2a>
 800be54:	eddd 0a01 	vldr	s1, [sp, #4]
 800be58:	ed9d 0a00 	vldr	s0, [sp]
 800be5c:	f000 f816 	bl	800be8c <__kernel_cosf>
 800be60:	e7e3      	b.n	800be2a <sinf+0x2a>
 800be62:	eddd 0a01 	vldr	s1, [sp, #4]
 800be66:	ed9d 0a00 	vldr	s0, [sp]
 800be6a:	2001      	movs	r0, #1
 800be6c:	f000 f866 	bl	800bf3c <__kernel_sinf>
 800be70:	eeb1 0a40 	vneg.f32	s0, s0
 800be74:	e7d9      	b.n	800be2a <sinf+0x2a>
 800be76:	eddd 0a01 	vldr	s1, [sp, #4]
 800be7a:	ed9d 0a00 	vldr	s0, [sp]
 800be7e:	f000 f805 	bl	800be8c <__kernel_cosf>
 800be82:	e7f5      	b.n	800be70 <sinf+0x70>
 800be84:	3f490fd8 	.word	0x3f490fd8
 800be88:	00000000 	.word	0x00000000

0800be8c <__kernel_cosf>:
 800be8c:	ee10 3a10 	vmov	r3, s0
 800be90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be94:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800be98:	eef0 6a40 	vmov.f32	s13, s0
 800be9c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bea0:	d204      	bcs.n	800beac <__kernel_cosf+0x20>
 800bea2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800bea6:	ee17 2a90 	vmov	r2, s15
 800beaa:	b342      	cbz	r2, 800befe <__kernel_cosf+0x72>
 800beac:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800beb0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800bf1c <__kernel_cosf+0x90>
 800beb4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800bf20 <__kernel_cosf+0x94>
 800beb8:	4a1a      	ldr	r2, [pc, #104]	@ (800bf24 <__kernel_cosf+0x98>)
 800beba:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bebe:	4293      	cmp	r3, r2
 800bec0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bf28 <__kernel_cosf+0x9c>
 800bec4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bec8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800bf2c <__kernel_cosf+0xa0>
 800becc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bed0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800bf30 <__kernel_cosf+0xa4>
 800bed4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bed8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800bf34 <__kernel_cosf+0xa8>
 800bedc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bee0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800bee4:	ee26 6a07 	vmul.f32	s12, s12, s14
 800bee8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800beec:	eee7 0a06 	vfma.f32	s1, s14, s12
 800bef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bef4:	d804      	bhi.n	800bf00 <__kernel_cosf+0x74>
 800bef6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800befa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800befe:	4770      	bx	lr
 800bf00:	4a0d      	ldr	r2, [pc, #52]	@ (800bf38 <__kernel_cosf+0xac>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	bf9a      	itte	ls
 800bf06:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800bf0a:	ee07 3a10 	vmovls	s14, r3
 800bf0e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800bf12:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bf16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf1a:	e7ec      	b.n	800bef6 <__kernel_cosf+0x6a>
 800bf1c:	ad47d74e 	.word	0xad47d74e
 800bf20:	310f74f6 	.word	0x310f74f6
 800bf24:	3e999999 	.word	0x3e999999
 800bf28:	b493f27c 	.word	0xb493f27c
 800bf2c:	37d00d01 	.word	0x37d00d01
 800bf30:	bab60b61 	.word	0xbab60b61
 800bf34:	3d2aaaab 	.word	0x3d2aaaab
 800bf38:	3f480000 	.word	0x3f480000

0800bf3c <__kernel_sinf>:
 800bf3c:	ee10 3a10 	vmov	r3, s0
 800bf40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bf44:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800bf48:	d204      	bcs.n	800bf54 <__kernel_sinf+0x18>
 800bf4a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bf4e:	ee17 3a90 	vmov	r3, s15
 800bf52:	b35b      	cbz	r3, 800bfac <__kernel_sinf+0x70>
 800bf54:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bf58:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800bfb0 <__kernel_sinf+0x74>
 800bf5c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800bfb4 <__kernel_sinf+0x78>
 800bf60:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bf64:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800bfb8 <__kernel_sinf+0x7c>
 800bf68:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bf6c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800bfbc <__kernel_sinf+0x80>
 800bf70:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bf74:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800bfc0 <__kernel_sinf+0x84>
 800bf78:	ee60 6a07 	vmul.f32	s13, s0, s14
 800bf7c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bf80:	b930      	cbnz	r0, 800bf90 <__kernel_sinf+0x54>
 800bf82:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800bfc4 <__kernel_sinf+0x88>
 800bf86:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bf8a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bf8e:	4770      	bx	lr
 800bf90:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bf94:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800bf98:	eee0 7a86 	vfma.f32	s15, s1, s12
 800bf9c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800bfa0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800bfc8 <__kernel_sinf+0x8c>
 800bfa4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800bfa8:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop
 800bfb0:	2f2ec9d3 	.word	0x2f2ec9d3
 800bfb4:	b2d72f34 	.word	0xb2d72f34
 800bfb8:	3638ef1b 	.word	0x3638ef1b
 800bfbc:	b9500d01 	.word	0xb9500d01
 800bfc0:	3c088889 	.word	0x3c088889
 800bfc4:	be2aaaab 	.word	0xbe2aaaab
 800bfc8:	3e2aaaab 	.word	0x3e2aaaab

0800bfcc <__ieee754_rem_pio2f>:
 800bfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfce:	ee10 6a10 	vmov	r6, s0
 800bfd2:	4b88      	ldr	r3, [pc, #544]	@ (800c1f4 <__ieee754_rem_pio2f+0x228>)
 800bfd4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800bfd8:	429d      	cmp	r5, r3
 800bfda:	b087      	sub	sp, #28
 800bfdc:	4604      	mov	r4, r0
 800bfde:	d805      	bhi.n	800bfec <__ieee754_rem_pio2f+0x20>
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	ed80 0a00 	vstr	s0, [r0]
 800bfe6:	6043      	str	r3, [r0, #4]
 800bfe8:	2000      	movs	r0, #0
 800bfea:	e022      	b.n	800c032 <__ieee754_rem_pio2f+0x66>
 800bfec:	4b82      	ldr	r3, [pc, #520]	@ (800c1f8 <__ieee754_rem_pio2f+0x22c>)
 800bfee:	429d      	cmp	r5, r3
 800bff0:	d83a      	bhi.n	800c068 <__ieee754_rem_pio2f+0x9c>
 800bff2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bff6:	2e00      	cmp	r6, #0
 800bff8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800c1fc <__ieee754_rem_pio2f+0x230>
 800bffc:	4a80      	ldr	r2, [pc, #512]	@ (800c200 <__ieee754_rem_pio2f+0x234>)
 800bffe:	f023 030f 	bic.w	r3, r3, #15
 800c002:	dd18      	ble.n	800c036 <__ieee754_rem_pio2f+0x6a>
 800c004:	4293      	cmp	r3, r2
 800c006:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c00a:	bf09      	itett	eq
 800c00c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800c204 <__ieee754_rem_pio2f+0x238>
 800c010:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800c208 <__ieee754_rem_pio2f+0x23c>
 800c014:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800c20c <__ieee754_rem_pio2f+0x240>
 800c018:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c01c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800c020:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c024:	ed80 7a00 	vstr	s14, [r0]
 800c028:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c02c:	edc0 7a01 	vstr	s15, [r0, #4]
 800c030:	2001      	movs	r0, #1
 800c032:	b007      	add	sp, #28
 800c034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c036:	4293      	cmp	r3, r2
 800c038:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c03c:	bf09      	itett	eq
 800c03e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800c204 <__ieee754_rem_pio2f+0x238>
 800c042:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800c208 <__ieee754_rem_pio2f+0x23c>
 800c046:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800c20c <__ieee754_rem_pio2f+0x240>
 800c04a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c04e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c052:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c056:	ed80 7a00 	vstr	s14, [r0]
 800c05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c05e:	edc0 7a01 	vstr	s15, [r0, #4]
 800c062:	f04f 30ff 	mov.w	r0, #4294967295
 800c066:	e7e4      	b.n	800c032 <__ieee754_rem_pio2f+0x66>
 800c068:	4b69      	ldr	r3, [pc, #420]	@ (800c210 <__ieee754_rem_pio2f+0x244>)
 800c06a:	429d      	cmp	r5, r3
 800c06c:	d873      	bhi.n	800c156 <__ieee754_rem_pio2f+0x18a>
 800c06e:	f000 f8dd 	bl	800c22c <fabsf>
 800c072:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800c214 <__ieee754_rem_pio2f+0x248>
 800c076:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c07a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c07e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c082:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c086:	ee17 0a90 	vmov	r0, s15
 800c08a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c1fc <__ieee754_rem_pio2f+0x230>
 800c08e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c092:	281f      	cmp	r0, #31
 800c094:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c208 <__ieee754_rem_pio2f+0x23c>
 800c098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c09c:	eeb1 6a47 	vneg.f32	s12, s14
 800c0a0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c0a4:	ee16 1a90 	vmov	r1, s13
 800c0a8:	dc09      	bgt.n	800c0be <__ieee754_rem_pio2f+0xf2>
 800c0aa:	4a5b      	ldr	r2, [pc, #364]	@ (800c218 <__ieee754_rem_pio2f+0x24c>)
 800c0ac:	1e47      	subs	r7, r0, #1
 800c0ae:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c0b2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800c0b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d107      	bne.n	800c0ce <__ieee754_rem_pio2f+0x102>
 800c0be:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800c0c2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800c0c6:	2a08      	cmp	r2, #8
 800c0c8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c0cc:	dc14      	bgt.n	800c0f8 <__ieee754_rem_pio2f+0x12c>
 800c0ce:	6021      	str	r1, [r4, #0]
 800c0d0:	ed94 7a00 	vldr	s14, [r4]
 800c0d4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c0d8:	2e00      	cmp	r6, #0
 800c0da:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c0de:	ed84 0a01 	vstr	s0, [r4, #4]
 800c0e2:	daa6      	bge.n	800c032 <__ieee754_rem_pio2f+0x66>
 800c0e4:	eeb1 7a47 	vneg.f32	s14, s14
 800c0e8:	eeb1 0a40 	vneg.f32	s0, s0
 800c0ec:	ed84 7a00 	vstr	s14, [r4]
 800c0f0:	ed84 0a01 	vstr	s0, [r4, #4]
 800c0f4:	4240      	negs	r0, r0
 800c0f6:	e79c      	b.n	800c032 <__ieee754_rem_pio2f+0x66>
 800c0f8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800c204 <__ieee754_rem_pio2f+0x238>
 800c0fc:	eef0 6a40 	vmov.f32	s13, s0
 800c100:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c104:	ee70 7a66 	vsub.f32	s15, s0, s13
 800c108:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c10c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c20c <__ieee754_rem_pio2f+0x240>
 800c110:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c114:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c118:	ee15 2a90 	vmov	r2, s11
 800c11c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c120:	1a5b      	subs	r3, r3, r1
 800c122:	2b19      	cmp	r3, #25
 800c124:	dc04      	bgt.n	800c130 <__ieee754_rem_pio2f+0x164>
 800c126:	edc4 5a00 	vstr	s11, [r4]
 800c12a:	eeb0 0a66 	vmov.f32	s0, s13
 800c12e:	e7cf      	b.n	800c0d0 <__ieee754_rem_pio2f+0x104>
 800c130:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800c21c <__ieee754_rem_pio2f+0x250>
 800c134:	eeb0 0a66 	vmov.f32	s0, s13
 800c138:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c13c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c140:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800c220 <__ieee754_rem_pio2f+0x254>
 800c144:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c148:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c14c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c150:	ed84 7a00 	vstr	s14, [r4]
 800c154:	e7bc      	b.n	800c0d0 <__ieee754_rem_pio2f+0x104>
 800c156:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800c15a:	d306      	bcc.n	800c16a <__ieee754_rem_pio2f+0x19e>
 800c15c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c160:	edc0 7a01 	vstr	s15, [r0, #4]
 800c164:	edc0 7a00 	vstr	s15, [r0]
 800c168:	e73e      	b.n	800bfe8 <__ieee754_rem_pio2f+0x1c>
 800c16a:	15ea      	asrs	r2, r5, #23
 800c16c:	3a86      	subs	r2, #134	@ 0x86
 800c16e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c172:	ee07 3a90 	vmov	s15, r3
 800c176:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c17a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800c224 <__ieee754_rem_pio2f+0x258>
 800c17e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c182:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c186:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c18a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c18e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c192:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c196:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c19a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c19e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c1a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1aa:	edcd 7a05 	vstr	s15, [sp, #20]
 800c1ae:	d11e      	bne.n	800c1ee <__ieee754_rem_pio2f+0x222>
 800c1b0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1b8:	bf0c      	ite	eq
 800c1ba:	2301      	moveq	r3, #1
 800c1bc:	2302      	movne	r3, #2
 800c1be:	491a      	ldr	r1, [pc, #104]	@ (800c228 <__ieee754_rem_pio2f+0x25c>)
 800c1c0:	9101      	str	r1, [sp, #4]
 800c1c2:	2102      	movs	r1, #2
 800c1c4:	9100      	str	r1, [sp, #0]
 800c1c6:	a803      	add	r0, sp, #12
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	f000 f837 	bl	800c23c <__kernel_rem_pio2f>
 800c1ce:	2e00      	cmp	r6, #0
 800c1d0:	f6bf af2f 	bge.w	800c032 <__ieee754_rem_pio2f+0x66>
 800c1d4:	edd4 7a00 	vldr	s15, [r4]
 800c1d8:	eef1 7a67 	vneg.f32	s15, s15
 800c1dc:	edc4 7a00 	vstr	s15, [r4]
 800c1e0:	edd4 7a01 	vldr	s15, [r4, #4]
 800c1e4:	eef1 7a67 	vneg.f32	s15, s15
 800c1e8:	edc4 7a01 	vstr	s15, [r4, #4]
 800c1ec:	e782      	b.n	800c0f4 <__ieee754_rem_pio2f+0x128>
 800c1ee:	2303      	movs	r3, #3
 800c1f0:	e7e5      	b.n	800c1be <__ieee754_rem_pio2f+0x1f2>
 800c1f2:	bf00      	nop
 800c1f4:	3f490fd8 	.word	0x3f490fd8
 800c1f8:	4016cbe3 	.word	0x4016cbe3
 800c1fc:	3fc90f80 	.word	0x3fc90f80
 800c200:	3fc90fd0 	.word	0x3fc90fd0
 800c204:	37354400 	.word	0x37354400
 800c208:	37354443 	.word	0x37354443
 800c20c:	2e85a308 	.word	0x2e85a308
 800c210:	43490f80 	.word	0x43490f80
 800c214:	3f22f984 	.word	0x3f22f984
 800c218:	0800d498 	.word	0x0800d498
 800c21c:	2e85a300 	.word	0x2e85a300
 800c220:	248d3132 	.word	0x248d3132
 800c224:	43800000 	.word	0x43800000
 800c228:	0800d518 	.word	0x0800d518

0800c22c <fabsf>:
 800c22c:	ee10 3a10 	vmov	r3, s0
 800c230:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c234:	ee00 3a10 	vmov	s0, r3
 800c238:	4770      	bx	lr
	...

0800c23c <__kernel_rem_pio2f>:
 800c23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c240:	ed2d 8b04 	vpush	{d8-d9}
 800c244:	b0d9      	sub	sp, #356	@ 0x164
 800c246:	4690      	mov	r8, r2
 800c248:	9001      	str	r0, [sp, #4]
 800c24a:	4ab9      	ldr	r2, [pc, #740]	@ (800c530 <__kernel_rem_pio2f+0x2f4>)
 800c24c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800c24e:	f118 0f04 	cmn.w	r8, #4
 800c252:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800c256:	460f      	mov	r7, r1
 800c258:	f103 3bff 	add.w	fp, r3, #4294967295
 800c25c:	db27      	blt.n	800c2ae <__kernel_rem_pio2f+0x72>
 800c25e:	f1b8 0203 	subs.w	r2, r8, #3
 800c262:	bf48      	it	mi
 800c264:	f108 0204 	addmi.w	r2, r8, #4
 800c268:	10d2      	asrs	r2, r2, #3
 800c26a:	1c55      	adds	r5, r2, #1
 800c26c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c26e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800c540 <__kernel_rem_pio2f+0x304>
 800c272:	00e8      	lsls	r0, r5, #3
 800c274:	eba2 060b 	sub.w	r6, r2, fp
 800c278:	9002      	str	r0, [sp, #8]
 800c27a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800c27e:	eb0a 0c0b 	add.w	ip, sl, fp
 800c282:	ac1c      	add	r4, sp, #112	@ 0x70
 800c284:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800c288:	2000      	movs	r0, #0
 800c28a:	4560      	cmp	r0, ip
 800c28c:	dd11      	ble.n	800c2b2 <__kernel_rem_pio2f+0x76>
 800c28e:	a91c      	add	r1, sp, #112	@ 0x70
 800c290:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800c294:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800c298:	f04f 0c00 	mov.w	ip, #0
 800c29c:	45d4      	cmp	ip, sl
 800c29e:	dc27      	bgt.n	800c2f0 <__kernel_rem_pio2f+0xb4>
 800c2a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c2a4:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800c540 <__kernel_rem_pio2f+0x304>
 800c2a8:	4606      	mov	r6, r0
 800c2aa:	2400      	movs	r4, #0
 800c2ac:	e016      	b.n	800c2dc <__kernel_rem_pio2f+0xa0>
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	e7db      	b.n	800c26a <__kernel_rem_pio2f+0x2e>
 800c2b2:	42c6      	cmn	r6, r0
 800c2b4:	bf5d      	ittte	pl
 800c2b6:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800c2ba:	ee07 1a90 	vmovpl	s15, r1
 800c2be:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c2c2:	eef0 7a47 	vmovmi.f32	s15, s14
 800c2c6:	ece4 7a01 	vstmia	r4!, {s15}
 800c2ca:	3001      	adds	r0, #1
 800c2cc:	e7dd      	b.n	800c28a <__kernel_rem_pio2f+0x4e>
 800c2ce:	ecfe 6a01 	vldmia	lr!, {s13}
 800c2d2:	ed96 7a00 	vldr	s14, [r6]
 800c2d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c2da:	3401      	adds	r4, #1
 800c2dc:	455c      	cmp	r4, fp
 800c2de:	f1a6 0604 	sub.w	r6, r6, #4
 800c2e2:	ddf4      	ble.n	800c2ce <__kernel_rem_pio2f+0x92>
 800c2e4:	ece9 7a01 	vstmia	r9!, {s15}
 800c2e8:	f10c 0c01 	add.w	ip, ip, #1
 800c2ec:	3004      	adds	r0, #4
 800c2ee:	e7d5      	b.n	800c29c <__kernel_rem_pio2f+0x60>
 800c2f0:	a908      	add	r1, sp, #32
 800c2f2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2f6:	9104      	str	r1, [sp, #16]
 800c2f8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c2fa:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800c53c <__kernel_rem_pio2f+0x300>
 800c2fe:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800c538 <__kernel_rem_pio2f+0x2fc>
 800c302:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c306:	9203      	str	r2, [sp, #12]
 800c308:	4654      	mov	r4, sl
 800c30a:	00a2      	lsls	r2, r4, #2
 800c30c:	9205      	str	r2, [sp, #20]
 800c30e:	aa58      	add	r2, sp, #352	@ 0x160
 800c310:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c314:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800c318:	a944      	add	r1, sp, #272	@ 0x110
 800c31a:	aa08      	add	r2, sp, #32
 800c31c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800c320:	4694      	mov	ip, r2
 800c322:	4626      	mov	r6, r4
 800c324:	2e00      	cmp	r6, #0
 800c326:	f1a0 0004 	sub.w	r0, r0, #4
 800c32a:	dc4c      	bgt.n	800c3c6 <__kernel_rem_pio2f+0x18a>
 800c32c:	4628      	mov	r0, r5
 800c32e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c332:	f000 f9f5 	bl	800c720 <scalbnf>
 800c336:	eeb0 8a40 	vmov.f32	s16, s0
 800c33a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800c33e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c342:	f000 fa53 	bl	800c7ec <floorf>
 800c346:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800c34a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c34e:	2d00      	cmp	r5, #0
 800c350:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c354:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c358:	ee17 9a90 	vmov	r9, s15
 800c35c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c360:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c364:	dd41      	ble.n	800c3ea <__kernel_rem_pio2f+0x1ae>
 800c366:	f104 3cff 	add.w	ip, r4, #4294967295
 800c36a:	a908      	add	r1, sp, #32
 800c36c:	f1c5 0e08 	rsb	lr, r5, #8
 800c370:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800c374:	fa46 f00e 	asr.w	r0, r6, lr
 800c378:	4481      	add	r9, r0
 800c37a:	fa00 f00e 	lsl.w	r0, r0, lr
 800c37e:	1a36      	subs	r6, r6, r0
 800c380:	f1c5 0007 	rsb	r0, r5, #7
 800c384:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800c388:	4106      	asrs	r6, r0
 800c38a:	2e00      	cmp	r6, #0
 800c38c:	dd3c      	ble.n	800c408 <__kernel_rem_pio2f+0x1cc>
 800c38e:	f04f 0e00 	mov.w	lr, #0
 800c392:	f109 0901 	add.w	r9, r9, #1
 800c396:	4670      	mov	r0, lr
 800c398:	4574      	cmp	r4, lr
 800c39a:	dc68      	bgt.n	800c46e <__kernel_rem_pio2f+0x232>
 800c39c:	2d00      	cmp	r5, #0
 800c39e:	dd03      	ble.n	800c3a8 <__kernel_rem_pio2f+0x16c>
 800c3a0:	2d01      	cmp	r5, #1
 800c3a2:	d074      	beq.n	800c48e <__kernel_rem_pio2f+0x252>
 800c3a4:	2d02      	cmp	r5, #2
 800c3a6:	d07d      	beq.n	800c4a4 <__kernel_rem_pio2f+0x268>
 800c3a8:	2e02      	cmp	r6, #2
 800c3aa:	d12d      	bne.n	800c408 <__kernel_rem_pio2f+0x1cc>
 800c3ac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c3b0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c3b4:	b340      	cbz	r0, 800c408 <__kernel_rem_pio2f+0x1cc>
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	9306      	str	r3, [sp, #24]
 800c3ba:	f000 f9b1 	bl	800c720 <scalbnf>
 800c3be:	9b06      	ldr	r3, [sp, #24]
 800c3c0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c3c4:	e020      	b.n	800c408 <__kernel_rem_pio2f+0x1cc>
 800c3c6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c3ca:	3e01      	subs	r6, #1
 800c3cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c3d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3d4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c3d8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c3dc:	ecac 0a01 	vstmia	ip!, {s0}
 800c3e0:	ed90 0a00 	vldr	s0, [r0]
 800c3e4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c3e8:	e79c      	b.n	800c324 <__kernel_rem_pio2f+0xe8>
 800c3ea:	d105      	bne.n	800c3f8 <__kernel_rem_pio2f+0x1bc>
 800c3ec:	1e60      	subs	r0, r4, #1
 800c3ee:	a908      	add	r1, sp, #32
 800c3f0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800c3f4:	11f6      	asrs	r6, r6, #7
 800c3f6:	e7c8      	b.n	800c38a <__kernel_rem_pio2f+0x14e>
 800c3f8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c3fc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c404:	da31      	bge.n	800c46a <__kernel_rem_pio2f+0x22e>
 800c406:	2600      	movs	r6, #0
 800c408:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c410:	f040 8098 	bne.w	800c544 <__kernel_rem_pio2f+0x308>
 800c414:	1e60      	subs	r0, r4, #1
 800c416:	2200      	movs	r2, #0
 800c418:	4550      	cmp	r0, sl
 800c41a:	da4b      	bge.n	800c4b4 <__kernel_rem_pio2f+0x278>
 800c41c:	2a00      	cmp	r2, #0
 800c41e:	d065      	beq.n	800c4ec <__kernel_rem_pio2f+0x2b0>
 800c420:	3c01      	subs	r4, #1
 800c422:	ab08      	add	r3, sp, #32
 800c424:	3d08      	subs	r5, #8
 800c426:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d0f8      	beq.n	800c420 <__kernel_rem_pio2f+0x1e4>
 800c42e:	4628      	mov	r0, r5
 800c430:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c434:	f000 f974 	bl	800c720 <scalbnf>
 800c438:	1c63      	adds	r3, r4, #1
 800c43a:	aa44      	add	r2, sp, #272	@ 0x110
 800c43c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800c53c <__kernel_rem_pio2f+0x300>
 800c440:	0099      	lsls	r1, r3, #2
 800c442:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c446:	4623      	mov	r3, r4
 800c448:	2b00      	cmp	r3, #0
 800c44a:	f280 80a9 	bge.w	800c5a0 <__kernel_rem_pio2f+0x364>
 800c44e:	4623      	mov	r3, r4
 800c450:	2b00      	cmp	r3, #0
 800c452:	f2c0 80c7 	blt.w	800c5e4 <__kernel_rem_pio2f+0x3a8>
 800c456:	aa44      	add	r2, sp, #272	@ 0x110
 800c458:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800c45c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800c534 <__kernel_rem_pio2f+0x2f8>
 800c460:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800c540 <__kernel_rem_pio2f+0x304>
 800c464:	2000      	movs	r0, #0
 800c466:	1ae2      	subs	r2, r4, r3
 800c468:	e0b1      	b.n	800c5ce <__kernel_rem_pio2f+0x392>
 800c46a:	2602      	movs	r6, #2
 800c46c:	e78f      	b.n	800c38e <__kernel_rem_pio2f+0x152>
 800c46e:	f852 1b04 	ldr.w	r1, [r2], #4
 800c472:	b948      	cbnz	r0, 800c488 <__kernel_rem_pio2f+0x24c>
 800c474:	b121      	cbz	r1, 800c480 <__kernel_rem_pio2f+0x244>
 800c476:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800c47a:	f842 1c04 	str.w	r1, [r2, #-4]
 800c47e:	2101      	movs	r1, #1
 800c480:	f10e 0e01 	add.w	lr, lr, #1
 800c484:	4608      	mov	r0, r1
 800c486:	e787      	b.n	800c398 <__kernel_rem_pio2f+0x15c>
 800c488:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800c48c:	e7f5      	b.n	800c47a <__kernel_rem_pio2f+0x23e>
 800c48e:	f104 3cff 	add.w	ip, r4, #4294967295
 800c492:	aa08      	add	r2, sp, #32
 800c494:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c498:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c49c:	a908      	add	r1, sp, #32
 800c49e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800c4a2:	e781      	b.n	800c3a8 <__kernel_rem_pio2f+0x16c>
 800c4a4:	f104 3cff 	add.w	ip, r4, #4294967295
 800c4a8:	aa08      	add	r2, sp, #32
 800c4aa:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c4ae:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800c4b2:	e7f3      	b.n	800c49c <__kernel_rem_pio2f+0x260>
 800c4b4:	a908      	add	r1, sp, #32
 800c4b6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c4ba:	3801      	subs	r0, #1
 800c4bc:	430a      	orrs	r2, r1
 800c4be:	e7ab      	b.n	800c418 <__kernel_rem_pio2f+0x1dc>
 800c4c0:	3201      	adds	r2, #1
 800c4c2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800c4c6:	2e00      	cmp	r6, #0
 800c4c8:	d0fa      	beq.n	800c4c0 <__kernel_rem_pio2f+0x284>
 800c4ca:	9905      	ldr	r1, [sp, #20]
 800c4cc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800c4d0:	eb0d 0001 	add.w	r0, sp, r1
 800c4d4:	18e6      	adds	r6, r4, r3
 800c4d6:	a91c      	add	r1, sp, #112	@ 0x70
 800c4d8:	f104 0c01 	add.w	ip, r4, #1
 800c4dc:	384c      	subs	r0, #76	@ 0x4c
 800c4de:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800c4e2:	4422      	add	r2, r4
 800c4e4:	4562      	cmp	r2, ip
 800c4e6:	da04      	bge.n	800c4f2 <__kernel_rem_pio2f+0x2b6>
 800c4e8:	4614      	mov	r4, r2
 800c4ea:	e70e      	b.n	800c30a <__kernel_rem_pio2f+0xce>
 800c4ec:	9804      	ldr	r0, [sp, #16]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	e7e7      	b.n	800c4c2 <__kernel_rem_pio2f+0x286>
 800c4f2:	9903      	ldr	r1, [sp, #12]
 800c4f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c4f8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800c4fc:	9105      	str	r1, [sp, #20]
 800c4fe:	ee07 1a90 	vmov	s15, r1
 800c502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c506:	2400      	movs	r4, #0
 800c508:	ece6 7a01 	vstmia	r6!, {s15}
 800c50c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800c540 <__kernel_rem_pio2f+0x304>
 800c510:	46b1      	mov	r9, r6
 800c512:	455c      	cmp	r4, fp
 800c514:	dd04      	ble.n	800c520 <__kernel_rem_pio2f+0x2e4>
 800c516:	ece0 7a01 	vstmia	r0!, {s15}
 800c51a:	f10c 0c01 	add.w	ip, ip, #1
 800c51e:	e7e1      	b.n	800c4e4 <__kernel_rem_pio2f+0x2a8>
 800c520:	ecfe 6a01 	vldmia	lr!, {s13}
 800c524:	ed39 7a01 	vldmdb	r9!, {s14}
 800c528:	3401      	adds	r4, #1
 800c52a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c52e:	e7f0      	b.n	800c512 <__kernel_rem_pio2f+0x2d6>
 800c530:	0800d85c 	.word	0x0800d85c
 800c534:	0800d830 	.word	0x0800d830
 800c538:	43800000 	.word	0x43800000
 800c53c:	3b800000 	.word	0x3b800000
 800c540:	00000000 	.word	0x00000000
 800c544:	9b02      	ldr	r3, [sp, #8]
 800c546:	eeb0 0a48 	vmov.f32	s0, s16
 800c54a:	eba3 0008 	sub.w	r0, r3, r8
 800c54e:	f000 f8e7 	bl	800c720 <scalbnf>
 800c552:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800c538 <__kernel_rem_pio2f+0x2fc>
 800c556:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c55e:	db19      	blt.n	800c594 <__kernel_rem_pio2f+0x358>
 800c560:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800c53c <__kernel_rem_pio2f+0x300>
 800c564:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c568:	aa08      	add	r2, sp, #32
 800c56a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c56e:	3508      	adds	r5, #8
 800c570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c574:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c57c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c580:	ee10 3a10 	vmov	r3, s0
 800c584:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c588:	ee17 3a90 	vmov	r3, s15
 800c58c:	3401      	adds	r4, #1
 800c58e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c592:	e74c      	b.n	800c42e <__kernel_rem_pio2f+0x1f2>
 800c594:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c598:	aa08      	add	r2, sp, #32
 800c59a:	ee10 3a10 	vmov	r3, s0
 800c59e:	e7f6      	b.n	800c58e <__kernel_rem_pio2f+0x352>
 800c5a0:	a808      	add	r0, sp, #32
 800c5a2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c5a6:	9001      	str	r0, [sp, #4]
 800c5a8:	ee07 0a90 	vmov	s15, r0
 800c5ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c5b6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c5ba:	ed62 7a01 	vstmdb	r2!, {s15}
 800c5be:	e743      	b.n	800c448 <__kernel_rem_pio2f+0x20c>
 800c5c0:	ecfc 6a01 	vldmia	ip!, {s13}
 800c5c4:	ecb5 7a01 	vldmia	r5!, {s14}
 800c5c8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c5cc:	3001      	adds	r0, #1
 800c5ce:	4550      	cmp	r0, sl
 800c5d0:	dc01      	bgt.n	800c5d6 <__kernel_rem_pio2f+0x39a>
 800c5d2:	4282      	cmp	r2, r0
 800c5d4:	daf4      	bge.n	800c5c0 <__kernel_rem_pio2f+0x384>
 800c5d6:	a858      	add	r0, sp, #352	@ 0x160
 800c5d8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c5dc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800c5e0:	3b01      	subs	r3, #1
 800c5e2:	e735      	b.n	800c450 <__kernel_rem_pio2f+0x214>
 800c5e4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c5e6:	2b02      	cmp	r3, #2
 800c5e8:	dc09      	bgt.n	800c5fe <__kernel_rem_pio2f+0x3c2>
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	dc2b      	bgt.n	800c646 <__kernel_rem_pio2f+0x40a>
 800c5ee:	d044      	beq.n	800c67a <__kernel_rem_pio2f+0x43e>
 800c5f0:	f009 0007 	and.w	r0, r9, #7
 800c5f4:	b059      	add	sp, #356	@ 0x164
 800c5f6:	ecbd 8b04 	vpop	{d8-d9}
 800c5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5fe:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c600:	2b03      	cmp	r3, #3
 800c602:	d1f5      	bne.n	800c5f0 <__kernel_rem_pio2f+0x3b4>
 800c604:	aa30      	add	r2, sp, #192	@ 0xc0
 800c606:	1f0b      	subs	r3, r1, #4
 800c608:	4413      	add	r3, r2
 800c60a:	461a      	mov	r2, r3
 800c60c:	4620      	mov	r0, r4
 800c60e:	2800      	cmp	r0, #0
 800c610:	f1a2 0204 	sub.w	r2, r2, #4
 800c614:	dc52      	bgt.n	800c6bc <__kernel_rem_pio2f+0x480>
 800c616:	4622      	mov	r2, r4
 800c618:	2a01      	cmp	r2, #1
 800c61a:	f1a3 0304 	sub.w	r3, r3, #4
 800c61e:	dc5d      	bgt.n	800c6dc <__kernel_rem_pio2f+0x4a0>
 800c620:	ab30      	add	r3, sp, #192	@ 0xc0
 800c622:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800c540 <__kernel_rem_pio2f+0x304>
 800c626:	440b      	add	r3, r1
 800c628:	2c01      	cmp	r4, #1
 800c62a:	dc67      	bgt.n	800c6fc <__kernel_rem_pio2f+0x4c0>
 800c62c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800c630:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800c634:	2e00      	cmp	r6, #0
 800c636:	d167      	bne.n	800c708 <__kernel_rem_pio2f+0x4cc>
 800c638:	edc7 6a00 	vstr	s13, [r7]
 800c63c:	ed87 7a01 	vstr	s14, [r7, #4]
 800c640:	edc7 7a02 	vstr	s15, [r7, #8]
 800c644:	e7d4      	b.n	800c5f0 <__kernel_rem_pio2f+0x3b4>
 800c646:	ab30      	add	r3, sp, #192	@ 0xc0
 800c648:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800c540 <__kernel_rem_pio2f+0x304>
 800c64c:	440b      	add	r3, r1
 800c64e:	4622      	mov	r2, r4
 800c650:	2a00      	cmp	r2, #0
 800c652:	da24      	bge.n	800c69e <__kernel_rem_pio2f+0x462>
 800c654:	b34e      	cbz	r6, 800c6aa <__kernel_rem_pio2f+0x46e>
 800c656:	eef1 7a47 	vneg.f32	s15, s14
 800c65a:	edc7 7a00 	vstr	s15, [r7]
 800c65e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800c662:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c666:	aa31      	add	r2, sp, #196	@ 0xc4
 800c668:	2301      	movs	r3, #1
 800c66a:	429c      	cmp	r4, r3
 800c66c:	da20      	bge.n	800c6b0 <__kernel_rem_pio2f+0x474>
 800c66e:	b10e      	cbz	r6, 800c674 <__kernel_rem_pio2f+0x438>
 800c670:	eef1 7a67 	vneg.f32	s15, s15
 800c674:	edc7 7a01 	vstr	s15, [r7, #4]
 800c678:	e7ba      	b.n	800c5f0 <__kernel_rem_pio2f+0x3b4>
 800c67a:	ab30      	add	r3, sp, #192	@ 0xc0
 800c67c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800c540 <__kernel_rem_pio2f+0x304>
 800c680:	440b      	add	r3, r1
 800c682:	2c00      	cmp	r4, #0
 800c684:	da05      	bge.n	800c692 <__kernel_rem_pio2f+0x456>
 800c686:	b10e      	cbz	r6, 800c68c <__kernel_rem_pio2f+0x450>
 800c688:	eef1 7a67 	vneg.f32	s15, s15
 800c68c:	edc7 7a00 	vstr	s15, [r7]
 800c690:	e7ae      	b.n	800c5f0 <__kernel_rem_pio2f+0x3b4>
 800c692:	ed33 7a01 	vldmdb	r3!, {s14}
 800c696:	3c01      	subs	r4, #1
 800c698:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c69c:	e7f1      	b.n	800c682 <__kernel_rem_pio2f+0x446>
 800c69e:	ed73 7a01 	vldmdb	r3!, {s15}
 800c6a2:	3a01      	subs	r2, #1
 800c6a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c6a8:	e7d2      	b.n	800c650 <__kernel_rem_pio2f+0x414>
 800c6aa:	eef0 7a47 	vmov.f32	s15, s14
 800c6ae:	e7d4      	b.n	800c65a <__kernel_rem_pio2f+0x41e>
 800c6b0:	ecb2 7a01 	vldmia	r2!, {s14}
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6ba:	e7d6      	b.n	800c66a <__kernel_rem_pio2f+0x42e>
 800c6bc:	edd2 7a00 	vldr	s15, [r2]
 800c6c0:	edd2 6a01 	vldr	s13, [r2, #4]
 800c6c4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c6c8:	3801      	subs	r0, #1
 800c6ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6ce:	ed82 7a00 	vstr	s14, [r2]
 800c6d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6d6:	edc2 7a01 	vstr	s15, [r2, #4]
 800c6da:	e798      	b.n	800c60e <__kernel_rem_pio2f+0x3d2>
 800c6dc:	edd3 7a00 	vldr	s15, [r3]
 800c6e0:	edd3 6a01 	vldr	s13, [r3, #4]
 800c6e4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c6e8:	3a01      	subs	r2, #1
 800c6ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6ee:	ed83 7a00 	vstr	s14, [r3]
 800c6f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6f6:	edc3 7a01 	vstr	s15, [r3, #4]
 800c6fa:	e78d      	b.n	800c618 <__kernel_rem_pio2f+0x3dc>
 800c6fc:	ed33 7a01 	vldmdb	r3!, {s14}
 800c700:	3c01      	subs	r4, #1
 800c702:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c706:	e78f      	b.n	800c628 <__kernel_rem_pio2f+0x3ec>
 800c708:	eef1 6a66 	vneg.f32	s13, s13
 800c70c:	eeb1 7a47 	vneg.f32	s14, s14
 800c710:	edc7 6a00 	vstr	s13, [r7]
 800c714:	ed87 7a01 	vstr	s14, [r7, #4]
 800c718:	eef1 7a67 	vneg.f32	s15, s15
 800c71c:	e790      	b.n	800c640 <__kernel_rem_pio2f+0x404>
 800c71e:	bf00      	nop

0800c720 <scalbnf>:
 800c720:	ee10 3a10 	vmov	r3, s0
 800c724:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c728:	d02b      	beq.n	800c782 <scalbnf+0x62>
 800c72a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c72e:	d302      	bcc.n	800c736 <scalbnf+0x16>
 800c730:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c734:	4770      	bx	lr
 800c736:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c73a:	d123      	bne.n	800c784 <scalbnf+0x64>
 800c73c:	4b24      	ldr	r3, [pc, #144]	@ (800c7d0 <scalbnf+0xb0>)
 800c73e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c7d4 <scalbnf+0xb4>
 800c742:	4298      	cmp	r0, r3
 800c744:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c748:	db17      	blt.n	800c77a <scalbnf+0x5a>
 800c74a:	ee10 3a10 	vmov	r3, s0
 800c74e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c752:	3a19      	subs	r2, #25
 800c754:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c758:	4288      	cmp	r0, r1
 800c75a:	dd15      	ble.n	800c788 <scalbnf+0x68>
 800c75c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c7d8 <scalbnf+0xb8>
 800c760:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c7dc <scalbnf+0xbc>
 800c764:	ee10 3a10 	vmov	r3, s0
 800c768:	eeb0 7a67 	vmov.f32	s14, s15
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	bfb8      	it	lt
 800c770:	eef0 7a66 	vmovlt.f32	s15, s13
 800c774:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c778:	4770      	bx	lr
 800c77a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c7e0 <scalbnf+0xc0>
 800c77e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c782:	4770      	bx	lr
 800c784:	0dd2      	lsrs	r2, r2, #23
 800c786:	e7e5      	b.n	800c754 <scalbnf+0x34>
 800c788:	4410      	add	r0, r2
 800c78a:	28fe      	cmp	r0, #254	@ 0xfe
 800c78c:	dce6      	bgt.n	800c75c <scalbnf+0x3c>
 800c78e:	2800      	cmp	r0, #0
 800c790:	dd06      	ble.n	800c7a0 <scalbnf+0x80>
 800c792:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c796:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c79a:	ee00 3a10 	vmov	s0, r3
 800c79e:	4770      	bx	lr
 800c7a0:	f110 0f16 	cmn.w	r0, #22
 800c7a4:	da09      	bge.n	800c7ba <scalbnf+0x9a>
 800c7a6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c7e0 <scalbnf+0xc0>
 800c7aa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c7e4 <scalbnf+0xc4>
 800c7ae:	ee10 3a10 	vmov	r3, s0
 800c7b2:	eeb0 7a67 	vmov.f32	s14, s15
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	e7d9      	b.n	800c76e <scalbnf+0x4e>
 800c7ba:	3019      	adds	r0, #25
 800c7bc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c7c0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c7c4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c7e8 <scalbnf+0xc8>
 800c7c8:	ee07 3a90 	vmov	s15, r3
 800c7cc:	e7d7      	b.n	800c77e <scalbnf+0x5e>
 800c7ce:	bf00      	nop
 800c7d0:	ffff3cb0 	.word	0xffff3cb0
 800c7d4:	4c000000 	.word	0x4c000000
 800c7d8:	7149f2ca 	.word	0x7149f2ca
 800c7dc:	f149f2ca 	.word	0xf149f2ca
 800c7e0:	0da24260 	.word	0x0da24260
 800c7e4:	8da24260 	.word	0x8da24260
 800c7e8:	33000000 	.word	0x33000000

0800c7ec <floorf>:
 800c7ec:	ee10 3a10 	vmov	r3, s0
 800c7f0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c7f4:	3a7f      	subs	r2, #127	@ 0x7f
 800c7f6:	2a16      	cmp	r2, #22
 800c7f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c7fc:	dc2b      	bgt.n	800c856 <floorf+0x6a>
 800c7fe:	2a00      	cmp	r2, #0
 800c800:	da12      	bge.n	800c828 <floorf+0x3c>
 800c802:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c868 <floorf+0x7c>
 800c806:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c80a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c812:	dd06      	ble.n	800c822 <floorf+0x36>
 800c814:	2b00      	cmp	r3, #0
 800c816:	da24      	bge.n	800c862 <floorf+0x76>
 800c818:	2900      	cmp	r1, #0
 800c81a:	4b14      	ldr	r3, [pc, #80]	@ (800c86c <floorf+0x80>)
 800c81c:	bf08      	it	eq
 800c81e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c822:	ee00 3a10 	vmov	s0, r3
 800c826:	4770      	bx	lr
 800c828:	4911      	ldr	r1, [pc, #68]	@ (800c870 <floorf+0x84>)
 800c82a:	4111      	asrs	r1, r2
 800c82c:	420b      	tst	r3, r1
 800c82e:	d0fa      	beq.n	800c826 <floorf+0x3a>
 800c830:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800c868 <floorf+0x7c>
 800c834:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c838:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c840:	ddef      	ble.n	800c822 <floorf+0x36>
 800c842:	2b00      	cmp	r3, #0
 800c844:	bfbe      	ittt	lt
 800c846:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800c84a:	fa40 f202 	asrlt.w	r2, r0, r2
 800c84e:	189b      	addlt	r3, r3, r2
 800c850:	ea23 0301 	bic.w	r3, r3, r1
 800c854:	e7e5      	b.n	800c822 <floorf+0x36>
 800c856:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c85a:	d3e4      	bcc.n	800c826 <floorf+0x3a>
 800c85c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c860:	4770      	bx	lr
 800c862:	2300      	movs	r3, #0
 800c864:	e7dd      	b.n	800c822 <floorf+0x36>
 800c866:	bf00      	nop
 800c868:	7149f2ca 	.word	0x7149f2ca
 800c86c:	bf800000 	.word	0xbf800000
 800c870:	007fffff 	.word	0x007fffff

0800c874 <_init>:
 800c874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c876:	bf00      	nop
 800c878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c87a:	bc08      	pop	{r3}
 800c87c:	469e      	mov	lr, r3
 800c87e:	4770      	bx	lr

0800c880 <_fini>:
 800c880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c882:	bf00      	nop
 800c884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c886:	bc08      	pop	{r3}
 800c888:	469e      	mov	lr, r3
 800c88a:	4770      	bx	lr
