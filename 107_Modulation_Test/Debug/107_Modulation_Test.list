
107_Modulation_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d720  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010a8  0800d900  0800d900  0000e900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9a8  0800e9a8  000101e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9a8  0800e9a8  0000f9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9b0  0800e9b0  000101e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9b0  0800e9b0  0000f9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9b4  0800e9b4  0000f9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e9b8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  200001e4  0800eb9c  000101e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  0800eb9c  0001082c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d152  00000000  00000000  00010214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003710  00000000  00000000  0002d366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001978  00000000  00000000  00030a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013cc  00000000  00000000  000323f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa3e  00000000  00000000  000337bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ded1  00000000  00000000  0005e1fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117db1  00000000  00000000  0007c0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00193e7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008084  00000000  00000000  00193ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0019bf44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d8e8 	.word	0x0800d8e8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800d8e8 	.word	0x0800d8e8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
 8000f92:	460b      	mov	r3, r1
 8000f94:	80bb      	strh	r3, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	88b9      	ldrh	r1, [r7, #4]
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fab5 	bl	8001510 <ST7735_DrawPixel>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000fae:	b590      	push	{r4, r7, lr}
 8000fb0:	b085      	sub	sp, #20
 8000fb2:	af02      	add	r7, sp, #8
 8000fb4:	4604      	mov	r4, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4611      	mov	r1, r2
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4623      	mov	r3, r4
 8000fbe:	80fb      	strh	r3, [r7, #6]
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	80bb      	strh	r3, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000fcc:	88f8      	ldrh	r0, [r7, #6]
 8000fce:	88b9      	ldrh	r1, [r7, #4]
 8000fd0:	887a      	ldrh	r2, [r7, #2]
 8000fd2:	883c      	ldrh	r4, [r7, #0]
 8000fd4:	8b3b      	ldrh	r3, [r7, #24]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4623      	mov	r3, r4
 8000fda:	f000 fba3 	bl	8001724 <ST7735_FillRectangle>
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}

08000fe6 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	80fb      	strh	r3, [r7, #6]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	80bb      	strh	r3, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8000ff8:	887a      	ldrh	r2, [r7, #2]
 8000ffa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ffc0 	bl	8000f88 <drawPixel>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b089      	sub	sp, #36	@ 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	4604      	mov	r4, r0
 8001018:	4608      	mov	r0, r1
 800101a:	4611      	mov	r1, r2
 800101c:	461a      	mov	r2, r3
 800101e:	4623      	mov	r3, r4
 8001020:	80fb      	strh	r3, [r7, #6]
 8001022:	4603      	mov	r3, r0
 8001024:	80bb      	strh	r3, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]
 800102a:	4613      	mov	r3, r2
 800102c:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800102e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001032:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800103c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001040:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001048:	1acb      	subs	r3, r1, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	bfb8      	it	lt
 800104e:	425b      	neglt	r3, r3
 8001050:	429a      	cmp	r2, r3
 8001052:	bfcc      	ite	gt
 8001054:	2301      	movgt	r3, #1
 8001056:	2300      	movle	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	837b      	strh	r3, [r7, #26]
    if (steep) {
 800105c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00b      	beq.n	800107c <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	833b      	strh	r3, [r7, #24]
 8001068:	88bb      	ldrh	r3, [r7, #4]
 800106a:	80fb      	strh	r3, [r7, #6]
 800106c:	8b3b      	ldrh	r3, [r7, #24]
 800106e:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	82fb      	strh	r3, [r7, #22]
 8001074:	883b      	ldrh	r3, [r7, #0]
 8001076:	807b      	strh	r3, [r7, #2]
 8001078:	8afb      	ldrh	r3, [r7, #22]
 800107a:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 800107c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001080:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001084:	429a      	cmp	r2, r3
 8001086:	dd0b      	ble.n	80010a0 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	82bb      	strh	r3, [r7, #20]
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	80fb      	strh	r3, [r7, #6]
 8001090:	8abb      	ldrh	r3, [r7, #20]
 8001092:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8001094:	88bb      	ldrh	r3, [r7, #4]
 8001096:	827b      	strh	r3, [r7, #18]
 8001098:	883b      	ldrh	r3, [r7, #0]
 800109a:	80bb      	strh	r3, [r7, #4]
 800109c:	8a7b      	ldrh	r3, [r7, #18]
 800109e:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80010a0:	887a      	ldrh	r2, [r7, #2]
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 80010aa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80010ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bfb8      	it	lt
 80010b8:	425b      	neglt	r3, r3
 80010ba:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 80010bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010c0:	0fda      	lsrs	r2, r3, #31
 80010c2:	4413      	add	r3, r2
 80010c4:	105b      	asrs	r3, r3, #1
 80010c6:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 80010c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80010cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	da02      	bge.n	80010da <writeLine+0xca>
        ystep = 1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	83bb      	strh	r3, [r7, #28]
 80010d8:	e031      	b.n	800113e <writeLine+0x12e>
    } else {
        ystep = -1;
 80010da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010de:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 80010e0:	e02d      	b.n	800113e <writeLine+0x12e>
        if (steep) {
 80010e2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d008      	beq.n	80010fc <writeLine+0xec>
            writePixel(y0, x0, color);
 80010ea:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80010ec:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80010f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff76 	bl	8000fe6 <writePixel>
 80010fa:	e007      	b.n	800110c <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 80010fc:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80010fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff6d 	bl	8000fe6 <writePixel>
        }
        err -= dy;
 800110c:	8bfa      	ldrh	r2, [r7, #30]
 800110e:	89fb      	ldrh	r3, [r7, #14]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	b29b      	uxth	r3, r3
 8001114:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 8001116:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800111a:	2b00      	cmp	r3, #0
 800111c:	da09      	bge.n	8001132 <writeLine+0x122>
            y0 += ystep;
 800111e:	88ba      	ldrh	r2, [r7, #4]
 8001120:	8bbb      	ldrh	r3, [r7, #28]
 8001122:	4413      	add	r3, r2
 8001124:	b29b      	uxth	r3, r3
 8001126:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8001128:	8bfa      	ldrh	r2, [r7, #30]
 800112a:	8a3b      	ldrh	r3, [r7, #16]
 800112c:	4413      	add	r3, r2
 800112e:	b29b      	uxth	r3, r3
 8001130:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 8001132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001136:	b29b      	uxth	r3, r3
 8001138:	3301      	adds	r3, #1
 800113a:	b29b      	uxth	r3, r3
 800113c:	80fb      	strh	r3, [r7, #6]
 800113e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001142:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001146:	429a      	cmp	r2, r3
 8001148:	ddcb      	ble.n	80010e2 <writeLine+0xd2>
        }
    }
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	3724      	adds	r7, #36	@ 0x24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd90      	pop	{r4, r7, pc}

08001154 <drawFastHLine>:
void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
	writeLine(x, y, x, y + h - 1, color);
}
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b085      	sub	sp, #20
 8001158:	af02      	add	r7, sp, #8
 800115a:	4604      	mov	r4, r0
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4623      	mov	r3, r4
 8001164:	80fb      	strh	r3, [r7, #6]
 8001166:	4603      	mov	r3, r0
 8001168:	80bb      	strh	r3, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	807b      	strh	r3, [r7, #2]
 800116e:	4613      	mov	r3, r2
 8001170:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 8001172:	88fa      	ldrh	r2, [r7, #6]
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	4413      	add	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	3b01      	subs	r3, #1
 800117c:	b29b      	uxth	r3, r3
 800117e:	b21a      	sxth	r2, r3
 8001180:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001184:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001188:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800118c:	883b      	ldrh	r3, [r7, #0]
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	4623      	mov	r3, r4
 8001192:	f7ff ff3d 	bl	8001010 <writeLine>
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bd90      	pop	{r4, r7, pc}
	...

080011a0 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <fillScreen+0x2c>)
 80011ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011b0:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <fillScreen+0x30>)
 80011b2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	460b      	mov	r3, r1
 80011bc:	2100      	movs	r1, #0
 80011be:	2000      	movs	r0, #0
 80011c0:	f7ff fef5 	bl	8000fae <fillRect>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000200 	.word	0x20000200
 80011d0:	20000202 	.word	0x20000202

080011d4 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e2:	f004 fc97 	bl	8005b14 <HAL_GPIO_WritePin>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}

080011ea <ST7735_Unselect>:

void ST7735_Unselect()
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f8:	f004 fc8c 	bl	8005b14 <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <ST7735_Reset>:

void ST7735_Reset()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2140      	movs	r1, #64	@ 0x40
 8001208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120c:	f004 fc82 	bl	8005b14 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001210:	2005      	movs	r0, #5
 8001212:	f002 f969 	bl	80034e8 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8001216:	2201      	movs	r2, #1
 8001218:	2140      	movs	r1, #64	@ 0x40
 800121a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800121e:	f004 fc79 	bl	8005b14 <HAL_GPIO_WritePin>
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001238:	4806      	ldr	r0, [pc, #24]	@ (8001254 <ST7735_WriteCommand+0x2c>)
 800123a:	f004 fc6b 	bl	8005b14 <HAL_GPIO_WritePin>
		{

		}
	#endif
	#ifdef WITHOUT_DMA
		HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800123e:	1df9      	adds	r1, r7, #7
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	2201      	movs	r2, #1
 8001246:	4804      	ldr	r0, [pc, #16]	@ (8001258 <ST7735_WriteCommand+0x30>)
 8001248:	f005 fd89 	bl	8006d5e <HAL_SPI_Transmit>
	#endif
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	48000400 	.word	0x48000400
 8001258:	200003a4 	.word	0x200003a4

0800125c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001266:	2201      	movs	r2, #1
 8001268:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800126c:	4807      	ldr	r0, [pc, #28]	@ (800128c <ST7735_WriteData+0x30>)
 800126e:	f004 fc51 	bl	8005b14 <HAL_GPIO_WritePin>
    	{

    	}
	#endif
	#ifdef WITHOUT_DMA
    	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b29a      	uxth	r2, r3
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4804      	ldr	r0, [pc, #16]	@ (8001290 <ST7735_WriteData+0x34>)
 800127e:	f005 fd6e 	bl	8006d5e <HAL_SPI_Transmit>
	#endif
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	48000400 	.word	0x48000400
 8001290:	200003a4 	.word	0x200003a4

08001294 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80012a6:	e034      	b.n	8001312 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80012b2:	7afb      	ldrb	r3, [r7, #11]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ffb7 	bl	8001228 <ST7735_WriteCommand>

        numArgs = *addr++;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	1c5a      	adds	r2, r3, #1
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80012c4:	7abb      	ldrb	r3, [r7, #10]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012cc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80012ce:	7abb      	ldrb	r3, [r7, #10]
 80012d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012d4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80012d6:	7abb      	ldrb	r3, [r7, #10]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80012dc:	7abb      	ldrb	r3, [r7, #10]
 80012de:	4619      	mov	r1, r3
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ffbb 	bl	800125c <ST7735_WriteData>
            addr += numArgs;
 80012e6:	7abb      	ldrb	r3, [r7, #10]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80012ee:	89bb      	ldrh	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00e      	beq.n	8001312 <DisplayInit+0x7e>
            ms = *addr++;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80012fe:	89bb      	ldrh	r3, [r7, #12]
 8001300:	2bff      	cmp	r3, #255	@ 0xff
 8001302:	d102      	bne.n	800130a <DisplayInit+0x76>
 8001304:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001308:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800130a:	89bb      	ldrh	r3, [r7, #12]
 800130c:	4618      	mov	r0, r3
 800130e:	f002 f8eb 	bl	80034e8 <HAL_Delay>
    while(numCommands--) {
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	1e5a      	subs	r2, r3, #1
 8001316:	73fa      	strb	r2, [r7, #15]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1c5      	bne.n	80012a8 <DisplayInit+0x14>
        }
    }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	4604      	mov	r4, r0
 8001330:	4608      	mov	r0, r1
 8001332:	4611      	mov	r1, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4623      	mov	r3, r4
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	4603      	mov	r3, r0
 800133c:	71bb      	strb	r3, [r7, #6]
 800133e:	460b      	mov	r3, r1
 8001340:	717b      	strb	r3, [r7, #5]
 8001342:	4613      	mov	r3, r2
 8001344:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001346:	202a      	movs	r0, #42	@ 0x2a
 8001348:	f7ff ff6e 	bl	8001228 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800134c:	2300      	movs	r3, #0
 800134e:	733b      	strb	r3, [r7, #12]
 8001350:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <ST7735_SetAddressWindow+0x88>)
 8001352:	781a      	ldrb	r2, [r3, #0]
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4413      	add	r3, r2
 8001358:	b2db      	uxtb	r3, r3
 800135a:	737b      	strb	r3, [r7, #13]
 800135c:	2300      	movs	r3, #0
 800135e:	73bb      	strb	r3, [r7, #14]
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <ST7735_SetAddressWindow+0x88>)
 8001362:	781a      	ldrb	r2, [r3, #0]
 8001364:	797b      	ldrb	r3, [r7, #5]
 8001366:	4413      	add	r3, r2
 8001368:	b2db      	uxtb	r3, r3
 800136a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2104      	movs	r1, #4
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff72 	bl	800125c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001378:	202b      	movs	r0, #43	@ 0x2b
 800137a:	f7ff ff55 	bl	8001228 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800137e:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <ST7735_SetAddressWindow+0x8c>)
 8001380:	781a      	ldrb	r2, [r3, #0]
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	4413      	add	r3, r2
 8001386:	b2db      	uxtb	r3, r3
 8001388:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800138a:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <ST7735_SetAddressWindow+0x8c>)
 800138c:	781a      	ldrb	r2, [r3, #0]
 800138e:	793b      	ldrb	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	b2db      	uxtb	r3, r3
 8001394:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2104      	movs	r1, #4
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff5d 	bl	800125c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80013a2:	202c      	movs	r0, #44	@ 0x2c
 80013a4:	f7ff ff40 	bl	8001228 <ST7735_WriteCommand>
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	20000207 	.word	0x20000207
 80013b4:	20000208 	.word	0x20000208

080013b8 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 80013c2:	f7ff ff07 	bl	80011d4 <ST7735_Select>
    ST7735_Reset();
 80013c6:	f7ff ff1b 	bl	8001200 <ST7735_Reset>
    DisplayInit(init_cmds1);
 80013ca:	480c      	ldr	r0, [pc, #48]	@ (80013fc <ST7735_Init+0x44>)
 80013cc:	f7ff ff62 	bl	8001294 <DisplayInit>
    DisplayInit(init_cmds2);
 80013d0:	480b      	ldr	r0, [pc, #44]	@ (8001400 <ST7735_Init+0x48>)
 80013d2:	f7ff ff5f 	bl	8001294 <DisplayInit>
    DisplayInit(init_cmds3);
 80013d6:	480b      	ldr	r0, [pc, #44]	@ (8001404 <ST7735_Init+0x4c>)
 80013d8:	f7ff ff5c 	bl	8001294 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <ST7735_Init+0x50>)
 80013de:	2202      	movs	r2, #2
 80013e0:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <ST7735_Init+0x54>)
 80013e4:	2203      	movs	r2, #3
 80013e6:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f810 	bl	8001410 <ST7735_SetRotation>
    ST7735_Unselect();
 80013f0:	f7ff fefb 	bl	80011ea <ST7735_Unselect>

}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	0800da44 	.word	0x0800da44
 8001400:	0800da7c 	.word	0x0800da7c
 8001404:	0800da8c 	.word	0x0800da8c
 8001408:	20000205 	.word	0x20000205
 800140c:	20000206 	.word	0x20000206

08001410 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b33      	ldr	r3, [pc, #204]	@ (80014f4 <ST7735_SetRotation+0xe4>)
 8001428:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800142a:	4b32      	ldr	r3, [pc, #200]	@ (80014f4 <ST7735_SetRotation+0xe4>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d84e      	bhi.n	80014d0 <ST7735_SetRotation+0xc0>
 8001432:	a201      	add	r2, pc, #4	@ (adr r2, 8001438 <ST7735_SetRotation+0x28>)
 8001434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001438:	08001449 	.word	0x08001449
 800143c:	0800146b 	.word	0x0800146b
 8001440:	0800148d 	.word	0x0800148d
 8001444:	080014af 	.word	0x080014af
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001448:	23c0      	movs	r3, #192	@ 0xc0
 800144a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800144c:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001452:	4b2a      	ldr	r3, [pc, #168]	@ (80014fc <ST7735_SetRotation+0xec>)
 8001454:	2280      	movs	r2, #128	@ 0x80
 8001456:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8001458:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <ST7735_SetRotation+0xf0>)
 800145a:	781a      	ldrb	r2, [r3, #0]
 800145c:	4b29      	ldr	r3, [pc, #164]	@ (8001504 <ST7735_SetRotation+0xf4>)
 800145e:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8001460:	4b29      	ldr	r3, [pc, #164]	@ (8001508 <ST7735_SetRotation+0xf8>)
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	4b29      	ldr	r3, [pc, #164]	@ (800150c <ST7735_SetRotation+0xfc>)
 8001466:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001468:	e032      	b.n	80014d0 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800146a:	23a0      	movs	r3, #160	@ 0xa0
 800146c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800146e:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <ST7735_SetRotation+0xec>)
 8001470:	2280      	movs	r2, #128	@ 0x80
 8001472:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001474:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 8001476:	2280      	movs	r2, #128	@ 0x80
 8001478:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800147a:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <ST7735_SetRotation+0xf0>)
 800147c:	781a      	ldrb	r2, [r3, #0]
 800147e:	4b23      	ldr	r3, [pc, #140]	@ (800150c <ST7735_SetRotation+0xfc>)
 8001480:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001482:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <ST7735_SetRotation+0xf8>)
 8001484:	781a      	ldrb	r2, [r3, #0]
 8001486:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <ST7735_SetRotation+0xf4>)
 8001488:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800148a:	e021      	b.n	80014d0 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001490:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 8001492:	2280      	movs	r2, #128	@ 0x80
 8001494:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001496:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <ST7735_SetRotation+0xec>)
 8001498:	2280      	movs	r2, #128	@ 0x80
 800149a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 800149c:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <ST7735_SetRotation+0xf0>)
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <ST7735_SetRotation+0xf4>)
 80014a2:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80014a4:	4b18      	ldr	r3, [pc, #96]	@ (8001508 <ST7735_SetRotation+0xf8>)
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	4b18      	ldr	r3, [pc, #96]	@ (800150c <ST7735_SetRotation+0xfc>)
 80014aa:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80014ac:	e010      	b.n	80014d0 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80014ae:	2360      	movs	r3, #96	@ 0x60
 80014b0:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <ST7735_SetRotation+0xec>)
 80014b4:	2280      	movs	r2, #128	@ 0x80
 80014b6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <ST7735_SetRotation+0xe8>)
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <ST7735_SetRotation+0xf0>)
 80014c0:	781a      	ldrb	r2, [r3, #0]
 80014c2:	4b12      	ldr	r3, [pc, #72]	@ (800150c <ST7735_SetRotation+0xfc>)
 80014c4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <ST7735_SetRotation+0xf8>)
 80014c8:	781a      	ldrb	r2, [r3, #0]
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <ST7735_SetRotation+0xf4>)
 80014cc:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80014ce:	bf00      	nop
  }
  ST7735_Select();
 80014d0:	f7ff fe80 	bl	80011d4 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80014d4:	2036      	movs	r0, #54	@ 0x36
 80014d6:	f7ff fea7 	bl	8001228 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80014da:	f107 030f 	add.w	r3, r7, #15
 80014de:	2101      	movs	r1, #1
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff febb 	bl	800125c <ST7735_WriteData>
  ST7735_Unselect();
 80014e6:	f7ff fe80 	bl	80011ea <ST7735_Unselect>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000204 	.word	0x20000204
 80014f8:	20000202 	.word	0x20000202
 80014fc:	20000200 	.word	0x20000200
 8001500:	20000205 	.word	0x20000205
 8001504:	20000207 	.word	0x20000207
 8001508:	20000206 	.word	0x20000206
 800150c:	20000208 	.word	0x20000208

08001510 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
 800151a:	460b      	mov	r3, r1
 800151c:	80bb      	strh	r3, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <ST7735_DrawPixel+0x74>)
 8001526:	f9b2 2000 	ldrsh.w	r2, [r2]
 800152a:	4293      	cmp	r3, r2
 800152c:	da26      	bge.n	800157c <ST7735_DrawPixel+0x6c>
 800152e:	88bb      	ldrh	r3, [r7, #4]
 8001530:	4a15      	ldr	r2, [pc, #84]	@ (8001588 <ST7735_DrawPixel+0x78>)
 8001532:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001536:	4293      	cmp	r3, r2
 8001538:	da20      	bge.n	800157c <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 800153a:	f7ff fe4b 	bl	80011d4 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	b2d8      	uxtb	r0, r3
 8001542:	88bb      	ldrh	r3, [r7, #4]
 8001544:	b2d9      	uxtb	r1, r3
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	3301      	adds	r3, #1
 800154c:	b2da      	uxtb	r2, r3
 800154e:	88bb      	ldrh	r3, [r7, #4]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	3301      	adds	r3, #1
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f7ff fee7 	bl	8001328 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	b29b      	uxth	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	733b      	strb	r3, [r7, #12]
 8001564:	887b      	ldrh	r3, [r7, #2]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	2102      	movs	r1, #2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe73 	bl	800125c <ST7735_WriteData>

    ST7735_Unselect();
 8001576:	f7ff fe38 	bl	80011ea <ST7735_Unselect>
 800157a:	e000      	b.n	800157e <ST7735_DrawPixel+0x6e>
        return;
 800157c:	bf00      	nop
}
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000200 	.word	0x20000200
 8001588:	20000202 	.word	0x20000202

0800158c <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800158c:	b082      	sub	sp, #8
 800158e:	b590      	push	{r4, r7, lr}
 8001590:	b089      	sub	sp, #36	@ 0x24
 8001592:	af00      	add	r7, sp, #0
 8001594:	637b      	str	r3, [r7, #52]	@ 0x34
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
 800159a:	460b      	mov	r3, r1
 800159c:	80bb      	strh	r3, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	b2d8      	uxtb	r0, r3
 80015a6:	88bb      	ldrh	r3, [r7, #4]
 80015a8:	b2d9      	uxtb	r1, r3
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80015b2:	4413      	add	r3, r2
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b2dc      	uxtb	r4, r3
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80015c2:	4413      	add	r3, r2
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	3b01      	subs	r3, #1
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4622      	mov	r2, r4
 80015cc:	f7ff feac 	bl	8001328 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
 80015d4:	e043      	b.n	800165e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80015d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	3b20      	subs	r3, #32
 80015dc:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80015e0:	fb01 f303 	mul.w	r3, r1, r3
 80015e4:	4619      	mov	r1, r3
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	440b      	add	r3, r1
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	e029      	b.n	800164c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00e      	beq.n	8001626 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001608:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	b29b      	uxth	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	743b      	strb	r3, [r7, #16]
 8001612:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001614:	b2db      	uxtb	r3, r3
 8001616:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	2102      	movs	r1, #2
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fe1c 	bl	800125c <ST7735_WriteData>
 8001624:	e00f      	b.n	8001646 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001626:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	b29b      	uxth	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	733b      	strb	r3, [r7, #12]
 8001632:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001636:	b2db      	uxtb	r3, r3
 8001638:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	2102      	movs	r1, #2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fe0b 	bl	800125c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	3301      	adds	r3, #1
 800164a:	61bb      	str	r3, [r7, #24]
 800164c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001650:	461a      	mov	r2, r3
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4293      	cmp	r3, r2
 8001656:	d3cf      	bcc.n	80015f8 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	3301      	adds	r3, #1
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001662:	461a      	mov	r2, r3
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	4293      	cmp	r3, r2
 8001668:	d3b5      	bcc.n	80015d6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800166a:	bf00      	nop
 800166c:	bf00      	nop
 800166e:	3724      	adds	r7, #36	@ 0x24
 8001670:	46bd      	mov	sp, r7
 8001672:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001676:	b002      	add	sp, #8
 8001678:	4770      	bx	lr
	...

0800167c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800167c:	b082      	sub	sp, #8
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af04      	add	r7, sp, #16
 8001684:	603a      	str	r2, [r7, #0]
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	4603      	mov	r3, r0
 800168a:	80fb      	strh	r3, [r7, #6]
 800168c:	460b      	mov	r3, r1
 800168e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001690:	f7ff fda0 	bl	80011d4 <ST7735_Select>

    while(*str) {
 8001694:	e033      	b.n	80016fe <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	7d3a      	ldrb	r2, [r7, #20]
 800169a:	4413      	add	r3, r2
 800169c:	4a1f      	ldr	r2, [pc, #124]	@ (800171c <ST7735_WriteString+0xa0>)
 800169e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016a2:	4293      	cmp	r3, r2
 80016a4:	db16      	blt.n	80016d4 <ST7735_WriteString+0x58>
            x = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80016aa:	7d7b      	ldrb	r3, [r7, #21]
 80016ac:	461a      	mov	r2, r3
 80016ae:	88bb      	ldrh	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 80016b4:	88bb      	ldrh	r3, [r7, #4]
 80016b6:	7d7a      	ldrb	r2, [r7, #21]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a19      	ldr	r2, [pc, #100]	@ (8001720 <ST7735_WriteString+0xa4>)
 80016bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016c0:	4293      	cmp	r3, r2
 80016c2:	da21      	bge.n	8001708 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b20      	cmp	r3, #32
 80016ca:	d103      	bne.n	80016d4 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	603b      	str	r3, [r7, #0]
                continue;
 80016d2:	e014      	b.n	80016fe <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	781a      	ldrb	r2, [r3, #0]
 80016d8:	88b9      	ldrh	r1, [r7, #4]
 80016da:	88f8      	ldrh	r0, [r7, #6]
 80016dc:	8c3b      	ldrh	r3, [r7, #32]
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	8bbb      	ldrh	r3, [r7, #28]
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f7ff ff4f 	bl	800158c <ST7735_WriteChar>
        x += font.width;
 80016ee:	7d3b      	ldrb	r3, [r7, #20]
 80016f0:	461a      	mov	r2, r3
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	4413      	add	r3, r2
 80016f6:	80fb      	strh	r3, [r7, #6]
        str++;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	603b      	str	r3, [r7, #0]
    while(*str) {
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1c7      	bne.n	8001696 <ST7735_WriteString+0x1a>
 8001706:	e000      	b.n	800170a <ST7735_WriteString+0x8e>
                break;
 8001708:	bf00      	nop
    }

    ST7735_Unselect();
 800170a:	f7ff fd6e 	bl	80011ea <ST7735_Unselect>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001718:	b002      	add	sp, #8
 800171a:	4770      	bx	lr
 800171c:	20000200 	.word	0x20000200
 8001720:	20000202 	.word	0x20000202

08001724 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	4604      	mov	r4, r0
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4623      	mov	r3, r4
 8001734:	80fb      	strh	r3, [r7, #6]
 8001736:	4603      	mov	r3, r0
 8001738:	80bb      	strh	r3, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	807b      	strh	r3, [r7, #2]
 800173e:	4613      	mov	r3, r2
 8001740:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8001742:	88fb      	ldrh	r3, [r7, #6]
 8001744:	4a38      	ldr	r2, [pc, #224]	@ (8001828 <ST7735_FillRectangle+0x104>)
 8001746:	f9b2 2000 	ldrsh.w	r2, [r2]
 800174a:	4293      	cmp	r3, r2
 800174c:	da67      	bge.n	800181e <ST7735_FillRectangle+0xfa>
 800174e:	88bb      	ldrh	r3, [r7, #4]
 8001750:	4a36      	ldr	r2, [pc, #216]	@ (800182c <ST7735_FillRectangle+0x108>)
 8001752:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001756:	4293      	cmp	r3, r2
 8001758:	da61      	bge.n	800181e <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 800175a:	88fa      	ldrh	r2, [r7, #6]
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	4413      	add	r3, r2
 8001760:	4a31      	ldr	r2, [pc, #196]	@ (8001828 <ST7735_FillRectangle+0x104>)
 8001762:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001766:	4293      	cmp	r3, r2
 8001768:	dd06      	ble.n	8001778 <ST7735_FillRectangle+0x54>
 800176a:	4b2f      	ldr	r3, [pc, #188]	@ (8001828 <ST7735_FillRectangle+0x104>)
 800176c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001770:	b29a      	uxth	r2, r3
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8001778:	88ba      	ldrh	r2, [r7, #4]
 800177a:	883b      	ldrh	r3, [r7, #0]
 800177c:	4413      	add	r3, r2
 800177e:	4a2b      	ldr	r2, [pc, #172]	@ (800182c <ST7735_FillRectangle+0x108>)
 8001780:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001784:	4293      	cmp	r3, r2
 8001786:	dd06      	ble.n	8001796 <ST7735_FillRectangle+0x72>
 8001788:	4b28      	ldr	r3, [pc, #160]	@ (800182c <ST7735_FillRectangle+0x108>)
 800178a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178e:	b29a      	uxth	r2, r3
 8001790:	88bb      	ldrh	r3, [r7, #4]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001796:	f7ff fd1d 	bl	80011d4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	b2d8      	uxtb	r0, r3
 800179e:	88bb      	ldrh	r3, [r7, #4]
 80017a0:	b2d9      	uxtb	r1, r3
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	887b      	ldrh	r3, [r7, #2]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b2dc      	uxtb	r4, r3
 80017b2:	88bb      	ldrh	r3, [r7, #4]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	883b      	ldrh	r3, [r7, #0]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	3b01      	subs	r3, #1
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	4622      	mov	r2, r4
 80017c4:	f7ff fdb0 	bl	8001328 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80017c8:	8c3b      	ldrh	r3, [r7, #32]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	733b      	strb	r3, [r7, #12]
 80017d2:	8c3b      	ldrh	r3, [r7, #32]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017de:	4814      	ldr	r0, [pc, #80]	@ (8001830 <ST7735_FillRectangle+0x10c>)
 80017e0:	f004 f998 	bl	8005b14 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80017e4:	883b      	ldrh	r3, [r7, #0]
 80017e6:	80bb      	strh	r3, [r7, #4]
 80017e8:	e013      	b.n	8001812 <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	80fb      	strh	r3, [r7, #6]
 80017ee:	e00a      	b.n	8001806 <ST7735_FillRectangle+0xe2>
				{

				}
			#endif
			#ifdef WITHOUT_DMA
				HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80017f0:	f107 010c 	add.w	r1, r7, #12
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
 80017f8:	2202      	movs	r2, #2
 80017fa:	480e      	ldr	r0, [pc, #56]	@ (8001834 <ST7735_FillRectangle+0x110>)
 80017fc:	f005 faaf 	bl	8006d5e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	3b01      	subs	r3, #1
 8001804:	80fb      	strh	r3, [r7, #6]
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f1      	bne.n	80017f0 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 800180c:	88bb      	ldrh	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	80bb      	strh	r3, [r7, #4]
 8001812:	88bb      	ldrh	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1e8      	bne.n	80017ea <ST7735_FillRectangle+0xc6>
			#endif
        }
    }

    ST7735_Unselect();
 8001818:	f7ff fce7 	bl	80011ea <ST7735_Unselect>
 800181c:	e000      	b.n	8001820 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 800181e:	bf00      	nop
}
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bd90      	pop	{r4, r7, pc}
 8001826:	bf00      	nop
 8001828:	20000200 	.word	0x20000200
 800182c:	20000202 	.word	0x20000202
 8001830:	48000400 	.word	0x48000400
 8001834:	200003a4 	.word	0x200003a4

08001838 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Interrupts *****************************************************************/
// GPIO Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af04      	add	r7, sp, #16
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	// Interrupt Routine
	switch (GPIO_Pin) {
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001848:	d008      	beq.n	800185c <HAL_GPIO_EXTI_Callback+0x24>
 800184a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800184e:	f300 8089 	bgt.w	8001964 <HAL_GPIO_EXTI_Callback+0x12c>
 8001852:	2b02      	cmp	r3, #2
 8001854:	d016      	beq.n	8001884 <HAL_GPIO_EXTI_Callback+0x4c>
 8001856:	2b04      	cmp	r3, #4
 8001858:	d04c      	beq.n	80018f4 <HAL_GPIO_EXTI_Callback+0xbc>
		sprintf(msg_console, "Taster2 gedrückt! \r\n");
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console),
		HAL_MAX_DELAY);
		break;
	default:
		break;
 800185a:	e083      	b.n	8001964 <HAL_GPIO_EXTI_Callback+0x12c>
		switch (handler_state) {
 800185c:	4b44      	ldr	r3, [pc, #272]	@ (8001970 <HAL_GPIO_EXTI_Callback+0x138>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <HAL_GPIO_EXTI_Callback+0x32>
 8001864:	2b01      	cmp	r3, #1
 8001866:	d004      	beq.n	8001872 <HAL_GPIO_EXTI_Callback+0x3a>
 8001868:	e007      	b.n	800187a <HAL_GPIO_EXTI_Callback+0x42>
			set_handler_state(SINUS_MOD);
 800186a:	2001      	movs	r0, #1
 800186c:	f001 fc16 	bl	800309c <set_handler_state>
			break;
 8001870:	e007      	b.n	8001882 <HAL_GPIO_EXTI_Callback+0x4a>
			set_handler_state(IDLE);
 8001872:	2000      	movs	r0, #0
 8001874:	f001 fc12 	bl	800309c <set_handler_state>
			break;
 8001878:	e003      	b.n	8001882 <HAL_GPIO_EXTI_Callback+0x4a>
			set_handler_state(IDLE);
 800187a:	2000      	movs	r0, #0
 800187c:	f001 fc0e 	bl	800309c <set_handler_state>
			break;
 8001880:	bf00      	nop
		break;
 8001882:	e070      	b.n	8001966 <HAL_GPIO_EXTI_Callback+0x12e>
		ST7735_FillRectangle(0, 6 * px_ofs2, 0, px_ofs2, BLACK);
 8001884:	4b3b      	ldr	r3, [pc, #236]	@ (8001974 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	0052      	lsls	r2, r2, #1
 800188c:	4413      	add	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	b299      	uxth	r1, r3
 8001892:	4b38      	ldr	r3, [pc, #224]	@ (8001974 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	2300      	movs	r3, #0
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	4613      	mov	r3, r2
 800189e:	2200      	movs	r2, #0
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff ff3f 	bl	8001724 <ST7735_FillRectangle>
		sprintf(msg_display, "Taster1 gedrueckt!");
 80018a6:	4934      	ldr	r1, [pc, #208]	@ (8001978 <HAL_GPIO_EXTI_Callback+0x140>)
 80018a8:	4834      	ldr	r0, [pc, #208]	@ (800197c <HAL_GPIO_EXTI_Callback+0x144>)
 80018aa:	f009 fa6d 	bl	800ad88 <siprintf>
		ST7735_WriteString(0, 7 * px_ofs2, msg_display, Font_7x10, GREEN,
 80018ae:	4b31      	ldr	r3, [pc, #196]	@ (8001974 <HAL_GPIO_EXTI_Callback+0x13c>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	00d2      	lsls	r2, r2, #3
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	b299      	uxth	r1, r3
 80018ba:	4b31      	ldr	r3, [pc, #196]	@ (8001980 <HAL_GPIO_EXTI_Callback+0x148>)
 80018bc:	2200      	movs	r2, #0
 80018be:	9202      	str	r2, [sp, #8]
 80018c0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80018c4:	9201      	str	r2, [sp, #4]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	9200      	str	r2, [sp, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a2b      	ldr	r2, [pc, #172]	@ (800197c <HAL_GPIO_EXTI_Callback+0x144>)
 80018ce:	2000      	movs	r0, #0
 80018d0:	f7ff fed4 	bl	800167c <ST7735_WriteString>
		sprintf(msg_console, "Taster1 gedrückt! \r\n");
 80018d4:	492b      	ldr	r1, [pc, #172]	@ (8001984 <HAL_GPIO_EXTI_Callback+0x14c>)
 80018d6:	482c      	ldr	r0, [pc, #176]	@ (8001988 <HAL_GPIO_EXTI_Callback+0x150>)
 80018d8:	f009 fa56 	bl	800ad88 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console),
 80018dc:	482a      	ldr	r0, [pc, #168]	@ (8001988 <HAL_GPIO_EXTI_Callback+0x150>)
 80018de:	f7fe fcef 	bl	80002c0 <strlen>
 80018e2:	4603      	mov	r3, r0
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	4927      	ldr	r1, [pc, #156]	@ (8001988 <HAL_GPIO_EXTI_Callback+0x150>)
 80018ec:	4827      	ldr	r0, [pc, #156]	@ (800198c <HAL_GPIO_EXTI_Callback+0x154>)
 80018ee:	f007 fdc6 	bl	800947e <HAL_UART_Transmit>
		break;
 80018f2:	e038      	b.n	8001966 <HAL_GPIO_EXTI_Callback+0x12e>
		ST7735_FillRectangle(0, 6 * px_ofs2, 0, px_ofs2, BLACK);
 80018f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <HAL_GPIO_EXTI_Callback+0x13c>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	0052      	lsls	r2, r2, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	b299      	uxth	r1, r3
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	2300      	movs	r3, #0
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	4613      	mov	r3, r2
 800190e:	2200      	movs	r2, #0
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff ff07 	bl	8001724 <ST7735_FillRectangle>
		sprintf(msg_display, "Taster2 gedrueckt!");
 8001916:	491e      	ldr	r1, [pc, #120]	@ (8001990 <HAL_GPIO_EXTI_Callback+0x158>)
 8001918:	4818      	ldr	r0, [pc, #96]	@ (800197c <HAL_GPIO_EXTI_Callback+0x144>)
 800191a:	f009 fa35 	bl	800ad88 <siprintf>
		ST7735_WriteString(0, 7 * px_ofs2, msg_display, Font_7x10, GREEN,
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	00d2      	lsls	r2, r2, #3
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	b299      	uxth	r1, r3
 800192a:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <HAL_GPIO_EXTI_Callback+0x148>)
 800192c:	2200      	movs	r2, #0
 800192e:	9202      	str	r2, [sp, #8]
 8001930:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001934:	9201      	str	r2, [sp, #4]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	9200      	str	r2, [sp, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0f      	ldr	r2, [pc, #60]	@ (800197c <HAL_GPIO_EXTI_Callback+0x144>)
 800193e:	2000      	movs	r0, #0
 8001940:	f7ff fe9c 	bl	800167c <ST7735_WriteString>
		sprintf(msg_console, "Taster2 gedrückt! \r\n");
 8001944:	4913      	ldr	r1, [pc, #76]	@ (8001994 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001946:	4810      	ldr	r0, [pc, #64]	@ (8001988 <HAL_GPIO_EXTI_Callback+0x150>)
 8001948:	f009 fa1e 	bl	800ad88 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console),
 800194c:	480e      	ldr	r0, [pc, #56]	@ (8001988 <HAL_GPIO_EXTI_Callback+0x150>)
 800194e:	f7fe fcb7 	bl	80002c0 <strlen>
 8001952:	4603      	mov	r3, r0
 8001954:	b29a      	uxth	r2, r3
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	490b      	ldr	r1, [pc, #44]	@ (8001988 <HAL_GPIO_EXTI_Callback+0x150>)
 800195c:	480b      	ldr	r0, [pc, #44]	@ (800198c <HAL_GPIO_EXTI_Callback+0x154>)
 800195e:	f007 fd8e 	bl	800947e <HAL_UART_Transmit>
		break;
 8001962:	e000      	b.n	8001966 <HAL_GPIO_EXTI_Callback+0x12e>
		break;
 8001964:	bf00      	nop
	}
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200006bc 	.word	0x200006bc
 8001974:	20000008 	.word	0x20000008
 8001978:	0800d900 	.word	0x0800d900
 800197c:	200006a0 	.word	0x200006a0
 8001980:	20000000 	.word	0x20000000
 8001984:	0800d914 	.word	0x0800d914
 8001988:	20000650 	.word	0x20000650
 800198c:	200005ac 	.word	0x200005ac
 8001990:	0800d92c 	.word	0x0800d92c
 8001994:	0800d940 	.word	0x0800d940

08001998 <HAL_TIM_PeriodElapsedCallback>:

// Timer timeout Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800199c:	b08a      	sub	sp, #40	@ 0x28
 800199e:	af06      	add	r7, sp, #24
 80019a0:	6078      	str	r0, [r7, #4]
	// Überprüfe welcher Timer diese callback Funktion aufruft
	// time_val um 100ms inkrementieren
	if (htim == &htim16) {
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a89      	ldr	r2, [pc, #548]	@ (8001bcc <HAL_TIM_PeriodElapsedCallback+0x234>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d10c      	bne.n	80019c4 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 80019aa:	2108      	movs	r1, #8
 80019ac:	4888      	ldr	r0, [pc, #544]	@ (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80019ae:	f004 f8c9 	bl	8005b44 <HAL_GPIO_TogglePin>
		if (handler_state == SINUS_MOD) {
 80019b2:	4b88      	ldr	r3, [pc, #544]	@ (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	f040 8102 	bne.w	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x228>
			inc_handler_currentTime(100);
 80019bc:	2064      	movs	r0, #100	@ 0x64
 80019be:	f001 fb8b 	bl	80030d8 <inc_handler_currentTime>
//
//		TIM1->CCR1 = PWM_CH1;
//
//		PWM_index++;
//	}
}
 80019c2:	e0fd      	b.n	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x228>
	else if (htim == &htim17) {
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a84      	ldr	r2, [pc, #528]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	f040 80f9 	bne.w	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x228>
		switch (handler_state) {
 80019ce:	4b81      	ldr	r3, [pc, #516]	@ (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <HAL_TIM_PeriodElapsedCallback+0x44>
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d046      	beq.n	8001a68 <HAL_TIM_PeriodElapsedCallback+0xd0>
 80019da:	e0ed      	b.n	8001bb8 <HAL_TIM_PeriodElapsedCallback+0x220>
			ST7735_WriteString(0, px_ofs2, "Poti1: xx", Font_7x10, GREEN,
 80019dc:	4b7f      	ldr	r3, [pc, #508]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x244>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	4b7f      	ldr	r3, [pc, #508]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	9202      	str	r2, [sp, #8]
 80019e8:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80019ec:	9201      	str	r2, [sp, #4]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	9200      	str	r2, [sp, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a7b      	ldr	r2, [pc, #492]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80019f6:	2000      	movs	r0, #0
 80019f8:	f7ff fe40 	bl	800167c <ST7735_WriteString>
			ST7735_WriteString(0, 2 * px_ofs2, "Poti2: xx", Font_7x10, GREEN,
 80019fc:	4b77      	ldr	r3, [pc, #476]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x244>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	b299      	uxth	r1, r3
 8001a04:	4b76      	ldr	r3, [pc, #472]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	9202      	str	r2, [sp, #8]
 8001a0a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001a0e:	9201      	str	r2, [sp, #4]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	9200      	str	r2, [sp, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a74      	ldr	r2, [pc, #464]	@ (8001be8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f7ff fe2f 	bl	800167c <ST7735_WriteString>
			ST7735_WriteString(0, 3 * px_ofs2, "BNC1: xx", Font_7x10, GREEN,
 8001a1e:	4b6f      	ldr	r3, [pc, #444]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	0052      	lsls	r2, r2, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	b299      	uxth	r1, r3
 8001a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	9202      	str	r2, [sp, #8]
 8001a30:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001a34:	9201      	str	r2, [sp, #4]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	9200      	str	r2, [sp, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a6b      	ldr	r2, [pc, #428]	@ (8001bec <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff fe1c 	bl	800167c <ST7735_WriteString>
			ST7735_WriteString(0, 4 * px_ofs2, "BNC2: xx", Font_7x10, GREEN,
 8001a44:	4b65      	ldr	r3, [pc, #404]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	b299      	uxth	r1, r3
 8001a4c:	4b64      	ldr	r3, [pc, #400]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	9202      	str	r2, [sp, #8]
 8001a52:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001a56:	9201      	str	r2, [sp, #4]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	9200      	str	r2, [sp, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a64      	ldr	r2, [pc, #400]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7ff fe0b 	bl	800167c <ST7735_WriteString>
			break;
 8001a66:	e0ab      	b.n	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x228>
			adc_values *ptr = get_adc_values();
 8001a68:	f001 fb4a 	bl	8003100 <get_adc_values>
 8001a6c:	60f8      	str	r0, [r7, #12]
			sprintf(msg_display, "Poti1: %2.2fV", ptr->poti1_Vf);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd90 	bl	8000598 <__aeabi_f2d>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	495d      	ldr	r1, [pc, #372]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001a7e:	485e      	ldr	r0, [pc, #376]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001a80:	f009 f982 	bl	800ad88 <siprintf>
			ST7735_WriteString(0, px_ofs2, msg_display, Font_7x10, GREEN,
 8001a84:	4b55      	ldr	r3, [pc, #340]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4b55      	ldr	r3, [pc, #340]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	9202      	str	r2, [sp, #8]
 8001a90:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001a94:	9201      	str	r2, [sp, #4]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	9200      	str	r2, [sp, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a56      	ldr	r2, [pc, #344]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f7ff fdec 	bl	800167c <ST7735_WriteString>
			sprintf(msg_display, "Poti2: %2.2fV", ptr->poti2_Vf);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd75 	bl	8000598 <__aeabi_f2d>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4952      	ldr	r1, [pc, #328]	@ (8001bfc <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001ab4:	4850      	ldr	r0, [pc, #320]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001ab6:	f009 f967 	bl	800ad88 <siprintf>
			ST7735_WriteString(0, 2 * px_ofs2, msg_display, Font_7x10, GREEN,
 8001aba:	4b48      	ldr	r3, [pc, #288]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	b299      	uxth	r1, r3
 8001ac2:	4b47      	ldr	r3, [pc, #284]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	9202      	str	r2, [sp, #8]
 8001ac8:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001acc:	9201      	str	r2, [sp, #4]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	9200      	str	r2, [sp, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff fdd0 	bl	800167c <ST7735_WriteString>
			sprintf(msg_display, "BNC1:  %2.2fV", ptr->bnc1_Vf);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fd59 	bl	8000598 <__aeabi_f2d>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4945      	ldr	r1, [pc, #276]	@ (8001c00 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001aec:	4842      	ldr	r0, [pc, #264]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001aee:	f009 f94b 	bl	800ad88 <siprintf>
			ST7735_WriteString(0, 3 * px_ofs2, msg_display, Font_7x10, GREEN,
 8001af2:	4b3a      	ldr	r3, [pc, #232]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	0052      	lsls	r2, r2, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	b299      	uxth	r1, r3
 8001afe:	4b38      	ldr	r3, [pc, #224]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	9202      	str	r2, [sp, #8]
 8001b04:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001b08:	9201      	str	r2, [sp, #4]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	9200      	str	r2, [sp, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a39      	ldr	r2, [pc, #228]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001b12:	2000      	movs	r0, #0
 8001b14:	f7ff fdb2 	bl	800167c <ST7735_WriteString>
			sprintf(msg_display, "BNC2:  %2.2fV", ptr->bnc2_Vf);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fd3b 	bl	8000598 <__aeabi_f2d>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4937      	ldr	r1, [pc, #220]	@ (8001c04 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b28:	4833      	ldr	r0, [pc, #204]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001b2a:	f009 f92d 	bl	800ad88 <siprintf>
			ST7735_WriteString(0, 4 * px_ofs2, msg_display, Font_7x10, GREEN,
 8001b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	b299      	uxth	r1, r3
 8001b36:	4b2a      	ldr	r3, [pc, #168]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	9202      	str	r2, [sp, #8]
 8001b3c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001b40:	9201      	str	r2, [sp, #4]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	9200      	str	r2, [sp, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a2b      	ldr	r2, [pc, #172]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff fd96 	bl	800167c <ST7735_WriteString>
					ptr->poti1_Vf, ptr->poti2_Vf, ptr->bnc1_Vf, ptr->bnc2_Vf);//, f0, 100.0*A0);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
			sprintf(msg_console,
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fd1f 	bl	8000598 <__aeabi_f2d>
 8001b5a:	4682      	mov	sl, r0
 8001b5c:	468b      	mov	fp, r1
					ptr->poti1_Vf, ptr->poti2_Vf, ptr->bnc1_Vf, ptr->bnc2_Vf);//, f0, 100.0*A0);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	685b      	ldr	r3, [r3, #4]
			sprintf(msg_console,
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fd18 	bl	8000598 <__aeabi_f2d>
 8001b68:	4604      	mov	r4, r0
 8001b6a:	460d      	mov	r5, r1
					ptr->poti1_Vf, ptr->poti2_Vf, ptr->bnc1_Vf, ptr->bnc2_Vf);//, f0, 100.0*A0);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	689b      	ldr	r3, [r3, #8]
			sprintf(msg_console,
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fd11 	bl	8000598 <__aeabi_f2d>
 8001b76:	4680      	mov	r8, r0
 8001b78:	4689      	mov	r9, r1
					ptr->poti1_Vf, ptr->poti2_Vf, ptr->bnc1_Vf, ptr->bnc2_Vf);//, f0, 100.0*A0);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	68db      	ldr	r3, [r3, #12]
			sprintf(msg_console,
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fd0a 	bl	8000598 <__aeabi_f2d>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b8c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001b90:	e9cd 4500 	strd	r4, r5, [sp]
 8001b94:	4652      	mov	r2, sl
 8001b96:	465b      	mov	r3, fp
 8001b98:	491b      	ldr	r1, [pc, #108]	@ (8001c08 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b9a:	481c      	ldr	r0, [pc, #112]	@ (8001c0c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b9c:	f009 f8f4 	bl	800ad88 <siprintf>
					strlen(msg_console), HAL_MAX_DELAY);
 8001ba0:	481a      	ldr	r0, [pc, #104]	@ (8001c0c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001ba2:	f7fe fb8d 	bl	80002c0 <strlen>
 8001ba6:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) msg_console,
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	4917      	ldr	r1, [pc, #92]	@ (8001c0c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001bb0:	4817      	ldr	r0, [pc, #92]	@ (8001c10 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001bb2:	f007 fc64 	bl	800947e <HAL_UART_Transmit>
			break;
 8001bb6:	e003      	b.n	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x228>
			set_handler_state(IDLE);
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f001 fa6f 	bl	800309c <set_handler_state>
			break;
 8001bbe:	bf00      	nop
}
 8001bc0:	bf00      	nop
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000454 	.word	0x20000454
 8001bd0:	48000800 	.word	0x48000800
 8001bd4:	200006bc 	.word	0x200006bc
 8001bd8:	200004a0 	.word	0x200004a0
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	20000000 	.word	0x20000000
 8001be4:	0800d958 	.word	0x0800d958
 8001be8:	0800d964 	.word	0x0800d964
 8001bec:	0800d970 	.word	0x0800d970
 8001bf0:	0800d97c 	.word	0x0800d97c
 8001bf4:	0800d988 	.word	0x0800d988
 8001bf8:	200006a0 	.word	0x200006a0
 8001bfc:	0800d998 	.word	0x0800d998
 8001c00:	0800d9a8 	.word	0x0800d9a8
 8001c04:	0800d9b8 	.word	0x0800d9b8
 8001c08:	0800d9c8 	.word	0x0800d9c8
 8001c0c:	20000650 	.word	0x20000650
 8001c10:	200005ac 	.word	0x200005ac

08001c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c18:	f001 fbf5 	bl	8003406 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c1c:	f000 f81e 	bl	8001c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c20:	f000 fb4e 	bl	80022c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c24:	f000 fafe 	bl	8002224 <MX_DMA_Init>
  MX_SPI1_Init();
 8001c28:	f000 f962 	bl	8001ef0 <MX_SPI1_Init>
  MX_TIM16_Init();
 8001c2c:	f000 fa5e 	bl	80020ec <MX_TIM16_Init>
  MX_ADC1_Init();
 8001c30:	f000 f860 	bl	8001cf4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001c34:	f000 faaa 	bl	800218c <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8001c38:	f000 fa80 	bl	800213c <MX_TIM17_Init>
  MX_ADC2_Init();
 8001c3c:	f000 f8f2 	bl	8001e24 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001c40:	f000 f994 	bl	8001f6c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	// Display Init
	ST7735_Init(1);
 8001c44:	2001      	movs	r0, #1
 8001c46:	f7ff fbb7 	bl	80013b8 <ST7735_Init>
	fillScreen(BLACK);
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f7ff faa8 	bl	80011a0 <fillScreen>
//  		sprintf(msg_console, "Viptr->iarray[%d]: %3d\r\n", i ,Viptr->iarray[i]);
//  		HAL_UART_Transmit(&huart2, (uint8_t*) msg_console, strlen(msg_console), HAL_MAX_DELAY);
//  	}

	// Set first State
	set_handler_state(IDLE);
 8001c50:	2000      	movs	r0, #0
 8001c52:	f001 fa23 	bl	800309c <set_handler_state>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Run StateMachine
		handler_task();
 8001c56:	f001 fa15 	bl	8003084 <handler_task>
 8001c5a:	e7fc      	b.n	8001c56 <main+0x42>

08001c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b094      	sub	sp, #80	@ 0x50
 8001c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c62:	f107 0318 	add.w	r3, r7, #24
 8001c66:	2238      	movs	r2, #56	@ 0x38
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f009 f8ef 	bl	800ae4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c7e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001c82:	f003 ff91 	bl	8005ba8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c86:	2302      	movs	r3, #2
 8001c88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c90:	2340      	movs	r3, #64	@ 0x40
 8001c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c94:	2302      	movs	r3, #2
 8001c96:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001ca0:	234b      	movs	r3, #75	@ 0x4b
 8001ca2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cac:	2302      	movs	r3, #2
 8001cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb0:	f107 0318 	add.w	r3, r7, #24
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f004 f82b 	bl	8005d10 <HAL_RCC_OscConfig>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001cc0:	f000 fbb8 	bl	8002434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc4:	230f      	movs	r3, #15
 8001cc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	2104      	movs	r1, #4
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f004 fb29 	bl	8006334 <HAL_RCC_ClockConfig>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001ce8:	f000 fba4 	bl	8002434 <Error_Handler>
  }
}
 8001cec:	bf00      	nop
 8001cee:	3750      	adds	r7, #80	@ 0x50
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	@ 0x30
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	2220      	movs	r2, #32
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f009 f89e 	bl	800ae4e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d12:	4b40      	ldr	r3, [pc, #256]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001d14:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001d18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001d1c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d22:	4b3c      	ldr	r3, [pc, #240]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d28:	4b3a      	ldr	r3, [pc, #232]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001d2e:	4b39      	ldr	r3, [pc, #228]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d34:	4b37      	ldr	r3, [pc, #220]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d3a:	4b36      	ldr	r3, [pc, #216]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d40:	4b34      	ldr	r3, [pc, #208]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d46:	4b33      	ldr	r3, [pc, #204]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001d4c:	4b31      	ldr	r3, [pc, #196]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001d4e:	2203      	movs	r2, #3
 8001d50:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d52:	4b30      	ldr	r3, [pc, #192]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d60:	4b2c      	ldr	r3, [pc, #176]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d66:	4b2b      	ldr	r3, [pc, #172]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d6e:	4b29      	ldr	r3, [pc, #164]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001d74:	4b27      	ldr	r3, [pc, #156]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d7c:	4825      	ldr	r0, [pc, #148]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001d7e:	f001 fe41 	bl	8003a04 <HAL_ADC_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001d88:	f000 fb54 	bl	8002434 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001d90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d94:	4619      	mov	r1, r3
 8001d96:	481f      	ldr	r0, [pc, #124]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001d98:	f002 fff0 	bl	8004d7c <HAL_ADCEx_MultiModeConfigChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001da2:	f000 fb47 	bl	8002434 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001da6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e18 <MX_ADC1_Init+0x124>)
 8001da8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001daa:	2306      	movs	r3, #6
 8001dac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001dae:	2307      	movs	r3, #7
 8001db0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001db2:	237f      	movs	r3, #127	@ 0x7f
 8001db4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001db6:	2304      	movs	r3, #4
 8001db8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4814      	ldr	r0, [pc, #80]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001dc4:	f002 f92e 	bl	8004024 <HAL_ADC_ConfigChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001dce:	f000 fb31 	bl	8002434 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001dd2:	4b12      	ldr	r3, [pc, #72]	@ (8001e1c <MX_ADC1_Init+0x128>)
 8001dd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001dd6:	230c      	movs	r3, #12
 8001dd8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	480d      	ldr	r0, [pc, #52]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001de0:	f002 f920 	bl	8004024 <HAL_ADC_ConfigChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001dea:	f000 fb23 	bl	8002434 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001dee:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <MX_ADC1_Init+0x12c>)
 8001df0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001df2:	2312      	movs	r3, #18
 8001df4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4806      	ldr	r0, [pc, #24]	@ (8001e14 <MX_ADC1_Init+0x120>)
 8001dfc:	f002 f912 	bl	8004024 <HAL_ADC_ConfigChannel>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001e06:	f000 fb15 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	3730      	adds	r7, #48	@ 0x30
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	2000020c 	.word	0x2000020c
 8001e18:	04300002 	.word	0x04300002
 8001e1c:	08600004 	.word	0x08600004
 8001e20:	3ef08000 	.word	0x3ef08000

08001e24 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e2a:	463b      	mov	r3, r7
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f009 f80c 	bl	800ae4e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001e36:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee4 <MX_ADC2_Init+0xc0>)
 8001e38:	4a2b      	ldr	r2, [pc, #172]	@ (8001ee8 <MX_ADC2_Init+0xc4>)
 8001e3a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ee4 <MX_ADC2_Init+0xc0>)
 8001e3e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e42:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001e44:	4b27      	ldr	r3, [pc, #156]	@ (8001ee4 <MX_ADC2_Init+0xc0>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e4a:	4b26      	ldr	r3, [pc, #152]	@ (8001ee4 <MX_ADC2_Init+0xc0>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001e50:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <MX_ADC2_Init+0xc0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e56:	4b23      	ldr	r3, [pc, #140]	@ (8001ee4 <MX_ADC2_Init+0xc0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001e5c:	4b21      	ldr	r3, [pc, #132]	@ (8001ee4 <MX_ADC2_Init+0xc0>)
 8001e5e:	2208      	movs	r2, #8
 8001e60:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001e62:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <MX_ADC2_Init+0xc0>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001e68:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee4 <MX_ADC2_Init+0xc0>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <MX_ADC2_Init+0xc0>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <MX_ADC2_Init+0xc0>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ee4 <MX_ADC2_Init+0xc0>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e82:	4b18      	ldr	r3, [pc, #96]	@ (8001ee4 <MX_ADC2_Init+0xc0>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001e88:	4b16      	ldr	r3, [pc, #88]	@ (8001ee4 <MX_ADC2_Init+0xc0>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e90:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <MX_ADC2_Init+0xc0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001e96:	4b13      	ldr	r3, [pc, #76]	@ (8001ee4 <MX_ADC2_Init+0xc0>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e9e:	4811      	ldr	r0, [pc, #68]	@ (8001ee4 <MX_ADC2_Init+0xc0>)
 8001ea0:	f001 fdb0 	bl	8003a04 <HAL_ADC_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001eaa:	f000 fac3 	bl	8002434 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001eae:	4b0f      	ldr	r3, [pc, #60]	@ (8001eec <MX_ADC2_Init+0xc8>)
 8001eb0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001eb2:	2306      	movs	r3, #6
 8001eb4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001eba:	237f      	movs	r3, #127	@ 0x7f
 8001ebc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ec6:	463b      	mov	r3, r7
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4806      	ldr	r0, [pc, #24]	@ (8001ee4 <MX_ADC2_Init+0xc0>)
 8001ecc:	f002 f8aa 	bl	8004024 <HAL_ADC_ConfigChannel>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001ed6:	f000 faad 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001eda:	bf00      	nop
 8001edc:	3720      	adds	r7, #32
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000278 	.word	0x20000278
 8001ee8:	50000100 	.word	0x50000100
 8001eec:	47520000 	.word	0x47520000

08001ef0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f64 <MX_SPI1_Init+0x74>)
 8001ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f68 <MX_SPI1_Init+0x78>)
 8001ef8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001efa:	4b1a      	ldr	r3, [pc, #104]	@ (8001f64 <MX_SPI1_Init+0x74>)
 8001efc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f02:	4b18      	ldr	r3, [pc, #96]	@ (8001f64 <MX_SPI1_Init+0x74>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f08:	4b16      	ldr	r3, [pc, #88]	@ (8001f64 <MX_SPI1_Init+0x74>)
 8001f0a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001f0e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f10:	4b14      	ldr	r3, [pc, #80]	@ (8001f64 <MX_SPI1_Init+0x74>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f16:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <MX_SPI1_Init+0x74>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <MX_SPI1_Init+0x74>)
 8001f1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f22:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f24:	4b0f      	ldr	r3, [pc, #60]	@ (8001f64 <MX_SPI1_Init+0x74>)
 8001f26:	2210      	movs	r2, #16
 8001f28:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <MX_SPI1_Init+0x74>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <MX_SPI1_Init+0x74>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f36:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <MX_SPI1_Init+0x74>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <MX_SPI1_Init+0x74>)
 8001f3e:	2207      	movs	r2, #7
 8001f40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f42:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <MX_SPI1_Init+0x74>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f48:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <MX_SPI1_Init+0x74>)
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f4e:	4805      	ldr	r0, [pc, #20]	@ (8001f64 <MX_SPI1_Init+0x74>)
 8001f50:	f004 fe5a 	bl	8006c08 <HAL_SPI_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f5a:	f000 fa6b 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200003a4 	.word	0x200003a4
 8001f68:	40013000 	.word	0x40013000

08001f6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b09c      	sub	sp, #112	@ 0x70
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f72:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f80:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f8c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
 8001f9c:	615a      	str	r2, [r3, #20]
 8001f9e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	2234      	movs	r2, #52	@ 0x34
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f008 ff51 	bl	800ae4e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fac:	4b4d      	ldr	r3, [pc, #308]	@ (80020e4 <MX_TIM1_Init+0x178>)
 8001fae:	4a4e      	ldr	r2, [pc, #312]	@ (80020e8 <MX_TIM1_Init+0x17c>)
 8001fb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fb2:	4b4c      	ldr	r3, [pc, #304]	@ (80020e4 <MX_TIM1_Init+0x178>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb8:	4b4a      	ldr	r3, [pc, #296]	@ (80020e4 <MX_TIM1_Init+0x178>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7499;
 8001fbe:	4b49      	ldr	r3, [pc, #292]	@ (80020e4 <MX_TIM1_Init+0x178>)
 8001fc0:	f641 524b 	movw	r2, #7499	@ 0x1d4b
 8001fc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc6:	4b47      	ldr	r3, [pc, #284]	@ (80020e4 <MX_TIM1_Init+0x178>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fcc:	4b45      	ldr	r3, [pc, #276]	@ (80020e4 <MX_TIM1_Init+0x178>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fd2:	4b44      	ldr	r3, [pc, #272]	@ (80020e4 <MX_TIM1_Init+0x178>)
 8001fd4:	2280      	movs	r2, #128	@ 0x80
 8001fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fd8:	4842      	ldr	r0, [pc, #264]	@ (80020e4 <MX_TIM1_Init+0x178>)
 8001fda:	f005 f999 	bl	8007310 <HAL_TIM_Base_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001fe4:	f000 fa26 	bl	8002434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fee:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	483b      	ldr	r0, [pc, #236]	@ (80020e4 <MX_TIM1_Init+0x178>)
 8001ff6:	f006 f879 	bl	80080ec <HAL_TIM_ConfigClockSource>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002000:	f000 fa18 	bl	8002434 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002004:	4837      	ldr	r0, [pc, #220]	@ (80020e4 <MX_TIM1_Init+0x178>)
 8002006:	f005 fa82 	bl	800750e <HAL_TIM_PWM_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002010:	f000 fa10 	bl	8002434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002014:	2300      	movs	r3, #0
 8002016:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002018:	2300      	movs	r3, #0
 800201a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002020:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002024:	4619      	mov	r1, r3
 8002026:	482f      	ldr	r0, [pc, #188]	@ (80020e4 <MX_TIM1_Init+0x178>)
 8002028:	f007 f844 	bl	80090b4 <HAL_TIMEx_MasterConfigSynchronization>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002032:	f000 f9ff 	bl	8002434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002036:	2360      	movs	r3, #96	@ 0x60
 8002038:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800203e:	2300      	movs	r3, #0
 8002040:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002042:	2300      	movs	r3, #0
 8002044:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002052:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002056:	2200      	movs	r2, #0
 8002058:	4619      	mov	r1, r3
 800205a:	4822      	ldr	r0, [pc, #136]	@ (80020e4 <MX_TIM1_Init+0x178>)
 800205c:	f005 ff32 	bl	8007ec4 <HAL_TIM_PWM_ConfigChannel>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002066:	f000 f9e5 	bl	8002434 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800206a:	2302      	movs	r3, #2
 800206c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800206e:	2308      	movs	r3, #8
 8002070:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002072:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002076:	2204      	movs	r2, #4
 8002078:	4619      	mov	r1, r3
 800207a:	481a      	ldr	r0, [pc, #104]	@ (80020e4 <MX_TIM1_Init+0x178>)
 800207c:	f005 ff22 	bl	8007ec4 <HAL_TIM_PWM_ConfigChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8002086:	f000 f9d5 	bl	8002434 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 139;
 8002096:	238b      	movs	r3, #139	@ 0x8b
 8002098:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800209e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80020ba:	2300      	movs	r3, #0
 80020bc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	4619      	mov	r1, r3
 80020c6:	4807      	ldr	r0, [pc, #28]	@ (80020e4 <MX_TIM1_Init+0x178>)
 80020c8:	f007 f88a 	bl	80091e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 80020d2:	f000 f9af 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020d6:	4803      	ldr	r0, [pc, #12]	@ (80020e4 <MX_TIM1_Init+0x178>)
 80020d8:	f000 fbfc 	bl	80028d4 <HAL_TIM_MspPostInit>

}
 80020dc:	bf00      	nop
 80020de:	3770      	adds	r7, #112	@ 0x70
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000408 	.word	0x20000408
 80020e8:	40012c00 	.word	0x40012c00

080020ec <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80020f0:	4b10      	ldr	r3, [pc, #64]	@ (8002134 <MX_TIM16_Init+0x48>)
 80020f2:	4a11      	ldr	r2, [pc, #68]	@ (8002138 <MX_TIM16_Init+0x4c>)
 80020f4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 15000 - 1;
 80020f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002134 <MX_TIM16_Init+0x48>)
 80020f8:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80020fc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002134 <MX_TIM16_Init+0x48>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8002104:	4b0b      	ldr	r3, [pc, #44]	@ (8002134 <MX_TIM16_Init+0x48>)
 8002106:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800210a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800210c:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <MX_TIM16_Init+0x48>)
 800210e:	2200      	movs	r2, #0
 8002110:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002112:	4b08      	ldr	r3, [pc, #32]	@ (8002134 <MX_TIM16_Init+0x48>)
 8002114:	2200      	movs	r2, #0
 8002116:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002118:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <MX_TIM16_Init+0x48>)
 800211a:	2200      	movs	r2, #0
 800211c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800211e:	4805      	ldr	r0, [pc, #20]	@ (8002134 <MX_TIM16_Init+0x48>)
 8002120:	f005 f8f6 	bl	8007310 <HAL_TIM_Base_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800212a:	f000 f983 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000454 	.word	0x20000454
 8002138:	40014400 	.word	0x40014400

0800213c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002140:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <MX_TIM17_Init+0x48>)
 8002142:	4a11      	ldr	r2, [pc, #68]	@ (8002188 <MX_TIM17_Init+0x4c>)
 8002144:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 15000-1;
 8002146:	4b0f      	ldr	r3, [pc, #60]	@ (8002184 <MX_TIM17_Init+0x48>)
 8002148:	f643 2297 	movw	r2, #14999	@ 0x3a97
 800214c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214e:	4b0d      	ldr	r3, [pc, #52]	@ (8002184 <MX_TIM17_Init+0x48>)
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 5000;
 8002154:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <MX_TIM17_Init+0x48>)
 8002156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800215a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800215c:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <MX_TIM17_Init+0x48>)
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002162:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <MX_TIM17_Init+0x48>)
 8002164:	2200      	movs	r2, #0
 8002166:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002168:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <MX_TIM17_Init+0x48>)
 800216a:	2200      	movs	r2, #0
 800216c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800216e:	4805      	ldr	r0, [pc, #20]	@ (8002184 <MX_TIM17_Init+0x48>)
 8002170:	f005 f8ce 	bl	8007310 <HAL_TIM_Base_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 800217a:	f000 f95b 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200004a0 	.word	0x200004a0
 8002188:	40014800 	.word	0x40014800

0800218c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002190:	4b22      	ldr	r3, [pc, #136]	@ (800221c <MX_USART2_UART_Init+0x90>)
 8002192:	4a23      	ldr	r2, [pc, #140]	@ (8002220 <MX_USART2_UART_Init+0x94>)
 8002194:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002196:	4b21      	ldr	r3, [pc, #132]	@ (800221c <MX_USART2_UART_Init+0x90>)
 8002198:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800219c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800219e:	4b1f      	ldr	r3, [pc, #124]	@ (800221c <MX_USART2_UART_Init+0x90>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021a4:	4b1d      	ldr	r3, [pc, #116]	@ (800221c <MX_USART2_UART_Init+0x90>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021aa:	4b1c      	ldr	r3, [pc, #112]	@ (800221c <MX_USART2_UART_Init+0x90>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021b0:	4b1a      	ldr	r3, [pc, #104]	@ (800221c <MX_USART2_UART_Init+0x90>)
 80021b2:	220c      	movs	r2, #12
 80021b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b6:	4b19      	ldr	r3, [pc, #100]	@ (800221c <MX_USART2_UART_Init+0x90>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021bc:	4b17      	ldr	r3, [pc, #92]	@ (800221c <MX_USART2_UART_Init+0x90>)
 80021be:	2200      	movs	r2, #0
 80021c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021c2:	4b16      	ldr	r3, [pc, #88]	@ (800221c <MX_USART2_UART_Init+0x90>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021c8:	4b14      	ldr	r3, [pc, #80]	@ (800221c <MX_USART2_UART_Init+0x90>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021ce:	4b13      	ldr	r3, [pc, #76]	@ (800221c <MX_USART2_UART_Init+0x90>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021d4:	4811      	ldr	r0, [pc, #68]	@ (800221c <MX_USART2_UART_Init+0x90>)
 80021d6:	f007 f902 	bl	80093de <HAL_UART_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80021e0:	f000 f928 	bl	8002434 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021e4:	2100      	movs	r1, #0
 80021e6:	480d      	ldr	r0, [pc, #52]	@ (800221c <MX_USART2_UART_Init+0x90>)
 80021e8:	f007 ff2c 	bl	800a044 <HAL_UARTEx_SetTxFifoThreshold>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80021f2:	f000 f91f 	bl	8002434 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021f6:	2100      	movs	r1, #0
 80021f8:	4808      	ldr	r0, [pc, #32]	@ (800221c <MX_USART2_UART_Init+0x90>)
 80021fa:	f007 ff61 	bl	800a0c0 <HAL_UARTEx_SetRxFifoThreshold>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002204:	f000 f916 	bl	8002434 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002208:	4804      	ldr	r0, [pc, #16]	@ (800221c <MX_USART2_UART_Init+0x90>)
 800220a:	f007 fee2 	bl	8009fd2 <HAL_UARTEx_DisableFifoMode>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002214:	f000 f90e 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}
 800221c:	200005ac 	.word	0x200005ac
 8002220:	40004400 	.word	0x40004400

08002224 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800222a:	4b24      	ldr	r3, [pc, #144]	@ (80022bc <MX_DMA_Init+0x98>)
 800222c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800222e:	4a23      	ldr	r2, [pc, #140]	@ (80022bc <MX_DMA_Init+0x98>)
 8002230:	f043 0304 	orr.w	r3, r3, #4
 8002234:	6493      	str	r3, [r2, #72]	@ 0x48
 8002236:	4b21      	ldr	r3, [pc, #132]	@ (80022bc <MX_DMA_Init+0x98>)
 8002238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002242:	4b1e      	ldr	r3, [pc, #120]	@ (80022bc <MX_DMA_Init+0x98>)
 8002244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002246:	4a1d      	ldr	r2, [pc, #116]	@ (80022bc <MX_DMA_Init+0x98>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6493      	str	r3, [r2, #72]	@ 0x48
 800224e:	4b1b      	ldr	r3, [pc, #108]	@ (80022bc <MX_DMA_Init+0x98>)
 8002250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800225a:	4b18      	ldr	r3, [pc, #96]	@ (80022bc <MX_DMA_Init+0x98>)
 800225c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800225e:	4a17      	ldr	r2, [pc, #92]	@ (80022bc <MX_DMA_Init+0x98>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	6493      	str	r3, [r2, #72]	@ 0x48
 8002266:	4b15      	ldr	r3, [pc, #84]	@ (80022bc <MX_DMA_Init+0x98>)
 8002268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	2100      	movs	r1, #0
 8002276:	200b      	movs	r0, #11
 8002278:	f002 ff63 	bl	8005142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800227c:	200b      	movs	r0, #11
 800227e:	f002 ff7a 	bl	8005176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	200c      	movs	r0, #12
 8002288:	f002 ff5b 	bl	8005142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800228c:	200c      	movs	r0, #12
 800228e:	f002 ff72 	bl	8005176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2100      	movs	r1, #0
 8002296:	200d      	movs	r0, #13
 8002298:	f002 ff53 	bl	8005142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800229c:	200d      	movs	r0, #13
 800229e:	f002 ff6a 	bl	8005176 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2100      	movs	r1, #0
 80022a6:	2038      	movs	r0, #56	@ 0x38
 80022a8:	f002 ff4b 	bl	8005142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80022ac:	2038      	movs	r0, #56	@ 0x38
 80022ae:	f002 ff62 	bl	8005176 <HAL_NVIC_EnableIRQ>

}
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000

080022c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	@ 0x28
 80022c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]
 80022d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d6:	4b54      	ldr	r3, [pc, #336]	@ (8002428 <MX_GPIO_Init+0x168>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022da:	4a53      	ldr	r2, [pc, #332]	@ (8002428 <MX_GPIO_Init+0x168>)
 80022dc:	f043 0304 	orr.w	r3, r3, #4
 80022e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022e2:	4b51      	ldr	r3, [pc, #324]	@ (8002428 <MX_GPIO_Init+0x168>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002428 <MX_GPIO_Init+0x168>)
 80022f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f2:	4a4d      	ldr	r2, [pc, #308]	@ (8002428 <MX_GPIO_Init+0x168>)
 80022f4:	f043 0320 	orr.w	r3, r3, #32
 80022f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002428 <MX_GPIO_Init+0x168>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002306:	4b48      	ldr	r3, [pc, #288]	@ (8002428 <MX_GPIO_Init+0x168>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230a:	4a47      	ldr	r2, [pc, #284]	@ (8002428 <MX_GPIO_Init+0x168>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002312:	4b45      	ldr	r3, [pc, #276]	@ (8002428 <MX_GPIO_Init+0x168>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231e:	4b42      	ldr	r3, [pc, #264]	@ (8002428 <MX_GPIO_Init+0x168>)
 8002320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002322:	4a41      	ldr	r2, [pc, #260]	@ (8002428 <MX_GPIO_Init+0x168>)
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800232a:	4b3f      	ldr	r3, [pc, #252]	@ (8002428 <MX_GPIO_Init+0x168>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Stg2_NMOS1_Pin|GPIO_PIN_3|GPIO_PIN_4|Stg2_NMOS4_Pin
 8002336:	2200      	movs	r2, #0
 8002338:	f640 41fc 	movw	r1, #3324	@ 0xcfc
 800233c:	483b      	ldr	r0, [pc, #236]	@ (800242c <MX_GPIO_Init+0x16c>)
 800233e:	f003 fbe9 	bl	8005b14 <HAL_GPIO_WritePin>
                          |Stg3_NMOS1_Pin|Stg3_NMOS3_Pin|Stg3_NMOS2_Pin|Stg3_NMOS4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPI1_RST_Pin|Stg2_NMOS3_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	f648 0160 	movw	r1, #34912	@ 0x8860
 8002348:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800234c:	f003 fbe2 	bl	8005b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_DC_Pin|Stg2_NMOS2_Pin, GPIO_PIN_RESET);
 8002350:	2200      	movs	r2, #0
 8002352:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002356:	4836      	ldr	r0, [pc, #216]	@ (8002430 <MX_GPIO_Init+0x170>)
 8002358:	f003 fbdc 	bl	8005b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_EXTI13_Pin */
  GPIO_InitStruct.Pin = B1_EXTI13_Pin;
 800235c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002362:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4619      	mov	r1, r3
 8002372:	482e      	ldr	r0, [pc, #184]	@ (800242c <MX_GPIO_Init+0x16c>)
 8002374:	f003 fa4c 	bl	8005810 <HAL_GPIO_Init>

  /*Configure GPIO pins : Stg2_NMOS1_Pin PC3 PC4 Stg2_NMOS4_Pin
                           Stg3_NMOS1_Pin Stg3_NMOS3_Pin Stg3_NMOS2_Pin Stg3_NMOS4_Pin */
  GPIO_InitStruct.Pin = Stg2_NMOS1_Pin|GPIO_PIN_3|GPIO_PIN_4|Stg2_NMOS4_Pin
 8002378:	f640 43fc 	movw	r3, #3324	@ 0xcfc
 800237c:	617b      	str	r3, [r7, #20]
                          |Stg3_NMOS1_Pin|Stg3_NMOS3_Pin|Stg3_NMOS2_Pin|Stg3_NMOS4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237e:	2301      	movs	r3, #1
 8002380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800238a:	f107 0314 	add.w	r3, r7, #20
 800238e:	4619      	mov	r1, r3
 8002390:	4826      	ldr	r0, [pc, #152]	@ (800242c <MX_GPIO_Init+0x16c>)
 8002392:	f003 fa3d 	bl	8005810 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SPI1_RST_Pin Stg2_NMOS3_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI1_RST_Pin|Stg2_NMOS3_Pin|SPI1_CS_Pin;
 8002396:	f648 0360 	movw	r3, #34912	@ 0x8860
 800239a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239c:	2301      	movs	r3, #1
 800239e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a4:	2300      	movs	r3, #0
 80023a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	4619      	mov	r1, r3
 80023ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023b2:	f003 fa2d 	bl	8005810 <HAL_GPIO_Init>

  /*Configure GPIO pins : Tast1_EXTI1_Pin Tast2_EXTI2_Pin */
  GPIO_InitStruct.Pin = Tast1_EXTI1_Pin|Tast2_EXTI2_Pin;
 80023b6:	2306      	movs	r3, #6
 80023b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80023be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023c0:	2302      	movs	r3, #2
 80023c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	4619      	mov	r1, r3
 80023ca:	4819      	ldr	r0, [pc, #100]	@ (8002430 <MX_GPIO_Init+0x170>)
 80023cc:	f003 fa20 	bl	8005810 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_DC_Pin Stg2_NMOS2_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin|Stg2_NMOS2_Pin;
 80023d0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d6:	2301      	movs	r3, #1
 80023d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023de:	2300      	movs	r3, #0
 80023e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	4619      	mov	r1, r3
 80023e8:	4811      	ldr	r0, [pc, #68]	@ (8002430 <MX_GPIO_Init+0x170>)
 80023ea:	f003 fa11 	bl	8005810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	2007      	movs	r0, #7
 80023f4:	f002 fea5 	bl	8005142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80023f8:	2007      	movs	r0, #7
 80023fa:	f002 febc 	bl	8005176 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2100      	movs	r1, #0
 8002402:	2008      	movs	r0, #8
 8002404:	f002 fe9d 	bl	8005142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002408:	2008      	movs	r0, #8
 800240a:	f002 feb4 	bl	8005176 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	2100      	movs	r1, #0
 8002412:	2028      	movs	r0, #40	@ 0x28
 8002414:	f002 fe95 	bl	8005142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002418:	2028      	movs	r0, #40	@ 0x28
 800241a:	f002 feac 	bl	8005176 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800241e:	bf00      	nop
 8002420:	3728      	adds	r7, #40	@ 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	48000800 	.word	0x48000800
 8002430:	48000400 	.word	0x48000400

08002434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002438:	b672      	cpsid	i
}
 800243a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800243c:	bf00      	nop
 800243e:	e7fd      	b.n	800243c <Error_Handler+0x8>

08002440 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002446:	4b0f      	ldr	r3, [pc, #60]	@ (8002484 <HAL_MspInit+0x44>)
 8002448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800244a:	4a0e      	ldr	r2, [pc, #56]	@ (8002484 <HAL_MspInit+0x44>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6613      	str	r3, [r2, #96]	@ 0x60
 8002452:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <HAL_MspInit+0x44>)
 8002454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	607b      	str	r3, [r7, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <HAL_MspInit+0x44>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002462:	4a08      	ldr	r2, [pc, #32]	@ (8002484 <HAL_MspInit+0x44>)
 8002464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002468:	6593      	str	r3, [r2, #88]	@ 0x58
 800246a:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <HAL_MspInit+0x44>)
 800246c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002476:	f003 fc3b 	bl	8005cf0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000

08002488 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b0a2      	sub	sp, #136	@ 0x88
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024a0:	f107 0320 	add.w	r3, r7, #32
 80024a4:	2254      	movs	r2, #84	@ 0x54
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f008 fcd0 	bl	800ae4e <memset>
  if(hadc->Instance==ADC1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024b6:	f040 8082 	bne.w	80025be <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80024ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024be:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80024c0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80024c4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024c6:	f107 0320 	add.w	r3, r7, #32
 80024ca:	4618      	mov	r0, r3
 80024cc:	f004 f94e 	bl	800676c <HAL_RCCEx_PeriphCLKConfig>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80024d6:	f7ff ffad 	bl	8002434 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80024da:	4b72      	ldr	r3, [pc, #456]	@ (80026a4 <HAL_ADC_MspInit+0x21c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	3301      	adds	r3, #1
 80024e0:	4a70      	ldr	r2, [pc, #448]	@ (80026a4 <HAL_ADC_MspInit+0x21c>)
 80024e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80024e4:	4b6f      	ldr	r3, [pc, #444]	@ (80026a4 <HAL_ADC_MspInit+0x21c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d10b      	bne.n	8002504 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80024ec:	4b6e      	ldr	r3, [pc, #440]	@ (80026a8 <HAL_ADC_MspInit+0x220>)
 80024ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f0:	4a6d      	ldr	r2, [pc, #436]	@ (80026a8 <HAL_ADC_MspInit+0x220>)
 80024f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024f8:	4b6b      	ldr	r3, [pc, #428]	@ (80026a8 <HAL_ADC_MspInit+0x220>)
 80024fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002504:	4b68      	ldr	r3, [pc, #416]	@ (80026a8 <HAL_ADC_MspInit+0x220>)
 8002506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002508:	4a67      	ldr	r2, [pc, #412]	@ (80026a8 <HAL_ADC_MspInit+0x220>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002510:	4b65      	ldr	r3, [pc, #404]	@ (80026a8 <HAL_ADC_MspInit+0x220>)
 8002512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251c:	4b62      	ldr	r3, [pc, #392]	@ (80026a8 <HAL_ADC_MspInit+0x220>)
 800251e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002520:	4a61      	ldr	r2, [pc, #388]	@ (80026a8 <HAL_ADC_MspInit+0x220>)
 8002522:	f043 0302 	orr.w	r3, r3, #2
 8002526:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002528:	4b5f      	ldr	r3, [pc, #380]	@ (80026a8 <HAL_ADC_MspInit+0x220>)
 800252a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ADC1_IN1_Poti1_Pin|ADC1_IN2_Poti2_Pin;
 8002534:	2303      	movs	r3, #3
 8002536:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002538:	2303      	movs	r3, #3
 800253a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002540:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002544:	4619      	mov	r1, r3
 8002546:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800254a:	f003 f961 	bl	8005810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800254e:	2301      	movs	r3, #1
 8002550:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002552:	2303      	movs	r3, #3
 8002554:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800255e:	4619      	mov	r1, r3
 8002560:	4852      	ldr	r0, [pc, #328]	@ (80026ac <HAL_ADC_MspInit+0x224>)
 8002562:	f003 f955 	bl	8005810 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8002566:	4b52      	ldr	r3, [pc, #328]	@ (80026b0 <HAL_ADC_MspInit+0x228>)
 8002568:	4a52      	ldr	r2, [pc, #328]	@ (80026b4 <HAL_ADC_MspInit+0x22c>)
 800256a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800256c:	4b50      	ldr	r3, [pc, #320]	@ (80026b0 <HAL_ADC_MspInit+0x228>)
 800256e:	2205      	movs	r2, #5
 8002570:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002572:	4b4f      	ldr	r3, [pc, #316]	@ (80026b0 <HAL_ADC_MspInit+0x228>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002578:	4b4d      	ldr	r3, [pc, #308]	@ (80026b0 <HAL_ADC_MspInit+0x228>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800257e:	4b4c      	ldr	r3, [pc, #304]	@ (80026b0 <HAL_ADC_MspInit+0x228>)
 8002580:	2280      	movs	r2, #128	@ 0x80
 8002582:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002584:	4b4a      	ldr	r3, [pc, #296]	@ (80026b0 <HAL_ADC_MspInit+0x228>)
 8002586:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800258a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800258c:	4b48      	ldr	r3, [pc, #288]	@ (80026b0 <HAL_ADC_MspInit+0x228>)
 800258e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002592:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002594:	4b46      	ldr	r3, [pc, #280]	@ (80026b0 <HAL_ADC_MspInit+0x228>)
 8002596:	2220      	movs	r2, #32
 8002598:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800259a:	4b45      	ldr	r3, [pc, #276]	@ (80026b0 <HAL_ADC_MspInit+0x228>)
 800259c:	2200      	movs	r2, #0
 800259e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025a0:	4843      	ldr	r0, [pc, #268]	@ (80026b0 <HAL_ADC_MspInit+0x228>)
 80025a2:	f002 fe03 	bl	80051ac <HAL_DMA_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 80025ac:	f7ff ff42 	bl	8002434 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a3f      	ldr	r2, [pc, #252]	@ (80026b0 <HAL_ADC_MspInit+0x228>)
 80025b4:	655a      	str	r2, [r3, #84]	@ 0x54
 80025b6:	4a3e      	ldr	r2, [pc, #248]	@ (80026b0 <HAL_ADC_MspInit+0x228>)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80025bc:	e06d      	b.n	800269a <HAL_ADC_MspInit+0x212>
  else if(hadc->Instance==ADC2)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a3d      	ldr	r2, [pc, #244]	@ (80026b8 <HAL_ADC_MspInit+0x230>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d168      	bne.n	800269a <HAL_ADC_MspInit+0x212>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80025c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025cc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80025ce:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80025d2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025d4:	f107 0320 	add.w	r3, r7, #32
 80025d8:	4618      	mov	r0, r3
 80025da:	f004 f8c7 	bl	800676c <HAL_RCCEx_PeriphCLKConfig>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_ADC_MspInit+0x160>
      Error_Handler();
 80025e4:	f7ff ff26 	bl	8002434 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80025e8:	4b2e      	ldr	r3, [pc, #184]	@ (80026a4 <HAL_ADC_MspInit+0x21c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3301      	adds	r3, #1
 80025ee:	4a2d      	ldr	r2, [pc, #180]	@ (80026a4 <HAL_ADC_MspInit+0x21c>)
 80025f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80025f2:	4b2c      	ldr	r3, [pc, #176]	@ (80026a4 <HAL_ADC_MspInit+0x21c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d10b      	bne.n	8002612 <HAL_ADC_MspInit+0x18a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80025fa:	4b2b      	ldr	r3, [pc, #172]	@ (80026a8 <HAL_ADC_MspInit+0x220>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fe:	4a2a      	ldr	r2, [pc, #168]	@ (80026a8 <HAL_ADC_MspInit+0x220>)
 8002600:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002606:	4b28      	ldr	r3, [pc, #160]	@ (80026a8 <HAL_ADC_MspInit+0x220>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	4b25      	ldr	r3, [pc, #148]	@ (80026a8 <HAL_ADC_MspInit+0x220>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002616:	4a24      	ldr	r2, [pc, #144]	@ (80026a8 <HAL_ADC_MspInit+0x220>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800261e:	4b22      	ldr	r3, [pc, #136]	@ (80026a8 <HAL_ADC_MspInit+0x220>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800262a:	2310      	movs	r3, #16
 800262c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800262e:	2303      	movs	r3, #3
 8002630:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002636:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800263a:	4619      	mov	r1, r3
 800263c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002640:	f003 f8e6 	bl	8005810 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8002644:	4b1d      	ldr	r3, [pc, #116]	@ (80026bc <HAL_ADC_MspInit+0x234>)
 8002646:	4a1e      	ldr	r2, [pc, #120]	@ (80026c0 <HAL_ADC_MspInit+0x238>)
 8002648:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800264a:	4b1c      	ldr	r3, [pc, #112]	@ (80026bc <HAL_ADC_MspInit+0x234>)
 800264c:	2224      	movs	r2, #36	@ 0x24
 800264e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002650:	4b1a      	ldr	r3, [pc, #104]	@ (80026bc <HAL_ADC_MspInit+0x234>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002656:	4b19      	ldr	r3, [pc, #100]	@ (80026bc <HAL_ADC_MspInit+0x234>)
 8002658:	2200      	movs	r2, #0
 800265a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800265c:	4b17      	ldr	r3, [pc, #92]	@ (80026bc <HAL_ADC_MspInit+0x234>)
 800265e:	2280      	movs	r2, #128	@ 0x80
 8002660:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002662:	4b16      	ldr	r3, [pc, #88]	@ (80026bc <HAL_ADC_MspInit+0x234>)
 8002664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002668:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800266a:	4b14      	ldr	r3, [pc, #80]	@ (80026bc <HAL_ADC_MspInit+0x234>)
 800266c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002670:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002672:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <HAL_ADC_MspInit+0x234>)
 8002674:	2220      	movs	r2, #32
 8002676:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002678:	4b10      	ldr	r3, [pc, #64]	@ (80026bc <HAL_ADC_MspInit+0x234>)
 800267a:	2200      	movs	r2, #0
 800267c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800267e:	480f      	ldr	r0, [pc, #60]	@ (80026bc <HAL_ADC_MspInit+0x234>)
 8002680:	f002 fd94 	bl	80051ac <HAL_DMA_Init>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_ADC_MspInit+0x206>
      Error_Handler();
 800268a:	f7ff fed3 	bl	8002434 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a0a      	ldr	r2, [pc, #40]	@ (80026bc <HAL_ADC_MspInit+0x234>)
 8002692:	655a      	str	r2, [r3, #84]	@ 0x54
 8002694:	4a09      	ldr	r2, [pc, #36]	@ (80026bc <HAL_ADC_MspInit+0x234>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800269a:	bf00      	nop
 800269c:	3788      	adds	r7, #136	@ 0x88
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	200006b4 	.word	0x200006b4
 80026a8:	40021000 	.word	0x40021000
 80026ac:	48000400 	.word	0x48000400
 80026b0:	200002e4 	.word	0x200002e4
 80026b4:	40020030 	.word	0x40020030
 80026b8:	50000100 	.word	0x50000100
 80026bc:	20000344 	.word	0x20000344
 80026c0:	40020408 	.word	0x40020408

080026c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	@ 0x28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a17      	ldr	r2, [pc, #92]	@ (8002740 <HAL_SPI_MspInit+0x7c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d127      	bne.n	8002736 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026e6:	4b17      	ldr	r3, [pc, #92]	@ (8002744 <HAL_SPI_MspInit+0x80>)
 80026e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ea:	4a16      	ldr	r2, [pc, #88]	@ (8002744 <HAL_SPI_MspInit+0x80>)
 80026ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80026f2:	4b14      	ldr	r3, [pc, #80]	@ (8002744 <HAL_SPI_MspInit+0x80>)
 80026f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fe:	4b11      	ldr	r3, [pc, #68]	@ (8002744 <HAL_SPI_MspInit+0x80>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002702:	4a10      	ldr	r2, [pc, #64]	@ (8002744 <HAL_SPI_MspInit+0x80>)
 8002704:	f043 0302 	orr.w	r3, r3, #2
 8002708:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800270a:	4b0e      	ldr	r3, [pc, #56]	@ (8002744 <HAL_SPI_MspInit+0x80>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002716:	2328      	movs	r3, #40	@ 0x28
 8002718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271a:	2302      	movs	r3, #2
 800271c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002726:	2305      	movs	r3, #5
 8002728:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272a:	f107 0314 	add.w	r3, r7, #20
 800272e:	4619      	mov	r1, r3
 8002730:	4805      	ldr	r0, [pc, #20]	@ (8002748 <HAL_SPI_MspInit+0x84>)
 8002732:	f003 f86d 	bl	8005810 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002736:	bf00      	nop
 8002738:	3728      	adds	r7, #40	@ 0x28
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40013000 	.word	0x40013000
 8002744:	40021000 	.word	0x40021000
 8002748:	48000400 	.word	0x48000400

0800274c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a56      	ldr	r2, [pc, #344]	@ (80028b4 <HAL_TIM_Base_MspInit+0x168>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d172      	bne.n	8002844 <HAL_TIM_Base_MspInit+0xf8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800275e:	4b56      	ldr	r3, [pc, #344]	@ (80028b8 <HAL_TIM_Base_MspInit+0x16c>)
 8002760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002762:	4a55      	ldr	r2, [pc, #340]	@ (80028b8 <HAL_TIM_Base_MspInit+0x16c>)
 8002764:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002768:	6613      	str	r3, [r2, #96]	@ 0x60
 800276a:	4b53      	ldr	r3, [pc, #332]	@ (80028b8 <HAL_TIM_Base_MspInit+0x16c>)
 800276c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800276e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 8002776:	4b51      	ldr	r3, [pc, #324]	@ (80028bc <HAL_TIM_Base_MspInit+0x170>)
 8002778:	4a51      	ldr	r2, [pc, #324]	@ (80028c0 <HAL_TIM_Base_MspInit+0x174>)
 800277a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 800277c:	4b4f      	ldr	r3, [pc, #316]	@ (80028bc <HAL_TIM_Base_MspInit+0x170>)
 800277e:	222a      	movs	r2, #42	@ 0x2a
 8002780:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002782:	4b4e      	ldr	r3, [pc, #312]	@ (80028bc <HAL_TIM_Base_MspInit+0x170>)
 8002784:	2210      	movs	r2, #16
 8002786:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002788:	4b4c      	ldr	r3, [pc, #304]	@ (80028bc <HAL_TIM_Base_MspInit+0x170>)
 800278a:	2200      	movs	r2, #0
 800278c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800278e:	4b4b      	ldr	r3, [pc, #300]	@ (80028bc <HAL_TIM_Base_MspInit+0x170>)
 8002790:	2280      	movs	r2, #128	@ 0x80
 8002792:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002794:	4b49      	ldr	r3, [pc, #292]	@ (80028bc <HAL_TIM_Base_MspInit+0x170>)
 8002796:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800279a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800279c:	4b47      	ldr	r3, [pc, #284]	@ (80028bc <HAL_TIM_Base_MspInit+0x170>)
 800279e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027a2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80027a4:	4b45      	ldr	r3, [pc, #276]	@ (80028bc <HAL_TIM_Base_MspInit+0x170>)
 80027a6:	2220      	movs	r2, #32
 80027a8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80027aa:	4b44      	ldr	r3, [pc, #272]	@ (80028bc <HAL_TIM_Base_MspInit+0x170>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80027b0:	4842      	ldr	r0, [pc, #264]	@ (80028bc <HAL_TIM_Base_MspInit+0x170>)
 80027b2:	f002 fcfb 	bl	80051ac <HAL_DMA_Init>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80027bc:	f7ff fe3a 	bl	8002434 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a3e      	ldr	r2, [pc, #248]	@ (80028bc <HAL_TIM_Base_MspInit+0x170>)
 80027c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80027c6:	4a3d      	ldr	r2, [pc, #244]	@ (80028bc <HAL_TIM_Base_MspInit+0x170>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel2;
 80027cc:	4b3d      	ldr	r3, [pc, #244]	@ (80028c4 <HAL_TIM_Base_MspInit+0x178>)
 80027ce:	4a3e      	ldr	r2, [pc, #248]	@ (80028c8 <HAL_TIM_Base_MspInit+0x17c>)
 80027d0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 80027d2:	4b3c      	ldr	r3, [pc, #240]	@ (80028c4 <HAL_TIM_Base_MspInit+0x178>)
 80027d4:	222b      	movs	r2, #43	@ 0x2b
 80027d6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027d8:	4b3a      	ldr	r3, [pc, #232]	@ (80028c4 <HAL_TIM_Base_MspInit+0x178>)
 80027da:	2210      	movs	r2, #16
 80027dc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80027de:	4b39      	ldr	r3, [pc, #228]	@ (80028c4 <HAL_TIM_Base_MspInit+0x178>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80027e4:	4b37      	ldr	r3, [pc, #220]	@ (80028c4 <HAL_TIM_Base_MspInit+0x178>)
 80027e6:	2280      	movs	r2, #128	@ 0x80
 80027e8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027ea:	4b36      	ldr	r3, [pc, #216]	@ (80028c4 <HAL_TIM_Base_MspInit+0x178>)
 80027ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027f0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027f2:	4b34      	ldr	r3, [pc, #208]	@ (80028c4 <HAL_TIM_Base_MspInit+0x178>)
 80027f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027f8:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 80027fa:	4b32      	ldr	r3, [pc, #200]	@ (80028c4 <HAL_TIM_Base_MspInit+0x178>)
 80027fc:	2220      	movs	r2, #32
 80027fe:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002800:	4b30      	ldr	r3, [pc, #192]	@ (80028c4 <HAL_TIM_Base_MspInit+0x178>)
 8002802:	2200      	movs	r2, #0
 8002804:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8002806:	482f      	ldr	r0, [pc, #188]	@ (80028c4 <HAL_TIM_Base_MspInit+0x178>)
 8002808:	f002 fcd0 	bl	80051ac <HAL_DMA_Init>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_TIM_Base_MspInit+0xca>
    {
      Error_Handler();
 8002812:	f7ff fe0f 	bl	8002434 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a2a      	ldr	r2, [pc, #168]	@ (80028c4 <HAL_TIM_Base_MspInit+0x178>)
 800281a:	629a      	str	r2, [r3, #40]	@ 0x28
 800281c:	4a29      	ldr	r2, [pc, #164]	@ (80028c4 <HAL_TIM_Base_MspInit+0x178>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	2100      	movs	r1, #0
 8002826:	2019      	movs	r0, #25
 8002828:	f002 fc8b 	bl	8005142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800282c:	2019      	movs	r0, #25
 800282e:	f002 fca2 	bl	8005176 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002832:	2200      	movs	r2, #0
 8002834:	2100      	movs	r1, #0
 8002836:	201a      	movs	r0, #26
 8002838:	f002 fc83 	bl	8005142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800283c:	201a      	movs	r0, #26
 800283e:	f002 fc9a 	bl	8005176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002842:	e032      	b.n	80028aa <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM16)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a20      	ldr	r2, [pc, #128]	@ (80028cc <HAL_TIM_Base_MspInit+0x180>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d114      	bne.n	8002878 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800284e:	4b1a      	ldr	r3, [pc, #104]	@ (80028b8 <HAL_TIM_Base_MspInit+0x16c>)
 8002850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002852:	4a19      	ldr	r2, [pc, #100]	@ (80028b8 <HAL_TIM_Base_MspInit+0x16c>)
 8002854:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002858:	6613      	str	r3, [r2, #96]	@ 0x60
 800285a:	4b17      	ldr	r3, [pc, #92]	@ (80028b8 <HAL_TIM_Base_MspInit+0x16c>)
 800285c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800285e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2100      	movs	r1, #0
 800286a:	2019      	movs	r0, #25
 800286c:	f002 fc69 	bl	8005142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002870:	2019      	movs	r0, #25
 8002872:	f002 fc80 	bl	8005176 <HAL_NVIC_EnableIRQ>
}
 8002876:	e018      	b.n	80028aa <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM17)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a14      	ldr	r2, [pc, #80]	@ (80028d0 <HAL_TIM_Base_MspInit+0x184>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d113      	bne.n	80028aa <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002882:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <HAL_TIM_Base_MspInit+0x16c>)
 8002884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002886:	4a0c      	ldr	r2, [pc, #48]	@ (80028b8 <HAL_TIM_Base_MspInit+0x16c>)
 8002888:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800288c:	6613      	str	r3, [r2, #96]	@ 0x60
 800288e:	4b0a      	ldr	r3, [pc, #40]	@ (80028b8 <HAL_TIM_Base_MspInit+0x16c>)
 8002890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002892:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2100      	movs	r1, #0
 800289e:	201a      	movs	r0, #26
 80028a0:	f002 fc4f 	bl	8005142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80028a4:	201a      	movs	r0, #26
 80028a6:	f002 fc66 	bl	8005176 <HAL_NVIC_EnableIRQ>
}
 80028aa:	bf00      	nop
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40021000 	.word	0x40021000
 80028bc:	200004ec 	.word	0x200004ec
 80028c0:	40020008 	.word	0x40020008
 80028c4:	2000054c 	.word	0x2000054c
 80028c8:	4002001c 	.word	0x4002001c
 80028cc:	40014400 	.word	0x40014400
 80028d0:	40014800 	.word	0x40014800

080028d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	@ 0x28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 0314 	add.w	r3, r7, #20
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a20      	ldr	r2, [pc, #128]	@ (8002974 <HAL_TIM_MspPostInit+0xa0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d13a      	bne.n	800296c <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f6:	4b20      	ldr	r3, [pc, #128]	@ (8002978 <HAL_TIM_MspPostInit+0xa4>)
 80028f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002978 <HAL_TIM_MspPostInit+0xa4>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002902:	4b1d      	ldr	r3, [pc, #116]	@ (8002978 <HAL_TIM_MspPostInit+0xa4>)
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800290e:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <HAL_TIM_MspPostInit+0xa4>)
 8002910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002912:	4a19      	ldr	r2, [pc, #100]	@ (8002978 <HAL_TIM_MspPostInit+0xa4>)
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800291a:	4b17      	ldr	r3, [pc, #92]	@ (8002978 <HAL_TIM_MspPostInit+0xa4>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|TIM1_CH2_NMOS3_HS_Pin;
 8002926:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800292a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292c:	2302      	movs	r3, #2
 800292e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002934:	2300      	movs	r3, #0
 8002936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002938:	2306      	movs	r3, #6
 800293a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	4619      	mov	r1, r3
 8002942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002946:	f002 ff63 	bl	8005810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM1_CH2N_NMOS4_LS_Pin;
 800294a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800294e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002958:	2300      	movs	r3, #0
 800295a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800295c:	2306      	movs	r3, #6
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM1_CH2N_NMOS4_LS_GPIO_Port, &GPIO_InitStruct);
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	4619      	mov	r1, r3
 8002966:	4805      	ldr	r0, [pc, #20]	@ (800297c <HAL_TIM_MspPostInit+0xa8>)
 8002968:	f002 ff52 	bl	8005810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800296c:	bf00      	nop
 800296e:	3728      	adds	r7, #40	@ 0x28
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40012c00 	.word	0x40012c00
 8002978:	40021000 	.word	0x40021000
 800297c:	48000400 	.word	0x48000400

08002980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b09e      	sub	sp, #120	@ 0x78
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002998:	f107 0310 	add.w	r3, r7, #16
 800299c:	2254      	movs	r2, #84	@ 0x54
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f008 fa54 	bl	800ae4e <memset>
  if(huart->Instance==USART2)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002a28 <HAL_UART_MspInit+0xa8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d136      	bne.n	8002a1e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80029b0:	2302      	movs	r3, #2
 80029b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029b8:	f107 0310 	add.w	r3, r7, #16
 80029bc:	4618      	mov	r0, r3
 80029be:	f003 fed5 	bl	800676c <HAL_RCCEx_PeriphCLKConfig>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029c8:	f7ff fd34 	bl	8002434 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029cc:	4b17      	ldr	r3, [pc, #92]	@ (8002a2c <HAL_UART_MspInit+0xac>)
 80029ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d0:	4a16      	ldr	r2, [pc, #88]	@ (8002a2c <HAL_UART_MspInit+0xac>)
 80029d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80029d8:	4b14      	ldr	r3, [pc, #80]	@ (8002a2c <HAL_UART_MspInit+0xac>)
 80029da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e4:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <HAL_UART_MspInit+0xac>)
 80029e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e8:	4a10      	ldr	r2, [pc, #64]	@ (8002a2c <HAL_UART_MspInit+0xac>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029f0:	4b0e      	ldr	r3, [pc, #56]	@ (8002a2c <HAL_UART_MspInit+0xac>)
 80029f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029fc:	230c      	movs	r3, #12
 80029fe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a0c:	2307      	movs	r3, #7
 8002a0e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a14:	4619      	mov	r1, r3
 8002a16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a1a:	f002 fef9 	bl	8005810 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a1e:	bf00      	nop
 8002a20:	3778      	adds	r7, #120	@ 0x78
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40004400 	.word	0x40004400
 8002a2c:	40021000 	.word	0x40021000

08002a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a34:	bf00      	nop
 8002a36:	e7fd      	b.n	8002a34 <NMI_Handler+0x4>

08002a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a3c:	bf00      	nop
 8002a3e:	e7fd      	b.n	8002a3c <HardFault_Handler+0x4>

08002a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a44:	bf00      	nop
 8002a46:	e7fd      	b.n	8002a44 <MemManage_Handler+0x4>

08002a48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a4c:	bf00      	nop
 8002a4e:	e7fd      	b.n	8002a4c <BusFault_Handler+0x4>

08002a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a54:	bf00      	nop
 8002a56:	e7fd      	b.n	8002a54 <UsageFault_Handler+0x4>

08002a58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a86:	f000 fd11 	bl	80034ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Tast1_EXTI1_Pin);
 8002a92:	2002      	movs	r0, #2
 8002a94:	f003 f870 	bl	8005b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002a98:	bf00      	nop
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Tast2_EXTI2_Pin);
 8002aa0:	2004      	movs	r0, #4
 8002aa2:	f003 f869 	bl	8005b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002ab0:	4802      	ldr	r0, [pc, #8]	@ (8002abc <DMA1_Channel1_IRQHandler+0x10>)
 8002ab2:	f002 fd5e 	bl	8005572 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	200004ec 	.word	0x200004ec

08002ac0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8002ac4:	4802      	ldr	r0, [pc, #8]	@ (8002ad0 <DMA1_Channel2_IRQHandler+0x10>)
 8002ac6:	f002 fd54 	bl	8005572 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	2000054c 	.word	0x2000054c

08002ad4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ad8:	4802      	ldr	r0, [pc, #8]	@ (8002ae4 <DMA1_Channel3_IRQHandler+0x10>)
 8002ada:	f002 fd4a 	bl	8005572 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	200002e4 	.word	0x200002e4

08002ae8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002aec:	4803      	ldr	r0, [pc, #12]	@ (8002afc <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002aee:	f005 f899 	bl	8007c24 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002af2:	4803      	ldr	r0, [pc, #12]	@ (8002b00 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002af4:	f005 f896 	bl	8007c24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000408 	.word	0x20000408
 8002b00:	20000454 	.word	0x20000454

08002b04 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b08:	4803      	ldr	r0, [pc, #12]	@ (8002b18 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8002b0a:	f005 f88b 	bl	8007c24 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8002b0e:	4803      	ldr	r0, [pc, #12]	@ (8002b1c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8002b10:	f005 f888 	bl	8007c24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000408 	.word	0x20000408
 8002b1c:	200004a0 	.word	0x200004a0

08002b20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_EXTI13_Pin);
 8002b24:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002b28:	f003 f826 	bl	8005b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002b34:	4802      	ldr	r0, [pc, #8]	@ (8002b40 <DMA2_Channel1_IRQHandler+0x10>)
 8002b36:	f002 fd1c 	bl	8005572 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000344 	.word	0x20000344

08002b44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return 1;
 8002b48:	2301      	movs	r3, #1
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <_kill>:

int _kill(int pid, int sig)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b5e:	f008 f9d9 	bl	800af14 <__errno>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2216      	movs	r2, #22
 8002b66:	601a      	str	r2, [r3, #0]
  return -1;
 8002b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <_exit>:

void _exit (int status)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ffe7 	bl	8002b54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b86:	bf00      	nop
 8002b88:	e7fd      	b.n	8002b86 <_exit+0x12>

08002b8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b086      	sub	sp, #24
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	e00a      	b.n	8002bb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b9c:	f3af 8000 	nop.w
 8002ba0:	4601      	mov	r1, r0
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	60ba      	str	r2, [r7, #8]
 8002ba8:	b2ca      	uxtb	r2, r1
 8002baa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	dbf0      	blt.n	8002b9c <_read+0x12>
  }

  return len;
 8002bba:	687b      	ldr	r3, [r7, #4]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	e009      	b.n	8002bea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	60ba      	str	r2, [r7, #8]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	3301      	adds	r3, #1
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	dbf1      	blt.n	8002bd6 <_write+0x12>
  }
  return len;
 8002bf2:	687b      	ldr	r3, [r7, #4]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <_close>:

int _close(int file)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c24:	605a      	str	r2, [r3, #4]
  return 0;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <_isatty>:

int _isatty(int file)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c3c:	2301      	movs	r3, #1
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b085      	sub	sp, #20
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c6c:	4a14      	ldr	r2, [pc, #80]	@ (8002cc0 <_sbrk+0x5c>)
 8002c6e:	4b15      	ldr	r3, [pc, #84]	@ (8002cc4 <_sbrk+0x60>)
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c78:	4b13      	ldr	r3, [pc, #76]	@ (8002cc8 <_sbrk+0x64>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c80:	4b11      	ldr	r3, [pc, #68]	@ (8002cc8 <_sbrk+0x64>)
 8002c82:	4a12      	ldr	r2, [pc, #72]	@ (8002ccc <_sbrk+0x68>)
 8002c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c86:	4b10      	ldr	r3, [pc, #64]	@ (8002cc8 <_sbrk+0x64>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d207      	bcs.n	8002ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c94:	f008 f93e 	bl	800af14 <__errno>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	220c      	movs	r2, #12
 8002c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca2:	e009      	b.n	8002cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ca4:	4b08      	ldr	r3, [pc, #32]	@ (8002cc8 <_sbrk+0x64>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002caa:	4b07      	ldr	r3, [pc, #28]	@ (8002cc8 <_sbrk+0x64>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	4a05      	ldr	r2, [pc, #20]	@ (8002cc8 <_sbrk+0x64>)
 8002cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20020000 	.word	0x20020000
 8002cc4:	00000400 	.word	0x00000400
 8002cc8:	200006b8 	.word	0x200006b8
 8002ccc:	20000830 	.word	0x20000830

08002cd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002cd4:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <SystemInit+0x20>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cda:	4a05      	ldr	r2, [pc, #20]	@ (8002cf0 <SystemInit+0x20>)
 8002cdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ce0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <enter_handler_state>:
const uint32_t f0 = 500;		// Zu modulierende Frequenz [Hz]
const float A0 = 1;				// Zu modulierende Amplitude [0...1]
pwm_sin_mod *pwmPtr;


void enter_handler_state(int state) {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af04      	add	r7, sp, #16
 8002cfa:	6078      	str	r0, [r7, #4]
	switch (state) {
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <enter_handler_state+0x16>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d024      	beq.n	8002d52 <enter_handler_state+0x5e>
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*) pwmPtr->ccr_arr, pwmPtr->NrOfEl);
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 8002d08:	e081      	b.n	8002e0e <enter_handler_state+0x11a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2120      	movs	r1, #32
 8002d0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d12:	f002 feff 	bl	8005b14 <HAL_GPIO_WritePin>
		handler_state = IDLE;
 8002d16:	4b40      	ldr	r3, [pc, #256]	@ (8002e18 <enter_handler_state+0x124>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
		fillScreen(BLACK);
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f7fe fa3f 	bl	80011a0 <fillScreen>
		ST7735_WriteString(0, 0, "State: IDLE", Font_7x10, GREEN, BLACK);
 8002d22:	4b3e      	ldr	r3, [pc, #248]	@ (8002e1c <enter_handler_state+0x128>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	9202      	str	r2, [sp, #8]
 8002d28:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002d2c:	9201      	str	r2, [sp, #4]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	9200      	str	r2, [sp, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a3a      	ldr	r2, [pc, #232]	@ (8002e20 <enter_handler_state+0x12c>)
 8002d36:	2100      	movs	r1, #0
 8002d38:	2000      	movs	r0, #0
 8002d3a:	f7fe fc9f 	bl	800167c <ST7735_WriteString>
		drawFastHLine(0, px_ofs1, 128, WHITE);
 8002d3e:	4b39      	ldr	r3, [pc, #228]	@ (8002e24 <enter_handler_state+0x130>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	b219      	sxth	r1, r3
 8002d44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d48:	2280      	movs	r2, #128	@ 0x80
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f7fe fa02 	bl	8001154 <drawFastHLine>
		break;
 8002d50:	e05d      	b.n	8002e0e <enter_handler_state+0x11a>
		time_val = 0;
 8002d52:	4b35      	ldr	r3, [pc, #212]	@ (8002e28 <enter_handler_state+0x134>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002d58:	2201      	movs	r2, #1
 8002d5a:	2120      	movs	r1, #32
 8002d5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d60:	f002 fed8 	bl	8005b14 <HAL_GPIO_WritePin>
		fillScreen(BLACK);
 8002d64:	2000      	movs	r0, #0
 8002d66:	f7fe fa1b 	bl	80011a0 <fillScreen>
		ST7735_WriteString(0, 0, "State: SINUS_MOD", Font_7x10, GREEN, BLACK);
 8002d6a:	4b2c      	ldr	r3, [pc, #176]	@ (8002e1c <enter_handler_state+0x128>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	9202      	str	r2, [sp, #8]
 8002d70:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002d74:	9201      	str	r2, [sp, #4]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	9200      	str	r2, [sp, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002e2c <enter_handler_state+0x138>)
 8002d7e:	2100      	movs	r1, #0
 8002d80:	2000      	movs	r0, #0
 8002d82:	f7fe fc7b 	bl	800167c <ST7735_WriteString>
		drawFastHLine(0, px_ofs1, 128, WHITE);
 8002d86:	4b27      	ldr	r3, [pc, #156]	@ (8002e24 <enter_handler_state+0x130>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	b219      	sxth	r1, r3
 8002d8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d90:	2280      	movs	r2, #128	@ 0x80
 8002d92:	2000      	movs	r0, #0
 8002d94:	f7fe f9de 	bl	8001154 <drawFastHLine>
		HAL_TIM_Base_Start_IT(&htim17);
 8002d98:	4825      	ldr	r0, [pc, #148]	@ (8002e30 <enter_handler_state+0x13c>)
 8002d9a:	f004 fb11 	bl	80073c0 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim16);
 8002d9e:	4825      	ldr	r0, [pc, #148]	@ (8002e34 <enter_handler_state+0x140>)
 8002da0:	f004 fb0e 	bl	80073c0 <HAL_TIM_Base_Start_IT>
		HAL_ADC_Start_DMA(&hadc1, AD_RES_BUFFER_ADC1, 3);
 8002da4:	2203      	movs	r2, #3
 8002da6:	4924      	ldr	r1, [pc, #144]	@ (8002e38 <enter_handler_state+0x144>)
 8002da8:	4824      	ldr	r0, [pc, #144]	@ (8002e3c <enter_handler_state+0x148>)
 8002daa:	f000 ffe7 	bl	8003d7c <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(&hadc2, AD_RES_BUFFER_ADC2, 1);
 8002dae:	2201      	movs	r2, #1
 8002db0:	4923      	ldr	r1, [pc, #140]	@ (8002e40 <enter_handler_state+0x14c>)
 8002db2:	4824      	ldr	r0, [pc, #144]	@ (8002e44 <enter_handler_state+0x150>)
 8002db4:	f000 ffe2 	bl	8003d7c <HAL_ADC_Start_DMA>
		set_pwm_values(fPWM, f0, A0);
 8002db8:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002dbc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002dc0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 f9a2 	bl	8003114 <set_pwm_values>
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*) pwmPtr->ccr_arr, pwmPtr->NrOfEl);
 8002dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e48 <enter_handler_state+0x154>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	1d1a      	adds	r2, r3, #4
 8002dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8002e48 <enter_handler_state+0x154>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2100      	movs	r1, #0
 8002de0:	481a      	ldr	r0, [pc, #104]	@ (8002e4c <enter_handler_state+0x158>)
 8002de2:	f004 fbf5 	bl	80075d0 <HAL_TIM_PWM_Start_DMA>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8002de6:	2100      	movs	r1, #0
 8002de8:	4818      	ldr	r0, [pc, #96]	@ (8002e4c <enter_handler_state+0x158>)
 8002dea:	f006 f843 	bl	8008e74 <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*) pwmPtr->ccr_arr, pwmPtr->NrOfEl);
 8002dee:	4b16      	ldr	r3, [pc, #88]	@ (8002e48 <enter_handler_state+0x154>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	1d1a      	adds	r2, r3, #4
 8002df4:	4b14      	ldr	r3, [pc, #80]	@ (8002e48 <enter_handler_state+0x154>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2104      	movs	r1, #4
 8002dfe:	4813      	ldr	r0, [pc, #76]	@ (8002e4c <enter_handler_state+0x158>)
 8002e00:	f004 fbe6 	bl	80075d0 <HAL_TIM_PWM_Start_DMA>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002e04:	2104      	movs	r1, #4
 8002e06:	4811      	ldr	r0, [pc, #68]	@ (8002e4c <enter_handler_state+0x158>)
 8002e08:	f006 f834 	bl	8008e74 <HAL_TIMEx_PWMN_Start>
		break;
 8002e0c:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	200006bc 	.word	0x200006bc
 8002e1c:	20000000 	.word	0x20000000
 8002e20:	0800da08 	.word	0x0800da08
 8002e24:	20000010 	.word	0x20000010
 8002e28:	200006be 	.word	0x200006be
 8002e2c:	0800da14 	.word	0x0800da14
 8002e30:	200004a0 	.word	0x200004a0
 8002e34:	20000454 	.word	0x20000454
 8002e38:	20000640 	.word	0x20000640
 8002e3c:	2000020c 	.word	0x2000020c
 8002e40:	2000064c 	.word	0x2000064c
 8002e44:	20000278 	.word	0x20000278
 8002e48:	200006d8 	.word	0x200006d8
 8002e4c:	20000408 	.word	0x20000408

08002e50 <exec_handler_state>:

//-----------------------------------------------------------------------------------------------------------------------

void exec_handler_state(int state) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	switch (state) {
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 80b9 	beq.w	8002fd2 <exec_handler_state+0x182>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d000      	beq.n	8002e68 <exec_handler_state+0x18>

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 8002e66:	e0b5      	b.n	8002fd4 <exec_handler_state+0x184>
		if (time_val > 250) {
 8002e68:	4b61      	ldr	r3, [pc, #388]	@ (8002ff0 <exec_handler_state+0x1a0>)
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	2bfa      	cmp	r3, #250	@ 0xfa
 8002e6e:	d907      	bls.n	8002e80 <exec_handler_state+0x30>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002e70:	2120      	movs	r1, #32
 8002e72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e76:	f002 fe65 	bl	8005b44 <HAL_GPIO_TogglePin>
			time_val = 0;
 8002e7a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ff0 <exec_handler_state+0x1a0>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8002e80:	2110      	movs	r1, #16
 8002e82:	485c      	ldr	r0, [pc, #368]	@ (8002ff4 <exec_handler_state+0x1a4>)
 8002e84:	f002 fe5e 	bl	8005b44 <HAL_GPIO_TogglePin>
		adc_raw_values1.poti1_V = (AD_RES_BUFFER_ADC1[0] << 4); // Map 12 Bit to 16 Bit values
 8002e88:	4b5b      	ldr	r3, [pc, #364]	@ (8002ff8 <exec_handler_state+0x1a8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	4b5a      	ldr	r3, [pc, #360]	@ (8002ffc <exec_handler_state+0x1ac>)
 8002e94:	801a      	strh	r2, [r3, #0]
		adc_values1.poti1_Vf = (3.3*(float)adc_raw_values1.poti1_V)/65535;
 8002e96:	4b59      	ldr	r3, [pc, #356]	@ (8002ffc <exec_handler_state+0x1ac>)
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	ee07 3a90 	vmov	s15, r3
 8002e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea2:	ee17 0a90 	vmov	r0, s15
 8002ea6:	f7fd fb77 	bl	8000598 <__aeabi_f2d>
 8002eaa:	a34d      	add	r3, pc, #308	@ (adr r3, 8002fe0 <exec_handler_state+0x190>)
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	f7fd fbca 	bl	8000648 <__aeabi_dmul>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	a34a      	add	r3, pc, #296	@ (adr r3, 8002fe8 <exec_handler_state+0x198>)
 8002ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec2:	f7fd fceb 	bl	800089c <__aeabi_ddiv>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4610      	mov	r0, r2
 8002ecc:	4619      	mov	r1, r3
 8002ece:	f7fd fe93 	bl	8000bf8 <__aeabi_d2f>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8003000 <exec_handler_state+0x1b0>)
 8002ed6:	6013      	str	r3, [r2, #0]
	    adc_raw_values1.poti2_V = (AD_RES_BUFFER_ADC1[1] << 4);
 8002ed8:	4b47      	ldr	r3, [pc, #284]	@ (8002ff8 <exec_handler_state+0x1a8>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	4b46      	ldr	r3, [pc, #280]	@ (8002ffc <exec_handler_state+0x1ac>)
 8002ee4:	805a      	strh	r2, [r3, #2]
	    adc_values1.poti2_Vf = (3.3*(float)adc_raw_values1.poti2_V)/65535;
 8002ee6:	4b45      	ldr	r3, [pc, #276]	@ (8002ffc <exec_handler_state+0x1ac>)
 8002ee8:	885b      	ldrh	r3, [r3, #2]
 8002eea:	ee07 3a90 	vmov	s15, r3
 8002eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ef2:	ee17 0a90 	vmov	r0, s15
 8002ef6:	f7fd fb4f 	bl	8000598 <__aeabi_f2d>
 8002efa:	a339      	add	r3, pc, #228	@ (adr r3, 8002fe0 <exec_handler_state+0x190>)
 8002efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f00:	f7fd fba2 	bl	8000648 <__aeabi_dmul>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	a336      	add	r3, pc, #216	@ (adr r3, 8002fe8 <exec_handler_state+0x198>)
 8002f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f12:	f7fd fcc3 	bl	800089c <__aeabi_ddiv>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	f7fd fe6b 	bl	8000bf8 <__aeabi_d2f>
 8002f22:	4603      	mov	r3, r0
 8002f24:	4a36      	ldr	r2, [pc, #216]	@ (8003000 <exec_handler_state+0x1b0>)
 8002f26:	6053      	str	r3, [r2, #4]
	    adc_raw_values1.bnc1_V = (AD_RES_BUFFER_ADC1[2] << 4);
 8002f28:	4b33      	ldr	r3, [pc, #204]	@ (8002ff8 <exec_handler_state+0x1a8>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	4b32      	ldr	r3, [pc, #200]	@ (8002ffc <exec_handler_state+0x1ac>)
 8002f34:	809a      	strh	r2, [r3, #4]
	    adc_values1.bnc1_Vf = (3.3*(float) adc_raw_values1.bnc1_V)/65535;
 8002f36:	4b31      	ldr	r3, [pc, #196]	@ (8002ffc <exec_handler_state+0x1ac>)
 8002f38:	889b      	ldrh	r3, [r3, #4]
 8002f3a:	ee07 3a90 	vmov	s15, r3
 8002f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f42:	ee17 0a90 	vmov	r0, s15
 8002f46:	f7fd fb27 	bl	8000598 <__aeabi_f2d>
 8002f4a:	a325      	add	r3, pc, #148	@ (adr r3, 8002fe0 <exec_handler_state+0x190>)
 8002f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f50:	f7fd fb7a 	bl	8000648 <__aeabi_dmul>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	a322      	add	r3, pc, #136	@ (adr r3, 8002fe8 <exec_handler_state+0x198>)
 8002f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f62:	f7fd fc9b 	bl	800089c <__aeabi_ddiv>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	f7fd fe43 	bl	8000bf8 <__aeabi_d2f>
 8002f72:	4603      	mov	r3, r0
 8002f74:	4a22      	ldr	r2, [pc, #136]	@ (8003000 <exec_handler_state+0x1b0>)
 8002f76:	6093      	str	r3, [r2, #8]
	    adc_raw_values1.bnc2_V = (AD_RES_BUFFER_ADC2[0] << 4);
 8002f78:	4b22      	ldr	r3, [pc, #136]	@ (8003004 <exec_handler_state+0x1b4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	4b1e      	ldr	r3, [pc, #120]	@ (8002ffc <exec_handler_state+0x1ac>)
 8002f84:	80da      	strh	r2, [r3, #6]
	    adc_values1.bnc2_Vf = (3.3*(float) adc_raw_values1.bnc2_V)/65535;
 8002f86:	4b1d      	ldr	r3, [pc, #116]	@ (8002ffc <exec_handler_state+0x1ac>)
 8002f88:	88db      	ldrh	r3, [r3, #6]
 8002f8a:	ee07 3a90 	vmov	s15, r3
 8002f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f92:	ee17 0a90 	vmov	r0, s15
 8002f96:	f7fd faff 	bl	8000598 <__aeabi_f2d>
 8002f9a:	a311      	add	r3, pc, #68	@ (adr r3, 8002fe0 <exec_handler_state+0x190>)
 8002f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa0:	f7fd fb52 	bl	8000648 <__aeabi_dmul>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4610      	mov	r0, r2
 8002faa:	4619      	mov	r1, r3
 8002fac:	a30e      	add	r3, pc, #56	@ (adr r3, 8002fe8 <exec_handler_state+0x198>)
 8002fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb2:	f7fd fc73 	bl	800089c <__aeabi_ddiv>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4610      	mov	r0, r2
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f7fd fe1b 	bl	8000bf8 <__aeabi_d2f>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8003000 <exec_handler_state+0x1b0>)
 8002fc6:	60d3      	str	r3, [r2, #12]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8002fc8:	2110      	movs	r1, #16
 8002fca:	480a      	ldr	r0, [pc, #40]	@ (8002ff4 <exec_handler_state+0x1a4>)
 8002fcc:	f002 fdba 	bl	8005b44 <HAL_GPIO_TogglePin>
		break;
 8002fd0:	e000      	b.n	8002fd4 <exec_handler_state+0x184>
		break;
 8002fd2:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	f3af 8000 	nop.w
 8002fe0:	66666666 	.word	0x66666666
 8002fe4:	400a6666 	.word	0x400a6666
 8002fe8:	00000000 	.word	0x00000000
 8002fec:	40efffe0 	.word	0x40efffe0
 8002ff0:	200006be 	.word	0x200006be
 8002ff4:	48000800 	.word	0x48000800
 8002ff8:	20000640 	.word	0x20000640
 8002ffc:	200006c0 	.word	0x200006c0
 8003000:	200006c8 	.word	0x200006c8
 8003004:	2000064c 	.word	0x2000064c

08003008 <leave_handler_state>:

//-----------------------------------------------------------------------------------------------------------------------

void leave_handler_state(int state) {
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
	switch (state) {
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d025      	beq.n	8003062 <leave_handler_state+0x5a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d000      	beq.n	800301e <leave_handler_state+0x16>
		// dynamisch allozierter Speicher freigeben
		free(pwmPtr);
		break;
		//--------------------------------------------------------------------------------------
	default:
		break;
 800301c:	e022      	b.n	8003064 <leave_handler_state+0x5c>
		HAL_TIM_Base_Stop_IT(&htim17);
 800301e:	4813      	ldr	r0, [pc, #76]	@ (800306c <leave_handler_state+0x64>)
 8003020:	f004 fa46 	bl	80074b0 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim16);
 8003024:	4812      	ldr	r0, [pc, #72]	@ (8003070 <leave_handler_state+0x68>)
 8003026:	f004 fa43 	bl	80074b0 <HAL_TIM_Base_Stop_IT>
		HAL_ADC_Stop_DMA(&hadc1);
 800302a:	4812      	ldr	r0, [pc, #72]	@ (8003074 <leave_handler_state+0x6c>)
 800302c:	f000 ff7a 	bl	8003f24 <HAL_ADC_Stop_DMA>
		HAL_ADC_Stop_DMA(&hadc2);
 8003030:	4811      	ldr	r0, [pc, #68]	@ (8003078 <leave_handler_state+0x70>)
 8003032:	f000 ff77 	bl	8003f24 <HAL_ADC_Stop_DMA>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8003036:	2100      	movs	r1, #0
 8003038:	4810      	ldr	r0, [pc, #64]	@ (800307c <leave_handler_state+0x74>)
 800303a:	f004 fcf5 	bl	8007a28 <HAL_TIM_PWM_Stop_DMA>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800303e:	2100      	movs	r1, #0
 8003040:	480e      	ldr	r0, [pc, #56]	@ (800307c <leave_handler_state+0x74>)
 8003042:	f005 ffd9 	bl	8008ff8 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 8003046:	2104      	movs	r1, #4
 8003048:	480c      	ldr	r0, [pc, #48]	@ (800307c <leave_handler_state+0x74>)
 800304a:	f004 fced 	bl	8007a28 <HAL_TIM_PWM_Stop_DMA>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800304e:	2104      	movs	r1, #4
 8003050:	480a      	ldr	r0, [pc, #40]	@ (800307c <leave_handler_state+0x74>)
 8003052:	f005 ffd1 	bl	8008ff8 <HAL_TIMEx_PWMN_Stop>
		free(pwmPtr);
 8003056:	4b0a      	ldr	r3, [pc, #40]	@ (8003080 <leave_handler_state+0x78>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f007 f8c4 	bl	800a1e8 <free>
		break;
 8003060:	e000      	b.n	8003064 <leave_handler_state+0x5c>
		break;
 8003062:	bf00      	nop
		//--------------------------------------------------------------------------------------
	}
}
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	200004a0 	.word	0x200004a0
 8003070:	20000454 	.word	0x20000454
 8003074:	2000020c 	.word	0x2000020c
 8003078:	20000278 	.word	0x20000278
 800307c:	20000408 	.word	0x20000408
 8003080:	200006d8 	.word	0x200006d8

08003084 <handler_task>:

//-----------------------------------------------------------------------------------------------------------------------

void handler_task(void) {
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
	exec_handler_state(handler_state);
 8003088:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <handler_task+0x14>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff fedf 	bl	8002e50 <exec_handler_state>
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	200006bc 	.word	0x200006bc

0800309c <set_handler_state>:

void set_handler_state(uint8_t state) {
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
	prev_handler_state = handler_state;
 80030a6:	4b0a      	ldr	r3, [pc, #40]	@ (80030d0 <set_handler_state+0x34>)
 80030a8:	781a      	ldrb	r2, [r3, #0]
 80030aa:	4b0a      	ldr	r3, [pc, #40]	@ (80030d4 <set_handler_state+0x38>)
 80030ac:	701a      	strb	r2, [r3, #0]
	handler_state = state;
 80030ae:	4a08      	ldr	r2, [pc, #32]	@ (80030d0 <set_handler_state+0x34>)
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	7013      	strb	r3, [r2, #0]
	leave_handler_state(prev_handler_state);
 80030b4:	4b07      	ldr	r3, [pc, #28]	@ (80030d4 <set_handler_state+0x38>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ffa5 	bl	8003008 <leave_handler_state>
	enter_handler_state(state);
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fe17 	bl	8002cf4 <enter_handler_state>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200006bc 	.word	0x200006bc
 80030d4:	200006bd 	.word	0x200006bd

080030d8 <inc_handler_currentTime>:

uint8_t get_handler_state(void) {
	return handler_state;
}

void inc_handler_currentTime(uint16_t dT) {
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	80fb      	strh	r3, [r7, #6]
	time_val = time_val + dT;
 80030e2:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <inc_handler_currentTime+0x24>)
 80030e4:	881a      	ldrh	r2, [r3, #0]
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	4413      	add	r3, r2
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	4b03      	ldr	r3, [pc, #12]	@ (80030fc <inc_handler_currentTime+0x24>)
 80030ee:	801a      	strh	r2, [r3, #0]
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	200006be 	.word	0x200006be

08003100 <get_adc_values>:

adc_values* get_adc_values(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
	return &adc_values1;
 8003104:	4b02      	ldr	r3, [pc, #8]	@ (8003110 <get_adc_values+0x10>)
}
 8003106:	4618      	mov	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	200006c8 	.word	0x200006c8

08003114 <set_pwm_values>:

void set_pwm_values(const uint32_t fPWM, const uint32_t f0, const float A0)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b0a4      	sub	sp, #144	@ 0x90
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	ed87 0a01 	vstr	s0, [r7, #4]
	// Char array für ausgabe
	char msg_console1[80];
	// Speicher dynamisch allozieren
	pwmPtr = malloc(sizeof(pwm_sin_mod) + (fPWM/f0)*sizeof(uint32_t));
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	fbb2 f3f3 	udiv	r3, r2, r3
 800312a:	3301      	adds	r3, #1
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4618      	mov	r0, r3
 8003130:	f007 f852 	bl	800a1d8 <malloc>
 8003134:	4603      	mov	r3, r0
 8003136:	461a      	mov	r2, r3
 8003138:	4b98      	ldr	r3, [pc, #608]	@ (800339c <set_pwm_values+0x288>)
 800313a:	601a      	str	r2, [r3, #0]
	pwmPtr->NrOfEl = (fPWM/f0);
 800313c:	4b97      	ldr	r3, [pc, #604]	@ (800339c <set_pwm_values+0x288>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68f9      	ldr	r1, [r7, #12]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	fbb1 f2f2 	udiv	r2, r1, r2
 8003148:	601a      	str	r2, [r3, #0]
	// Struktur mit Werten füllen
	const float pi = M_PI;
 800314a:	4b95      	ldr	r3, [pc, #596]	@ (80033a0 <set_pwm_values+0x28c>)
 800314c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	float dDeg = 360.0 / (pwmPtr->NrOfEl - 1);		// Winkelschritt [deg]
 8003150:	4b92      	ldr	r3, [pc, #584]	@ (800339c <set_pwm_values+0x288>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3b01      	subs	r3, #1
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd f9fb 	bl	8000554 <__aeabi_ui2d>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	f04f 0000 	mov.w	r0, #0
 8003166:	498f      	ldr	r1, [pc, #572]	@ (80033a4 <set_pwm_values+0x290>)
 8003168:	f7fd fb98 	bl	800089c <__aeabi_ddiv>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4610      	mov	r0, r2
 8003172:	4619      	mov	r1, r3
 8003174:	f7fd fd40 	bl	8000bf8 <__aeabi_d2f>
 8003178:	4603      	mov	r3, r0
 800317a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	float dRad = (2 * pi) / (pwmPtr->NrOfEl - 1);	// Winkelschritt [rad]
 800317e:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003182:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003186:	4b85      	ldr	r3, [pc, #532]	@ (800339c <set_pwm_values+0x288>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	3b01      	subs	r3, #1
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800319a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
	float deg_val = 0;
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
	float rad_val = 0;
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	67bb      	str	r3, [r7, #120]	@ 0x78
	float sin_val = 0;
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	677b      	str	r3, [r7, #116]	@ 0x74
	float posOffset0 = 1;
 80031b0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80031b4:	673b      	str	r3, [r7, #112]	@ 0x70
	float posOffsetCurr = 0;
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float norm0 = ((TIM1->ARR) / 2) + 1;
 80031bc:	4b7a      	ldr	r3, [pc, #488]	@ (80033a8 <set_pwm_values+0x294>)
 80031be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	3301      	adds	r3, #1
 80031c4:	ee07 3a90 	vmov	s15, r3
 80031c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031cc:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	float normCurr = 0;
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	667b      	str	r3, [r7, #100]	@ 0x64
	uint32_t i = 1;
 80031d6:	2301      	movs	r3, #1
 80031d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	for (i = 0; i < pwmPtr->NrOfEl; i++) {
 80031dc:	2300      	movs	r3, #0
 80031de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80031e2:	e0cd      	b.n	8003380 <set_pwm_values+0x26c>
		if (i == 0) {
 80031e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10d      	bne.n	8003208 <set_pwm_values+0xf4>
			pwmPtr->ccr_arr[i] = (uint32_t) norm0;
 80031ec:	4b6b      	ldr	r3, [pc, #428]	@ (800339c <set_pwm_values+0x288>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80031f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031f8:	ee17 1a90 	vmov	r1, s15
 80031fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	6059      	str	r1, [r3, #4]
 8003206:	e09a      	b.n	800333e <set_pwm_values+0x22a>
		} else if (i == 1) {
 8003208:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800320c:	2b01      	cmp	r3, #1
 800320e:	d14b      	bne.n	80032a8 <set_pwm_values+0x194>
			deg_val = i * dDeg;
 8003210:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321c:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8003220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003224:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
			rad_val = i * dRad;
 8003228:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800322c:	ee07 3a90 	vmov	s15, r3
 8003230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003234:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323c:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
			sin_val = A0 * sinf(i * dRad);
 8003240:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003244:	ee07 3a90 	vmov	s15, r3
 8003248:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800324c:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003254:	eeb0 0a67 	vmov.f32	s0, s15
 8003258:	f009 fe0c 	bl	800ce74 <sinf>
 800325c:	eeb0 7a40 	vmov.f32	s14, s0
 8003260:	edd7 7a01 	vldr	s15, [r7, #4]
 8003264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003268:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
			posOffsetCurr = posOffset0 + sin_val;
 800326c:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8003270:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003278:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
			normCurr = norm0 * posOffsetCurr;
 800327c:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8003280:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003288:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
			pwmPtr->ccr_arr[i] = (uint32_t) normCurr;
 800328c:	4b43      	ldr	r3, [pc, #268]	@ (800339c <set_pwm_values+0x288>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003298:	ee17 1a90 	vmov	r1, s15
 800329c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	6059      	str	r1, [r3, #4]
 80032a6:	e04a      	b.n	800333e <set_pwm_values+0x22a>
		} else {
			deg_val = i * dDeg;
 80032a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032ac:	ee07 3a90 	vmov	s15, r3
 80032b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b4:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80032b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032bc:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
			rad_val = i * dRad;
 80032c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032c4:	ee07 3a90 	vmov	s15, r3
 80032c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032cc:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80032d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d4:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
			sin_val = A0 * sinf(i * dRad);
 80032d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032dc:	ee07 3a90 	vmov	s15, r3
 80032e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032e4:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80032e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ec:	eeb0 0a67 	vmov.f32	s0, s15
 80032f0:	f009 fdc0 	bl	800ce74 <sinf>
 80032f4:	eeb0 7a40 	vmov.f32	s14, s0
 80032f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80032fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003300:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
			posOffsetCurr = posOffset0 + sin_val;
 8003304:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8003308:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800330c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003310:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
			normCurr = norm0 * posOffsetCurr;
 8003314:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8003318:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800331c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003320:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
			pwmPtr->ccr_arr[i] = (uint32_t) normCurr;
 8003324:	4b1d      	ldr	r3, [pc, #116]	@ (800339c <set_pwm_values+0x288>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800332c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003330:	ee17 1a90 	vmov	r1, s15
 8003334:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	6059      	str	r1, [r3, #4]
		}
		// Daten ausgeben
		sprintf(msg_console1, "pwmPtr->ccr_arr[%d]: %3lu\r\n", i ,pwmPtr->ccr_arr[i]);
 800333e:	4b17      	ldr	r3, [pc, #92]	@ (800339c <set_pwm_values+0x288>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f107 0014 	add.w	r0, r7, #20
 8003350:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003354:	4915      	ldr	r1, [pc, #84]	@ (80033ac <set_pwm_values+0x298>)
 8003356:	f007 fd17 	bl	800ad88 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_console1, strlen(msg_console1), HAL_MAX_DELAY);
 800335a:	f107 0314 	add.w	r3, r7, #20
 800335e:	4618      	mov	r0, r3
 8003360:	f7fc ffae 	bl	80002c0 <strlen>
 8003364:	4603      	mov	r3, r0
 8003366:	b29a      	uxth	r2, r3
 8003368:	f107 0114 	add.w	r1, r7, #20
 800336c:	f04f 33ff 	mov.w	r3, #4294967295
 8003370:	480f      	ldr	r0, [pc, #60]	@ (80033b0 <set_pwm_values+0x29c>)
 8003372:	f006 f884 	bl	800947e <HAL_UART_Transmit>
	for (i = 0; i < pwmPtr->NrOfEl; i++) {
 8003376:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800337a:	3301      	adds	r3, #1
 800337c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003380:	4b06      	ldr	r3, [pc, #24]	@ (800339c <set_pwm_values+0x288>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800338a:	429a      	cmp	r2, r3
 800338c:	f4ff af2a 	bcc.w	80031e4 <set_pwm_values+0xd0>
	}

	// Speicher freigeben
	// free(pwmPtr);
}
 8003390:	bf00      	nop
 8003392:	bf00      	nop
 8003394:	3790      	adds	r7, #144	@ 0x90
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	200006d8 	.word	0x200006d8
 80033a0:	40490fdb 	.word	0x40490fdb
 80033a4:	40768000 	.word	0x40768000
 80033a8:	40012c00 	.word	0x40012c00
 80033ac:	0800da28 	.word	0x0800da28
 80033b0:	200005ac 	.word	0x200005ac

080033b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033b4:	480d      	ldr	r0, [pc, #52]	@ (80033ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80033b8:	f7ff fc8a 	bl	8002cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033bc:	480c      	ldr	r0, [pc, #48]	@ (80033f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80033be:	490d      	ldr	r1, [pc, #52]	@ (80033f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033c0:	4a0d      	ldr	r2, [pc, #52]	@ (80033f8 <LoopForever+0xe>)
  movs r3, #0
 80033c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80033c4:	e002      	b.n	80033cc <LoopCopyDataInit>

080033c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ca:	3304      	adds	r3, #4

080033cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033d0:	d3f9      	bcc.n	80033c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033d2:	4a0a      	ldr	r2, [pc, #40]	@ (80033fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80033d4:	4c0a      	ldr	r4, [pc, #40]	@ (8003400 <LoopForever+0x16>)
  movs r3, #0
 80033d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033d8:	e001      	b.n	80033de <LoopFillZerobss>

080033da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033dc:	3204      	adds	r2, #4

080033de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033e0:	d3fb      	bcc.n	80033da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033e2:	f007 fd9d 	bl	800af20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033e6:	f7fe fc15 	bl	8001c14 <main>

080033ea <LoopForever>:

LoopForever:
    b LoopForever
 80033ea:	e7fe      	b.n	80033ea <LoopForever>
  ldr   r0, =_estack
 80033ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033f4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80033f8:	0800e9b8 	.word	0x0800e9b8
  ldr r2, =_sbss
 80033fc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003400:	2000082c 	.word	0x2000082c

08003404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003404:	e7fe      	b.n	8003404 <ADC1_2_IRQHandler>

08003406 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003410:	2003      	movs	r0, #3
 8003412:	f001 fe8b 	bl	800512c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003416:	200f      	movs	r0, #15
 8003418:	f000 f80e 	bl	8003438 <HAL_InitTick>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	71fb      	strb	r3, [r7, #7]
 8003426:	e001      	b.n	800342c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003428:	f7ff f80a 	bl	8002440 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800342c:	79fb      	ldrb	r3, [r7, #7]

}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
	...

08003438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003444:	4b16      	ldr	r3, [pc, #88]	@ (80034a0 <HAL_InitTick+0x68>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d022      	beq.n	8003492 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800344c:	4b15      	ldr	r3, [pc, #84]	@ (80034a4 <HAL_InitTick+0x6c>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4b13      	ldr	r3, [pc, #76]	@ (80034a0 <HAL_InitTick+0x68>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003458:	fbb1 f3f3 	udiv	r3, r1, r3
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	4618      	mov	r0, r3
 8003462:	f001 fe96 	bl	8005192 <HAL_SYSTICK_Config>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10f      	bne.n	800348c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b0f      	cmp	r3, #15
 8003470:	d809      	bhi.n	8003486 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003472:	2200      	movs	r2, #0
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	f04f 30ff 	mov.w	r0, #4294967295
 800347a:	f001 fe62 	bl	8005142 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800347e:	4a0a      	ldr	r2, [pc, #40]	@ (80034a8 <HAL_InitTick+0x70>)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	e007      	b.n	8003496 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	73fb      	strb	r3, [r7, #15]
 800348a:	e004      	b.n	8003496 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
 8003490:	e001      	b.n	8003496 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003496:	7bfb      	ldrb	r3, [r7, #15]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000018 	.word	0x20000018
 80034a4:	2000000c 	.word	0x2000000c
 80034a8:	20000014 	.word	0x20000014

080034ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034b0:	4b05      	ldr	r3, [pc, #20]	@ (80034c8 <HAL_IncTick+0x1c>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	4b05      	ldr	r3, [pc, #20]	@ (80034cc <HAL_IncTick+0x20>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4413      	add	r3, r2
 80034ba:	4a03      	ldr	r2, [pc, #12]	@ (80034c8 <HAL_IncTick+0x1c>)
 80034bc:	6013      	str	r3, [r2, #0]
}
 80034be:	bf00      	nop
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	200006dc 	.word	0x200006dc
 80034cc:	20000018 	.word	0x20000018

080034d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return uwTick;
 80034d4:	4b03      	ldr	r3, [pc, #12]	@ (80034e4 <HAL_GetTick+0x14>)
 80034d6:	681b      	ldr	r3, [r3, #0]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	200006dc 	.word	0x200006dc

080034e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034f0:	f7ff ffee 	bl	80034d0 <HAL_GetTick>
 80034f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003500:	d004      	beq.n	800350c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003502:	4b09      	ldr	r3, [pc, #36]	@ (8003528 <HAL_Delay+0x40>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4413      	add	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800350c:	bf00      	nop
 800350e:	f7ff ffdf 	bl	80034d0 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	429a      	cmp	r2, r3
 800351c:	d8f7      	bhi.n	800350e <HAL_Delay+0x26>
  {
  }
}
 800351e:	bf00      	nop
 8003520:	bf00      	nop
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20000018 	.word	0x20000018

0800352c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	609a      	str	r2, [r3, #8]
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	609a      	str	r2, [r3, #8]
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3360      	adds	r3, #96	@ 0x60
 80035a6:	461a      	mov	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b08      	ldr	r3, [pc, #32]	@ (80035d8 <LL_ADC_SetOffset+0x44>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80035cc:	bf00      	nop
 80035ce:	371c      	adds	r7, #28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	03fff000 	.word	0x03fff000

080035dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3360      	adds	r3, #96	@ 0x60
 80035ea:	461a      	mov	r2, r3
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3360      	adds	r3, #96	@ 0x60
 8003618:	461a      	mov	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	431a      	orrs	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003632:	bf00      	nop
 8003634:	371c      	adds	r7, #28
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800363e:	b480      	push	{r7}
 8003640:	b087      	sub	sp, #28
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	3360      	adds	r3, #96	@ 0x60
 800364e:	461a      	mov	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	431a      	orrs	r2, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003668:	bf00      	nop
 800366a:	371c      	adds	r7, #28
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	3360      	adds	r3, #96	@ 0x60
 8003684:	461a      	mov	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	431a      	orrs	r2, r3
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800369e:	bf00      	nop
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	615a      	str	r2, [r3, #20]
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b087      	sub	sp, #28
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	3330      	adds	r3, #48	@ 0x30
 8003706:	461a      	mov	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	4413      	add	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	211f      	movs	r1, #31
 8003722:	fa01 f303 	lsl.w	r3, r1, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	401a      	ands	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	0e9b      	lsrs	r3, r3, #26
 800372e:	f003 011f 	and.w	r1, r3, #31
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f003 031f 	and.w	r3, r3, #31
 8003738:	fa01 f303 	lsl.w	r3, r1, r3
 800373c:	431a      	orrs	r2, r3
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003742:	bf00      	nop
 8003744:	371c      	adds	r7, #28
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800374e:	b480      	push	{r7}
 8003750:	b087      	sub	sp, #28
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	3314      	adds	r3, #20
 800375e:	461a      	mov	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	0e5b      	lsrs	r3, r3, #25
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	4413      	add	r3, r2
 800376c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	0d1b      	lsrs	r3, r3, #20
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	2107      	movs	r1, #7
 800377c:	fa01 f303 	lsl.w	r3, r1, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	401a      	ands	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	0d1b      	lsrs	r3, r3, #20
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	fa01 f303 	lsl.w	r3, r1, r3
 8003792:	431a      	orrs	r2, r3
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003798:	bf00      	nop
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037bc:	43db      	mvns	r3, r3
 80037be:	401a      	ands	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f003 0318 	and.w	r3, r3, #24
 80037c6:	4908      	ldr	r1, [pc, #32]	@ (80037e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80037c8:	40d9      	lsrs	r1, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	400b      	ands	r3, r1
 80037ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d2:	431a      	orrs	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80037da:	bf00      	nop
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	0007ffff 	.word	0x0007ffff

080037ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 031f 	and.w	r3, r3, #31
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003818:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6093      	str	r3, [r2, #8]
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800383c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003840:	d101      	bne.n	8003846 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003864:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003868:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800388c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003890:	d101      	bne.n	8003896 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038b8:	f043 0201 	orr.w	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038e0:	f043 0202 	orr.w	r2, r3, #2
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <LL_ADC_IsEnabled+0x18>
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <LL_ADC_IsEnabled+0x1a>
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b02      	cmp	r3, #2
 800392c:	d101      	bne.n	8003932 <LL_ADC_IsDisableOngoing+0x18>
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <LL_ADC_IsDisableOngoing+0x1a>
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003950:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003954:	f043 0204 	orr.w	r2, r3, #4
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003978:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800397c:	f043 0210 	orr.w	r2, r3, #16
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d101      	bne.n	80039a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039c6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039ca:	f043 0220 	orr.w	r2, r3, #32
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d101      	bne.n	80039f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a04:	b590      	push	{r4, r7, lr}
 8003a06:	b089      	sub	sp, #36	@ 0x24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e1a9      	b.n	8003d72 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d109      	bne.n	8003a40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7fe fd2b 	bl	8002488 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff fef1 	bl	800382c <LL_ADC_IsDeepPowerDownEnabled>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d004      	beq.n	8003a5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff fed7 	bl	8003808 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff ff0c 	bl	800387c <LL_ADC_IsInternalRegulatorEnabled>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d115      	bne.n	8003a96 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff fef0 	bl	8003854 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a74:	4b9c      	ldr	r3, [pc, #624]	@ (8003ce8 <HAL_ADC_Init+0x2e4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	099b      	lsrs	r3, r3, #6
 8003a7a:	4a9c      	ldr	r2, [pc, #624]	@ (8003cec <HAL_ADC_Init+0x2e8>)
 8003a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a80:	099b      	lsrs	r3, r3, #6
 8003a82:	3301      	adds	r3, #1
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a88:	e002      	b.n	8003a90 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f9      	bne.n	8003a8a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff feee 	bl	800387c <LL_ADC_IsInternalRegulatorEnabled>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10d      	bne.n	8003ac2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aaa:	f043 0210 	orr.w	r2, r3, #16
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab6:	f043 0201 	orr.w	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff ff62 	bl	8003990 <LL_ADC_REG_IsConversionOngoing>
 8003acc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f040 8142 	bne.w	8003d60 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f040 813e 	bne.w	8003d60 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003aec:	f043 0202 	orr.w	r2, r3, #2
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff fefb 	bl	80038f4 <LL_ADC_IsEnabled>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d141      	bne.n	8003b88 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b0c:	d004      	beq.n	8003b18 <HAL_ADC_Init+0x114>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a77      	ldr	r2, [pc, #476]	@ (8003cf0 <HAL_ADC_Init+0x2ec>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d10f      	bne.n	8003b38 <HAL_ADC_Init+0x134>
 8003b18:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b1c:	f7ff feea 	bl	80038f4 <LL_ADC_IsEnabled>
 8003b20:	4604      	mov	r4, r0
 8003b22:	4873      	ldr	r0, [pc, #460]	@ (8003cf0 <HAL_ADC_Init+0x2ec>)
 8003b24:	f7ff fee6 	bl	80038f4 <LL_ADC_IsEnabled>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	4323      	orrs	r3, r4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	bf0c      	ite	eq
 8003b30:	2301      	moveq	r3, #1
 8003b32:	2300      	movne	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	e012      	b.n	8003b5e <HAL_ADC_Init+0x15a>
 8003b38:	486e      	ldr	r0, [pc, #440]	@ (8003cf4 <HAL_ADC_Init+0x2f0>)
 8003b3a:	f7ff fedb 	bl	80038f4 <LL_ADC_IsEnabled>
 8003b3e:	4604      	mov	r4, r0
 8003b40:	486d      	ldr	r0, [pc, #436]	@ (8003cf8 <HAL_ADC_Init+0x2f4>)
 8003b42:	f7ff fed7 	bl	80038f4 <LL_ADC_IsEnabled>
 8003b46:	4603      	mov	r3, r0
 8003b48:	431c      	orrs	r4, r3
 8003b4a:	486c      	ldr	r0, [pc, #432]	@ (8003cfc <HAL_ADC_Init+0x2f8>)
 8003b4c:	f7ff fed2 	bl	80038f4 <LL_ADC_IsEnabled>
 8003b50:	4603      	mov	r3, r0
 8003b52:	4323      	orrs	r3, r4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d012      	beq.n	8003b88 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b6a:	d004      	beq.n	8003b76 <HAL_ADC_Init+0x172>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a5f      	ldr	r2, [pc, #380]	@ (8003cf0 <HAL_ADC_Init+0x2ec>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d101      	bne.n	8003b7a <HAL_ADC_Init+0x176>
 8003b76:	4a62      	ldr	r2, [pc, #392]	@ (8003d00 <HAL_ADC_Init+0x2fc>)
 8003b78:	e000      	b.n	8003b7c <HAL_ADC_Init+0x178>
 8003b7a:	4a62      	ldr	r2, [pc, #392]	@ (8003d04 <HAL_ADC_Init+0x300>)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f7ff fcd2 	bl	800352c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	7f5b      	ldrb	r3, [r3, #29]
 8003b8c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b92:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003b98:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003b9e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ba6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d106      	bne.n	8003bc4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	045b      	lsls	r3, r3, #17
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d009      	beq.n	8003be0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	4b48      	ldr	r3, [pc, #288]	@ (8003d08 <HAL_ADC_Init+0x304>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	69b9      	ldr	r1, [r7, #24]
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff fee5 	bl	80039de <LL_ADC_INJ_IsConversionOngoing>
 8003c14:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d17f      	bne.n	8003d1c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d17c      	bne.n	8003d1c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c26:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c2e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c3e:	f023 0302 	bic.w	r3, r3, #2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	69b9      	ldr	r1, [r7, #24]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d017      	beq.n	8003c84 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003c62:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003c6c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003c70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6911      	ldr	r1, [r2, #16]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003c82:	e013      	b.n	8003cac <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003c92:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003ca4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ca8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d12a      	bne.n	8003d0c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003cc0:	f023 0304 	bic.w	r3, r3, #4
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ccc:	4311      	orrs	r1, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003cd2:	4311      	orrs	r1, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0201 	orr.w	r2, r2, #1
 8003ce4:	611a      	str	r2, [r3, #16]
 8003ce6:	e019      	b.n	8003d1c <HAL_ADC_Init+0x318>
 8003ce8:	2000000c 	.word	0x2000000c
 8003cec:	053e2d63 	.word	0x053e2d63
 8003cf0:	50000100 	.word	0x50000100
 8003cf4:	50000400 	.word	0x50000400
 8003cf8:	50000500 	.word	0x50000500
 8003cfc:	50000600 	.word	0x50000600
 8003d00:	50000300 	.word	0x50000300
 8003d04:	50000700 	.word	0x50000700
 8003d08:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0201 	bic.w	r2, r2, #1
 8003d1a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d10c      	bne.n	8003d3e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2a:	f023 010f 	bic.w	r1, r3, #15
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	1e5a      	subs	r2, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d3c:	e007      	b.n	8003d4e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 020f 	bic.w	r2, r2, #15
 8003d4c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d52:	f023 0303 	bic.w	r3, r3, #3
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d5e:	e007      	b.n	8003d70 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d64:	f043 0210 	orr.w	r2, r3, #16
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d70:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3724      	adds	r7, #36	@ 0x24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd90      	pop	{r4, r7, pc}
 8003d7a:	bf00      	nop

08003d7c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d90:	d004      	beq.n	8003d9c <HAL_ADC_Start_DMA+0x20>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a5a      	ldr	r2, [pc, #360]	@ (8003f00 <HAL_ADC_Start_DMA+0x184>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d101      	bne.n	8003da0 <HAL_ADC_Start_DMA+0x24>
 8003d9c:	4b59      	ldr	r3, [pc, #356]	@ (8003f04 <HAL_ADC_Start_DMA+0x188>)
 8003d9e:	e000      	b.n	8003da2 <HAL_ADC_Start_DMA+0x26>
 8003da0:	4b59      	ldr	r3, [pc, #356]	@ (8003f08 <HAL_ADC_Start_DMA+0x18c>)
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff fd22 	bl	80037ec <LL_ADC_GetMultimode>
 8003da8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fdee 	bl	8003990 <LL_ADC_REG_IsConversionOngoing>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f040 809b 	bne.w	8003ef2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_ADC_Start_DMA+0x4e>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e096      	b.n	8003ef8 <HAL_ADC_Start_DMA+0x17c>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a4d      	ldr	r2, [pc, #308]	@ (8003f0c <HAL_ADC_Start_DMA+0x190>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d008      	beq.n	8003dee <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b05      	cmp	r3, #5
 8003de6:	d002      	beq.n	8003dee <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2b09      	cmp	r3, #9
 8003dec:	d17a      	bne.n	8003ee4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 fe14 	bl	8004a1c <ADC_Enable>
 8003df4:	4603      	mov	r3, r0
 8003df6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d16d      	bne.n	8003eda <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e06:	f023 0301 	bic.w	r3, r3, #1
 8003e0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a3a      	ldr	r2, [pc, #232]	@ (8003f00 <HAL_ADC_Start_DMA+0x184>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d009      	beq.n	8003e30 <HAL_ADC_Start_DMA+0xb4>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a3b      	ldr	r2, [pc, #236]	@ (8003f10 <HAL_ADC_Start_DMA+0x194>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d002      	beq.n	8003e2c <HAL_ADC_Start_DMA+0xb0>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	e003      	b.n	8003e34 <HAL_ADC_Start_DMA+0xb8>
 8003e2c:	4b39      	ldr	r3, [pc, #228]	@ (8003f14 <HAL_ADC_Start_DMA+0x198>)
 8003e2e:	e001      	b.n	8003e34 <HAL_ADC_Start_DMA+0xb8>
 8003e30:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d002      	beq.n	8003e42 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d105      	bne.n	8003e4e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e46:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d006      	beq.n	8003e68 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e5e:	f023 0206 	bic.w	r2, r3, #6
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	661a      	str	r2, [r3, #96]	@ 0x60
 8003e66:	e002      	b.n	8003e6e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e72:	4a29      	ldr	r2, [pc, #164]	@ (8003f18 <HAL_ADC_Start_DMA+0x19c>)
 8003e74:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7a:	4a28      	ldr	r2, [pc, #160]	@ (8003f1c <HAL_ADC_Start_DMA+0x1a0>)
 8003e7c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e82:	4a27      	ldr	r2, [pc, #156]	@ (8003f20 <HAL_ADC_Start_DMA+0x1a4>)
 8003e84:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	221c      	movs	r2, #28
 8003e8c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0210 	orr.w	r2, r2, #16
 8003ea4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0201 	orr.w	r2, r2, #1
 8003eb4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3340      	adds	r3, #64	@ 0x40
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f001 fa19 	bl	80052fc <HAL_DMA_Start_IT>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff fd34 	bl	8003940 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003ed8:	e00d      	b.n	8003ef6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003ee2:	e008      	b.n	8003ef6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003ef0:	e001      	b.n	8003ef6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	50000100 	.word	0x50000100
 8003f04:	50000300 	.word	0x50000300
 8003f08:	50000700 	.word	0x50000700
 8003f0c:	50000600 	.word	0x50000600
 8003f10:	50000500 	.word	0x50000500
 8003f14:	50000400 	.word	0x50000400
 8003f18:	08004c07 	.word	0x08004c07
 8003f1c:	08004cdf 	.word	0x08004cdf
 8003f20:	08004cfb 	.word	0x08004cfb

08003f24 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_ADC_Stop_DMA+0x16>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e051      	b.n	8003fde <HAL_ADC_Stop_DMA+0xba>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003f42:	2103      	movs	r1, #3
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fcad 	bl	80048a4 <ADC_ConversionStop>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d13f      	bne.n	8003fd4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f68:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d10f      	bne.n	8003f92 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f76:	4618      	mov	r0, r3
 8003f78:	f001 fa3b 	bl	80053f2 <HAL_DMA_Abort>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0210 	bic.w	r2, r2, #16
 8003fa0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d105      	bne.n	8003fb4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 fdcd 	bl	8004b48 <ADC_Disable>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	73fb      	strb	r3, [r7, #15]
 8003fb2:	e002      	b.n	8003fba <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 fdc7 	bl	8004b48 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d109      	bne.n	8003fd4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	f043 0201 	orr.w	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b0b6      	sub	sp, #216	@ 0xd8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800403e:	2b01      	cmp	r3, #1
 8004040:	d102      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x24>
 8004042:	2302      	movs	r3, #2
 8004044:	f000 bc13 	b.w	800486e <HAL_ADC_ConfigChannel+0x84a>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff fc9b 	bl	8003990 <LL_ADC_REG_IsConversionOngoing>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	f040 83f3 	bne.w	8004848 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6859      	ldr	r1, [r3, #4]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	f7ff fb41 	bl	80036f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff fc89 	bl	8003990 <LL_ADC_REG_IsConversionOngoing>
 800407e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff fca9 	bl	80039de <LL_ADC_INJ_IsConversionOngoing>
 800408c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004090:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004094:	2b00      	cmp	r3, #0
 8004096:	f040 81d9 	bne.w	800444c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800409a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f040 81d4 	bne.w	800444c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040ac:	d10f      	bne.n	80040ce <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2200      	movs	r2, #0
 80040b8:	4619      	mov	r1, r3
 80040ba:	f7ff fb48 	bl	800374e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff faef 	bl	80036aa <LL_ADC_SetSamplingTimeCommonConfig>
 80040cc:	e00e      	b.n	80040ec <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	6819      	ldr	r1, [r3, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	461a      	mov	r2, r3
 80040dc:	f7ff fb37 	bl	800374e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2100      	movs	r1, #0
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff fadf 	bl	80036aa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	695a      	ldr	r2, [r3, #20]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	08db      	lsrs	r3, r3, #3
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b04      	cmp	r3, #4
 800410c:	d022      	beq.n	8004154 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	6919      	ldr	r1, [r3, #16]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800411e:	f7ff fa39 	bl	8003594 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	6919      	ldr	r1, [r3, #16]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	461a      	mov	r2, r3
 8004130:	f7ff fa85 	bl	800363e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004140:	2b01      	cmp	r3, #1
 8004142:	d102      	bne.n	800414a <HAL_ADC_ConfigChannel+0x126>
 8004144:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004148:	e000      	b.n	800414c <HAL_ADC_ConfigChannel+0x128>
 800414a:	2300      	movs	r3, #0
 800414c:	461a      	mov	r2, r3
 800414e:	f7ff fa91 	bl	8003674 <LL_ADC_SetOffsetSaturation>
 8004152:	e17b      	b.n	800444c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2100      	movs	r1, #0
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff fa3e 	bl	80035dc <LL_ADC_GetOffsetChannel>
 8004160:	4603      	mov	r3, r0
 8004162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10a      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x15c>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2100      	movs	r1, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff fa33 	bl	80035dc <LL_ADC_GetOffsetChannel>
 8004176:	4603      	mov	r3, r0
 8004178:	0e9b      	lsrs	r3, r3, #26
 800417a:	f003 021f 	and.w	r2, r3, #31
 800417e:	e01e      	b.n	80041be <HAL_ADC_ConfigChannel+0x19a>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2100      	movs	r1, #0
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff fa28 	bl	80035dc <LL_ADC_GetOffsetChannel>
 800418c:	4603      	mov	r3, r0
 800418e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004192:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004196:	fa93 f3a3 	rbit	r3, r3
 800419a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800419e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80041a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80041ae:	2320      	movs	r3, #32
 80041b0:	e004      	b.n	80041bc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80041b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041b6:	fab3 f383 	clz	r3, r3
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d105      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0x1b2>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	0e9b      	lsrs	r3, r3, #26
 80041d0:	f003 031f 	and.w	r3, r3, #31
 80041d4:	e018      	b.n	8004208 <HAL_ADC_ConfigChannel+0x1e4>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80041e2:	fa93 f3a3 	rbit	r3, r3
 80041e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80041ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80041f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80041fa:	2320      	movs	r3, #32
 80041fc:	e004      	b.n	8004208 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80041fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004202:	fab3 f383 	clz	r3, r3
 8004206:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004208:	429a      	cmp	r2, r3
 800420a:	d106      	bne.n	800421a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2200      	movs	r2, #0
 8004212:	2100      	movs	r1, #0
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff f9f7 	bl	8003608 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2101      	movs	r1, #1
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff f9db 	bl	80035dc <LL_ADC_GetOffsetChannel>
 8004226:	4603      	mov	r3, r0
 8004228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <HAL_ADC_ConfigChannel+0x222>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2101      	movs	r1, #1
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff f9d0 	bl	80035dc <LL_ADC_GetOffsetChannel>
 800423c:	4603      	mov	r3, r0
 800423e:	0e9b      	lsrs	r3, r3, #26
 8004240:	f003 021f 	and.w	r2, r3, #31
 8004244:	e01e      	b.n	8004284 <HAL_ADC_ConfigChannel+0x260>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2101      	movs	r1, #1
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff f9c5 	bl	80035dc <LL_ADC_GetOffsetChannel>
 8004252:	4603      	mov	r3, r0
 8004254:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004258:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800425c:	fa93 f3a3 	rbit	r3, r3
 8004260:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004264:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004268:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800426c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004274:	2320      	movs	r3, #32
 8004276:	e004      	b.n	8004282 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004278:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800427c:	fab3 f383 	clz	r3, r3
 8004280:	b2db      	uxtb	r3, r3
 8004282:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800428c:	2b00      	cmp	r3, #0
 800428e:	d105      	bne.n	800429c <HAL_ADC_ConfigChannel+0x278>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	0e9b      	lsrs	r3, r3, #26
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	e018      	b.n	80042ce <HAL_ADC_ConfigChannel+0x2aa>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042a8:	fa93 f3a3 	rbit	r3, r3
 80042ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80042b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80042b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80042c0:	2320      	movs	r3, #32
 80042c2:	e004      	b.n	80042ce <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80042c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042c8:	fab3 f383 	clz	r3, r3
 80042cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d106      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2200      	movs	r2, #0
 80042d8:	2101      	movs	r1, #1
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff f994 	bl	8003608 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2102      	movs	r1, #2
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff f978 	bl	80035dc <LL_ADC_GetOffsetChannel>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10a      	bne.n	800430c <HAL_ADC_ConfigChannel+0x2e8>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2102      	movs	r1, #2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff f96d 	bl	80035dc <LL_ADC_GetOffsetChannel>
 8004302:	4603      	mov	r3, r0
 8004304:	0e9b      	lsrs	r3, r3, #26
 8004306:	f003 021f 	and.w	r2, r3, #31
 800430a:	e01e      	b.n	800434a <HAL_ADC_ConfigChannel+0x326>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2102      	movs	r1, #2
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff f962 	bl	80035dc <LL_ADC_GetOffsetChannel>
 8004318:	4603      	mov	r3, r0
 800431a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004322:	fa93 f3a3 	rbit	r3, r3
 8004326:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800432a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800432e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004332:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800433a:	2320      	movs	r3, #32
 800433c:	e004      	b.n	8004348 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800433e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004342:	fab3 f383 	clz	r3, r3
 8004346:	b2db      	uxtb	r3, r3
 8004348:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004352:	2b00      	cmp	r3, #0
 8004354:	d105      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x33e>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	0e9b      	lsrs	r3, r3, #26
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	e016      	b.n	8004390 <HAL_ADC_ConfigChannel+0x36c>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800436e:	fa93 f3a3 	rbit	r3, r3
 8004372:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004374:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004376:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800437a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004382:	2320      	movs	r3, #32
 8004384:	e004      	b.n	8004390 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004386:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800438a:	fab3 f383 	clz	r3, r3
 800438e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004390:	429a      	cmp	r2, r3
 8004392:	d106      	bne.n	80043a2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2200      	movs	r2, #0
 800439a:	2102      	movs	r1, #2
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff f933 	bl	8003608 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2103      	movs	r1, #3
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff f917 	bl	80035dc <LL_ADC_GetOffsetChannel>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10a      	bne.n	80043ce <HAL_ADC_ConfigChannel+0x3aa>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2103      	movs	r1, #3
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff f90c 	bl	80035dc <LL_ADC_GetOffsetChannel>
 80043c4:	4603      	mov	r3, r0
 80043c6:	0e9b      	lsrs	r3, r3, #26
 80043c8:	f003 021f 	and.w	r2, r3, #31
 80043cc:	e017      	b.n	80043fe <HAL_ADC_ConfigChannel+0x3da>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2103      	movs	r1, #3
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff f901 	bl	80035dc <LL_ADC_GetOffsetChannel>
 80043da:	4603      	mov	r3, r0
 80043dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043e0:	fa93 f3a3 	rbit	r3, r3
 80043e4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80043e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043e8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80043ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80043f0:	2320      	movs	r3, #32
 80043f2:	e003      	b.n	80043fc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80043f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043f6:	fab3 f383 	clz	r3, r3
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004406:	2b00      	cmp	r3, #0
 8004408:	d105      	bne.n	8004416 <HAL_ADC_ConfigChannel+0x3f2>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	0e9b      	lsrs	r3, r3, #26
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	e011      	b.n	800443a <HAL_ADC_ConfigChannel+0x416>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800441e:	fa93 f3a3 	rbit	r3, r3
 8004422:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004424:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004426:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004428:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800442e:	2320      	movs	r3, #32
 8004430:	e003      	b.n	800443a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004432:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004434:	fab3 f383 	clz	r3, r3
 8004438:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800443a:	429a      	cmp	r2, r3
 800443c:	d106      	bne.n	800444c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2200      	movs	r2, #0
 8004444:	2103      	movs	r1, #3
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff f8de 	bl	8003608 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff fa4f 	bl	80038f4 <LL_ADC_IsEnabled>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	f040 813d 	bne.w	80046d8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6819      	ldr	r1, [r3, #0]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	461a      	mov	r2, r3
 800446c:	f7ff f99a 	bl	80037a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4aa2      	ldr	r2, [pc, #648]	@ (8004700 <HAL_ADC_ConfigChannel+0x6dc>)
 8004476:	4293      	cmp	r3, r2
 8004478:	f040 812e 	bne.w	80046d8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10b      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x480>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	0e9b      	lsrs	r3, r3, #26
 8004492:	3301      	adds	r3, #1
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	2b09      	cmp	r3, #9
 800449a:	bf94      	ite	ls
 800449c:	2301      	movls	r3, #1
 800449e:	2300      	movhi	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	e019      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x4b4>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044ac:	fa93 f3a3 	rbit	r3, r3
 80044b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80044b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044b4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80044b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80044bc:	2320      	movs	r3, #32
 80044be:	e003      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80044c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044c2:	fab3 f383 	clz	r3, r3
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	3301      	adds	r3, #1
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	2b09      	cmp	r3, #9
 80044d0:	bf94      	ite	ls
 80044d2:	2301      	movls	r3, #1
 80044d4:	2300      	movhi	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d079      	beq.n	80045d0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d107      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x4d4>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	0e9b      	lsrs	r3, r3, #26
 80044ee:	3301      	adds	r3, #1
 80044f0:	069b      	lsls	r3, r3, #26
 80044f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044f6:	e015      	b.n	8004524 <HAL_ADC_ConfigChannel+0x500>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004500:	fa93 f3a3 	rbit	r3, r3
 8004504:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004506:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004508:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800450a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004510:	2320      	movs	r3, #32
 8004512:	e003      	b.n	800451c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004516:	fab3 f383 	clz	r3, r3
 800451a:	b2db      	uxtb	r3, r3
 800451c:	3301      	adds	r3, #1
 800451e:	069b      	lsls	r3, r3, #26
 8004520:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800452c:	2b00      	cmp	r3, #0
 800452e:	d109      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x520>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	0e9b      	lsrs	r3, r3, #26
 8004536:	3301      	adds	r3, #1
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	2101      	movs	r1, #1
 800453e:	fa01 f303 	lsl.w	r3, r1, r3
 8004542:	e017      	b.n	8004574 <HAL_ADC_ConfigChannel+0x550>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800454c:	fa93 f3a3 	rbit	r3, r3
 8004550:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004554:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004556:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800455c:	2320      	movs	r3, #32
 800455e:	e003      	b.n	8004568 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004560:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004562:	fab3 f383 	clz	r3, r3
 8004566:	b2db      	uxtb	r3, r3
 8004568:	3301      	adds	r3, #1
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	2101      	movs	r1, #1
 8004570:	fa01 f303 	lsl.w	r3, r1, r3
 8004574:	ea42 0103 	orr.w	r1, r2, r3
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10a      	bne.n	800459a <HAL_ADC_ConfigChannel+0x576>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	0e9b      	lsrs	r3, r3, #26
 800458a:	3301      	adds	r3, #1
 800458c:	f003 021f 	and.w	r2, r3, #31
 8004590:	4613      	mov	r3, r2
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	4413      	add	r3, r2
 8004596:	051b      	lsls	r3, r3, #20
 8004598:	e018      	b.n	80045cc <HAL_ADC_ConfigChannel+0x5a8>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a2:	fa93 f3a3 	rbit	r3, r3
 80045a6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80045a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80045ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80045b2:	2320      	movs	r3, #32
 80045b4:	e003      	b.n	80045be <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80045b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045b8:	fab3 f383 	clz	r3, r3
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	3301      	adds	r3, #1
 80045c0:	f003 021f 	and.w	r2, r3, #31
 80045c4:	4613      	mov	r3, r2
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	4413      	add	r3, r2
 80045ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045cc:	430b      	orrs	r3, r1
 80045ce:	e07e      	b.n	80046ce <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d107      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x5c8>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	0e9b      	lsrs	r3, r3, #26
 80045e2:	3301      	adds	r3, #1
 80045e4:	069b      	lsls	r3, r3, #26
 80045e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045ea:	e015      	b.n	8004618 <HAL_ADC_ConfigChannel+0x5f4>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f4:	fa93 f3a3 	rbit	r3, r3
 80045f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80045fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80045fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004604:	2320      	movs	r3, #32
 8004606:	e003      	b.n	8004610 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800460a:	fab3 f383 	clz	r3, r3
 800460e:	b2db      	uxtb	r3, r3
 8004610:	3301      	adds	r3, #1
 8004612:	069b      	lsls	r3, r3, #26
 8004614:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004620:	2b00      	cmp	r3, #0
 8004622:	d109      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x614>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	0e9b      	lsrs	r3, r3, #26
 800462a:	3301      	adds	r3, #1
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	2101      	movs	r1, #1
 8004632:	fa01 f303 	lsl.w	r3, r1, r3
 8004636:	e017      	b.n	8004668 <HAL_ADC_ConfigChannel+0x644>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	fa93 f3a3 	rbit	r3, r3
 8004644:	61fb      	str	r3, [r7, #28]
  return result;
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004650:	2320      	movs	r3, #32
 8004652:	e003      	b.n	800465c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	fab3 f383 	clz	r3, r3
 800465a:	b2db      	uxtb	r3, r3
 800465c:	3301      	adds	r3, #1
 800465e:	f003 031f 	and.w	r3, r3, #31
 8004662:	2101      	movs	r1, #1
 8004664:	fa01 f303 	lsl.w	r3, r1, r3
 8004668:	ea42 0103 	orr.w	r1, r2, r3
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10d      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x670>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	0e9b      	lsrs	r3, r3, #26
 800467e:	3301      	adds	r3, #1
 8004680:	f003 021f 	and.w	r2, r3, #31
 8004684:	4613      	mov	r3, r2
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	4413      	add	r3, r2
 800468a:	3b1e      	subs	r3, #30
 800468c:	051b      	lsls	r3, r3, #20
 800468e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004692:	e01b      	b.n	80046cc <HAL_ADC_ConfigChannel+0x6a8>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	fa93 f3a3 	rbit	r3, r3
 80046a0:	613b      	str	r3, [r7, #16]
  return result;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80046ac:	2320      	movs	r3, #32
 80046ae:	e003      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	fab3 f383 	clz	r3, r3
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	3301      	adds	r3, #1
 80046ba:	f003 021f 	and.w	r2, r3, #31
 80046be:	4613      	mov	r3, r2
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	4413      	add	r3, r2
 80046c4:	3b1e      	subs	r3, #30
 80046c6:	051b      	lsls	r3, r3, #20
 80046c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046d2:	4619      	mov	r1, r3
 80046d4:	f7ff f83b 	bl	800374e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4b09      	ldr	r3, [pc, #36]	@ (8004704 <HAL_ADC_ConfigChannel+0x6e0>)
 80046de:	4013      	ands	r3, r2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80be 	beq.w	8004862 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046ee:	d004      	beq.n	80046fa <HAL_ADC_ConfigChannel+0x6d6>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a04      	ldr	r2, [pc, #16]	@ (8004708 <HAL_ADC_ConfigChannel+0x6e4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d10a      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x6ec>
 80046fa:	4b04      	ldr	r3, [pc, #16]	@ (800470c <HAL_ADC_ConfigChannel+0x6e8>)
 80046fc:	e009      	b.n	8004712 <HAL_ADC_ConfigChannel+0x6ee>
 80046fe:	bf00      	nop
 8004700:	407f0000 	.word	0x407f0000
 8004704:	80080000 	.word	0x80080000
 8004708:	50000100 	.word	0x50000100
 800470c:	50000300 	.word	0x50000300
 8004710:	4b59      	ldr	r3, [pc, #356]	@ (8004878 <HAL_ADC_ConfigChannel+0x854>)
 8004712:	4618      	mov	r0, r3
 8004714:	f7fe ff30 	bl	8003578 <LL_ADC_GetCommonPathInternalCh>
 8004718:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a56      	ldr	r2, [pc, #344]	@ (800487c <HAL_ADC_ConfigChannel+0x858>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d004      	beq.n	8004730 <HAL_ADC_ConfigChannel+0x70c>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a55      	ldr	r2, [pc, #340]	@ (8004880 <HAL_ADC_ConfigChannel+0x85c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d13a      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004730:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004734:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d134      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004744:	d005      	beq.n	8004752 <HAL_ADC_ConfigChannel+0x72e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a4e      	ldr	r2, [pc, #312]	@ (8004884 <HAL_ADC_ConfigChannel+0x860>)
 800474c:	4293      	cmp	r3, r2
 800474e:	f040 8085 	bne.w	800485c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800475a:	d004      	beq.n	8004766 <HAL_ADC_ConfigChannel+0x742>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a49      	ldr	r2, [pc, #292]	@ (8004888 <HAL_ADC_ConfigChannel+0x864>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d101      	bne.n	800476a <HAL_ADC_ConfigChannel+0x746>
 8004766:	4a49      	ldr	r2, [pc, #292]	@ (800488c <HAL_ADC_ConfigChannel+0x868>)
 8004768:	e000      	b.n	800476c <HAL_ADC_ConfigChannel+0x748>
 800476a:	4a43      	ldr	r2, [pc, #268]	@ (8004878 <HAL_ADC_ConfigChannel+0x854>)
 800476c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004770:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004774:	4619      	mov	r1, r3
 8004776:	4610      	mov	r0, r2
 8004778:	f7fe feeb 	bl	8003552 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800477c:	4b44      	ldr	r3, [pc, #272]	@ (8004890 <HAL_ADC_ConfigChannel+0x86c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	099b      	lsrs	r3, r3, #6
 8004782:	4a44      	ldr	r2, [pc, #272]	@ (8004894 <HAL_ADC_ConfigChannel+0x870>)
 8004784:	fba2 2303 	umull	r2, r3, r2, r3
 8004788:	099b      	lsrs	r3, r3, #6
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	4613      	mov	r3, r2
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004796:	e002      	b.n	800479e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	3b01      	subs	r3, #1
 800479c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1f9      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047a4:	e05a      	b.n	800485c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a3b      	ldr	r2, [pc, #236]	@ (8004898 <HAL_ADC_ConfigChannel+0x874>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d125      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80047b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d11f      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a31      	ldr	r2, [pc, #196]	@ (8004888 <HAL_ADC_ConfigChannel+0x864>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d104      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x7ac>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a34      	ldr	r2, [pc, #208]	@ (800489c <HAL_ADC_ConfigChannel+0x878>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d047      	beq.n	8004860 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047d8:	d004      	beq.n	80047e4 <HAL_ADC_ConfigChannel+0x7c0>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a2a      	ldr	r2, [pc, #168]	@ (8004888 <HAL_ADC_ConfigChannel+0x864>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d101      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x7c4>
 80047e4:	4a29      	ldr	r2, [pc, #164]	@ (800488c <HAL_ADC_ConfigChannel+0x868>)
 80047e6:	e000      	b.n	80047ea <HAL_ADC_ConfigChannel+0x7c6>
 80047e8:	4a23      	ldr	r2, [pc, #140]	@ (8004878 <HAL_ADC_ConfigChannel+0x854>)
 80047ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f7fe feac 	bl	8003552 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047fa:	e031      	b.n	8004860 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a27      	ldr	r2, [pc, #156]	@ (80048a0 <HAL_ADC_ConfigChannel+0x87c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d12d      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004806:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800480a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d127      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a1c      	ldr	r2, [pc, #112]	@ (8004888 <HAL_ADC_ConfigChannel+0x864>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d022      	beq.n	8004862 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004824:	d004      	beq.n	8004830 <HAL_ADC_ConfigChannel+0x80c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a17      	ldr	r2, [pc, #92]	@ (8004888 <HAL_ADC_ConfigChannel+0x864>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d101      	bne.n	8004834 <HAL_ADC_ConfigChannel+0x810>
 8004830:	4a16      	ldr	r2, [pc, #88]	@ (800488c <HAL_ADC_ConfigChannel+0x868>)
 8004832:	e000      	b.n	8004836 <HAL_ADC_ConfigChannel+0x812>
 8004834:	4a10      	ldr	r2, [pc, #64]	@ (8004878 <HAL_ADC_ConfigChannel+0x854>)
 8004836:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800483a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800483e:	4619      	mov	r1, r3
 8004840:	4610      	mov	r0, r2
 8004842:	f7fe fe86 	bl	8003552 <LL_ADC_SetCommonPathInternalCh>
 8004846:	e00c      	b.n	8004862 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800484c:	f043 0220 	orr.w	r2, r3, #32
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800485a:	e002      	b.n	8004862 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800485c:	bf00      	nop
 800485e:	e000      	b.n	8004862 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004860:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800486a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800486e:	4618      	mov	r0, r3
 8004870:	37d8      	adds	r7, #216	@ 0xd8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	50000700 	.word	0x50000700
 800487c:	c3210000 	.word	0xc3210000
 8004880:	90c00010 	.word	0x90c00010
 8004884:	50000600 	.word	0x50000600
 8004888:	50000100 	.word	0x50000100
 800488c:	50000300 	.word	0x50000300
 8004890:	2000000c 	.word	0x2000000c
 8004894:	053e2d63 	.word	0x053e2d63
 8004898:	c7520000 	.word	0xc7520000
 800489c:	50000500 	.word	0x50000500
 80048a0:	cb840000 	.word	0xcb840000

080048a4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff f868 	bl	8003990 <LL_ADC_REG_IsConversionOngoing>
 80048c0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff f889 	bl	80039de <LL_ADC_INJ_IsConversionOngoing>
 80048cc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d103      	bne.n	80048dc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 8098 	beq.w	8004a0c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d02a      	beq.n	8004940 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	7f5b      	ldrb	r3, [r3, #29]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d126      	bne.n	8004940 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	7f1b      	ldrb	r3, [r3, #28]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d122      	bne.n	8004940 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80048fa:	2301      	movs	r3, #1
 80048fc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80048fe:	e014      	b.n	800492a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	4a45      	ldr	r2, [pc, #276]	@ (8004a18 <ADC_ConversionStop+0x174>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d90d      	bls.n	8004924 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490c:	f043 0210 	orr.w	r2, r3, #16
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004918:	f043 0201 	orr.w	r2, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e074      	b.n	8004a0e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	3301      	adds	r3, #1
 8004928:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004934:	2b40      	cmp	r3, #64	@ 0x40
 8004936:	d1e3      	bne.n	8004900 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2240      	movs	r2, #64	@ 0x40
 800493e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d014      	beq.n	8004970 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff f820 	bl	8003990 <LL_ADC_REG_IsConversionOngoing>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00c      	beq.n	8004970 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f7fe ffdd 	bl	800391a <LL_ADC_IsDisableOngoing>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d104      	bne.n	8004970 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7fe fffc 	bl	8003968 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d014      	beq.n	80049a0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff f82f 	bl	80039de <LL_ADC_INJ_IsConversionOngoing>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00c      	beq.n	80049a0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f7fe ffc5 	bl	800391a <LL_ADC_IsDisableOngoing>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d104      	bne.n	80049a0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff f80b 	bl	80039b6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d005      	beq.n	80049b2 <ADC_ConversionStop+0x10e>
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d105      	bne.n	80049b8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80049ac:	230c      	movs	r3, #12
 80049ae:	617b      	str	r3, [r7, #20]
        break;
 80049b0:	e005      	b.n	80049be <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80049b2:	2308      	movs	r3, #8
 80049b4:	617b      	str	r3, [r7, #20]
        break;
 80049b6:	e002      	b.n	80049be <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80049b8:	2304      	movs	r3, #4
 80049ba:	617b      	str	r3, [r7, #20]
        break;
 80049bc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80049be:	f7fe fd87 	bl	80034d0 <HAL_GetTick>
 80049c2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80049c4:	e01b      	b.n	80049fe <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80049c6:	f7fe fd83 	bl	80034d0 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b05      	cmp	r3, #5
 80049d2:	d914      	bls.n	80049fe <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	4013      	ands	r3, r2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00d      	beq.n	80049fe <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e6:	f043 0210 	orr.w	r2, r3, #16
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049f2:	f043 0201 	orr.w	r2, r3, #1
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e007      	b.n	8004a0e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	4013      	ands	r3, r2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1dc      	bne.n	80049c6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3720      	adds	r7, #32
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	a33fffff 	.word	0xa33fffff

08004a1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fe ff61 	bl	80038f4 <LL_ADC_IsEnabled>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d176      	bne.n	8004b26 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	4b3c      	ldr	r3, [pc, #240]	@ (8004b30 <ADC_Enable+0x114>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00d      	beq.n	8004a62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4a:	f043 0210 	orr.w	r2, r3, #16
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a56:	f043 0201 	orr.w	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e062      	b.n	8004b28 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fe ff1c 	bl	80038a4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a74:	d004      	beq.n	8004a80 <ADC_Enable+0x64>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a2e      	ldr	r2, [pc, #184]	@ (8004b34 <ADC_Enable+0x118>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d101      	bne.n	8004a84 <ADC_Enable+0x68>
 8004a80:	4b2d      	ldr	r3, [pc, #180]	@ (8004b38 <ADC_Enable+0x11c>)
 8004a82:	e000      	b.n	8004a86 <ADC_Enable+0x6a>
 8004a84:	4b2d      	ldr	r3, [pc, #180]	@ (8004b3c <ADC_Enable+0x120>)
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fe fd76 	bl	8003578 <LL_ADC_GetCommonPathInternalCh>
 8004a8c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004a8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d013      	beq.n	8004abe <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a96:	4b2a      	ldr	r3, [pc, #168]	@ (8004b40 <ADC_Enable+0x124>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	099b      	lsrs	r3, r3, #6
 8004a9c:	4a29      	ldr	r2, [pc, #164]	@ (8004b44 <ADC_Enable+0x128>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	099b      	lsrs	r3, r3, #6
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ab0:	e002      	b.n	8004ab8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f9      	bne.n	8004ab2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004abe:	f7fe fd07 	bl	80034d0 <HAL_GetTick>
 8004ac2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ac4:	e028      	b.n	8004b18 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe ff12 	bl	80038f4 <LL_ADC_IsEnabled>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d104      	bne.n	8004ae0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fe fee2 	bl	80038a4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ae0:	f7fe fcf6 	bl	80034d0 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d914      	bls.n	8004b18 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d00d      	beq.n	8004b18 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b00:	f043 0210 	orr.w	r2, r3, #16
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b0c:	f043 0201 	orr.w	r2, r3, #1
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e007      	b.n	8004b28 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d1cf      	bne.n	8004ac6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	8000003f 	.word	0x8000003f
 8004b34:	50000100 	.word	0x50000100
 8004b38:	50000300 	.word	0x50000300
 8004b3c:	50000700 	.word	0x50000700
 8004b40:	2000000c 	.word	0x2000000c
 8004b44:	053e2d63 	.word	0x053e2d63

08004b48 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fe fee0 	bl	800391a <LL_ADC_IsDisableOngoing>
 8004b5a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fe fec7 	bl	80038f4 <LL_ADC_IsEnabled>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d047      	beq.n	8004bfc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d144      	bne.n	8004bfc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 030d 	and.w	r3, r3, #13
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d10c      	bne.n	8004b9a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fe fea1 	bl	80038cc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2203      	movs	r2, #3
 8004b90:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b92:	f7fe fc9d 	bl	80034d0 <HAL_GetTick>
 8004b96:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b98:	e029      	b.n	8004bee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b9e:	f043 0210 	orr.w	r2, r3, #16
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004baa:	f043 0201 	orr.w	r2, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e023      	b.n	8004bfe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004bb6:	f7fe fc8b 	bl	80034d0 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d914      	bls.n	8004bee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00d      	beq.n	8004bee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd6:	f043 0210 	orr.w	r2, r3, #16
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be2:	f043 0201 	orr.w	r2, r3, #1
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e007      	b.n	8004bfe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1dc      	bne.n	8004bb6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d14b      	bne.n	8004cb8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c24:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d021      	beq.n	8004c7e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe fd46 	bl	80036d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d032      	beq.n	8004cb0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d12b      	bne.n	8004cb0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d11f      	bne.n	8004cb0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c74:	f043 0201 	orr.w	r2, r3, #1
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c7c:	e018      	b.n	8004cb0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d111      	bne.n	8004cb0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d105      	bne.n	8004cb0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca8:	f043 0201 	orr.w	r2, r3, #1
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f7ff f998 	bl	8003fe6 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004cb6:	e00e      	b.n	8004cd6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cbc:	f003 0310 	and.w	r3, r3, #16
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f7ff f9a2 	bl	800400e <HAL_ADC_ErrorCallback>
}
 8004cca:	e004      	b.n	8004cd6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	4798      	blx	r3
}
 8004cd6:	bf00      	nop
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b084      	sub	sp, #16
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f7ff f984 	bl	8003ffa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cf2:	bf00      	nop
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d18:	f043 0204 	orr.w	r2, r3, #4
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f7ff f974 	bl	800400e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d26:	bf00      	nop
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <LL_ADC_IsEnabled>:
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <LL_ADC_IsEnabled+0x18>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <LL_ADC_IsEnabled+0x1a>
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <LL_ADC_REG_IsConversionOngoing>:
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d101      	bne.n	8004d6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e000      	b.n	8004d6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
	...

08004d7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004d7c:	b590      	push	{r4, r7, lr}
 8004d7e:	b0a1      	sub	sp, #132	@ 0x84
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d101      	bne.n	8004d9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004d96:	2302      	movs	r3, #2
 8004d98:	e0e7      	b.n	8004f6a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004da2:	2300      	movs	r3, #0
 8004da4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004da6:	2300      	movs	r3, #0
 8004da8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004db2:	d102      	bne.n	8004dba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004db4:	4b6f      	ldr	r3, [pc, #444]	@ (8004f74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004db6:	60bb      	str	r3, [r7, #8]
 8004db8:	e009      	b.n	8004dce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a6e      	ldr	r2, [pc, #440]	@ (8004f78 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d102      	bne.n	8004dca <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004dc4:	4b6d      	ldr	r3, [pc, #436]	@ (8004f7c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004dc6:	60bb      	str	r3, [r7, #8]
 8004dc8:	e001      	b.n	8004dce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10b      	bne.n	8004dec <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd8:	f043 0220 	orr.w	r2, r3, #32
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e0be      	b.n	8004f6a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff ffb0 	bl	8004d54 <LL_ADC_REG_IsConversionOngoing>
 8004df4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff ffaa 	bl	8004d54 <LL_ADC_REG_IsConversionOngoing>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f040 80a0 	bne.w	8004f48 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004e08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f040 809c 	bne.w	8004f48 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e18:	d004      	beq.n	8004e24 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a55      	ldr	r2, [pc, #340]	@ (8004f74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d101      	bne.n	8004e28 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004e24:	4b56      	ldr	r3, [pc, #344]	@ (8004f80 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004e26:	e000      	b.n	8004e2a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004e28:	4b56      	ldr	r3, [pc, #344]	@ (8004f84 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004e2a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d04b      	beq.n	8004ecc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004e34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	6859      	ldr	r1, [r3, #4]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004e46:	035b      	lsls	r3, r3, #13
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e4e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e58:	d004      	beq.n	8004e64 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a45      	ldr	r2, [pc, #276]	@ (8004f74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d10f      	bne.n	8004e84 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004e64:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004e68:	f7ff ff61 	bl	8004d2e <LL_ADC_IsEnabled>
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	4841      	ldr	r0, [pc, #260]	@ (8004f74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004e70:	f7ff ff5d 	bl	8004d2e <LL_ADC_IsEnabled>
 8004e74:	4603      	mov	r3, r0
 8004e76:	4323      	orrs	r3, r4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	bf0c      	ite	eq
 8004e7c:	2301      	moveq	r3, #1
 8004e7e:	2300      	movne	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	e012      	b.n	8004eaa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004e84:	483c      	ldr	r0, [pc, #240]	@ (8004f78 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004e86:	f7ff ff52 	bl	8004d2e <LL_ADC_IsEnabled>
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	483b      	ldr	r0, [pc, #236]	@ (8004f7c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004e8e:	f7ff ff4e 	bl	8004d2e <LL_ADC_IsEnabled>
 8004e92:	4603      	mov	r3, r0
 8004e94:	431c      	orrs	r4, r3
 8004e96:	483c      	ldr	r0, [pc, #240]	@ (8004f88 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004e98:	f7ff ff49 	bl	8004d2e <LL_ADC_IsEnabled>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	4323      	orrs	r3, r4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	bf0c      	ite	eq
 8004ea4:	2301      	moveq	r3, #1
 8004ea6:	2300      	movne	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d056      	beq.n	8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004eae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004eb6:	f023 030f 	bic.w	r3, r3, #15
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	6811      	ldr	r1, [r2, #0]
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	6892      	ldr	r2, [r2, #8]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ec8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004eca:	e047      	b.n	8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004ecc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ed4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ed6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ee0:	d004      	beq.n	8004eec <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a23      	ldr	r2, [pc, #140]	@ (8004f74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d10f      	bne.n	8004f0c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004eec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004ef0:	f7ff ff1d 	bl	8004d2e <LL_ADC_IsEnabled>
 8004ef4:	4604      	mov	r4, r0
 8004ef6:	481f      	ldr	r0, [pc, #124]	@ (8004f74 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ef8:	f7ff ff19 	bl	8004d2e <LL_ADC_IsEnabled>
 8004efc:	4603      	mov	r3, r0
 8004efe:	4323      	orrs	r3, r4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	bf0c      	ite	eq
 8004f04:	2301      	moveq	r3, #1
 8004f06:	2300      	movne	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	e012      	b.n	8004f32 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004f0c:	481a      	ldr	r0, [pc, #104]	@ (8004f78 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004f0e:	f7ff ff0e 	bl	8004d2e <LL_ADC_IsEnabled>
 8004f12:	4604      	mov	r4, r0
 8004f14:	4819      	ldr	r0, [pc, #100]	@ (8004f7c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004f16:	f7ff ff0a 	bl	8004d2e <LL_ADC_IsEnabled>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	431c      	orrs	r4, r3
 8004f1e:	481a      	ldr	r0, [pc, #104]	@ (8004f88 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004f20:	f7ff ff05 	bl	8004d2e <LL_ADC_IsEnabled>
 8004f24:	4603      	mov	r3, r0
 8004f26:	4323      	orrs	r3, r4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	bf0c      	ite	eq
 8004f2c:	2301      	moveq	r3, #1
 8004f2e:	2300      	movne	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d012      	beq.n	8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004f3e:	f023 030f 	bic.w	r3, r3, #15
 8004f42:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004f44:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f46:	e009      	b.n	8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f4c:	f043 0220 	orr.w	r2, r3, #32
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004f5a:	e000      	b.n	8004f5e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f66:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3784      	adds	r7, #132	@ 0x84
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd90      	pop	{r4, r7, pc}
 8004f72:	bf00      	nop
 8004f74:	50000100 	.word	0x50000100
 8004f78:	50000400 	.word	0x50000400
 8004f7c:	50000500 	.word	0x50000500
 8004f80:	50000300 	.word	0x50000300
 8004f84:	50000700 	.word	0x50000700
 8004f88:	50000600 	.word	0x50000600

08004f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004fa8:	4013      	ands	r3, r2
 8004faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fbe:	4a04      	ldr	r2, [pc, #16]	@ (8004fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	60d3      	str	r3, [r2, #12]
}
 8004fc4:	bf00      	nop
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	e000ed00 	.word	0xe000ed00

08004fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fd8:	4b04      	ldr	r3, [pc, #16]	@ (8004fec <__NVIC_GetPriorityGrouping+0x18>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	0a1b      	lsrs	r3, r3, #8
 8004fde:	f003 0307 	and.w	r3, r3, #7
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	e000ed00 	.word	0xe000ed00

08004ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	db0b      	blt.n	800501a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005002:	79fb      	ldrb	r3, [r7, #7]
 8005004:	f003 021f 	and.w	r2, r3, #31
 8005008:	4907      	ldr	r1, [pc, #28]	@ (8005028 <__NVIC_EnableIRQ+0x38>)
 800500a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800500e:	095b      	lsrs	r3, r3, #5
 8005010:	2001      	movs	r0, #1
 8005012:	fa00 f202 	lsl.w	r2, r0, r2
 8005016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	e000e100 	.word	0xe000e100

0800502c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	4603      	mov	r3, r0
 8005034:	6039      	str	r1, [r7, #0]
 8005036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800503c:	2b00      	cmp	r3, #0
 800503e:	db0a      	blt.n	8005056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	b2da      	uxtb	r2, r3
 8005044:	490c      	ldr	r1, [pc, #48]	@ (8005078 <__NVIC_SetPriority+0x4c>)
 8005046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800504a:	0112      	lsls	r2, r2, #4
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	440b      	add	r3, r1
 8005050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005054:	e00a      	b.n	800506c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	b2da      	uxtb	r2, r3
 800505a:	4908      	ldr	r1, [pc, #32]	@ (800507c <__NVIC_SetPriority+0x50>)
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	3b04      	subs	r3, #4
 8005064:	0112      	lsls	r2, r2, #4
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	440b      	add	r3, r1
 800506a:	761a      	strb	r2, [r3, #24]
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	e000e100 	.word	0xe000e100
 800507c:	e000ed00 	.word	0xe000ed00

08005080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005080:	b480      	push	{r7}
 8005082:	b089      	sub	sp, #36	@ 0x24
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f1c3 0307 	rsb	r3, r3, #7
 800509a:	2b04      	cmp	r3, #4
 800509c:	bf28      	it	cs
 800509e:	2304      	movcs	r3, #4
 80050a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	3304      	adds	r3, #4
 80050a6:	2b06      	cmp	r3, #6
 80050a8:	d902      	bls.n	80050b0 <NVIC_EncodePriority+0x30>
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	3b03      	subs	r3, #3
 80050ae:	e000      	b.n	80050b2 <NVIC_EncodePriority+0x32>
 80050b0:	2300      	movs	r3, #0
 80050b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050b4:	f04f 32ff 	mov.w	r2, #4294967295
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	43da      	mvns	r2, r3
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	401a      	ands	r2, r3
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050c8:	f04f 31ff 	mov.w	r1, #4294967295
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	fa01 f303 	lsl.w	r3, r1, r3
 80050d2:	43d9      	mvns	r1, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050d8:	4313      	orrs	r3, r2
         );
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3724      	adds	r7, #36	@ 0x24
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
	...

080050e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050f8:	d301      	bcc.n	80050fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050fa:	2301      	movs	r3, #1
 80050fc:	e00f      	b.n	800511e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005128 <SysTick_Config+0x40>)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3b01      	subs	r3, #1
 8005104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005106:	210f      	movs	r1, #15
 8005108:	f04f 30ff 	mov.w	r0, #4294967295
 800510c:	f7ff ff8e 	bl	800502c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005110:	4b05      	ldr	r3, [pc, #20]	@ (8005128 <SysTick_Config+0x40>)
 8005112:	2200      	movs	r2, #0
 8005114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005116:	4b04      	ldr	r3, [pc, #16]	@ (8005128 <SysTick_Config+0x40>)
 8005118:	2207      	movs	r2, #7
 800511a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	e000e010 	.word	0xe000e010

0800512c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7ff ff29 	bl	8004f8c <__NVIC_SetPriorityGrouping>
}
 800513a:	bf00      	nop
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b086      	sub	sp, #24
 8005146:	af00      	add	r7, sp, #0
 8005148:	4603      	mov	r3, r0
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	607a      	str	r2, [r7, #4]
 800514e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005150:	f7ff ff40 	bl	8004fd4 <__NVIC_GetPriorityGrouping>
 8005154:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	68b9      	ldr	r1, [r7, #8]
 800515a:	6978      	ldr	r0, [r7, #20]
 800515c:	f7ff ff90 	bl	8005080 <NVIC_EncodePriority>
 8005160:	4602      	mov	r2, r0
 8005162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005166:	4611      	mov	r1, r2
 8005168:	4618      	mov	r0, r3
 800516a:	f7ff ff5f 	bl	800502c <__NVIC_SetPriority>
}
 800516e:	bf00      	nop
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b082      	sub	sp, #8
 800517a:	af00      	add	r7, sp, #0
 800517c:	4603      	mov	r3, r0
 800517e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff ff33 	bl	8004ff0 <__NVIC_EnableIRQ>
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b082      	sub	sp, #8
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7ff ffa4 	bl	80050e8 <SysTick_Config>
 80051a0:	4603      	mov	r3, r0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e08d      	b.n	80052da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	461a      	mov	r2, r3
 80051c4:	4b47      	ldr	r3, [pc, #284]	@ (80052e4 <HAL_DMA_Init+0x138>)
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d80f      	bhi.n	80051ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	461a      	mov	r2, r3
 80051d0:	4b45      	ldr	r3, [pc, #276]	@ (80052e8 <HAL_DMA_Init+0x13c>)
 80051d2:	4413      	add	r3, r2
 80051d4:	4a45      	ldr	r2, [pc, #276]	@ (80052ec <HAL_DMA_Init+0x140>)
 80051d6:	fba2 2303 	umull	r2, r3, r2, r3
 80051da:	091b      	lsrs	r3, r3, #4
 80051dc:	009a      	lsls	r2, r3, #2
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a42      	ldr	r2, [pc, #264]	@ (80052f0 <HAL_DMA_Init+0x144>)
 80051e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80051e8:	e00e      	b.n	8005208 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	4b40      	ldr	r3, [pc, #256]	@ (80052f4 <HAL_DMA_Init+0x148>)
 80051f2:	4413      	add	r3, r2
 80051f4:	4a3d      	ldr	r2, [pc, #244]	@ (80052ec <HAL_DMA_Init+0x140>)
 80051f6:	fba2 2303 	umull	r2, r3, r2, r3
 80051fa:	091b      	lsrs	r3, r3, #4
 80051fc:	009a      	lsls	r2, r3, #2
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a3c      	ldr	r2, [pc, #240]	@ (80052f8 <HAL_DMA_Init+0x14c>)
 8005206:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800521e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005222:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800522c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005238:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005244:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fa76 	bl	800574c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005268:	d102      	bne.n	8005270 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005284:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d010      	beq.n	80052b0 <HAL_DMA_Init+0x104>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2b04      	cmp	r3, #4
 8005294:	d80c      	bhi.n	80052b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fa96 	bl	80057c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80052ac:	605a      	str	r2, [r3, #4]
 80052ae:	e008      	b.n	80052c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40020407 	.word	0x40020407
 80052e8:	bffdfff8 	.word	0xbffdfff8
 80052ec:	cccccccd 	.word	0xcccccccd
 80052f0:	40020000 	.word	0x40020000
 80052f4:	bffdfbf8 	.word	0xbffdfbf8
 80052f8:	40020400 	.word	0x40020400

080052fc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_DMA_Start_IT+0x20>
 8005318:	2302      	movs	r3, #2
 800531a:	e066      	b.n	80053ea <HAL_DMA_Start_IT+0xee>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b01      	cmp	r3, #1
 800532e:	d155      	bne.n	80053dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0201 	bic.w	r2, r2, #1
 800534c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	68b9      	ldr	r1, [r7, #8]
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f9bb 	bl	80056d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535e:	2b00      	cmp	r3, #0
 8005360:	d008      	beq.n	8005374 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 020e 	orr.w	r2, r2, #14
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	e00f      	b.n	8005394 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0204 	bic.w	r2, r2, #4
 8005382:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 020a 	orr.w	r2, r2, #10
 8005392:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d007      	beq.n	80053b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d007      	beq.n	80053ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0201 	orr.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	e005      	b.n	80053e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80053e4:	2302      	movs	r3, #2
 80053e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80053e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b085      	sub	sp, #20
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d005      	beq.n	8005416 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2204      	movs	r2, #4
 800540e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	73fb      	strb	r3, [r7, #15]
 8005414:	e037      	b.n	8005486 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 020e 	bic.w	r2, r2, #14
 8005424:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005430:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005434:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0201 	bic.w	r2, r2, #1
 8005444:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544a:	f003 021f 	and.w	r2, r3, #31
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005452:	2101      	movs	r1, #1
 8005454:	fa01 f202 	lsl.w	r2, r1, r2
 8005458:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005462:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00c      	beq.n	8005486 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005476:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800547a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005484:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005496:	7bfb      	ldrb	r3, [r7, #15]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d00d      	beq.n	80054d8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2204      	movs	r2, #4
 80054c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	73fb      	strb	r3, [r7, #15]
 80054d6:	e047      	b.n	8005568 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 020e 	bic.w	r2, r2, #14
 80054e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0201 	bic.w	r2, r2, #1
 80054f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005502:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005506:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800550c:	f003 021f 	and.w	r2, r3, #31
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005514:	2101      	movs	r1, #1
 8005516:	fa01 f202 	lsl.w	r2, r1, r2
 800551a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005524:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00c      	beq.n	8005548 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005538:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800553c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005546:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	4798      	blx	r3
    }
  }
  return status;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558e:	f003 031f 	and.w	r3, r3, #31
 8005592:	2204      	movs	r2, #4
 8005594:	409a      	lsls	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4013      	ands	r3, r2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d026      	beq.n	80055ec <HAL_DMA_IRQHandler+0x7a>
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d021      	beq.n	80055ec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d107      	bne.n	80055c6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0204 	bic.w	r2, r2, #4
 80055c4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ca:	f003 021f 	and.w	r2, r3, #31
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d2:	2104      	movs	r1, #4
 80055d4:	fa01 f202 	lsl.w	r2, r1, r2
 80055d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d071      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80055ea:	e06c      	b.n	80056c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f0:	f003 031f 	and.w	r3, r3, #31
 80055f4:	2202      	movs	r2, #2
 80055f6:	409a      	lsls	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d02e      	beq.n	800565e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d029      	beq.n	800565e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0320 	and.w	r3, r3, #32
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10b      	bne.n	8005630 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 020a 	bic.w	r2, r2, #10
 8005626:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005634:	f003 021f 	and.w	r2, r3, #31
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563c:	2102      	movs	r1, #2
 800563e:	fa01 f202 	lsl.w	r2, r1, r2
 8005642:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005650:	2b00      	cmp	r3, #0
 8005652:	d038      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800565c:	e033      	b.n	80056c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005662:	f003 031f 	and.w	r3, r3, #31
 8005666:	2208      	movs	r2, #8
 8005668:	409a      	lsls	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4013      	ands	r3, r2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d02a      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f003 0308 	and.w	r3, r3, #8
 8005678:	2b00      	cmp	r3, #0
 800567a:	d025      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 020e 	bic.w	r2, r2, #14
 800568a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005690:	f003 021f 	and.w	r2, r3, #31
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005698:	2101      	movs	r1, #1
 800569a:	fa01 f202 	lsl.w	r2, r1, r2
 800569e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d004      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80056c6:	bf00      	nop
 80056c8:	bf00      	nop
}
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80056e6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d004      	beq.n	80056fa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80056f8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fe:	f003 021f 	and.w	r2, r3, #31
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005706:	2101      	movs	r1, #1
 8005708:	fa01 f202 	lsl.w	r2, r1, r2
 800570c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	2b10      	cmp	r3, #16
 800571c:	d108      	bne.n	8005730 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800572e:	e007      	b.n	8005740 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	60da      	str	r2, [r3, #12]
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	4b16      	ldr	r3, [pc, #88]	@ (80057b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800575c:	429a      	cmp	r2, r3
 800575e:	d802      	bhi.n	8005766 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005760:	4b15      	ldr	r3, [pc, #84]	@ (80057b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	e001      	b.n	800576a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005766:	4b15      	ldr	r3, [pc, #84]	@ (80057bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005768:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	b2db      	uxtb	r3, r3
 8005774:	3b08      	subs	r3, #8
 8005776:	4a12      	ldr	r2, [pc, #72]	@ (80057c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005778:	fba2 2303 	umull	r2, r3, r2, r3
 800577c:	091b      	lsrs	r3, r3, #4
 800577e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005784:	089b      	lsrs	r3, r3, #2
 8005786:	009a      	lsls	r2, r3, #2
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	4413      	add	r3, r2
 800578c:	461a      	mov	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a0b      	ldr	r2, [pc, #44]	@ (80057c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005796:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f003 031f 	and.w	r3, r3, #31
 800579e:	2201      	movs	r2, #1
 80057a0:	409a      	lsls	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80057a6:	bf00      	nop
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	40020407 	.word	0x40020407
 80057b8:	40020800 	.word	0x40020800
 80057bc:	40020820 	.word	0x40020820
 80057c0:	cccccccd 	.word	0xcccccccd
 80057c4:	40020880 	.word	0x40020880

080057c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	4b0b      	ldr	r3, [pc, #44]	@ (8005808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80057dc:	4413      	add	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	461a      	mov	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a08      	ldr	r2, [pc, #32]	@ (800580c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80057ea:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	f003 031f 	and.w	r3, r3, #31
 80057f4:	2201      	movs	r2, #1
 80057f6:	409a      	lsls	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80057fc:	bf00      	nop
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	1000823f 	.word	0x1000823f
 800580c:	40020940 	.word	0x40020940

08005810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800581e:	e15a      	b.n	8005ad6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	2101      	movs	r1, #1
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	fa01 f303 	lsl.w	r3, r1, r3
 800582c:	4013      	ands	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 814c 	beq.w	8005ad0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f003 0303 	and.w	r3, r3, #3
 8005840:	2b01      	cmp	r3, #1
 8005842:	d005      	beq.n	8005850 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800584c:	2b02      	cmp	r3, #2
 800584e:	d130      	bne.n	80058b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	2203      	movs	r2, #3
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	43db      	mvns	r3, r3
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4013      	ands	r3, r2
 8005866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	fa02 f303 	lsl.w	r3, r2, r3
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005886:	2201      	movs	r2, #1
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	43db      	mvns	r3, r3
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	4013      	ands	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	091b      	lsrs	r3, r3, #4
 800589c:	f003 0201 	and.w	r2, r3, #1
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d017      	beq.n	80058ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	2203      	movs	r2, #3
 80058ca:	fa02 f303 	lsl.w	r3, r2, r3
 80058ce:	43db      	mvns	r3, r3
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4013      	ands	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	fa02 f303 	lsl.w	r3, r2, r3
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d123      	bne.n	8005942 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	08da      	lsrs	r2, r3, #3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3208      	adds	r2, #8
 8005902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005906:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	220f      	movs	r2, #15
 8005912:	fa02 f303 	lsl.w	r3, r2, r3
 8005916:	43db      	mvns	r3, r3
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4013      	ands	r3, r2
 800591c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	fa02 f303 	lsl.w	r3, r2, r3
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	4313      	orrs	r3, r2
 8005932:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	08da      	lsrs	r2, r3, #3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3208      	adds	r2, #8
 800593c:	6939      	ldr	r1, [r7, #16]
 800593e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	2203      	movs	r2, #3
 800594e:	fa02 f303 	lsl.w	r3, r2, r3
 8005952:	43db      	mvns	r3, r3
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4013      	ands	r3, r2
 8005958:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f003 0203 	and.w	r2, r3, #3
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	fa02 f303 	lsl.w	r3, r2, r3
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 80a6 	beq.w	8005ad0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005984:	4b5b      	ldr	r3, [pc, #364]	@ (8005af4 <HAL_GPIO_Init+0x2e4>)
 8005986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005988:	4a5a      	ldr	r2, [pc, #360]	@ (8005af4 <HAL_GPIO_Init+0x2e4>)
 800598a:	f043 0301 	orr.w	r3, r3, #1
 800598e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005990:	4b58      	ldr	r3, [pc, #352]	@ (8005af4 <HAL_GPIO_Init+0x2e4>)
 8005992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	60bb      	str	r3, [r7, #8]
 800599a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800599c:	4a56      	ldr	r2, [pc, #344]	@ (8005af8 <HAL_GPIO_Init+0x2e8>)
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	089b      	lsrs	r3, r3, #2
 80059a2:	3302      	adds	r3, #2
 80059a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f003 0303 	and.w	r3, r3, #3
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	220f      	movs	r2, #15
 80059b4:	fa02 f303 	lsl.w	r3, r2, r3
 80059b8:	43db      	mvns	r3, r3
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4013      	ands	r3, r2
 80059be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80059c6:	d01f      	beq.n	8005a08 <HAL_GPIO_Init+0x1f8>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a4c      	ldr	r2, [pc, #304]	@ (8005afc <HAL_GPIO_Init+0x2ec>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d019      	beq.n	8005a04 <HAL_GPIO_Init+0x1f4>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a4b      	ldr	r2, [pc, #300]	@ (8005b00 <HAL_GPIO_Init+0x2f0>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d013      	beq.n	8005a00 <HAL_GPIO_Init+0x1f0>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a4a      	ldr	r2, [pc, #296]	@ (8005b04 <HAL_GPIO_Init+0x2f4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00d      	beq.n	80059fc <HAL_GPIO_Init+0x1ec>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a49      	ldr	r2, [pc, #292]	@ (8005b08 <HAL_GPIO_Init+0x2f8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d007      	beq.n	80059f8 <HAL_GPIO_Init+0x1e8>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a48      	ldr	r2, [pc, #288]	@ (8005b0c <HAL_GPIO_Init+0x2fc>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d101      	bne.n	80059f4 <HAL_GPIO_Init+0x1e4>
 80059f0:	2305      	movs	r3, #5
 80059f2:	e00a      	b.n	8005a0a <HAL_GPIO_Init+0x1fa>
 80059f4:	2306      	movs	r3, #6
 80059f6:	e008      	b.n	8005a0a <HAL_GPIO_Init+0x1fa>
 80059f8:	2304      	movs	r3, #4
 80059fa:	e006      	b.n	8005a0a <HAL_GPIO_Init+0x1fa>
 80059fc:	2303      	movs	r3, #3
 80059fe:	e004      	b.n	8005a0a <HAL_GPIO_Init+0x1fa>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e002      	b.n	8005a0a <HAL_GPIO_Init+0x1fa>
 8005a04:	2301      	movs	r3, #1
 8005a06:	e000      	b.n	8005a0a <HAL_GPIO_Init+0x1fa>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	f002 0203 	and.w	r2, r2, #3
 8005a10:	0092      	lsls	r2, r2, #2
 8005a12:	4093      	lsls	r3, r2
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a1a:	4937      	ldr	r1, [pc, #220]	@ (8005af8 <HAL_GPIO_Init+0x2e8>)
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	089b      	lsrs	r3, r3, #2
 8005a20:	3302      	adds	r3, #2
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a28:	4b39      	ldr	r3, [pc, #228]	@ (8005b10 <HAL_GPIO_Init+0x300>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	43db      	mvns	r3, r3
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4013      	ands	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005a4c:	4a30      	ldr	r2, [pc, #192]	@ (8005b10 <HAL_GPIO_Init+0x300>)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005a52:	4b2f      	ldr	r3, [pc, #188]	@ (8005b10 <HAL_GPIO_Init+0x300>)
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	43db      	mvns	r3, r3
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005a76:	4a26      	ldr	r2, [pc, #152]	@ (8005b10 <HAL_GPIO_Init+0x300>)
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005a7c:	4b24      	ldr	r3, [pc, #144]	@ (8005b10 <HAL_GPIO_Init+0x300>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	43db      	mvns	r3, r3
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	4013      	ands	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8005b10 <HAL_GPIO_Init+0x300>)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8005b10 <HAL_GPIO_Init+0x300>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005aca:	4a11      	ldr	r2, [pc, #68]	@ (8005b10 <HAL_GPIO_Init+0x300>)
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f47f ae9d 	bne.w	8005820 <HAL_GPIO_Init+0x10>
  }
}
 8005ae6:	bf00      	nop
 8005ae8:	bf00      	nop
 8005aea:	371c      	adds	r7, #28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	40021000 	.word	0x40021000
 8005af8:	40010000 	.word	0x40010000
 8005afc:	48000400 	.word	0x48000400
 8005b00:	48000800 	.word	0x48000800
 8005b04:	48000c00 	.word	0x48000c00
 8005b08:	48001000 	.word	0x48001000
 8005b0c:	48001400 	.word	0x48001400
 8005b10:	40010400 	.word	0x40010400

08005b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	807b      	strh	r3, [r7, #2]
 8005b20:	4613      	mov	r3, r2
 8005b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b24:	787b      	ldrb	r3, [r7, #1]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b2a:	887a      	ldrh	r2, [r7, #2]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b30:	e002      	b.n	8005b38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b32:	887a      	ldrh	r2, [r7, #2]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b56:	887a      	ldrh	r2, [r7, #2]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	041a      	lsls	r2, r3, #16
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	43d9      	mvns	r1, r3
 8005b62:	887b      	ldrh	r3, [r7, #2]
 8005b64:	400b      	ands	r3, r1
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	619a      	str	r2, [r3, #24]
}
 8005b6c:	bf00      	nop
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005b82:	4b08      	ldr	r3, [pc, #32]	@ (8005ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b84:	695a      	ldr	r2, [r3, #20]
 8005b86:	88fb      	ldrh	r3, [r7, #6]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d006      	beq.n	8005b9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b8e:	4a05      	ldr	r2, [pc, #20]	@ (8005ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b90:	88fb      	ldrh	r3, [r7, #6]
 8005b92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b94:	88fb      	ldrh	r3, [r7, #6]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fb fe4e 	bl	8001838 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b9c:	bf00      	nop
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	40010400 	.word	0x40010400

08005ba8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d141      	bne.n	8005c3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bb6:	4b4b      	ldr	r3, [pc, #300]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bc2:	d131      	bne.n	8005c28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005bc4:	4b47      	ldr	r3, [pc, #284]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bca:	4a46      	ldr	r2, [pc, #280]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bd4:	4b43      	ldr	r3, [pc, #268]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005bdc:	4a41      	ldr	r2, [pc, #260]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005be2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005be4:	4b40      	ldr	r3, [pc, #256]	@ (8005ce8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2232      	movs	r2, #50	@ 0x32
 8005bea:	fb02 f303 	mul.w	r3, r2, r3
 8005bee:	4a3f      	ldr	r2, [pc, #252]	@ (8005cec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf4:	0c9b      	lsrs	r3, r3, #18
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bfa:	e002      	b.n	8005c02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c02:	4b38      	ldr	r3, [pc, #224]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c0e:	d102      	bne.n	8005c16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1f2      	bne.n	8005bfc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c16:	4b33      	ldr	r3, [pc, #204]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c22:	d158      	bne.n	8005cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e057      	b.n	8005cd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c28:	4b2e      	ldr	r3, [pc, #184]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c2e:	4a2d      	ldr	r2, [pc, #180]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005c38:	e04d      	b.n	8005cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c40:	d141      	bne.n	8005cc6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c42:	4b28      	ldr	r3, [pc, #160]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c4e:	d131      	bne.n	8005cb4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c50:	4b24      	ldr	r3, [pc, #144]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c56:	4a23      	ldr	r2, [pc, #140]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c60:	4b20      	ldr	r3, [pc, #128]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c68:	4a1e      	ldr	r2, [pc, #120]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c70:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2232      	movs	r2, #50	@ 0x32
 8005c76:	fb02 f303 	mul.w	r3, r2, r3
 8005c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8005cec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c80:	0c9b      	lsrs	r3, r3, #18
 8005c82:	3301      	adds	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c86:	e002      	b.n	8005c8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c8e:	4b15      	ldr	r3, [pc, #84]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c9a:	d102      	bne.n	8005ca2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f2      	bne.n	8005c88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ca2:	4b10      	ldr	r3, [pc, #64]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005caa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cae:	d112      	bne.n	8005cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e011      	b.n	8005cd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cba:	4a0a      	ldr	r2, [pc, #40]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005cc4:	e007      	b.n	8005cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005cc6:	4b07      	ldr	r3, [pc, #28]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005cce:	4a05      	ldr	r2, [pc, #20]	@ (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005cd4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	40007000 	.word	0x40007000
 8005ce8:	2000000c 	.word	0x2000000c
 8005cec:	431bde83 	.word	0x431bde83

08005cf0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005cf4:	4b05      	ldr	r3, [pc, #20]	@ (8005d0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	4a04      	ldr	r2, [pc, #16]	@ (8005d0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005cfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cfe:	6093      	str	r3, [r2, #8]
}
 8005d00:	bf00      	nop
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	40007000 	.word	0x40007000

08005d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e2fe      	b.n	8006320 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d075      	beq.n	8005e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d2e:	4b97      	ldr	r3, [pc, #604]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 030c 	and.w	r3, r3, #12
 8005d36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d38:	4b94      	ldr	r3, [pc, #592]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f003 0303 	and.w	r3, r3, #3
 8005d40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	2b0c      	cmp	r3, #12
 8005d46:	d102      	bne.n	8005d4e <HAL_RCC_OscConfig+0x3e>
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d002      	beq.n	8005d54 <HAL_RCC_OscConfig+0x44>
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d10b      	bne.n	8005d6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d54:	4b8d      	ldr	r3, [pc, #564]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d05b      	beq.n	8005e18 <HAL_RCC_OscConfig+0x108>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d157      	bne.n	8005e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e2d9      	b.n	8006320 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d74:	d106      	bne.n	8005d84 <HAL_RCC_OscConfig+0x74>
 8005d76:	4b85      	ldr	r3, [pc, #532]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a84      	ldr	r2, [pc, #528]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	e01d      	b.n	8005dc0 <HAL_RCC_OscConfig+0xb0>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d8c:	d10c      	bne.n	8005da8 <HAL_RCC_OscConfig+0x98>
 8005d8e:	4b7f      	ldr	r3, [pc, #508]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a7e      	ldr	r2, [pc, #504]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005d94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	4b7c      	ldr	r3, [pc, #496]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a7b      	ldr	r2, [pc, #492]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	e00b      	b.n	8005dc0 <HAL_RCC_OscConfig+0xb0>
 8005da8:	4b78      	ldr	r3, [pc, #480]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a77      	ldr	r2, [pc, #476]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005dae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	4b75      	ldr	r3, [pc, #468]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a74      	ldr	r2, [pc, #464]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005dba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d013      	beq.n	8005df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc8:	f7fd fb82 	bl	80034d0 <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dd0:	f7fd fb7e 	bl	80034d0 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b64      	cmp	r3, #100	@ 0x64
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e29e      	b.n	8006320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005de2:	4b6a      	ldr	r3, [pc, #424]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0f0      	beq.n	8005dd0 <HAL_RCC_OscConfig+0xc0>
 8005dee:	e014      	b.n	8005e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df0:	f7fd fb6e 	bl	80034d0 <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005df8:	f7fd fb6a 	bl	80034d0 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b64      	cmp	r3, #100	@ 0x64
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e28a      	b.n	8006320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e0a:	4b60      	ldr	r3, [pc, #384]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f0      	bne.n	8005df8 <HAL_RCC_OscConfig+0xe8>
 8005e16:	e000      	b.n	8005e1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d075      	beq.n	8005f12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e26:	4b59      	ldr	r3, [pc, #356]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f003 030c 	and.w	r3, r3, #12
 8005e2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e30:	4b56      	ldr	r3, [pc, #344]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f003 0303 	and.w	r3, r3, #3
 8005e38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	2b0c      	cmp	r3, #12
 8005e3e:	d102      	bne.n	8005e46 <HAL_RCC_OscConfig+0x136>
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d002      	beq.n	8005e4c <HAL_RCC_OscConfig+0x13c>
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d11f      	bne.n	8005e8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e4c:	4b4f      	ldr	r3, [pc, #316]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <HAL_RCC_OscConfig+0x154>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e25d      	b.n	8006320 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e64:	4b49      	ldr	r3, [pc, #292]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	061b      	lsls	r3, r3, #24
 8005e72:	4946      	ldr	r1, [pc, #280]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005e78:	4b45      	ldr	r3, [pc, #276]	@ (8005f90 <HAL_RCC_OscConfig+0x280>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fd fadb 	bl	8003438 <HAL_InitTick>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d043      	beq.n	8005f10 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e249      	b.n	8006320 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d023      	beq.n	8005edc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e94:	4b3d      	ldr	r3, [pc, #244]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a3c      	ldr	r2, [pc, #240]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea0:	f7fd fb16 	bl	80034d0 <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ea8:	f7fd fb12 	bl	80034d0 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e232      	b.n	8006320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005eba:	4b34      	ldr	r3, [pc, #208]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0f0      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ec6:	4b31      	ldr	r3, [pc, #196]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	061b      	lsls	r3, r3, #24
 8005ed4:	492d      	ldr	r1, [pc, #180]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	604b      	str	r3, [r1, #4]
 8005eda:	e01a      	b.n	8005f12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005edc:	4b2b      	ldr	r3, [pc, #172]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005ee2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee8:	f7fd faf2 	bl	80034d0 <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ef0:	f7fd faee 	bl	80034d0 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e20e      	b.n	8006320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f02:	4b22      	ldr	r3, [pc, #136]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1f0      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x1e0>
 8005f0e:	e000      	b.n	8005f12 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d041      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d01c      	beq.n	8005f60 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f26:	4b19      	ldr	r3, [pc, #100]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f2c:	4a17      	ldr	r2, [pc, #92]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
 8005f32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f36:	f7fd facb 	bl	80034d0 <HAL_GetTick>
 8005f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f3c:	e008      	b.n	8005f50 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f3e:	f7fd fac7 	bl	80034d0 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d901      	bls.n	8005f50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e1e7      	b.n	8006320 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f50:	4b0e      	ldr	r3, [pc, #56]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0ef      	beq.n	8005f3e <HAL_RCC_OscConfig+0x22e>
 8005f5e:	e020      	b.n	8005fa2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f60:	4b0a      	ldr	r3, [pc, #40]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f66:	4a09      	ldr	r2, [pc, #36]	@ (8005f8c <HAL_RCC_OscConfig+0x27c>)
 8005f68:	f023 0301 	bic.w	r3, r3, #1
 8005f6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f70:	f7fd faae 	bl	80034d0 <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f76:	e00d      	b.n	8005f94 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f78:	f7fd faaa 	bl	80034d0 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d906      	bls.n	8005f94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e1ca      	b.n	8006320 <HAL_RCC_OscConfig+0x610>
 8005f8a:	bf00      	nop
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f94:	4b8c      	ldr	r3, [pc, #560]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 8005f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1ea      	bne.n	8005f78 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0304 	and.w	r3, r3, #4
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 80a6 	beq.w	80060fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005fb4:	4b84      	ldr	r3, [pc, #528]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 8005fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x2b4>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <HAL_RCC_OscConfig+0x2b6>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00d      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fca:	4b7f      	ldr	r3, [pc, #508]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 8005fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fce:	4a7e      	ldr	r2, [pc, #504]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 8005fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fd6:	4b7c      	ldr	r3, [pc, #496]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 8005fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fe6:	4b79      	ldr	r3, [pc, #484]	@ (80061cc <HAL_RCC_OscConfig+0x4bc>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d118      	bne.n	8006024 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ff2:	4b76      	ldr	r3, [pc, #472]	@ (80061cc <HAL_RCC_OscConfig+0x4bc>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a75      	ldr	r2, [pc, #468]	@ (80061cc <HAL_RCC_OscConfig+0x4bc>)
 8005ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ffe:	f7fd fa67 	bl	80034d0 <HAL_GetTick>
 8006002:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006004:	e008      	b.n	8006018 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006006:	f7fd fa63 	bl	80034d0 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d901      	bls.n	8006018 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e183      	b.n	8006320 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006018:	4b6c      	ldr	r3, [pc, #432]	@ (80061cc <HAL_RCC_OscConfig+0x4bc>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006020:	2b00      	cmp	r3, #0
 8006022:	d0f0      	beq.n	8006006 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d108      	bne.n	800603e <HAL_RCC_OscConfig+0x32e>
 800602c:	4b66      	ldr	r3, [pc, #408]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 800602e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006032:	4a65      	ldr	r2, [pc, #404]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 8006034:	f043 0301 	orr.w	r3, r3, #1
 8006038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800603c:	e024      	b.n	8006088 <HAL_RCC_OscConfig+0x378>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	2b05      	cmp	r3, #5
 8006044:	d110      	bne.n	8006068 <HAL_RCC_OscConfig+0x358>
 8006046:	4b60      	ldr	r3, [pc, #384]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 8006048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800604c:	4a5e      	ldr	r2, [pc, #376]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 800604e:	f043 0304 	orr.w	r3, r3, #4
 8006052:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006056:	4b5c      	ldr	r3, [pc, #368]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 8006058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800605c:	4a5a      	ldr	r2, [pc, #360]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 800605e:	f043 0301 	orr.w	r3, r3, #1
 8006062:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006066:	e00f      	b.n	8006088 <HAL_RCC_OscConfig+0x378>
 8006068:	4b57      	ldr	r3, [pc, #348]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 800606a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800606e:	4a56      	ldr	r2, [pc, #344]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 8006070:	f023 0301 	bic.w	r3, r3, #1
 8006074:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006078:	4b53      	ldr	r3, [pc, #332]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 800607a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800607e:	4a52      	ldr	r2, [pc, #328]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 8006080:	f023 0304 	bic.w	r3, r3, #4
 8006084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d016      	beq.n	80060be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006090:	f7fd fa1e 	bl	80034d0 <HAL_GetTick>
 8006094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006096:	e00a      	b.n	80060ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006098:	f7fd fa1a 	bl	80034d0 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d901      	bls.n	80060ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e138      	b.n	8006320 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060ae:	4b46      	ldr	r3, [pc, #280]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 80060b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0ed      	beq.n	8006098 <HAL_RCC_OscConfig+0x388>
 80060bc:	e015      	b.n	80060ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060be:	f7fd fa07 	bl	80034d0 <HAL_GetTick>
 80060c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060c4:	e00a      	b.n	80060dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c6:	f7fd fa03 	bl	80034d0 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d901      	bls.n	80060dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e121      	b.n	8006320 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060dc:	4b3a      	ldr	r3, [pc, #232]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 80060de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1ed      	bne.n	80060c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060ea:	7ffb      	ldrb	r3, [r7, #31]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d105      	bne.n	80060fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060f0:	4b35      	ldr	r3, [pc, #212]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 80060f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f4:	4a34      	ldr	r2, [pc, #208]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 80060f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d03c      	beq.n	8006182 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d01c      	beq.n	800614a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006110:	4b2d      	ldr	r3, [pc, #180]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 8006112:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006116:	4a2c      	ldr	r2, [pc, #176]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 8006118:	f043 0301 	orr.w	r3, r3, #1
 800611c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006120:	f7fd f9d6 	bl	80034d0 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006128:	f7fd f9d2 	bl	80034d0 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e0f2      	b.n	8006320 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800613a:	4b23      	ldr	r3, [pc, #140]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 800613c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d0ef      	beq.n	8006128 <HAL_RCC_OscConfig+0x418>
 8006148:	e01b      	b.n	8006182 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800614a:	4b1f      	ldr	r3, [pc, #124]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 800614c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006150:	4a1d      	ldr	r2, [pc, #116]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 8006152:	f023 0301 	bic.w	r3, r3, #1
 8006156:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800615a:	f7fd f9b9 	bl	80034d0 <HAL_GetTick>
 800615e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006160:	e008      	b.n	8006174 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006162:	f7fd f9b5 	bl	80034d0 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	2b02      	cmp	r3, #2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e0d5      	b.n	8006320 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006174:	4b14      	ldr	r3, [pc, #80]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 8006176:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1ef      	bne.n	8006162 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 80c9 	beq.w	800631e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800618c:	4b0e      	ldr	r3, [pc, #56]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f003 030c 	and.w	r3, r3, #12
 8006194:	2b0c      	cmp	r3, #12
 8006196:	f000 8083 	beq.w	80062a0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d15e      	bne.n	8006260 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a2:	4b09      	ldr	r3, [pc, #36]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a08      	ldr	r2, [pc, #32]	@ (80061c8 <HAL_RCC_OscConfig+0x4b8>)
 80061a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ae:	f7fd f98f 	bl	80034d0 <HAL_GetTick>
 80061b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061b4:	e00c      	b.n	80061d0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b6:	f7fd f98b 	bl	80034d0 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d905      	bls.n	80061d0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e0ab      	b.n	8006320 <HAL_RCC_OscConfig+0x610>
 80061c8:	40021000 	.word	0x40021000
 80061cc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061d0:	4b55      	ldr	r3, [pc, #340]	@ (8006328 <HAL_RCC_OscConfig+0x618>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1ec      	bne.n	80061b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061dc:	4b52      	ldr	r3, [pc, #328]	@ (8006328 <HAL_RCC_OscConfig+0x618>)
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	4b52      	ldr	r3, [pc, #328]	@ (800632c <HAL_RCC_OscConfig+0x61c>)
 80061e2:	4013      	ands	r3, r2
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	6a11      	ldr	r1, [r2, #32]
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061ec:	3a01      	subs	r2, #1
 80061ee:	0112      	lsls	r2, r2, #4
 80061f0:	4311      	orrs	r1, r2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80061f6:	0212      	lsls	r2, r2, #8
 80061f8:	4311      	orrs	r1, r2
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80061fe:	0852      	lsrs	r2, r2, #1
 8006200:	3a01      	subs	r2, #1
 8006202:	0552      	lsls	r2, r2, #21
 8006204:	4311      	orrs	r1, r2
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800620a:	0852      	lsrs	r2, r2, #1
 800620c:	3a01      	subs	r2, #1
 800620e:	0652      	lsls	r2, r2, #25
 8006210:	4311      	orrs	r1, r2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006216:	06d2      	lsls	r2, r2, #27
 8006218:	430a      	orrs	r2, r1
 800621a:	4943      	ldr	r1, [pc, #268]	@ (8006328 <HAL_RCC_OscConfig+0x618>)
 800621c:	4313      	orrs	r3, r2
 800621e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006220:	4b41      	ldr	r3, [pc, #260]	@ (8006328 <HAL_RCC_OscConfig+0x618>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a40      	ldr	r2, [pc, #256]	@ (8006328 <HAL_RCC_OscConfig+0x618>)
 8006226:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800622a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800622c:	4b3e      	ldr	r3, [pc, #248]	@ (8006328 <HAL_RCC_OscConfig+0x618>)
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	4a3d      	ldr	r2, [pc, #244]	@ (8006328 <HAL_RCC_OscConfig+0x618>)
 8006232:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006236:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006238:	f7fd f94a 	bl	80034d0 <HAL_GetTick>
 800623c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006240:	f7fd f946 	bl	80034d0 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e066      	b.n	8006320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006252:	4b35      	ldr	r3, [pc, #212]	@ (8006328 <HAL_RCC_OscConfig+0x618>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0f0      	beq.n	8006240 <HAL_RCC_OscConfig+0x530>
 800625e:	e05e      	b.n	800631e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006260:	4b31      	ldr	r3, [pc, #196]	@ (8006328 <HAL_RCC_OscConfig+0x618>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a30      	ldr	r2, [pc, #192]	@ (8006328 <HAL_RCC_OscConfig+0x618>)
 8006266:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800626a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626c:	f7fd f930 	bl	80034d0 <HAL_GetTick>
 8006270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006272:	e008      	b.n	8006286 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006274:	f7fd f92c 	bl	80034d0 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d901      	bls.n	8006286 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e04c      	b.n	8006320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006286:	4b28      	ldr	r3, [pc, #160]	@ (8006328 <HAL_RCC_OscConfig+0x618>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1f0      	bne.n	8006274 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006292:	4b25      	ldr	r3, [pc, #148]	@ (8006328 <HAL_RCC_OscConfig+0x618>)
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	4924      	ldr	r1, [pc, #144]	@ (8006328 <HAL_RCC_OscConfig+0x618>)
 8006298:	4b25      	ldr	r3, [pc, #148]	@ (8006330 <HAL_RCC_OscConfig+0x620>)
 800629a:	4013      	ands	r3, r2
 800629c:	60cb      	str	r3, [r1, #12]
 800629e:	e03e      	b.n	800631e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e039      	b.n	8006320 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80062ac:	4b1e      	ldr	r3, [pc, #120]	@ (8006328 <HAL_RCC_OscConfig+0x618>)
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f003 0203 	and.w	r2, r3, #3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d12c      	bne.n	800631a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ca:	3b01      	subs	r3, #1
 80062cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d123      	bne.n	800631a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062de:	429a      	cmp	r2, r3
 80062e0:	d11b      	bne.n	800631a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d113      	bne.n	800631a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062fc:	085b      	lsrs	r3, r3, #1
 80062fe:	3b01      	subs	r3, #1
 8006300:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006302:	429a      	cmp	r2, r3
 8006304:	d109      	bne.n	800631a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006310:	085b      	lsrs	r3, r3, #1
 8006312:	3b01      	subs	r3, #1
 8006314:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006316:	429a      	cmp	r2, r3
 8006318:	d001      	beq.n	800631e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e000      	b.n	8006320 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3720      	adds	r7, #32
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	40021000 	.word	0x40021000
 800632c:	019f800c 	.word	0x019f800c
 8006330:	feeefffc 	.word	0xfeeefffc

08006334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800633e:	2300      	movs	r3, #0
 8006340:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e11e      	b.n	800658a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800634c:	4b91      	ldr	r3, [pc, #580]	@ (8006594 <HAL_RCC_ClockConfig+0x260>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 030f 	and.w	r3, r3, #15
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	429a      	cmp	r2, r3
 8006358:	d910      	bls.n	800637c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800635a:	4b8e      	ldr	r3, [pc, #568]	@ (8006594 <HAL_RCC_ClockConfig+0x260>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f023 020f 	bic.w	r2, r3, #15
 8006362:	498c      	ldr	r1, [pc, #560]	@ (8006594 <HAL_RCC_ClockConfig+0x260>)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	4313      	orrs	r3, r2
 8006368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800636a:	4b8a      	ldr	r3, [pc, #552]	@ (8006594 <HAL_RCC_ClockConfig+0x260>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 030f 	and.w	r3, r3, #15
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	429a      	cmp	r2, r3
 8006376:	d001      	beq.n	800637c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e106      	b.n	800658a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d073      	beq.n	8006470 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2b03      	cmp	r3, #3
 800638e:	d129      	bne.n	80063e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006390:	4b81      	ldr	r3, [pc, #516]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e0f4      	b.n	800658a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80063a0:	f000 f99e 	bl	80066e0 <RCC_GetSysClockFreqFromPLLSource>
 80063a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	4a7c      	ldr	r2, [pc, #496]	@ (800659c <HAL_RCC_ClockConfig+0x268>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d93f      	bls.n	800642e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80063ae:	4b7a      	ldr	r3, [pc, #488]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d009      	beq.n	80063ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d033      	beq.n	800642e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d12f      	bne.n	800642e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80063ce:	4b72      	ldr	r3, [pc, #456]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063d6:	4a70      	ldr	r2, [pc, #448]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 80063d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80063de:	2380      	movs	r3, #128	@ 0x80
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	e024      	b.n	800642e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d107      	bne.n	80063fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063ec:	4b6a      	ldr	r3, [pc, #424]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d109      	bne.n	800640c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e0c6      	b.n	800658a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063fc:	4b66      	ldr	r3, [pc, #408]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e0be      	b.n	800658a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800640c:	f000 f8ce 	bl	80065ac <HAL_RCC_GetSysClockFreq>
 8006410:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	4a61      	ldr	r2, [pc, #388]	@ (800659c <HAL_RCC_ClockConfig+0x268>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d909      	bls.n	800642e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800641a:	4b5f      	ldr	r3, [pc, #380]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006422:	4a5d      	ldr	r2, [pc, #372]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 8006424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006428:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800642a:	2380      	movs	r3, #128	@ 0x80
 800642c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800642e:	4b5a      	ldr	r3, [pc, #360]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f023 0203 	bic.w	r2, r3, #3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	4957      	ldr	r1, [pc, #348]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 800643c:	4313      	orrs	r3, r2
 800643e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006440:	f7fd f846 	bl	80034d0 <HAL_GetTick>
 8006444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006446:	e00a      	b.n	800645e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006448:	f7fd f842 	bl	80034d0 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006456:	4293      	cmp	r3, r2
 8006458:	d901      	bls.n	800645e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e095      	b.n	800658a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800645e:	4b4e      	ldr	r3, [pc, #312]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 020c 	and.w	r2, r3, #12
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	429a      	cmp	r2, r3
 800646e:	d1eb      	bne.n	8006448 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d023      	beq.n	80064c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006488:	4b43      	ldr	r3, [pc, #268]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	4a42      	ldr	r2, [pc, #264]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 800648e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006492:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0308 	and.w	r3, r3, #8
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80064a0:	4b3d      	ldr	r3, [pc, #244]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80064a8:	4a3b      	ldr	r2, [pc, #236]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 80064aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80064ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064b0:	4b39      	ldr	r3, [pc, #228]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	4936      	ldr	r1, [pc, #216]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	608b      	str	r3, [r1, #8]
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2b80      	cmp	r3, #128	@ 0x80
 80064c8:	d105      	bne.n	80064d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80064ca:	4b33      	ldr	r3, [pc, #204]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	4a32      	ldr	r2, [pc, #200]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 80064d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064d6:	4b2f      	ldr	r3, [pc, #188]	@ (8006594 <HAL_RCC_ClockConfig+0x260>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 030f 	and.w	r3, r3, #15
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d21d      	bcs.n	8006520 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006594 <HAL_RCC_ClockConfig+0x260>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f023 020f 	bic.w	r2, r3, #15
 80064ec:	4929      	ldr	r1, [pc, #164]	@ (8006594 <HAL_RCC_ClockConfig+0x260>)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80064f4:	f7fc ffec 	bl	80034d0 <HAL_GetTick>
 80064f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064fa:	e00a      	b.n	8006512 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064fc:	f7fc ffe8 	bl	80034d0 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800650a:	4293      	cmp	r3, r2
 800650c:	d901      	bls.n	8006512 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e03b      	b.n	800658a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006512:	4b20      	ldr	r3, [pc, #128]	@ (8006594 <HAL_RCC_ClockConfig+0x260>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d1ed      	bne.n	80064fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d008      	beq.n	800653e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800652c:	4b1a      	ldr	r3, [pc, #104]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	4917      	ldr	r1, [pc, #92]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 800653a:	4313      	orrs	r3, r2
 800653c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0308 	and.w	r3, r3, #8
 8006546:	2b00      	cmp	r3, #0
 8006548:	d009      	beq.n	800655e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800654a:	4b13      	ldr	r3, [pc, #76]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	490f      	ldr	r1, [pc, #60]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 800655a:	4313      	orrs	r3, r2
 800655c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800655e:	f000 f825 	bl	80065ac <HAL_RCC_GetSysClockFreq>
 8006562:	4602      	mov	r2, r0
 8006564:	4b0c      	ldr	r3, [pc, #48]	@ (8006598 <HAL_RCC_ClockConfig+0x264>)
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	091b      	lsrs	r3, r3, #4
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	490c      	ldr	r1, [pc, #48]	@ (80065a0 <HAL_RCC_ClockConfig+0x26c>)
 8006570:	5ccb      	ldrb	r3, [r1, r3]
 8006572:	f003 031f 	and.w	r3, r3, #31
 8006576:	fa22 f303 	lsr.w	r3, r2, r3
 800657a:	4a0a      	ldr	r2, [pc, #40]	@ (80065a4 <HAL_RCC_ClockConfig+0x270>)
 800657c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800657e:	4b0a      	ldr	r3, [pc, #40]	@ (80065a8 <HAL_RCC_ClockConfig+0x274>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4618      	mov	r0, r3
 8006584:	f7fc ff58 	bl	8003438 <HAL_InitTick>
 8006588:	4603      	mov	r3, r0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	40022000 	.word	0x40022000
 8006598:	40021000 	.word	0x40021000
 800659c:	04c4b400 	.word	0x04c4b400
 80065a0:	0800e224 	.word	0x0800e224
 80065a4:	2000000c 	.word	0x2000000c
 80065a8:	20000014 	.word	0x20000014

080065ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80065b2:	4b2c      	ldr	r3, [pc, #176]	@ (8006664 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 030c 	and.w	r3, r3, #12
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d102      	bne.n	80065c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80065be:	4b2a      	ldr	r3, [pc, #168]	@ (8006668 <HAL_RCC_GetSysClockFreq+0xbc>)
 80065c0:	613b      	str	r3, [r7, #16]
 80065c2:	e047      	b.n	8006654 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80065c4:	4b27      	ldr	r3, [pc, #156]	@ (8006664 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f003 030c 	and.w	r3, r3, #12
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d102      	bne.n	80065d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80065d0:	4b26      	ldr	r3, [pc, #152]	@ (800666c <HAL_RCC_GetSysClockFreq+0xc0>)
 80065d2:	613b      	str	r3, [r7, #16]
 80065d4:	e03e      	b.n	8006654 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80065d6:	4b23      	ldr	r3, [pc, #140]	@ (8006664 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 030c 	and.w	r3, r3, #12
 80065de:	2b0c      	cmp	r3, #12
 80065e0:	d136      	bne.n	8006650 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065e2:	4b20      	ldr	r3, [pc, #128]	@ (8006664 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f003 0303 	and.w	r3, r3, #3
 80065ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006664 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	091b      	lsrs	r3, r3, #4
 80065f2:	f003 030f 	and.w	r3, r3, #15
 80065f6:	3301      	adds	r3, #1
 80065f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b03      	cmp	r3, #3
 80065fe:	d10c      	bne.n	800661a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006600:	4a1a      	ldr	r2, [pc, #104]	@ (800666c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	fbb2 f3f3 	udiv	r3, r2, r3
 8006608:	4a16      	ldr	r2, [pc, #88]	@ (8006664 <HAL_RCC_GetSysClockFreq+0xb8>)
 800660a:	68d2      	ldr	r2, [r2, #12]
 800660c:	0a12      	lsrs	r2, r2, #8
 800660e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006612:	fb02 f303 	mul.w	r3, r2, r3
 8006616:	617b      	str	r3, [r7, #20]
      break;
 8006618:	e00c      	b.n	8006634 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800661a:	4a13      	ldr	r2, [pc, #76]	@ (8006668 <HAL_RCC_GetSysClockFreq+0xbc>)
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006622:	4a10      	ldr	r2, [pc, #64]	@ (8006664 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006624:	68d2      	ldr	r2, [r2, #12]
 8006626:	0a12      	lsrs	r2, r2, #8
 8006628:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800662c:	fb02 f303 	mul.w	r3, r2, r3
 8006630:	617b      	str	r3, [r7, #20]
      break;
 8006632:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006634:	4b0b      	ldr	r3, [pc, #44]	@ (8006664 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	0e5b      	lsrs	r3, r3, #25
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	3301      	adds	r3, #1
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	fbb2 f3f3 	udiv	r3, r2, r3
 800664c:	613b      	str	r3, [r7, #16]
 800664e:	e001      	b.n	8006654 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006650:	2300      	movs	r3, #0
 8006652:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006654:	693b      	ldr	r3, [r7, #16]
}
 8006656:	4618      	mov	r0, r3
 8006658:	371c      	adds	r7, #28
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	40021000 	.word	0x40021000
 8006668:	00f42400 	.word	0x00f42400
 800666c:	02dc6c00 	.word	0x02dc6c00

08006670 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006670:	b480      	push	{r7}
 8006672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006674:	4b03      	ldr	r3, [pc, #12]	@ (8006684 <HAL_RCC_GetHCLKFreq+0x14>)
 8006676:	681b      	ldr	r3, [r3, #0]
}
 8006678:	4618      	mov	r0, r3
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	2000000c 	.word	0x2000000c

08006688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800668c:	f7ff fff0 	bl	8006670 <HAL_RCC_GetHCLKFreq>
 8006690:	4602      	mov	r2, r0
 8006692:	4b06      	ldr	r3, [pc, #24]	@ (80066ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	0a1b      	lsrs	r3, r3, #8
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	4904      	ldr	r1, [pc, #16]	@ (80066b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800669e:	5ccb      	ldrb	r3, [r1, r3]
 80066a0:	f003 031f 	and.w	r3, r3, #31
 80066a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	40021000 	.word	0x40021000
 80066b0:	0800e234 	.word	0x0800e234

080066b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80066b8:	f7ff ffda 	bl	8006670 <HAL_RCC_GetHCLKFreq>
 80066bc:	4602      	mov	r2, r0
 80066be:	4b06      	ldr	r3, [pc, #24]	@ (80066d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	0adb      	lsrs	r3, r3, #11
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	4904      	ldr	r1, [pc, #16]	@ (80066dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80066ca:	5ccb      	ldrb	r3, [r1, r3]
 80066cc:	f003 031f 	and.w	r3, r3, #31
 80066d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	40021000 	.word	0x40021000
 80066dc:	0800e234 	.word	0x0800e234

080066e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066e6:	4b1e      	ldr	r3, [pc, #120]	@ (8006760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	091b      	lsrs	r3, r3, #4
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	3301      	adds	r3, #1
 80066fc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	2b03      	cmp	r3, #3
 8006702:	d10c      	bne.n	800671e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006704:	4a17      	ldr	r2, [pc, #92]	@ (8006764 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	fbb2 f3f3 	udiv	r3, r2, r3
 800670c:	4a14      	ldr	r2, [pc, #80]	@ (8006760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800670e:	68d2      	ldr	r2, [r2, #12]
 8006710:	0a12      	lsrs	r2, r2, #8
 8006712:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006716:	fb02 f303 	mul.w	r3, r2, r3
 800671a:	617b      	str	r3, [r7, #20]
    break;
 800671c:	e00c      	b.n	8006738 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800671e:	4a12      	ldr	r2, [pc, #72]	@ (8006768 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	fbb2 f3f3 	udiv	r3, r2, r3
 8006726:	4a0e      	ldr	r2, [pc, #56]	@ (8006760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006728:	68d2      	ldr	r2, [r2, #12]
 800672a:	0a12      	lsrs	r2, r2, #8
 800672c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006730:	fb02 f303 	mul.w	r3, r2, r3
 8006734:	617b      	str	r3, [r7, #20]
    break;
 8006736:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006738:	4b09      	ldr	r3, [pc, #36]	@ (8006760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	0e5b      	lsrs	r3, r3, #25
 800673e:	f003 0303 	and.w	r3, r3, #3
 8006742:	3301      	adds	r3, #1
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006750:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006752:	687b      	ldr	r3, [r7, #4]
}
 8006754:	4618      	mov	r0, r3
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	40021000 	.word	0x40021000
 8006764:	02dc6c00 	.word	0x02dc6c00
 8006768:	00f42400 	.word	0x00f42400

0800676c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006774:	2300      	movs	r3, #0
 8006776:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006778:	2300      	movs	r3, #0
 800677a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 8098 	beq.w	80068ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800678a:	2300      	movs	r3, #0
 800678c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800678e:	4b43      	ldr	r3, [pc, #268]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10d      	bne.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800679a:	4b40      	ldr	r3, [pc, #256]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800679c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800679e:	4a3f      	ldr	r2, [pc, #252]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80067a6:	4b3d      	ldr	r3, [pc, #244]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067ae:	60bb      	str	r3, [r7, #8]
 80067b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067b2:	2301      	movs	r3, #1
 80067b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067b6:	4b3a      	ldr	r3, [pc, #232]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a39      	ldr	r2, [pc, #228]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067c2:	f7fc fe85 	bl	80034d0 <HAL_GetTick>
 80067c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067c8:	e009      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067ca:	f7fc fe81 	bl	80034d0 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d902      	bls.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	74fb      	strb	r3, [r7, #19]
        break;
 80067dc:	e005      	b.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067de:	4b30      	ldr	r3, [pc, #192]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0ef      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80067ea:	7cfb      	ldrb	r3, [r7, #19]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d159      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80067f0:	4b2a      	ldr	r3, [pc, #168]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d01e      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	429a      	cmp	r2, r3
 800680a:	d019      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800680c:	4b23      	ldr	r3, [pc, #140]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800680e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006816:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006818:	4b20      	ldr	r3, [pc, #128]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800681a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800681e:	4a1f      	ldr	r2, [pc, #124]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006828:	4b1c      	ldr	r3, [pc, #112]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800682a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800682e:	4a1b      	ldr	r2, [pc, #108]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006830:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006838:	4a18      	ldr	r2, [pc, #96]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d016      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800684a:	f7fc fe41 	bl	80034d0 <HAL_GetTick>
 800684e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006850:	e00b      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006852:	f7fc fe3d 	bl	80034d0 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006860:	4293      	cmp	r3, r2
 8006862:	d902      	bls.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	74fb      	strb	r3, [r7, #19]
            break;
 8006868:	e006      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800686a:	4b0c      	ldr	r3, [pc, #48]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800686c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0ec      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006878:	7cfb      	ldrb	r3, [r7, #19]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10b      	bne.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800687e:	4b07      	ldr	r3, [pc, #28]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006884:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800688c:	4903      	ldr	r1, [pc, #12]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800688e:	4313      	orrs	r3, r2
 8006890:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006894:	e008      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006896:	7cfb      	ldrb	r3, [r7, #19]
 8006898:	74bb      	strb	r3, [r7, #18]
 800689a:	e005      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800689c:	40021000 	.word	0x40021000
 80068a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a4:	7cfb      	ldrb	r3, [r7, #19]
 80068a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068a8:	7c7b      	ldrb	r3, [r7, #17]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d105      	bne.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068ae:	4ba7      	ldr	r3, [pc, #668]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b2:	4aa6      	ldr	r2, [pc, #664]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00a      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068c6:	4ba1      	ldr	r3, [pc, #644]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068cc:	f023 0203 	bic.w	r2, r3, #3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	499d      	ldr	r1, [pc, #628]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00a      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068e8:	4b98      	ldr	r3, [pc, #608]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ee:	f023 020c 	bic.w	r2, r3, #12
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	4995      	ldr	r1, [pc, #596]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0304 	and.w	r3, r3, #4
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800690a:	4b90      	ldr	r3, [pc, #576]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800690c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006910:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	498c      	ldr	r1, [pc, #560]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800691a:	4313      	orrs	r3, r2
 800691c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0308 	and.w	r3, r3, #8
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00a      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800692c:	4b87      	ldr	r3, [pc, #540]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800692e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006932:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	4984      	ldr	r1, [pc, #528]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800693c:	4313      	orrs	r3, r2
 800693e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0310 	and.w	r3, r3, #16
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800694e:	4b7f      	ldr	r3, [pc, #508]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006954:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	497b      	ldr	r1, [pc, #492]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800695e:	4313      	orrs	r3, r2
 8006960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0320 	and.w	r3, r3, #32
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00a      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006970:	4b76      	ldr	r3, [pc, #472]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006976:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	4973      	ldr	r1, [pc, #460]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006980:	4313      	orrs	r3, r2
 8006982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006992:	4b6e      	ldr	r3, [pc, #440]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006998:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	496a      	ldr	r1, [pc, #424]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00a      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80069b4:	4b65      	ldr	r3, [pc, #404]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	4962      	ldr	r1, [pc, #392]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00a      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069d6:	4b5d      	ldr	r3, [pc, #372]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e4:	4959      	ldr	r1, [pc, #356]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00a      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069f8:	4b54      	ldr	r3, [pc, #336]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069fe:	f023 0203 	bic.w	r2, r3, #3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a06:	4951      	ldr	r1, [pc, #324]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a1a:	4b4c      	ldr	r3, [pc, #304]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a20:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a28:	4948      	ldr	r1, [pc, #288]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d015      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a3c:	4b43      	ldr	r3, [pc, #268]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4a:	4940      	ldr	r1, [pc, #256]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a5a:	d105      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	4a3a      	ldr	r2, [pc, #232]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a66:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d015      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a74:	4b35      	ldr	r3, [pc, #212]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a82:	4932      	ldr	r1, [pc, #200]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a92:	d105      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a94:	4b2d      	ldr	r3, [pc, #180]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	4a2c      	ldr	r2, [pc, #176]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a9e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d015      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006aac:	4b27      	ldr	r3, [pc, #156]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ab2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aba:	4924      	ldr	r1, [pc, #144]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006aca:	d105      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006acc:	4b1f      	ldr	r3, [pc, #124]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	4a1e      	ldr	r2, [pc, #120]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ad6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d015      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ae4:	4b19      	ldr	r3, [pc, #100]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af2:	4916      	ldr	r1, [pc, #88]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006afe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b02:	d105      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b04:	4b11      	ldr	r3, [pc, #68]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	4a10      	ldr	r2, [pc, #64]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b0e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d019      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2a:	4908      	ldr	r1, [pc, #32]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b3a:	d109      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b3c:	4b03      	ldr	r3, [pc, #12]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	4a02      	ldr	r2, [pc, #8]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b46:	60d3      	str	r3, [r2, #12]
 8006b48:	e002      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006b4a:	bf00      	nop
 8006b4c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d015      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006b5c:	4b29      	ldr	r3, [pc, #164]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b62:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b6a:	4926      	ldr	r1, [pc, #152]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b7a:	d105      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b7c:	4b21      	ldr	r3, [pc, #132]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	4a20      	ldr	r2, [pc, #128]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b86:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d015      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006b94:	4b1b      	ldr	r3, [pc, #108]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b9a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ba2:	4918      	ldr	r1, [pc, #96]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bb2:	d105      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006bb4:	4b13      	ldr	r3, [pc, #76]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	4a12      	ldr	r2, [pc, #72]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bbe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d015      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006bd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bda:	490a      	ldr	r1, [pc, #40]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006be6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bea:	d105      	bne.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bec:	4b05      	ldr	r3, [pc, #20]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	4a04      	ldr	r2, [pc, #16]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bf6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006bf8:	7cbb      	ldrb	r3, [r7, #18]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	40021000 	.word	0x40021000

08006c08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e09d      	b.n	8006d56 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d108      	bne.n	8006c34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c2a:	d009      	beq.n	8006c40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	61da      	str	r2, [r3, #28]
 8006c32:	e005      	b.n	8006c40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d106      	bne.n	8006c60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7fb fd32 	bl	80026c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c80:	d902      	bls.n	8006c88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c82:	2300      	movs	r3, #0
 8006c84:	60fb      	str	r3, [r7, #12]
 8006c86:	e002      	b.n	8006c8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006c96:	d007      	beq.n	8006ca8 <HAL_SPI_Init+0xa0>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ca0:	d002      	beq.n	8006ca8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cea:	ea42 0103 	orr.w	r1, r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	0c1b      	lsrs	r3, r3, #16
 8006d04:	f003 0204 	and.w	r2, r3, #4
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0c:	f003 0310 	and.w	r3, r3, #16
 8006d10:	431a      	orrs	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006d24:	ea42 0103 	orr.w	r1, r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	69da      	ldr	r2, [r3, #28]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b088      	sub	sp, #32
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	603b      	str	r3, [r7, #0]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <HAL_SPI_Transmit+0x22>
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e15f      	b.n	8007040 <HAL_SPI_Transmit+0x2e2>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d88:	f7fc fba2 	bl	80034d0 <HAL_GetTick>
 8006d8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d8e:	88fb      	ldrh	r3, [r7, #6]
 8006d90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d002      	beq.n	8006da4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006d9e:	2302      	movs	r3, #2
 8006da0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006da2:	e148      	b.n	8007036 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d002      	beq.n	8006db0 <HAL_SPI_Transmit+0x52>
 8006daa:	88fb      	ldrh	r3, [r7, #6]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d102      	bne.n	8006db6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006db4:	e13f      	b.n	8007036 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2203      	movs	r2, #3
 8006dba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	88fa      	ldrh	r2, [r7, #6]
 8006dce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	88fa      	ldrh	r2, [r7, #6]
 8006dd4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e00:	d10f      	bne.n	8006e22 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e2c:	2b40      	cmp	r3, #64	@ 0x40
 8006e2e:	d007      	beq.n	8006e40 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e48:	d94f      	bls.n	8006eea <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <HAL_SPI_Transmit+0xfa>
 8006e52:	8afb      	ldrh	r3, [r7, #22]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d142      	bne.n	8006ede <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5c:	881a      	ldrh	r2, [r3, #0]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e68:	1c9a      	adds	r2, r3, #2
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	3b01      	subs	r3, #1
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e7c:	e02f      	b.n	8006ede <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d112      	bne.n	8006eb2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e90:	881a      	ldrh	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9c:	1c9a      	adds	r2, r3, #2
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006eb0:	e015      	b.n	8006ede <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006eb2:	f7fc fb0d 	bl	80034d0 <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d803      	bhi.n	8006eca <HAL_SPI_Transmit+0x16c>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec8:	d102      	bne.n	8006ed0 <HAL_SPI_Transmit+0x172>
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d106      	bne.n	8006ede <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006edc:	e0ab      	b.n	8007036 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1ca      	bne.n	8006e7e <HAL_SPI_Transmit+0x120>
 8006ee8:	e080      	b.n	8006fec <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d002      	beq.n	8006ef8 <HAL_SPI_Transmit+0x19a>
 8006ef2:	8afb      	ldrh	r3, [r7, #22]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d174      	bne.n	8006fe2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d912      	bls.n	8006f28 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f06:	881a      	ldrh	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f12:	1c9a      	adds	r2, r3, #2
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	3b02      	subs	r3, #2
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f26:	e05c      	b.n	8006fe2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	330c      	adds	r3, #12
 8006f32:	7812      	ldrb	r2, [r2, #0]
 8006f34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	3b01      	subs	r3, #1
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006f4e:	e048      	b.n	8006fe2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d12b      	bne.n	8006fb6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d912      	bls.n	8006f8e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6c:	881a      	ldrh	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f78:	1c9a      	adds	r2, r3, #2
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	3b02      	subs	r3, #2
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f8c:	e029      	b.n	8006fe2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	330c      	adds	r3, #12
 8006f98:	7812      	ldrb	r2, [r2, #0]
 8006f9a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	3b01      	subs	r3, #1
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006fb4:	e015      	b.n	8006fe2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fb6:	f7fc fa8b 	bl	80034d0 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d803      	bhi.n	8006fce <HAL_SPI_Transmit+0x270>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fcc:	d102      	bne.n	8006fd4 <HAL_SPI_Transmit+0x276>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d106      	bne.n	8006fe2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006fe0:	e029      	b.n	8007036 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1b1      	bne.n	8006f50 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 f947 	bl	8007284 <SPI_EndRxTxTransaction>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2220      	movs	r2, #32
 8007000:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800700a:	2300      	movs	r3, #0
 800700c:	613b      	str	r3, [r7, #16]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	613b      	str	r3, [r7, #16]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	613b      	str	r3, [r7, #16]
 800701e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	77fb      	strb	r3, [r7, #31]
 800702c:	e003      	b.n	8007036 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800703e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007040:	4618      	mov	r0, r3
 8007042:	3720      	adds	r7, #32
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b088      	sub	sp, #32
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	4613      	mov	r3, r2
 8007056:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007058:	f7fc fa3a 	bl	80034d0 <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007060:	1a9b      	subs	r3, r3, r2
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	4413      	add	r3, r2
 8007066:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007068:	f7fc fa32 	bl	80034d0 <HAL_GetTick>
 800706c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800706e:	4b39      	ldr	r3, [pc, #228]	@ (8007154 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	015b      	lsls	r3, r3, #5
 8007074:	0d1b      	lsrs	r3, r3, #20
 8007076:	69fa      	ldr	r2, [r7, #28]
 8007078:	fb02 f303 	mul.w	r3, r2, r3
 800707c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800707e:	e054      	b.n	800712a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007086:	d050      	beq.n	800712a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007088:	f7fc fa22 	bl	80034d0 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	69fa      	ldr	r2, [r7, #28]
 8007094:	429a      	cmp	r2, r3
 8007096:	d902      	bls.n	800709e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d13d      	bne.n	800711a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80070ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070b6:	d111      	bne.n	80070dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070c0:	d004      	beq.n	80070cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ca:	d107      	bne.n	80070dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070e4:	d10f      	bne.n	8007106 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007104:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e017      	b.n	800714a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	3b01      	subs	r3, #1
 8007128:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	4013      	ands	r3, r2
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	429a      	cmp	r2, r3
 8007138:	bf0c      	ite	eq
 800713a:	2301      	moveq	r3, #1
 800713c:	2300      	movne	r3, #0
 800713e:	b2db      	uxtb	r3, r3
 8007140:	461a      	mov	r2, r3
 8007142:	79fb      	ldrb	r3, [r7, #7]
 8007144:	429a      	cmp	r2, r3
 8007146:	d19b      	bne.n	8007080 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3720      	adds	r7, #32
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	2000000c 	.word	0x2000000c

08007158 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08a      	sub	sp, #40	@ 0x28
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007166:	2300      	movs	r3, #0
 8007168:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800716a:	f7fc f9b1 	bl	80034d0 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007172:	1a9b      	subs	r3, r3, r2
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	4413      	add	r3, r2
 8007178:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800717a:	f7fc f9a9 	bl	80034d0 <HAL_GetTick>
 800717e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	330c      	adds	r3, #12
 8007186:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007188:	4b3d      	ldr	r3, [pc, #244]	@ (8007280 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	4613      	mov	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	00da      	lsls	r2, r3, #3
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	0d1b      	lsrs	r3, r3, #20
 8007198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800719a:	fb02 f303 	mul.w	r3, r2, r3
 800719e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80071a0:	e060      	b.n	8007264 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80071a8:	d107      	bne.n	80071ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d104      	bne.n	80071ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c0:	d050      	beq.n	8007264 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071c2:	f7fc f985 	bl	80034d0 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d902      	bls.n	80071d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d13d      	bne.n	8007254 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80071e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071f0:	d111      	bne.n	8007216 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071fa:	d004      	beq.n	8007206 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007204:	d107      	bne.n	8007216 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007214:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800721a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800721e:	d10f      	bne.n	8007240 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800722e:	601a      	str	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800723e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e010      	b.n	8007276 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800725a:	2300      	movs	r3, #0
 800725c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	3b01      	subs	r3, #1
 8007262:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689a      	ldr	r2, [r3, #8]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	4013      	ands	r3, r2
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	429a      	cmp	r2, r3
 8007272:	d196      	bne.n	80071a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3728      	adds	r7, #40	@ 0x28
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	2000000c 	.word	0x2000000c

08007284 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af02      	add	r7, sp, #8
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2200      	movs	r2, #0
 8007298:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f7ff ff5b 	bl	8007158 <SPI_WaitFifoStateUntilTimeout>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d007      	beq.n	80072b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072ac:	f043 0220 	orr.w	r2, r3, #32
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e027      	b.n	8007308 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2200      	movs	r2, #0
 80072c0:	2180      	movs	r1, #128	@ 0x80
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f7ff fec0 	bl	8007048 <SPI_WaitFlagStateUntilTimeout>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d007      	beq.n	80072de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072d2:	f043 0220 	orr.w	r2, r3, #32
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e014      	b.n	8007308 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f7ff ff34 	bl	8007158 <SPI_WaitFifoStateUntilTimeout>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d007      	beq.n	8007306 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072fa:	f043 0220 	orr.w	r2, r3, #32
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e000      	b.n	8007308 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e049      	b.n	80073b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d106      	bne.n	800733c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7fb fa08 	bl	800274c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3304      	adds	r3, #4
 800734c:	4619      	mov	r1, r3
 800734e:	4610      	mov	r0, r2
 8007350:	f001 f8f0 	bl	8008534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d001      	beq.n	80073d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e054      	b.n	8007482 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2202      	movs	r2, #2
 80073dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f042 0201 	orr.w	r2, r2, #1
 80073ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a26      	ldr	r2, [pc, #152]	@ (8007490 <HAL_TIM_Base_Start_IT+0xd0>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d022      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x80>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007402:	d01d      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x80>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a22      	ldr	r2, [pc, #136]	@ (8007494 <HAL_TIM_Base_Start_IT+0xd4>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d018      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x80>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a21      	ldr	r2, [pc, #132]	@ (8007498 <HAL_TIM_Base_Start_IT+0xd8>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d013      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x80>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a1f      	ldr	r2, [pc, #124]	@ (800749c <HAL_TIM_Base_Start_IT+0xdc>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00e      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x80>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a1e      	ldr	r2, [pc, #120]	@ (80074a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d009      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x80>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a1c      	ldr	r2, [pc, #112]	@ (80074a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d004      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x80>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a1b      	ldr	r2, [pc, #108]	@ (80074a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d115      	bne.n	800746c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689a      	ldr	r2, [r3, #8]
 8007446:	4b19      	ldr	r3, [pc, #100]	@ (80074ac <HAL_TIM_Base_Start_IT+0xec>)
 8007448:	4013      	ands	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b06      	cmp	r3, #6
 8007450:	d015      	beq.n	800747e <HAL_TIM_Base_Start_IT+0xbe>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007458:	d011      	beq.n	800747e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f042 0201 	orr.w	r2, r2, #1
 8007468:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800746a:	e008      	b.n	800747e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 0201 	orr.w	r2, r2, #1
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	e000      	b.n	8007480 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800747e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	40012c00 	.word	0x40012c00
 8007494:	40000400 	.word	0x40000400
 8007498:	40000800 	.word	0x40000800
 800749c:	40000c00 	.word	0x40000c00
 80074a0:	40013400 	.word	0x40013400
 80074a4:	40014000 	.word	0x40014000
 80074a8:	40015000 	.word	0x40015000
 80074ac:	00010007 	.word	0x00010007

080074b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68da      	ldr	r2, [r3, #12]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 0201 	bic.w	r2, r2, #1
 80074c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6a1a      	ldr	r2, [r3, #32]
 80074ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 80074d2:	4013      	ands	r3, r2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10f      	bne.n	80074f8 <HAL_TIM_Base_Stop_IT+0x48>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6a1a      	ldr	r2, [r3, #32]
 80074de:	f244 4344 	movw	r3, #17476	@ 0x4444
 80074e2:	4013      	ands	r3, r2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d107      	bne.n	80074f8 <HAL_TIM_Base_Stop_IT+0x48>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0201 	bic.w	r2, r2, #1
 80074f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b082      	sub	sp, #8
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e049      	b.n	80075b4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	d106      	bne.n	800753a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f841 	bl	80075bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2202      	movs	r2, #2
 800753e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3304      	adds	r3, #4
 800754a:	4619      	mov	r1, r3
 800754c:	4610      	mov	r0, r2
 800754e:	f000 fff1 	bl	8008534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d109      	bne.n	80075fc <HAL_TIM_PWM_Start_DMA+0x2c>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	bf0c      	ite	eq
 80075f4:	2301      	moveq	r3, #1
 80075f6:	2300      	movne	r3, #0
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	e03c      	b.n	8007676 <HAL_TIM_PWM_Start_DMA+0xa6>
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2b04      	cmp	r3, #4
 8007600:	d109      	bne.n	8007616 <HAL_TIM_PWM_Start_DMA+0x46>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b02      	cmp	r3, #2
 800760c:	bf0c      	ite	eq
 800760e:	2301      	moveq	r3, #1
 8007610:	2300      	movne	r3, #0
 8007612:	b2db      	uxtb	r3, r3
 8007614:	e02f      	b.n	8007676 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2b08      	cmp	r3, #8
 800761a:	d109      	bne.n	8007630 <HAL_TIM_PWM_Start_DMA+0x60>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b02      	cmp	r3, #2
 8007626:	bf0c      	ite	eq
 8007628:	2301      	moveq	r3, #1
 800762a:	2300      	movne	r3, #0
 800762c:	b2db      	uxtb	r3, r3
 800762e:	e022      	b.n	8007676 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2b0c      	cmp	r3, #12
 8007634:	d109      	bne.n	800764a <HAL_TIM_PWM_Start_DMA+0x7a>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b02      	cmp	r3, #2
 8007640:	bf0c      	ite	eq
 8007642:	2301      	moveq	r3, #1
 8007644:	2300      	movne	r3, #0
 8007646:	b2db      	uxtb	r3, r3
 8007648:	e015      	b.n	8007676 <HAL_TIM_PWM_Start_DMA+0xa6>
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	2b10      	cmp	r3, #16
 800764e:	d109      	bne.n	8007664 <HAL_TIM_PWM_Start_DMA+0x94>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b02      	cmp	r3, #2
 800765a:	bf0c      	ite	eq
 800765c:	2301      	moveq	r3, #1
 800765e:	2300      	movne	r3, #0
 8007660:	b2db      	uxtb	r3, r3
 8007662:	e008      	b.n	8007676 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b02      	cmp	r3, #2
 800766e:	bf0c      	ite	eq
 8007670:	2301      	moveq	r3, #1
 8007672:	2300      	movne	r3, #0
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d001      	beq.n	800767e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800767a:	2302      	movs	r3, #2
 800767c:	e1b5      	b.n	80079ea <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d109      	bne.n	8007698 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b01      	cmp	r3, #1
 800768e:	bf0c      	ite	eq
 8007690:	2301      	moveq	r3, #1
 8007692:	2300      	movne	r3, #0
 8007694:	b2db      	uxtb	r3, r3
 8007696:	e03c      	b.n	8007712 <HAL_TIM_PWM_Start_DMA+0x142>
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2b04      	cmp	r3, #4
 800769c:	d109      	bne.n	80076b2 <HAL_TIM_PWM_Start_DMA+0xe2>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	bf0c      	ite	eq
 80076aa:	2301      	moveq	r3, #1
 80076ac:	2300      	movne	r3, #0
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	e02f      	b.n	8007712 <HAL_TIM_PWM_Start_DMA+0x142>
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	2b08      	cmp	r3, #8
 80076b6:	d109      	bne.n	80076cc <HAL_TIM_PWM_Start_DMA+0xfc>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	bf0c      	ite	eq
 80076c4:	2301      	moveq	r3, #1
 80076c6:	2300      	movne	r3, #0
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	e022      	b.n	8007712 <HAL_TIM_PWM_Start_DMA+0x142>
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2b0c      	cmp	r3, #12
 80076d0:	d109      	bne.n	80076e6 <HAL_TIM_PWM_Start_DMA+0x116>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b01      	cmp	r3, #1
 80076dc:	bf0c      	ite	eq
 80076de:	2301      	moveq	r3, #1
 80076e0:	2300      	movne	r3, #0
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	e015      	b.n	8007712 <HAL_TIM_PWM_Start_DMA+0x142>
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b10      	cmp	r3, #16
 80076ea:	d109      	bne.n	8007700 <HAL_TIM_PWM_Start_DMA+0x130>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	bf0c      	ite	eq
 80076f8:	2301      	moveq	r3, #1
 80076fa:	2300      	movne	r3, #0
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	e008      	b.n	8007712 <HAL_TIM_PWM_Start_DMA+0x142>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b01      	cmp	r3, #1
 800770a:	bf0c      	ite	eq
 800770c:	2301      	moveq	r3, #1
 800770e:	2300      	movne	r3, #0
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d034      	beq.n	8007780 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <HAL_TIM_PWM_Start_DMA+0x152>
 800771c:	887b      	ldrh	r3, [r7, #2]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e161      	b.n	80079ea <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d104      	bne.n	8007736 <HAL_TIM_PWM_Start_DMA+0x166>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2202      	movs	r2, #2
 8007730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007734:	e026      	b.n	8007784 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2b04      	cmp	r3, #4
 800773a:	d104      	bne.n	8007746 <HAL_TIM_PWM_Start_DMA+0x176>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2202      	movs	r2, #2
 8007740:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007744:	e01e      	b.n	8007784 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b08      	cmp	r3, #8
 800774a:	d104      	bne.n	8007756 <HAL_TIM_PWM_Start_DMA+0x186>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2202      	movs	r2, #2
 8007750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007754:	e016      	b.n	8007784 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2b0c      	cmp	r3, #12
 800775a:	d104      	bne.n	8007766 <HAL_TIM_PWM_Start_DMA+0x196>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007764:	e00e      	b.n	8007784 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	2b10      	cmp	r3, #16
 800776a:	d104      	bne.n	8007776 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2202      	movs	r2, #2
 8007770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007774:	e006      	b.n	8007784 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2202      	movs	r2, #2
 800777a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800777e:	e001      	b.n	8007784 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e132      	b.n	80079ea <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b0c      	cmp	r3, #12
 8007788:	f200 80ae 	bhi.w	80078e8 <HAL_TIM_PWM_Start_DMA+0x318>
 800778c:	a201      	add	r2, pc, #4	@ (adr r2, 8007794 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800778e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007792:	bf00      	nop
 8007794:	080077c9 	.word	0x080077c9
 8007798:	080078e9 	.word	0x080078e9
 800779c:	080078e9 	.word	0x080078e9
 80077a0:	080078e9 	.word	0x080078e9
 80077a4:	08007811 	.word	0x08007811
 80077a8:	080078e9 	.word	0x080078e9
 80077ac:	080078e9 	.word	0x080078e9
 80077b0:	080078e9 	.word	0x080078e9
 80077b4:	08007859 	.word	0x08007859
 80077b8:	080078e9 	.word	0x080078e9
 80077bc:	080078e9 	.word	0x080078e9
 80077c0:	080078e9 	.word	0x080078e9
 80077c4:	080078a1 	.word	0x080078a1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077cc:	4a89      	ldr	r2, [pc, #548]	@ (80079f4 <HAL_TIM_PWM_Start_DMA+0x424>)
 80077ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d4:	4a88      	ldr	r2, [pc, #544]	@ (80079f8 <HAL_TIM_PWM_Start_DMA+0x428>)
 80077d6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077dc:	4a87      	ldr	r2, [pc, #540]	@ (80079fc <HAL_TIM_PWM_Start_DMA+0x42c>)
 80077de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80077e4:	6879      	ldr	r1, [r7, #4]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3334      	adds	r3, #52	@ 0x34
 80077ec:	461a      	mov	r2, r3
 80077ee:	887b      	ldrh	r3, [r7, #2]
 80077f0:	f7fd fd84 	bl	80052fc <HAL_DMA_Start_IT>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e0f5      	b.n	80079ea <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68da      	ldr	r2, [r3, #12]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800780c:	60da      	str	r2, [r3, #12]
      break;
 800780e:	e06e      	b.n	80078ee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007814:	4a77      	ldr	r2, [pc, #476]	@ (80079f4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007816:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781c:	4a76      	ldr	r2, [pc, #472]	@ (80079f8 <HAL_TIM_PWM_Start_DMA+0x428>)
 800781e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007824:	4a75      	ldr	r2, [pc, #468]	@ (80079fc <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007826:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800782c:	6879      	ldr	r1, [r7, #4]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	3338      	adds	r3, #56	@ 0x38
 8007834:	461a      	mov	r2, r3
 8007836:	887b      	ldrh	r3, [r7, #2]
 8007838:	f7fd fd60 	bl	80052fc <HAL_DMA_Start_IT>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e0d1      	b.n	80079ea <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007854:	60da      	str	r2, [r3, #12]
      break;
 8007856:	e04a      	b.n	80078ee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785c:	4a65      	ldr	r2, [pc, #404]	@ (80079f4 <HAL_TIM_PWM_Start_DMA+0x424>)
 800785e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007864:	4a64      	ldr	r2, [pc, #400]	@ (80079f8 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007866:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786c:	4a63      	ldr	r2, [pc, #396]	@ (80079fc <HAL_TIM_PWM_Start_DMA+0x42c>)
 800786e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007874:	6879      	ldr	r1, [r7, #4]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	333c      	adds	r3, #60	@ 0x3c
 800787c:	461a      	mov	r2, r3
 800787e:	887b      	ldrh	r3, [r7, #2]
 8007880:	f7fd fd3c 	bl	80052fc <HAL_DMA_Start_IT>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e0ad      	b.n	80079ea <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800789c:	60da      	str	r2, [r3, #12]
      break;
 800789e:	e026      	b.n	80078ee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078a4:	4a53      	ldr	r2, [pc, #332]	@ (80079f4 <HAL_TIM_PWM_Start_DMA+0x424>)
 80078a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ac:	4a52      	ldr	r2, [pc, #328]	@ (80079f8 <HAL_TIM_PWM_Start_DMA+0x428>)
 80078ae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b4:	4a51      	ldr	r2, [pc, #324]	@ (80079fc <HAL_TIM_PWM_Start_DMA+0x42c>)
 80078b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80078bc:	6879      	ldr	r1, [r7, #4]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3340      	adds	r3, #64	@ 0x40
 80078c4:	461a      	mov	r2, r3
 80078c6:	887b      	ldrh	r3, [r7, #2]
 80078c8:	f7fd fd18 	bl	80052fc <HAL_DMA_Start_IT>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e089      	b.n	80079ea <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68da      	ldr	r2, [r3, #12]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80078e4:	60da      	str	r2, [r3, #12]
      break;
 80078e6:	e002      	b.n	80078ee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	75fb      	strb	r3, [r7, #23]
      break;
 80078ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80078ee:	7dfb      	ldrb	r3, [r7, #23]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d179      	bne.n	80079e8 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2201      	movs	r2, #1
 80078fa:	68b9      	ldr	r1, [r7, #8]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f001 fa93 	bl	8008e28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a3e      	ldr	r2, [pc, #248]	@ (8007a00 <HAL_TIM_PWM_Start_DMA+0x430>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d018      	beq.n	800793e <HAL_TIM_PWM_Start_DMA+0x36e>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a3c      	ldr	r2, [pc, #240]	@ (8007a04 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d013      	beq.n	800793e <HAL_TIM_PWM_Start_DMA+0x36e>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a3b      	ldr	r2, [pc, #236]	@ (8007a08 <HAL_TIM_PWM_Start_DMA+0x438>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d00e      	beq.n	800793e <HAL_TIM_PWM_Start_DMA+0x36e>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a39      	ldr	r2, [pc, #228]	@ (8007a0c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d009      	beq.n	800793e <HAL_TIM_PWM_Start_DMA+0x36e>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a38      	ldr	r2, [pc, #224]	@ (8007a10 <HAL_TIM_PWM_Start_DMA+0x440>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d004      	beq.n	800793e <HAL_TIM_PWM_Start_DMA+0x36e>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a36      	ldr	r2, [pc, #216]	@ (8007a14 <HAL_TIM_PWM_Start_DMA+0x444>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d101      	bne.n	8007942 <HAL_TIM_PWM_Start_DMA+0x372>
 800793e:	2301      	movs	r3, #1
 8007940:	e000      	b.n	8007944 <HAL_TIM_PWM_Start_DMA+0x374>
 8007942:	2300      	movs	r3, #0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d007      	beq.n	8007958 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007956:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a28      	ldr	r2, [pc, #160]	@ (8007a00 <HAL_TIM_PWM_Start_DMA+0x430>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d022      	beq.n	80079a8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800796a:	d01d      	beq.n	80079a8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a29      	ldr	r2, [pc, #164]	@ (8007a18 <HAL_TIM_PWM_Start_DMA+0x448>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d018      	beq.n	80079a8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a28      	ldr	r2, [pc, #160]	@ (8007a1c <HAL_TIM_PWM_Start_DMA+0x44c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d013      	beq.n	80079a8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a26      	ldr	r2, [pc, #152]	@ (8007a20 <HAL_TIM_PWM_Start_DMA+0x450>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d00e      	beq.n	80079a8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a1d      	ldr	r2, [pc, #116]	@ (8007a04 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d009      	beq.n	80079a8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a1b      	ldr	r2, [pc, #108]	@ (8007a08 <HAL_TIM_PWM_Start_DMA+0x438>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d004      	beq.n	80079a8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a1c      	ldr	r2, [pc, #112]	@ (8007a14 <HAL_TIM_PWM_Start_DMA+0x444>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d115      	bne.n	80079d4 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689a      	ldr	r2, [r3, #8]
 80079ae:	4b1d      	ldr	r3, [pc, #116]	@ (8007a24 <HAL_TIM_PWM_Start_DMA+0x454>)
 80079b0:	4013      	ands	r3, r2
 80079b2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	2b06      	cmp	r3, #6
 80079b8:	d015      	beq.n	80079e6 <HAL_TIM_PWM_Start_DMA+0x416>
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079c0:	d011      	beq.n	80079e6 <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f042 0201 	orr.w	r2, r2, #1
 80079d0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079d2:	e008      	b.n	80079e6 <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f042 0201 	orr.w	r2, r2, #1
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	e000      	b.n	80079e8 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079e6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3718      	adds	r7, #24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	08008423 	.word	0x08008423
 80079f8:	080084cb 	.word	0x080084cb
 80079fc:	08008391 	.word	0x08008391
 8007a00:	40012c00 	.word	0x40012c00
 8007a04:	40013400 	.word	0x40013400
 8007a08:	40014000 	.word	0x40014000
 8007a0c:	40014400 	.word	0x40014400
 8007a10:	40014800 	.word	0x40014800
 8007a14:	40015000 	.word	0x40015000
 8007a18:	40000400 	.word	0x40000400
 8007a1c:	40000800 	.word	0x40000800
 8007a20:	40000c00 	.word	0x40000c00
 8007a24:	00010007 	.word	0x00010007

08007a28 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b0c      	cmp	r3, #12
 8007a3a:	d855      	bhi.n	8007ae8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a44 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a42:	bf00      	nop
 8007a44:	08007a79 	.word	0x08007a79
 8007a48:	08007ae9 	.word	0x08007ae9
 8007a4c:	08007ae9 	.word	0x08007ae9
 8007a50:	08007ae9 	.word	0x08007ae9
 8007a54:	08007a95 	.word	0x08007a95
 8007a58:	08007ae9 	.word	0x08007ae9
 8007a5c:	08007ae9 	.word	0x08007ae9
 8007a60:	08007ae9 	.word	0x08007ae9
 8007a64:	08007ab1 	.word	0x08007ab1
 8007a68:	08007ae9 	.word	0x08007ae9
 8007a6c:	08007ae9 	.word	0x08007ae9
 8007a70:	08007ae9 	.word	0x08007ae9
 8007a74:	08007acd 	.word	0x08007acd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007a86:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fd fd09 	bl	80054a4 <HAL_DMA_Abort_IT>
      break;
 8007a92:	e02c      	b.n	8007aee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007aa2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7fd fcfb 	bl	80054a4 <HAL_DMA_Abort_IT>
      break;
 8007aae:	e01e      	b.n	8007aee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68da      	ldr	r2, [r3, #12]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007abe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fd fced 	bl	80054a4 <HAL_DMA_Abort_IT>
      break;
 8007aca:	e010      	b.n	8007aee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007ada:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7fd fcdf 	bl	80054a4 <HAL_DMA_Abort_IT>
      break;
 8007ae6:	e002      	b.n	8007aee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	73fb      	strb	r3, [r7, #15]
      break;
 8007aec:	bf00      	nop
  }

  if (status == HAL_OK)
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f040 8086 	bne.w	8007c02 <HAL_TIM_PWM_Stop_DMA+0x1da>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2200      	movs	r2, #0
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f001 f992 	bl	8008e28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a40      	ldr	r2, [pc, #256]	@ (8007c0c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d018      	beq.n	8007b40 <HAL_TIM_PWM_Stop_DMA+0x118>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a3f      	ldr	r2, [pc, #252]	@ (8007c10 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d013      	beq.n	8007b40 <HAL_TIM_PWM_Stop_DMA+0x118>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a3d      	ldr	r2, [pc, #244]	@ (8007c14 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d00e      	beq.n	8007b40 <HAL_TIM_PWM_Stop_DMA+0x118>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a3c      	ldr	r2, [pc, #240]	@ (8007c18 <HAL_TIM_PWM_Stop_DMA+0x1f0>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d009      	beq.n	8007b40 <HAL_TIM_PWM_Stop_DMA+0x118>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a3a      	ldr	r2, [pc, #232]	@ (8007c1c <HAL_TIM_PWM_Stop_DMA+0x1f4>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d004      	beq.n	8007b40 <HAL_TIM_PWM_Stop_DMA+0x118>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a39      	ldr	r2, [pc, #228]	@ (8007c20 <HAL_TIM_PWM_Stop_DMA+0x1f8>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d101      	bne.n	8007b44 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8007b40:	2301      	movs	r3, #1
 8007b42:	e000      	b.n	8007b46 <HAL_TIM_PWM_Stop_DMA+0x11e>
 8007b44:	2300      	movs	r3, #0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d017      	beq.n	8007b7a <HAL_TIM_PWM_Stop_DMA+0x152>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6a1a      	ldr	r2, [r3, #32]
 8007b50:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b54:	4013      	ands	r3, r2
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10f      	bne.n	8007b7a <HAL_TIM_PWM_Stop_DMA+0x152>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6a1a      	ldr	r2, [r3, #32]
 8007b60:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007b64:	4013      	ands	r3, r2
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d107      	bne.n	8007b7a <HAL_TIM_PWM_Stop_DMA+0x152>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	6a1a      	ldr	r2, [r3, #32]
 8007b80:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b84:	4013      	ands	r3, r2
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10f      	bne.n	8007baa <HAL_TIM_PWM_Stop_DMA+0x182>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	6a1a      	ldr	r2, [r3, #32]
 8007b90:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007b94:	4013      	ands	r3, r2
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d107      	bne.n	8007baa <HAL_TIM_PWM_Stop_DMA+0x182>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 0201 	bic.w	r2, r2, #1
 8007ba8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d104      	bne.n	8007bba <HAL_TIM_PWM_Stop_DMA+0x192>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bb8:	e023      	b.n	8007c02 <HAL_TIM_PWM_Stop_DMA+0x1da>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b04      	cmp	r3, #4
 8007bbe:	d104      	bne.n	8007bca <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bc8:	e01b      	b.n	8007c02 <HAL_TIM_PWM_Stop_DMA+0x1da>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b08      	cmp	r3, #8
 8007bce:	d104      	bne.n	8007bda <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bd8:	e013      	b.n	8007c02 <HAL_TIM_PWM_Stop_DMA+0x1da>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2b0c      	cmp	r3, #12
 8007bde:	d104      	bne.n	8007bea <HAL_TIM_PWM_Stop_DMA+0x1c2>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007be8:	e00b      	b.n	8007c02 <HAL_TIM_PWM_Stop_DMA+0x1da>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b10      	cmp	r3, #16
 8007bee:	d104      	bne.n	8007bfa <HAL_TIM_PWM_Stop_DMA+0x1d2>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bf8:	e003      	b.n	8007c02 <HAL_TIM_PWM_Stop_DMA+0x1da>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	40012c00 	.word	0x40012c00
 8007c10:	40013400 	.word	0x40013400
 8007c14:	40014000 	.word	0x40014000
 8007c18:	40014400 	.word	0x40014400
 8007c1c:	40014800 	.word	0x40014800
 8007c20:	40015000 	.word	0x40015000

08007c24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d020      	beq.n	8007c88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f003 0302 	and.w	r3, r3, #2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d01b      	beq.n	8007c88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f06f 0202 	mvn.w	r2, #2
 8007c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	f003 0303 	and.w	r3, r3, #3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fb5c 	bl	800832c <HAL_TIM_IC_CaptureCallback>
 8007c74:	e005      	b.n	8007c82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fb4e 	bl	8008318 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fb5f 	bl	8008340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	f003 0304 	and.w	r3, r3, #4
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d020      	beq.n	8007cd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d01b      	beq.n	8007cd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f06f 0204 	mvn.w	r2, #4
 8007ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2202      	movs	r2, #2
 8007caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d003      	beq.n	8007cc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fb36 	bl	800832c <HAL_TIM_IC_CaptureCallback>
 8007cc0:	e005      	b.n	8007cce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fb28 	bl	8008318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fb39 	bl	8008340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	f003 0308 	and.w	r3, r3, #8
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d020      	beq.n	8007d20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f003 0308 	and.w	r3, r3, #8
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d01b      	beq.n	8007d20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f06f 0208 	mvn.w	r2, #8
 8007cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2204      	movs	r2, #4
 8007cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	f003 0303 	and.w	r3, r3, #3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d003      	beq.n	8007d0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fb10 	bl	800832c <HAL_TIM_IC_CaptureCallback>
 8007d0c:	e005      	b.n	8007d1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fb02 	bl	8008318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fb13 	bl	8008340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	f003 0310 	and.w	r3, r3, #16
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d020      	beq.n	8007d6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f003 0310 	and.w	r3, r3, #16
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d01b      	beq.n	8007d6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f06f 0210 	mvn.w	r2, #16
 8007d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2208      	movs	r2, #8
 8007d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 faea 	bl	800832c <HAL_TIM_IC_CaptureCallback>
 8007d58:	e005      	b.n	8007d66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 fadc 	bl	8008318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 faed 	bl	8008340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00c      	beq.n	8007d90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d007      	beq.n	8007d90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f06f 0201 	mvn.w	r2, #1
 8007d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7f9 fe04 	bl	8001998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d104      	bne.n	8007da4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00c      	beq.n	8007dbe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d007      	beq.n	8007dbe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f001 faaf 	bl	800931c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00c      	beq.n	8007de2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d007      	beq.n	8007de2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f001 faa7 	bl	8009330 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00c      	beq.n	8007e06 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d007      	beq.n	8007e06 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fab1 	bl	8008368 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	f003 0320 	and.w	r3, r3, #32
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00c      	beq.n	8007e2a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f003 0320 	and.w	r3, r3, #32
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d007      	beq.n	8007e2a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f06f 0220 	mvn.w	r2, #32
 8007e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f001 fa6f 	bl	8009308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00c      	beq.n	8007e4e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d007      	beq.n	8007e4e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f001 fa7b 	bl	8009344 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00c      	beq.n	8007e72 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d007      	beq.n	8007e72 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f001 fa73 	bl	8009358 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00c      	beq.n	8007e96 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d007      	beq.n	8007e96 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f001 fa6b 	bl	800936c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00c      	beq.n	8007eba <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d007      	beq.n	8007eba <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f001 fa63 	bl	8009380 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007eba:	bf00      	nop
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d101      	bne.n	8007ee2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ede:	2302      	movs	r3, #2
 8007ee0:	e0ff      	b.n	80080e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b14      	cmp	r3, #20
 8007eee:	f200 80f0 	bhi.w	80080d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef8:	08007f4d 	.word	0x08007f4d
 8007efc:	080080d3 	.word	0x080080d3
 8007f00:	080080d3 	.word	0x080080d3
 8007f04:	080080d3 	.word	0x080080d3
 8007f08:	08007f8d 	.word	0x08007f8d
 8007f0c:	080080d3 	.word	0x080080d3
 8007f10:	080080d3 	.word	0x080080d3
 8007f14:	080080d3 	.word	0x080080d3
 8007f18:	08007fcf 	.word	0x08007fcf
 8007f1c:	080080d3 	.word	0x080080d3
 8007f20:	080080d3 	.word	0x080080d3
 8007f24:	080080d3 	.word	0x080080d3
 8007f28:	0800800f 	.word	0x0800800f
 8007f2c:	080080d3 	.word	0x080080d3
 8007f30:	080080d3 	.word	0x080080d3
 8007f34:	080080d3 	.word	0x080080d3
 8007f38:	08008051 	.word	0x08008051
 8007f3c:	080080d3 	.word	0x080080d3
 8007f40:	080080d3 	.word	0x080080d3
 8007f44:	080080d3 	.word	0x080080d3
 8007f48:	08008091 	.word	0x08008091
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68b9      	ldr	r1, [r7, #8]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fba2 	bl	800869c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	699a      	ldr	r2, [r3, #24]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f042 0208 	orr.w	r2, r2, #8
 8007f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	699a      	ldr	r2, [r3, #24]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f022 0204 	bic.w	r2, r2, #4
 8007f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6999      	ldr	r1, [r3, #24]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	691a      	ldr	r2, [r3, #16]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	430a      	orrs	r2, r1
 8007f88:	619a      	str	r2, [r3, #24]
      break;
 8007f8a:	e0a5      	b.n	80080d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68b9      	ldr	r1, [r7, #8]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 fc1c 	bl	80087d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	699a      	ldr	r2, [r3, #24]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	699a      	ldr	r2, [r3, #24]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6999      	ldr	r1, [r3, #24]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	021a      	lsls	r2, r3, #8
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	619a      	str	r2, [r3, #24]
      break;
 8007fcc:	e084      	b.n	80080d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68b9      	ldr	r1, [r7, #8]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 fc8f 	bl	80088f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69da      	ldr	r2, [r3, #28]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f042 0208 	orr.w	r2, r2, #8
 8007fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	69da      	ldr	r2, [r3, #28]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 0204 	bic.w	r2, r2, #4
 8007ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	69d9      	ldr	r1, [r3, #28]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	691a      	ldr	r2, [r3, #16]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	61da      	str	r2, [r3, #28]
      break;
 800800c:	e064      	b.n	80080d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68b9      	ldr	r1, [r7, #8]
 8008014:	4618      	mov	r0, r3
 8008016:	f000 fd01 	bl	8008a1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	69da      	ldr	r2, [r3, #28]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69da      	ldr	r2, [r3, #28]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	69d9      	ldr	r1, [r3, #28]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	021a      	lsls	r2, r3, #8
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	61da      	str	r2, [r3, #28]
      break;
 800804e:	e043      	b.n	80080d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68b9      	ldr	r1, [r7, #8]
 8008056:	4618      	mov	r0, r3
 8008058:	f000 fd74 	bl	8008b44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f042 0208 	orr.w	r2, r2, #8
 800806a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f022 0204 	bic.w	r2, r2, #4
 800807a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	691a      	ldr	r2, [r3, #16]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800808e:	e023      	b.n	80080d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68b9      	ldr	r1, [r7, #8]
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fdbe 	bl	8008c18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	021a      	lsls	r2, r3, #8
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80080d0:	e002      	b.n	80080d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	75fb      	strb	r3, [r7, #23]
      break;
 80080d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3718      	adds	r7, #24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop

080080ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008100:	2b01      	cmp	r3, #1
 8008102:	d101      	bne.n	8008108 <HAL_TIM_ConfigClockSource+0x1c>
 8008104:	2302      	movs	r3, #2
 8008106:	e0f6      	b.n	80082f6 <HAL_TIM_ConfigClockSource+0x20a>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2202      	movs	r2, #2
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008126:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800812a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008132:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a6f      	ldr	r2, [pc, #444]	@ (8008300 <HAL_TIM_ConfigClockSource+0x214>)
 8008142:	4293      	cmp	r3, r2
 8008144:	f000 80c1 	beq.w	80082ca <HAL_TIM_ConfigClockSource+0x1de>
 8008148:	4a6d      	ldr	r2, [pc, #436]	@ (8008300 <HAL_TIM_ConfigClockSource+0x214>)
 800814a:	4293      	cmp	r3, r2
 800814c:	f200 80c6 	bhi.w	80082dc <HAL_TIM_ConfigClockSource+0x1f0>
 8008150:	4a6c      	ldr	r2, [pc, #432]	@ (8008304 <HAL_TIM_ConfigClockSource+0x218>)
 8008152:	4293      	cmp	r3, r2
 8008154:	f000 80b9 	beq.w	80082ca <HAL_TIM_ConfigClockSource+0x1de>
 8008158:	4a6a      	ldr	r2, [pc, #424]	@ (8008304 <HAL_TIM_ConfigClockSource+0x218>)
 800815a:	4293      	cmp	r3, r2
 800815c:	f200 80be 	bhi.w	80082dc <HAL_TIM_ConfigClockSource+0x1f0>
 8008160:	4a69      	ldr	r2, [pc, #420]	@ (8008308 <HAL_TIM_ConfigClockSource+0x21c>)
 8008162:	4293      	cmp	r3, r2
 8008164:	f000 80b1 	beq.w	80082ca <HAL_TIM_ConfigClockSource+0x1de>
 8008168:	4a67      	ldr	r2, [pc, #412]	@ (8008308 <HAL_TIM_ConfigClockSource+0x21c>)
 800816a:	4293      	cmp	r3, r2
 800816c:	f200 80b6 	bhi.w	80082dc <HAL_TIM_ConfigClockSource+0x1f0>
 8008170:	4a66      	ldr	r2, [pc, #408]	@ (800830c <HAL_TIM_ConfigClockSource+0x220>)
 8008172:	4293      	cmp	r3, r2
 8008174:	f000 80a9 	beq.w	80082ca <HAL_TIM_ConfigClockSource+0x1de>
 8008178:	4a64      	ldr	r2, [pc, #400]	@ (800830c <HAL_TIM_ConfigClockSource+0x220>)
 800817a:	4293      	cmp	r3, r2
 800817c:	f200 80ae 	bhi.w	80082dc <HAL_TIM_ConfigClockSource+0x1f0>
 8008180:	4a63      	ldr	r2, [pc, #396]	@ (8008310 <HAL_TIM_ConfigClockSource+0x224>)
 8008182:	4293      	cmp	r3, r2
 8008184:	f000 80a1 	beq.w	80082ca <HAL_TIM_ConfigClockSource+0x1de>
 8008188:	4a61      	ldr	r2, [pc, #388]	@ (8008310 <HAL_TIM_ConfigClockSource+0x224>)
 800818a:	4293      	cmp	r3, r2
 800818c:	f200 80a6 	bhi.w	80082dc <HAL_TIM_ConfigClockSource+0x1f0>
 8008190:	4a60      	ldr	r2, [pc, #384]	@ (8008314 <HAL_TIM_ConfigClockSource+0x228>)
 8008192:	4293      	cmp	r3, r2
 8008194:	f000 8099 	beq.w	80082ca <HAL_TIM_ConfigClockSource+0x1de>
 8008198:	4a5e      	ldr	r2, [pc, #376]	@ (8008314 <HAL_TIM_ConfigClockSource+0x228>)
 800819a:	4293      	cmp	r3, r2
 800819c:	f200 809e 	bhi.w	80082dc <HAL_TIM_ConfigClockSource+0x1f0>
 80081a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081a4:	f000 8091 	beq.w	80082ca <HAL_TIM_ConfigClockSource+0x1de>
 80081a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081ac:	f200 8096 	bhi.w	80082dc <HAL_TIM_ConfigClockSource+0x1f0>
 80081b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081b4:	f000 8089 	beq.w	80082ca <HAL_TIM_ConfigClockSource+0x1de>
 80081b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081bc:	f200 808e 	bhi.w	80082dc <HAL_TIM_ConfigClockSource+0x1f0>
 80081c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081c4:	d03e      	beq.n	8008244 <HAL_TIM_ConfigClockSource+0x158>
 80081c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081ca:	f200 8087 	bhi.w	80082dc <HAL_TIM_ConfigClockSource+0x1f0>
 80081ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081d2:	f000 8086 	beq.w	80082e2 <HAL_TIM_ConfigClockSource+0x1f6>
 80081d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081da:	d87f      	bhi.n	80082dc <HAL_TIM_ConfigClockSource+0x1f0>
 80081dc:	2b70      	cmp	r3, #112	@ 0x70
 80081de:	d01a      	beq.n	8008216 <HAL_TIM_ConfigClockSource+0x12a>
 80081e0:	2b70      	cmp	r3, #112	@ 0x70
 80081e2:	d87b      	bhi.n	80082dc <HAL_TIM_ConfigClockSource+0x1f0>
 80081e4:	2b60      	cmp	r3, #96	@ 0x60
 80081e6:	d050      	beq.n	800828a <HAL_TIM_ConfigClockSource+0x19e>
 80081e8:	2b60      	cmp	r3, #96	@ 0x60
 80081ea:	d877      	bhi.n	80082dc <HAL_TIM_ConfigClockSource+0x1f0>
 80081ec:	2b50      	cmp	r3, #80	@ 0x50
 80081ee:	d03c      	beq.n	800826a <HAL_TIM_ConfigClockSource+0x17e>
 80081f0:	2b50      	cmp	r3, #80	@ 0x50
 80081f2:	d873      	bhi.n	80082dc <HAL_TIM_ConfigClockSource+0x1f0>
 80081f4:	2b40      	cmp	r3, #64	@ 0x40
 80081f6:	d058      	beq.n	80082aa <HAL_TIM_ConfigClockSource+0x1be>
 80081f8:	2b40      	cmp	r3, #64	@ 0x40
 80081fa:	d86f      	bhi.n	80082dc <HAL_TIM_ConfigClockSource+0x1f0>
 80081fc:	2b30      	cmp	r3, #48	@ 0x30
 80081fe:	d064      	beq.n	80082ca <HAL_TIM_ConfigClockSource+0x1de>
 8008200:	2b30      	cmp	r3, #48	@ 0x30
 8008202:	d86b      	bhi.n	80082dc <HAL_TIM_ConfigClockSource+0x1f0>
 8008204:	2b20      	cmp	r3, #32
 8008206:	d060      	beq.n	80082ca <HAL_TIM_ConfigClockSource+0x1de>
 8008208:	2b20      	cmp	r3, #32
 800820a:	d867      	bhi.n	80082dc <HAL_TIM_ConfigClockSource+0x1f0>
 800820c:	2b00      	cmp	r3, #0
 800820e:	d05c      	beq.n	80082ca <HAL_TIM_ConfigClockSource+0x1de>
 8008210:	2b10      	cmp	r3, #16
 8008212:	d05a      	beq.n	80082ca <HAL_TIM_ConfigClockSource+0x1de>
 8008214:	e062      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008226:	f000 fddf 	bl	8008de8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008238:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	609a      	str	r2, [r3, #8]
      break;
 8008242:	e04f      	b.n	80082e4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008254:	f000 fdc8 	bl	8008de8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689a      	ldr	r2, [r3, #8]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008266:	609a      	str	r2, [r3, #8]
      break;
 8008268:	e03c      	b.n	80082e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008276:	461a      	mov	r2, r3
 8008278:	f000 fd3a 	bl	8008cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2150      	movs	r1, #80	@ 0x50
 8008282:	4618      	mov	r0, r3
 8008284:	f000 fd93 	bl	8008dae <TIM_ITRx_SetConfig>
      break;
 8008288:	e02c      	b.n	80082e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008296:	461a      	mov	r2, r3
 8008298:	f000 fd59 	bl	8008d4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2160      	movs	r1, #96	@ 0x60
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 fd83 	bl	8008dae <TIM_ITRx_SetConfig>
      break;
 80082a8:	e01c      	b.n	80082e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082b6:	461a      	mov	r2, r3
 80082b8:	f000 fd1a 	bl	8008cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2140      	movs	r1, #64	@ 0x40
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fd73 	bl	8008dae <TIM_ITRx_SetConfig>
      break;
 80082c8:	e00c      	b.n	80082e4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4619      	mov	r1, r3
 80082d4:	4610      	mov	r0, r2
 80082d6:	f000 fd6a 	bl	8008dae <TIM_ITRx_SetConfig>
      break;
 80082da:	e003      	b.n	80082e4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	73fb      	strb	r3, [r7, #15]
      break;
 80082e0:	e000      	b.n	80082e4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80082e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	00100070 	.word	0x00100070
 8008304:	00100060 	.word	0x00100060
 8008308:	00100050 	.word	0x00100050
 800830c:	00100040 	.word	0x00100040
 8008310:	00100030 	.word	0x00100030
 8008314:	00100020 	.word	0x00100020

08008318 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800839c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d107      	bne.n	80083b8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2201      	movs	r2, #1
 80083ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083b6:	e02a      	b.n	800840e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d107      	bne.n	80083d2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2202      	movs	r2, #2
 80083c6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083d0:	e01d      	b.n	800840e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d107      	bne.n	80083ec <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2204      	movs	r2, #4
 80083e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083ea:	e010      	b.n	800840e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d107      	bne.n	8008406 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2208      	movs	r2, #8
 80083fa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008404:	e003      	b.n	800840e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f7ff ffb4 	bl	800837c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	771a      	strb	r2, [r3, #28]
}
 800841a:	bf00      	nop
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800842e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	429a      	cmp	r2, r3
 8008438:	d10b      	bne.n	8008452 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2201      	movs	r2, #1
 800843e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	69db      	ldr	r3, [r3, #28]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d136      	bne.n	80084b6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008450:	e031      	b.n	80084b6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	429a      	cmp	r2, r3
 800845a:	d10b      	bne.n	8008474 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2202      	movs	r2, #2
 8008460:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	69db      	ldr	r3, [r3, #28]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d125      	bne.n	80084b6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008472:	e020      	b.n	80084b6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	429a      	cmp	r2, r3
 800847c:	d10b      	bne.n	8008496 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2204      	movs	r2, #4
 8008482:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	69db      	ldr	r3, [r3, #28]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d114      	bne.n	80084b6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008494:	e00f      	b.n	80084b6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	429a      	cmp	r2, r3
 800849e:	d10a      	bne.n	80084b6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2208      	movs	r2, #8
 80084a4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	69db      	ldr	r3, [r3, #28]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d103      	bne.n	80084b6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f7ff ff42 	bl	8008340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	771a      	strb	r2, [r3, #28]
}
 80084c2:	bf00      	nop
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b084      	sub	sp, #16
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d103      	bne.n	80084ea <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2201      	movs	r2, #1
 80084e6:	771a      	strb	r2, [r3, #28]
 80084e8:	e019      	b.n	800851e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d103      	bne.n	80084fc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2202      	movs	r2, #2
 80084f8:	771a      	strb	r2, [r3, #28]
 80084fa:	e010      	b.n	800851e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	429a      	cmp	r2, r3
 8008504:	d103      	bne.n	800850e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2204      	movs	r2, #4
 800850a:	771a      	strb	r2, [r3, #28]
 800850c:	e007      	b.n	800851e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	429a      	cmp	r2, r3
 8008516:	d102      	bne.n	800851e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2208      	movs	r2, #8
 800851c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f7ff ff18 	bl	8008354 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	771a      	strb	r2, [r3, #28]
}
 800852a:	bf00      	nop
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
	...

08008534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a4c      	ldr	r2, [pc, #304]	@ (8008678 <TIM_Base_SetConfig+0x144>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d017      	beq.n	800857c <TIM_Base_SetConfig+0x48>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008552:	d013      	beq.n	800857c <TIM_Base_SetConfig+0x48>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a49      	ldr	r2, [pc, #292]	@ (800867c <TIM_Base_SetConfig+0x148>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d00f      	beq.n	800857c <TIM_Base_SetConfig+0x48>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a48      	ldr	r2, [pc, #288]	@ (8008680 <TIM_Base_SetConfig+0x14c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d00b      	beq.n	800857c <TIM_Base_SetConfig+0x48>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a47      	ldr	r2, [pc, #284]	@ (8008684 <TIM_Base_SetConfig+0x150>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d007      	beq.n	800857c <TIM_Base_SetConfig+0x48>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a46      	ldr	r2, [pc, #280]	@ (8008688 <TIM_Base_SetConfig+0x154>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d003      	beq.n	800857c <TIM_Base_SetConfig+0x48>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a45      	ldr	r2, [pc, #276]	@ (800868c <TIM_Base_SetConfig+0x158>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d108      	bne.n	800858e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	4313      	orrs	r3, r2
 800858c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a39      	ldr	r2, [pc, #228]	@ (8008678 <TIM_Base_SetConfig+0x144>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d023      	beq.n	80085de <TIM_Base_SetConfig+0xaa>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800859c:	d01f      	beq.n	80085de <TIM_Base_SetConfig+0xaa>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a36      	ldr	r2, [pc, #216]	@ (800867c <TIM_Base_SetConfig+0x148>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d01b      	beq.n	80085de <TIM_Base_SetConfig+0xaa>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a35      	ldr	r2, [pc, #212]	@ (8008680 <TIM_Base_SetConfig+0x14c>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d017      	beq.n	80085de <TIM_Base_SetConfig+0xaa>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a34      	ldr	r2, [pc, #208]	@ (8008684 <TIM_Base_SetConfig+0x150>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d013      	beq.n	80085de <TIM_Base_SetConfig+0xaa>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a33      	ldr	r2, [pc, #204]	@ (8008688 <TIM_Base_SetConfig+0x154>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d00f      	beq.n	80085de <TIM_Base_SetConfig+0xaa>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a33      	ldr	r2, [pc, #204]	@ (8008690 <TIM_Base_SetConfig+0x15c>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d00b      	beq.n	80085de <TIM_Base_SetConfig+0xaa>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a32      	ldr	r2, [pc, #200]	@ (8008694 <TIM_Base_SetConfig+0x160>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d007      	beq.n	80085de <TIM_Base_SetConfig+0xaa>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a31      	ldr	r2, [pc, #196]	@ (8008698 <TIM_Base_SetConfig+0x164>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d003      	beq.n	80085de <TIM_Base_SetConfig+0xaa>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a2c      	ldr	r2, [pc, #176]	@ (800868c <TIM_Base_SetConfig+0x158>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d108      	bne.n	80085f0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	689a      	ldr	r2, [r3, #8]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a18      	ldr	r2, [pc, #96]	@ (8008678 <TIM_Base_SetConfig+0x144>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d013      	beq.n	8008644 <TIM_Base_SetConfig+0x110>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a1a      	ldr	r2, [pc, #104]	@ (8008688 <TIM_Base_SetConfig+0x154>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d00f      	beq.n	8008644 <TIM_Base_SetConfig+0x110>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a1a      	ldr	r2, [pc, #104]	@ (8008690 <TIM_Base_SetConfig+0x15c>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d00b      	beq.n	8008644 <TIM_Base_SetConfig+0x110>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a19      	ldr	r2, [pc, #100]	@ (8008694 <TIM_Base_SetConfig+0x160>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d007      	beq.n	8008644 <TIM_Base_SetConfig+0x110>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a18      	ldr	r2, [pc, #96]	@ (8008698 <TIM_Base_SetConfig+0x164>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d003      	beq.n	8008644 <TIM_Base_SetConfig+0x110>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a13      	ldr	r2, [pc, #76]	@ (800868c <TIM_Base_SetConfig+0x158>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d103      	bne.n	800864c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	691a      	ldr	r2, [r3, #16]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b01      	cmp	r3, #1
 800865c:	d105      	bne.n	800866a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	f023 0201 	bic.w	r2, r3, #1
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	611a      	str	r2, [r3, #16]
  }
}
 800866a:	bf00      	nop
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	40012c00 	.word	0x40012c00
 800867c:	40000400 	.word	0x40000400
 8008680:	40000800 	.word	0x40000800
 8008684:	40000c00 	.word	0x40000c00
 8008688:	40013400 	.word	0x40013400
 800868c:	40015000 	.word	0x40015000
 8008690:	40014000 	.word	0x40014000
 8008694:	40014400 	.word	0x40014400
 8008698:	40014800 	.word	0x40014800

0800869c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800869c:	b480      	push	{r7}
 800869e:	b087      	sub	sp, #28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a1b      	ldr	r3, [r3, #32]
 80086b0:	f023 0201 	bic.w	r2, r3, #1
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f023 0303 	bic.w	r3, r3, #3
 80086d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f023 0302 	bic.w	r3, r3, #2
 80086e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a30      	ldr	r2, [pc, #192]	@ (80087b8 <TIM_OC1_SetConfig+0x11c>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d013      	beq.n	8008724 <TIM_OC1_SetConfig+0x88>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a2f      	ldr	r2, [pc, #188]	@ (80087bc <TIM_OC1_SetConfig+0x120>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d00f      	beq.n	8008724 <TIM_OC1_SetConfig+0x88>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a2e      	ldr	r2, [pc, #184]	@ (80087c0 <TIM_OC1_SetConfig+0x124>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d00b      	beq.n	8008724 <TIM_OC1_SetConfig+0x88>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a2d      	ldr	r2, [pc, #180]	@ (80087c4 <TIM_OC1_SetConfig+0x128>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d007      	beq.n	8008724 <TIM_OC1_SetConfig+0x88>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a2c      	ldr	r2, [pc, #176]	@ (80087c8 <TIM_OC1_SetConfig+0x12c>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d003      	beq.n	8008724 <TIM_OC1_SetConfig+0x88>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a2b      	ldr	r2, [pc, #172]	@ (80087cc <TIM_OC1_SetConfig+0x130>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d10c      	bne.n	800873e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f023 0308 	bic.w	r3, r3, #8
 800872a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	4313      	orrs	r3, r2
 8008734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f023 0304 	bic.w	r3, r3, #4
 800873c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a1d      	ldr	r2, [pc, #116]	@ (80087b8 <TIM_OC1_SetConfig+0x11c>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d013      	beq.n	800876e <TIM_OC1_SetConfig+0xd2>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a1c      	ldr	r2, [pc, #112]	@ (80087bc <TIM_OC1_SetConfig+0x120>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d00f      	beq.n	800876e <TIM_OC1_SetConfig+0xd2>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a1b      	ldr	r2, [pc, #108]	@ (80087c0 <TIM_OC1_SetConfig+0x124>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d00b      	beq.n	800876e <TIM_OC1_SetConfig+0xd2>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a1a      	ldr	r2, [pc, #104]	@ (80087c4 <TIM_OC1_SetConfig+0x128>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d007      	beq.n	800876e <TIM_OC1_SetConfig+0xd2>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a19      	ldr	r2, [pc, #100]	@ (80087c8 <TIM_OC1_SetConfig+0x12c>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d003      	beq.n	800876e <TIM_OC1_SetConfig+0xd2>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a18      	ldr	r2, [pc, #96]	@ (80087cc <TIM_OC1_SetConfig+0x130>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d111      	bne.n	8008792 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800877c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	4313      	orrs	r3, r2
 8008786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	4313      	orrs	r3, r2
 8008790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	621a      	str	r2, [r3, #32]
}
 80087ac:	bf00      	nop
 80087ae:	371c      	adds	r7, #28
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	40012c00 	.word	0x40012c00
 80087bc:	40013400 	.word	0x40013400
 80087c0:	40014000 	.word	0x40014000
 80087c4:	40014400 	.word	0x40014400
 80087c8:	40014800 	.word	0x40014800
 80087cc:	40015000 	.word	0x40015000

080087d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a1b      	ldr	r3, [r3, #32]
 80087e4:	f023 0210 	bic.w	r2, r3, #16
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800880a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	021b      	lsls	r3, r3, #8
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	4313      	orrs	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	f023 0320 	bic.w	r3, r3, #32
 800881e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	011b      	lsls	r3, r3, #4
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	4313      	orrs	r3, r2
 800882a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a2c      	ldr	r2, [pc, #176]	@ (80088e0 <TIM_OC2_SetConfig+0x110>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d007      	beq.n	8008844 <TIM_OC2_SetConfig+0x74>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a2b      	ldr	r2, [pc, #172]	@ (80088e4 <TIM_OC2_SetConfig+0x114>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d003      	beq.n	8008844 <TIM_OC2_SetConfig+0x74>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a2a      	ldr	r2, [pc, #168]	@ (80088e8 <TIM_OC2_SetConfig+0x118>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d10d      	bne.n	8008860 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800884a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	011b      	lsls	r3, r3, #4
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	4313      	orrs	r3, r2
 8008856:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800885e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a1f      	ldr	r2, [pc, #124]	@ (80088e0 <TIM_OC2_SetConfig+0x110>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d013      	beq.n	8008890 <TIM_OC2_SetConfig+0xc0>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a1e      	ldr	r2, [pc, #120]	@ (80088e4 <TIM_OC2_SetConfig+0x114>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d00f      	beq.n	8008890 <TIM_OC2_SetConfig+0xc0>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a1e      	ldr	r2, [pc, #120]	@ (80088ec <TIM_OC2_SetConfig+0x11c>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d00b      	beq.n	8008890 <TIM_OC2_SetConfig+0xc0>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a1d      	ldr	r2, [pc, #116]	@ (80088f0 <TIM_OC2_SetConfig+0x120>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d007      	beq.n	8008890 <TIM_OC2_SetConfig+0xc0>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a1c      	ldr	r2, [pc, #112]	@ (80088f4 <TIM_OC2_SetConfig+0x124>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d003      	beq.n	8008890 <TIM_OC2_SetConfig+0xc0>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a17      	ldr	r2, [pc, #92]	@ (80088e8 <TIM_OC2_SetConfig+0x118>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d113      	bne.n	80088b8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800889e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	693a      	ldr	r2, [r7, #16]
 80088bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	621a      	str	r2, [r3, #32]
}
 80088d2:	bf00      	nop
 80088d4:	371c      	adds	r7, #28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	40012c00 	.word	0x40012c00
 80088e4:	40013400 	.word	0x40013400
 80088e8:	40015000 	.word	0x40015000
 80088ec:	40014000 	.word	0x40014000
 80088f0:	40014400 	.word	0x40014400
 80088f4:	40014800 	.word	0x40014800

080088f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a1b      	ldr	r3, [r3, #32]
 800890c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	69db      	ldr	r3, [r3, #28]
 800891e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800892a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f023 0303 	bic.w	r3, r3, #3
 8008932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	4313      	orrs	r3, r2
 800893c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	021b      	lsls	r3, r3, #8
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	4313      	orrs	r3, r2
 8008950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a2b      	ldr	r2, [pc, #172]	@ (8008a04 <TIM_OC3_SetConfig+0x10c>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d007      	beq.n	800896a <TIM_OC3_SetConfig+0x72>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a2a      	ldr	r2, [pc, #168]	@ (8008a08 <TIM_OC3_SetConfig+0x110>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d003      	beq.n	800896a <TIM_OC3_SetConfig+0x72>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a29      	ldr	r2, [pc, #164]	@ (8008a0c <TIM_OC3_SetConfig+0x114>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d10d      	bne.n	8008986 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008970:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	021b      	lsls	r3, r3, #8
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	4313      	orrs	r3, r2
 800897c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a1e      	ldr	r2, [pc, #120]	@ (8008a04 <TIM_OC3_SetConfig+0x10c>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d013      	beq.n	80089b6 <TIM_OC3_SetConfig+0xbe>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a1d      	ldr	r2, [pc, #116]	@ (8008a08 <TIM_OC3_SetConfig+0x110>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d00f      	beq.n	80089b6 <TIM_OC3_SetConfig+0xbe>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a1d      	ldr	r2, [pc, #116]	@ (8008a10 <TIM_OC3_SetConfig+0x118>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d00b      	beq.n	80089b6 <TIM_OC3_SetConfig+0xbe>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a1c      	ldr	r2, [pc, #112]	@ (8008a14 <TIM_OC3_SetConfig+0x11c>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d007      	beq.n	80089b6 <TIM_OC3_SetConfig+0xbe>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a1b      	ldr	r2, [pc, #108]	@ (8008a18 <TIM_OC3_SetConfig+0x120>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d003      	beq.n	80089b6 <TIM_OC3_SetConfig+0xbe>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a16      	ldr	r2, [pc, #88]	@ (8008a0c <TIM_OC3_SetConfig+0x114>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d113      	bne.n	80089de <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80089c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	011b      	lsls	r3, r3, #4
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	011b      	lsls	r3, r3, #4
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	4313      	orrs	r3, r2
 80089dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	621a      	str	r2, [r3, #32]
}
 80089f8:	bf00      	nop
 80089fa:	371c      	adds	r7, #28
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	40012c00 	.word	0x40012c00
 8008a08:	40013400 	.word	0x40013400
 8008a0c:	40015000 	.word	0x40015000
 8008a10:	40014000 	.word	0x40014000
 8008a14:	40014400 	.word	0x40014400
 8008a18:	40014800 	.word	0x40014800

08008a1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b087      	sub	sp, #28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	69db      	ldr	r3, [r3, #28]
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	021b      	lsls	r3, r3, #8
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	031b      	lsls	r3, r3, #12
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a2c      	ldr	r2, [pc, #176]	@ (8008b2c <TIM_OC4_SetConfig+0x110>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d007      	beq.n	8008a90 <TIM_OC4_SetConfig+0x74>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a2b      	ldr	r2, [pc, #172]	@ (8008b30 <TIM_OC4_SetConfig+0x114>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d003      	beq.n	8008a90 <TIM_OC4_SetConfig+0x74>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8008b34 <TIM_OC4_SetConfig+0x118>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d10d      	bne.n	8008aac <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	031b      	lsls	r3, r3, #12
 8008a9e:	697a      	ldr	r2, [r7, #20]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008aaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a1f      	ldr	r2, [pc, #124]	@ (8008b2c <TIM_OC4_SetConfig+0x110>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d013      	beq.n	8008adc <TIM_OC4_SetConfig+0xc0>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a1e      	ldr	r2, [pc, #120]	@ (8008b30 <TIM_OC4_SetConfig+0x114>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d00f      	beq.n	8008adc <TIM_OC4_SetConfig+0xc0>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a1e      	ldr	r2, [pc, #120]	@ (8008b38 <TIM_OC4_SetConfig+0x11c>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d00b      	beq.n	8008adc <TIM_OC4_SetConfig+0xc0>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a1d      	ldr	r2, [pc, #116]	@ (8008b3c <TIM_OC4_SetConfig+0x120>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d007      	beq.n	8008adc <TIM_OC4_SetConfig+0xc0>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a1c      	ldr	r2, [pc, #112]	@ (8008b40 <TIM_OC4_SetConfig+0x124>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d003      	beq.n	8008adc <TIM_OC4_SetConfig+0xc0>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a17      	ldr	r2, [pc, #92]	@ (8008b34 <TIM_OC4_SetConfig+0x118>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d113      	bne.n	8008b04 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ae2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008aea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	019b      	lsls	r3, r3, #6
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	019b      	lsls	r3, r3, #6
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685a      	ldr	r2, [r3, #4]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	621a      	str	r2, [r3, #32]
}
 8008b1e:	bf00      	nop
 8008b20:	371c      	adds	r7, #28
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	40012c00 	.word	0x40012c00
 8008b30:	40013400 	.word	0x40013400
 8008b34:	40015000 	.word	0x40015000
 8008b38:	40014000 	.word	0x40014000
 8008b3c:	40014400 	.word	0x40014400
 8008b40:	40014800 	.word	0x40014800

08008b44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a1b      	ldr	r3, [r3, #32]
 8008b58:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008b88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	041b      	lsls	r3, r3, #16
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a19      	ldr	r2, [pc, #100]	@ (8008c00 <TIM_OC5_SetConfig+0xbc>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d013      	beq.n	8008bc6 <TIM_OC5_SetConfig+0x82>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a18      	ldr	r2, [pc, #96]	@ (8008c04 <TIM_OC5_SetConfig+0xc0>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d00f      	beq.n	8008bc6 <TIM_OC5_SetConfig+0x82>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a17      	ldr	r2, [pc, #92]	@ (8008c08 <TIM_OC5_SetConfig+0xc4>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d00b      	beq.n	8008bc6 <TIM_OC5_SetConfig+0x82>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a16      	ldr	r2, [pc, #88]	@ (8008c0c <TIM_OC5_SetConfig+0xc8>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d007      	beq.n	8008bc6 <TIM_OC5_SetConfig+0x82>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a15      	ldr	r2, [pc, #84]	@ (8008c10 <TIM_OC5_SetConfig+0xcc>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d003      	beq.n	8008bc6 <TIM_OC5_SetConfig+0x82>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a14      	ldr	r2, [pc, #80]	@ (8008c14 <TIM_OC5_SetConfig+0xd0>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d109      	bne.n	8008bda <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	021b      	lsls	r3, r3, #8
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	685a      	ldr	r2, [r3, #4]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	621a      	str	r2, [r3, #32]
}
 8008bf4:	bf00      	nop
 8008bf6:	371c      	adds	r7, #28
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	40012c00 	.word	0x40012c00
 8008c04:	40013400 	.word	0x40013400
 8008c08:	40014000 	.word	0x40014000
 8008c0c:	40014400 	.word	0x40014400
 8008c10:	40014800 	.word	0x40014800
 8008c14:	40015000 	.word	0x40015000

08008c18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b087      	sub	sp, #28
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a1b      	ldr	r3, [r3, #32]
 8008c2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	021b      	lsls	r3, r3, #8
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008c5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	051b      	lsls	r3, r3, #20
 8008c66:	693a      	ldr	r2, [r7, #16]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8008cd8 <TIM_OC6_SetConfig+0xc0>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d013      	beq.n	8008c9c <TIM_OC6_SetConfig+0x84>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a19      	ldr	r2, [pc, #100]	@ (8008cdc <TIM_OC6_SetConfig+0xc4>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d00f      	beq.n	8008c9c <TIM_OC6_SetConfig+0x84>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a18      	ldr	r2, [pc, #96]	@ (8008ce0 <TIM_OC6_SetConfig+0xc8>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d00b      	beq.n	8008c9c <TIM_OC6_SetConfig+0x84>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a17      	ldr	r2, [pc, #92]	@ (8008ce4 <TIM_OC6_SetConfig+0xcc>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d007      	beq.n	8008c9c <TIM_OC6_SetConfig+0x84>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a16      	ldr	r2, [pc, #88]	@ (8008ce8 <TIM_OC6_SetConfig+0xd0>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d003      	beq.n	8008c9c <TIM_OC6_SetConfig+0x84>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a15      	ldr	r2, [pc, #84]	@ (8008cec <TIM_OC6_SetConfig+0xd4>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d109      	bne.n	8008cb0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	695b      	ldr	r3, [r3, #20]
 8008ca8:	029b      	lsls	r3, r3, #10
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	697a      	ldr	r2, [r7, #20]
 8008cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	621a      	str	r2, [r3, #32]
}
 8008cca:	bf00      	nop
 8008ccc:	371c      	adds	r7, #28
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	40012c00 	.word	0x40012c00
 8008cdc:	40013400 	.word	0x40013400
 8008ce0:	40014000 	.word	0x40014000
 8008ce4:	40014400 	.word	0x40014400
 8008ce8:	40014800 	.word	0x40014800
 8008cec:	40015000 	.word	0x40015000

08008cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b087      	sub	sp, #28
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6a1b      	ldr	r3, [r3, #32]
 8008d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	f023 0201 	bic.w	r2, r3, #1
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	011b      	lsls	r3, r3, #4
 8008d20:	693a      	ldr	r2, [r7, #16]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	f023 030a 	bic.w	r3, r3, #10
 8008d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	693a      	ldr	r2, [r7, #16]
 8008d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	621a      	str	r2, [r3, #32]
}
 8008d42:	bf00      	nop
 8008d44:	371c      	adds	r7, #28
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr

08008d4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d4e:	b480      	push	{r7}
 8008d50:	b087      	sub	sp, #28
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	60f8      	str	r0, [r7, #12]
 8008d56:	60b9      	str	r1, [r7, #8]
 8008d58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6a1b      	ldr	r3, [r3, #32]
 8008d64:	f023 0210 	bic.w	r2, r3, #16
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	031b      	lsls	r3, r3, #12
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008d8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	011b      	lsls	r3, r3, #4
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	693a      	ldr	r2, [r7, #16]
 8008d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	621a      	str	r2, [r3, #32]
}
 8008da2:	bf00      	nop
 8008da4:	371c      	adds	r7, #28
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b085      	sub	sp, #20
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	f043 0307 	orr.w	r3, r3, #7
 8008dd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	609a      	str	r2, [r3, #8]
}
 8008ddc:	bf00      	nop
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b087      	sub	sp, #28
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
 8008df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	021a      	lsls	r2, r3, #8
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	697a      	ldr	r2, [r7, #20]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	609a      	str	r2, [r3, #8]
}
 8008e1c:	bf00      	nop
 8008e1e:	371c      	adds	r7, #28
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b087      	sub	sp, #28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	f003 031f 	and.w	r3, r3, #31
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6a1a      	ldr	r2, [r3, #32]
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	43db      	mvns	r3, r3
 8008e4a:	401a      	ands	r2, r3
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6a1a      	ldr	r2, [r3, #32]
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	f003 031f 	and.w	r3, r3, #31
 8008e5a:	6879      	ldr	r1, [r7, #4]
 8008e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e60:	431a      	orrs	r2, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	621a      	str	r2, [r3, #32]
}
 8008e66:	bf00      	nop
 8008e68:	371c      	adds	r7, #28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
	...

08008e74 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d109      	bne.n	8008e98 <HAL_TIMEx_PWMN_Start+0x24>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	bf14      	ite	ne
 8008e90:	2301      	movne	r3, #1
 8008e92:	2300      	moveq	r3, #0
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	e022      	b.n	8008ede <HAL_TIMEx_PWMN_Start+0x6a>
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	d109      	bne.n	8008eb2 <HAL_TIMEx_PWMN_Start+0x3e>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	bf14      	ite	ne
 8008eaa:	2301      	movne	r3, #1
 8008eac:	2300      	moveq	r3, #0
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	e015      	b.n	8008ede <HAL_TIMEx_PWMN_Start+0x6a>
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b08      	cmp	r3, #8
 8008eb6:	d109      	bne.n	8008ecc <HAL_TIMEx_PWMN_Start+0x58>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	bf14      	ite	ne
 8008ec4:	2301      	movne	r3, #1
 8008ec6:	2300      	moveq	r3, #0
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	e008      	b.n	8008ede <HAL_TIMEx_PWMN_Start+0x6a>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	bf14      	ite	ne
 8008ed8:	2301      	movne	r3, #1
 8008eda:	2300      	moveq	r3, #0
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e073      	b.n	8008fce <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d104      	bne.n	8008ef6 <HAL_TIMEx_PWMN_Start+0x82>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2202      	movs	r2, #2
 8008ef0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ef4:	e013      	b.n	8008f1e <HAL_TIMEx_PWMN_Start+0xaa>
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	2b04      	cmp	r3, #4
 8008efa:	d104      	bne.n	8008f06 <HAL_TIMEx_PWMN_Start+0x92>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2202      	movs	r2, #2
 8008f00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f04:	e00b      	b.n	8008f1e <HAL_TIMEx_PWMN_Start+0xaa>
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	2b08      	cmp	r3, #8
 8008f0a:	d104      	bne.n	8008f16 <HAL_TIMEx_PWMN_Start+0xa2>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2202      	movs	r2, #2
 8008f10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008f14:	e003      	b.n	8008f1e <HAL_TIMEx_PWMN_Start+0xaa>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2202      	movs	r2, #2
 8008f1a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2204      	movs	r2, #4
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 fa34 	bl	8009394 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f3a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a25      	ldr	r2, [pc, #148]	@ (8008fd8 <HAL_TIMEx_PWMN_Start+0x164>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d022      	beq.n	8008f8c <HAL_TIMEx_PWMN_Start+0x118>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f4e:	d01d      	beq.n	8008f8c <HAL_TIMEx_PWMN_Start+0x118>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a21      	ldr	r2, [pc, #132]	@ (8008fdc <HAL_TIMEx_PWMN_Start+0x168>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d018      	beq.n	8008f8c <HAL_TIMEx_PWMN_Start+0x118>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a20      	ldr	r2, [pc, #128]	@ (8008fe0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d013      	beq.n	8008f8c <HAL_TIMEx_PWMN_Start+0x118>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a1e      	ldr	r2, [pc, #120]	@ (8008fe4 <HAL_TIMEx_PWMN_Start+0x170>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d00e      	beq.n	8008f8c <HAL_TIMEx_PWMN_Start+0x118>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a1d      	ldr	r2, [pc, #116]	@ (8008fe8 <HAL_TIMEx_PWMN_Start+0x174>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d009      	beq.n	8008f8c <HAL_TIMEx_PWMN_Start+0x118>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8008fec <HAL_TIMEx_PWMN_Start+0x178>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d004      	beq.n	8008f8c <HAL_TIMEx_PWMN_Start+0x118>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a1a      	ldr	r2, [pc, #104]	@ (8008ff0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d115      	bne.n	8008fb8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	689a      	ldr	r2, [r3, #8]
 8008f92:	4b18      	ldr	r3, [pc, #96]	@ (8008ff4 <HAL_TIMEx_PWMN_Start+0x180>)
 8008f94:	4013      	ands	r3, r2
 8008f96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2b06      	cmp	r3, #6
 8008f9c:	d015      	beq.n	8008fca <HAL_TIMEx_PWMN_Start+0x156>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fa4:	d011      	beq.n	8008fca <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f042 0201 	orr.w	r2, r2, #1
 8008fb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fb6:	e008      	b.n	8008fca <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f042 0201 	orr.w	r2, r2, #1
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	e000      	b.n	8008fcc <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	40012c00 	.word	0x40012c00
 8008fdc:	40000400 	.word	0x40000400
 8008fe0:	40000800 	.word	0x40000800
 8008fe4:	40000c00 	.word	0x40000c00
 8008fe8:	40013400 	.word	0x40013400
 8008fec:	40014000 	.word	0x40014000
 8008ff0:	40015000 	.word	0x40015000
 8008ff4:	00010007 	.word	0x00010007

08008ff8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2200      	movs	r2, #0
 8009008:	6839      	ldr	r1, [r7, #0]
 800900a:	4618      	mov	r0, r3
 800900c:	f000 f9c2 	bl	8009394 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6a1a      	ldr	r2, [r3, #32]
 8009016:	f241 1311 	movw	r3, #4369	@ 0x1111
 800901a:	4013      	ands	r3, r2
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10f      	bne.n	8009040 <HAL_TIMEx_PWMN_Stop+0x48>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6a1a      	ldr	r2, [r3, #32]
 8009026:	f244 4344 	movw	r3, #17476	@ 0x4444
 800902a:	4013      	ands	r3, r2
 800902c:	2b00      	cmp	r3, #0
 800902e:	d107      	bne.n	8009040 <HAL_TIMEx_PWMN_Stop+0x48>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800903e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	6a1a      	ldr	r2, [r3, #32]
 8009046:	f241 1311 	movw	r3, #4369	@ 0x1111
 800904a:	4013      	ands	r3, r2
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10f      	bne.n	8009070 <HAL_TIMEx_PWMN_Stop+0x78>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6a1a      	ldr	r2, [r3, #32]
 8009056:	f244 4344 	movw	r3, #17476	@ 0x4444
 800905a:	4013      	ands	r3, r2
 800905c:	2b00      	cmp	r3, #0
 800905e:	d107      	bne.n	8009070 <HAL_TIMEx_PWMN_Stop+0x78>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f022 0201 	bic.w	r2, r2, #1
 800906e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d104      	bne.n	8009080 <HAL_TIMEx_PWMN_Stop+0x88>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800907e:	e013      	b.n	80090a8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2b04      	cmp	r3, #4
 8009084:	d104      	bne.n	8009090 <HAL_TIMEx_PWMN_Stop+0x98>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2201      	movs	r2, #1
 800908a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800908e:	e00b      	b.n	80090a8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	2b08      	cmp	r3, #8
 8009094:	d104      	bne.n	80090a0 <HAL_TIMEx_PWMN_Stop+0xa8>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800909e:	e003      	b.n	80090a8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
	...

080090b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d101      	bne.n	80090cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090c8:	2302      	movs	r3, #2
 80090ca:	e074      	b.n	80091b6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2202      	movs	r2, #2
 80090d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a34      	ldr	r2, [pc, #208]	@ (80091c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d009      	beq.n	800910a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a33      	ldr	r2, [pc, #204]	@ (80091c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d004      	beq.n	800910a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a31      	ldr	r2, [pc, #196]	@ (80091cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d108      	bne.n	800911c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009110:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	4313      	orrs	r3, r2
 800911a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	4313      	orrs	r3, r2
 8009130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a21      	ldr	r2, [pc, #132]	@ (80091c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d022      	beq.n	800918a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800914c:	d01d      	beq.n	800918a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a1f      	ldr	r2, [pc, #124]	@ (80091d0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d018      	beq.n	800918a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a1d      	ldr	r2, [pc, #116]	@ (80091d4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d013      	beq.n	800918a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a1c      	ldr	r2, [pc, #112]	@ (80091d8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d00e      	beq.n	800918a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a15      	ldr	r2, [pc, #84]	@ (80091c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d009      	beq.n	800918a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a18      	ldr	r2, [pc, #96]	@ (80091dc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d004      	beq.n	800918a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a11      	ldr	r2, [pc, #68]	@ (80091cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d10c      	bne.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009190:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	4313      	orrs	r3, r2
 800919a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	40012c00 	.word	0x40012c00
 80091c8:	40013400 	.word	0x40013400
 80091cc:	40015000 	.word	0x40015000
 80091d0:	40000400 	.word	0x40000400
 80091d4:	40000800 	.word	0x40000800
 80091d8:	40000c00 	.word	0x40000c00
 80091dc:	40014000 	.word	0x40014000

080091e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80091ea:	2300      	movs	r3, #0
 80091ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d101      	bne.n	80091fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80091f8:	2302      	movs	r3, #2
 80091fa:	e078      	b.n	80092ee <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	4313      	orrs	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	4313      	orrs	r3, r2
 800921e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	4313      	orrs	r3, r2
 800922c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4313      	orrs	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	4313      	orrs	r3, r2
 8009248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	4313      	orrs	r3, r2
 8009256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009262:	4313      	orrs	r3, r2
 8009264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	699b      	ldr	r3, [r3, #24]
 8009270:	041b      	lsls	r3, r3, #16
 8009272:	4313      	orrs	r3, r2
 8009274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	69db      	ldr	r3, [r3, #28]
 8009280:	4313      	orrs	r3, r2
 8009282:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a1c      	ldr	r2, [pc, #112]	@ (80092fc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d009      	beq.n	80092a2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a1b      	ldr	r2, [pc, #108]	@ (8009300 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d004      	beq.n	80092a2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a19      	ldr	r2, [pc, #100]	@ (8009304 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d11c      	bne.n	80092dc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ac:	051b      	lsls	r3, r3, #20
 80092ae:	4313      	orrs	r3, r2
 80092b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	6a1b      	ldr	r3, [r3, #32]
 80092bc:	4313      	orrs	r3, r2
 80092be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ca:	4313      	orrs	r3, r2
 80092cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d8:	4313      	orrs	r3, r2
 80092da:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	40012c00 	.word	0x40012c00
 8009300:	40013400 	.word	0x40013400
 8009304:	40015000 	.word	0x40015000

08009308 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009374:	bf00      	nop
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009394:	b480      	push	{r7}
 8009396:	b087      	sub	sp, #28
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	f003 030f 	and.w	r3, r3, #15
 80093a6:	2204      	movs	r2, #4
 80093a8:	fa02 f303 	lsl.w	r3, r2, r3
 80093ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6a1a      	ldr	r2, [r3, #32]
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	43db      	mvns	r3, r3
 80093b6:	401a      	ands	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6a1a      	ldr	r2, [r3, #32]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	f003 030f 	and.w	r3, r3, #15
 80093c6:	6879      	ldr	r1, [r7, #4]
 80093c8:	fa01 f303 	lsl.w	r3, r1, r3
 80093cc:	431a      	orrs	r2, r3
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	621a      	str	r2, [r3, #32]
}
 80093d2:	bf00      	nop
 80093d4:	371c      	adds	r7, #28
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b082      	sub	sp, #8
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d101      	bne.n	80093f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	e042      	b.n	8009476 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d106      	bne.n	8009408 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7f9 fabc 	bl	8002980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2224      	movs	r2, #36	@ 0x24
 800940c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f022 0201 	bic.w	r2, r2, #1
 800941e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fbb3 	bl	8009b94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f8b4 	bl	800959c <UART_SetConfig>
 8009434:	4603      	mov	r3, r0
 8009436:	2b01      	cmp	r3, #1
 8009438:	d101      	bne.n	800943e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	e01b      	b.n	8009476 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800944c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	689a      	ldr	r2, [r3, #8]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800945c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f042 0201 	orr.w	r2, r2, #1
 800946c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fc32 	bl	8009cd8 <UART_CheckIdleState>
 8009474:	4603      	mov	r3, r0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b08a      	sub	sp, #40	@ 0x28
 8009482:	af02      	add	r7, sp, #8
 8009484:	60f8      	str	r0, [r7, #12]
 8009486:	60b9      	str	r1, [r7, #8]
 8009488:	603b      	str	r3, [r7, #0]
 800948a:	4613      	mov	r3, r2
 800948c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009494:	2b20      	cmp	r3, #32
 8009496:	d17b      	bne.n	8009590 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d002      	beq.n	80094a4 <HAL_UART_Transmit+0x26>
 800949e:	88fb      	ldrh	r3, [r7, #6]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	e074      	b.n	8009592 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2221      	movs	r2, #33	@ 0x21
 80094b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80094b8:	f7fa f80a 	bl	80034d0 <HAL_GetTick>
 80094bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	88fa      	ldrh	r2, [r7, #6]
 80094c2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	88fa      	ldrh	r2, [r7, #6]
 80094ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094d6:	d108      	bne.n	80094ea <HAL_UART_Transmit+0x6c>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d104      	bne.n	80094ea <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80094e0:	2300      	movs	r3, #0
 80094e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	61bb      	str	r3, [r7, #24]
 80094e8:	e003      	b.n	80094f2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094ee:	2300      	movs	r3, #0
 80094f0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80094f2:	e030      	b.n	8009556 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	2200      	movs	r2, #0
 80094fc:	2180      	movs	r1, #128	@ 0x80
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f000 fc94 	bl	8009e2c <UART_WaitOnFlagUntilTimeout>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d005      	beq.n	8009516 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2220      	movs	r2, #32
 800950e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009512:	2303      	movs	r3, #3
 8009514:	e03d      	b.n	8009592 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10b      	bne.n	8009534 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	461a      	mov	r2, r3
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800952a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	3302      	adds	r3, #2
 8009530:	61bb      	str	r3, [r7, #24]
 8009532:	e007      	b.n	8009544 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	781a      	ldrb	r2, [r3, #0]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	3301      	adds	r3, #1
 8009542:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800954a:	b29b      	uxth	r3, r3
 800954c:	3b01      	subs	r3, #1
 800954e:	b29a      	uxth	r2, r3
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800955c:	b29b      	uxth	r3, r3
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1c8      	bne.n	80094f4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	2200      	movs	r2, #0
 800956a:	2140      	movs	r1, #64	@ 0x40
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f000 fc5d 	bl	8009e2c <UART_WaitOnFlagUntilTimeout>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d005      	beq.n	8009584 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2220      	movs	r2, #32
 800957c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009580:	2303      	movs	r3, #3
 8009582:	e006      	b.n	8009592 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2220      	movs	r2, #32
 8009588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800958c:	2300      	movs	r3, #0
 800958e:	e000      	b.n	8009592 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009590:	2302      	movs	r3, #2
  }
}
 8009592:	4618      	mov	r0, r3
 8009594:	3720      	adds	r7, #32
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
	...

0800959c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800959c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095a0:	b08c      	sub	sp, #48	@ 0x30
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80095a6:	2300      	movs	r3, #0
 80095a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	689a      	ldr	r2, [r3, #8]
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	431a      	orrs	r2, r3
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	431a      	orrs	r2, r3
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	69db      	ldr	r3, [r3, #28]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	4baa      	ldr	r3, [pc, #680]	@ (8009874 <UART_SetConfig+0x2d8>)
 80095cc:	4013      	ands	r3, r2
 80095ce:	697a      	ldr	r2, [r7, #20]
 80095d0:	6812      	ldr	r2, [r2, #0]
 80095d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095d4:	430b      	orrs	r3, r1
 80095d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	68da      	ldr	r2, [r3, #12]
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	430a      	orrs	r2, r1
 80095ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a9f      	ldr	r2, [pc, #636]	@ (8009878 <UART_SetConfig+0x2dc>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d004      	beq.n	8009608 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009604:	4313      	orrs	r3, r2
 8009606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009612:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	6812      	ldr	r2, [r2, #0]
 800961a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800961c:	430b      	orrs	r3, r1
 800961e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009626:	f023 010f 	bic.w	r1, r3, #15
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	430a      	orrs	r2, r1
 8009634:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a90      	ldr	r2, [pc, #576]	@ (800987c <UART_SetConfig+0x2e0>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d125      	bne.n	800968c <UART_SetConfig+0xf0>
 8009640:	4b8f      	ldr	r3, [pc, #572]	@ (8009880 <UART_SetConfig+0x2e4>)
 8009642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009646:	f003 0303 	and.w	r3, r3, #3
 800964a:	2b03      	cmp	r3, #3
 800964c:	d81a      	bhi.n	8009684 <UART_SetConfig+0xe8>
 800964e:	a201      	add	r2, pc, #4	@ (adr r2, 8009654 <UART_SetConfig+0xb8>)
 8009650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009654:	08009665 	.word	0x08009665
 8009658:	08009675 	.word	0x08009675
 800965c:	0800966d 	.word	0x0800966d
 8009660:	0800967d 	.word	0x0800967d
 8009664:	2301      	movs	r3, #1
 8009666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800966a:	e116      	b.n	800989a <UART_SetConfig+0x2fe>
 800966c:	2302      	movs	r3, #2
 800966e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009672:	e112      	b.n	800989a <UART_SetConfig+0x2fe>
 8009674:	2304      	movs	r3, #4
 8009676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800967a:	e10e      	b.n	800989a <UART_SetConfig+0x2fe>
 800967c:	2308      	movs	r3, #8
 800967e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009682:	e10a      	b.n	800989a <UART_SetConfig+0x2fe>
 8009684:	2310      	movs	r3, #16
 8009686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800968a:	e106      	b.n	800989a <UART_SetConfig+0x2fe>
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a7c      	ldr	r2, [pc, #496]	@ (8009884 <UART_SetConfig+0x2e8>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d138      	bne.n	8009708 <UART_SetConfig+0x16c>
 8009696:	4b7a      	ldr	r3, [pc, #488]	@ (8009880 <UART_SetConfig+0x2e4>)
 8009698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800969c:	f003 030c 	and.w	r3, r3, #12
 80096a0:	2b0c      	cmp	r3, #12
 80096a2:	d82d      	bhi.n	8009700 <UART_SetConfig+0x164>
 80096a4:	a201      	add	r2, pc, #4	@ (adr r2, 80096ac <UART_SetConfig+0x110>)
 80096a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096aa:	bf00      	nop
 80096ac:	080096e1 	.word	0x080096e1
 80096b0:	08009701 	.word	0x08009701
 80096b4:	08009701 	.word	0x08009701
 80096b8:	08009701 	.word	0x08009701
 80096bc:	080096f1 	.word	0x080096f1
 80096c0:	08009701 	.word	0x08009701
 80096c4:	08009701 	.word	0x08009701
 80096c8:	08009701 	.word	0x08009701
 80096cc:	080096e9 	.word	0x080096e9
 80096d0:	08009701 	.word	0x08009701
 80096d4:	08009701 	.word	0x08009701
 80096d8:	08009701 	.word	0x08009701
 80096dc:	080096f9 	.word	0x080096f9
 80096e0:	2300      	movs	r3, #0
 80096e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096e6:	e0d8      	b.n	800989a <UART_SetConfig+0x2fe>
 80096e8:	2302      	movs	r3, #2
 80096ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096ee:	e0d4      	b.n	800989a <UART_SetConfig+0x2fe>
 80096f0:	2304      	movs	r3, #4
 80096f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096f6:	e0d0      	b.n	800989a <UART_SetConfig+0x2fe>
 80096f8:	2308      	movs	r3, #8
 80096fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096fe:	e0cc      	b.n	800989a <UART_SetConfig+0x2fe>
 8009700:	2310      	movs	r3, #16
 8009702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009706:	e0c8      	b.n	800989a <UART_SetConfig+0x2fe>
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a5e      	ldr	r2, [pc, #376]	@ (8009888 <UART_SetConfig+0x2ec>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d125      	bne.n	800975e <UART_SetConfig+0x1c2>
 8009712:	4b5b      	ldr	r3, [pc, #364]	@ (8009880 <UART_SetConfig+0x2e4>)
 8009714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009718:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800971c:	2b30      	cmp	r3, #48	@ 0x30
 800971e:	d016      	beq.n	800974e <UART_SetConfig+0x1b2>
 8009720:	2b30      	cmp	r3, #48	@ 0x30
 8009722:	d818      	bhi.n	8009756 <UART_SetConfig+0x1ba>
 8009724:	2b20      	cmp	r3, #32
 8009726:	d00a      	beq.n	800973e <UART_SetConfig+0x1a2>
 8009728:	2b20      	cmp	r3, #32
 800972a:	d814      	bhi.n	8009756 <UART_SetConfig+0x1ba>
 800972c:	2b00      	cmp	r3, #0
 800972e:	d002      	beq.n	8009736 <UART_SetConfig+0x19a>
 8009730:	2b10      	cmp	r3, #16
 8009732:	d008      	beq.n	8009746 <UART_SetConfig+0x1aa>
 8009734:	e00f      	b.n	8009756 <UART_SetConfig+0x1ba>
 8009736:	2300      	movs	r3, #0
 8009738:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800973c:	e0ad      	b.n	800989a <UART_SetConfig+0x2fe>
 800973e:	2302      	movs	r3, #2
 8009740:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009744:	e0a9      	b.n	800989a <UART_SetConfig+0x2fe>
 8009746:	2304      	movs	r3, #4
 8009748:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800974c:	e0a5      	b.n	800989a <UART_SetConfig+0x2fe>
 800974e:	2308      	movs	r3, #8
 8009750:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009754:	e0a1      	b.n	800989a <UART_SetConfig+0x2fe>
 8009756:	2310      	movs	r3, #16
 8009758:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800975c:	e09d      	b.n	800989a <UART_SetConfig+0x2fe>
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a4a      	ldr	r2, [pc, #296]	@ (800988c <UART_SetConfig+0x2f0>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d125      	bne.n	80097b4 <UART_SetConfig+0x218>
 8009768:	4b45      	ldr	r3, [pc, #276]	@ (8009880 <UART_SetConfig+0x2e4>)
 800976a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800976e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009772:	2bc0      	cmp	r3, #192	@ 0xc0
 8009774:	d016      	beq.n	80097a4 <UART_SetConfig+0x208>
 8009776:	2bc0      	cmp	r3, #192	@ 0xc0
 8009778:	d818      	bhi.n	80097ac <UART_SetConfig+0x210>
 800977a:	2b80      	cmp	r3, #128	@ 0x80
 800977c:	d00a      	beq.n	8009794 <UART_SetConfig+0x1f8>
 800977e:	2b80      	cmp	r3, #128	@ 0x80
 8009780:	d814      	bhi.n	80097ac <UART_SetConfig+0x210>
 8009782:	2b00      	cmp	r3, #0
 8009784:	d002      	beq.n	800978c <UART_SetConfig+0x1f0>
 8009786:	2b40      	cmp	r3, #64	@ 0x40
 8009788:	d008      	beq.n	800979c <UART_SetConfig+0x200>
 800978a:	e00f      	b.n	80097ac <UART_SetConfig+0x210>
 800978c:	2300      	movs	r3, #0
 800978e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009792:	e082      	b.n	800989a <UART_SetConfig+0x2fe>
 8009794:	2302      	movs	r3, #2
 8009796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800979a:	e07e      	b.n	800989a <UART_SetConfig+0x2fe>
 800979c:	2304      	movs	r3, #4
 800979e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097a2:	e07a      	b.n	800989a <UART_SetConfig+0x2fe>
 80097a4:	2308      	movs	r3, #8
 80097a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097aa:	e076      	b.n	800989a <UART_SetConfig+0x2fe>
 80097ac:	2310      	movs	r3, #16
 80097ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097b2:	e072      	b.n	800989a <UART_SetConfig+0x2fe>
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a35      	ldr	r2, [pc, #212]	@ (8009890 <UART_SetConfig+0x2f4>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d12a      	bne.n	8009814 <UART_SetConfig+0x278>
 80097be:	4b30      	ldr	r3, [pc, #192]	@ (8009880 <UART_SetConfig+0x2e4>)
 80097c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097cc:	d01a      	beq.n	8009804 <UART_SetConfig+0x268>
 80097ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097d2:	d81b      	bhi.n	800980c <UART_SetConfig+0x270>
 80097d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097d8:	d00c      	beq.n	80097f4 <UART_SetConfig+0x258>
 80097da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097de:	d815      	bhi.n	800980c <UART_SetConfig+0x270>
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d003      	beq.n	80097ec <UART_SetConfig+0x250>
 80097e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097e8:	d008      	beq.n	80097fc <UART_SetConfig+0x260>
 80097ea:	e00f      	b.n	800980c <UART_SetConfig+0x270>
 80097ec:	2300      	movs	r3, #0
 80097ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097f2:	e052      	b.n	800989a <UART_SetConfig+0x2fe>
 80097f4:	2302      	movs	r3, #2
 80097f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097fa:	e04e      	b.n	800989a <UART_SetConfig+0x2fe>
 80097fc:	2304      	movs	r3, #4
 80097fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009802:	e04a      	b.n	800989a <UART_SetConfig+0x2fe>
 8009804:	2308      	movs	r3, #8
 8009806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800980a:	e046      	b.n	800989a <UART_SetConfig+0x2fe>
 800980c:	2310      	movs	r3, #16
 800980e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009812:	e042      	b.n	800989a <UART_SetConfig+0x2fe>
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a17      	ldr	r2, [pc, #92]	@ (8009878 <UART_SetConfig+0x2dc>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d13a      	bne.n	8009894 <UART_SetConfig+0x2f8>
 800981e:	4b18      	ldr	r3, [pc, #96]	@ (8009880 <UART_SetConfig+0x2e4>)
 8009820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009824:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009828:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800982c:	d01a      	beq.n	8009864 <UART_SetConfig+0x2c8>
 800982e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009832:	d81b      	bhi.n	800986c <UART_SetConfig+0x2d0>
 8009834:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009838:	d00c      	beq.n	8009854 <UART_SetConfig+0x2b8>
 800983a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800983e:	d815      	bhi.n	800986c <UART_SetConfig+0x2d0>
 8009840:	2b00      	cmp	r3, #0
 8009842:	d003      	beq.n	800984c <UART_SetConfig+0x2b0>
 8009844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009848:	d008      	beq.n	800985c <UART_SetConfig+0x2c0>
 800984a:	e00f      	b.n	800986c <UART_SetConfig+0x2d0>
 800984c:	2300      	movs	r3, #0
 800984e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009852:	e022      	b.n	800989a <UART_SetConfig+0x2fe>
 8009854:	2302      	movs	r3, #2
 8009856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800985a:	e01e      	b.n	800989a <UART_SetConfig+0x2fe>
 800985c:	2304      	movs	r3, #4
 800985e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009862:	e01a      	b.n	800989a <UART_SetConfig+0x2fe>
 8009864:	2308      	movs	r3, #8
 8009866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800986a:	e016      	b.n	800989a <UART_SetConfig+0x2fe>
 800986c:	2310      	movs	r3, #16
 800986e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009872:	e012      	b.n	800989a <UART_SetConfig+0x2fe>
 8009874:	cfff69f3 	.word	0xcfff69f3
 8009878:	40008000 	.word	0x40008000
 800987c:	40013800 	.word	0x40013800
 8009880:	40021000 	.word	0x40021000
 8009884:	40004400 	.word	0x40004400
 8009888:	40004800 	.word	0x40004800
 800988c:	40004c00 	.word	0x40004c00
 8009890:	40005000 	.word	0x40005000
 8009894:	2310      	movs	r3, #16
 8009896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4aae      	ldr	r2, [pc, #696]	@ (8009b58 <UART_SetConfig+0x5bc>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	f040 8097 	bne.w	80099d4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80098a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80098aa:	2b08      	cmp	r3, #8
 80098ac:	d823      	bhi.n	80098f6 <UART_SetConfig+0x35a>
 80098ae:	a201      	add	r2, pc, #4	@ (adr r2, 80098b4 <UART_SetConfig+0x318>)
 80098b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b4:	080098d9 	.word	0x080098d9
 80098b8:	080098f7 	.word	0x080098f7
 80098bc:	080098e1 	.word	0x080098e1
 80098c0:	080098f7 	.word	0x080098f7
 80098c4:	080098e7 	.word	0x080098e7
 80098c8:	080098f7 	.word	0x080098f7
 80098cc:	080098f7 	.word	0x080098f7
 80098d0:	080098f7 	.word	0x080098f7
 80098d4:	080098ef 	.word	0x080098ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098d8:	f7fc fed6 	bl	8006688 <HAL_RCC_GetPCLK1Freq>
 80098dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80098de:	e010      	b.n	8009902 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098e0:	4b9e      	ldr	r3, [pc, #632]	@ (8009b5c <UART_SetConfig+0x5c0>)
 80098e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80098e4:	e00d      	b.n	8009902 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098e6:	f7fc fe61 	bl	80065ac <HAL_RCC_GetSysClockFreq>
 80098ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80098ec:	e009      	b.n	8009902 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80098f4:	e005      	b.n	8009902 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80098f6:	2300      	movs	r3, #0
 80098f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009900:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009904:	2b00      	cmp	r3, #0
 8009906:	f000 8130 	beq.w	8009b6a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800990e:	4a94      	ldr	r2, [pc, #592]	@ (8009b60 <UART_SetConfig+0x5c4>)
 8009910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009914:	461a      	mov	r2, r3
 8009916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009918:	fbb3 f3f2 	udiv	r3, r3, r2
 800991c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	685a      	ldr	r2, [r3, #4]
 8009922:	4613      	mov	r3, r2
 8009924:	005b      	lsls	r3, r3, #1
 8009926:	4413      	add	r3, r2
 8009928:	69ba      	ldr	r2, [r7, #24]
 800992a:	429a      	cmp	r2, r3
 800992c:	d305      	bcc.n	800993a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009934:	69ba      	ldr	r2, [r7, #24]
 8009936:	429a      	cmp	r2, r3
 8009938:	d903      	bls.n	8009942 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009940:	e113      	b.n	8009b6a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009944:	2200      	movs	r2, #0
 8009946:	60bb      	str	r3, [r7, #8]
 8009948:	60fa      	str	r2, [r7, #12]
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800994e:	4a84      	ldr	r2, [pc, #528]	@ (8009b60 <UART_SetConfig+0x5c4>)
 8009950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009954:	b29b      	uxth	r3, r3
 8009956:	2200      	movs	r2, #0
 8009958:	603b      	str	r3, [r7, #0]
 800995a:	607a      	str	r2, [r7, #4]
 800995c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009960:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009964:	f7f7 f998 	bl	8000c98 <__aeabi_uldivmod>
 8009968:	4602      	mov	r2, r0
 800996a:	460b      	mov	r3, r1
 800996c:	4610      	mov	r0, r2
 800996e:	4619      	mov	r1, r3
 8009970:	f04f 0200 	mov.w	r2, #0
 8009974:	f04f 0300 	mov.w	r3, #0
 8009978:	020b      	lsls	r3, r1, #8
 800997a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800997e:	0202      	lsls	r2, r0, #8
 8009980:	6979      	ldr	r1, [r7, #20]
 8009982:	6849      	ldr	r1, [r1, #4]
 8009984:	0849      	lsrs	r1, r1, #1
 8009986:	2000      	movs	r0, #0
 8009988:	460c      	mov	r4, r1
 800998a:	4605      	mov	r5, r0
 800998c:	eb12 0804 	adds.w	r8, r2, r4
 8009990:	eb43 0905 	adc.w	r9, r3, r5
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	469a      	mov	sl, r3
 800999c:	4693      	mov	fp, r2
 800999e:	4652      	mov	r2, sl
 80099a0:	465b      	mov	r3, fp
 80099a2:	4640      	mov	r0, r8
 80099a4:	4649      	mov	r1, r9
 80099a6:	f7f7 f977 	bl	8000c98 <__aeabi_uldivmod>
 80099aa:	4602      	mov	r2, r0
 80099ac:	460b      	mov	r3, r1
 80099ae:	4613      	mov	r3, r2
 80099b0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099b8:	d308      	bcc.n	80099cc <UART_SetConfig+0x430>
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099c0:	d204      	bcs.n	80099cc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6a3a      	ldr	r2, [r7, #32]
 80099c8:	60da      	str	r2, [r3, #12]
 80099ca:	e0ce      	b.n	8009b6a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80099d2:	e0ca      	b.n	8009b6a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	69db      	ldr	r3, [r3, #28]
 80099d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099dc:	d166      	bne.n	8009aac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80099de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80099e2:	2b08      	cmp	r3, #8
 80099e4:	d827      	bhi.n	8009a36 <UART_SetConfig+0x49a>
 80099e6:	a201      	add	r2, pc, #4	@ (adr r2, 80099ec <UART_SetConfig+0x450>)
 80099e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ec:	08009a11 	.word	0x08009a11
 80099f0:	08009a19 	.word	0x08009a19
 80099f4:	08009a21 	.word	0x08009a21
 80099f8:	08009a37 	.word	0x08009a37
 80099fc:	08009a27 	.word	0x08009a27
 8009a00:	08009a37 	.word	0x08009a37
 8009a04:	08009a37 	.word	0x08009a37
 8009a08:	08009a37 	.word	0x08009a37
 8009a0c:	08009a2f 	.word	0x08009a2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a10:	f7fc fe3a 	bl	8006688 <HAL_RCC_GetPCLK1Freq>
 8009a14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a16:	e014      	b.n	8009a42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a18:	f7fc fe4c 	bl	80066b4 <HAL_RCC_GetPCLK2Freq>
 8009a1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a1e:	e010      	b.n	8009a42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a20:	4b4e      	ldr	r3, [pc, #312]	@ (8009b5c <UART_SetConfig+0x5c0>)
 8009a22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a24:	e00d      	b.n	8009a42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a26:	f7fc fdc1 	bl	80065ac <HAL_RCC_GetSysClockFreq>
 8009a2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a2c:	e009      	b.n	8009a42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a34:	e005      	b.n	8009a42 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009a36:	2300      	movs	r3, #0
 8009a38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009a40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f000 8090 	beq.w	8009b6a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a4e:	4a44      	ldr	r2, [pc, #272]	@ (8009b60 <UART_SetConfig+0x5c4>)
 8009a50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a54:	461a      	mov	r2, r3
 8009a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a58:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a5c:	005a      	lsls	r2, r3, #1
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	085b      	lsrs	r3, r3, #1
 8009a64:	441a      	add	r2, r3
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	2b0f      	cmp	r3, #15
 8009a74:	d916      	bls.n	8009aa4 <UART_SetConfig+0x508>
 8009a76:	6a3b      	ldr	r3, [r7, #32]
 8009a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a7c:	d212      	bcs.n	8009aa4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a7e:	6a3b      	ldr	r3, [r7, #32]
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	f023 030f 	bic.w	r3, r3, #15
 8009a86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a88:	6a3b      	ldr	r3, [r7, #32]
 8009a8a:	085b      	lsrs	r3, r3, #1
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	f003 0307 	and.w	r3, r3, #7
 8009a92:	b29a      	uxth	r2, r3
 8009a94:	8bfb      	ldrh	r3, [r7, #30]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	8bfa      	ldrh	r2, [r7, #30]
 8009aa0:	60da      	str	r2, [r3, #12]
 8009aa2:	e062      	b.n	8009b6a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009aaa:	e05e      	b.n	8009b6a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009aac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009ab0:	2b08      	cmp	r3, #8
 8009ab2:	d828      	bhi.n	8009b06 <UART_SetConfig+0x56a>
 8009ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8009abc <UART_SetConfig+0x520>)
 8009ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aba:	bf00      	nop
 8009abc:	08009ae1 	.word	0x08009ae1
 8009ac0:	08009ae9 	.word	0x08009ae9
 8009ac4:	08009af1 	.word	0x08009af1
 8009ac8:	08009b07 	.word	0x08009b07
 8009acc:	08009af7 	.word	0x08009af7
 8009ad0:	08009b07 	.word	0x08009b07
 8009ad4:	08009b07 	.word	0x08009b07
 8009ad8:	08009b07 	.word	0x08009b07
 8009adc:	08009aff 	.word	0x08009aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ae0:	f7fc fdd2 	bl	8006688 <HAL_RCC_GetPCLK1Freq>
 8009ae4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ae6:	e014      	b.n	8009b12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ae8:	f7fc fde4 	bl	80066b4 <HAL_RCC_GetPCLK2Freq>
 8009aec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009aee:	e010      	b.n	8009b12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009af0:	4b1a      	ldr	r3, [pc, #104]	@ (8009b5c <UART_SetConfig+0x5c0>)
 8009af2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009af4:	e00d      	b.n	8009b12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009af6:	f7fc fd59 	bl	80065ac <HAL_RCC_GetSysClockFreq>
 8009afa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009afc:	e009      	b.n	8009b12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b04:	e005      	b.n	8009b12 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009b06:	2300      	movs	r3, #0
 8009b08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009b10:	bf00      	nop
    }

    if (pclk != 0U)
 8009b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d028      	beq.n	8009b6a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b1c:	4a10      	ldr	r2, [pc, #64]	@ (8009b60 <UART_SetConfig+0x5c4>)
 8009b1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b22:	461a      	mov	r2, r3
 8009b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b26:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	085b      	lsrs	r3, r3, #1
 8009b30:	441a      	add	r2, r3
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	2b0f      	cmp	r3, #15
 8009b40:	d910      	bls.n	8009b64 <UART_SetConfig+0x5c8>
 8009b42:	6a3b      	ldr	r3, [r7, #32]
 8009b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b48:	d20c      	bcs.n	8009b64 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b4a:	6a3b      	ldr	r3, [r7, #32]
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	60da      	str	r2, [r3, #12]
 8009b54:	e009      	b.n	8009b6a <UART_SetConfig+0x5ce>
 8009b56:	bf00      	nop
 8009b58:	40008000 	.word	0x40008000
 8009b5c:	00f42400 	.word	0x00f42400
 8009b60:	0800e23c 	.word	0x0800e23c
      }
      else
      {
        ret = HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2201      	movs	r2, #1
 8009b76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	2200      	movs	r2, #0
 8009b84:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009b86:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3730      	adds	r7, #48	@ 0x30
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009b94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ba0:	f003 0308 	and.w	r3, r3, #8
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00a      	beq.n	8009bbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	430a      	orrs	r2, r1
 8009bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00a      	beq.n	8009be0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	430a      	orrs	r2, r1
 8009bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009be4:	f003 0302 	and.w	r3, r3, #2
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00a      	beq.n	8009c02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	430a      	orrs	r2, r1
 8009c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c06:	f003 0304 	and.w	r3, r3, #4
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00a      	beq.n	8009c24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	430a      	orrs	r2, r1
 8009c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c28:	f003 0310 	and.w	r3, r3, #16
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00a      	beq.n	8009c46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	430a      	orrs	r2, r1
 8009c44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c4a:	f003 0320 	and.w	r3, r3, #32
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00a      	beq.n	8009c68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	430a      	orrs	r2, r1
 8009c66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d01a      	beq.n	8009caa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	430a      	orrs	r2, r1
 8009c88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c92:	d10a      	bne.n	8009caa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00a      	beq.n	8009ccc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	430a      	orrs	r2, r1
 8009cca:	605a      	str	r2, [r3, #4]
  }
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b098      	sub	sp, #96	@ 0x60
 8009cdc:	af02      	add	r7, sp, #8
 8009cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ce8:	f7f9 fbf2 	bl	80034d0 <HAL_GetTick>
 8009cec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f003 0308 	and.w	r3, r3, #8
 8009cf8:	2b08      	cmp	r3, #8
 8009cfa:	d12f      	bne.n	8009d5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d00:	9300      	str	r3, [sp, #0]
 8009d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d04:	2200      	movs	r2, #0
 8009d06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f88e 	bl	8009e2c <UART_WaitOnFlagUntilTimeout>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d022      	beq.n	8009d5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1e:	e853 3f00 	ldrex	r3, [r3]
 8009d22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	461a      	mov	r2, r3
 8009d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d3c:	e841 2300 	strex	r3, r2, [r1]
 8009d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1e6      	bne.n	8009d16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	e063      	b.n	8009e24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f003 0304 	and.w	r3, r3, #4
 8009d66:	2b04      	cmp	r3, #4
 8009d68:	d149      	bne.n	8009dfe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d72:	2200      	movs	r2, #0
 8009d74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 f857 	bl	8009e2c <UART_WaitOnFlagUntilTimeout>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d03c      	beq.n	8009dfe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8c:	e853 3f00 	ldrex	r3, [r3]
 8009d90:	623b      	str	r3, [r7, #32]
   return(result);
 8009d92:	6a3b      	ldr	r3, [r7, #32]
 8009d94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009da2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009da4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009daa:	e841 2300 	strex	r3, r2, [r1]
 8009dae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1e6      	bne.n	8009d84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	3308      	adds	r3, #8
 8009dbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	e853 3f00 	ldrex	r3, [r3]
 8009dc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f023 0301 	bic.w	r3, r3, #1
 8009dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	3308      	adds	r3, #8
 8009dd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009dd6:	61fa      	str	r2, [r7, #28]
 8009dd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dda:	69b9      	ldr	r1, [r7, #24]
 8009ddc:	69fa      	ldr	r2, [r7, #28]
 8009dde:	e841 2300 	strex	r3, r2, [r1]
 8009de2:	617b      	str	r3, [r7, #20]
   return(result);
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1e5      	bne.n	8009db6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2220      	movs	r2, #32
 8009dee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	e012      	b.n	8009e24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2220      	movs	r2, #32
 8009e02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2220      	movs	r2, #32
 8009e0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3758      	adds	r7, #88	@ 0x58
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	603b      	str	r3, [r7, #0]
 8009e38:	4613      	mov	r3, r2
 8009e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e3c:	e04f      	b.n	8009ede <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e44:	d04b      	beq.n	8009ede <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e46:	f7f9 fb43 	bl	80034d0 <HAL_GetTick>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	1ad3      	subs	r3, r2, r3
 8009e50:	69ba      	ldr	r2, [r7, #24]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d302      	bcc.n	8009e5c <UART_WaitOnFlagUntilTimeout+0x30>
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d101      	bne.n	8009e60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	e04e      	b.n	8009efe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f003 0304 	and.w	r3, r3, #4
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d037      	beq.n	8009ede <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	2b80      	cmp	r3, #128	@ 0x80
 8009e72:	d034      	beq.n	8009ede <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	2b40      	cmp	r3, #64	@ 0x40
 8009e78:	d031      	beq.n	8009ede <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	69db      	ldr	r3, [r3, #28]
 8009e80:	f003 0308 	and.w	r3, r3, #8
 8009e84:	2b08      	cmp	r3, #8
 8009e86:	d110      	bne.n	8009eaa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2208      	movs	r2, #8
 8009e8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f000 f838 	bl	8009f06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2208      	movs	r2, #8
 8009e9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e029      	b.n	8009efe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	69db      	ldr	r3, [r3, #28]
 8009eb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009eb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009eb8:	d111      	bne.n	8009ede <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f000 f81e 	bl	8009f06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2220      	movs	r2, #32
 8009ece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009eda:	2303      	movs	r3, #3
 8009edc:	e00f      	b.n	8009efe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	69da      	ldr	r2, [r3, #28]
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	bf0c      	ite	eq
 8009eee:	2301      	moveq	r3, #1
 8009ef0:	2300      	movne	r3, #0
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	79fb      	ldrb	r3, [r7, #7]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d0a0      	beq.n	8009e3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b095      	sub	sp, #84	@ 0x54
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f16:	e853 3f00 	ldrex	r3, [r3]
 8009f1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f2e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f34:	e841 2300 	strex	r3, r2, [r1]
 8009f38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1e6      	bne.n	8009f0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	3308      	adds	r3, #8
 8009f46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	e853 3f00 	ldrex	r3, [r3]
 8009f4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f56:	f023 0301 	bic.w	r3, r3, #1
 8009f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	3308      	adds	r3, #8
 8009f62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f6c:	e841 2300 	strex	r3, r2, [r1]
 8009f70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d1e3      	bne.n	8009f40 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d118      	bne.n	8009fb2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	e853 3f00 	ldrex	r3, [r3]
 8009f8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	f023 0310 	bic.w	r3, r3, #16
 8009f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f9e:	61bb      	str	r3, [r7, #24]
 8009fa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa2:	6979      	ldr	r1, [r7, #20]
 8009fa4:	69ba      	ldr	r2, [r7, #24]
 8009fa6:	e841 2300 	strex	r3, r2, [r1]
 8009faa:	613b      	str	r3, [r7, #16]
   return(result);
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d1e6      	bne.n	8009f80 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2220      	movs	r2, #32
 8009fb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009fc6:	bf00      	nop
 8009fc8:	3754      	adds	r7, #84	@ 0x54
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr

08009fd2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009fd2:	b480      	push	{r7}
 8009fd4:	b085      	sub	sp, #20
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d101      	bne.n	8009fe8 <HAL_UARTEx_DisableFifoMode+0x16>
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	e027      	b.n	800a038 <HAL_UARTEx_DisableFifoMode+0x66>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2224      	movs	r2, #36	@ 0x24
 8009ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f022 0201 	bic.w	r2, r2, #1
 800a00e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a016:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2220      	movs	r2, #32
 800a02a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3714      	adds	r7, #20
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a054:	2b01      	cmp	r3, #1
 800a056:	d101      	bne.n	800a05c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a058:	2302      	movs	r3, #2
 800a05a:	e02d      	b.n	800a0b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2224      	movs	r2, #36	@ 0x24
 800a068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f022 0201 	bic.w	r2, r2, #1
 800a082:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	430a      	orrs	r2, r1
 800a096:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 f84f 	bl	800a13c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2220      	movs	r2, #32
 800a0aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d101      	bne.n	800a0d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	e02d      	b.n	800a134 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2224      	movs	r2, #36	@ 0x24
 800a0e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f022 0201 	bic.w	r2, r2, #1
 800a0fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	430a      	orrs	r2, r1
 800a112:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f811 	bl	800a13c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2220      	movs	r2, #32
 800a126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3710      	adds	r7, #16
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d108      	bne.n	800a15e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a15c:	e031      	b.n	800a1c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a15e:	2308      	movs	r3, #8
 800a160:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a162:	2308      	movs	r3, #8
 800a164:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	0e5b      	lsrs	r3, r3, #25
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	f003 0307 	and.w	r3, r3, #7
 800a174:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	0f5b      	lsrs	r3, r3, #29
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	f003 0307 	and.w	r3, r3, #7
 800a184:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a186:	7bbb      	ldrb	r3, [r7, #14]
 800a188:	7b3a      	ldrb	r2, [r7, #12]
 800a18a:	4911      	ldr	r1, [pc, #68]	@ (800a1d0 <UARTEx_SetNbDataToProcess+0x94>)
 800a18c:	5c8a      	ldrb	r2, [r1, r2]
 800a18e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a192:	7b3a      	ldrb	r2, [r7, #12]
 800a194:	490f      	ldr	r1, [pc, #60]	@ (800a1d4 <UARTEx_SetNbDataToProcess+0x98>)
 800a196:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a198:	fb93 f3f2 	sdiv	r3, r3, r2
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1a4:	7bfb      	ldrb	r3, [r7, #15]
 800a1a6:	7b7a      	ldrb	r2, [r7, #13]
 800a1a8:	4909      	ldr	r1, [pc, #36]	@ (800a1d0 <UARTEx_SetNbDataToProcess+0x94>)
 800a1aa:	5c8a      	ldrb	r2, [r1, r2]
 800a1ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a1b0:	7b7a      	ldrb	r2, [r7, #13]
 800a1b2:	4908      	ldr	r1, [pc, #32]	@ (800a1d4 <UARTEx_SetNbDataToProcess+0x98>)
 800a1b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a1c2:	bf00      	nop
 800a1c4:	3714      	adds	r7, #20
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	0800e254 	.word	0x0800e254
 800a1d4:	0800e25c 	.word	0x0800e25c

0800a1d8 <malloc>:
 800a1d8:	4b02      	ldr	r3, [pc, #8]	@ (800a1e4 <malloc+0xc>)
 800a1da:	4601      	mov	r1, r0
 800a1dc:	6818      	ldr	r0, [r3, #0]
 800a1de:	f000 b82d 	b.w	800a23c <_malloc_r>
 800a1e2:	bf00      	nop
 800a1e4:	20000028 	.word	0x20000028

0800a1e8 <free>:
 800a1e8:	4b02      	ldr	r3, [pc, #8]	@ (800a1f4 <free+0xc>)
 800a1ea:	4601      	mov	r1, r0
 800a1ec:	6818      	ldr	r0, [r3, #0]
 800a1ee:	f001 bd0b 	b.w	800bc08 <_free_r>
 800a1f2:	bf00      	nop
 800a1f4:	20000028 	.word	0x20000028

0800a1f8 <sbrk_aligned>:
 800a1f8:	b570      	push	{r4, r5, r6, lr}
 800a1fa:	4e0f      	ldr	r6, [pc, #60]	@ (800a238 <sbrk_aligned+0x40>)
 800a1fc:	460c      	mov	r4, r1
 800a1fe:	6831      	ldr	r1, [r6, #0]
 800a200:	4605      	mov	r5, r0
 800a202:	b911      	cbnz	r1, 800a20a <sbrk_aligned+0x12>
 800a204:	f000 fe64 	bl	800aed0 <_sbrk_r>
 800a208:	6030      	str	r0, [r6, #0]
 800a20a:	4621      	mov	r1, r4
 800a20c:	4628      	mov	r0, r5
 800a20e:	f000 fe5f 	bl	800aed0 <_sbrk_r>
 800a212:	1c43      	adds	r3, r0, #1
 800a214:	d103      	bne.n	800a21e <sbrk_aligned+0x26>
 800a216:	f04f 34ff 	mov.w	r4, #4294967295
 800a21a:	4620      	mov	r0, r4
 800a21c:	bd70      	pop	{r4, r5, r6, pc}
 800a21e:	1cc4      	adds	r4, r0, #3
 800a220:	f024 0403 	bic.w	r4, r4, #3
 800a224:	42a0      	cmp	r0, r4
 800a226:	d0f8      	beq.n	800a21a <sbrk_aligned+0x22>
 800a228:	1a21      	subs	r1, r4, r0
 800a22a:	4628      	mov	r0, r5
 800a22c:	f000 fe50 	bl	800aed0 <_sbrk_r>
 800a230:	3001      	adds	r0, #1
 800a232:	d1f2      	bne.n	800a21a <sbrk_aligned+0x22>
 800a234:	e7ef      	b.n	800a216 <sbrk_aligned+0x1e>
 800a236:	bf00      	nop
 800a238:	200006e0 	.word	0x200006e0

0800a23c <_malloc_r>:
 800a23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a240:	1ccd      	adds	r5, r1, #3
 800a242:	f025 0503 	bic.w	r5, r5, #3
 800a246:	3508      	adds	r5, #8
 800a248:	2d0c      	cmp	r5, #12
 800a24a:	bf38      	it	cc
 800a24c:	250c      	movcc	r5, #12
 800a24e:	2d00      	cmp	r5, #0
 800a250:	4606      	mov	r6, r0
 800a252:	db01      	blt.n	800a258 <_malloc_r+0x1c>
 800a254:	42a9      	cmp	r1, r5
 800a256:	d904      	bls.n	800a262 <_malloc_r+0x26>
 800a258:	230c      	movs	r3, #12
 800a25a:	6033      	str	r3, [r6, #0]
 800a25c:	2000      	movs	r0, #0
 800a25e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a262:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a338 <_malloc_r+0xfc>
 800a266:	f000 f869 	bl	800a33c <__malloc_lock>
 800a26a:	f8d8 3000 	ldr.w	r3, [r8]
 800a26e:	461c      	mov	r4, r3
 800a270:	bb44      	cbnz	r4, 800a2c4 <_malloc_r+0x88>
 800a272:	4629      	mov	r1, r5
 800a274:	4630      	mov	r0, r6
 800a276:	f7ff ffbf 	bl	800a1f8 <sbrk_aligned>
 800a27a:	1c43      	adds	r3, r0, #1
 800a27c:	4604      	mov	r4, r0
 800a27e:	d158      	bne.n	800a332 <_malloc_r+0xf6>
 800a280:	f8d8 4000 	ldr.w	r4, [r8]
 800a284:	4627      	mov	r7, r4
 800a286:	2f00      	cmp	r7, #0
 800a288:	d143      	bne.n	800a312 <_malloc_r+0xd6>
 800a28a:	2c00      	cmp	r4, #0
 800a28c:	d04b      	beq.n	800a326 <_malloc_r+0xea>
 800a28e:	6823      	ldr	r3, [r4, #0]
 800a290:	4639      	mov	r1, r7
 800a292:	4630      	mov	r0, r6
 800a294:	eb04 0903 	add.w	r9, r4, r3
 800a298:	f000 fe1a 	bl	800aed0 <_sbrk_r>
 800a29c:	4581      	cmp	r9, r0
 800a29e:	d142      	bne.n	800a326 <_malloc_r+0xea>
 800a2a0:	6821      	ldr	r1, [r4, #0]
 800a2a2:	1a6d      	subs	r5, r5, r1
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	f7ff ffa6 	bl	800a1f8 <sbrk_aligned>
 800a2ac:	3001      	adds	r0, #1
 800a2ae:	d03a      	beq.n	800a326 <_malloc_r+0xea>
 800a2b0:	6823      	ldr	r3, [r4, #0]
 800a2b2:	442b      	add	r3, r5
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	f8d8 3000 	ldr.w	r3, [r8]
 800a2ba:	685a      	ldr	r2, [r3, #4]
 800a2bc:	bb62      	cbnz	r2, 800a318 <_malloc_r+0xdc>
 800a2be:	f8c8 7000 	str.w	r7, [r8]
 800a2c2:	e00f      	b.n	800a2e4 <_malloc_r+0xa8>
 800a2c4:	6822      	ldr	r2, [r4, #0]
 800a2c6:	1b52      	subs	r2, r2, r5
 800a2c8:	d420      	bmi.n	800a30c <_malloc_r+0xd0>
 800a2ca:	2a0b      	cmp	r2, #11
 800a2cc:	d917      	bls.n	800a2fe <_malloc_r+0xc2>
 800a2ce:	1961      	adds	r1, r4, r5
 800a2d0:	42a3      	cmp	r3, r4
 800a2d2:	6025      	str	r5, [r4, #0]
 800a2d4:	bf18      	it	ne
 800a2d6:	6059      	strne	r1, [r3, #4]
 800a2d8:	6863      	ldr	r3, [r4, #4]
 800a2da:	bf08      	it	eq
 800a2dc:	f8c8 1000 	streq.w	r1, [r8]
 800a2e0:	5162      	str	r2, [r4, r5]
 800a2e2:	604b      	str	r3, [r1, #4]
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	f000 f82f 	bl	800a348 <__malloc_unlock>
 800a2ea:	f104 000b 	add.w	r0, r4, #11
 800a2ee:	1d23      	adds	r3, r4, #4
 800a2f0:	f020 0007 	bic.w	r0, r0, #7
 800a2f4:	1ac2      	subs	r2, r0, r3
 800a2f6:	bf1c      	itt	ne
 800a2f8:	1a1b      	subne	r3, r3, r0
 800a2fa:	50a3      	strne	r3, [r4, r2]
 800a2fc:	e7af      	b.n	800a25e <_malloc_r+0x22>
 800a2fe:	6862      	ldr	r2, [r4, #4]
 800a300:	42a3      	cmp	r3, r4
 800a302:	bf0c      	ite	eq
 800a304:	f8c8 2000 	streq.w	r2, [r8]
 800a308:	605a      	strne	r2, [r3, #4]
 800a30a:	e7eb      	b.n	800a2e4 <_malloc_r+0xa8>
 800a30c:	4623      	mov	r3, r4
 800a30e:	6864      	ldr	r4, [r4, #4]
 800a310:	e7ae      	b.n	800a270 <_malloc_r+0x34>
 800a312:	463c      	mov	r4, r7
 800a314:	687f      	ldr	r7, [r7, #4]
 800a316:	e7b6      	b.n	800a286 <_malloc_r+0x4a>
 800a318:	461a      	mov	r2, r3
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	42a3      	cmp	r3, r4
 800a31e:	d1fb      	bne.n	800a318 <_malloc_r+0xdc>
 800a320:	2300      	movs	r3, #0
 800a322:	6053      	str	r3, [r2, #4]
 800a324:	e7de      	b.n	800a2e4 <_malloc_r+0xa8>
 800a326:	230c      	movs	r3, #12
 800a328:	6033      	str	r3, [r6, #0]
 800a32a:	4630      	mov	r0, r6
 800a32c:	f000 f80c 	bl	800a348 <__malloc_unlock>
 800a330:	e794      	b.n	800a25c <_malloc_r+0x20>
 800a332:	6005      	str	r5, [r0, #0]
 800a334:	e7d6      	b.n	800a2e4 <_malloc_r+0xa8>
 800a336:	bf00      	nop
 800a338:	200006e4 	.word	0x200006e4

0800a33c <__malloc_lock>:
 800a33c:	4801      	ldr	r0, [pc, #4]	@ (800a344 <__malloc_lock+0x8>)
 800a33e:	f000 be14 	b.w	800af6a <__retarget_lock_acquire_recursive>
 800a342:	bf00      	nop
 800a344:	20000828 	.word	0x20000828

0800a348 <__malloc_unlock>:
 800a348:	4801      	ldr	r0, [pc, #4]	@ (800a350 <__malloc_unlock+0x8>)
 800a34a:	f000 be0f 	b.w	800af6c <__retarget_lock_release_recursive>
 800a34e:	bf00      	nop
 800a350:	20000828 	.word	0x20000828

0800a354 <__cvt>:
 800a354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a358:	ec57 6b10 	vmov	r6, r7, d0
 800a35c:	2f00      	cmp	r7, #0
 800a35e:	460c      	mov	r4, r1
 800a360:	4619      	mov	r1, r3
 800a362:	463b      	mov	r3, r7
 800a364:	bfbb      	ittet	lt
 800a366:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a36a:	461f      	movlt	r7, r3
 800a36c:	2300      	movge	r3, #0
 800a36e:	232d      	movlt	r3, #45	@ 0x2d
 800a370:	700b      	strb	r3, [r1, #0]
 800a372:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a374:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a378:	4691      	mov	r9, r2
 800a37a:	f023 0820 	bic.w	r8, r3, #32
 800a37e:	bfbc      	itt	lt
 800a380:	4632      	movlt	r2, r6
 800a382:	4616      	movlt	r6, r2
 800a384:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a388:	d005      	beq.n	800a396 <__cvt+0x42>
 800a38a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a38e:	d100      	bne.n	800a392 <__cvt+0x3e>
 800a390:	3401      	adds	r4, #1
 800a392:	2102      	movs	r1, #2
 800a394:	e000      	b.n	800a398 <__cvt+0x44>
 800a396:	2103      	movs	r1, #3
 800a398:	ab03      	add	r3, sp, #12
 800a39a:	9301      	str	r3, [sp, #4]
 800a39c:	ab02      	add	r3, sp, #8
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	ec47 6b10 	vmov	d0, r6, r7
 800a3a4:	4653      	mov	r3, sl
 800a3a6:	4622      	mov	r2, r4
 800a3a8:	f000 fe6a 	bl	800b080 <_dtoa_r>
 800a3ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a3b0:	4605      	mov	r5, r0
 800a3b2:	d119      	bne.n	800a3e8 <__cvt+0x94>
 800a3b4:	f019 0f01 	tst.w	r9, #1
 800a3b8:	d00e      	beq.n	800a3d8 <__cvt+0x84>
 800a3ba:	eb00 0904 	add.w	r9, r0, r4
 800a3be:	2200      	movs	r2, #0
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	4639      	mov	r1, r7
 800a3c6:	f7f6 fba7 	bl	8000b18 <__aeabi_dcmpeq>
 800a3ca:	b108      	cbz	r0, 800a3d0 <__cvt+0x7c>
 800a3cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800a3d0:	2230      	movs	r2, #48	@ 0x30
 800a3d2:	9b03      	ldr	r3, [sp, #12]
 800a3d4:	454b      	cmp	r3, r9
 800a3d6:	d31e      	bcc.n	800a416 <__cvt+0xc2>
 800a3d8:	9b03      	ldr	r3, [sp, #12]
 800a3da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3dc:	1b5b      	subs	r3, r3, r5
 800a3de:	4628      	mov	r0, r5
 800a3e0:	6013      	str	r3, [r2, #0]
 800a3e2:	b004      	add	sp, #16
 800a3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a3ec:	eb00 0904 	add.w	r9, r0, r4
 800a3f0:	d1e5      	bne.n	800a3be <__cvt+0x6a>
 800a3f2:	7803      	ldrb	r3, [r0, #0]
 800a3f4:	2b30      	cmp	r3, #48	@ 0x30
 800a3f6:	d10a      	bne.n	800a40e <__cvt+0xba>
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	4639      	mov	r1, r7
 800a400:	f7f6 fb8a 	bl	8000b18 <__aeabi_dcmpeq>
 800a404:	b918      	cbnz	r0, 800a40e <__cvt+0xba>
 800a406:	f1c4 0401 	rsb	r4, r4, #1
 800a40a:	f8ca 4000 	str.w	r4, [sl]
 800a40e:	f8da 3000 	ldr.w	r3, [sl]
 800a412:	4499      	add	r9, r3
 800a414:	e7d3      	b.n	800a3be <__cvt+0x6a>
 800a416:	1c59      	adds	r1, r3, #1
 800a418:	9103      	str	r1, [sp, #12]
 800a41a:	701a      	strb	r2, [r3, #0]
 800a41c:	e7d9      	b.n	800a3d2 <__cvt+0x7e>

0800a41e <__exponent>:
 800a41e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a420:	2900      	cmp	r1, #0
 800a422:	bfba      	itte	lt
 800a424:	4249      	neglt	r1, r1
 800a426:	232d      	movlt	r3, #45	@ 0x2d
 800a428:	232b      	movge	r3, #43	@ 0x2b
 800a42a:	2909      	cmp	r1, #9
 800a42c:	7002      	strb	r2, [r0, #0]
 800a42e:	7043      	strb	r3, [r0, #1]
 800a430:	dd29      	ble.n	800a486 <__exponent+0x68>
 800a432:	f10d 0307 	add.w	r3, sp, #7
 800a436:	461d      	mov	r5, r3
 800a438:	270a      	movs	r7, #10
 800a43a:	461a      	mov	r2, r3
 800a43c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a440:	fb07 1416 	mls	r4, r7, r6, r1
 800a444:	3430      	adds	r4, #48	@ 0x30
 800a446:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a44a:	460c      	mov	r4, r1
 800a44c:	2c63      	cmp	r4, #99	@ 0x63
 800a44e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a452:	4631      	mov	r1, r6
 800a454:	dcf1      	bgt.n	800a43a <__exponent+0x1c>
 800a456:	3130      	adds	r1, #48	@ 0x30
 800a458:	1e94      	subs	r4, r2, #2
 800a45a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a45e:	1c41      	adds	r1, r0, #1
 800a460:	4623      	mov	r3, r4
 800a462:	42ab      	cmp	r3, r5
 800a464:	d30a      	bcc.n	800a47c <__exponent+0x5e>
 800a466:	f10d 0309 	add.w	r3, sp, #9
 800a46a:	1a9b      	subs	r3, r3, r2
 800a46c:	42ac      	cmp	r4, r5
 800a46e:	bf88      	it	hi
 800a470:	2300      	movhi	r3, #0
 800a472:	3302      	adds	r3, #2
 800a474:	4403      	add	r3, r0
 800a476:	1a18      	subs	r0, r3, r0
 800a478:	b003      	add	sp, #12
 800a47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a47c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a480:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a484:	e7ed      	b.n	800a462 <__exponent+0x44>
 800a486:	2330      	movs	r3, #48	@ 0x30
 800a488:	3130      	adds	r1, #48	@ 0x30
 800a48a:	7083      	strb	r3, [r0, #2]
 800a48c:	70c1      	strb	r1, [r0, #3]
 800a48e:	1d03      	adds	r3, r0, #4
 800a490:	e7f1      	b.n	800a476 <__exponent+0x58>
	...

0800a494 <_printf_float>:
 800a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	b08d      	sub	sp, #52	@ 0x34
 800a49a:	460c      	mov	r4, r1
 800a49c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a4a0:	4616      	mov	r6, r2
 800a4a2:	461f      	mov	r7, r3
 800a4a4:	4605      	mov	r5, r0
 800a4a6:	f000 fcdb 	bl	800ae60 <_localeconv_r>
 800a4aa:	6803      	ldr	r3, [r0, #0]
 800a4ac:	9304      	str	r3, [sp, #16]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7f5 ff06 	bl	80002c0 <strlen>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4b8:	f8d8 3000 	ldr.w	r3, [r8]
 800a4bc:	9005      	str	r0, [sp, #20]
 800a4be:	3307      	adds	r3, #7
 800a4c0:	f023 0307 	bic.w	r3, r3, #7
 800a4c4:	f103 0208 	add.w	r2, r3, #8
 800a4c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a4cc:	f8d4 b000 	ldr.w	fp, [r4]
 800a4d0:	f8c8 2000 	str.w	r2, [r8]
 800a4d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a4dc:	9307      	str	r3, [sp, #28]
 800a4de:	f8cd 8018 	str.w	r8, [sp, #24]
 800a4e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a4e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4ea:	4b9c      	ldr	r3, [pc, #624]	@ (800a75c <_printf_float+0x2c8>)
 800a4ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f0:	f7f6 fb44 	bl	8000b7c <__aeabi_dcmpun>
 800a4f4:	bb70      	cbnz	r0, 800a554 <_printf_float+0xc0>
 800a4f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4fa:	4b98      	ldr	r3, [pc, #608]	@ (800a75c <_printf_float+0x2c8>)
 800a4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a500:	f7f6 fb1e 	bl	8000b40 <__aeabi_dcmple>
 800a504:	bb30      	cbnz	r0, 800a554 <_printf_float+0xc0>
 800a506:	2200      	movs	r2, #0
 800a508:	2300      	movs	r3, #0
 800a50a:	4640      	mov	r0, r8
 800a50c:	4649      	mov	r1, r9
 800a50e:	f7f6 fb0d 	bl	8000b2c <__aeabi_dcmplt>
 800a512:	b110      	cbz	r0, 800a51a <_printf_float+0x86>
 800a514:	232d      	movs	r3, #45	@ 0x2d
 800a516:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a51a:	4a91      	ldr	r2, [pc, #580]	@ (800a760 <_printf_float+0x2cc>)
 800a51c:	4b91      	ldr	r3, [pc, #580]	@ (800a764 <_printf_float+0x2d0>)
 800a51e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a522:	bf94      	ite	ls
 800a524:	4690      	movls	r8, r2
 800a526:	4698      	movhi	r8, r3
 800a528:	2303      	movs	r3, #3
 800a52a:	6123      	str	r3, [r4, #16]
 800a52c:	f02b 0304 	bic.w	r3, fp, #4
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	f04f 0900 	mov.w	r9, #0
 800a536:	9700      	str	r7, [sp, #0]
 800a538:	4633      	mov	r3, r6
 800a53a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a53c:	4621      	mov	r1, r4
 800a53e:	4628      	mov	r0, r5
 800a540:	f000 f9d2 	bl	800a8e8 <_printf_common>
 800a544:	3001      	adds	r0, #1
 800a546:	f040 808d 	bne.w	800a664 <_printf_float+0x1d0>
 800a54a:	f04f 30ff 	mov.w	r0, #4294967295
 800a54e:	b00d      	add	sp, #52	@ 0x34
 800a550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a554:	4642      	mov	r2, r8
 800a556:	464b      	mov	r3, r9
 800a558:	4640      	mov	r0, r8
 800a55a:	4649      	mov	r1, r9
 800a55c:	f7f6 fb0e 	bl	8000b7c <__aeabi_dcmpun>
 800a560:	b140      	cbz	r0, 800a574 <_printf_float+0xe0>
 800a562:	464b      	mov	r3, r9
 800a564:	2b00      	cmp	r3, #0
 800a566:	bfbc      	itt	lt
 800a568:	232d      	movlt	r3, #45	@ 0x2d
 800a56a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a56e:	4a7e      	ldr	r2, [pc, #504]	@ (800a768 <_printf_float+0x2d4>)
 800a570:	4b7e      	ldr	r3, [pc, #504]	@ (800a76c <_printf_float+0x2d8>)
 800a572:	e7d4      	b.n	800a51e <_printf_float+0x8a>
 800a574:	6863      	ldr	r3, [r4, #4]
 800a576:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a57a:	9206      	str	r2, [sp, #24]
 800a57c:	1c5a      	adds	r2, r3, #1
 800a57e:	d13b      	bne.n	800a5f8 <_printf_float+0x164>
 800a580:	2306      	movs	r3, #6
 800a582:	6063      	str	r3, [r4, #4]
 800a584:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a588:	2300      	movs	r3, #0
 800a58a:	6022      	str	r2, [r4, #0]
 800a58c:	9303      	str	r3, [sp, #12]
 800a58e:	ab0a      	add	r3, sp, #40	@ 0x28
 800a590:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a594:	ab09      	add	r3, sp, #36	@ 0x24
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	6861      	ldr	r1, [r4, #4]
 800a59a:	ec49 8b10 	vmov	d0, r8, r9
 800a59e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	f7ff fed6 	bl	800a354 <__cvt>
 800a5a8:	9b06      	ldr	r3, [sp, #24]
 800a5aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a5ac:	2b47      	cmp	r3, #71	@ 0x47
 800a5ae:	4680      	mov	r8, r0
 800a5b0:	d129      	bne.n	800a606 <_printf_float+0x172>
 800a5b2:	1cc8      	adds	r0, r1, #3
 800a5b4:	db02      	blt.n	800a5bc <_printf_float+0x128>
 800a5b6:	6863      	ldr	r3, [r4, #4]
 800a5b8:	4299      	cmp	r1, r3
 800a5ba:	dd41      	ble.n	800a640 <_printf_float+0x1ac>
 800a5bc:	f1aa 0a02 	sub.w	sl, sl, #2
 800a5c0:	fa5f fa8a 	uxtb.w	sl, sl
 800a5c4:	3901      	subs	r1, #1
 800a5c6:	4652      	mov	r2, sl
 800a5c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a5cc:	9109      	str	r1, [sp, #36]	@ 0x24
 800a5ce:	f7ff ff26 	bl	800a41e <__exponent>
 800a5d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a5d4:	1813      	adds	r3, r2, r0
 800a5d6:	2a01      	cmp	r2, #1
 800a5d8:	4681      	mov	r9, r0
 800a5da:	6123      	str	r3, [r4, #16]
 800a5dc:	dc02      	bgt.n	800a5e4 <_printf_float+0x150>
 800a5de:	6822      	ldr	r2, [r4, #0]
 800a5e0:	07d2      	lsls	r2, r2, #31
 800a5e2:	d501      	bpl.n	800a5e8 <_printf_float+0x154>
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	6123      	str	r3, [r4, #16]
 800a5e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d0a2      	beq.n	800a536 <_printf_float+0xa2>
 800a5f0:	232d      	movs	r3, #45	@ 0x2d
 800a5f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5f6:	e79e      	b.n	800a536 <_printf_float+0xa2>
 800a5f8:	9a06      	ldr	r2, [sp, #24]
 800a5fa:	2a47      	cmp	r2, #71	@ 0x47
 800a5fc:	d1c2      	bne.n	800a584 <_printf_float+0xf0>
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1c0      	bne.n	800a584 <_printf_float+0xf0>
 800a602:	2301      	movs	r3, #1
 800a604:	e7bd      	b.n	800a582 <_printf_float+0xee>
 800a606:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a60a:	d9db      	bls.n	800a5c4 <_printf_float+0x130>
 800a60c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a610:	d118      	bne.n	800a644 <_printf_float+0x1b0>
 800a612:	2900      	cmp	r1, #0
 800a614:	6863      	ldr	r3, [r4, #4]
 800a616:	dd0b      	ble.n	800a630 <_printf_float+0x19c>
 800a618:	6121      	str	r1, [r4, #16]
 800a61a:	b913      	cbnz	r3, 800a622 <_printf_float+0x18e>
 800a61c:	6822      	ldr	r2, [r4, #0]
 800a61e:	07d0      	lsls	r0, r2, #31
 800a620:	d502      	bpl.n	800a628 <_printf_float+0x194>
 800a622:	3301      	adds	r3, #1
 800a624:	440b      	add	r3, r1
 800a626:	6123      	str	r3, [r4, #16]
 800a628:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a62a:	f04f 0900 	mov.w	r9, #0
 800a62e:	e7db      	b.n	800a5e8 <_printf_float+0x154>
 800a630:	b913      	cbnz	r3, 800a638 <_printf_float+0x1a4>
 800a632:	6822      	ldr	r2, [r4, #0]
 800a634:	07d2      	lsls	r2, r2, #31
 800a636:	d501      	bpl.n	800a63c <_printf_float+0x1a8>
 800a638:	3302      	adds	r3, #2
 800a63a:	e7f4      	b.n	800a626 <_printf_float+0x192>
 800a63c:	2301      	movs	r3, #1
 800a63e:	e7f2      	b.n	800a626 <_printf_float+0x192>
 800a640:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a644:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a646:	4299      	cmp	r1, r3
 800a648:	db05      	blt.n	800a656 <_printf_float+0x1c2>
 800a64a:	6823      	ldr	r3, [r4, #0]
 800a64c:	6121      	str	r1, [r4, #16]
 800a64e:	07d8      	lsls	r0, r3, #31
 800a650:	d5ea      	bpl.n	800a628 <_printf_float+0x194>
 800a652:	1c4b      	adds	r3, r1, #1
 800a654:	e7e7      	b.n	800a626 <_printf_float+0x192>
 800a656:	2900      	cmp	r1, #0
 800a658:	bfd4      	ite	le
 800a65a:	f1c1 0202 	rsble	r2, r1, #2
 800a65e:	2201      	movgt	r2, #1
 800a660:	4413      	add	r3, r2
 800a662:	e7e0      	b.n	800a626 <_printf_float+0x192>
 800a664:	6823      	ldr	r3, [r4, #0]
 800a666:	055a      	lsls	r2, r3, #21
 800a668:	d407      	bmi.n	800a67a <_printf_float+0x1e6>
 800a66a:	6923      	ldr	r3, [r4, #16]
 800a66c:	4642      	mov	r2, r8
 800a66e:	4631      	mov	r1, r6
 800a670:	4628      	mov	r0, r5
 800a672:	47b8      	blx	r7
 800a674:	3001      	adds	r0, #1
 800a676:	d12b      	bne.n	800a6d0 <_printf_float+0x23c>
 800a678:	e767      	b.n	800a54a <_printf_float+0xb6>
 800a67a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a67e:	f240 80dd 	bls.w	800a83c <_printf_float+0x3a8>
 800a682:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a686:	2200      	movs	r2, #0
 800a688:	2300      	movs	r3, #0
 800a68a:	f7f6 fa45 	bl	8000b18 <__aeabi_dcmpeq>
 800a68e:	2800      	cmp	r0, #0
 800a690:	d033      	beq.n	800a6fa <_printf_float+0x266>
 800a692:	4a37      	ldr	r2, [pc, #220]	@ (800a770 <_printf_float+0x2dc>)
 800a694:	2301      	movs	r3, #1
 800a696:	4631      	mov	r1, r6
 800a698:	4628      	mov	r0, r5
 800a69a:	47b8      	blx	r7
 800a69c:	3001      	adds	r0, #1
 800a69e:	f43f af54 	beq.w	800a54a <_printf_float+0xb6>
 800a6a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a6a6:	4543      	cmp	r3, r8
 800a6a8:	db02      	blt.n	800a6b0 <_printf_float+0x21c>
 800a6aa:	6823      	ldr	r3, [r4, #0]
 800a6ac:	07d8      	lsls	r0, r3, #31
 800a6ae:	d50f      	bpl.n	800a6d0 <_printf_float+0x23c>
 800a6b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6b4:	4631      	mov	r1, r6
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	47b8      	blx	r7
 800a6ba:	3001      	adds	r0, #1
 800a6bc:	f43f af45 	beq.w	800a54a <_printf_float+0xb6>
 800a6c0:	f04f 0900 	mov.w	r9, #0
 800a6c4:	f108 38ff 	add.w	r8, r8, #4294967295
 800a6c8:	f104 0a1a 	add.w	sl, r4, #26
 800a6cc:	45c8      	cmp	r8, r9
 800a6ce:	dc09      	bgt.n	800a6e4 <_printf_float+0x250>
 800a6d0:	6823      	ldr	r3, [r4, #0]
 800a6d2:	079b      	lsls	r3, r3, #30
 800a6d4:	f100 8103 	bmi.w	800a8de <_printf_float+0x44a>
 800a6d8:	68e0      	ldr	r0, [r4, #12]
 800a6da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6dc:	4298      	cmp	r0, r3
 800a6de:	bfb8      	it	lt
 800a6e0:	4618      	movlt	r0, r3
 800a6e2:	e734      	b.n	800a54e <_printf_float+0xba>
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	4652      	mov	r2, sl
 800a6e8:	4631      	mov	r1, r6
 800a6ea:	4628      	mov	r0, r5
 800a6ec:	47b8      	blx	r7
 800a6ee:	3001      	adds	r0, #1
 800a6f0:	f43f af2b 	beq.w	800a54a <_printf_float+0xb6>
 800a6f4:	f109 0901 	add.w	r9, r9, #1
 800a6f8:	e7e8      	b.n	800a6cc <_printf_float+0x238>
 800a6fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	dc39      	bgt.n	800a774 <_printf_float+0x2e0>
 800a700:	4a1b      	ldr	r2, [pc, #108]	@ (800a770 <_printf_float+0x2dc>)
 800a702:	2301      	movs	r3, #1
 800a704:	4631      	mov	r1, r6
 800a706:	4628      	mov	r0, r5
 800a708:	47b8      	blx	r7
 800a70a:	3001      	adds	r0, #1
 800a70c:	f43f af1d 	beq.w	800a54a <_printf_float+0xb6>
 800a710:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a714:	ea59 0303 	orrs.w	r3, r9, r3
 800a718:	d102      	bne.n	800a720 <_printf_float+0x28c>
 800a71a:	6823      	ldr	r3, [r4, #0]
 800a71c:	07d9      	lsls	r1, r3, #31
 800a71e:	d5d7      	bpl.n	800a6d0 <_printf_float+0x23c>
 800a720:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a724:	4631      	mov	r1, r6
 800a726:	4628      	mov	r0, r5
 800a728:	47b8      	blx	r7
 800a72a:	3001      	adds	r0, #1
 800a72c:	f43f af0d 	beq.w	800a54a <_printf_float+0xb6>
 800a730:	f04f 0a00 	mov.w	sl, #0
 800a734:	f104 0b1a 	add.w	fp, r4, #26
 800a738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a73a:	425b      	negs	r3, r3
 800a73c:	4553      	cmp	r3, sl
 800a73e:	dc01      	bgt.n	800a744 <_printf_float+0x2b0>
 800a740:	464b      	mov	r3, r9
 800a742:	e793      	b.n	800a66c <_printf_float+0x1d8>
 800a744:	2301      	movs	r3, #1
 800a746:	465a      	mov	r2, fp
 800a748:	4631      	mov	r1, r6
 800a74a:	4628      	mov	r0, r5
 800a74c:	47b8      	blx	r7
 800a74e:	3001      	adds	r0, #1
 800a750:	f43f aefb 	beq.w	800a54a <_printf_float+0xb6>
 800a754:	f10a 0a01 	add.w	sl, sl, #1
 800a758:	e7ee      	b.n	800a738 <_printf_float+0x2a4>
 800a75a:	bf00      	nop
 800a75c:	7fefffff 	.word	0x7fefffff
 800a760:	0800e264 	.word	0x0800e264
 800a764:	0800e268 	.word	0x0800e268
 800a768:	0800e26c 	.word	0x0800e26c
 800a76c:	0800e270 	.word	0x0800e270
 800a770:	0800e274 	.word	0x0800e274
 800a774:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a776:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a77a:	4553      	cmp	r3, sl
 800a77c:	bfa8      	it	ge
 800a77e:	4653      	movge	r3, sl
 800a780:	2b00      	cmp	r3, #0
 800a782:	4699      	mov	r9, r3
 800a784:	dc36      	bgt.n	800a7f4 <_printf_float+0x360>
 800a786:	f04f 0b00 	mov.w	fp, #0
 800a78a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a78e:	f104 021a 	add.w	r2, r4, #26
 800a792:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a794:	9306      	str	r3, [sp, #24]
 800a796:	eba3 0309 	sub.w	r3, r3, r9
 800a79a:	455b      	cmp	r3, fp
 800a79c:	dc31      	bgt.n	800a802 <_printf_float+0x36e>
 800a79e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7a0:	459a      	cmp	sl, r3
 800a7a2:	dc3a      	bgt.n	800a81a <_printf_float+0x386>
 800a7a4:	6823      	ldr	r3, [r4, #0]
 800a7a6:	07da      	lsls	r2, r3, #31
 800a7a8:	d437      	bmi.n	800a81a <_printf_float+0x386>
 800a7aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ac:	ebaa 0903 	sub.w	r9, sl, r3
 800a7b0:	9b06      	ldr	r3, [sp, #24]
 800a7b2:	ebaa 0303 	sub.w	r3, sl, r3
 800a7b6:	4599      	cmp	r9, r3
 800a7b8:	bfa8      	it	ge
 800a7ba:	4699      	movge	r9, r3
 800a7bc:	f1b9 0f00 	cmp.w	r9, #0
 800a7c0:	dc33      	bgt.n	800a82a <_printf_float+0x396>
 800a7c2:	f04f 0800 	mov.w	r8, #0
 800a7c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7ca:	f104 0b1a 	add.w	fp, r4, #26
 800a7ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7d0:	ebaa 0303 	sub.w	r3, sl, r3
 800a7d4:	eba3 0309 	sub.w	r3, r3, r9
 800a7d8:	4543      	cmp	r3, r8
 800a7da:	f77f af79 	ble.w	800a6d0 <_printf_float+0x23c>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	465a      	mov	r2, fp
 800a7e2:	4631      	mov	r1, r6
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	47b8      	blx	r7
 800a7e8:	3001      	adds	r0, #1
 800a7ea:	f43f aeae 	beq.w	800a54a <_printf_float+0xb6>
 800a7ee:	f108 0801 	add.w	r8, r8, #1
 800a7f2:	e7ec      	b.n	800a7ce <_printf_float+0x33a>
 800a7f4:	4642      	mov	r2, r8
 800a7f6:	4631      	mov	r1, r6
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	47b8      	blx	r7
 800a7fc:	3001      	adds	r0, #1
 800a7fe:	d1c2      	bne.n	800a786 <_printf_float+0x2f2>
 800a800:	e6a3      	b.n	800a54a <_printf_float+0xb6>
 800a802:	2301      	movs	r3, #1
 800a804:	4631      	mov	r1, r6
 800a806:	4628      	mov	r0, r5
 800a808:	9206      	str	r2, [sp, #24]
 800a80a:	47b8      	blx	r7
 800a80c:	3001      	adds	r0, #1
 800a80e:	f43f ae9c 	beq.w	800a54a <_printf_float+0xb6>
 800a812:	9a06      	ldr	r2, [sp, #24]
 800a814:	f10b 0b01 	add.w	fp, fp, #1
 800a818:	e7bb      	b.n	800a792 <_printf_float+0x2fe>
 800a81a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a81e:	4631      	mov	r1, r6
 800a820:	4628      	mov	r0, r5
 800a822:	47b8      	blx	r7
 800a824:	3001      	adds	r0, #1
 800a826:	d1c0      	bne.n	800a7aa <_printf_float+0x316>
 800a828:	e68f      	b.n	800a54a <_printf_float+0xb6>
 800a82a:	9a06      	ldr	r2, [sp, #24]
 800a82c:	464b      	mov	r3, r9
 800a82e:	4442      	add	r2, r8
 800a830:	4631      	mov	r1, r6
 800a832:	4628      	mov	r0, r5
 800a834:	47b8      	blx	r7
 800a836:	3001      	adds	r0, #1
 800a838:	d1c3      	bne.n	800a7c2 <_printf_float+0x32e>
 800a83a:	e686      	b.n	800a54a <_printf_float+0xb6>
 800a83c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a840:	f1ba 0f01 	cmp.w	sl, #1
 800a844:	dc01      	bgt.n	800a84a <_printf_float+0x3b6>
 800a846:	07db      	lsls	r3, r3, #31
 800a848:	d536      	bpl.n	800a8b8 <_printf_float+0x424>
 800a84a:	2301      	movs	r3, #1
 800a84c:	4642      	mov	r2, r8
 800a84e:	4631      	mov	r1, r6
 800a850:	4628      	mov	r0, r5
 800a852:	47b8      	blx	r7
 800a854:	3001      	adds	r0, #1
 800a856:	f43f ae78 	beq.w	800a54a <_printf_float+0xb6>
 800a85a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a85e:	4631      	mov	r1, r6
 800a860:	4628      	mov	r0, r5
 800a862:	47b8      	blx	r7
 800a864:	3001      	adds	r0, #1
 800a866:	f43f ae70 	beq.w	800a54a <_printf_float+0xb6>
 800a86a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a86e:	2200      	movs	r2, #0
 800a870:	2300      	movs	r3, #0
 800a872:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a876:	f7f6 f94f 	bl	8000b18 <__aeabi_dcmpeq>
 800a87a:	b9c0      	cbnz	r0, 800a8ae <_printf_float+0x41a>
 800a87c:	4653      	mov	r3, sl
 800a87e:	f108 0201 	add.w	r2, r8, #1
 800a882:	4631      	mov	r1, r6
 800a884:	4628      	mov	r0, r5
 800a886:	47b8      	blx	r7
 800a888:	3001      	adds	r0, #1
 800a88a:	d10c      	bne.n	800a8a6 <_printf_float+0x412>
 800a88c:	e65d      	b.n	800a54a <_printf_float+0xb6>
 800a88e:	2301      	movs	r3, #1
 800a890:	465a      	mov	r2, fp
 800a892:	4631      	mov	r1, r6
 800a894:	4628      	mov	r0, r5
 800a896:	47b8      	blx	r7
 800a898:	3001      	adds	r0, #1
 800a89a:	f43f ae56 	beq.w	800a54a <_printf_float+0xb6>
 800a89e:	f108 0801 	add.w	r8, r8, #1
 800a8a2:	45d0      	cmp	r8, sl
 800a8a4:	dbf3      	blt.n	800a88e <_printf_float+0x3fa>
 800a8a6:	464b      	mov	r3, r9
 800a8a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a8ac:	e6df      	b.n	800a66e <_printf_float+0x1da>
 800a8ae:	f04f 0800 	mov.w	r8, #0
 800a8b2:	f104 0b1a 	add.w	fp, r4, #26
 800a8b6:	e7f4      	b.n	800a8a2 <_printf_float+0x40e>
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	4642      	mov	r2, r8
 800a8bc:	e7e1      	b.n	800a882 <_printf_float+0x3ee>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	464a      	mov	r2, r9
 800a8c2:	4631      	mov	r1, r6
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	47b8      	blx	r7
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	f43f ae3e 	beq.w	800a54a <_printf_float+0xb6>
 800a8ce:	f108 0801 	add.w	r8, r8, #1
 800a8d2:	68e3      	ldr	r3, [r4, #12]
 800a8d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a8d6:	1a5b      	subs	r3, r3, r1
 800a8d8:	4543      	cmp	r3, r8
 800a8da:	dcf0      	bgt.n	800a8be <_printf_float+0x42a>
 800a8dc:	e6fc      	b.n	800a6d8 <_printf_float+0x244>
 800a8de:	f04f 0800 	mov.w	r8, #0
 800a8e2:	f104 0919 	add.w	r9, r4, #25
 800a8e6:	e7f4      	b.n	800a8d2 <_printf_float+0x43e>

0800a8e8 <_printf_common>:
 800a8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ec:	4616      	mov	r6, r2
 800a8ee:	4698      	mov	r8, r3
 800a8f0:	688a      	ldr	r2, [r1, #8]
 800a8f2:	690b      	ldr	r3, [r1, #16]
 800a8f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	bfb8      	it	lt
 800a8fc:	4613      	movlt	r3, r2
 800a8fe:	6033      	str	r3, [r6, #0]
 800a900:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a904:	4607      	mov	r7, r0
 800a906:	460c      	mov	r4, r1
 800a908:	b10a      	cbz	r2, 800a90e <_printf_common+0x26>
 800a90a:	3301      	adds	r3, #1
 800a90c:	6033      	str	r3, [r6, #0]
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	0699      	lsls	r1, r3, #26
 800a912:	bf42      	ittt	mi
 800a914:	6833      	ldrmi	r3, [r6, #0]
 800a916:	3302      	addmi	r3, #2
 800a918:	6033      	strmi	r3, [r6, #0]
 800a91a:	6825      	ldr	r5, [r4, #0]
 800a91c:	f015 0506 	ands.w	r5, r5, #6
 800a920:	d106      	bne.n	800a930 <_printf_common+0x48>
 800a922:	f104 0a19 	add.w	sl, r4, #25
 800a926:	68e3      	ldr	r3, [r4, #12]
 800a928:	6832      	ldr	r2, [r6, #0]
 800a92a:	1a9b      	subs	r3, r3, r2
 800a92c:	42ab      	cmp	r3, r5
 800a92e:	dc26      	bgt.n	800a97e <_printf_common+0x96>
 800a930:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a934:	6822      	ldr	r2, [r4, #0]
 800a936:	3b00      	subs	r3, #0
 800a938:	bf18      	it	ne
 800a93a:	2301      	movne	r3, #1
 800a93c:	0692      	lsls	r2, r2, #26
 800a93e:	d42b      	bmi.n	800a998 <_printf_common+0xb0>
 800a940:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a944:	4641      	mov	r1, r8
 800a946:	4638      	mov	r0, r7
 800a948:	47c8      	blx	r9
 800a94a:	3001      	adds	r0, #1
 800a94c:	d01e      	beq.n	800a98c <_printf_common+0xa4>
 800a94e:	6823      	ldr	r3, [r4, #0]
 800a950:	6922      	ldr	r2, [r4, #16]
 800a952:	f003 0306 	and.w	r3, r3, #6
 800a956:	2b04      	cmp	r3, #4
 800a958:	bf02      	ittt	eq
 800a95a:	68e5      	ldreq	r5, [r4, #12]
 800a95c:	6833      	ldreq	r3, [r6, #0]
 800a95e:	1aed      	subeq	r5, r5, r3
 800a960:	68a3      	ldr	r3, [r4, #8]
 800a962:	bf0c      	ite	eq
 800a964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a968:	2500      	movne	r5, #0
 800a96a:	4293      	cmp	r3, r2
 800a96c:	bfc4      	itt	gt
 800a96e:	1a9b      	subgt	r3, r3, r2
 800a970:	18ed      	addgt	r5, r5, r3
 800a972:	2600      	movs	r6, #0
 800a974:	341a      	adds	r4, #26
 800a976:	42b5      	cmp	r5, r6
 800a978:	d11a      	bne.n	800a9b0 <_printf_common+0xc8>
 800a97a:	2000      	movs	r0, #0
 800a97c:	e008      	b.n	800a990 <_printf_common+0xa8>
 800a97e:	2301      	movs	r3, #1
 800a980:	4652      	mov	r2, sl
 800a982:	4641      	mov	r1, r8
 800a984:	4638      	mov	r0, r7
 800a986:	47c8      	blx	r9
 800a988:	3001      	adds	r0, #1
 800a98a:	d103      	bne.n	800a994 <_printf_common+0xac>
 800a98c:	f04f 30ff 	mov.w	r0, #4294967295
 800a990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a994:	3501      	adds	r5, #1
 800a996:	e7c6      	b.n	800a926 <_printf_common+0x3e>
 800a998:	18e1      	adds	r1, r4, r3
 800a99a:	1c5a      	adds	r2, r3, #1
 800a99c:	2030      	movs	r0, #48	@ 0x30
 800a99e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a9a2:	4422      	add	r2, r4
 800a9a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a9a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a9ac:	3302      	adds	r3, #2
 800a9ae:	e7c7      	b.n	800a940 <_printf_common+0x58>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	4622      	mov	r2, r4
 800a9b4:	4641      	mov	r1, r8
 800a9b6:	4638      	mov	r0, r7
 800a9b8:	47c8      	blx	r9
 800a9ba:	3001      	adds	r0, #1
 800a9bc:	d0e6      	beq.n	800a98c <_printf_common+0xa4>
 800a9be:	3601      	adds	r6, #1
 800a9c0:	e7d9      	b.n	800a976 <_printf_common+0x8e>
	...

0800a9c4 <_printf_i>:
 800a9c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c8:	7e0f      	ldrb	r7, [r1, #24]
 800a9ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a9cc:	2f78      	cmp	r7, #120	@ 0x78
 800a9ce:	4691      	mov	r9, r2
 800a9d0:	4680      	mov	r8, r0
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	469a      	mov	sl, r3
 800a9d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a9da:	d807      	bhi.n	800a9ec <_printf_i+0x28>
 800a9dc:	2f62      	cmp	r7, #98	@ 0x62
 800a9de:	d80a      	bhi.n	800a9f6 <_printf_i+0x32>
 800a9e0:	2f00      	cmp	r7, #0
 800a9e2:	f000 80d2 	beq.w	800ab8a <_printf_i+0x1c6>
 800a9e6:	2f58      	cmp	r7, #88	@ 0x58
 800a9e8:	f000 80b9 	beq.w	800ab5e <_printf_i+0x19a>
 800a9ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a9f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a9f4:	e03a      	b.n	800aa6c <_printf_i+0xa8>
 800a9f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a9fa:	2b15      	cmp	r3, #21
 800a9fc:	d8f6      	bhi.n	800a9ec <_printf_i+0x28>
 800a9fe:	a101      	add	r1, pc, #4	@ (adr r1, 800aa04 <_printf_i+0x40>)
 800aa00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa04:	0800aa5d 	.word	0x0800aa5d
 800aa08:	0800aa71 	.word	0x0800aa71
 800aa0c:	0800a9ed 	.word	0x0800a9ed
 800aa10:	0800a9ed 	.word	0x0800a9ed
 800aa14:	0800a9ed 	.word	0x0800a9ed
 800aa18:	0800a9ed 	.word	0x0800a9ed
 800aa1c:	0800aa71 	.word	0x0800aa71
 800aa20:	0800a9ed 	.word	0x0800a9ed
 800aa24:	0800a9ed 	.word	0x0800a9ed
 800aa28:	0800a9ed 	.word	0x0800a9ed
 800aa2c:	0800a9ed 	.word	0x0800a9ed
 800aa30:	0800ab71 	.word	0x0800ab71
 800aa34:	0800aa9b 	.word	0x0800aa9b
 800aa38:	0800ab2b 	.word	0x0800ab2b
 800aa3c:	0800a9ed 	.word	0x0800a9ed
 800aa40:	0800a9ed 	.word	0x0800a9ed
 800aa44:	0800ab93 	.word	0x0800ab93
 800aa48:	0800a9ed 	.word	0x0800a9ed
 800aa4c:	0800aa9b 	.word	0x0800aa9b
 800aa50:	0800a9ed 	.word	0x0800a9ed
 800aa54:	0800a9ed 	.word	0x0800a9ed
 800aa58:	0800ab33 	.word	0x0800ab33
 800aa5c:	6833      	ldr	r3, [r6, #0]
 800aa5e:	1d1a      	adds	r2, r3, #4
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	6032      	str	r2, [r6, #0]
 800aa64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e09d      	b.n	800abac <_printf_i+0x1e8>
 800aa70:	6833      	ldr	r3, [r6, #0]
 800aa72:	6820      	ldr	r0, [r4, #0]
 800aa74:	1d19      	adds	r1, r3, #4
 800aa76:	6031      	str	r1, [r6, #0]
 800aa78:	0606      	lsls	r6, r0, #24
 800aa7a:	d501      	bpl.n	800aa80 <_printf_i+0xbc>
 800aa7c:	681d      	ldr	r5, [r3, #0]
 800aa7e:	e003      	b.n	800aa88 <_printf_i+0xc4>
 800aa80:	0645      	lsls	r5, r0, #25
 800aa82:	d5fb      	bpl.n	800aa7c <_printf_i+0xb8>
 800aa84:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aa88:	2d00      	cmp	r5, #0
 800aa8a:	da03      	bge.n	800aa94 <_printf_i+0xd0>
 800aa8c:	232d      	movs	r3, #45	@ 0x2d
 800aa8e:	426d      	negs	r5, r5
 800aa90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa94:	4859      	ldr	r0, [pc, #356]	@ (800abfc <_printf_i+0x238>)
 800aa96:	230a      	movs	r3, #10
 800aa98:	e011      	b.n	800aabe <_printf_i+0xfa>
 800aa9a:	6821      	ldr	r1, [r4, #0]
 800aa9c:	6833      	ldr	r3, [r6, #0]
 800aa9e:	0608      	lsls	r0, r1, #24
 800aaa0:	f853 5b04 	ldr.w	r5, [r3], #4
 800aaa4:	d402      	bmi.n	800aaac <_printf_i+0xe8>
 800aaa6:	0649      	lsls	r1, r1, #25
 800aaa8:	bf48      	it	mi
 800aaaa:	b2ad      	uxthmi	r5, r5
 800aaac:	2f6f      	cmp	r7, #111	@ 0x6f
 800aaae:	4853      	ldr	r0, [pc, #332]	@ (800abfc <_printf_i+0x238>)
 800aab0:	6033      	str	r3, [r6, #0]
 800aab2:	bf14      	ite	ne
 800aab4:	230a      	movne	r3, #10
 800aab6:	2308      	moveq	r3, #8
 800aab8:	2100      	movs	r1, #0
 800aaba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aabe:	6866      	ldr	r6, [r4, #4]
 800aac0:	60a6      	str	r6, [r4, #8]
 800aac2:	2e00      	cmp	r6, #0
 800aac4:	bfa2      	ittt	ge
 800aac6:	6821      	ldrge	r1, [r4, #0]
 800aac8:	f021 0104 	bicge.w	r1, r1, #4
 800aacc:	6021      	strge	r1, [r4, #0]
 800aace:	b90d      	cbnz	r5, 800aad4 <_printf_i+0x110>
 800aad0:	2e00      	cmp	r6, #0
 800aad2:	d04b      	beq.n	800ab6c <_printf_i+0x1a8>
 800aad4:	4616      	mov	r6, r2
 800aad6:	fbb5 f1f3 	udiv	r1, r5, r3
 800aada:	fb03 5711 	mls	r7, r3, r1, r5
 800aade:	5dc7      	ldrb	r7, [r0, r7]
 800aae0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aae4:	462f      	mov	r7, r5
 800aae6:	42bb      	cmp	r3, r7
 800aae8:	460d      	mov	r5, r1
 800aaea:	d9f4      	bls.n	800aad6 <_printf_i+0x112>
 800aaec:	2b08      	cmp	r3, #8
 800aaee:	d10b      	bne.n	800ab08 <_printf_i+0x144>
 800aaf0:	6823      	ldr	r3, [r4, #0]
 800aaf2:	07df      	lsls	r7, r3, #31
 800aaf4:	d508      	bpl.n	800ab08 <_printf_i+0x144>
 800aaf6:	6923      	ldr	r3, [r4, #16]
 800aaf8:	6861      	ldr	r1, [r4, #4]
 800aafa:	4299      	cmp	r1, r3
 800aafc:	bfde      	ittt	le
 800aafe:	2330      	movle	r3, #48	@ 0x30
 800ab00:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab04:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab08:	1b92      	subs	r2, r2, r6
 800ab0a:	6122      	str	r2, [r4, #16]
 800ab0c:	f8cd a000 	str.w	sl, [sp]
 800ab10:	464b      	mov	r3, r9
 800ab12:	aa03      	add	r2, sp, #12
 800ab14:	4621      	mov	r1, r4
 800ab16:	4640      	mov	r0, r8
 800ab18:	f7ff fee6 	bl	800a8e8 <_printf_common>
 800ab1c:	3001      	adds	r0, #1
 800ab1e:	d14a      	bne.n	800abb6 <_printf_i+0x1f2>
 800ab20:	f04f 30ff 	mov.w	r0, #4294967295
 800ab24:	b004      	add	sp, #16
 800ab26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab2a:	6823      	ldr	r3, [r4, #0]
 800ab2c:	f043 0320 	orr.w	r3, r3, #32
 800ab30:	6023      	str	r3, [r4, #0]
 800ab32:	4833      	ldr	r0, [pc, #204]	@ (800ac00 <_printf_i+0x23c>)
 800ab34:	2778      	movs	r7, #120	@ 0x78
 800ab36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	6831      	ldr	r1, [r6, #0]
 800ab3e:	061f      	lsls	r7, r3, #24
 800ab40:	f851 5b04 	ldr.w	r5, [r1], #4
 800ab44:	d402      	bmi.n	800ab4c <_printf_i+0x188>
 800ab46:	065f      	lsls	r7, r3, #25
 800ab48:	bf48      	it	mi
 800ab4a:	b2ad      	uxthmi	r5, r5
 800ab4c:	6031      	str	r1, [r6, #0]
 800ab4e:	07d9      	lsls	r1, r3, #31
 800ab50:	bf44      	itt	mi
 800ab52:	f043 0320 	orrmi.w	r3, r3, #32
 800ab56:	6023      	strmi	r3, [r4, #0]
 800ab58:	b11d      	cbz	r5, 800ab62 <_printf_i+0x19e>
 800ab5a:	2310      	movs	r3, #16
 800ab5c:	e7ac      	b.n	800aab8 <_printf_i+0xf4>
 800ab5e:	4827      	ldr	r0, [pc, #156]	@ (800abfc <_printf_i+0x238>)
 800ab60:	e7e9      	b.n	800ab36 <_printf_i+0x172>
 800ab62:	6823      	ldr	r3, [r4, #0]
 800ab64:	f023 0320 	bic.w	r3, r3, #32
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	e7f6      	b.n	800ab5a <_printf_i+0x196>
 800ab6c:	4616      	mov	r6, r2
 800ab6e:	e7bd      	b.n	800aaec <_printf_i+0x128>
 800ab70:	6833      	ldr	r3, [r6, #0]
 800ab72:	6825      	ldr	r5, [r4, #0]
 800ab74:	6961      	ldr	r1, [r4, #20]
 800ab76:	1d18      	adds	r0, r3, #4
 800ab78:	6030      	str	r0, [r6, #0]
 800ab7a:	062e      	lsls	r6, r5, #24
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	d501      	bpl.n	800ab84 <_printf_i+0x1c0>
 800ab80:	6019      	str	r1, [r3, #0]
 800ab82:	e002      	b.n	800ab8a <_printf_i+0x1c6>
 800ab84:	0668      	lsls	r0, r5, #25
 800ab86:	d5fb      	bpl.n	800ab80 <_printf_i+0x1bc>
 800ab88:	8019      	strh	r1, [r3, #0]
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	6123      	str	r3, [r4, #16]
 800ab8e:	4616      	mov	r6, r2
 800ab90:	e7bc      	b.n	800ab0c <_printf_i+0x148>
 800ab92:	6833      	ldr	r3, [r6, #0]
 800ab94:	1d1a      	adds	r2, r3, #4
 800ab96:	6032      	str	r2, [r6, #0]
 800ab98:	681e      	ldr	r6, [r3, #0]
 800ab9a:	6862      	ldr	r2, [r4, #4]
 800ab9c:	2100      	movs	r1, #0
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f7f5 fb3e 	bl	8000220 <memchr>
 800aba4:	b108      	cbz	r0, 800abaa <_printf_i+0x1e6>
 800aba6:	1b80      	subs	r0, r0, r6
 800aba8:	6060      	str	r0, [r4, #4]
 800abaa:	6863      	ldr	r3, [r4, #4]
 800abac:	6123      	str	r3, [r4, #16]
 800abae:	2300      	movs	r3, #0
 800abb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abb4:	e7aa      	b.n	800ab0c <_printf_i+0x148>
 800abb6:	6923      	ldr	r3, [r4, #16]
 800abb8:	4632      	mov	r2, r6
 800abba:	4649      	mov	r1, r9
 800abbc:	4640      	mov	r0, r8
 800abbe:	47d0      	blx	sl
 800abc0:	3001      	adds	r0, #1
 800abc2:	d0ad      	beq.n	800ab20 <_printf_i+0x15c>
 800abc4:	6823      	ldr	r3, [r4, #0]
 800abc6:	079b      	lsls	r3, r3, #30
 800abc8:	d413      	bmi.n	800abf2 <_printf_i+0x22e>
 800abca:	68e0      	ldr	r0, [r4, #12]
 800abcc:	9b03      	ldr	r3, [sp, #12]
 800abce:	4298      	cmp	r0, r3
 800abd0:	bfb8      	it	lt
 800abd2:	4618      	movlt	r0, r3
 800abd4:	e7a6      	b.n	800ab24 <_printf_i+0x160>
 800abd6:	2301      	movs	r3, #1
 800abd8:	4632      	mov	r2, r6
 800abda:	4649      	mov	r1, r9
 800abdc:	4640      	mov	r0, r8
 800abde:	47d0      	blx	sl
 800abe0:	3001      	adds	r0, #1
 800abe2:	d09d      	beq.n	800ab20 <_printf_i+0x15c>
 800abe4:	3501      	adds	r5, #1
 800abe6:	68e3      	ldr	r3, [r4, #12]
 800abe8:	9903      	ldr	r1, [sp, #12]
 800abea:	1a5b      	subs	r3, r3, r1
 800abec:	42ab      	cmp	r3, r5
 800abee:	dcf2      	bgt.n	800abd6 <_printf_i+0x212>
 800abf0:	e7eb      	b.n	800abca <_printf_i+0x206>
 800abf2:	2500      	movs	r5, #0
 800abf4:	f104 0619 	add.w	r6, r4, #25
 800abf8:	e7f5      	b.n	800abe6 <_printf_i+0x222>
 800abfa:	bf00      	nop
 800abfc:	0800e276 	.word	0x0800e276
 800ac00:	0800e287 	.word	0x0800e287

0800ac04 <std>:
 800ac04:	2300      	movs	r3, #0
 800ac06:	b510      	push	{r4, lr}
 800ac08:	4604      	mov	r4, r0
 800ac0a:	e9c0 3300 	strd	r3, r3, [r0]
 800ac0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac12:	6083      	str	r3, [r0, #8]
 800ac14:	8181      	strh	r1, [r0, #12]
 800ac16:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac18:	81c2      	strh	r2, [r0, #14]
 800ac1a:	6183      	str	r3, [r0, #24]
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	2208      	movs	r2, #8
 800ac20:	305c      	adds	r0, #92	@ 0x5c
 800ac22:	f000 f914 	bl	800ae4e <memset>
 800ac26:	4b0d      	ldr	r3, [pc, #52]	@ (800ac5c <std+0x58>)
 800ac28:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ac60 <std+0x5c>)
 800ac2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac64 <std+0x60>)
 800ac30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac32:	4b0d      	ldr	r3, [pc, #52]	@ (800ac68 <std+0x64>)
 800ac34:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac36:	4b0d      	ldr	r3, [pc, #52]	@ (800ac6c <std+0x68>)
 800ac38:	6224      	str	r4, [r4, #32]
 800ac3a:	429c      	cmp	r4, r3
 800ac3c:	d006      	beq.n	800ac4c <std+0x48>
 800ac3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac42:	4294      	cmp	r4, r2
 800ac44:	d002      	beq.n	800ac4c <std+0x48>
 800ac46:	33d0      	adds	r3, #208	@ 0xd0
 800ac48:	429c      	cmp	r4, r3
 800ac4a:	d105      	bne.n	800ac58 <std+0x54>
 800ac4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ac50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac54:	f000 b988 	b.w	800af68 <__retarget_lock_init_recursive>
 800ac58:	bd10      	pop	{r4, pc}
 800ac5a:	bf00      	nop
 800ac5c:	0800adc9 	.word	0x0800adc9
 800ac60:	0800adeb 	.word	0x0800adeb
 800ac64:	0800ae23 	.word	0x0800ae23
 800ac68:	0800ae47 	.word	0x0800ae47
 800ac6c:	200006e8 	.word	0x200006e8

0800ac70 <stdio_exit_handler>:
 800ac70:	4a02      	ldr	r2, [pc, #8]	@ (800ac7c <stdio_exit_handler+0xc>)
 800ac72:	4903      	ldr	r1, [pc, #12]	@ (800ac80 <stdio_exit_handler+0x10>)
 800ac74:	4803      	ldr	r0, [pc, #12]	@ (800ac84 <stdio_exit_handler+0x14>)
 800ac76:	f000 b869 	b.w	800ad4c <_fwalk_sglue>
 800ac7a:	bf00      	nop
 800ac7c:	2000001c 	.word	0x2000001c
 800ac80:	0800c759 	.word	0x0800c759
 800ac84:	2000002c 	.word	0x2000002c

0800ac88 <cleanup_stdio>:
 800ac88:	6841      	ldr	r1, [r0, #4]
 800ac8a:	4b0c      	ldr	r3, [pc, #48]	@ (800acbc <cleanup_stdio+0x34>)
 800ac8c:	4299      	cmp	r1, r3
 800ac8e:	b510      	push	{r4, lr}
 800ac90:	4604      	mov	r4, r0
 800ac92:	d001      	beq.n	800ac98 <cleanup_stdio+0x10>
 800ac94:	f001 fd60 	bl	800c758 <_fflush_r>
 800ac98:	68a1      	ldr	r1, [r4, #8]
 800ac9a:	4b09      	ldr	r3, [pc, #36]	@ (800acc0 <cleanup_stdio+0x38>)
 800ac9c:	4299      	cmp	r1, r3
 800ac9e:	d002      	beq.n	800aca6 <cleanup_stdio+0x1e>
 800aca0:	4620      	mov	r0, r4
 800aca2:	f001 fd59 	bl	800c758 <_fflush_r>
 800aca6:	68e1      	ldr	r1, [r4, #12]
 800aca8:	4b06      	ldr	r3, [pc, #24]	@ (800acc4 <cleanup_stdio+0x3c>)
 800acaa:	4299      	cmp	r1, r3
 800acac:	d004      	beq.n	800acb8 <cleanup_stdio+0x30>
 800acae:	4620      	mov	r0, r4
 800acb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acb4:	f001 bd50 	b.w	800c758 <_fflush_r>
 800acb8:	bd10      	pop	{r4, pc}
 800acba:	bf00      	nop
 800acbc:	200006e8 	.word	0x200006e8
 800acc0:	20000750 	.word	0x20000750
 800acc4:	200007b8 	.word	0x200007b8

0800acc8 <global_stdio_init.part.0>:
 800acc8:	b510      	push	{r4, lr}
 800acca:	4b0b      	ldr	r3, [pc, #44]	@ (800acf8 <global_stdio_init.part.0+0x30>)
 800accc:	4c0b      	ldr	r4, [pc, #44]	@ (800acfc <global_stdio_init.part.0+0x34>)
 800acce:	4a0c      	ldr	r2, [pc, #48]	@ (800ad00 <global_stdio_init.part.0+0x38>)
 800acd0:	601a      	str	r2, [r3, #0]
 800acd2:	4620      	mov	r0, r4
 800acd4:	2200      	movs	r2, #0
 800acd6:	2104      	movs	r1, #4
 800acd8:	f7ff ff94 	bl	800ac04 <std>
 800acdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ace0:	2201      	movs	r2, #1
 800ace2:	2109      	movs	r1, #9
 800ace4:	f7ff ff8e 	bl	800ac04 <std>
 800ace8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800acec:	2202      	movs	r2, #2
 800acee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acf2:	2112      	movs	r1, #18
 800acf4:	f7ff bf86 	b.w	800ac04 <std>
 800acf8:	20000820 	.word	0x20000820
 800acfc:	200006e8 	.word	0x200006e8
 800ad00:	0800ac71 	.word	0x0800ac71

0800ad04 <__sfp_lock_acquire>:
 800ad04:	4801      	ldr	r0, [pc, #4]	@ (800ad0c <__sfp_lock_acquire+0x8>)
 800ad06:	f000 b930 	b.w	800af6a <__retarget_lock_acquire_recursive>
 800ad0a:	bf00      	nop
 800ad0c:	20000829 	.word	0x20000829

0800ad10 <__sfp_lock_release>:
 800ad10:	4801      	ldr	r0, [pc, #4]	@ (800ad18 <__sfp_lock_release+0x8>)
 800ad12:	f000 b92b 	b.w	800af6c <__retarget_lock_release_recursive>
 800ad16:	bf00      	nop
 800ad18:	20000829 	.word	0x20000829

0800ad1c <__sinit>:
 800ad1c:	b510      	push	{r4, lr}
 800ad1e:	4604      	mov	r4, r0
 800ad20:	f7ff fff0 	bl	800ad04 <__sfp_lock_acquire>
 800ad24:	6a23      	ldr	r3, [r4, #32]
 800ad26:	b11b      	cbz	r3, 800ad30 <__sinit+0x14>
 800ad28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad2c:	f7ff bff0 	b.w	800ad10 <__sfp_lock_release>
 800ad30:	4b04      	ldr	r3, [pc, #16]	@ (800ad44 <__sinit+0x28>)
 800ad32:	6223      	str	r3, [r4, #32]
 800ad34:	4b04      	ldr	r3, [pc, #16]	@ (800ad48 <__sinit+0x2c>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1f5      	bne.n	800ad28 <__sinit+0xc>
 800ad3c:	f7ff ffc4 	bl	800acc8 <global_stdio_init.part.0>
 800ad40:	e7f2      	b.n	800ad28 <__sinit+0xc>
 800ad42:	bf00      	nop
 800ad44:	0800ac89 	.word	0x0800ac89
 800ad48:	20000820 	.word	0x20000820

0800ad4c <_fwalk_sglue>:
 800ad4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad50:	4607      	mov	r7, r0
 800ad52:	4688      	mov	r8, r1
 800ad54:	4614      	mov	r4, r2
 800ad56:	2600      	movs	r6, #0
 800ad58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad5c:	f1b9 0901 	subs.w	r9, r9, #1
 800ad60:	d505      	bpl.n	800ad6e <_fwalk_sglue+0x22>
 800ad62:	6824      	ldr	r4, [r4, #0]
 800ad64:	2c00      	cmp	r4, #0
 800ad66:	d1f7      	bne.n	800ad58 <_fwalk_sglue+0xc>
 800ad68:	4630      	mov	r0, r6
 800ad6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad6e:	89ab      	ldrh	r3, [r5, #12]
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d907      	bls.n	800ad84 <_fwalk_sglue+0x38>
 800ad74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	d003      	beq.n	800ad84 <_fwalk_sglue+0x38>
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	4638      	mov	r0, r7
 800ad80:	47c0      	blx	r8
 800ad82:	4306      	orrs	r6, r0
 800ad84:	3568      	adds	r5, #104	@ 0x68
 800ad86:	e7e9      	b.n	800ad5c <_fwalk_sglue+0x10>

0800ad88 <siprintf>:
 800ad88:	b40e      	push	{r1, r2, r3}
 800ad8a:	b500      	push	{lr}
 800ad8c:	b09c      	sub	sp, #112	@ 0x70
 800ad8e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ad90:	9002      	str	r0, [sp, #8]
 800ad92:	9006      	str	r0, [sp, #24]
 800ad94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad98:	4809      	ldr	r0, [pc, #36]	@ (800adc0 <siprintf+0x38>)
 800ad9a:	9107      	str	r1, [sp, #28]
 800ad9c:	9104      	str	r1, [sp, #16]
 800ad9e:	4909      	ldr	r1, [pc, #36]	@ (800adc4 <siprintf+0x3c>)
 800ada0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ada4:	9105      	str	r1, [sp, #20]
 800ada6:	6800      	ldr	r0, [r0, #0]
 800ada8:	9301      	str	r3, [sp, #4]
 800adaa:	a902      	add	r1, sp, #8
 800adac:	f001 fb54 	bl	800c458 <_svfiprintf_r>
 800adb0:	9b02      	ldr	r3, [sp, #8]
 800adb2:	2200      	movs	r2, #0
 800adb4:	701a      	strb	r2, [r3, #0]
 800adb6:	b01c      	add	sp, #112	@ 0x70
 800adb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800adbc:	b003      	add	sp, #12
 800adbe:	4770      	bx	lr
 800adc0:	20000028 	.word	0x20000028
 800adc4:	ffff0208 	.word	0xffff0208

0800adc8 <__sread>:
 800adc8:	b510      	push	{r4, lr}
 800adca:	460c      	mov	r4, r1
 800adcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800add0:	f000 f86c 	bl	800aeac <_read_r>
 800add4:	2800      	cmp	r0, #0
 800add6:	bfab      	itete	ge
 800add8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800adda:	89a3      	ldrhlt	r3, [r4, #12]
 800addc:	181b      	addge	r3, r3, r0
 800adde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ade2:	bfac      	ite	ge
 800ade4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ade6:	81a3      	strhlt	r3, [r4, #12]
 800ade8:	bd10      	pop	{r4, pc}

0800adea <__swrite>:
 800adea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adee:	461f      	mov	r7, r3
 800adf0:	898b      	ldrh	r3, [r1, #12]
 800adf2:	05db      	lsls	r3, r3, #23
 800adf4:	4605      	mov	r5, r0
 800adf6:	460c      	mov	r4, r1
 800adf8:	4616      	mov	r6, r2
 800adfa:	d505      	bpl.n	800ae08 <__swrite+0x1e>
 800adfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae00:	2302      	movs	r3, #2
 800ae02:	2200      	movs	r2, #0
 800ae04:	f000 f840 	bl	800ae88 <_lseek_r>
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae12:	81a3      	strh	r3, [r4, #12]
 800ae14:	4632      	mov	r2, r6
 800ae16:	463b      	mov	r3, r7
 800ae18:	4628      	mov	r0, r5
 800ae1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae1e:	f000 b867 	b.w	800aef0 <_write_r>

0800ae22 <__sseek>:
 800ae22:	b510      	push	{r4, lr}
 800ae24:	460c      	mov	r4, r1
 800ae26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae2a:	f000 f82d 	bl	800ae88 <_lseek_r>
 800ae2e:	1c43      	adds	r3, r0, #1
 800ae30:	89a3      	ldrh	r3, [r4, #12]
 800ae32:	bf15      	itete	ne
 800ae34:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ae36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ae3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ae3e:	81a3      	strheq	r3, [r4, #12]
 800ae40:	bf18      	it	ne
 800ae42:	81a3      	strhne	r3, [r4, #12]
 800ae44:	bd10      	pop	{r4, pc}

0800ae46 <__sclose>:
 800ae46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae4a:	f000 b80d 	b.w	800ae68 <_close_r>

0800ae4e <memset>:
 800ae4e:	4402      	add	r2, r0
 800ae50:	4603      	mov	r3, r0
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d100      	bne.n	800ae58 <memset+0xa>
 800ae56:	4770      	bx	lr
 800ae58:	f803 1b01 	strb.w	r1, [r3], #1
 800ae5c:	e7f9      	b.n	800ae52 <memset+0x4>
	...

0800ae60 <_localeconv_r>:
 800ae60:	4800      	ldr	r0, [pc, #0]	@ (800ae64 <_localeconv_r+0x4>)
 800ae62:	4770      	bx	lr
 800ae64:	20000168 	.word	0x20000168

0800ae68 <_close_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	4d06      	ldr	r5, [pc, #24]	@ (800ae84 <_close_r+0x1c>)
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4604      	mov	r4, r0
 800ae70:	4608      	mov	r0, r1
 800ae72:	602b      	str	r3, [r5, #0]
 800ae74:	f7f7 fec2 	bl	8002bfc <_close>
 800ae78:	1c43      	adds	r3, r0, #1
 800ae7a:	d102      	bne.n	800ae82 <_close_r+0x1a>
 800ae7c:	682b      	ldr	r3, [r5, #0]
 800ae7e:	b103      	cbz	r3, 800ae82 <_close_r+0x1a>
 800ae80:	6023      	str	r3, [r4, #0]
 800ae82:	bd38      	pop	{r3, r4, r5, pc}
 800ae84:	20000824 	.word	0x20000824

0800ae88 <_lseek_r>:
 800ae88:	b538      	push	{r3, r4, r5, lr}
 800ae8a:	4d07      	ldr	r5, [pc, #28]	@ (800aea8 <_lseek_r+0x20>)
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	4608      	mov	r0, r1
 800ae90:	4611      	mov	r1, r2
 800ae92:	2200      	movs	r2, #0
 800ae94:	602a      	str	r2, [r5, #0]
 800ae96:	461a      	mov	r2, r3
 800ae98:	f7f7 fed7 	bl	8002c4a <_lseek>
 800ae9c:	1c43      	adds	r3, r0, #1
 800ae9e:	d102      	bne.n	800aea6 <_lseek_r+0x1e>
 800aea0:	682b      	ldr	r3, [r5, #0]
 800aea2:	b103      	cbz	r3, 800aea6 <_lseek_r+0x1e>
 800aea4:	6023      	str	r3, [r4, #0]
 800aea6:	bd38      	pop	{r3, r4, r5, pc}
 800aea8:	20000824 	.word	0x20000824

0800aeac <_read_r>:
 800aeac:	b538      	push	{r3, r4, r5, lr}
 800aeae:	4d07      	ldr	r5, [pc, #28]	@ (800aecc <_read_r+0x20>)
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	4608      	mov	r0, r1
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	602a      	str	r2, [r5, #0]
 800aeba:	461a      	mov	r2, r3
 800aebc:	f7f7 fe65 	bl	8002b8a <_read>
 800aec0:	1c43      	adds	r3, r0, #1
 800aec2:	d102      	bne.n	800aeca <_read_r+0x1e>
 800aec4:	682b      	ldr	r3, [r5, #0]
 800aec6:	b103      	cbz	r3, 800aeca <_read_r+0x1e>
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	bd38      	pop	{r3, r4, r5, pc}
 800aecc:	20000824 	.word	0x20000824

0800aed0 <_sbrk_r>:
 800aed0:	b538      	push	{r3, r4, r5, lr}
 800aed2:	4d06      	ldr	r5, [pc, #24]	@ (800aeec <_sbrk_r+0x1c>)
 800aed4:	2300      	movs	r3, #0
 800aed6:	4604      	mov	r4, r0
 800aed8:	4608      	mov	r0, r1
 800aeda:	602b      	str	r3, [r5, #0]
 800aedc:	f7f7 fec2 	bl	8002c64 <_sbrk>
 800aee0:	1c43      	adds	r3, r0, #1
 800aee2:	d102      	bne.n	800aeea <_sbrk_r+0x1a>
 800aee4:	682b      	ldr	r3, [r5, #0]
 800aee6:	b103      	cbz	r3, 800aeea <_sbrk_r+0x1a>
 800aee8:	6023      	str	r3, [r4, #0]
 800aeea:	bd38      	pop	{r3, r4, r5, pc}
 800aeec:	20000824 	.word	0x20000824

0800aef0 <_write_r>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	4d07      	ldr	r5, [pc, #28]	@ (800af10 <_write_r+0x20>)
 800aef4:	4604      	mov	r4, r0
 800aef6:	4608      	mov	r0, r1
 800aef8:	4611      	mov	r1, r2
 800aefa:	2200      	movs	r2, #0
 800aefc:	602a      	str	r2, [r5, #0]
 800aefe:	461a      	mov	r2, r3
 800af00:	f7f7 fe60 	bl	8002bc4 <_write>
 800af04:	1c43      	adds	r3, r0, #1
 800af06:	d102      	bne.n	800af0e <_write_r+0x1e>
 800af08:	682b      	ldr	r3, [r5, #0]
 800af0a:	b103      	cbz	r3, 800af0e <_write_r+0x1e>
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	bd38      	pop	{r3, r4, r5, pc}
 800af10:	20000824 	.word	0x20000824

0800af14 <__errno>:
 800af14:	4b01      	ldr	r3, [pc, #4]	@ (800af1c <__errno+0x8>)
 800af16:	6818      	ldr	r0, [r3, #0]
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	20000028 	.word	0x20000028

0800af20 <__libc_init_array>:
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	4d0d      	ldr	r5, [pc, #52]	@ (800af58 <__libc_init_array+0x38>)
 800af24:	4c0d      	ldr	r4, [pc, #52]	@ (800af5c <__libc_init_array+0x3c>)
 800af26:	1b64      	subs	r4, r4, r5
 800af28:	10a4      	asrs	r4, r4, #2
 800af2a:	2600      	movs	r6, #0
 800af2c:	42a6      	cmp	r6, r4
 800af2e:	d109      	bne.n	800af44 <__libc_init_array+0x24>
 800af30:	4d0b      	ldr	r5, [pc, #44]	@ (800af60 <__libc_init_array+0x40>)
 800af32:	4c0c      	ldr	r4, [pc, #48]	@ (800af64 <__libc_init_array+0x44>)
 800af34:	f002 fcd8 	bl	800d8e8 <_init>
 800af38:	1b64      	subs	r4, r4, r5
 800af3a:	10a4      	asrs	r4, r4, #2
 800af3c:	2600      	movs	r6, #0
 800af3e:	42a6      	cmp	r6, r4
 800af40:	d105      	bne.n	800af4e <__libc_init_array+0x2e>
 800af42:	bd70      	pop	{r4, r5, r6, pc}
 800af44:	f855 3b04 	ldr.w	r3, [r5], #4
 800af48:	4798      	blx	r3
 800af4a:	3601      	adds	r6, #1
 800af4c:	e7ee      	b.n	800af2c <__libc_init_array+0xc>
 800af4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800af52:	4798      	blx	r3
 800af54:	3601      	adds	r6, #1
 800af56:	e7f2      	b.n	800af3e <__libc_init_array+0x1e>
 800af58:	0800e9b0 	.word	0x0800e9b0
 800af5c:	0800e9b0 	.word	0x0800e9b0
 800af60:	0800e9b0 	.word	0x0800e9b0
 800af64:	0800e9b4 	.word	0x0800e9b4

0800af68 <__retarget_lock_init_recursive>:
 800af68:	4770      	bx	lr

0800af6a <__retarget_lock_acquire_recursive>:
 800af6a:	4770      	bx	lr

0800af6c <__retarget_lock_release_recursive>:
 800af6c:	4770      	bx	lr

0800af6e <quorem>:
 800af6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af72:	6903      	ldr	r3, [r0, #16]
 800af74:	690c      	ldr	r4, [r1, #16]
 800af76:	42a3      	cmp	r3, r4
 800af78:	4607      	mov	r7, r0
 800af7a:	db7e      	blt.n	800b07a <quorem+0x10c>
 800af7c:	3c01      	subs	r4, #1
 800af7e:	f101 0814 	add.w	r8, r1, #20
 800af82:	00a3      	lsls	r3, r4, #2
 800af84:	f100 0514 	add.w	r5, r0, #20
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af8e:	9301      	str	r3, [sp, #4]
 800af90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af98:	3301      	adds	r3, #1
 800af9a:	429a      	cmp	r2, r3
 800af9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800afa0:	fbb2 f6f3 	udiv	r6, r2, r3
 800afa4:	d32e      	bcc.n	800b004 <quorem+0x96>
 800afa6:	f04f 0a00 	mov.w	sl, #0
 800afaa:	46c4      	mov	ip, r8
 800afac:	46ae      	mov	lr, r5
 800afae:	46d3      	mov	fp, sl
 800afb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800afb4:	b298      	uxth	r0, r3
 800afb6:	fb06 a000 	mla	r0, r6, r0, sl
 800afba:	0c02      	lsrs	r2, r0, #16
 800afbc:	0c1b      	lsrs	r3, r3, #16
 800afbe:	fb06 2303 	mla	r3, r6, r3, r2
 800afc2:	f8de 2000 	ldr.w	r2, [lr]
 800afc6:	b280      	uxth	r0, r0
 800afc8:	b292      	uxth	r2, r2
 800afca:	1a12      	subs	r2, r2, r0
 800afcc:	445a      	add	r2, fp
 800afce:	f8de 0000 	ldr.w	r0, [lr]
 800afd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800afdc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800afe0:	b292      	uxth	r2, r2
 800afe2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800afe6:	45e1      	cmp	r9, ip
 800afe8:	f84e 2b04 	str.w	r2, [lr], #4
 800afec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aff0:	d2de      	bcs.n	800afb0 <quorem+0x42>
 800aff2:	9b00      	ldr	r3, [sp, #0]
 800aff4:	58eb      	ldr	r3, [r5, r3]
 800aff6:	b92b      	cbnz	r3, 800b004 <quorem+0x96>
 800aff8:	9b01      	ldr	r3, [sp, #4]
 800affa:	3b04      	subs	r3, #4
 800affc:	429d      	cmp	r5, r3
 800affe:	461a      	mov	r2, r3
 800b000:	d32f      	bcc.n	800b062 <quorem+0xf4>
 800b002:	613c      	str	r4, [r7, #16]
 800b004:	4638      	mov	r0, r7
 800b006:	f001 f8c3 	bl	800c190 <__mcmp>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	db25      	blt.n	800b05a <quorem+0xec>
 800b00e:	4629      	mov	r1, r5
 800b010:	2000      	movs	r0, #0
 800b012:	f858 2b04 	ldr.w	r2, [r8], #4
 800b016:	f8d1 c000 	ldr.w	ip, [r1]
 800b01a:	fa1f fe82 	uxth.w	lr, r2
 800b01e:	fa1f f38c 	uxth.w	r3, ip
 800b022:	eba3 030e 	sub.w	r3, r3, lr
 800b026:	4403      	add	r3, r0
 800b028:	0c12      	lsrs	r2, r2, #16
 800b02a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b02e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b032:	b29b      	uxth	r3, r3
 800b034:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b038:	45c1      	cmp	r9, r8
 800b03a:	f841 3b04 	str.w	r3, [r1], #4
 800b03e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b042:	d2e6      	bcs.n	800b012 <quorem+0xa4>
 800b044:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b048:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b04c:	b922      	cbnz	r2, 800b058 <quorem+0xea>
 800b04e:	3b04      	subs	r3, #4
 800b050:	429d      	cmp	r5, r3
 800b052:	461a      	mov	r2, r3
 800b054:	d30b      	bcc.n	800b06e <quorem+0x100>
 800b056:	613c      	str	r4, [r7, #16]
 800b058:	3601      	adds	r6, #1
 800b05a:	4630      	mov	r0, r6
 800b05c:	b003      	add	sp, #12
 800b05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b062:	6812      	ldr	r2, [r2, #0]
 800b064:	3b04      	subs	r3, #4
 800b066:	2a00      	cmp	r2, #0
 800b068:	d1cb      	bne.n	800b002 <quorem+0x94>
 800b06a:	3c01      	subs	r4, #1
 800b06c:	e7c6      	b.n	800affc <quorem+0x8e>
 800b06e:	6812      	ldr	r2, [r2, #0]
 800b070:	3b04      	subs	r3, #4
 800b072:	2a00      	cmp	r2, #0
 800b074:	d1ef      	bne.n	800b056 <quorem+0xe8>
 800b076:	3c01      	subs	r4, #1
 800b078:	e7ea      	b.n	800b050 <quorem+0xe2>
 800b07a:	2000      	movs	r0, #0
 800b07c:	e7ee      	b.n	800b05c <quorem+0xee>
	...

0800b080 <_dtoa_r>:
 800b080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b084:	69c7      	ldr	r7, [r0, #28]
 800b086:	b099      	sub	sp, #100	@ 0x64
 800b088:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b08c:	ec55 4b10 	vmov	r4, r5, d0
 800b090:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b092:	9109      	str	r1, [sp, #36]	@ 0x24
 800b094:	4683      	mov	fp, r0
 800b096:	920e      	str	r2, [sp, #56]	@ 0x38
 800b098:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b09a:	b97f      	cbnz	r7, 800b0bc <_dtoa_r+0x3c>
 800b09c:	2010      	movs	r0, #16
 800b09e:	f7ff f89b 	bl	800a1d8 <malloc>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	f8cb 001c 	str.w	r0, [fp, #28]
 800b0a8:	b920      	cbnz	r0, 800b0b4 <_dtoa_r+0x34>
 800b0aa:	4ba7      	ldr	r3, [pc, #668]	@ (800b348 <_dtoa_r+0x2c8>)
 800b0ac:	21ef      	movs	r1, #239	@ 0xef
 800b0ae:	48a7      	ldr	r0, [pc, #668]	@ (800b34c <_dtoa_r+0x2cc>)
 800b0b0:	f001 fba2 	bl	800c7f8 <__assert_func>
 800b0b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b0b8:	6007      	str	r7, [r0, #0]
 800b0ba:	60c7      	str	r7, [r0, #12]
 800b0bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b0c0:	6819      	ldr	r1, [r3, #0]
 800b0c2:	b159      	cbz	r1, 800b0dc <_dtoa_r+0x5c>
 800b0c4:	685a      	ldr	r2, [r3, #4]
 800b0c6:	604a      	str	r2, [r1, #4]
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	4093      	lsls	r3, r2
 800b0cc:	608b      	str	r3, [r1, #8]
 800b0ce:	4658      	mov	r0, fp
 800b0d0:	f000 fe24 	bl	800bd1c <_Bfree>
 800b0d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	1e2b      	subs	r3, r5, #0
 800b0de:	bfb9      	ittee	lt
 800b0e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b0e4:	9303      	strlt	r3, [sp, #12]
 800b0e6:	2300      	movge	r3, #0
 800b0e8:	6033      	strge	r3, [r6, #0]
 800b0ea:	9f03      	ldr	r7, [sp, #12]
 800b0ec:	4b98      	ldr	r3, [pc, #608]	@ (800b350 <_dtoa_r+0x2d0>)
 800b0ee:	bfbc      	itt	lt
 800b0f0:	2201      	movlt	r2, #1
 800b0f2:	6032      	strlt	r2, [r6, #0]
 800b0f4:	43bb      	bics	r3, r7
 800b0f6:	d112      	bne.n	800b11e <_dtoa_r+0x9e>
 800b0f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b0fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b0fe:	6013      	str	r3, [r2, #0]
 800b100:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b104:	4323      	orrs	r3, r4
 800b106:	f000 854d 	beq.w	800bba4 <_dtoa_r+0xb24>
 800b10a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b10c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b364 <_dtoa_r+0x2e4>
 800b110:	2b00      	cmp	r3, #0
 800b112:	f000 854f 	beq.w	800bbb4 <_dtoa_r+0xb34>
 800b116:	f10a 0303 	add.w	r3, sl, #3
 800b11a:	f000 bd49 	b.w	800bbb0 <_dtoa_r+0xb30>
 800b11e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b122:	2200      	movs	r2, #0
 800b124:	ec51 0b17 	vmov	r0, r1, d7
 800b128:	2300      	movs	r3, #0
 800b12a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b12e:	f7f5 fcf3 	bl	8000b18 <__aeabi_dcmpeq>
 800b132:	4680      	mov	r8, r0
 800b134:	b158      	cbz	r0, 800b14e <_dtoa_r+0xce>
 800b136:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b138:	2301      	movs	r3, #1
 800b13a:	6013      	str	r3, [r2, #0]
 800b13c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b13e:	b113      	cbz	r3, 800b146 <_dtoa_r+0xc6>
 800b140:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b142:	4b84      	ldr	r3, [pc, #528]	@ (800b354 <_dtoa_r+0x2d4>)
 800b144:	6013      	str	r3, [r2, #0]
 800b146:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b368 <_dtoa_r+0x2e8>
 800b14a:	f000 bd33 	b.w	800bbb4 <_dtoa_r+0xb34>
 800b14e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b152:	aa16      	add	r2, sp, #88	@ 0x58
 800b154:	a917      	add	r1, sp, #92	@ 0x5c
 800b156:	4658      	mov	r0, fp
 800b158:	f001 f8ca 	bl	800c2f0 <__d2b>
 800b15c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b160:	4681      	mov	r9, r0
 800b162:	2e00      	cmp	r6, #0
 800b164:	d077      	beq.n	800b256 <_dtoa_r+0x1d6>
 800b166:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b168:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b16c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b170:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b174:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b178:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b17c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b180:	4619      	mov	r1, r3
 800b182:	2200      	movs	r2, #0
 800b184:	4b74      	ldr	r3, [pc, #464]	@ (800b358 <_dtoa_r+0x2d8>)
 800b186:	f7f5 f8a7 	bl	80002d8 <__aeabi_dsub>
 800b18a:	a369      	add	r3, pc, #420	@ (adr r3, 800b330 <_dtoa_r+0x2b0>)
 800b18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b190:	f7f5 fa5a 	bl	8000648 <__aeabi_dmul>
 800b194:	a368      	add	r3, pc, #416	@ (adr r3, 800b338 <_dtoa_r+0x2b8>)
 800b196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19a:	f7f5 f89f 	bl	80002dc <__adddf3>
 800b19e:	4604      	mov	r4, r0
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	460d      	mov	r5, r1
 800b1a4:	f7f5 f9e6 	bl	8000574 <__aeabi_i2d>
 800b1a8:	a365      	add	r3, pc, #404	@ (adr r3, 800b340 <_dtoa_r+0x2c0>)
 800b1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ae:	f7f5 fa4b 	bl	8000648 <__aeabi_dmul>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	4629      	mov	r1, r5
 800b1ba:	f7f5 f88f 	bl	80002dc <__adddf3>
 800b1be:	4604      	mov	r4, r0
 800b1c0:	460d      	mov	r5, r1
 800b1c2:	f7f5 fcf1 	bl	8000ba8 <__aeabi_d2iz>
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	4607      	mov	r7, r0
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	4629      	mov	r1, r5
 800b1d0:	f7f5 fcac 	bl	8000b2c <__aeabi_dcmplt>
 800b1d4:	b140      	cbz	r0, 800b1e8 <_dtoa_r+0x168>
 800b1d6:	4638      	mov	r0, r7
 800b1d8:	f7f5 f9cc 	bl	8000574 <__aeabi_i2d>
 800b1dc:	4622      	mov	r2, r4
 800b1de:	462b      	mov	r3, r5
 800b1e0:	f7f5 fc9a 	bl	8000b18 <__aeabi_dcmpeq>
 800b1e4:	b900      	cbnz	r0, 800b1e8 <_dtoa_r+0x168>
 800b1e6:	3f01      	subs	r7, #1
 800b1e8:	2f16      	cmp	r7, #22
 800b1ea:	d851      	bhi.n	800b290 <_dtoa_r+0x210>
 800b1ec:	4b5b      	ldr	r3, [pc, #364]	@ (800b35c <_dtoa_r+0x2dc>)
 800b1ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1fa:	f7f5 fc97 	bl	8000b2c <__aeabi_dcmplt>
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d048      	beq.n	800b294 <_dtoa_r+0x214>
 800b202:	3f01      	subs	r7, #1
 800b204:	2300      	movs	r3, #0
 800b206:	9312      	str	r3, [sp, #72]	@ 0x48
 800b208:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b20a:	1b9b      	subs	r3, r3, r6
 800b20c:	1e5a      	subs	r2, r3, #1
 800b20e:	bf44      	itt	mi
 800b210:	f1c3 0801 	rsbmi	r8, r3, #1
 800b214:	2300      	movmi	r3, #0
 800b216:	9208      	str	r2, [sp, #32]
 800b218:	bf54      	ite	pl
 800b21a:	f04f 0800 	movpl.w	r8, #0
 800b21e:	9308      	strmi	r3, [sp, #32]
 800b220:	2f00      	cmp	r7, #0
 800b222:	db39      	blt.n	800b298 <_dtoa_r+0x218>
 800b224:	9b08      	ldr	r3, [sp, #32]
 800b226:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b228:	443b      	add	r3, r7
 800b22a:	9308      	str	r3, [sp, #32]
 800b22c:	2300      	movs	r3, #0
 800b22e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b232:	2b09      	cmp	r3, #9
 800b234:	d864      	bhi.n	800b300 <_dtoa_r+0x280>
 800b236:	2b05      	cmp	r3, #5
 800b238:	bfc4      	itt	gt
 800b23a:	3b04      	subgt	r3, #4
 800b23c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b240:	f1a3 0302 	sub.w	r3, r3, #2
 800b244:	bfcc      	ite	gt
 800b246:	2400      	movgt	r4, #0
 800b248:	2401      	movle	r4, #1
 800b24a:	2b03      	cmp	r3, #3
 800b24c:	d863      	bhi.n	800b316 <_dtoa_r+0x296>
 800b24e:	e8df f003 	tbb	[pc, r3]
 800b252:	372a      	.short	0x372a
 800b254:	5535      	.short	0x5535
 800b256:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b25a:	441e      	add	r6, r3
 800b25c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b260:	2b20      	cmp	r3, #32
 800b262:	bfc1      	itttt	gt
 800b264:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b268:	409f      	lslgt	r7, r3
 800b26a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b26e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b272:	bfd6      	itet	le
 800b274:	f1c3 0320 	rsble	r3, r3, #32
 800b278:	ea47 0003 	orrgt.w	r0, r7, r3
 800b27c:	fa04 f003 	lslle.w	r0, r4, r3
 800b280:	f7f5 f968 	bl	8000554 <__aeabi_ui2d>
 800b284:	2201      	movs	r2, #1
 800b286:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b28a:	3e01      	subs	r6, #1
 800b28c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b28e:	e777      	b.n	800b180 <_dtoa_r+0x100>
 800b290:	2301      	movs	r3, #1
 800b292:	e7b8      	b.n	800b206 <_dtoa_r+0x186>
 800b294:	9012      	str	r0, [sp, #72]	@ 0x48
 800b296:	e7b7      	b.n	800b208 <_dtoa_r+0x188>
 800b298:	427b      	negs	r3, r7
 800b29a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b29c:	2300      	movs	r3, #0
 800b29e:	eba8 0807 	sub.w	r8, r8, r7
 800b2a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2a4:	e7c4      	b.n	800b230 <_dtoa_r+0x1b0>
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	dc35      	bgt.n	800b31c <_dtoa_r+0x29c>
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	9307      	str	r3, [sp, #28]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b2ba:	e00b      	b.n	800b2d4 <_dtoa_r+0x254>
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e7f3      	b.n	800b2a8 <_dtoa_r+0x228>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2c6:	18fb      	adds	r3, r7, r3
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	9307      	str	r3, [sp, #28]
 800b2d0:	bfb8      	it	lt
 800b2d2:	2301      	movlt	r3, #1
 800b2d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b2d8:	2100      	movs	r1, #0
 800b2da:	2204      	movs	r2, #4
 800b2dc:	f102 0514 	add.w	r5, r2, #20
 800b2e0:	429d      	cmp	r5, r3
 800b2e2:	d91f      	bls.n	800b324 <_dtoa_r+0x2a4>
 800b2e4:	6041      	str	r1, [r0, #4]
 800b2e6:	4658      	mov	r0, fp
 800b2e8:	f000 fcd8 	bl	800bc9c <_Balloc>
 800b2ec:	4682      	mov	sl, r0
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	d13c      	bne.n	800b36c <_dtoa_r+0x2ec>
 800b2f2:	4b1b      	ldr	r3, [pc, #108]	@ (800b360 <_dtoa_r+0x2e0>)
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b2fa:	e6d8      	b.n	800b0ae <_dtoa_r+0x2e>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e7e0      	b.n	800b2c2 <_dtoa_r+0x242>
 800b300:	2401      	movs	r4, #1
 800b302:	2300      	movs	r3, #0
 800b304:	9309      	str	r3, [sp, #36]	@ 0x24
 800b306:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b308:	f04f 33ff 	mov.w	r3, #4294967295
 800b30c:	9300      	str	r3, [sp, #0]
 800b30e:	9307      	str	r3, [sp, #28]
 800b310:	2200      	movs	r2, #0
 800b312:	2312      	movs	r3, #18
 800b314:	e7d0      	b.n	800b2b8 <_dtoa_r+0x238>
 800b316:	2301      	movs	r3, #1
 800b318:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b31a:	e7f5      	b.n	800b308 <_dtoa_r+0x288>
 800b31c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	9307      	str	r3, [sp, #28]
 800b322:	e7d7      	b.n	800b2d4 <_dtoa_r+0x254>
 800b324:	3101      	adds	r1, #1
 800b326:	0052      	lsls	r2, r2, #1
 800b328:	e7d8      	b.n	800b2dc <_dtoa_r+0x25c>
 800b32a:	bf00      	nop
 800b32c:	f3af 8000 	nop.w
 800b330:	636f4361 	.word	0x636f4361
 800b334:	3fd287a7 	.word	0x3fd287a7
 800b338:	8b60c8b3 	.word	0x8b60c8b3
 800b33c:	3fc68a28 	.word	0x3fc68a28
 800b340:	509f79fb 	.word	0x509f79fb
 800b344:	3fd34413 	.word	0x3fd34413
 800b348:	0800e2a5 	.word	0x0800e2a5
 800b34c:	0800e2bc 	.word	0x0800e2bc
 800b350:	7ff00000 	.word	0x7ff00000
 800b354:	0800e275 	.word	0x0800e275
 800b358:	3ff80000 	.word	0x3ff80000
 800b35c:	0800e3b8 	.word	0x0800e3b8
 800b360:	0800e314 	.word	0x0800e314
 800b364:	0800e2a1 	.word	0x0800e2a1
 800b368:	0800e274 	.word	0x0800e274
 800b36c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b370:	6018      	str	r0, [r3, #0]
 800b372:	9b07      	ldr	r3, [sp, #28]
 800b374:	2b0e      	cmp	r3, #14
 800b376:	f200 80a4 	bhi.w	800b4c2 <_dtoa_r+0x442>
 800b37a:	2c00      	cmp	r4, #0
 800b37c:	f000 80a1 	beq.w	800b4c2 <_dtoa_r+0x442>
 800b380:	2f00      	cmp	r7, #0
 800b382:	dd33      	ble.n	800b3ec <_dtoa_r+0x36c>
 800b384:	4bad      	ldr	r3, [pc, #692]	@ (800b63c <_dtoa_r+0x5bc>)
 800b386:	f007 020f 	and.w	r2, r7, #15
 800b38a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b38e:	ed93 7b00 	vldr	d7, [r3]
 800b392:	05f8      	lsls	r0, r7, #23
 800b394:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b398:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b39c:	d516      	bpl.n	800b3cc <_dtoa_r+0x34c>
 800b39e:	4ba8      	ldr	r3, [pc, #672]	@ (800b640 <_dtoa_r+0x5c0>)
 800b3a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3a8:	f7f5 fa78 	bl	800089c <__aeabi_ddiv>
 800b3ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3b0:	f004 040f 	and.w	r4, r4, #15
 800b3b4:	2603      	movs	r6, #3
 800b3b6:	4da2      	ldr	r5, [pc, #648]	@ (800b640 <_dtoa_r+0x5c0>)
 800b3b8:	b954      	cbnz	r4, 800b3d0 <_dtoa_r+0x350>
 800b3ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3c2:	f7f5 fa6b 	bl	800089c <__aeabi_ddiv>
 800b3c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3ca:	e028      	b.n	800b41e <_dtoa_r+0x39e>
 800b3cc:	2602      	movs	r6, #2
 800b3ce:	e7f2      	b.n	800b3b6 <_dtoa_r+0x336>
 800b3d0:	07e1      	lsls	r1, r4, #31
 800b3d2:	d508      	bpl.n	800b3e6 <_dtoa_r+0x366>
 800b3d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3dc:	f7f5 f934 	bl	8000648 <__aeabi_dmul>
 800b3e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3e4:	3601      	adds	r6, #1
 800b3e6:	1064      	asrs	r4, r4, #1
 800b3e8:	3508      	adds	r5, #8
 800b3ea:	e7e5      	b.n	800b3b8 <_dtoa_r+0x338>
 800b3ec:	f000 80d2 	beq.w	800b594 <_dtoa_r+0x514>
 800b3f0:	427c      	negs	r4, r7
 800b3f2:	4b92      	ldr	r3, [pc, #584]	@ (800b63c <_dtoa_r+0x5bc>)
 800b3f4:	4d92      	ldr	r5, [pc, #584]	@ (800b640 <_dtoa_r+0x5c0>)
 800b3f6:	f004 020f 	and.w	r2, r4, #15
 800b3fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b406:	f7f5 f91f 	bl	8000648 <__aeabi_dmul>
 800b40a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b40e:	1124      	asrs	r4, r4, #4
 800b410:	2300      	movs	r3, #0
 800b412:	2602      	movs	r6, #2
 800b414:	2c00      	cmp	r4, #0
 800b416:	f040 80b2 	bne.w	800b57e <_dtoa_r+0x4fe>
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1d3      	bne.n	800b3c6 <_dtoa_r+0x346>
 800b41e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b420:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b424:	2b00      	cmp	r3, #0
 800b426:	f000 80b7 	beq.w	800b598 <_dtoa_r+0x518>
 800b42a:	4b86      	ldr	r3, [pc, #536]	@ (800b644 <_dtoa_r+0x5c4>)
 800b42c:	2200      	movs	r2, #0
 800b42e:	4620      	mov	r0, r4
 800b430:	4629      	mov	r1, r5
 800b432:	f7f5 fb7b 	bl	8000b2c <__aeabi_dcmplt>
 800b436:	2800      	cmp	r0, #0
 800b438:	f000 80ae 	beq.w	800b598 <_dtoa_r+0x518>
 800b43c:	9b07      	ldr	r3, [sp, #28]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f000 80aa 	beq.w	800b598 <_dtoa_r+0x518>
 800b444:	9b00      	ldr	r3, [sp, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	dd37      	ble.n	800b4ba <_dtoa_r+0x43a>
 800b44a:	1e7b      	subs	r3, r7, #1
 800b44c:	9304      	str	r3, [sp, #16]
 800b44e:	4620      	mov	r0, r4
 800b450:	4b7d      	ldr	r3, [pc, #500]	@ (800b648 <_dtoa_r+0x5c8>)
 800b452:	2200      	movs	r2, #0
 800b454:	4629      	mov	r1, r5
 800b456:	f7f5 f8f7 	bl	8000648 <__aeabi_dmul>
 800b45a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b45e:	9c00      	ldr	r4, [sp, #0]
 800b460:	3601      	adds	r6, #1
 800b462:	4630      	mov	r0, r6
 800b464:	f7f5 f886 	bl	8000574 <__aeabi_i2d>
 800b468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b46c:	f7f5 f8ec 	bl	8000648 <__aeabi_dmul>
 800b470:	4b76      	ldr	r3, [pc, #472]	@ (800b64c <_dtoa_r+0x5cc>)
 800b472:	2200      	movs	r2, #0
 800b474:	f7f4 ff32 	bl	80002dc <__adddf3>
 800b478:	4605      	mov	r5, r0
 800b47a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b47e:	2c00      	cmp	r4, #0
 800b480:	f040 808d 	bne.w	800b59e <_dtoa_r+0x51e>
 800b484:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b488:	4b71      	ldr	r3, [pc, #452]	@ (800b650 <_dtoa_r+0x5d0>)
 800b48a:	2200      	movs	r2, #0
 800b48c:	f7f4 ff24 	bl	80002d8 <__aeabi_dsub>
 800b490:	4602      	mov	r2, r0
 800b492:	460b      	mov	r3, r1
 800b494:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b498:	462a      	mov	r2, r5
 800b49a:	4633      	mov	r3, r6
 800b49c:	f7f5 fb64 	bl	8000b68 <__aeabi_dcmpgt>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	f040 828b 	bne.w	800b9bc <_dtoa_r+0x93c>
 800b4a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4aa:	462a      	mov	r2, r5
 800b4ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b4b0:	f7f5 fb3c 	bl	8000b2c <__aeabi_dcmplt>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	f040 8128 	bne.w	800b70a <_dtoa_r+0x68a>
 800b4ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b4be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b4c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f2c0 815a 	blt.w	800b77e <_dtoa_r+0x6fe>
 800b4ca:	2f0e      	cmp	r7, #14
 800b4cc:	f300 8157 	bgt.w	800b77e <_dtoa_r+0x6fe>
 800b4d0:	4b5a      	ldr	r3, [pc, #360]	@ (800b63c <_dtoa_r+0x5bc>)
 800b4d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b4d6:	ed93 7b00 	vldr	d7, [r3]
 800b4da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	ed8d 7b00 	vstr	d7, [sp]
 800b4e2:	da03      	bge.n	800b4ec <_dtoa_r+0x46c>
 800b4e4:	9b07      	ldr	r3, [sp, #28]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	f340 8101 	ble.w	800b6ee <_dtoa_r+0x66e>
 800b4ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b4f0:	4656      	mov	r6, sl
 800b4f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	4629      	mov	r1, r5
 800b4fa:	f7f5 f9cf 	bl	800089c <__aeabi_ddiv>
 800b4fe:	f7f5 fb53 	bl	8000ba8 <__aeabi_d2iz>
 800b502:	4680      	mov	r8, r0
 800b504:	f7f5 f836 	bl	8000574 <__aeabi_i2d>
 800b508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b50c:	f7f5 f89c 	bl	8000648 <__aeabi_dmul>
 800b510:	4602      	mov	r2, r0
 800b512:	460b      	mov	r3, r1
 800b514:	4620      	mov	r0, r4
 800b516:	4629      	mov	r1, r5
 800b518:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b51c:	f7f4 fedc 	bl	80002d8 <__aeabi_dsub>
 800b520:	f806 4b01 	strb.w	r4, [r6], #1
 800b524:	9d07      	ldr	r5, [sp, #28]
 800b526:	eba6 040a 	sub.w	r4, r6, sl
 800b52a:	42a5      	cmp	r5, r4
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	f040 8117 	bne.w	800b762 <_dtoa_r+0x6e2>
 800b534:	f7f4 fed2 	bl	80002dc <__adddf3>
 800b538:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b53c:	4604      	mov	r4, r0
 800b53e:	460d      	mov	r5, r1
 800b540:	f7f5 fb12 	bl	8000b68 <__aeabi_dcmpgt>
 800b544:	2800      	cmp	r0, #0
 800b546:	f040 80f9 	bne.w	800b73c <_dtoa_r+0x6bc>
 800b54a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b54e:	4620      	mov	r0, r4
 800b550:	4629      	mov	r1, r5
 800b552:	f7f5 fae1 	bl	8000b18 <__aeabi_dcmpeq>
 800b556:	b118      	cbz	r0, 800b560 <_dtoa_r+0x4e0>
 800b558:	f018 0f01 	tst.w	r8, #1
 800b55c:	f040 80ee 	bne.w	800b73c <_dtoa_r+0x6bc>
 800b560:	4649      	mov	r1, r9
 800b562:	4658      	mov	r0, fp
 800b564:	f000 fbda 	bl	800bd1c <_Bfree>
 800b568:	2300      	movs	r3, #0
 800b56a:	7033      	strb	r3, [r6, #0]
 800b56c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b56e:	3701      	adds	r7, #1
 800b570:	601f      	str	r7, [r3, #0]
 800b572:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b574:	2b00      	cmp	r3, #0
 800b576:	f000 831d 	beq.w	800bbb4 <_dtoa_r+0xb34>
 800b57a:	601e      	str	r6, [r3, #0]
 800b57c:	e31a      	b.n	800bbb4 <_dtoa_r+0xb34>
 800b57e:	07e2      	lsls	r2, r4, #31
 800b580:	d505      	bpl.n	800b58e <_dtoa_r+0x50e>
 800b582:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b586:	f7f5 f85f 	bl	8000648 <__aeabi_dmul>
 800b58a:	3601      	adds	r6, #1
 800b58c:	2301      	movs	r3, #1
 800b58e:	1064      	asrs	r4, r4, #1
 800b590:	3508      	adds	r5, #8
 800b592:	e73f      	b.n	800b414 <_dtoa_r+0x394>
 800b594:	2602      	movs	r6, #2
 800b596:	e742      	b.n	800b41e <_dtoa_r+0x39e>
 800b598:	9c07      	ldr	r4, [sp, #28]
 800b59a:	9704      	str	r7, [sp, #16]
 800b59c:	e761      	b.n	800b462 <_dtoa_r+0x3e2>
 800b59e:	4b27      	ldr	r3, [pc, #156]	@ (800b63c <_dtoa_r+0x5bc>)
 800b5a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b5a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b5aa:	4454      	add	r4, sl
 800b5ac:	2900      	cmp	r1, #0
 800b5ae:	d053      	beq.n	800b658 <_dtoa_r+0x5d8>
 800b5b0:	4928      	ldr	r1, [pc, #160]	@ (800b654 <_dtoa_r+0x5d4>)
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	f7f5 f972 	bl	800089c <__aeabi_ddiv>
 800b5b8:	4633      	mov	r3, r6
 800b5ba:	462a      	mov	r2, r5
 800b5bc:	f7f4 fe8c 	bl	80002d8 <__aeabi_dsub>
 800b5c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b5c4:	4656      	mov	r6, sl
 800b5c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5ca:	f7f5 faed 	bl	8000ba8 <__aeabi_d2iz>
 800b5ce:	4605      	mov	r5, r0
 800b5d0:	f7f4 ffd0 	bl	8000574 <__aeabi_i2d>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5dc:	f7f4 fe7c 	bl	80002d8 <__aeabi_dsub>
 800b5e0:	3530      	adds	r5, #48	@ 0x30
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5ea:	f806 5b01 	strb.w	r5, [r6], #1
 800b5ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b5f2:	f7f5 fa9b 	bl	8000b2c <__aeabi_dcmplt>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	d171      	bne.n	800b6de <_dtoa_r+0x65e>
 800b5fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5fe:	4911      	ldr	r1, [pc, #68]	@ (800b644 <_dtoa_r+0x5c4>)
 800b600:	2000      	movs	r0, #0
 800b602:	f7f4 fe69 	bl	80002d8 <__aeabi_dsub>
 800b606:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b60a:	f7f5 fa8f 	bl	8000b2c <__aeabi_dcmplt>
 800b60e:	2800      	cmp	r0, #0
 800b610:	f040 8095 	bne.w	800b73e <_dtoa_r+0x6be>
 800b614:	42a6      	cmp	r6, r4
 800b616:	f43f af50 	beq.w	800b4ba <_dtoa_r+0x43a>
 800b61a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b61e:	4b0a      	ldr	r3, [pc, #40]	@ (800b648 <_dtoa_r+0x5c8>)
 800b620:	2200      	movs	r2, #0
 800b622:	f7f5 f811 	bl	8000648 <__aeabi_dmul>
 800b626:	4b08      	ldr	r3, [pc, #32]	@ (800b648 <_dtoa_r+0x5c8>)
 800b628:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b62c:	2200      	movs	r2, #0
 800b62e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b632:	f7f5 f809 	bl	8000648 <__aeabi_dmul>
 800b636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b63a:	e7c4      	b.n	800b5c6 <_dtoa_r+0x546>
 800b63c:	0800e3b8 	.word	0x0800e3b8
 800b640:	0800e390 	.word	0x0800e390
 800b644:	3ff00000 	.word	0x3ff00000
 800b648:	40240000 	.word	0x40240000
 800b64c:	401c0000 	.word	0x401c0000
 800b650:	40140000 	.word	0x40140000
 800b654:	3fe00000 	.word	0x3fe00000
 800b658:	4631      	mov	r1, r6
 800b65a:	4628      	mov	r0, r5
 800b65c:	f7f4 fff4 	bl	8000648 <__aeabi_dmul>
 800b660:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b664:	9415      	str	r4, [sp, #84]	@ 0x54
 800b666:	4656      	mov	r6, sl
 800b668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b66c:	f7f5 fa9c 	bl	8000ba8 <__aeabi_d2iz>
 800b670:	4605      	mov	r5, r0
 800b672:	f7f4 ff7f 	bl	8000574 <__aeabi_i2d>
 800b676:	4602      	mov	r2, r0
 800b678:	460b      	mov	r3, r1
 800b67a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b67e:	f7f4 fe2b 	bl	80002d8 <__aeabi_dsub>
 800b682:	3530      	adds	r5, #48	@ 0x30
 800b684:	f806 5b01 	strb.w	r5, [r6], #1
 800b688:	4602      	mov	r2, r0
 800b68a:	460b      	mov	r3, r1
 800b68c:	42a6      	cmp	r6, r4
 800b68e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b692:	f04f 0200 	mov.w	r2, #0
 800b696:	d124      	bne.n	800b6e2 <_dtoa_r+0x662>
 800b698:	4bac      	ldr	r3, [pc, #688]	@ (800b94c <_dtoa_r+0x8cc>)
 800b69a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b69e:	f7f4 fe1d 	bl	80002dc <__adddf3>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6aa:	f7f5 fa5d 	bl	8000b68 <__aeabi_dcmpgt>
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	d145      	bne.n	800b73e <_dtoa_r+0x6be>
 800b6b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b6b6:	49a5      	ldr	r1, [pc, #660]	@ (800b94c <_dtoa_r+0x8cc>)
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	f7f4 fe0d 	bl	80002d8 <__aeabi_dsub>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6c6:	f7f5 fa31 	bl	8000b2c <__aeabi_dcmplt>
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	f43f aef5 	beq.w	800b4ba <_dtoa_r+0x43a>
 800b6d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b6d2:	1e73      	subs	r3, r6, #1
 800b6d4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b6d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b6da:	2b30      	cmp	r3, #48	@ 0x30
 800b6dc:	d0f8      	beq.n	800b6d0 <_dtoa_r+0x650>
 800b6de:	9f04      	ldr	r7, [sp, #16]
 800b6e0:	e73e      	b.n	800b560 <_dtoa_r+0x4e0>
 800b6e2:	4b9b      	ldr	r3, [pc, #620]	@ (800b950 <_dtoa_r+0x8d0>)
 800b6e4:	f7f4 ffb0 	bl	8000648 <__aeabi_dmul>
 800b6e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6ec:	e7bc      	b.n	800b668 <_dtoa_r+0x5e8>
 800b6ee:	d10c      	bne.n	800b70a <_dtoa_r+0x68a>
 800b6f0:	4b98      	ldr	r3, [pc, #608]	@ (800b954 <_dtoa_r+0x8d4>)
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6f8:	f7f4 ffa6 	bl	8000648 <__aeabi_dmul>
 800b6fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b700:	f7f5 fa28 	bl	8000b54 <__aeabi_dcmpge>
 800b704:	2800      	cmp	r0, #0
 800b706:	f000 8157 	beq.w	800b9b8 <_dtoa_r+0x938>
 800b70a:	2400      	movs	r4, #0
 800b70c:	4625      	mov	r5, r4
 800b70e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b710:	43db      	mvns	r3, r3
 800b712:	9304      	str	r3, [sp, #16]
 800b714:	4656      	mov	r6, sl
 800b716:	2700      	movs	r7, #0
 800b718:	4621      	mov	r1, r4
 800b71a:	4658      	mov	r0, fp
 800b71c:	f000 fafe 	bl	800bd1c <_Bfree>
 800b720:	2d00      	cmp	r5, #0
 800b722:	d0dc      	beq.n	800b6de <_dtoa_r+0x65e>
 800b724:	b12f      	cbz	r7, 800b732 <_dtoa_r+0x6b2>
 800b726:	42af      	cmp	r7, r5
 800b728:	d003      	beq.n	800b732 <_dtoa_r+0x6b2>
 800b72a:	4639      	mov	r1, r7
 800b72c:	4658      	mov	r0, fp
 800b72e:	f000 faf5 	bl	800bd1c <_Bfree>
 800b732:	4629      	mov	r1, r5
 800b734:	4658      	mov	r0, fp
 800b736:	f000 faf1 	bl	800bd1c <_Bfree>
 800b73a:	e7d0      	b.n	800b6de <_dtoa_r+0x65e>
 800b73c:	9704      	str	r7, [sp, #16]
 800b73e:	4633      	mov	r3, r6
 800b740:	461e      	mov	r6, r3
 800b742:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b746:	2a39      	cmp	r2, #57	@ 0x39
 800b748:	d107      	bne.n	800b75a <_dtoa_r+0x6da>
 800b74a:	459a      	cmp	sl, r3
 800b74c:	d1f8      	bne.n	800b740 <_dtoa_r+0x6c0>
 800b74e:	9a04      	ldr	r2, [sp, #16]
 800b750:	3201      	adds	r2, #1
 800b752:	9204      	str	r2, [sp, #16]
 800b754:	2230      	movs	r2, #48	@ 0x30
 800b756:	f88a 2000 	strb.w	r2, [sl]
 800b75a:	781a      	ldrb	r2, [r3, #0]
 800b75c:	3201      	adds	r2, #1
 800b75e:	701a      	strb	r2, [r3, #0]
 800b760:	e7bd      	b.n	800b6de <_dtoa_r+0x65e>
 800b762:	4b7b      	ldr	r3, [pc, #492]	@ (800b950 <_dtoa_r+0x8d0>)
 800b764:	2200      	movs	r2, #0
 800b766:	f7f4 ff6f 	bl	8000648 <__aeabi_dmul>
 800b76a:	2200      	movs	r2, #0
 800b76c:	2300      	movs	r3, #0
 800b76e:	4604      	mov	r4, r0
 800b770:	460d      	mov	r5, r1
 800b772:	f7f5 f9d1 	bl	8000b18 <__aeabi_dcmpeq>
 800b776:	2800      	cmp	r0, #0
 800b778:	f43f aebb 	beq.w	800b4f2 <_dtoa_r+0x472>
 800b77c:	e6f0      	b.n	800b560 <_dtoa_r+0x4e0>
 800b77e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b780:	2a00      	cmp	r2, #0
 800b782:	f000 80db 	beq.w	800b93c <_dtoa_r+0x8bc>
 800b786:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b788:	2a01      	cmp	r2, #1
 800b78a:	f300 80bf 	bgt.w	800b90c <_dtoa_r+0x88c>
 800b78e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b790:	2a00      	cmp	r2, #0
 800b792:	f000 80b7 	beq.w	800b904 <_dtoa_r+0x884>
 800b796:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b79a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b79c:	4646      	mov	r6, r8
 800b79e:	9a08      	ldr	r2, [sp, #32]
 800b7a0:	2101      	movs	r1, #1
 800b7a2:	441a      	add	r2, r3
 800b7a4:	4658      	mov	r0, fp
 800b7a6:	4498      	add	r8, r3
 800b7a8:	9208      	str	r2, [sp, #32]
 800b7aa:	f000 fb6b 	bl	800be84 <__i2b>
 800b7ae:	4605      	mov	r5, r0
 800b7b0:	b15e      	cbz	r6, 800b7ca <_dtoa_r+0x74a>
 800b7b2:	9b08      	ldr	r3, [sp, #32]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	dd08      	ble.n	800b7ca <_dtoa_r+0x74a>
 800b7b8:	42b3      	cmp	r3, r6
 800b7ba:	9a08      	ldr	r2, [sp, #32]
 800b7bc:	bfa8      	it	ge
 800b7be:	4633      	movge	r3, r6
 800b7c0:	eba8 0803 	sub.w	r8, r8, r3
 800b7c4:	1af6      	subs	r6, r6, r3
 800b7c6:	1ad3      	subs	r3, r2, r3
 800b7c8:	9308      	str	r3, [sp, #32]
 800b7ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7cc:	b1f3      	cbz	r3, 800b80c <_dtoa_r+0x78c>
 800b7ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f000 80b7 	beq.w	800b944 <_dtoa_r+0x8c4>
 800b7d6:	b18c      	cbz	r4, 800b7fc <_dtoa_r+0x77c>
 800b7d8:	4629      	mov	r1, r5
 800b7da:	4622      	mov	r2, r4
 800b7dc:	4658      	mov	r0, fp
 800b7de:	f000 fc11 	bl	800c004 <__pow5mult>
 800b7e2:	464a      	mov	r2, r9
 800b7e4:	4601      	mov	r1, r0
 800b7e6:	4605      	mov	r5, r0
 800b7e8:	4658      	mov	r0, fp
 800b7ea:	f000 fb61 	bl	800beb0 <__multiply>
 800b7ee:	4649      	mov	r1, r9
 800b7f0:	9004      	str	r0, [sp, #16]
 800b7f2:	4658      	mov	r0, fp
 800b7f4:	f000 fa92 	bl	800bd1c <_Bfree>
 800b7f8:	9b04      	ldr	r3, [sp, #16]
 800b7fa:	4699      	mov	r9, r3
 800b7fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7fe:	1b1a      	subs	r2, r3, r4
 800b800:	d004      	beq.n	800b80c <_dtoa_r+0x78c>
 800b802:	4649      	mov	r1, r9
 800b804:	4658      	mov	r0, fp
 800b806:	f000 fbfd 	bl	800c004 <__pow5mult>
 800b80a:	4681      	mov	r9, r0
 800b80c:	2101      	movs	r1, #1
 800b80e:	4658      	mov	r0, fp
 800b810:	f000 fb38 	bl	800be84 <__i2b>
 800b814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b816:	4604      	mov	r4, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f000 81cf 	beq.w	800bbbc <_dtoa_r+0xb3c>
 800b81e:	461a      	mov	r2, r3
 800b820:	4601      	mov	r1, r0
 800b822:	4658      	mov	r0, fp
 800b824:	f000 fbee 	bl	800c004 <__pow5mult>
 800b828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	4604      	mov	r4, r0
 800b82e:	f300 8095 	bgt.w	800b95c <_dtoa_r+0x8dc>
 800b832:	9b02      	ldr	r3, [sp, #8]
 800b834:	2b00      	cmp	r3, #0
 800b836:	f040 8087 	bne.w	800b948 <_dtoa_r+0x8c8>
 800b83a:	9b03      	ldr	r3, [sp, #12]
 800b83c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b840:	2b00      	cmp	r3, #0
 800b842:	f040 8089 	bne.w	800b958 <_dtoa_r+0x8d8>
 800b846:	9b03      	ldr	r3, [sp, #12]
 800b848:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b84c:	0d1b      	lsrs	r3, r3, #20
 800b84e:	051b      	lsls	r3, r3, #20
 800b850:	b12b      	cbz	r3, 800b85e <_dtoa_r+0x7de>
 800b852:	9b08      	ldr	r3, [sp, #32]
 800b854:	3301      	adds	r3, #1
 800b856:	9308      	str	r3, [sp, #32]
 800b858:	f108 0801 	add.w	r8, r8, #1
 800b85c:	2301      	movs	r3, #1
 800b85e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b862:	2b00      	cmp	r3, #0
 800b864:	f000 81b0 	beq.w	800bbc8 <_dtoa_r+0xb48>
 800b868:	6923      	ldr	r3, [r4, #16]
 800b86a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b86e:	6918      	ldr	r0, [r3, #16]
 800b870:	f000 fabc 	bl	800bdec <__hi0bits>
 800b874:	f1c0 0020 	rsb	r0, r0, #32
 800b878:	9b08      	ldr	r3, [sp, #32]
 800b87a:	4418      	add	r0, r3
 800b87c:	f010 001f 	ands.w	r0, r0, #31
 800b880:	d077      	beq.n	800b972 <_dtoa_r+0x8f2>
 800b882:	f1c0 0320 	rsb	r3, r0, #32
 800b886:	2b04      	cmp	r3, #4
 800b888:	dd6b      	ble.n	800b962 <_dtoa_r+0x8e2>
 800b88a:	9b08      	ldr	r3, [sp, #32]
 800b88c:	f1c0 001c 	rsb	r0, r0, #28
 800b890:	4403      	add	r3, r0
 800b892:	4480      	add	r8, r0
 800b894:	4406      	add	r6, r0
 800b896:	9308      	str	r3, [sp, #32]
 800b898:	f1b8 0f00 	cmp.w	r8, #0
 800b89c:	dd05      	ble.n	800b8aa <_dtoa_r+0x82a>
 800b89e:	4649      	mov	r1, r9
 800b8a0:	4642      	mov	r2, r8
 800b8a2:	4658      	mov	r0, fp
 800b8a4:	f000 fc08 	bl	800c0b8 <__lshift>
 800b8a8:	4681      	mov	r9, r0
 800b8aa:	9b08      	ldr	r3, [sp, #32]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	dd05      	ble.n	800b8bc <_dtoa_r+0x83c>
 800b8b0:	4621      	mov	r1, r4
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	4658      	mov	r0, fp
 800b8b6:	f000 fbff 	bl	800c0b8 <__lshift>
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d059      	beq.n	800b976 <_dtoa_r+0x8f6>
 800b8c2:	4621      	mov	r1, r4
 800b8c4:	4648      	mov	r0, r9
 800b8c6:	f000 fc63 	bl	800c190 <__mcmp>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	da53      	bge.n	800b976 <_dtoa_r+0x8f6>
 800b8ce:	1e7b      	subs	r3, r7, #1
 800b8d0:	9304      	str	r3, [sp, #16]
 800b8d2:	4649      	mov	r1, r9
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	220a      	movs	r2, #10
 800b8d8:	4658      	mov	r0, fp
 800b8da:	f000 fa41 	bl	800bd60 <__multadd>
 800b8de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8e0:	4681      	mov	r9, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	f000 8172 	beq.w	800bbcc <_dtoa_r+0xb4c>
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	4629      	mov	r1, r5
 800b8ec:	220a      	movs	r2, #10
 800b8ee:	4658      	mov	r0, fp
 800b8f0:	f000 fa36 	bl	800bd60 <__multadd>
 800b8f4:	9b00      	ldr	r3, [sp, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	4605      	mov	r5, r0
 800b8fa:	dc67      	bgt.n	800b9cc <_dtoa_r+0x94c>
 800b8fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	dc41      	bgt.n	800b986 <_dtoa_r+0x906>
 800b902:	e063      	b.n	800b9cc <_dtoa_r+0x94c>
 800b904:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b906:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b90a:	e746      	b.n	800b79a <_dtoa_r+0x71a>
 800b90c:	9b07      	ldr	r3, [sp, #28]
 800b90e:	1e5c      	subs	r4, r3, #1
 800b910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b912:	42a3      	cmp	r3, r4
 800b914:	bfbf      	itttt	lt
 800b916:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b918:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b91a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b91c:	1ae3      	sublt	r3, r4, r3
 800b91e:	bfb4      	ite	lt
 800b920:	18d2      	addlt	r2, r2, r3
 800b922:	1b1c      	subge	r4, r3, r4
 800b924:	9b07      	ldr	r3, [sp, #28]
 800b926:	bfbc      	itt	lt
 800b928:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b92a:	2400      	movlt	r4, #0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	bfb5      	itete	lt
 800b930:	eba8 0603 	sublt.w	r6, r8, r3
 800b934:	9b07      	ldrge	r3, [sp, #28]
 800b936:	2300      	movlt	r3, #0
 800b938:	4646      	movge	r6, r8
 800b93a:	e730      	b.n	800b79e <_dtoa_r+0x71e>
 800b93c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b93e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b940:	4646      	mov	r6, r8
 800b942:	e735      	b.n	800b7b0 <_dtoa_r+0x730>
 800b944:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b946:	e75c      	b.n	800b802 <_dtoa_r+0x782>
 800b948:	2300      	movs	r3, #0
 800b94a:	e788      	b.n	800b85e <_dtoa_r+0x7de>
 800b94c:	3fe00000 	.word	0x3fe00000
 800b950:	40240000 	.word	0x40240000
 800b954:	40140000 	.word	0x40140000
 800b958:	9b02      	ldr	r3, [sp, #8]
 800b95a:	e780      	b.n	800b85e <_dtoa_r+0x7de>
 800b95c:	2300      	movs	r3, #0
 800b95e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b960:	e782      	b.n	800b868 <_dtoa_r+0x7e8>
 800b962:	d099      	beq.n	800b898 <_dtoa_r+0x818>
 800b964:	9a08      	ldr	r2, [sp, #32]
 800b966:	331c      	adds	r3, #28
 800b968:	441a      	add	r2, r3
 800b96a:	4498      	add	r8, r3
 800b96c:	441e      	add	r6, r3
 800b96e:	9208      	str	r2, [sp, #32]
 800b970:	e792      	b.n	800b898 <_dtoa_r+0x818>
 800b972:	4603      	mov	r3, r0
 800b974:	e7f6      	b.n	800b964 <_dtoa_r+0x8e4>
 800b976:	9b07      	ldr	r3, [sp, #28]
 800b978:	9704      	str	r7, [sp, #16]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	dc20      	bgt.n	800b9c0 <_dtoa_r+0x940>
 800b97e:	9300      	str	r3, [sp, #0]
 800b980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b982:	2b02      	cmp	r3, #2
 800b984:	dd1e      	ble.n	800b9c4 <_dtoa_r+0x944>
 800b986:	9b00      	ldr	r3, [sp, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f47f aec0 	bne.w	800b70e <_dtoa_r+0x68e>
 800b98e:	4621      	mov	r1, r4
 800b990:	2205      	movs	r2, #5
 800b992:	4658      	mov	r0, fp
 800b994:	f000 f9e4 	bl	800bd60 <__multadd>
 800b998:	4601      	mov	r1, r0
 800b99a:	4604      	mov	r4, r0
 800b99c:	4648      	mov	r0, r9
 800b99e:	f000 fbf7 	bl	800c190 <__mcmp>
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	f77f aeb3 	ble.w	800b70e <_dtoa_r+0x68e>
 800b9a8:	4656      	mov	r6, sl
 800b9aa:	2331      	movs	r3, #49	@ 0x31
 800b9ac:	f806 3b01 	strb.w	r3, [r6], #1
 800b9b0:	9b04      	ldr	r3, [sp, #16]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	9304      	str	r3, [sp, #16]
 800b9b6:	e6ae      	b.n	800b716 <_dtoa_r+0x696>
 800b9b8:	9c07      	ldr	r4, [sp, #28]
 800b9ba:	9704      	str	r7, [sp, #16]
 800b9bc:	4625      	mov	r5, r4
 800b9be:	e7f3      	b.n	800b9a8 <_dtoa_r+0x928>
 800b9c0:	9b07      	ldr	r3, [sp, #28]
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	f000 8104 	beq.w	800bbd4 <_dtoa_r+0xb54>
 800b9cc:	2e00      	cmp	r6, #0
 800b9ce:	dd05      	ble.n	800b9dc <_dtoa_r+0x95c>
 800b9d0:	4629      	mov	r1, r5
 800b9d2:	4632      	mov	r2, r6
 800b9d4:	4658      	mov	r0, fp
 800b9d6:	f000 fb6f 	bl	800c0b8 <__lshift>
 800b9da:	4605      	mov	r5, r0
 800b9dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d05a      	beq.n	800ba98 <_dtoa_r+0xa18>
 800b9e2:	6869      	ldr	r1, [r5, #4]
 800b9e4:	4658      	mov	r0, fp
 800b9e6:	f000 f959 	bl	800bc9c <_Balloc>
 800b9ea:	4606      	mov	r6, r0
 800b9ec:	b928      	cbnz	r0, 800b9fa <_dtoa_r+0x97a>
 800b9ee:	4b84      	ldr	r3, [pc, #528]	@ (800bc00 <_dtoa_r+0xb80>)
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b9f6:	f7ff bb5a 	b.w	800b0ae <_dtoa_r+0x2e>
 800b9fa:	692a      	ldr	r2, [r5, #16]
 800b9fc:	3202      	adds	r2, #2
 800b9fe:	0092      	lsls	r2, r2, #2
 800ba00:	f105 010c 	add.w	r1, r5, #12
 800ba04:	300c      	adds	r0, #12
 800ba06:	f000 fee9 	bl	800c7dc <memcpy>
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	4631      	mov	r1, r6
 800ba0e:	4658      	mov	r0, fp
 800ba10:	f000 fb52 	bl	800c0b8 <__lshift>
 800ba14:	f10a 0301 	add.w	r3, sl, #1
 800ba18:	9307      	str	r3, [sp, #28]
 800ba1a:	9b00      	ldr	r3, [sp, #0]
 800ba1c:	4453      	add	r3, sl
 800ba1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba20:	9b02      	ldr	r3, [sp, #8]
 800ba22:	f003 0301 	and.w	r3, r3, #1
 800ba26:	462f      	mov	r7, r5
 800ba28:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba2a:	4605      	mov	r5, r0
 800ba2c:	9b07      	ldr	r3, [sp, #28]
 800ba2e:	4621      	mov	r1, r4
 800ba30:	3b01      	subs	r3, #1
 800ba32:	4648      	mov	r0, r9
 800ba34:	9300      	str	r3, [sp, #0]
 800ba36:	f7ff fa9a 	bl	800af6e <quorem>
 800ba3a:	4639      	mov	r1, r7
 800ba3c:	9002      	str	r0, [sp, #8]
 800ba3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ba42:	4648      	mov	r0, r9
 800ba44:	f000 fba4 	bl	800c190 <__mcmp>
 800ba48:	462a      	mov	r2, r5
 800ba4a:	9008      	str	r0, [sp, #32]
 800ba4c:	4621      	mov	r1, r4
 800ba4e:	4658      	mov	r0, fp
 800ba50:	f000 fbba 	bl	800c1c8 <__mdiff>
 800ba54:	68c2      	ldr	r2, [r0, #12]
 800ba56:	4606      	mov	r6, r0
 800ba58:	bb02      	cbnz	r2, 800ba9c <_dtoa_r+0xa1c>
 800ba5a:	4601      	mov	r1, r0
 800ba5c:	4648      	mov	r0, r9
 800ba5e:	f000 fb97 	bl	800c190 <__mcmp>
 800ba62:	4602      	mov	r2, r0
 800ba64:	4631      	mov	r1, r6
 800ba66:	4658      	mov	r0, fp
 800ba68:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba6a:	f000 f957 	bl	800bd1c <_Bfree>
 800ba6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba72:	9e07      	ldr	r6, [sp, #28]
 800ba74:	ea43 0102 	orr.w	r1, r3, r2
 800ba78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba7a:	4319      	orrs	r1, r3
 800ba7c:	d110      	bne.n	800baa0 <_dtoa_r+0xa20>
 800ba7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba82:	d029      	beq.n	800bad8 <_dtoa_r+0xa58>
 800ba84:	9b08      	ldr	r3, [sp, #32]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	dd02      	ble.n	800ba90 <_dtoa_r+0xa10>
 800ba8a:	9b02      	ldr	r3, [sp, #8]
 800ba8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ba90:	9b00      	ldr	r3, [sp, #0]
 800ba92:	f883 8000 	strb.w	r8, [r3]
 800ba96:	e63f      	b.n	800b718 <_dtoa_r+0x698>
 800ba98:	4628      	mov	r0, r5
 800ba9a:	e7bb      	b.n	800ba14 <_dtoa_r+0x994>
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	e7e1      	b.n	800ba64 <_dtoa_r+0x9e4>
 800baa0:	9b08      	ldr	r3, [sp, #32]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	db04      	blt.n	800bab0 <_dtoa_r+0xa30>
 800baa6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800baa8:	430b      	orrs	r3, r1
 800baaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800baac:	430b      	orrs	r3, r1
 800baae:	d120      	bne.n	800baf2 <_dtoa_r+0xa72>
 800bab0:	2a00      	cmp	r2, #0
 800bab2:	dded      	ble.n	800ba90 <_dtoa_r+0xa10>
 800bab4:	4649      	mov	r1, r9
 800bab6:	2201      	movs	r2, #1
 800bab8:	4658      	mov	r0, fp
 800baba:	f000 fafd 	bl	800c0b8 <__lshift>
 800babe:	4621      	mov	r1, r4
 800bac0:	4681      	mov	r9, r0
 800bac2:	f000 fb65 	bl	800c190 <__mcmp>
 800bac6:	2800      	cmp	r0, #0
 800bac8:	dc03      	bgt.n	800bad2 <_dtoa_r+0xa52>
 800baca:	d1e1      	bne.n	800ba90 <_dtoa_r+0xa10>
 800bacc:	f018 0f01 	tst.w	r8, #1
 800bad0:	d0de      	beq.n	800ba90 <_dtoa_r+0xa10>
 800bad2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bad6:	d1d8      	bne.n	800ba8a <_dtoa_r+0xa0a>
 800bad8:	9a00      	ldr	r2, [sp, #0]
 800bada:	2339      	movs	r3, #57	@ 0x39
 800badc:	7013      	strb	r3, [r2, #0]
 800bade:	4633      	mov	r3, r6
 800bae0:	461e      	mov	r6, r3
 800bae2:	3b01      	subs	r3, #1
 800bae4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bae8:	2a39      	cmp	r2, #57	@ 0x39
 800baea:	d052      	beq.n	800bb92 <_dtoa_r+0xb12>
 800baec:	3201      	adds	r2, #1
 800baee:	701a      	strb	r2, [r3, #0]
 800baf0:	e612      	b.n	800b718 <_dtoa_r+0x698>
 800baf2:	2a00      	cmp	r2, #0
 800baf4:	dd07      	ble.n	800bb06 <_dtoa_r+0xa86>
 800baf6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bafa:	d0ed      	beq.n	800bad8 <_dtoa_r+0xa58>
 800bafc:	9a00      	ldr	r2, [sp, #0]
 800bafe:	f108 0301 	add.w	r3, r8, #1
 800bb02:	7013      	strb	r3, [r2, #0]
 800bb04:	e608      	b.n	800b718 <_dtoa_r+0x698>
 800bb06:	9b07      	ldr	r3, [sp, #28]
 800bb08:	9a07      	ldr	r2, [sp, #28]
 800bb0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bb0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d028      	beq.n	800bb66 <_dtoa_r+0xae6>
 800bb14:	4649      	mov	r1, r9
 800bb16:	2300      	movs	r3, #0
 800bb18:	220a      	movs	r2, #10
 800bb1a:	4658      	mov	r0, fp
 800bb1c:	f000 f920 	bl	800bd60 <__multadd>
 800bb20:	42af      	cmp	r7, r5
 800bb22:	4681      	mov	r9, r0
 800bb24:	f04f 0300 	mov.w	r3, #0
 800bb28:	f04f 020a 	mov.w	r2, #10
 800bb2c:	4639      	mov	r1, r7
 800bb2e:	4658      	mov	r0, fp
 800bb30:	d107      	bne.n	800bb42 <_dtoa_r+0xac2>
 800bb32:	f000 f915 	bl	800bd60 <__multadd>
 800bb36:	4607      	mov	r7, r0
 800bb38:	4605      	mov	r5, r0
 800bb3a:	9b07      	ldr	r3, [sp, #28]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	9307      	str	r3, [sp, #28]
 800bb40:	e774      	b.n	800ba2c <_dtoa_r+0x9ac>
 800bb42:	f000 f90d 	bl	800bd60 <__multadd>
 800bb46:	4629      	mov	r1, r5
 800bb48:	4607      	mov	r7, r0
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	220a      	movs	r2, #10
 800bb4e:	4658      	mov	r0, fp
 800bb50:	f000 f906 	bl	800bd60 <__multadd>
 800bb54:	4605      	mov	r5, r0
 800bb56:	e7f0      	b.n	800bb3a <_dtoa_r+0xaba>
 800bb58:	9b00      	ldr	r3, [sp, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	bfcc      	ite	gt
 800bb5e:	461e      	movgt	r6, r3
 800bb60:	2601      	movle	r6, #1
 800bb62:	4456      	add	r6, sl
 800bb64:	2700      	movs	r7, #0
 800bb66:	4649      	mov	r1, r9
 800bb68:	2201      	movs	r2, #1
 800bb6a:	4658      	mov	r0, fp
 800bb6c:	f000 faa4 	bl	800c0b8 <__lshift>
 800bb70:	4621      	mov	r1, r4
 800bb72:	4681      	mov	r9, r0
 800bb74:	f000 fb0c 	bl	800c190 <__mcmp>
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	dcb0      	bgt.n	800bade <_dtoa_r+0xa5e>
 800bb7c:	d102      	bne.n	800bb84 <_dtoa_r+0xb04>
 800bb7e:	f018 0f01 	tst.w	r8, #1
 800bb82:	d1ac      	bne.n	800bade <_dtoa_r+0xa5e>
 800bb84:	4633      	mov	r3, r6
 800bb86:	461e      	mov	r6, r3
 800bb88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb8c:	2a30      	cmp	r2, #48	@ 0x30
 800bb8e:	d0fa      	beq.n	800bb86 <_dtoa_r+0xb06>
 800bb90:	e5c2      	b.n	800b718 <_dtoa_r+0x698>
 800bb92:	459a      	cmp	sl, r3
 800bb94:	d1a4      	bne.n	800bae0 <_dtoa_r+0xa60>
 800bb96:	9b04      	ldr	r3, [sp, #16]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	9304      	str	r3, [sp, #16]
 800bb9c:	2331      	movs	r3, #49	@ 0x31
 800bb9e:	f88a 3000 	strb.w	r3, [sl]
 800bba2:	e5b9      	b.n	800b718 <_dtoa_r+0x698>
 800bba4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bba6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bc04 <_dtoa_r+0xb84>
 800bbaa:	b11b      	cbz	r3, 800bbb4 <_dtoa_r+0xb34>
 800bbac:	f10a 0308 	add.w	r3, sl, #8
 800bbb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bbb2:	6013      	str	r3, [r2, #0]
 800bbb4:	4650      	mov	r0, sl
 800bbb6:	b019      	add	sp, #100	@ 0x64
 800bbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	f77f ae37 	ble.w	800b832 <_dtoa_r+0x7b2>
 800bbc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbc8:	2001      	movs	r0, #1
 800bbca:	e655      	b.n	800b878 <_dtoa_r+0x7f8>
 800bbcc:	9b00      	ldr	r3, [sp, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f77f aed6 	ble.w	800b980 <_dtoa_r+0x900>
 800bbd4:	4656      	mov	r6, sl
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	4648      	mov	r0, r9
 800bbda:	f7ff f9c8 	bl	800af6e <quorem>
 800bbde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bbe2:	f806 8b01 	strb.w	r8, [r6], #1
 800bbe6:	9b00      	ldr	r3, [sp, #0]
 800bbe8:	eba6 020a 	sub.w	r2, r6, sl
 800bbec:	4293      	cmp	r3, r2
 800bbee:	ddb3      	ble.n	800bb58 <_dtoa_r+0xad8>
 800bbf0:	4649      	mov	r1, r9
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	220a      	movs	r2, #10
 800bbf6:	4658      	mov	r0, fp
 800bbf8:	f000 f8b2 	bl	800bd60 <__multadd>
 800bbfc:	4681      	mov	r9, r0
 800bbfe:	e7ea      	b.n	800bbd6 <_dtoa_r+0xb56>
 800bc00:	0800e314 	.word	0x0800e314
 800bc04:	0800e298 	.word	0x0800e298

0800bc08 <_free_r>:
 800bc08:	b538      	push	{r3, r4, r5, lr}
 800bc0a:	4605      	mov	r5, r0
 800bc0c:	2900      	cmp	r1, #0
 800bc0e:	d041      	beq.n	800bc94 <_free_r+0x8c>
 800bc10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc14:	1f0c      	subs	r4, r1, #4
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	bfb8      	it	lt
 800bc1a:	18e4      	addlt	r4, r4, r3
 800bc1c:	f7fe fb8e 	bl	800a33c <__malloc_lock>
 800bc20:	4a1d      	ldr	r2, [pc, #116]	@ (800bc98 <_free_r+0x90>)
 800bc22:	6813      	ldr	r3, [r2, #0]
 800bc24:	b933      	cbnz	r3, 800bc34 <_free_r+0x2c>
 800bc26:	6063      	str	r3, [r4, #4]
 800bc28:	6014      	str	r4, [r2, #0]
 800bc2a:	4628      	mov	r0, r5
 800bc2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc30:	f7fe bb8a 	b.w	800a348 <__malloc_unlock>
 800bc34:	42a3      	cmp	r3, r4
 800bc36:	d908      	bls.n	800bc4a <_free_r+0x42>
 800bc38:	6820      	ldr	r0, [r4, #0]
 800bc3a:	1821      	adds	r1, r4, r0
 800bc3c:	428b      	cmp	r3, r1
 800bc3e:	bf01      	itttt	eq
 800bc40:	6819      	ldreq	r1, [r3, #0]
 800bc42:	685b      	ldreq	r3, [r3, #4]
 800bc44:	1809      	addeq	r1, r1, r0
 800bc46:	6021      	streq	r1, [r4, #0]
 800bc48:	e7ed      	b.n	800bc26 <_free_r+0x1e>
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	b10b      	cbz	r3, 800bc54 <_free_r+0x4c>
 800bc50:	42a3      	cmp	r3, r4
 800bc52:	d9fa      	bls.n	800bc4a <_free_r+0x42>
 800bc54:	6811      	ldr	r1, [r2, #0]
 800bc56:	1850      	adds	r0, r2, r1
 800bc58:	42a0      	cmp	r0, r4
 800bc5a:	d10b      	bne.n	800bc74 <_free_r+0x6c>
 800bc5c:	6820      	ldr	r0, [r4, #0]
 800bc5e:	4401      	add	r1, r0
 800bc60:	1850      	adds	r0, r2, r1
 800bc62:	4283      	cmp	r3, r0
 800bc64:	6011      	str	r1, [r2, #0]
 800bc66:	d1e0      	bne.n	800bc2a <_free_r+0x22>
 800bc68:	6818      	ldr	r0, [r3, #0]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	6053      	str	r3, [r2, #4]
 800bc6e:	4408      	add	r0, r1
 800bc70:	6010      	str	r0, [r2, #0]
 800bc72:	e7da      	b.n	800bc2a <_free_r+0x22>
 800bc74:	d902      	bls.n	800bc7c <_free_r+0x74>
 800bc76:	230c      	movs	r3, #12
 800bc78:	602b      	str	r3, [r5, #0]
 800bc7a:	e7d6      	b.n	800bc2a <_free_r+0x22>
 800bc7c:	6820      	ldr	r0, [r4, #0]
 800bc7e:	1821      	adds	r1, r4, r0
 800bc80:	428b      	cmp	r3, r1
 800bc82:	bf04      	itt	eq
 800bc84:	6819      	ldreq	r1, [r3, #0]
 800bc86:	685b      	ldreq	r3, [r3, #4]
 800bc88:	6063      	str	r3, [r4, #4]
 800bc8a:	bf04      	itt	eq
 800bc8c:	1809      	addeq	r1, r1, r0
 800bc8e:	6021      	streq	r1, [r4, #0]
 800bc90:	6054      	str	r4, [r2, #4]
 800bc92:	e7ca      	b.n	800bc2a <_free_r+0x22>
 800bc94:	bd38      	pop	{r3, r4, r5, pc}
 800bc96:	bf00      	nop
 800bc98:	200006e4 	.word	0x200006e4

0800bc9c <_Balloc>:
 800bc9c:	b570      	push	{r4, r5, r6, lr}
 800bc9e:	69c6      	ldr	r6, [r0, #28]
 800bca0:	4604      	mov	r4, r0
 800bca2:	460d      	mov	r5, r1
 800bca4:	b976      	cbnz	r6, 800bcc4 <_Balloc+0x28>
 800bca6:	2010      	movs	r0, #16
 800bca8:	f7fe fa96 	bl	800a1d8 <malloc>
 800bcac:	4602      	mov	r2, r0
 800bcae:	61e0      	str	r0, [r4, #28]
 800bcb0:	b920      	cbnz	r0, 800bcbc <_Balloc+0x20>
 800bcb2:	4b18      	ldr	r3, [pc, #96]	@ (800bd14 <_Balloc+0x78>)
 800bcb4:	4818      	ldr	r0, [pc, #96]	@ (800bd18 <_Balloc+0x7c>)
 800bcb6:	216b      	movs	r1, #107	@ 0x6b
 800bcb8:	f000 fd9e 	bl	800c7f8 <__assert_func>
 800bcbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcc0:	6006      	str	r6, [r0, #0]
 800bcc2:	60c6      	str	r6, [r0, #12]
 800bcc4:	69e6      	ldr	r6, [r4, #28]
 800bcc6:	68f3      	ldr	r3, [r6, #12]
 800bcc8:	b183      	cbz	r3, 800bcec <_Balloc+0x50>
 800bcca:	69e3      	ldr	r3, [r4, #28]
 800bccc:	68db      	ldr	r3, [r3, #12]
 800bcce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bcd2:	b9b8      	cbnz	r0, 800bd04 <_Balloc+0x68>
 800bcd4:	2101      	movs	r1, #1
 800bcd6:	fa01 f605 	lsl.w	r6, r1, r5
 800bcda:	1d72      	adds	r2, r6, #5
 800bcdc:	0092      	lsls	r2, r2, #2
 800bcde:	4620      	mov	r0, r4
 800bce0:	f000 fda8 	bl	800c834 <_calloc_r>
 800bce4:	b160      	cbz	r0, 800bd00 <_Balloc+0x64>
 800bce6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bcea:	e00e      	b.n	800bd0a <_Balloc+0x6e>
 800bcec:	2221      	movs	r2, #33	@ 0x21
 800bcee:	2104      	movs	r1, #4
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f000 fd9f 	bl	800c834 <_calloc_r>
 800bcf6:	69e3      	ldr	r3, [r4, #28]
 800bcf8:	60f0      	str	r0, [r6, #12]
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d1e4      	bne.n	800bcca <_Balloc+0x2e>
 800bd00:	2000      	movs	r0, #0
 800bd02:	bd70      	pop	{r4, r5, r6, pc}
 800bd04:	6802      	ldr	r2, [r0, #0]
 800bd06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd10:	e7f7      	b.n	800bd02 <_Balloc+0x66>
 800bd12:	bf00      	nop
 800bd14:	0800e2a5 	.word	0x0800e2a5
 800bd18:	0800e325 	.word	0x0800e325

0800bd1c <_Bfree>:
 800bd1c:	b570      	push	{r4, r5, r6, lr}
 800bd1e:	69c6      	ldr	r6, [r0, #28]
 800bd20:	4605      	mov	r5, r0
 800bd22:	460c      	mov	r4, r1
 800bd24:	b976      	cbnz	r6, 800bd44 <_Bfree+0x28>
 800bd26:	2010      	movs	r0, #16
 800bd28:	f7fe fa56 	bl	800a1d8 <malloc>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	61e8      	str	r0, [r5, #28]
 800bd30:	b920      	cbnz	r0, 800bd3c <_Bfree+0x20>
 800bd32:	4b09      	ldr	r3, [pc, #36]	@ (800bd58 <_Bfree+0x3c>)
 800bd34:	4809      	ldr	r0, [pc, #36]	@ (800bd5c <_Bfree+0x40>)
 800bd36:	218f      	movs	r1, #143	@ 0x8f
 800bd38:	f000 fd5e 	bl	800c7f8 <__assert_func>
 800bd3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd40:	6006      	str	r6, [r0, #0]
 800bd42:	60c6      	str	r6, [r0, #12]
 800bd44:	b13c      	cbz	r4, 800bd56 <_Bfree+0x3a>
 800bd46:	69eb      	ldr	r3, [r5, #28]
 800bd48:	6862      	ldr	r2, [r4, #4]
 800bd4a:	68db      	ldr	r3, [r3, #12]
 800bd4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd50:	6021      	str	r1, [r4, #0]
 800bd52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd56:	bd70      	pop	{r4, r5, r6, pc}
 800bd58:	0800e2a5 	.word	0x0800e2a5
 800bd5c:	0800e325 	.word	0x0800e325

0800bd60 <__multadd>:
 800bd60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd64:	690d      	ldr	r5, [r1, #16]
 800bd66:	4607      	mov	r7, r0
 800bd68:	460c      	mov	r4, r1
 800bd6a:	461e      	mov	r6, r3
 800bd6c:	f101 0c14 	add.w	ip, r1, #20
 800bd70:	2000      	movs	r0, #0
 800bd72:	f8dc 3000 	ldr.w	r3, [ip]
 800bd76:	b299      	uxth	r1, r3
 800bd78:	fb02 6101 	mla	r1, r2, r1, r6
 800bd7c:	0c1e      	lsrs	r6, r3, #16
 800bd7e:	0c0b      	lsrs	r3, r1, #16
 800bd80:	fb02 3306 	mla	r3, r2, r6, r3
 800bd84:	b289      	uxth	r1, r1
 800bd86:	3001      	adds	r0, #1
 800bd88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd8c:	4285      	cmp	r5, r0
 800bd8e:	f84c 1b04 	str.w	r1, [ip], #4
 800bd92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd96:	dcec      	bgt.n	800bd72 <__multadd+0x12>
 800bd98:	b30e      	cbz	r6, 800bdde <__multadd+0x7e>
 800bd9a:	68a3      	ldr	r3, [r4, #8]
 800bd9c:	42ab      	cmp	r3, r5
 800bd9e:	dc19      	bgt.n	800bdd4 <__multadd+0x74>
 800bda0:	6861      	ldr	r1, [r4, #4]
 800bda2:	4638      	mov	r0, r7
 800bda4:	3101      	adds	r1, #1
 800bda6:	f7ff ff79 	bl	800bc9c <_Balloc>
 800bdaa:	4680      	mov	r8, r0
 800bdac:	b928      	cbnz	r0, 800bdba <__multadd+0x5a>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	4b0c      	ldr	r3, [pc, #48]	@ (800bde4 <__multadd+0x84>)
 800bdb2:	480d      	ldr	r0, [pc, #52]	@ (800bde8 <__multadd+0x88>)
 800bdb4:	21ba      	movs	r1, #186	@ 0xba
 800bdb6:	f000 fd1f 	bl	800c7f8 <__assert_func>
 800bdba:	6922      	ldr	r2, [r4, #16]
 800bdbc:	3202      	adds	r2, #2
 800bdbe:	f104 010c 	add.w	r1, r4, #12
 800bdc2:	0092      	lsls	r2, r2, #2
 800bdc4:	300c      	adds	r0, #12
 800bdc6:	f000 fd09 	bl	800c7dc <memcpy>
 800bdca:	4621      	mov	r1, r4
 800bdcc:	4638      	mov	r0, r7
 800bdce:	f7ff ffa5 	bl	800bd1c <_Bfree>
 800bdd2:	4644      	mov	r4, r8
 800bdd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bdd8:	3501      	adds	r5, #1
 800bdda:	615e      	str	r6, [r3, #20]
 800bddc:	6125      	str	r5, [r4, #16]
 800bdde:	4620      	mov	r0, r4
 800bde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bde4:	0800e314 	.word	0x0800e314
 800bde8:	0800e325 	.word	0x0800e325

0800bdec <__hi0bits>:
 800bdec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	bf36      	itet	cc
 800bdf4:	0403      	lslcc	r3, r0, #16
 800bdf6:	2000      	movcs	r0, #0
 800bdf8:	2010      	movcc	r0, #16
 800bdfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bdfe:	bf3c      	itt	cc
 800be00:	021b      	lslcc	r3, r3, #8
 800be02:	3008      	addcc	r0, #8
 800be04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be08:	bf3c      	itt	cc
 800be0a:	011b      	lslcc	r3, r3, #4
 800be0c:	3004      	addcc	r0, #4
 800be0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be12:	bf3c      	itt	cc
 800be14:	009b      	lslcc	r3, r3, #2
 800be16:	3002      	addcc	r0, #2
 800be18:	2b00      	cmp	r3, #0
 800be1a:	db05      	blt.n	800be28 <__hi0bits+0x3c>
 800be1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800be20:	f100 0001 	add.w	r0, r0, #1
 800be24:	bf08      	it	eq
 800be26:	2020      	moveq	r0, #32
 800be28:	4770      	bx	lr

0800be2a <__lo0bits>:
 800be2a:	6803      	ldr	r3, [r0, #0]
 800be2c:	4602      	mov	r2, r0
 800be2e:	f013 0007 	ands.w	r0, r3, #7
 800be32:	d00b      	beq.n	800be4c <__lo0bits+0x22>
 800be34:	07d9      	lsls	r1, r3, #31
 800be36:	d421      	bmi.n	800be7c <__lo0bits+0x52>
 800be38:	0798      	lsls	r0, r3, #30
 800be3a:	bf49      	itett	mi
 800be3c:	085b      	lsrmi	r3, r3, #1
 800be3e:	089b      	lsrpl	r3, r3, #2
 800be40:	2001      	movmi	r0, #1
 800be42:	6013      	strmi	r3, [r2, #0]
 800be44:	bf5c      	itt	pl
 800be46:	6013      	strpl	r3, [r2, #0]
 800be48:	2002      	movpl	r0, #2
 800be4a:	4770      	bx	lr
 800be4c:	b299      	uxth	r1, r3
 800be4e:	b909      	cbnz	r1, 800be54 <__lo0bits+0x2a>
 800be50:	0c1b      	lsrs	r3, r3, #16
 800be52:	2010      	movs	r0, #16
 800be54:	b2d9      	uxtb	r1, r3
 800be56:	b909      	cbnz	r1, 800be5c <__lo0bits+0x32>
 800be58:	3008      	adds	r0, #8
 800be5a:	0a1b      	lsrs	r3, r3, #8
 800be5c:	0719      	lsls	r1, r3, #28
 800be5e:	bf04      	itt	eq
 800be60:	091b      	lsreq	r3, r3, #4
 800be62:	3004      	addeq	r0, #4
 800be64:	0799      	lsls	r1, r3, #30
 800be66:	bf04      	itt	eq
 800be68:	089b      	lsreq	r3, r3, #2
 800be6a:	3002      	addeq	r0, #2
 800be6c:	07d9      	lsls	r1, r3, #31
 800be6e:	d403      	bmi.n	800be78 <__lo0bits+0x4e>
 800be70:	085b      	lsrs	r3, r3, #1
 800be72:	f100 0001 	add.w	r0, r0, #1
 800be76:	d003      	beq.n	800be80 <__lo0bits+0x56>
 800be78:	6013      	str	r3, [r2, #0]
 800be7a:	4770      	bx	lr
 800be7c:	2000      	movs	r0, #0
 800be7e:	4770      	bx	lr
 800be80:	2020      	movs	r0, #32
 800be82:	4770      	bx	lr

0800be84 <__i2b>:
 800be84:	b510      	push	{r4, lr}
 800be86:	460c      	mov	r4, r1
 800be88:	2101      	movs	r1, #1
 800be8a:	f7ff ff07 	bl	800bc9c <_Balloc>
 800be8e:	4602      	mov	r2, r0
 800be90:	b928      	cbnz	r0, 800be9e <__i2b+0x1a>
 800be92:	4b05      	ldr	r3, [pc, #20]	@ (800bea8 <__i2b+0x24>)
 800be94:	4805      	ldr	r0, [pc, #20]	@ (800beac <__i2b+0x28>)
 800be96:	f240 1145 	movw	r1, #325	@ 0x145
 800be9a:	f000 fcad 	bl	800c7f8 <__assert_func>
 800be9e:	2301      	movs	r3, #1
 800bea0:	6144      	str	r4, [r0, #20]
 800bea2:	6103      	str	r3, [r0, #16]
 800bea4:	bd10      	pop	{r4, pc}
 800bea6:	bf00      	nop
 800bea8:	0800e314 	.word	0x0800e314
 800beac:	0800e325 	.word	0x0800e325

0800beb0 <__multiply>:
 800beb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb4:	4614      	mov	r4, r2
 800beb6:	690a      	ldr	r2, [r1, #16]
 800beb8:	6923      	ldr	r3, [r4, #16]
 800beba:	429a      	cmp	r2, r3
 800bebc:	bfa8      	it	ge
 800bebe:	4623      	movge	r3, r4
 800bec0:	460f      	mov	r7, r1
 800bec2:	bfa4      	itt	ge
 800bec4:	460c      	movge	r4, r1
 800bec6:	461f      	movge	r7, r3
 800bec8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800becc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bed0:	68a3      	ldr	r3, [r4, #8]
 800bed2:	6861      	ldr	r1, [r4, #4]
 800bed4:	eb0a 0609 	add.w	r6, sl, r9
 800bed8:	42b3      	cmp	r3, r6
 800beda:	b085      	sub	sp, #20
 800bedc:	bfb8      	it	lt
 800bede:	3101      	addlt	r1, #1
 800bee0:	f7ff fedc 	bl	800bc9c <_Balloc>
 800bee4:	b930      	cbnz	r0, 800bef4 <__multiply+0x44>
 800bee6:	4602      	mov	r2, r0
 800bee8:	4b44      	ldr	r3, [pc, #272]	@ (800bffc <__multiply+0x14c>)
 800beea:	4845      	ldr	r0, [pc, #276]	@ (800c000 <__multiply+0x150>)
 800beec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bef0:	f000 fc82 	bl	800c7f8 <__assert_func>
 800bef4:	f100 0514 	add.w	r5, r0, #20
 800bef8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800befc:	462b      	mov	r3, r5
 800befe:	2200      	movs	r2, #0
 800bf00:	4543      	cmp	r3, r8
 800bf02:	d321      	bcc.n	800bf48 <__multiply+0x98>
 800bf04:	f107 0114 	add.w	r1, r7, #20
 800bf08:	f104 0214 	add.w	r2, r4, #20
 800bf0c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bf10:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bf14:	9302      	str	r3, [sp, #8]
 800bf16:	1b13      	subs	r3, r2, r4
 800bf18:	3b15      	subs	r3, #21
 800bf1a:	f023 0303 	bic.w	r3, r3, #3
 800bf1e:	3304      	adds	r3, #4
 800bf20:	f104 0715 	add.w	r7, r4, #21
 800bf24:	42ba      	cmp	r2, r7
 800bf26:	bf38      	it	cc
 800bf28:	2304      	movcc	r3, #4
 800bf2a:	9301      	str	r3, [sp, #4]
 800bf2c:	9b02      	ldr	r3, [sp, #8]
 800bf2e:	9103      	str	r1, [sp, #12]
 800bf30:	428b      	cmp	r3, r1
 800bf32:	d80c      	bhi.n	800bf4e <__multiply+0x9e>
 800bf34:	2e00      	cmp	r6, #0
 800bf36:	dd03      	ble.n	800bf40 <__multiply+0x90>
 800bf38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d05b      	beq.n	800bff8 <__multiply+0x148>
 800bf40:	6106      	str	r6, [r0, #16]
 800bf42:	b005      	add	sp, #20
 800bf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf48:	f843 2b04 	str.w	r2, [r3], #4
 800bf4c:	e7d8      	b.n	800bf00 <__multiply+0x50>
 800bf4e:	f8b1 a000 	ldrh.w	sl, [r1]
 800bf52:	f1ba 0f00 	cmp.w	sl, #0
 800bf56:	d024      	beq.n	800bfa2 <__multiply+0xf2>
 800bf58:	f104 0e14 	add.w	lr, r4, #20
 800bf5c:	46a9      	mov	r9, r5
 800bf5e:	f04f 0c00 	mov.w	ip, #0
 800bf62:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf66:	f8d9 3000 	ldr.w	r3, [r9]
 800bf6a:	fa1f fb87 	uxth.w	fp, r7
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	fb0a 330b 	mla	r3, sl, fp, r3
 800bf74:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bf78:	f8d9 7000 	ldr.w	r7, [r9]
 800bf7c:	4463      	add	r3, ip
 800bf7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bf82:	fb0a c70b 	mla	r7, sl, fp, ip
 800bf86:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bf90:	4572      	cmp	r2, lr
 800bf92:	f849 3b04 	str.w	r3, [r9], #4
 800bf96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bf9a:	d8e2      	bhi.n	800bf62 <__multiply+0xb2>
 800bf9c:	9b01      	ldr	r3, [sp, #4]
 800bf9e:	f845 c003 	str.w	ip, [r5, r3]
 800bfa2:	9b03      	ldr	r3, [sp, #12]
 800bfa4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bfa8:	3104      	adds	r1, #4
 800bfaa:	f1b9 0f00 	cmp.w	r9, #0
 800bfae:	d021      	beq.n	800bff4 <__multiply+0x144>
 800bfb0:	682b      	ldr	r3, [r5, #0]
 800bfb2:	f104 0c14 	add.w	ip, r4, #20
 800bfb6:	46ae      	mov	lr, r5
 800bfb8:	f04f 0a00 	mov.w	sl, #0
 800bfbc:	f8bc b000 	ldrh.w	fp, [ip]
 800bfc0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bfc4:	fb09 770b 	mla	r7, r9, fp, r7
 800bfc8:	4457      	add	r7, sl
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bfd0:	f84e 3b04 	str.w	r3, [lr], #4
 800bfd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bfd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bfdc:	f8be 3000 	ldrh.w	r3, [lr]
 800bfe0:	fb09 330a 	mla	r3, r9, sl, r3
 800bfe4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bfe8:	4562      	cmp	r2, ip
 800bfea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bfee:	d8e5      	bhi.n	800bfbc <__multiply+0x10c>
 800bff0:	9f01      	ldr	r7, [sp, #4]
 800bff2:	51eb      	str	r3, [r5, r7]
 800bff4:	3504      	adds	r5, #4
 800bff6:	e799      	b.n	800bf2c <__multiply+0x7c>
 800bff8:	3e01      	subs	r6, #1
 800bffa:	e79b      	b.n	800bf34 <__multiply+0x84>
 800bffc:	0800e314 	.word	0x0800e314
 800c000:	0800e325 	.word	0x0800e325

0800c004 <__pow5mult>:
 800c004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c008:	4615      	mov	r5, r2
 800c00a:	f012 0203 	ands.w	r2, r2, #3
 800c00e:	4607      	mov	r7, r0
 800c010:	460e      	mov	r6, r1
 800c012:	d007      	beq.n	800c024 <__pow5mult+0x20>
 800c014:	4c25      	ldr	r4, [pc, #148]	@ (800c0ac <__pow5mult+0xa8>)
 800c016:	3a01      	subs	r2, #1
 800c018:	2300      	movs	r3, #0
 800c01a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c01e:	f7ff fe9f 	bl	800bd60 <__multadd>
 800c022:	4606      	mov	r6, r0
 800c024:	10ad      	asrs	r5, r5, #2
 800c026:	d03d      	beq.n	800c0a4 <__pow5mult+0xa0>
 800c028:	69fc      	ldr	r4, [r7, #28]
 800c02a:	b97c      	cbnz	r4, 800c04c <__pow5mult+0x48>
 800c02c:	2010      	movs	r0, #16
 800c02e:	f7fe f8d3 	bl	800a1d8 <malloc>
 800c032:	4602      	mov	r2, r0
 800c034:	61f8      	str	r0, [r7, #28]
 800c036:	b928      	cbnz	r0, 800c044 <__pow5mult+0x40>
 800c038:	4b1d      	ldr	r3, [pc, #116]	@ (800c0b0 <__pow5mult+0xac>)
 800c03a:	481e      	ldr	r0, [pc, #120]	@ (800c0b4 <__pow5mult+0xb0>)
 800c03c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c040:	f000 fbda 	bl	800c7f8 <__assert_func>
 800c044:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c048:	6004      	str	r4, [r0, #0]
 800c04a:	60c4      	str	r4, [r0, #12]
 800c04c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c050:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c054:	b94c      	cbnz	r4, 800c06a <__pow5mult+0x66>
 800c056:	f240 2171 	movw	r1, #625	@ 0x271
 800c05a:	4638      	mov	r0, r7
 800c05c:	f7ff ff12 	bl	800be84 <__i2b>
 800c060:	2300      	movs	r3, #0
 800c062:	f8c8 0008 	str.w	r0, [r8, #8]
 800c066:	4604      	mov	r4, r0
 800c068:	6003      	str	r3, [r0, #0]
 800c06a:	f04f 0900 	mov.w	r9, #0
 800c06e:	07eb      	lsls	r3, r5, #31
 800c070:	d50a      	bpl.n	800c088 <__pow5mult+0x84>
 800c072:	4631      	mov	r1, r6
 800c074:	4622      	mov	r2, r4
 800c076:	4638      	mov	r0, r7
 800c078:	f7ff ff1a 	bl	800beb0 <__multiply>
 800c07c:	4631      	mov	r1, r6
 800c07e:	4680      	mov	r8, r0
 800c080:	4638      	mov	r0, r7
 800c082:	f7ff fe4b 	bl	800bd1c <_Bfree>
 800c086:	4646      	mov	r6, r8
 800c088:	106d      	asrs	r5, r5, #1
 800c08a:	d00b      	beq.n	800c0a4 <__pow5mult+0xa0>
 800c08c:	6820      	ldr	r0, [r4, #0]
 800c08e:	b938      	cbnz	r0, 800c0a0 <__pow5mult+0x9c>
 800c090:	4622      	mov	r2, r4
 800c092:	4621      	mov	r1, r4
 800c094:	4638      	mov	r0, r7
 800c096:	f7ff ff0b 	bl	800beb0 <__multiply>
 800c09a:	6020      	str	r0, [r4, #0]
 800c09c:	f8c0 9000 	str.w	r9, [r0]
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	e7e4      	b.n	800c06e <__pow5mult+0x6a>
 800c0a4:	4630      	mov	r0, r6
 800c0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0aa:	bf00      	nop
 800c0ac:	0800e380 	.word	0x0800e380
 800c0b0:	0800e2a5 	.word	0x0800e2a5
 800c0b4:	0800e325 	.word	0x0800e325

0800c0b8 <__lshift>:
 800c0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0bc:	460c      	mov	r4, r1
 800c0be:	6849      	ldr	r1, [r1, #4]
 800c0c0:	6923      	ldr	r3, [r4, #16]
 800c0c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c0c6:	68a3      	ldr	r3, [r4, #8]
 800c0c8:	4607      	mov	r7, r0
 800c0ca:	4691      	mov	r9, r2
 800c0cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c0d0:	f108 0601 	add.w	r6, r8, #1
 800c0d4:	42b3      	cmp	r3, r6
 800c0d6:	db0b      	blt.n	800c0f0 <__lshift+0x38>
 800c0d8:	4638      	mov	r0, r7
 800c0da:	f7ff fddf 	bl	800bc9c <_Balloc>
 800c0de:	4605      	mov	r5, r0
 800c0e0:	b948      	cbnz	r0, 800c0f6 <__lshift+0x3e>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	4b28      	ldr	r3, [pc, #160]	@ (800c188 <__lshift+0xd0>)
 800c0e6:	4829      	ldr	r0, [pc, #164]	@ (800c18c <__lshift+0xd4>)
 800c0e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c0ec:	f000 fb84 	bl	800c7f8 <__assert_func>
 800c0f0:	3101      	adds	r1, #1
 800c0f2:	005b      	lsls	r3, r3, #1
 800c0f4:	e7ee      	b.n	800c0d4 <__lshift+0x1c>
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	f100 0114 	add.w	r1, r0, #20
 800c0fc:	f100 0210 	add.w	r2, r0, #16
 800c100:	4618      	mov	r0, r3
 800c102:	4553      	cmp	r3, sl
 800c104:	db33      	blt.n	800c16e <__lshift+0xb6>
 800c106:	6920      	ldr	r0, [r4, #16]
 800c108:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c10c:	f104 0314 	add.w	r3, r4, #20
 800c110:	f019 091f 	ands.w	r9, r9, #31
 800c114:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c118:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c11c:	d02b      	beq.n	800c176 <__lshift+0xbe>
 800c11e:	f1c9 0e20 	rsb	lr, r9, #32
 800c122:	468a      	mov	sl, r1
 800c124:	2200      	movs	r2, #0
 800c126:	6818      	ldr	r0, [r3, #0]
 800c128:	fa00 f009 	lsl.w	r0, r0, r9
 800c12c:	4310      	orrs	r0, r2
 800c12e:	f84a 0b04 	str.w	r0, [sl], #4
 800c132:	f853 2b04 	ldr.w	r2, [r3], #4
 800c136:	459c      	cmp	ip, r3
 800c138:	fa22 f20e 	lsr.w	r2, r2, lr
 800c13c:	d8f3      	bhi.n	800c126 <__lshift+0x6e>
 800c13e:	ebac 0304 	sub.w	r3, ip, r4
 800c142:	3b15      	subs	r3, #21
 800c144:	f023 0303 	bic.w	r3, r3, #3
 800c148:	3304      	adds	r3, #4
 800c14a:	f104 0015 	add.w	r0, r4, #21
 800c14e:	4584      	cmp	ip, r0
 800c150:	bf38      	it	cc
 800c152:	2304      	movcc	r3, #4
 800c154:	50ca      	str	r2, [r1, r3]
 800c156:	b10a      	cbz	r2, 800c15c <__lshift+0xa4>
 800c158:	f108 0602 	add.w	r6, r8, #2
 800c15c:	3e01      	subs	r6, #1
 800c15e:	4638      	mov	r0, r7
 800c160:	612e      	str	r6, [r5, #16]
 800c162:	4621      	mov	r1, r4
 800c164:	f7ff fdda 	bl	800bd1c <_Bfree>
 800c168:	4628      	mov	r0, r5
 800c16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c16e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c172:	3301      	adds	r3, #1
 800c174:	e7c5      	b.n	800c102 <__lshift+0x4a>
 800c176:	3904      	subs	r1, #4
 800c178:	f853 2b04 	ldr.w	r2, [r3], #4
 800c17c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c180:	459c      	cmp	ip, r3
 800c182:	d8f9      	bhi.n	800c178 <__lshift+0xc0>
 800c184:	e7ea      	b.n	800c15c <__lshift+0xa4>
 800c186:	bf00      	nop
 800c188:	0800e314 	.word	0x0800e314
 800c18c:	0800e325 	.word	0x0800e325

0800c190 <__mcmp>:
 800c190:	690a      	ldr	r2, [r1, #16]
 800c192:	4603      	mov	r3, r0
 800c194:	6900      	ldr	r0, [r0, #16]
 800c196:	1a80      	subs	r0, r0, r2
 800c198:	b530      	push	{r4, r5, lr}
 800c19a:	d10e      	bne.n	800c1ba <__mcmp+0x2a>
 800c19c:	3314      	adds	r3, #20
 800c19e:	3114      	adds	r1, #20
 800c1a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c1a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c1a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c1ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c1b0:	4295      	cmp	r5, r2
 800c1b2:	d003      	beq.n	800c1bc <__mcmp+0x2c>
 800c1b4:	d205      	bcs.n	800c1c2 <__mcmp+0x32>
 800c1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ba:	bd30      	pop	{r4, r5, pc}
 800c1bc:	42a3      	cmp	r3, r4
 800c1be:	d3f3      	bcc.n	800c1a8 <__mcmp+0x18>
 800c1c0:	e7fb      	b.n	800c1ba <__mcmp+0x2a>
 800c1c2:	2001      	movs	r0, #1
 800c1c4:	e7f9      	b.n	800c1ba <__mcmp+0x2a>
	...

0800c1c8 <__mdiff>:
 800c1c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1cc:	4689      	mov	r9, r1
 800c1ce:	4606      	mov	r6, r0
 800c1d0:	4611      	mov	r1, r2
 800c1d2:	4648      	mov	r0, r9
 800c1d4:	4614      	mov	r4, r2
 800c1d6:	f7ff ffdb 	bl	800c190 <__mcmp>
 800c1da:	1e05      	subs	r5, r0, #0
 800c1dc:	d112      	bne.n	800c204 <__mdiff+0x3c>
 800c1de:	4629      	mov	r1, r5
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	f7ff fd5b 	bl	800bc9c <_Balloc>
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	b928      	cbnz	r0, 800c1f6 <__mdiff+0x2e>
 800c1ea:	4b3f      	ldr	r3, [pc, #252]	@ (800c2e8 <__mdiff+0x120>)
 800c1ec:	f240 2137 	movw	r1, #567	@ 0x237
 800c1f0:	483e      	ldr	r0, [pc, #248]	@ (800c2ec <__mdiff+0x124>)
 800c1f2:	f000 fb01 	bl	800c7f8 <__assert_func>
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c1fc:	4610      	mov	r0, r2
 800c1fe:	b003      	add	sp, #12
 800c200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c204:	bfbc      	itt	lt
 800c206:	464b      	movlt	r3, r9
 800c208:	46a1      	movlt	r9, r4
 800c20a:	4630      	mov	r0, r6
 800c20c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c210:	bfba      	itte	lt
 800c212:	461c      	movlt	r4, r3
 800c214:	2501      	movlt	r5, #1
 800c216:	2500      	movge	r5, #0
 800c218:	f7ff fd40 	bl	800bc9c <_Balloc>
 800c21c:	4602      	mov	r2, r0
 800c21e:	b918      	cbnz	r0, 800c228 <__mdiff+0x60>
 800c220:	4b31      	ldr	r3, [pc, #196]	@ (800c2e8 <__mdiff+0x120>)
 800c222:	f240 2145 	movw	r1, #581	@ 0x245
 800c226:	e7e3      	b.n	800c1f0 <__mdiff+0x28>
 800c228:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c22c:	6926      	ldr	r6, [r4, #16]
 800c22e:	60c5      	str	r5, [r0, #12]
 800c230:	f109 0310 	add.w	r3, r9, #16
 800c234:	f109 0514 	add.w	r5, r9, #20
 800c238:	f104 0e14 	add.w	lr, r4, #20
 800c23c:	f100 0b14 	add.w	fp, r0, #20
 800c240:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c244:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c248:	9301      	str	r3, [sp, #4]
 800c24a:	46d9      	mov	r9, fp
 800c24c:	f04f 0c00 	mov.w	ip, #0
 800c250:	9b01      	ldr	r3, [sp, #4]
 800c252:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c256:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c25a:	9301      	str	r3, [sp, #4]
 800c25c:	fa1f f38a 	uxth.w	r3, sl
 800c260:	4619      	mov	r1, r3
 800c262:	b283      	uxth	r3, r0
 800c264:	1acb      	subs	r3, r1, r3
 800c266:	0c00      	lsrs	r0, r0, #16
 800c268:	4463      	add	r3, ip
 800c26a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c26e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c272:	b29b      	uxth	r3, r3
 800c274:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c278:	4576      	cmp	r6, lr
 800c27a:	f849 3b04 	str.w	r3, [r9], #4
 800c27e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c282:	d8e5      	bhi.n	800c250 <__mdiff+0x88>
 800c284:	1b33      	subs	r3, r6, r4
 800c286:	3b15      	subs	r3, #21
 800c288:	f023 0303 	bic.w	r3, r3, #3
 800c28c:	3415      	adds	r4, #21
 800c28e:	3304      	adds	r3, #4
 800c290:	42a6      	cmp	r6, r4
 800c292:	bf38      	it	cc
 800c294:	2304      	movcc	r3, #4
 800c296:	441d      	add	r5, r3
 800c298:	445b      	add	r3, fp
 800c29a:	461e      	mov	r6, r3
 800c29c:	462c      	mov	r4, r5
 800c29e:	4544      	cmp	r4, r8
 800c2a0:	d30e      	bcc.n	800c2c0 <__mdiff+0xf8>
 800c2a2:	f108 0103 	add.w	r1, r8, #3
 800c2a6:	1b49      	subs	r1, r1, r5
 800c2a8:	f021 0103 	bic.w	r1, r1, #3
 800c2ac:	3d03      	subs	r5, #3
 800c2ae:	45a8      	cmp	r8, r5
 800c2b0:	bf38      	it	cc
 800c2b2:	2100      	movcc	r1, #0
 800c2b4:	440b      	add	r3, r1
 800c2b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c2ba:	b191      	cbz	r1, 800c2e2 <__mdiff+0x11a>
 800c2bc:	6117      	str	r7, [r2, #16]
 800c2be:	e79d      	b.n	800c1fc <__mdiff+0x34>
 800c2c0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c2c4:	46e6      	mov	lr, ip
 800c2c6:	0c08      	lsrs	r0, r1, #16
 800c2c8:	fa1c fc81 	uxtah	ip, ip, r1
 800c2cc:	4471      	add	r1, lr
 800c2ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c2d2:	b289      	uxth	r1, r1
 800c2d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c2d8:	f846 1b04 	str.w	r1, [r6], #4
 800c2dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c2e0:	e7dd      	b.n	800c29e <__mdiff+0xd6>
 800c2e2:	3f01      	subs	r7, #1
 800c2e4:	e7e7      	b.n	800c2b6 <__mdiff+0xee>
 800c2e6:	bf00      	nop
 800c2e8:	0800e314 	.word	0x0800e314
 800c2ec:	0800e325 	.word	0x0800e325

0800c2f0 <__d2b>:
 800c2f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c2f4:	460f      	mov	r7, r1
 800c2f6:	2101      	movs	r1, #1
 800c2f8:	ec59 8b10 	vmov	r8, r9, d0
 800c2fc:	4616      	mov	r6, r2
 800c2fe:	f7ff fccd 	bl	800bc9c <_Balloc>
 800c302:	4604      	mov	r4, r0
 800c304:	b930      	cbnz	r0, 800c314 <__d2b+0x24>
 800c306:	4602      	mov	r2, r0
 800c308:	4b23      	ldr	r3, [pc, #140]	@ (800c398 <__d2b+0xa8>)
 800c30a:	4824      	ldr	r0, [pc, #144]	@ (800c39c <__d2b+0xac>)
 800c30c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c310:	f000 fa72 	bl	800c7f8 <__assert_func>
 800c314:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c318:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c31c:	b10d      	cbz	r5, 800c322 <__d2b+0x32>
 800c31e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c322:	9301      	str	r3, [sp, #4]
 800c324:	f1b8 0300 	subs.w	r3, r8, #0
 800c328:	d023      	beq.n	800c372 <__d2b+0x82>
 800c32a:	4668      	mov	r0, sp
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	f7ff fd7c 	bl	800be2a <__lo0bits>
 800c332:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c336:	b1d0      	cbz	r0, 800c36e <__d2b+0x7e>
 800c338:	f1c0 0320 	rsb	r3, r0, #32
 800c33c:	fa02 f303 	lsl.w	r3, r2, r3
 800c340:	430b      	orrs	r3, r1
 800c342:	40c2      	lsrs	r2, r0
 800c344:	6163      	str	r3, [r4, #20]
 800c346:	9201      	str	r2, [sp, #4]
 800c348:	9b01      	ldr	r3, [sp, #4]
 800c34a:	61a3      	str	r3, [r4, #24]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	bf0c      	ite	eq
 800c350:	2201      	moveq	r2, #1
 800c352:	2202      	movne	r2, #2
 800c354:	6122      	str	r2, [r4, #16]
 800c356:	b1a5      	cbz	r5, 800c382 <__d2b+0x92>
 800c358:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c35c:	4405      	add	r5, r0
 800c35e:	603d      	str	r5, [r7, #0]
 800c360:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c364:	6030      	str	r0, [r6, #0]
 800c366:	4620      	mov	r0, r4
 800c368:	b003      	add	sp, #12
 800c36a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c36e:	6161      	str	r1, [r4, #20]
 800c370:	e7ea      	b.n	800c348 <__d2b+0x58>
 800c372:	a801      	add	r0, sp, #4
 800c374:	f7ff fd59 	bl	800be2a <__lo0bits>
 800c378:	9b01      	ldr	r3, [sp, #4]
 800c37a:	6163      	str	r3, [r4, #20]
 800c37c:	3020      	adds	r0, #32
 800c37e:	2201      	movs	r2, #1
 800c380:	e7e8      	b.n	800c354 <__d2b+0x64>
 800c382:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c386:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c38a:	6038      	str	r0, [r7, #0]
 800c38c:	6918      	ldr	r0, [r3, #16]
 800c38e:	f7ff fd2d 	bl	800bdec <__hi0bits>
 800c392:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c396:	e7e5      	b.n	800c364 <__d2b+0x74>
 800c398:	0800e314 	.word	0x0800e314
 800c39c:	0800e325 	.word	0x0800e325

0800c3a0 <__ssputs_r>:
 800c3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a4:	688e      	ldr	r6, [r1, #8]
 800c3a6:	461f      	mov	r7, r3
 800c3a8:	42be      	cmp	r6, r7
 800c3aa:	680b      	ldr	r3, [r1, #0]
 800c3ac:	4682      	mov	sl, r0
 800c3ae:	460c      	mov	r4, r1
 800c3b0:	4690      	mov	r8, r2
 800c3b2:	d82d      	bhi.n	800c410 <__ssputs_r+0x70>
 800c3b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c3b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c3bc:	d026      	beq.n	800c40c <__ssputs_r+0x6c>
 800c3be:	6965      	ldr	r5, [r4, #20]
 800c3c0:	6909      	ldr	r1, [r1, #16]
 800c3c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3c6:	eba3 0901 	sub.w	r9, r3, r1
 800c3ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3ce:	1c7b      	adds	r3, r7, #1
 800c3d0:	444b      	add	r3, r9
 800c3d2:	106d      	asrs	r5, r5, #1
 800c3d4:	429d      	cmp	r5, r3
 800c3d6:	bf38      	it	cc
 800c3d8:	461d      	movcc	r5, r3
 800c3da:	0553      	lsls	r3, r2, #21
 800c3dc:	d527      	bpl.n	800c42e <__ssputs_r+0x8e>
 800c3de:	4629      	mov	r1, r5
 800c3e0:	f7fd ff2c 	bl	800a23c <_malloc_r>
 800c3e4:	4606      	mov	r6, r0
 800c3e6:	b360      	cbz	r0, 800c442 <__ssputs_r+0xa2>
 800c3e8:	6921      	ldr	r1, [r4, #16]
 800c3ea:	464a      	mov	r2, r9
 800c3ec:	f000 f9f6 	bl	800c7dc <memcpy>
 800c3f0:	89a3      	ldrh	r3, [r4, #12]
 800c3f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c3f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3fa:	81a3      	strh	r3, [r4, #12]
 800c3fc:	6126      	str	r6, [r4, #16]
 800c3fe:	6165      	str	r5, [r4, #20]
 800c400:	444e      	add	r6, r9
 800c402:	eba5 0509 	sub.w	r5, r5, r9
 800c406:	6026      	str	r6, [r4, #0]
 800c408:	60a5      	str	r5, [r4, #8]
 800c40a:	463e      	mov	r6, r7
 800c40c:	42be      	cmp	r6, r7
 800c40e:	d900      	bls.n	800c412 <__ssputs_r+0x72>
 800c410:	463e      	mov	r6, r7
 800c412:	6820      	ldr	r0, [r4, #0]
 800c414:	4632      	mov	r2, r6
 800c416:	4641      	mov	r1, r8
 800c418:	f000 f9c6 	bl	800c7a8 <memmove>
 800c41c:	68a3      	ldr	r3, [r4, #8]
 800c41e:	1b9b      	subs	r3, r3, r6
 800c420:	60a3      	str	r3, [r4, #8]
 800c422:	6823      	ldr	r3, [r4, #0]
 800c424:	4433      	add	r3, r6
 800c426:	6023      	str	r3, [r4, #0]
 800c428:	2000      	movs	r0, #0
 800c42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c42e:	462a      	mov	r2, r5
 800c430:	f000 fa26 	bl	800c880 <_realloc_r>
 800c434:	4606      	mov	r6, r0
 800c436:	2800      	cmp	r0, #0
 800c438:	d1e0      	bne.n	800c3fc <__ssputs_r+0x5c>
 800c43a:	6921      	ldr	r1, [r4, #16]
 800c43c:	4650      	mov	r0, sl
 800c43e:	f7ff fbe3 	bl	800bc08 <_free_r>
 800c442:	230c      	movs	r3, #12
 800c444:	f8ca 3000 	str.w	r3, [sl]
 800c448:	89a3      	ldrh	r3, [r4, #12]
 800c44a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c44e:	81a3      	strh	r3, [r4, #12]
 800c450:	f04f 30ff 	mov.w	r0, #4294967295
 800c454:	e7e9      	b.n	800c42a <__ssputs_r+0x8a>
	...

0800c458 <_svfiprintf_r>:
 800c458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c45c:	4698      	mov	r8, r3
 800c45e:	898b      	ldrh	r3, [r1, #12]
 800c460:	061b      	lsls	r3, r3, #24
 800c462:	b09d      	sub	sp, #116	@ 0x74
 800c464:	4607      	mov	r7, r0
 800c466:	460d      	mov	r5, r1
 800c468:	4614      	mov	r4, r2
 800c46a:	d510      	bpl.n	800c48e <_svfiprintf_r+0x36>
 800c46c:	690b      	ldr	r3, [r1, #16]
 800c46e:	b973      	cbnz	r3, 800c48e <_svfiprintf_r+0x36>
 800c470:	2140      	movs	r1, #64	@ 0x40
 800c472:	f7fd fee3 	bl	800a23c <_malloc_r>
 800c476:	6028      	str	r0, [r5, #0]
 800c478:	6128      	str	r0, [r5, #16]
 800c47a:	b930      	cbnz	r0, 800c48a <_svfiprintf_r+0x32>
 800c47c:	230c      	movs	r3, #12
 800c47e:	603b      	str	r3, [r7, #0]
 800c480:	f04f 30ff 	mov.w	r0, #4294967295
 800c484:	b01d      	add	sp, #116	@ 0x74
 800c486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c48a:	2340      	movs	r3, #64	@ 0x40
 800c48c:	616b      	str	r3, [r5, #20]
 800c48e:	2300      	movs	r3, #0
 800c490:	9309      	str	r3, [sp, #36]	@ 0x24
 800c492:	2320      	movs	r3, #32
 800c494:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c498:	f8cd 800c 	str.w	r8, [sp, #12]
 800c49c:	2330      	movs	r3, #48	@ 0x30
 800c49e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c63c <_svfiprintf_r+0x1e4>
 800c4a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4a6:	f04f 0901 	mov.w	r9, #1
 800c4aa:	4623      	mov	r3, r4
 800c4ac:	469a      	mov	sl, r3
 800c4ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4b2:	b10a      	cbz	r2, 800c4b8 <_svfiprintf_r+0x60>
 800c4b4:	2a25      	cmp	r2, #37	@ 0x25
 800c4b6:	d1f9      	bne.n	800c4ac <_svfiprintf_r+0x54>
 800c4b8:	ebba 0b04 	subs.w	fp, sl, r4
 800c4bc:	d00b      	beq.n	800c4d6 <_svfiprintf_r+0x7e>
 800c4be:	465b      	mov	r3, fp
 800c4c0:	4622      	mov	r2, r4
 800c4c2:	4629      	mov	r1, r5
 800c4c4:	4638      	mov	r0, r7
 800c4c6:	f7ff ff6b 	bl	800c3a0 <__ssputs_r>
 800c4ca:	3001      	adds	r0, #1
 800c4cc:	f000 80a7 	beq.w	800c61e <_svfiprintf_r+0x1c6>
 800c4d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4d2:	445a      	add	r2, fp
 800c4d4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4d6:	f89a 3000 	ldrb.w	r3, [sl]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f000 809f 	beq.w	800c61e <_svfiprintf_r+0x1c6>
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4ea:	f10a 0a01 	add.w	sl, sl, #1
 800c4ee:	9304      	str	r3, [sp, #16]
 800c4f0:	9307      	str	r3, [sp, #28]
 800c4f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c4f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800c4f8:	4654      	mov	r4, sl
 800c4fa:	2205      	movs	r2, #5
 800c4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c500:	484e      	ldr	r0, [pc, #312]	@ (800c63c <_svfiprintf_r+0x1e4>)
 800c502:	f7f3 fe8d 	bl	8000220 <memchr>
 800c506:	9a04      	ldr	r2, [sp, #16]
 800c508:	b9d8      	cbnz	r0, 800c542 <_svfiprintf_r+0xea>
 800c50a:	06d0      	lsls	r0, r2, #27
 800c50c:	bf44      	itt	mi
 800c50e:	2320      	movmi	r3, #32
 800c510:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c514:	0711      	lsls	r1, r2, #28
 800c516:	bf44      	itt	mi
 800c518:	232b      	movmi	r3, #43	@ 0x2b
 800c51a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c51e:	f89a 3000 	ldrb.w	r3, [sl]
 800c522:	2b2a      	cmp	r3, #42	@ 0x2a
 800c524:	d015      	beq.n	800c552 <_svfiprintf_r+0xfa>
 800c526:	9a07      	ldr	r2, [sp, #28]
 800c528:	4654      	mov	r4, sl
 800c52a:	2000      	movs	r0, #0
 800c52c:	f04f 0c0a 	mov.w	ip, #10
 800c530:	4621      	mov	r1, r4
 800c532:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c536:	3b30      	subs	r3, #48	@ 0x30
 800c538:	2b09      	cmp	r3, #9
 800c53a:	d94b      	bls.n	800c5d4 <_svfiprintf_r+0x17c>
 800c53c:	b1b0      	cbz	r0, 800c56c <_svfiprintf_r+0x114>
 800c53e:	9207      	str	r2, [sp, #28]
 800c540:	e014      	b.n	800c56c <_svfiprintf_r+0x114>
 800c542:	eba0 0308 	sub.w	r3, r0, r8
 800c546:	fa09 f303 	lsl.w	r3, r9, r3
 800c54a:	4313      	orrs	r3, r2
 800c54c:	9304      	str	r3, [sp, #16]
 800c54e:	46a2      	mov	sl, r4
 800c550:	e7d2      	b.n	800c4f8 <_svfiprintf_r+0xa0>
 800c552:	9b03      	ldr	r3, [sp, #12]
 800c554:	1d19      	adds	r1, r3, #4
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	9103      	str	r1, [sp, #12]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	bfbb      	ittet	lt
 800c55e:	425b      	neglt	r3, r3
 800c560:	f042 0202 	orrlt.w	r2, r2, #2
 800c564:	9307      	strge	r3, [sp, #28]
 800c566:	9307      	strlt	r3, [sp, #28]
 800c568:	bfb8      	it	lt
 800c56a:	9204      	strlt	r2, [sp, #16]
 800c56c:	7823      	ldrb	r3, [r4, #0]
 800c56e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c570:	d10a      	bne.n	800c588 <_svfiprintf_r+0x130>
 800c572:	7863      	ldrb	r3, [r4, #1]
 800c574:	2b2a      	cmp	r3, #42	@ 0x2a
 800c576:	d132      	bne.n	800c5de <_svfiprintf_r+0x186>
 800c578:	9b03      	ldr	r3, [sp, #12]
 800c57a:	1d1a      	adds	r2, r3, #4
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	9203      	str	r2, [sp, #12]
 800c580:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c584:	3402      	adds	r4, #2
 800c586:	9305      	str	r3, [sp, #20]
 800c588:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c64c <_svfiprintf_r+0x1f4>
 800c58c:	7821      	ldrb	r1, [r4, #0]
 800c58e:	2203      	movs	r2, #3
 800c590:	4650      	mov	r0, sl
 800c592:	f7f3 fe45 	bl	8000220 <memchr>
 800c596:	b138      	cbz	r0, 800c5a8 <_svfiprintf_r+0x150>
 800c598:	9b04      	ldr	r3, [sp, #16]
 800c59a:	eba0 000a 	sub.w	r0, r0, sl
 800c59e:	2240      	movs	r2, #64	@ 0x40
 800c5a0:	4082      	lsls	r2, r0
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	3401      	adds	r4, #1
 800c5a6:	9304      	str	r3, [sp, #16]
 800c5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ac:	4824      	ldr	r0, [pc, #144]	@ (800c640 <_svfiprintf_r+0x1e8>)
 800c5ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c5b2:	2206      	movs	r2, #6
 800c5b4:	f7f3 fe34 	bl	8000220 <memchr>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d036      	beq.n	800c62a <_svfiprintf_r+0x1d2>
 800c5bc:	4b21      	ldr	r3, [pc, #132]	@ (800c644 <_svfiprintf_r+0x1ec>)
 800c5be:	bb1b      	cbnz	r3, 800c608 <_svfiprintf_r+0x1b0>
 800c5c0:	9b03      	ldr	r3, [sp, #12]
 800c5c2:	3307      	adds	r3, #7
 800c5c4:	f023 0307 	bic.w	r3, r3, #7
 800c5c8:	3308      	adds	r3, #8
 800c5ca:	9303      	str	r3, [sp, #12]
 800c5cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5ce:	4433      	add	r3, r6
 800c5d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5d2:	e76a      	b.n	800c4aa <_svfiprintf_r+0x52>
 800c5d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5d8:	460c      	mov	r4, r1
 800c5da:	2001      	movs	r0, #1
 800c5dc:	e7a8      	b.n	800c530 <_svfiprintf_r+0xd8>
 800c5de:	2300      	movs	r3, #0
 800c5e0:	3401      	adds	r4, #1
 800c5e2:	9305      	str	r3, [sp, #20]
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	f04f 0c0a 	mov.w	ip, #10
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5f0:	3a30      	subs	r2, #48	@ 0x30
 800c5f2:	2a09      	cmp	r2, #9
 800c5f4:	d903      	bls.n	800c5fe <_svfiprintf_r+0x1a6>
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d0c6      	beq.n	800c588 <_svfiprintf_r+0x130>
 800c5fa:	9105      	str	r1, [sp, #20]
 800c5fc:	e7c4      	b.n	800c588 <_svfiprintf_r+0x130>
 800c5fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800c602:	4604      	mov	r4, r0
 800c604:	2301      	movs	r3, #1
 800c606:	e7f0      	b.n	800c5ea <_svfiprintf_r+0x192>
 800c608:	ab03      	add	r3, sp, #12
 800c60a:	9300      	str	r3, [sp, #0]
 800c60c:	462a      	mov	r2, r5
 800c60e:	4b0e      	ldr	r3, [pc, #56]	@ (800c648 <_svfiprintf_r+0x1f0>)
 800c610:	a904      	add	r1, sp, #16
 800c612:	4638      	mov	r0, r7
 800c614:	f7fd ff3e 	bl	800a494 <_printf_float>
 800c618:	1c42      	adds	r2, r0, #1
 800c61a:	4606      	mov	r6, r0
 800c61c:	d1d6      	bne.n	800c5cc <_svfiprintf_r+0x174>
 800c61e:	89ab      	ldrh	r3, [r5, #12]
 800c620:	065b      	lsls	r3, r3, #25
 800c622:	f53f af2d 	bmi.w	800c480 <_svfiprintf_r+0x28>
 800c626:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c628:	e72c      	b.n	800c484 <_svfiprintf_r+0x2c>
 800c62a:	ab03      	add	r3, sp, #12
 800c62c:	9300      	str	r3, [sp, #0]
 800c62e:	462a      	mov	r2, r5
 800c630:	4b05      	ldr	r3, [pc, #20]	@ (800c648 <_svfiprintf_r+0x1f0>)
 800c632:	a904      	add	r1, sp, #16
 800c634:	4638      	mov	r0, r7
 800c636:	f7fe f9c5 	bl	800a9c4 <_printf_i>
 800c63a:	e7ed      	b.n	800c618 <_svfiprintf_r+0x1c0>
 800c63c:	0800e480 	.word	0x0800e480
 800c640:	0800e48a 	.word	0x0800e48a
 800c644:	0800a495 	.word	0x0800a495
 800c648:	0800c3a1 	.word	0x0800c3a1
 800c64c:	0800e486 	.word	0x0800e486

0800c650 <__sflush_r>:
 800c650:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c658:	0716      	lsls	r6, r2, #28
 800c65a:	4605      	mov	r5, r0
 800c65c:	460c      	mov	r4, r1
 800c65e:	d454      	bmi.n	800c70a <__sflush_r+0xba>
 800c660:	684b      	ldr	r3, [r1, #4]
 800c662:	2b00      	cmp	r3, #0
 800c664:	dc02      	bgt.n	800c66c <__sflush_r+0x1c>
 800c666:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c668:	2b00      	cmp	r3, #0
 800c66a:	dd48      	ble.n	800c6fe <__sflush_r+0xae>
 800c66c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c66e:	2e00      	cmp	r6, #0
 800c670:	d045      	beq.n	800c6fe <__sflush_r+0xae>
 800c672:	2300      	movs	r3, #0
 800c674:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c678:	682f      	ldr	r7, [r5, #0]
 800c67a:	6a21      	ldr	r1, [r4, #32]
 800c67c:	602b      	str	r3, [r5, #0]
 800c67e:	d030      	beq.n	800c6e2 <__sflush_r+0x92>
 800c680:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c682:	89a3      	ldrh	r3, [r4, #12]
 800c684:	0759      	lsls	r1, r3, #29
 800c686:	d505      	bpl.n	800c694 <__sflush_r+0x44>
 800c688:	6863      	ldr	r3, [r4, #4]
 800c68a:	1ad2      	subs	r2, r2, r3
 800c68c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c68e:	b10b      	cbz	r3, 800c694 <__sflush_r+0x44>
 800c690:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c692:	1ad2      	subs	r2, r2, r3
 800c694:	2300      	movs	r3, #0
 800c696:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c698:	6a21      	ldr	r1, [r4, #32]
 800c69a:	4628      	mov	r0, r5
 800c69c:	47b0      	blx	r6
 800c69e:	1c43      	adds	r3, r0, #1
 800c6a0:	89a3      	ldrh	r3, [r4, #12]
 800c6a2:	d106      	bne.n	800c6b2 <__sflush_r+0x62>
 800c6a4:	6829      	ldr	r1, [r5, #0]
 800c6a6:	291d      	cmp	r1, #29
 800c6a8:	d82b      	bhi.n	800c702 <__sflush_r+0xb2>
 800c6aa:	4a2a      	ldr	r2, [pc, #168]	@ (800c754 <__sflush_r+0x104>)
 800c6ac:	410a      	asrs	r2, r1
 800c6ae:	07d6      	lsls	r6, r2, #31
 800c6b0:	d427      	bmi.n	800c702 <__sflush_r+0xb2>
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	6062      	str	r2, [r4, #4]
 800c6b6:	04d9      	lsls	r1, r3, #19
 800c6b8:	6922      	ldr	r2, [r4, #16]
 800c6ba:	6022      	str	r2, [r4, #0]
 800c6bc:	d504      	bpl.n	800c6c8 <__sflush_r+0x78>
 800c6be:	1c42      	adds	r2, r0, #1
 800c6c0:	d101      	bne.n	800c6c6 <__sflush_r+0x76>
 800c6c2:	682b      	ldr	r3, [r5, #0]
 800c6c4:	b903      	cbnz	r3, 800c6c8 <__sflush_r+0x78>
 800c6c6:	6560      	str	r0, [r4, #84]	@ 0x54
 800c6c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c6ca:	602f      	str	r7, [r5, #0]
 800c6cc:	b1b9      	cbz	r1, 800c6fe <__sflush_r+0xae>
 800c6ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c6d2:	4299      	cmp	r1, r3
 800c6d4:	d002      	beq.n	800c6dc <__sflush_r+0x8c>
 800c6d6:	4628      	mov	r0, r5
 800c6d8:	f7ff fa96 	bl	800bc08 <_free_r>
 800c6dc:	2300      	movs	r3, #0
 800c6de:	6363      	str	r3, [r4, #52]	@ 0x34
 800c6e0:	e00d      	b.n	800c6fe <__sflush_r+0xae>
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	4628      	mov	r0, r5
 800c6e6:	47b0      	blx	r6
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	1c50      	adds	r0, r2, #1
 800c6ec:	d1c9      	bne.n	800c682 <__sflush_r+0x32>
 800c6ee:	682b      	ldr	r3, [r5, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d0c6      	beq.n	800c682 <__sflush_r+0x32>
 800c6f4:	2b1d      	cmp	r3, #29
 800c6f6:	d001      	beq.n	800c6fc <__sflush_r+0xac>
 800c6f8:	2b16      	cmp	r3, #22
 800c6fa:	d11e      	bne.n	800c73a <__sflush_r+0xea>
 800c6fc:	602f      	str	r7, [r5, #0]
 800c6fe:	2000      	movs	r0, #0
 800c700:	e022      	b.n	800c748 <__sflush_r+0xf8>
 800c702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c706:	b21b      	sxth	r3, r3
 800c708:	e01b      	b.n	800c742 <__sflush_r+0xf2>
 800c70a:	690f      	ldr	r7, [r1, #16]
 800c70c:	2f00      	cmp	r7, #0
 800c70e:	d0f6      	beq.n	800c6fe <__sflush_r+0xae>
 800c710:	0793      	lsls	r3, r2, #30
 800c712:	680e      	ldr	r6, [r1, #0]
 800c714:	bf08      	it	eq
 800c716:	694b      	ldreq	r3, [r1, #20]
 800c718:	600f      	str	r7, [r1, #0]
 800c71a:	bf18      	it	ne
 800c71c:	2300      	movne	r3, #0
 800c71e:	eba6 0807 	sub.w	r8, r6, r7
 800c722:	608b      	str	r3, [r1, #8]
 800c724:	f1b8 0f00 	cmp.w	r8, #0
 800c728:	dde9      	ble.n	800c6fe <__sflush_r+0xae>
 800c72a:	6a21      	ldr	r1, [r4, #32]
 800c72c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c72e:	4643      	mov	r3, r8
 800c730:	463a      	mov	r2, r7
 800c732:	4628      	mov	r0, r5
 800c734:	47b0      	blx	r6
 800c736:	2800      	cmp	r0, #0
 800c738:	dc08      	bgt.n	800c74c <__sflush_r+0xfc>
 800c73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c73e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c742:	81a3      	strh	r3, [r4, #12]
 800c744:	f04f 30ff 	mov.w	r0, #4294967295
 800c748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c74c:	4407      	add	r7, r0
 800c74e:	eba8 0800 	sub.w	r8, r8, r0
 800c752:	e7e7      	b.n	800c724 <__sflush_r+0xd4>
 800c754:	dfbffffe 	.word	0xdfbffffe

0800c758 <_fflush_r>:
 800c758:	b538      	push	{r3, r4, r5, lr}
 800c75a:	690b      	ldr	r3, [r1, #16]
 800c75c:	4605      	mov	r5, r0
 800c75e:	460c      	mov	r4, r1
 800c760:	b913      	cbnz	r3, 800c768 <_fflush_r+0x10>
 800c762:	2500      	movs	r5, #0
 800c764:	4628      	mov	r0, r5
 800c766:	bd38      	pop	{r3, r4, r5, pc}
 800c768:	b118      	cbz	r0, 800c772 <_fflush_r+0x1a>
 800c76a:	6a03      	ldr	r3, [r0, #32]
 800c76c:	b90b      	cbnz	r3, 800c772 <_fflush_r+0x1a>
 800c76e:	f7fe fad5 	bl	800ad1c <__sinit>
 800c772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d0f3      	beq.n	800c762 <_fflush_r+0xa>
 800c77a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c77c:	07d0      	lsls	r0, r2, #31
 800c77e:	d404      	bmi.n	800c78a <_fflush_r+0x32>
 800c780:	0599      	lsls	r1, r3, #22
 800c782:	d402      	bmi.n	800c78a <_fflush_r+0x32>
 800c784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c786:	f7fe fbf0 	bl	800af6a <__retarget_lock_acquire_recursive>
 800c78a:	4628      	mov	r0, r5
 800c78c:	4621      	mov	r1, r4
 800c78e:	f7ff ff5f 	bl	800c650 <__sflush_r>
 800c792:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c794:	07da      	lsls	r2, r3, #31
 800c796:	4605      	mov	r5, r0
 800c798:	d4e4      	bmi.n	800c764 <_fflush_r+0xc>
 800c79a:	89a3      	ldrh	r3, [r4, #12]
 800c79c:	059b      	lsls	r3, r3, #22
 800c79e:	d4e1      	bmi.n	800c764 <_fflush_r+0xc>
 800c7a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7a2:	f7fe fbe3 	bl	800af6c <__retarget_lock_release_recursive>
 800c7a6:	e7dd      	b.n	800c764 <_fflush_r+0xc>

0800c7a8 <memmove>:
 800c7a8:	4288      	cmp	r0, r1
 800c7aa:	b510      	push	{r4, lr}
 800c7ac:	eb01 0402 	add.w	r4, r1, r2
 800c7b0:	d902      	bls.n	800c7b8 <memmove+0x10>
 800c7b2:	4284      	cmp	r4, r0
 800c7b4:	4623      	mov	r3, r4
 800c7b6:	d807      	bhi.n	800c7c8 <memmove+0x20>
 800c7b8:	1e43      	subs	r3, r0, #1
 800c7ba:	42a1      	cmp	r1, r4
 800c7bc:	d008      	beq.n	800c7d0 <memmove+0x28>
 800c7be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c7c6:	e7f8      	b.n	800c7ba <memmove+0x12>
 800c7c8:	4402      	add	r2, r0
 800c7ca:	4601      	mov	r1, r0
 800c7cc:	428a      	cmp	r2, r1
 800c7ce:	d100      	bne.n	800c7d2 <memmove+0x2a>
 800c7d0:	bd10      	pop	{r4, pc}
 800c7d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c7da:	e7f7      	b.n	800c7cc <memmove+0x24>

0800c7dc <memcpy>:
 800c7dc:	440a      	add	r2, r1
 800c7de:	4291      	cmp	r1, r2
 800c7e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7e4:	d100      	bne.n	800c7e8 <memcpy+0xc>
 800c7e6:	4770      	bx	lr
 800c7e8:	b510      	push	{r4, lr}
 800c7ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7f2:	4291      	cmp	r1, r2
 800c7f4:	d1f9      	bne.n	800c7ea <memcpy+0xe>
 800c7f6:	bd10      	pop	{r4, pc}

0800c7f8 <__assert_func>:
 800c7f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7fa:	4614      	mov	r4, r2
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	4b09      	ldr	r3, [pc, #36]	@ (800c824 <__assert_func+0x2c>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4605      	mov	r5, r0
 800c804:	68d8      	ldr	r0, [r3, #12]
 800c806:	b954      	cbnz	r4, 800c81e <__assert_func+0x26>
 800c808:	4b07      	ldr	r3, [pc, #28]	@ (800c828 <__assert_func+0x30>)
 800c80a:	461c      	mov	r4, r3
 800c80c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c810:	9100      	str	r1, [sp, #0]
 800c812:	462b      	mov	r3, r5
 800c814:	4905      	ldr	r1, [pc, #20]	@ (800c82c <__assert_func+0x34>)
 800c816:	f000 f86f 	bl	800c8f8 <fiprintf>
 800c81a:	f000 f87f 	bl	800c91c <abort>
 800c81e:	4b04      	ldr	r3, [pc, #16]	@ (800c830 <__assert_func+0x38>)
 800c820:	e7f4      	b.n	800c80c <__assert_func+0x14>
 800c822:	bf00      	nop
 800c824:	20000028 	.word	0x20000028
 800c828:	0800e4d6 	.word	0x0800e4d6
 800c82c:	0800e4a8 	.word	0x0800e4a8
 800c830:	0800e49b 	.word	0x0800e49b

0800c834 <_calloc_r>:
 800c834:	b570      	push	{r4, r5, r6, lr}
 800c836:	fba1 5402 	umull	r5, r4, r1, r2
 800c83a:	b93c      	cbnz	r4, 800c84c <_calloc_r+0x18>
 800c83c:	4629      	mov	r1, r5
 800c83e:	f7fd fcfd 	bl	800a23c <_malloc_r>
 800c842:	4606      	mov	r6, r0
 800c844:	b928      	cbnz	r0, 800c852 <_calloc_r+0x1e>
 800c846:	2600      	movs	r6, #0
 800c848:	4630      	mov	r0, r6
 800c84a:	bd70      	pop	{r4, r5, r6, pc}
 800c84c:	220c      	movs	r2, #12
 800c84e:	6002      	str	r2, [r0, #0]
 800c850:	e7f9      	b.n	800c846 <_calloc_r+0x12>
 800c852:	462a      	mov	r2, r5
 800c854:	4621      	mov	r1, r4
 800c856:	f7fe fafa 	bl	800ae4e <memset>
 800c85a:	e7f5      	b.n	800c848 <_calloc_r+0x14>

0800c85c <__ascii_mbtowc>:
 800c85c:	b082      	sub	sp, #8
 800c85e:	b901      	cbnz	r1, 800c862 <__ascii_mbtowc+0x6>
 800c860:	a901      	add	r1, sp, #4
 800c862:	b142      	cbz	r2, 800c876 <__ascii_mbtowc+0x1a>
 800c864:	b14b      	cbz	r3, 800c87a <__ascii_mbtowc+0x1e>
 800c866:	7813      	ldrb	r3, [r2, #0]
 800c868:	600b      	str	r3, [r1, #0]
 800c86a:	7812      	ldrb	r2, [r2, #0]
 800c86c:	1e10      	subs	r0, r2, #0
 800c86e:	bf18      	it	ne
 800c870:	2001      	movne	r0, #1
 800c872:	b002      	add	sp, #8
 800c874:	4770      	bx	lr
 800c876:	4610      	mov	r0, r2
 800c878:	e7fb      	b.n	800c872 <__ascii_mbtowc+0x16>
 800c87a:	f06f 0001 	mvn.w	r0, #1
 800c87e:	e7f8      	b.n	800c872 <__ascii_mbtowc+0x16>

0800c880 <_realloc_r>:
 800c880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c884:	4680      	mov	r8, r0
 800c886:	4615      	mov	r5, r2
 800c888:	460c      	mov	r4, r1
 800c88a:	b921      	cbnz	r1, 800c896 <_realloc_r+0x16>
 800c88c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c890:	4611      	mov	r1, r2
 800c892:	f7fd bcd3 	b.w	800a23c <_malloc_r>
 800c896:	b92a      	cbnz	r2, 800c8a4 <_realloc_r+0x24>
 800c898:	f7ff f9b6 	bl	800bc08 <_free_r>
 800c89c:	2400      	movs	r4, #0
 800c89e:	4620      	mov	r0, r4
 800c8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a4:	f000 f841 	bl	800c92a <_malloc_usable_size_r>
 800c8a8:	4285      	cmp	r5, r0
 800c8aa:	4606      	mov	r6, r0
 800c8ac:	d802      	bhi.n	800c8b4 <_realloc_r+0x34>
 800c8ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c8b2:	d8f4      	bhi.n	800c89e <_realloc_r+0x1e>
 800c8b4:	4629      	mov	r1, r5
 800c8b6:	4640      	mov	r0, r8
 800c8b8:	f7fd fcc0 	bl	800a23c <_malloc_r>
 800c8bc:	4607      	mov	r7, r0
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	d0ec      	beq.n	800c89c <_realloc_r+0x1c>
 800c8c2:	42b5      	cmp	r5, r6
 800c8c4:	462a      	mov	r2, r5
 800c8c6:	4621      	mov	r1, r4
 800c8c8:	bf28      	it	cs
 800c8ca:	4632      	movcs	r2, r6
 800c8cc:	f7ff ff86 	bl	800c7dc <memcpy>
 800c8d0:	4621      	mov	r1, r4
 800c8d2:	4640      	mov	r0, r8
 800c8d4:	f7ff f998 	bl	800bc08 <_free_r>
 800c8d8:	463c      	mov	r4, r7
 800c8da:	e7e0      	b.n	800c89e <_realloc_r+0x1e>

0800c8dc <__ascii_wctomb>:
 800c8dc:	4603      	mov	r3, r0
 800c8de:	4608      	mov	r0, r1
 800c8e0:	b141      	cbz	r1, 800c8f4 <__ascii_wctomb+0x18>
 800c8e2:	2aff      	cmp	r2, #255	@ 0xff
 800c8e4:	d904      	bls.n	800c8f0 <__ascii_wctomb+0x14>
 800c8e6:	228a      	movs	r2, #138	@ 0x8a
 800c8e8:	601a      	str	r2, [r3, #0]
 800c8ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ee:	4770      	bx	lr
 800c8f0:	700a      	strb	r2, [r1, #0]
 800c8f2:	2001      	movs	r0, #1
 800c8f4:	4770      	bx	lr
	...

0800c8f8 <fiprintf>:
 800c8f8:	b40e      	push	{r1, r2, r3}
 800c8fa:	b503      	push	{r0, r1, lr}
 800c8fc:	4601      	mov	r1, r0
 800c8fe:	ab03      	add	r3, sp, #12
 800c900:	4805      	ldr	r0, [pc, #20]	@ (800c918 <fiprintf+0x20>)
 800c902:	f853 2b04 	ldr.w	r2, [r3], #4
 800c906:	6800      	ldr	r0, [r0, #0]
 800c908:	9301      	str	r3, [sp, #4]
 800c90a:	f000 f83f 	bl	800c98c <_vfiprintf_r>
 800c90e:	b002      	add	sp, #8
 800c910:	f85d eb04 	ldr.w	lr, [sp], #4
 800c914:	b003      	add	sp, #12
 800c916:	4770      	bx	lr
 800c918:	20000028 	.word	0x20000028

0800c91c <abort>:
 800c91c:	b508      	push	{r3, lr}
 800c91e:	2006      	movs	r0, #6
 800c920:	f000 fa08 	bl	800cd34 <raise>
 800c924:	2001      	movs	r0, #1
 800c926:	f7f6 f925 	bl	8002b74 <_exit>

0800c92a <_malloc_usable_size_r>:
 800c92a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c92e:	1f18      	subs	r0, r3, #4
 800c930:	2b00      	cmp	r3, #0
 800c932:	bfbc      	itt	lt
 800c934:	580b      	ldrlt	r3, [r1, r0]
 800c936:	18c0      	addlt	r0, r0, r3
 800c938:	4770      	bx	lr

0800c93a <__sfputc_r>:
 800c93a:	6893      	ldr	r3, [r2, #8]
 800c93c:	3b01      	subs	r3, #1
 800c93e:	2b00      	cmp	r3, #0
 800c940:	b410      	push	{r4}
 800c942:	6093      	str	r3, [r2, #8]
 800c944:	da08      	bge.n	800c958 <__sfputc_r+0x1e>
 800c946:	6994      	ldr	r4, [r2, #24]
 800c948:	42a3      	cmp	r3, r4
 800c94a:	db01      	blt.n	800c950 <__sfputc_r+0x16>
 800c94c:	290a      	cmp	r1, #10
 800c94e:	d103      	bne.n	800c958 <__sfputc_r+0x1e>
 800c950:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c954:	f000 b932 	b.w	800cbbc <__swbuf_r>
 800c958:	6813      	ldr	r3, [r2, #0]
 800c95a:	1c58      	adds	r0, r3, #1
 800c95c:	6010      	str	r0, [r2, #0]
 800c95e:	7019      	strb	r1, [r3, #0]
 800c960:	4608      	mov	r0, r1
 800c962:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c966:	4770      	bx	lr

0800c968 <__sfputs_r>:
 800c968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c96a:	4606      	mov	r6, r0
 800c96c:	460f      	mov	r7, r1
 800c96e:	4614      	mov	r4, r2
 800c970:	18d5      	adds	r5, r2, r3
 800c972:	42ac      	cmp	r4, r5
 800c974:	d101      	bne.n	800c97a <__sfputs_r+0x12>
 800c976:	2000      	movs	r0, #0
 800c978:	e007      	b.n	800c98a <__sfputs_r+0x22>
 800c97a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c97e:	463a      	mov	r2, r7
 800c980:	4630      	mov	r0, r6
 800c982:	f7ff ffda 	bl	800c93a <__sfputc_r>
 800c986:	1c43      	adds	r3, r0, #1
 800c988:	d1f3      	bne.n	800c972 <__sfputs_r+0xa>
 800c98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c98c <_vfiprintf_r>:
 800c98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c990:	460d      	mov	r5, r1
 800c992:	b09d      	sub	sp, #116	@ 0x74
 800c994:	4614      	mov	r4, r2
 800c996:	4698      	mov	r8, r3
 800c998:	4606      	mov	r6, r0
 800c99a:	b118      	cbz	r0, 800c9a4 <_vfiprintf_r+0x18>
 800c99c:	6a03      	ldr	r3, [r0, #32]
 800c99e:	b90b      	cbnz	r3, 800c9a4 <_vfiprintf_r+0x18>
 800c9a0:	f7fe f9bc 	bl	800ad1c <__sinit>
 800c9a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9a6:	07d9      	lsls	r1, r3, #31
 800c9a8:	d405      	bmi.n	800c9b6 <_vfiprintf_r+0x2a>
 800c9aa:	89ab      	ldrh	r3, [r5, #12]
 800c9ac:	059a      	lsls	r2, r3, #22
 800c9ae:	d402      	bmi.n	800c9b6 <_vfiprintf_r+0x2a>
 800c9b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9b2:	f7fe fada 	bl	800af6a <__retarget_lock_acquire_recursive>
 800c9b6:	89ab      	ldrh	r3, [r5, #12]
 800c9b8:	071b      	lsls	r3, r3, #28
 800c9ba:	d501      	bpl.n	800c9c0 <_vfiprintf_r+0x34>
 800c9bc:	692b      	ldr	r3, [r5, #16]
 800c9be:	b99b      	cbnz	r3, 800c9e8 <_vfiprintf_r+0x5c>
 800c9c0:	4629      	mov	r1, r5
 800c9c2:	4630      	mov	r0, r6
 800c9c4:	f000 f938 	bl	800cc38 <__swsetup_r>
 800c9c8:	b170      	cbz	r0, 800c9e8 <_vfiprintf_r+0x5c>
 800c9ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9cc:	07dc      	lsls	r4, r3, #31
 800c9ce:	d504      	bpl.n	800c9da <_vfiprintf_r+0x4e>
 800c9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d4:	b01d      	add	sp, #116	@ 0x74
 800c9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9da:	89ab      	ldrh	r3, [r5, #12]
 800c9dc:	0598      	lsls	r0, r3, #22
 800c9de:	d4f7      	bmi.n	800c9d0 <_vfiprintf_r+0x44>
 800c9e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9e2:	f7fe fac3 	bl	800af6c <__retarget_lock_release_recursive>
 800c9e6:	e7f3      	b.n	800c9d0 <_vfiprintf_r+0x44>
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9ec:	2320      	movs	r3, #32
 800c9ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9f6:	2330      	movs	r3, #48	@ 0x30
 800c9f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cba8 <_vfiprintf_r+0x21c>
 800c9fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca00:	f04f 0901 	mov.w	r9, #1
 800ca04:	4623      	mov	r3, r4
 800ca06:	469a      	mov	sl, r3
 800ca08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca0c:	b10a      	cbz	r2, 800ca12 <_vfiprintf_r+0x86>
 800ca0e:	2a25      	cmp	r2, #37	@ 0x25
 800ca10:	d1f9      	bne.n	800ca06 <_vfiprintf_r+0x7a>
 800ca12:	ebba 0b04 	subs.w	fp, sl, r4
 800ca16:	d00b      	beq.n	800ca30 <_vfiprintf_r+0xa4>
 800ca18:	465b      	mov	r3, fp
 800ca1a:	4622      	mov	r2, r4
 800ca1c:	4629      	mov	r1, r5
 800ca1e:	4630      	mov	r0, r6
 800ca20:	f7ff ffa2 	bl	800c968 <__sfputs_r>
 800ca24:	3001      	adds	r0, #1
 800ca26:	f000 80a7 	beq.w	800cb78 <_vfiprintf_r+0x1ec>
 800ca2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca2c:	445a      	add	r2, fp
 800ca2e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca30:	f89a 3000 	ldrb.w	r3, [sl]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	f000 809f 	beq.w	800cb78 <_vfiprintf_r+0x1ec>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca44:	f10a 0a01 	add.w	sl, sl, #1
 800ca48:	9304      	str	r3, [sp, #16]
 800ca4a:	9307      	str	r3, [sp, #28]
 800ca4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca50:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca52:	4654      	mov	r4, sl
 800ca54:	2205      	movs	r2, #5
 800ca56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca5a:	4853      	ldr	r0, [pc, #332]	@ (800cba8 <_vfiprintf_r+0x21c>)
 800ca5c:	f7f3 fbe0 	bl	8000220 <memchr>
 800ca60:	9a04      	ldr	r2, [sp, #16]
 800ca62:	b9d8      	cbnz	r0, 800ca9c <_vfiprintf_r+0x110>
 800ca64:	06d1      	lsls	r1, r2, #27
 800ca66:	bf44      	itt	mi
 800ca68:	2320      	movmi	r3, #32
 800ca6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca6e:	0713      	lsls	r3, r2, #28
 800ca70:	bf44      	itt	mi
 800ca72:	232b      	movmi	r3, #43	@ 0x2b
 800ca74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca78:	f89a 3000 	ldrb.w	r3, [sl]
 800ca7c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca7e:	d015      	beq.n	800caac <_vfiprintf_r+0x120>
 800ca80:	9a07      	ldr	r2, [sp, #28]
 800ca82:	4654      	mov	r4, sl
 800ca84:	2000      	movs	r0, #0
 800ca86:	f04f 0c0a 	mov.w	ip, #10
 800ca8a:	4621      	mov	r1, r4
 800ca8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca90:	3b30      	subs	r3, #48	@ 0x30
 800ca92:	2b09      	cmp	r3, #9
 800ca94:	d94b      	bls.n	800cb2e <_vfiprintf_r+0x1a2>
 800ca96:	b1b0      	cbz	r0, 800cac6 <_vfiprintf_r+0x13a>
 800ca98:	9207      	str	r2, [sp, #28]
 800ca9a:	e014      	b.n	800cac6 <_vfiprintf_r+0x13a>
 800ca9c:	eba0 0308 	sub.w	r3, r0, r8
 800caa0:	fa09 f303 	lsl.w	r3, r9, r3
 800caa4:	4313      	orrs	r3, r2
 800caa6:	9304      	str	r3, [sp, #16]
 800caa8:	46a2      	mov	sl, r4
 800caaa:	e7d2      	b.n	800ca52 <_vfiprintf_r+0xc6>
 800caac:	9b03      	ldr	r3, [sp, #12]
 800caae:	1d19      	adds	r1, r3, #4
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	9103      	str	r1, [sp, #12]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	bfbb      	ittet	lt
 800cab8:	425b      	neglt	r3, r3
 800caba:	f042 0202 	orrlt.w	r2, r2, #2
 800cabe:	9307      	strge	r3, [sp, #28]
 800cac0:	9307      	strlt	r3, [sp, #28]
 800cac2:	bfb8      	it	lt
 800cac4:	9204      	strlt	r2, [sp, #16]
 800cac6:	7823      	ldrb	r3, [r4, #0]
 800cac8:	2b2e      	cmp	r3, #46	@ 0x2e
 800caca:	d10a      	bne.n	800cae2 <_vfiprintf_r+0x156>
 800cacc:	7863      	ldrb	r3, [r4, #1]
 800cace:	2b2a      	cmp	r3, #42	@ 0x2a
 800cad0:	d132      	bne.n	800cb38 <_vfiprintf_r+0x1ac>
 800cad2:	9b03      	ldr	r3, [sp, #12]
 800cad4:	1d1a      	adds	r2, r3, #4
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	9203      	str	r2, [sp, #12]
 800cada:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cade:	3402      	adds	r4, #2
 800cae0:	9305      	str	r3, [sp, #20]
 800cae2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cbb8 <_vfiprintf_r+0x22c>
 800cae6:	7821      	ldrb	r1, [r4, #0]
 800cae8:	2203      	movs	r2, #3
 800caea:	4650      	mov	r0, sl
 800caec:	f7f3 fb98 	bl	8000220 <memchr>
 800caf0:	b138      	cbz	r0, 800cb02 <_vfiprintf_r+0x176>
 800caf2:	9b04      	ldr	r3, [sp, #16]
 800caf4:	eba0 000a 	sub.w	r0, r0, sl
 800caf8:	2240      	movs	r2, #64	@ 0x40
 800cafa:	4082      	lsls	r2, r0
 800cafc:	4313      	orrs	r3, r2
 800cafe:	3401      	adds	r4, #1
 800cb00:	9304      	str	r3, [sp, #16]
 800cb02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb06:	4829      	ldr	r0, [pc, #164]	@ (800cbac <_vfiprintf_r+0x220>)
 800cb08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb0c:	2206      	movs	r2, #6
 800cb0e:	f7f3 fb87 	bl	8000220 <memchr>
 800cb12:	2800      	cmp	r0, #0
 800cb14:	d03f      	beq.n	800cb96 <_vfiprintf_r+0x20a>
 800cb16:	4b26      	ldr	r3, [pc, #152]	@ (800cbb0 <_vfiprintf_r+0x224>)
 800cb18:	bb1b      	cbnz	r3, 800cb62 <_vfiprintf_r+0x1d6>
 800cb1a:	9b03      	ldr	r3, [sp, #12]
 800cb1c:	3307      	adds	r3, #7
 800cb1e:	f023 0307 	bic.w	r3, r3, #7
 800cb22:	3308      	adds	r3, #8
 800cb24:	9303      	str	r3, [sp, #12]
 800cb26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb28:	443b      	add	r3, r7
 800cb2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb2c:	e76a      	b.n	800ca04 <_vfiprintf_r+0x78>
 800cb2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb32:	460c      	mov	r4, r1
 800cb34:	2001      	movs	r0, #1
 800cb36:	e7a8      	b.n	800ca8a <_vfiprintf_r+0xfe>
 800cb38:	2300      	movs	r3, #0
 800cb3a:	3401      	adds	r4, #1
 800cb3c:	9305      	str	r3, [sp, #20]
 800cb3e:	4619      	mov	r1, r3
 800cb40:	f04f 0c0a 	mov.w	ip, #10
 800cb44:	4620      	mov	r0, r4
 800cb46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb4a:	3a30      	subs	r2, #48	@ 0x30
 800cb4c:	2a09      	cmp	r2, #9
 800cb4e:	d903      	bls.n	800cb58 <_vfiprintf_r+0x1cc>
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d0c6      	beq.n	800cae2 <_vfiprintf_r+0x156>
 800cb54:	9105      	str	r1, [sp, #20]
 800cb56:	e7c4      	b.n	800cae2 <_vfiprintf_r+0x156>
 800cb58:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb5c:	4604      	mov	r4, r0
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e7f0      	b.n	800cb44 <_vfiprintf_r+0x1b8>
 800cb62:	ab03      	add	r3, sp, #12
 800cb64:	9300      	str	r3, [sp, #0]
 800cb66:	462a      	mov	r2, r5
 800cb68:	4b12      	ldr	r3, [pc, #72]	@ (800cbb4 <_vfiprintf_r+0x228>)
 800cb6a:	a904      	add	r1, sp, #16
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	f7fd fc91 	bl	800a494 <_printf_float>
 800cb72:	4607      	mov	r7, r0
 800cb74:	1c78      	adds	r0, r7, #1
 800cb76:	d1d6      	bne.n	800cb26 <_vfiprintf_r+0x19a>
 800cb78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb7a:	07d9      	lsls	r1, r3, #31
 800cb7c:	d405      	bmi.n	800cb8a <_vfiprintf_r+0x1fe>
 800cb7e:	89ab      	ldrh	r3, [r5, #12]
 800cb80:	059a      	lsls	r2, r3, #22
 800cb82:	d402      	bmi.n	800cb8a <_vfiprintf_r+0x1fe>
 800cb84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb86:	f7fe f9f1 	bl	800af6c <__retarget_lock_release_recursive>
 800cb8a:	89ab      	ldrh	r3, [r5, #12]
 800cb8c:	065b      	lsls	r3, r3, #25
 800cb8e:	f53f af1f 	bmi.w	800c9d0 <_vfiprintf_r+0x44>
 800cb92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb94:	e71e      	b.n	800c9d4 <_vfiprintf_r+0x48>
 800cb96:	ab03      	add	r3, sp, #12
 800cb98:	9300      	str	r3, [sp, #0]
 800cb9a:	462a      	mov	r2, r5
 800cb9c:	4b05      	ldr	r3, [pc, #20]	@ (800cbb4 <_vfiprintf_r+0x228>)
 800cb9e:	a904      	add	r1, sp, #16
 800cba0:	4630      	mov	r0, r6
 800cba2:	f7fd ff0f 	bl	800a9c4 <_printf_i>
 800cba6:	e7e4      	b.n	800cb72 <_vfiprintf_r+0x1e6>
 800cba8:	0800e480 	.word	0x0800e480
 800cbac:	0800e48a 	.word	0x0800e48a
 800cbb0:	0800a495 	.word	0x0800a495
 800cbb4:	0800c969 	.word	0x0800c969
 800cbb8:	0800e486 	.word	0x0800e486

0800cbbc <__swbuf_r>:
 800cbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbbe:	460e      	mov	r6, r1
 800cbc0:	4614      	mov	r4, r2
 800cbc2:	4605      	mov	r5, r0
 800cbc4:	b118      	cbz	r0, 800cbce <__swbuf_r+0x12>
 800cbc6:	6a03      	ldr	r3, [r0, #32]
 800cbc8:	b90b      	cbnz	r3, 800cbce <__swbuf_r+0x12>
 800cbca:	f7fe f8a7 	bl	800ad1c <__sinit>
 800cbce:	69a3      	ldr	r3, [r4, #24]
 800cbd0:	60a3      	str	r3, [r4, #8]
 800cbd2:	89a3      	ldrh	r3, [r4, #12]
 800cbd4:	071a      	lsls	r2, r3, #28
 800cbd6:	d501      	bpl.n	800cbdc <__swbuf_r+0x20>
 800cbd8:	6923      	ldr	r3, [r4, #16]
 800cbda:	b943      	cbnz	r3, 800cbee <__swbuf_r+0x32>
 800cbdc:	4621      	mov	r1, r4
 800cbde:	4628      	mov	r0, r5
 800cbe0:	f000 f82a 	bl	800cc38 <__swsetup_r>
 800cbe4:	b118      	cbz	r0, 800cbee <__swbuf_r+0x32>
 800cbe6:	f04f 37ff 	mov.w	r7, #4294967295
 800cbea:	4638      	mov	r0, r7
 800cbec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbee:	6823      	ldr	r3, [r4, #0]
 800cbf0:	6922      	ldr	r2, [r4, #16]
 800cbf2:	1a98      	subs	r0, r3, r2
 800cbf4:	6963      	ldr	r3, [r4, #20]
 800cbf6:	b2f6      	uxtb	r6, r6
 800cbf8:	4283      	cmp	r3, r0
 800cbfa:	4637      	mov	r7, r6
 800cbfc:	dc05      	bgt.n	800cc0a <__swbuf_r+0x4e>
 800cbfe:	4621      	mov	r1, r4
 800cc00:	4628      	mov	r0, r5
 800cc02:	f7ff fda9 	bl	800c758 <_fflush_r>
 800cc06:	2800      	cmp	r0, #0
 800cc08:	d1ed      	bne.n	800cbe6 <__swbuf_r+0x2a>
 800cc0a:	68a3      	ldr	r3, [r4, #8]
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	60a3      	str	r3, [r4, #8]
 800cc10:	6823      	ldr	r3, [r4, #0]
 800cc12:	1c5a      	adds	r2, r3, #1
 800cc14:	6022      	str	r2, [r4, #0]
 800cc16:	701e      	strb	r6, [r3, #0]
 800cc18:	6962      	ldr	r2, [r4, #20]
 800cc1a:	1c43      	adds	r3, r0, #1
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d004      	beq.n	800cc2a <__swbuf_r+0x6e>
 800cc20:	89a3      	ldrh	r3, [r4, #12]
 800cc22:	07db      	lsls	r3, r3, #31
 800cc24:	d5e1      	bpl.n	800cbea <__swbuf_r+0x2e>
 800cc26:	2e0a      	cmp	r6, #10
 800cc28:	d1df      	bne.n	800cbea <__swbuf_r+0x2e>
 800cc2a:	4621      	mov	r1, r4
 800cc2c:	4628      	mov	r0, r5
 800cc2e:	f7ff fd93 	bl	800c758 <_fflush_r>
 800cc32:	2800      	cmp	r0, #0
 800cc34:	d0d9      	beq.n	800cbea <__swbuf_r+0x2e>
 800cc36:	e7d6      	b.n	800cbe6 <__swbuf_r+0x2a>

0800cc38 <__swsetup_r>:
 800cc38:	b538      	push	{r3, r4, r5, lr}
 800cc3a:	4b29      	ldr	r3, [pc, #164]	@ (800cce0 <__swsetup_r+0xa8>)
 800cc3c:	4605      	mov	r5, r0
 800cc3e:	6818      	ldr	r0, [r3, #0]
 800cc40:	460c      	mov	r4, r1
 800cc42:	b118      	cbz	r0, 800cc4c <__swsetup_r+0x14>
 800cc44:	6a03      	ldr	r3, [r0, #32]
 800cc46:	b90b      	cbnz	r3, 800cc4c <__swsetup_r+0x14>
 800cc48:	f7fe f868 	bl	800ad1c <__sinit>
 800cc4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc50:	0719      	lsls	r1, r3, #28
 800cc52:	d422      	bmi.n	800cc9a <__swsetup_r+0x62>
 800cc54:	06da      	lsls	r2, r3, #27
 800cc56:	d407      	bmi.n	800cc68 <__swsetup_r+0x30>
 800cc58:	2209      	movs	r2, #9
 800cc5a:	602a      	str	r2, [r5, #0]
 800cc5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc60:	81a3      	strh	r3, [r4, #12]
 800cc62:	f04f 30ff 	mov.w	r0, #4294967295
 800cc66:	e033      	b.n	800ccd0 <__swsetup_r+0x98>
 800cc68:	0758      	lsls	r0, r3, #29
 800cc6a:	d512      	bpl.n	800cc92 <__swsetup_r+0x5a>
 800cc6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc6e:	b141      	cbz	r1, 800cc82 <__swsetup_r+0x4a>
 800cc70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc74:	4299      	cmp	r1, r3
 800cc76:	d002      	beq.n	800cc7e <__swsetup_r+0x46>
 800cc78:	4628      	mov	r0, r5
 800cc7a:	f7fe ffc5 	bl	800bc08 <_free_r>
 800cc7e:	2300      	movs	r3, #0
 800cc80:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc82:	89a3      	ldrh	r3, [r4, #12]
 800cc84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cc88:	81a3      	strh	r3, [r4, #12]
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	6063      	str	r3, [r4, #4]
 800cc8e:	6923      	ldr	r3, [r4, #16]
 800cc90:	6023      	str	r3, [r4, #0]
 800cc92:	89a3      	ldrh	r3, [r4, #12]
 800cc94:	f043 0308 	orr.w	r3, r3, #8
 800cc98:	81a3      	strh	r3, [r4, #12]
 800cc9a:	6923      	ldr	r3, [r4, #16]
 800cc9c:	b94b      	cbnz	r3, 800ccb2 <__swsetup_r+0x7a>
 800cc9e:	89a3      	ldrh	r3, [r4, #12]
 800cca0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cca8:	d003      	beq.n	800ccb2 <__swsetup_r+0x7a>
 800ccaa:	4621      	mov	r1, r4
 800ccac:	4628      	mov	r0, r5
 800ccae:	f000 f883 	bl	800cdb8 <__smakebuf_r>
 800ccb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccb6:	f013 0201 	ands.w	r2, r3, #1
 800ccba:	d00a      	beq.n	800ccd2 <__swsetup_r+0x9a>
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	60a2      	str	r2, [r4, #8]
 800ccc0:	6962      	ldr	r2, [r4, #20]
 800ccc2:	4252      	negs	r2, r2
 800ccc4:	61a2      	str	r2, [r4, #24]
 800ccc6:	6922      	ldr	r2, [r4, #16]
 800ccc8:	b942      	cbnz	r2, 800ccdc <__swsetup_r+0xa4>
 800ccca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ccce:	d1c5      	bne.n	800cc5c <__swsetup_r+0x24>
 800ccd0:	bd38      	pop	{r3, r4, r5, pc}
 800ccd2:	0799      	lsls	r1, r3, #30
 800ccd4:	bf58      	it	pl
 800ccd6:	6962      	ldrpl	r2, [r4, #20]
 800ccd8:	60a2      	str	r2, [r4, #8]
 800ccda:	e7f4      	b.n	800ccc6 <__swsetup_r+0x8e>
 800ccdc:	2000      	movs	r0, #0
 800ccde:	e7f7      	b.n	800ccd0 <__swsetup_r+0x98>
 800cce0:	20000028 	.word	0x20000028

0800cce4 <_raise_r>:
 800cce4:	291f      	cmp	r1, #31
 800cce6:	b538      	push	{r3, r4, r5, lr}
 800cce8:	4605      	mov	r5, r0
 800ccea:	460c      	mov	r4, r1
 800ccec:	d904      	bls.n	800ccf8 <_raise_r+0x14>
 800ccee:	2316      	movs	r3, #22
 800ccf0:	6003      	str	r3, [r0, #0]
 800ccf2:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf6:	bd38      	pop	{r3, r4, r5, pc}
 800ccf8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ccfa:	b112      	cbz	r2, 800cd02 <_raise_r+0x1e>
 800ccfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd00:	b94b      	cbnz	r3, 800cd16 <_raise_r+0x32>
 800cd02:	4628      	mov	r0, r5
 800cd04:	f000 f830 	bl	800cd68 <_getpid_r>
 800cd08:	4622      	mov	r2, r4
 800cd0a:	4601      	mov	r1, r0
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd12:	f000 b817 	b.w	800cd44 <_kill_r>
 800cd16:	2b01      	cmp	r3, #1
 800cd18:	d00a      	beq.n	800cd30 <_raise_r+0x4c>
 800cd1a:	1c59      	adds	r1, r3, #1
 800cd1c:	d103      	bne.n	800cd26 <_raise_r+0x42>
 800cd1e:	2316      	movs	r3, #22
 800cd20:	6003      	str	r3, [r0, #0]
 800cd22:	2001      	movs	r0, #1
 800cd24:	e7e7      	b.n	800ccf6 <_raise_r+0x12>
 800cd26:	2100      	movs	r1, #0
 800cd28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cd2c:	4620      	mov	r0, r4
 800cd2e:	4798      	blx	r3
 800cd30:	2000      	movs	r0, #0
 800cd32:	e7e0      	b.n	800ccf6 <_raise_r+0x12>

0800cd34 <raise>:
 800cd34:	4b02      	ldr	r3, [pc, #8]	@ (800cd40 <raise+0xc>)
 800cd36:	4601      	mov	r1, r0
 800cd38:	6818      	ldr	r0, [r3, #0]
 800cd3a:	f7ff bfd3 	b.w	800cce4 <_raise_r>
 800cd3e:	bf00      	nop
 800cd40:	20000028 	.word	0x20000028

0800cd44 <_kill_r>:
 800cd44:	b538      	push	{r3, r4, r5, lr}
 800cd46:	4d07      	ldr	r5, [pc, #28]	@ (800cd64 <_kill_r+0x20>)
 800cd48:	2300      	movs	r3, #0
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	4608      	mov	r0, r1
 800cd4e:	4611      	mov	r1, r2
 800cd50:	602b      	str	r3, [r5, #0]
 800cd52:	f7f5 feff 	bl	8002b54 <_kill>
 800cd56:	1c43      	adds	r3, r0, #1
 800cd58:	d102      	bne.n	800cd60 <_kill_r+0x1c>
 800cd5a:	682b      	ldr	r3, [r5, #0]
 800cd5c:	b103      	cbz	r3, 800cd60 <_kill_r+0x1c>
 800cd5e:	6023      	str	r3, [r4, #0]
 800cd60:	bd38      	pop	{r3, r4, r5, pc}
 800cd62:	bf00      	nop
 800cd64:	20000824 	.word	0x20000824

0800cd68 <_getpid_r>:
 800cd68:	f7f5 beec 	b.w	8002b44 <_getpid>

0800cd6c <__swhatbuf_r>:
 800cd6c:	b570      	push	{r4, r5, r6, lr}
 800cd6e:	460c      	mov	r4, r1
 800cd70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd74:	2900      	cmp	r1, #0
 800cd76:	b096      	sub	sp, #88	@ 0x58
 800cd78:	4615      	mov	r5, r2
 800cd7a:	461e      	mov	r6, r3
 800cd7c:	da0d      	bge.n	800cd9a <__swhatbuf_r+0x2e>
 800cd7e:	89a3      	ldrh	r3, [r4, #12]
 800cd80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cd84:	f04f 0100 	mov.w	r1, #0
 800cd88:	bf14      	ite	ne
 800cd8a:	2340      	movne	r3, #64	@ 0x40
 800cd8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cd90:	2000      	movs	r0, #0
 800cd92:	6031      	str	r1, [r6, #0]
 800cd94:	602b      	str	r3, [r5, #0]
 800cd96:	b016      	add	sp, #88	@ 0x58
 800cd98:	bd70      	pop	{r4, r5, r6, pc}
 800cd9a:	466a      	mov	r2, sp
 800cd9c:	f000 f848 	bl	800ce30 <_fstat_r>
 800cda0:	2800      	cmp	r0, #0
 800cda2:	dbec      	blt.n	800cd7e <__swhatbuf_r+0x12>
 800cda4:	9901      	ldr	r1, [sp, #4]
 800cda6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cdaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cdae:	4259      	negs	r1, r3
 800cdb0:	4159      	adcs	r1, r3
 800cdb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cdb6:	e7eb      	b.n	800cd90 <__swhatbuf_r+0x24>

0800cdb8 <__smakebuf_r>:
 800cdb8:	898b      	ldrh	r3, [r1, #12]
 800cdba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdbc:	079d      	lsls	r5, r3, #30
 800cdbe:	4606      	mov	r6, r0
 800cdc0:	460c      	mov	r4, r1
 800cdc2:	d507      	bpl.n	800cdd4 <__smakebuf_r+0x1c>
 800cdc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cdc8:	6023      	str	r3, [r4, #0]
 800cdca:	6123      	str	r3, [r4, #16]
 800cdcc:	2301      	movs	r3, #1
 800cdce:	6163      	str	r3, [r4, #20]
 800cdd0:	b003      	add	sp, #12
 800cdd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdd4:	ab01      	add	r3, sp, #4
 800cdd6:	466a      	mov	r2, sp
 800cdd8:	f7ff ffc8 	bl	800cd6c <__swhatbuf_r>
 800cddc:	9f00      	ldr	r7, [sp, #0]
 800cdde:	4605      	mov	r5, r0
 800cde0:	4639      	mov	r1, r7
 800cde2:	4630      	mov	r0, r6
 800cde4:	f7fd fa2a 	bl	800a23c <_malloc_r>
 800cde8:	b948      	cbnz	r0, 800cdfe <__smakebuf_r+0x46>
 800cdea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdee:	059a      	lsls	r2, r3, #22
 800cdf0:	d4ee      	bmi.n	800cdd0 <__smakebuf_r+0x18>
 800cdf2:	f023 0303 	bic.w	r3, r3, #3
 800cdf6:	f043 0302 	orr.w	r3, r3, #2
 800cdfa:	81a3      	strh	r3, [r4, #12]
 800cdfc:	e7e2      	b.n	800cdc4 <__smakebuf_r+0xc>
 800cdfe:	89a3      	ldrh	r3, [r4, #12]
 800ce00:	6020      	str	r0, [r4, #0]
 800ce02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce06:	81a3      	strh	r3, [r4, #12]
 800ce08:	9b01      	ldr	r3, [sp, #4]
 800ce0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ce0e:	b15b      	cbz	r3, 800ce28 <__smakebuf_r+0x70>
 800ce10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce14:	4630      	mov	r0, r6
 800ce16:	f000 f81d 	bl	800ce54 <_isatty_r>
 800ce1a:	b128      	cbz	r0, 800ce28 <__smakebuf_r+0x70>
 800ce1c:	89a3      	ldrh	r3, [r4, #12]
 800ce1e:	f023 0303 	bic.w	r3, r3, #3
 800ce22:	f043 0301 	orr.w	r3, r3, #1
 800ce26:	81a3      	strh	r3, [r4, #12]
 800ce28:	89a3      	ldrh	r3, [r4, #12]
 800ce2a:	431d      	orrs	r5, r3
 800ce2c:	81a5      	strh	r5, [r4, #12]
 800ce2e:	e7cf      	b.n	800cdd0 <__smakebuf_r+0x18>

0800ce30 <_fstat_r>:
 800ce30:	b538      	push	{r3, r4, r5, lr}
 800ce32:	4d07      	ldr	r5, [pc, #28]	@ (800ce50 <_fstat_r+0x20>)
 800ce34:	2300      	movs	r3, #0
 800ce36:	4604      	mov	r4, r0
 800ce38:	4608      	mov	r0, r1
 800ce3a:	4611      	mov	r1, r2
 800ce3c:	602b      	str	r3, [r5, #0]
 800ce3e:	f7f5 fee9 	bl	8002c14 <_fstat>
 800ce42:	1c43      	adds	r3, r0, #1
 800ce44:	d102      	bne.n	800ce4c <_fstat_r+0x1c>
 800ce46:	682b      	ldr	r3, [r5, #0]
 800ce48:	b103      	cbz	r3, 800ce4c <_fstat_r+0x1c>
 800ce4a:	6023      	str	r3, [r4, #0]
 800ce4c:	bd38      	pop	{r3, r4, r5, pc}
 800ce4e:	bf00      	nop
 800ce50:	20000824 	.word	0x20000824

0800ce54 <_isatty_r>:
 800ce54:	b538      	push	{r3, r4, r5, lr}
 800ce56:	4d06      	ldr	r5, [pc, #24]	@ (800ce70 <_isatty_r+0x1c>)
 800ce58:	2300      	movs	r3, #0
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	4608      	mov	r0, r1
 800ce5e:	602b      	str	r3, [r5, #0]
 800ce60:	f7f5 fee8 	bl	8002c34 <_isatty>
 800ce64:	1c43      	adds	r3, r0, #1
 800ce66:	d102      	bne.n	800ce6e <_isatty_r+0x1a>
 800ce68:	682b      	ldr	r3, [r5, #0]
 800ce6a:	b103      	cbz	r3, 800ce6e <_isatty_r+0x1a>
 800ce6c:	6023      	str	r3, [r4, #0]
 800ce6e:	bd38      	pop	{r3, r4, r5, pc}
 800ce70:	20000824 	.word	0x20000824

0800ce74 <sinf>:
 800ce74:	ee10 3a10 	vmov	r3, s0
 800ce78:	b507      	push	{r0, r1, r2, lr}
 800ce7a:	4a1f      	ldr	r2, [pc, #124]	@ (800cef8 <sinf+0x84>)
 800ce7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d807      	bhi.n	800ce94 <sinf+0x20>
 800ce84:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800cefc <sinf+0x88>
 800ce88:	2000      	movs	r0, #0
 800ce8a:	b003      	add	sp, #12
 800ce8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce90:	f000 b88e 	b.w	800cfb0 <__kernel_sinf>
 800ce94:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ce98:	d304      	bcc.n	800cea4 <sinf+0x30>
 800ce9a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ce9e:	b003      	add	sp, #12
 800cea0:	f85d fb04 	ldr.w	pc, [sp], #4
 800cea4:	4668      	mov	r0, sp
 800cea6:	f000 f8cb 	bl	800d040 <__ieee754_rem_pio2f>
 800ceaa:	f000 0003 	and.w	r0, r0, #3
 800ceae:	2801      	cmp	r0, #1
 800ceb0:	d00a      	beq.n	800cec8 <sinf+0x54>
 800ceb2:	2802      	cmp	r0, #2
 800ceb4:	d00f      	beq.n	800ced6 <sinf+0x62>
 800ceb6:	b9c0      	cbnz	r0, 800ceea <sinf+0x76>
 800ceb8:	eddd 0a01 	vldr	s1, [sp, #4]
 800cebc:	ed9d 0a00 	vldr	s0, [sp]
 800cec0:	2001      	movs	r0, #1
 800cec2:	f000 f875 	bl	800cfb0 <__kernel_sinf>
 800cec6:	e7ea      	b.n	800ce9e <sinf+0x2a>
 800cec8:	eddd 0a01 	vldr	s1, [sp, #4]
 800cecc:	ed9d 0a00 	vldr	s0, [sp]
 800ced0:	f000 f816 	bl	800cf00 <__kernel_cosf>
 800ced4:	e7e3      	b.n	800ce9e <sinf+0x2a>
 800ced6:	eddd 0a01 	vldr	s1, [sp, #4]
 800ceda:	ed9d 0a00 	vldr	s0, [sp]
 800cede:	2001      	movs	r0, #1
 800cee0:	f000 f866 	bl	800cfb0 <__kernel_sinf>
 800cee4:	eeb1 0a40 	vneg.f32	s0, s0
 800cee8:	e7d9      	b.n	800ce9e <sinf+0x2a>
 800ceea:	eddd 0a01 	vldr	s1, [sp, #4]
 800ceee:	ed9d 0a00 	vldr	s0, [sp]
 800cef2:	f000 f805 	bl	800cf00 <__kernel_cosf>
 800cef6:	e7f5      	b.n	800cee4 <sinf+0x70>
 800cef8:	3f490fd8 	.word	0x3f490fd8
 800cefc:	00000000 	.word	0x00000000

0800cf00 <__kernel_cosf>:
 800cf00:	ee10 3a10 	vmov	r3, s0
 800cf04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cf08:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800cf0c:	eef0 6a40 	vmov.f32	s13, s0
 800cf10:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800cf14:	d204      	bcs.n	800cf20 <__kernel_cosf+0x20>
 800cf16:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800cf1a:	ee17 2a90 	vmov	r2, s15
 800cf1e:	b342      	cbz	r2, 800cf72 <__kernel_cosf+0x72>
 800cf20:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800cf24:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800cf90 <__kernel_cosf+0x90>
 800cf28:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800cf94 <__kernel_cosf+0x94>
 800cf2c:	4a1a      	ldr	r2, [pc, #104]	@ (800cf98 <__kernel_cosf+0x98>)
 800cf2e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cf32:	4293      	cmp	r3, r2
 800cf34:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800cf9c <__kernel_cosf+0x9c>
 800cf38:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cf3c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800cfa0 <__kernel_cosf+0xa0>
 800cf40:	eea7 6a87 	vfma.f32	s12, s15, s14
 800cf44:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800cfa4 <__kernel_cosf+0xa4>
 800cf48:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cf4c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800cfa8 <__kernel_cosf+0xa8>
 800cf50:	eea7 6a87 	vfma.f32	s12, s15, s14
 800cf54:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800cf58:	ee26 6a07 	vmul.f32	s12, s12, s14
 800cf5c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cf60:	eee7 0a06 	vfma.f32	s1, s14, s12
 800cf64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf68:	d804      	bhi.n	800cf74 <__kernel_cosf+0x74>
 800cf6a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800cf6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cf72:	4770      	bx	lr
 800cf74:	4a0d      	ldr	r2, [pc, #52]	@ (800cfac <__kernel_cosf+0xac>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	bf9a      	itte	ls
 800cf7a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800cf7e:	ee07 3a10 	vmovls	s14, r3
 800cf82:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800cf86:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cf8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf8e:	e7ec      	b.n	800cf6a <__kernel_cosf+0x6a>
 800cf90:	ad47d74e 	.word	0xad47d74e
 800cf94:	310f74f6 	.word	0x310f74f6
 800cf98:	3e999999 	.word	0x3e999999
 800cf9c:	b493f27c 	.word	0xb493f27c
 800cfa0:	37d00d01 	.word	0x37d00d01
 800cfa4:	bab60b61 	.word	0xbab60b61
 800cfa8:	3d2aaaab 	.word	0x3d2aaaab
 800cfac:	3f480000 	.word	0x3f480000

0800cfb0 <__kernel_sinf>:
 800cfb0:	ee10 3a10 	vmov	r3, s0
 800cfb4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cfb8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800cfbc:	d204      	bcs.n	800cfc8 <__kernel_sinf+0x18>
 800cfbe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800cfc2:	ee17 3a90 	vmov	r3, s15
 800cfc6:	b35b      	cbz	r3, 800d020 <__kernel_sinf+0x70>
 800cfc8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cfcc:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d024 <__kernel_sinf+0x74>
 800cfd0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800d028 <__kernel_sinf+0x78>
 800cfd4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cfd8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800d02c <__kernel_sinf+0x7c>
 800cfdc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cfe0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800d030 <__kernel_sinf+0x80>
 800cfe4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800cfe8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800d034 <__kernel_sinf+0x84>
 800cfec:	ee60 6a07 	vmul.f32	s13, s0, s14
 800cff0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cff4:	b930      	cbnz	r0, 800d004 <__kernel_sinf+0x54>
 800cff6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800d038 <__kernel_sinf+0x88>
 800cffa:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cffe:	eea6 0a26 	vfma.f32	s0, s12, s13
 800d002:	4770      	bx	lr
 800d004:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d008:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d00c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800d010:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d014:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800d03c <__kernel_sinf+0x8c>
 800d018:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800d01c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800d020:	4770      	bx	lr
 800d022:	bf00      	nop
 800d024:	2f2ec9d3 	.word	0x2f2ec9d3
 800d028:	b2d72f34 	.word	0xb2d72f34
 800d02c:	3638ef1b 	.word	0x3638ef1b
 800d030:	b9500d01 	.word	0xb9500d01
 800d034:	3c088889 	.word	0x3c088889
 800d038:	be2aaaab 	.word	0xbe2aaaab
 800d03c:	3e2aaaab 	.word	0x3e2aaaab

0800d040 <__ieee754_rem_pio2f>:
 800d040:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d042:	ee10 6a10 	vmov	r6, s0
 800d046:	4b88      	ldr	r3, [pc, #544]	@ (800d268 <__ieee754_rem_pio2f+0x228>)
 800d048:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800d04c:	429d      	cmp	r5, r3
 800d04e:	b087      	sub	sp, #28
 800d050:	4604      	mov	r4, r0
 800d052:	d805      	bhi.n	800d060 <__ieee754_rem_pio2f+0x20>
 800d054:	2300      	movs	r3, #0
 800d056:	ed80 0a00 	vstr	s0, [r0]
 800d05a:	6043      	str	r3, [r0, #4]
 800d05c:	2000      	movs	r0, #0
 800d05e:	e022      	b.n	800d0a6 <__ieee754_rem_pio2f+0x66>
 800d060:	4b82      	ldr	r3, [pc, #520]	@ (800d26c <__ieee754_rem_pio2f+0x22c>)
 800d062:	429d      	cmp	r5, r3
 800d064:	d83a      	bhi.n	800d0dc <__ieee754_rem_pio2f+0x9c>
 800d066:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d06a:	2e00      	cmp	r6, #0
 800d06c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800d270 <__ieee754_rem_pio2f+0x230>
 800d070:	4a80      	ldr	r2, [pc, #512]	@ (800d274 <__ieee754_rem_pio2f+0x234>)
 800d072:	f023 030f 	bic.w	r3, r3, #15
 800d076:	dd18      	ble.n	800d0aa <__ieee754_rem_pio2f+0x6a>
 800d078:	4293      	cmp	r3, r2
 800d07a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d07e:	bf09      	itett	eq
 800d080:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800d278 <__ieee754_rem_pio2f+0x238>
 800d084:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800d27c <__ieee754_rem_pio2f+0x23c>
 800d088:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800d280 <__ieee754_rem_pio2f+0x240>
 800d08c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d090:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800d094:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d098:	ed80 7a00 	vstr	s14, [r0]
 800d09c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d0a0:	edc0 7a01 	vstr	s15, [r0, #4]
 800d0a4:	2001      	movs	r0, #1
 800d0a6:	b007      	add	sp, #28
 800d0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d0b0:	bf09      	itett	eq
 800d0b2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800d278 <__ieee754_rem_pio2f+0x238>
 800d0b6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800d27c <__ieee754_rem_pio2f+0x23c>
 800d0ba:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800d280 <__ieee754_rem_pio2f+0x240>
 800d0be:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d0c2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d0c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d0ca:	ed80 7a00 	vstr	s14, [r0]
 800d0ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0d2:	edc0 7a01 	vstr	s15, [r0, #4]
 800d0d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d0da:	e7e4      	b.n	800d0a6 <__ieee754_rem_pio2f+0x66>
 800d0dc:	4b69      	ldr	r3, [pc, #420]	@ (800d284 <__ieee754_rem_pio2f+0x244>)
 800d0de:	429d      	cmp	r5, r3
 800d0e0:	d873      	bhi.n	800d1ca <__ieee754_rem_pio2f+0x18a>
 800d0e2:	f000 f8dd 	bl	800d2a0 <fabsf>
 800d0e6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800d288 <__ieee754_rem_pio2f+0x248>
 800d0ea:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d0ee:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d0f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d0f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d0fa:	ee17 0a90 	vmov	r0, s15
 800d0fe:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d270 <__ieee754_rem_pio2f+0x230>
 800d102:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d106:	281f      	cmp	r0, #31
 800d108:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d27c <__ieee754_rem_pio2f+0x23c>
 800d10c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d110:	eeb1 6a47 	vneg.f32	s12, s14
 800d114:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d118:	ee16 1a90 	vmov	r1, s13
 800d11c:	dc09      	bgt.n	800d132 <__ieee754_rem_pio2f+0xf2>
 800d11e:	4a5b      	ldr	r2, [pc, #364]	@ (800d28c <__ieee754_rem_pio2f+0x24c>)
 800d120:	1e47      	subs	r7, r0, #1
 800d122:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d126:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800d12a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d12e:	4293      	cmp	r3, r2
 800d130:	d107      	bne.n	800d142 <__ieee754_rem_pio2f+0x102>
 800d132:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800d136:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800d13a:	2a08      	cmp	r2, #8
 800d13c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d140:	dc14      	bgt.n	800d16c <__ieee754_rem_pio2f+0x12c>
 800d142:	6021      	str	r1, [r4, #0]
 800d144:	ed94 7a00 	vldr	s14, [r4]
 800d148:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d14c:	2e00      	cmp	r6, #0
 800d14e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d152:	ed84 0a01 	vstr	s0, [r4, #4]
 800d156:	daa6      	bge.n	800d0a6 <__ieee754_rem_pio2f+0x66>
 800d158:	eeb1 7a47 	vneg.f32	s14, s14
 800d15c:	eeb1 0a40 	vneg.f32	s0, s0
 800d160:	ed84 7a00 	vstr	s14, [r4]
 800d164:	ed84 0a01 	vstr	s0, [r4, #4]
 800d168:	4240      	negs	r0, r0
 800d16a:	e79c      	b.n	800d0a6 <__ieee754_rem_pio2f+0x66>
 800d16c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800d278 <__ieee754_rem_pio2f+0x238>
 800d170:	eef0 6a40 	vmov.f32	s13, s0
 800d174:	eee6 6a25 	vfma.f32	s13, s12, s11
 800d178:	ee70 7a66 	vsub.f32	s15, s0, s13
 800d17c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d180:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d280 <__ieee754_rem_pio2f+0x240>
 800d184:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d188:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d18c:	ee15 2a90 	vmov	r2, s11
 800d190:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d194:	1a5b      	subs	r3, r3, r1
 800d196:	2b19      	cmp	r3, #25
 800d198:	dc04      	bgt.n	800d1a4 <__ieee754_rem_pio2f+0x164>
 800d19a:	edc4 5a00 	vstr	s11, [r4]
 800d19e:	eeb0 0a66 	vmov.f32	s0, s13
 800d1a2:	e7cf      	b.n	800d144 <__ieee754_rem_pio2f+0x104>
 800d1a4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800d290 <__ieee754_rem_pio2f+0x250>
 800d1a8:	eeb0 0a66 	vmov.f32	s0, s13
 800d1ac:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d1b0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d1b4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800d294 <__ieee754_rem_pio2f+0x254>
 800d1b8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d1bc:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d1c0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d1c4:	ed84 7a00 	vstr	s14, [r4]
 800d1c8:	e7bc      	b.n	800d144 <__ieee754_rem_pio2f+0x104>
 800d1ca:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800d1ce:	d306      	bcc.n	800d1de <__ieee754_rem_pio2f+0x19e>
 800d1d0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d1d4:	edc0 7a01 	vstr	s15, [r0, #4]
 800d1d8:	edc0 7a00 	vstr	s15, [r0]
 800d1dc:	e73e      	b.n	800d05c <__ieee754_rem_pio2f+0x1c>
 800d1de:	15ea      	asrs	r2, r5, #23
 800d1e0:	3a86      	subs	r2, #134	@ 0x86
 800d1e2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d1e6:	ee07 3a90 	vmov	s15, r3
 800d1ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d1ee:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800d298 <__ieee754_rem_pio2f+0x258>
 800d1f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d1f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d1fa:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d1fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d202:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d206:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d20a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d20e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d212:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d216:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d21e:	edcd 7a05 	vstr	s15, [sp, #20]
 800d222:	d11e      	bne.n	800d262 <__ieee754_rem_pio2f+0x222>
 800d224:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d22c:	bf0c      	ite	eq
 800d22e:	2301      	moveq	r3, #1
 800d230:	2302      	movne	r3, #2
 800d232:	491a      	ldr	r1, [pc, #104]	@ (800d29c <__ieee754_rem_pio2f+0x25c>)
 800d234:	9101      	str	r1, [sp, #4]
 800d236:	2102      	movs	r1, #2
 800d238:	9100      	str	r1, [sp, #0]
 800d23a:	a803      	add	r0, sp, #12
 800d23c:	4621      	mov	r1, r4
 800d23e:	f000 f837 	bl	800d2b0 <__kernel_rem_pio2f>
 800d242:	2e00      	cmp	r6, #0
 800d244:	f6bf af2f 	bge.w	800d0a6 <__ieee754_rem_pio2f+0x66>
 800d248:	edd4 7a00 	vldr	s15, [r4]
 800d24c:	eef1 7a67 	vneg.f32	s15, s15
 800d250:	edc4 7a00 	vstr	s15, [r4]
 800d254:	edd4 7a01 	vldr	s15, [r4, #4]
 800d258:	eef1 7a67 	vneg.f32	s15, s15
 800d25c:	edc4 7a01 	vstr	s15, [r4, #4]
 800d260:	e782      	b.n	800d168 <__ieee754_rem_pio2f+0x128>
 800d262:	2303      	movs	r3, #3
 800d264:	e7e5      	b.n	800d232 <__ieee754_rem_pio2f+0x1f2>
 800d266:	bf00      	nop
 800d268:	3f490fd8 	.word	0x3f490fd8
 800d26c:	4016cbe3 	.word	0x4016cbe3
 800d270:	3fc90f80 	.word	0x3fc90f80
 800d274:	3fc90fd0 	.word	0x3fc90fd0
 800d278:	37354400 	.word	0x37354400
 800d27c:	37354443 	.word	0x37354443
 800d280:	2e85a308 	.word	0x2e85a308
 800d284:	43490f80 	.word	0x43490f80
 800d288:	3f22f984 	.word	0x3f22f984
 800d28c:	0800e5d8 	.word	0x0800e5d8
 800d290:	2e85a300 	.word	0x2e85a300
 800d294:	248d3132 	.word	0x248d3132
 800d298:	43800000 	.word	0x43800000
 800d29c:	0800e658 	.word	0x0800e658

0800d2a0 <fabsf>:
 800d2a0:	ee10 3a10 	vmov	r3, s0
 800d2a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d2a8:	ee00 3a10 	vmov	s0, r3
 800d2ac:	4770      	bx	lr
	...

0800d2b0 <__kernel_rem_pio2f>:
 800d2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b4:	ed2d 8b04 	vpush	{d8-d9}
 800d2b8:	b0d9      	sub	sp, #356	@ 0x164
 800d2ba:	4690      	mov	r8, r2
 800d2bc:	9001      	str	r0, [sp, #4]
 800d2be:	4ab9      	ldr	r2, [pc, #740]	@ (800d5a4 <__kernel_rem_pio2f+0x2f4>)
 800d2c0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800d2c2:	f118 0f04 	cmn.w	r8, #4
 800d2c6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800d2ca:	460f      	mov	r7, r1
 800d2cc:	f103 3bff 	add.w	fp, r3, #4294967295
 800d2d0:	db27      	blt.n	800d322 <__kernel_rem_pio2f+0x72>
 800d2d2:	f1b8 0203 	subs.w	r2, r8, #3
 800d2d6:	bf48      	it	mi
 800d2d8:	f108 0204 	addmi.w	r2, r8, #4
 800d2dc:	10d2      	asrs	r2, r2, #3
 800d2de:	1c55      	adds	r5, r2, #1
 800d2e0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d2e2:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800d5b4 <__kernel_rem_pio2f+0x304>
 800d2e6:	00e8      	lsls	r0, r5, #3
 800d2e8:	eba2 060b 	sub.w	r6, r2, fp
 800d2ec:	9002      	str	r0, [sp, #8]
 800d2ee:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800d2f2:	eb0a 0c0b 	add.w	ip, sl, fp
 800d2f6:	ac1c      	add	r4, sp, #112	@ 0x70
 800d2f8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800d2fc:	2000      	movs	r0, #0
 800d2fe:	4560      	cmp	r0, ip
 800d300:	dd11      	ble.n	800d326 <__kernel_rem_pio2f+0x76>
 800d302:	a91c      	add	r1, sp, #112	@ 0x70
 800d304:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800d308:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800d30c:	f04f 0c00 	mov.w	ip, #0
 800d310:	45d4      	cmp	ip, sl
 800d312:	dc27      	bgt.n	800d364 <__kernel_rem_pio2f+0xb4>
 800d314:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d318:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800d5b4 <__kernel_rem_pio2f+0x304>
 800d31c:	4606      	mov	r6, r0
 800d31e:	2400      	movs	r4, #0
 800d320:	e016      	b.n	800d350 <__kernel_rem_pio2f+0xa0>
 800d322:	2200      	movs	r2, #0
 800d324:	e7db      	b.n	800d2de <__kernel_rem_pio2f+0x2e>
 800d326:	42c6      	cmn	r6, r0
 800d328:	bf5d      	ittte	pl
 800d32a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800d32e:	ee07 1a90 	vmovpl	s15, r1
 800d332:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d336:	eef0 7a47 	vmovmi.f32	s15, s14
 800d33a:	ece4 7a01 	vstmia	r4!, {s15}
 800d33e:	3001      	adds	r0, #1
 800d340:	e7dd      	b.n	800d2fe <__kernel_rem_pio2f+0x4e>
 800d342:	ecfe 6a01 	vldmia	lr!, {s13}
 800d346:	ed96 7a00 	vldr	s14, [r6]
 800d34a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d34e:	3401      	adds	r4, #1
 800d350:	455c      	cmp	r4, fp
 800d352:	f1a6 0604 	sub.w	r6, r6, #4
 800d356:	ddf4      	ble.n	800d342 <__kernel_rem_pio2f+0x92>
 800d358:	ece9 7a01 	vstmia	r9!, {s15}
 800d35c:	f10c 0c01 	add.w	ip, ip, #1
 800d360:	3004      	adds	r0, #4
 800d362:	e7d5      	b.n	800d310 <__kernel_rem_pio2f+0x60>
 800d364:	a908      	add	r1, sp, #32
 800d366:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d36a:	9104      	str	r1, [sp, #16]
 800d36c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d36e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800d5b0 <__kernel_rem_pio2f+0x300>
 800d372:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800d5ac <__kernel_rem_pio2f+0x2fc>
 800d376:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d37a:	9203      	str	r2, [sp, #12]
 800d37c:	4654      	mov	r4, sl
 800d37e:	00a2      	lsls	r2, r4, #2
 800d380:	9205      	str	r2, [sp, #20]
 800d382:	aa58      	add	r2, sp, #352	@ 0x160
 800d384:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d388:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800d38c:	a944      	add	r1, sp, #272	@ 0x110
 800d38e:	aa08      	add	r2, sp, #32
 800d390:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800d394:	4694      	mov	ip, r2
 800d396:	4626      	mov	r6, r4
 800d398:	2e00      	cmp	r6, #0
 800d39a:	f1a0 0004 	sub.w	r0, r0, #4
 800d39e:	dc4c      	bgt.n	800d43a <__kernel_rem_pio2f+0x18a>
 800d3a0:	4628      	mov	r0, r5
 800d3a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d3a6:	f000 f9f5 	bl	800d794 <scalbnf>
 800d3aa:	eeb0 8a40 	vmov.f32	s16, s0
 800d3ae:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800d3b2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d3b6:	f000 fa53 	bl	800d860 <floorf>
 800d3ba:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800d3be:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d3c2:	2d00      	cmp	r5, #0
 800d3c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3c8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d3cc:	ee17 9a90 	vmov	r9, s15
 800d3d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3d4:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d3d8:	dd41      	ble.n	800d45e <__kernel_rem_pio2f+0x1ae>
 800d3da:	f104 3cff 	add.w	ip, r4, #4294967295
 800d3de:	a908      	add	r1, sp, #32
 800d3e0:	f1c5 0e08 	rsb	lr, r5, #8
 800d3e4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800d3e8:	fa46 f00e 	asr.w	r0, r6, lr
 800d3ec:	4481      	add	r9, r0
 800d3ee:	fa00 f00e 	lsl.w	r0, r0, lr
 800d3f2:	1a36      	subs	r6, r6, r0
 800d3f4:	f1c5 0007 	rsb	r0, r5, #7
 800d3f8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800d3fc:	4106      	asrs	r6, r0
 800d3fe:	2e00      	cmp	r6, #0
 800d400:	dd3c      	ble.n	800d47c <__kernel_rem_pio2f+0x1cc>
 800d402:	f04f 0e00 	mov.w	lr, #0
 800d406:	f109 0901 	add.w	r9, r9, #1
 800d40a:	4670      	mov	r0, lr
 800d40c:	4574      	cmp	r4, lr
 800d40e:	dc68      	bgt.n	800d4e2 <__kernel_rem_pio2f+0x232>
 800d410:	2d00      	cmp	r5, #0
 800d412:	dd03      	ble.n	800d41c <__kernel_rem_pio2f+0x16c>
 800d414:	2d01      	cmp	r5, #1
 800d416:	d074      	beq.n	800d502 <__kernel_rem_pio2f+0x252>
 800d418:	2d02      	cmp	r5, #2
 800d41a:	d07d      	beq.n	800d518 <__kernel_rem_pio2f+0x268>
 800d41c:	2e02      	cmp	r6, #2
 800d41e:	d12d      	bne.n	800d47c <__kernel_rem_pio2f+0x1cc>
 800d420:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d424:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d428:	b340      	cbz	r0, 800d47c <__kernel_rem_pio2f+0x1cc>
 800d42a:	4628      	mov	r0, r5
 800d42c:	9306      	str	r3, [sp, #24]
 800d42e:	f000 f9b1 	bl	800d794 <scalbnf>
 800d432:	9b06      	ldr	r3, [sp, #24]
 800d434:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d438:	e020      	b.n	800d47c <__kernel_rem_pio2f+0x1cc>
 800d43a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d43e:	3e01      	subs	r6, #1
 800d440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d448:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d44c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d450:	ecac 0a01 	vstmia	ip!, {s0}
 800d454:	ed90 0a00 	vldr	s0, [r0]
 800d458:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d45c:	e79c      	b.n	800d398 <__kernel_rem_pio2f+0xe8>
 800d45e:	d105      	bne.n	800d46c <__kernel_rem_pio2f+0x1bc>
 800d460:	1e60      	subs	r0, r4, #1
 800d462:	a908      	add	r1, sp, #32
 800d464:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800d468:	11f6      	asrs	r6, r6, #7
 800d46a:	e7c8      	b.n	800d3fe <__kernel_rem_pio2f+0x14e>
 800d46c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d470:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d478:	da31      	bge.n	800d4de <__kernel_rem_pio2f+0x22e>
 800d47a:	2600      	movs	r6, #0
 800d47c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d484:	f040 8098 	bne.w	800d5b8 <__kernel_rem_pio2f+0x308>
 800d488:	1e60      	subs	r0, r4, #1
 800d48a:	2200      	movs	r2, #0
 800d48c:	4550      	cmp	r0, sl
 800d48e:	da4b      	bge.n	800d528 <__kernel_rem_pio2f+0x278>
 800d490:	2a00      	cmp	r2, #0
 800d492:	d065      	beq.n	800d560 <__kernel_rem_pio2f+0x2b0>
 800d494:	3c01      	subs	r4, #1
 800d496:	ab08      	add	r3, sp, #32
 800d498:	3d08      	subs	r5, #8
 800d49a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d0f8      	beq.n	800d494 <__kernel_rem_pio2f+0x1e4>
 800d4a2:	4628      	mov	r0, r5
 800d4a4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d4a8:	f000 f974 	bl	800d794 <scalbnf>
 800d4ac:	1c63      	adds	r3, r4, #1
 800d4ae:	aa44      	add	r2, sp, #272	@ 0x110
 800d4b0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800d5b0 <__kernel_rem_pio2f+0x300>
 800d4b4:	0099      	lsls	r1, r3, #2
 800d4b6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d4ba:	4623      	mov	r3, r4
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	f280 80a9 	bge.w	800d614 <__kernel_rem_pio2f+0x364>
 800d4c2:	4623      	mov	r3, r4
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f2c0 80c7 	blt.w	800d658 <__kernel_rem_pio2f+0x3a8>
 800d4ca:	aa44      	add	r2, sp, #272	@ 0x110
 800d4cc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d4d0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800d5a8 <__kernel_rem_pio2f+0x2f8>
 800d4d4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800d5b4 <__kernel_rem_pio2f+0x304>
 800d4d8:	2000      	movs	r0, #0
 800d4da:	1ae2      	subs	r2, r4, r3
 800d4dc:	e0b1      	b.n	800d642 <__kernel_rem_pio2f+0x392>
 800d4de:	2602      	movs	r6, #2
 800d4e0:	e78f      	b.n	800d402 <__kernel_rem_pio2f+0x152>
 800d4e2:	f852 1b04 	ldr.w	r1, [r2], #4
 800d4e6:	b948      	cbnz	r0, 800d4fc <__kernel_rem_pio2f+0x24c>
 800d4e8:	b121      	cbz	r1, 800d4f4 <__kernel_rem_pio2f+0x244>
 800d4ea:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800d4ee:	f842 1c04 	str.w	r1, [r2, #-4]
 800d4f2:	2101      	movs	r1, #1
 800d4f4:	f10e 0e01 	add.w	lr, lr, #1
 800d4f8:	4608      	mov	r0, r1
 800d4fa:	e787      	b.n	800d40c <__kernel_rem_pio2f+0x15c>
 800d4fc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800d500:	e7f5      	b.n	800d4ee <__kernel_rem_pio2f+0x23e>
 800d502:	f104 3cff 	add.w	ip, r4, #4294967295
 800d506:	aa08      	add	r2, sp, #32
 800d508:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d50c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d510:	a908      	add	r1, sp, #32
 800d512:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800d516:	e781      	b.n	800d41c <__kernel_rem_pio2f+0x16c>
 800d518:	f104 3cff 	add.w	ip, r4, #4294967295
 800d51c:	aa08      	add	r2, sp, #32
 800d51e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d522:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d526:	e7f3      	b.n	800d510 <__kernel_rem_pio2f+0x260>
 800d528:	a908      	add	r1, sp, #32
 800d52a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d52e:	3801      	subs	r0, #1
 800d530:	430a      	orrs	r2, r1
 800d532:	e7ab      	b.n	800d48c <__kernel_rem_pio2f+0x1dc>
 800d534:	3201      	adds	r2, #1
 800d536:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800d53a:	2e00      	cmp	r6, #0
 800d53c:	d0fa      	beq.n	800d534 <__kernel_rem_pio2f+0x284>
 800d53e:	9905      	ldr	r1, [sp, #20]
 800d540:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800d544:	eb0d 0001 	add.w	r0, sp, r1
 800d548:	18e6      	adds	r6, r4, r3
 800d54a:	a91c      	add	r1, sp, #112	@ 0x70
 800d54c:	f104 0c01 	add.w	ip, r4, #1
 800d550:	384c      	subs	r0, #76	@ 0x4c
 800d552:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800d556:	4422      	add	r2, r4
 800d558:	4562      	cmp	r2, ip
 800d55a:	da04      	bge.n	800d566 <__kernel_rem_pio2f+0x2b6>
 800d55c:	4614      	mov	r4, r2
 800d55e:	e70e      	b.n	800d37e <__kernel_rem_pio2f+0xce>
 800d560:	9804      	ldr	r0, [sp, #16]
 800d562:	2201      	movs	r2, #1
 800d564:	e7e7      	b.n	800d536 <__kernel_rem_pio2f+0x286>
 800d566:	9903      	ldr	r1, [sp, #12]
 800d568:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d56c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800d570:	9105      	str	r1, [sp, #20]
 800d572:	ee07 1a90 	vmov	s15, r1
 800d576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d57a:	2400      	movs	r4, #0
 800d57c:	ece6 7a01 	vstmia	r6!, {s15}
 800d580:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800d5b4 <__kernel_rem_pio2f+0x304>
 800d584:	46b1      	mov	r9, r6
 800d586:	455c      	cmp	r4, fp
 800d588:	dd04      	ble.n	800d594 <__kernel_rem_pio2f+0x2e4>
 800d58a:	ece0 7a01 	vstmia	r0!, {s15}
 800d58e:	f10c 0c01 	add.w	ip, ip, #1
 800d592:	e7e1      	b.n	800d558 <__kernel_rem_pio2f+0x2a8>
 800d594:	ecfe 6a01 	vldmia	lr!, {s13}
 800d598:	ed39 7a01 	vldmdb	r9!, {s14}
 800d59c:	3401      	adds	r4, #1
 800d59e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d5a2:	e7f0      	b.n	800d586 <__kernel_rem_pio2f+0x2d6>
 800d5a4:	0800e99c 	.word	0x0800e99c
 800d5a8:	0800e970 	.word	0x0800e970
 800d5ac:	43800000 	.word	0x43800000
 800d5b0:	3b800000 	.word	0x3b800000
 800d5b4:	00000000 	.word	0x00000000
 800d5b8:	9b02      	ldr	r3, [sp, #8]
 800d5ba:	eeb0 0a48 	vmov.f32	s0, s16
 800d5be:	eba3 0008 	sub.w	r0, r3, r8
 800d5c2:	f000 f8e7 	bl	800d794 <scalbnf>
 800d5c6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800d5ac <__kernel_rem_pio2f+0x2fc>
 800d5ca:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d2:	db19      	blt.n	800d608 <__kernel_rem_pio2f+0x358>
 800d5d4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800d5b0 <__kernel_rem_pio2f+0x300>
 800d5d8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d5dc:	aa08      	add	r2, sp, #32
 800d5de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d5e2:	3508      	adds	r5, #8
 800d5e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5e8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d5ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d5f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d5f4:	ee10 3a10 	vmov	r3, s0
 800d5f8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d5fc:	ee17 3a90 	vmov	r3, s15
 800d600:	3401      	adds	r4, #1
 800d602:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d606:	e74c      	b.n	800d4a2 <__kernel_rem_pio2f+0x1f2>
 800d608:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d60c:	aa08      	add	r2, sp, #32
 800d60e:	ee10 3a10 	vmov	r3, s0
 800d612:	e7f6      	b.n	800d602 <__kernel_rem_pio2f+0x352>
 800d614:	a808      	add	r0, sp, #32
 800d616:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d61a:	9001      	str	r0, [sp, #4]
 800d61c:	ee07 0a90 	vmov	s15, r0
 800d620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d624:	3b01      	subs	r3, #1
 800d626:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d62a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d62e:	ed62 7a01 	vstmdb	r2!, {s15}
 800d632:	e743      	b.n	800d4bc <__kernel_rem_pio2f+0x20c>
 800d634:	ecfc 6a01 	vldmia	ip!, {s13}
 800d638:	ecb5 7a01 	vldmia	r5!, {s14}
 800d63c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d640:	3001      	adds	r0, #1
 800d642:	4550      	cmp	r0, sl
 800d644:	dc01      	bgt.n	800d64a <__kernel_rem_pio2f+0x39a>
 800d646:	4282      	cmp	r2, r0
 800d648:	daf4      	bge.n	800d634 <__kernel_rem_pio2f+0x384>
 800d64a:	a858      	add	r0, sp, #352	@ 0x160
 800d64c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d650:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800d654:	3b01      	subs	r3, #1
 800d656:	e735      	b.n	800d4c4 <__kernel_rem_pio2f+0x214>
 800d658:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d65a:	2b02      	cmp	r3, #2
 800d65c:	dc09      	bgt.n	800d672 <__kernel_rem_pio2f+0x3c2>
 800d65e:	2b00      	cmp	r3, #0
 800d660:	dc2b      	bgt.n	800d6ba <__kernel_rem_pio2f+0x40a>
 800d662:	d044      	beq.n	800d6ee <__kernel_rem_pio2f+0x43e>
 800d664:	f009 0007 	and.w	r0, r9, #7
 800d668:	b059      	add	sp, #356	@ 0x164
 800d66a:	ecbd 8b04 	vpop	{d8-d9}
 800d66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d672:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d674:	2b03      	cmp	r3, #3
 800d676:	d1f5      	bne.n	800d664 <__kernel_rem_pio2f+0x3b4>
 800d678:	aa30      	add	r2, sp, #192	@ 0xc0
 800d67a:	1f0b      	subs	r3, r1, #4
 800d67c:	4413      	add	r3, r2
 800d67e:	461a      	mov	r2, r3
 800d680:	4620      	mov	r0, r4
 800d682:	2800      	cmp	r0, #0
 800d684:	f1a2 0204 	sub.w	r2, r2, #4
 800d688:	dc52      	bgt.n	800d730 <__kernel_rem_pio2f+0x480>
 800d68a:	4622      	mov	r2, r4
 800d68c:	2a01      	cmp	r2, #1
 800d68e:	f1a3 0304 	sub.w	r3, r3, #4
 800d692:	dc5d      	bgt.n	800d750 <__kernel_rem_pio2f+0x4a0>
 800d694:	ab30      	add	r3, sp, #192	@ 0xc0
 800d696:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800d5b4 <__kernel_rem_pio2f+0x304>
 800d69a:	440b      	add	r3, r1
 800d69c:	2c01      	cmp	r4, #1
 800d69e:	dc67      	bgt.n	800d770 <__kernel_rem_pio2f+0x4c0>
 800d6a0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800d6a4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800d6a8:	2e00      	cmp	r6, #0
 800d6aa:	d167      	bne.n	800d77c <__kernel_rem_pio2f+0x4cc>
 800d6ac:	edc7 6a00 	vstr	s13, [r7]
 800d6b0:	ed87 7a01 	vstr	s14, [r7, #4]
 800d6b4:	edc7 7a02 	vstr	s15, [r7, #8]
 800d6b8:	e7d4      	b.n	800d664 <__kernel_rem_pio2f+0x3b4>
 800d6ba:	ab30      	add	r3, sp, #192	@ 0xc0
 800d6bc:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800d5b4 <__kernel_rem_pio2f+0x304>
 800d6c0:	440b      	add	r3, r1
 800d6c2:	4622      	mov	r2, r4
 800d6c4:	2a00      	cmp	r2, #0
 800d6c6:	da24      	bge.n	800d712 <__kernel_rem_pio2f+0x462>
 800d6c8:	b34e      	cbz	r6, 800d71e <__kernel_rem_pio2f+0x46e>
 800d6ca:	eef1 7a47 	vneg.f32	s15, s14
 800d6ce:	edc7 7a00 	vstr	s15, [r7]
 800d6d2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800d6d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d6da:	aa31      	add	r2, sp, #196	@ 0xc4
 800d6dc:	2301      	movs	r3, #1
 800d6de:	429c      	cmp	r4, r3
 800d6e0:	da20      	bge.n	800d724 <__kernel_rem_pio2f+0x474>
 800d6e2:	b10e      	cbz	r6, 800d6e8 <__kernel_rem_pio2f+0x438>
 800d6e4:	eef1 7a67 	vneg.f32	s15, s15
 800d6e8:	edc7 7a01 	vstr	s15, [r7, #4]
 800d6ec:	e7ba      	b.n	800d664 <__kernel_rem_pio2f+0x3b4>
 800d6ee:	ab30      	add	r3, sp, #192	@ 0xc0
 800d6f0:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800d5b4 <__kernel_rem_pio2f+0x304>
 800d6f4:	440b      	add	r3, r1
 800d6f6:	2c00      	cmp	r4, #0
 800d6f8:	da05      	bge.n	800d706 <__kernel_rem_pio2f+0x456>
 800d6fa:	b10e      	cbz	r6, 800d700 <__kernel_rem_pio2f+0x450>
 800d6fc:	eef1 7a67 	vneg.f32	s15, s15
 800d700:	edc7 7a00 	vstr	s15, [r7]
 800d704:	e7ae      	b.n	800d664 <__kernel_rem_pio2f+0x3b4>
 800d706:	ed33 7a01 	vldmdb	r3!, {s14}
 800d70a:	3c01      	subs	r4, #1
 800d70c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d710:	e7f1      	b.n	800d6f6 <__kernel_rem_pio2f+0x446>
 800d712:	ed73 7a01 	vldmdb	r3!, {s15}
 800d716:	3a01      	subs	r2, #1
 800d718:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d71c:	e7d2      	b.n	800d6c4 <__kernel_rem_pio2f+0x414>
 800d71e:	eef0 7a47 	vmov.f32	s15, s14
 800d722:	e7d4      	b.n	800d6ce <__kernel_rem_pio2f+0x41e>
 800d724:	ecb2 7a01 	vldmia	r2!, {s14}
 800d728:	3301      	adds	r3, #1
 800d72a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d72e:	e7d6      	b.n	800d6de <__kernel_rem_pio2f+0x42e>
 800d730:	edd2 7a00 	vldr	s15, [r2]
 800d734:	edd2 6a01 	vldr	s13, [r2, #4]
 800d738:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d73c:	3801      	subs	r0, #1
 800d73e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d742:	ed82 7a00 	vstr	s14, [r2]
 800d746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d74a:	edc2 7a01 	vstr	s15, [r2, #4]
 800d74e:	e798      	b.n	800d682 <__kernel_rem_pio2f+0x3d2>
 800d750:	edd3 7a00 	vldr	s15, [r3]
 800d754:	edd3 6a01 	vldr	s13, [r3, #4]
 800d758:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d75c:	3a01      	subs	r2, #1
 800d75e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d762:	ed83 7a00 	vstr	s14, [r3]
 800d766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d76a:	edc3 7a01 	vstr	s15, [r3, #4]
 800d76e:	e78d      	b.n	800d68c <__kernel_rem_pio2f+0x3dc>
 800d770:	ed33 7a01 	vldmdb	r3!, {s14}
 800d774:	3c01      	subs	r4, #1
 800d776:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d77a:	e78f      	b.n	800d69c <__kernel_rem_pio2f+0x3ec>
 800d77c:	eef1 6a66 	vneg.f32	s13, s13
 800d780:	eeb1 7a47 	vneg.f32	s14, s14
 800d784:	edc7 6a00 	vstr	s13, [r7]
 800d788:	ed87 7a01 	vstr	s14, [r7, #4]
 800d78c:	eef1 7a67 	vneg.f32	s15, s15
 800d790:	e790      	b.n	800d6b4 <__kernel_rem_pio2f+0x404>
 800d792:	bf00      	nop

0800d794 <scalbnf>:
 800d794:	ee10 3a10 	vmov	r3, s0
 800d798:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d79c:	d02b      	beq.n	800d7f6 <scalbnf+0x62>
 800d79e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d7a2:	d302      	bcc.n	800d7aa <scalbnf+0x16>
 800d7a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d7a8:	4770      	bx	lr
 800d7aa:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d7ae:	d123      	bne.n	800d7f8 <scalbnf+0x64>
 800d7b0:	4b24      	ldr	r3, [pc, #144]	@ (800d844 <scalbnf+0xb0>)
 800d7b2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800d848 <scalbnf+0xb4>
 800d7b6:	4298      	cmp	r0, r3
 800d7b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d7bc:	db17      	blt.n	800d7ee <scalbnf+0x5a>
 800d7be:	ee10 3a10 	vmov	r3, s0
 800d7c2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d7c6:	3a19      	subs	r2, #25
 800d7c8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d7cc:	4288      	cmp	r0, r1
 800d7ce:	dd15      	ble.n	800d7fc <scalbnf+0x68>
 800d7d0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800d84c <scalbnf+0xb8>
 800d7d4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800d850 <scalbnf+0xbc>
 800d7d8:	ee10 3a10 	vmov	r3, s0
 800d7dc:	eeb0 7a67 	vmov.f32	s14, s15
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	bfb8      	it	lt
 800d7e4:	eef0 7a66 	vmovlt.f32	s15, s13
 800d7e8:	ee27 0a87 	vmul.f32	s0, s15, s14
 800d7ec:	4770      	bx	lr
 800d7ee:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d854 <scalbnf+0xc0>
 800d7f2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d7f6:	4770      	bx	lr
 800d7f8:	0dd2      	lsrs	r2, r2, #23
 800d7fa:	e7e5      	b.n	800d7c8 <scalbnf+0x34>
 800d7fc:	4410      	add	r0, r2
 800d7fe:	28fe      	cmp	r0, #254	@ 0xfe
 800d800:	dce6      	bgt.n	800d7d0 <scalbnf+0x3c>
 800d802:	2800      	cmp	r0, #0
 800d804:	dd06      	ble.n	800d814 <scalbnf+0x80>
 800d806:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d80a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d80e:	ee00 3a10 	vmov	s0, r3
 800d812:	4770      	bx	lr
 800d814:	f110 0f16 	cmn.w	r0, #22
 800d818:	da09      	bge.n	800d82e <scalbnf+0x9a>
 800d81a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800d854 <scalbnf+0xc0>
 800d81e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800d858 <scalbnf+0xc4>
 800d822:	ee10 3a10 	vmov	r3, s0
 800d826:	eeb0 7a67 	vmov.f32	s14, s15
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	e7d9      	b.n	800d7e2 <scalbnf+0x4e>
 800d82e:	3019      	adds	r0, #25
 800d830:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d834:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d838:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800d85c <scalbnf+0xc8>
 800d83c:	ee07 3a90 	vmov	s15, r3
 800d840:	e7d7      	b.n	800d7f2 <scalbnf+0x5e>
 800d842:	bf00      	nop
 800d844:	ffff3cb0 	.word	0xffff3cb0
 800d848:	4c000000 	.word	0x4c000000
 800d84c:	7149f2ca 	.word	0x7149f2ca
 800d850:	f149f2ca 	.word	0xf149f2ca
 800d854:	0da24260 	.word	0x0da24260
 800d858:	8da24260 	.word	0x8da24260
 800d85c:	33000000 	.word	0x33000000

0800d860 <floorf>:
 800d860:	ee10 3a10 	vmov	r3, s0
 800d864:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d868:	3a7f      	subs	r2, #127	@ 0x7f
 800d86a:	2a16      	cmp	r2, #22
 800d86c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d870:	dc2b      	bgt.n	800d8ca <floorf+0x6a>
 800d872:	2a00      	cmp	r2, #0
 800d874:	da12      	bge.n	800d89c <floorf+0x3c>
 800d876:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d8dc <floorf+0x7c>
 800d87a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d87e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d886:	dd06      	ble.n	800d896 <floorf+0x36>
 800d888:	2b00      	cmp	r3, #0
 800d88a:	da24      	bge.n	800d8d6 <floorf+0x76>
 800d88c:	2900      	cmp	r1, #0
 800d88e:	4b14      	ldr	r3, [pc, #80]	@ (800d8e0 <floorf+0x80>)
 800d890:	bf08      	it	eq
 800d892:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800d896:	ee00 3a10 	vmov	s0, r3
 800d89a:	4770      	bx	lr
 800d89c:	4911      	ldr	r1, [pc, #68]	@ (800d8e4 <floorf+0x84>)
 800d89e:	4111      	asrs	r1, r2
 800d8a0:	420b      	tst	r3, r1
 800d8a2:	d0fa      	beq.n	800d89a <floorf+0x3a>
 800d8a4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800d8dc <floorf+0x7c>
 800d8a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d8ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8b4:	ddef      	ble.n	800d896 <floorf+0x36>
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	bfbe      	ittt	lt
 800d8ba:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800d8be:	fa40 f202 	asrlt.w	r2, r0, r2
 800d8c2:	189b      	addlt	r3, r3, r2
 800d8c4:	ea23 0301 	bic.w	r3, r3, r1
 800d8c8:	e7e5      	b.n	800d896 <floorf+0x36>
 800d8ca:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d8ce:	d3e4      	bcc.n	800d89a <floorf+0x3a>
 800d8d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d8d4:	4770      	bx	lr
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	e7dd      	b.n	800d896 <floorf+0x36>
 800d8da:	bf00      	nop
 800d8dc:	7149f2ca 	.word	0x7149f2ca
 800d8e0:	bf800000 	.word	0xbf800000
 800d8e4:	007fffff 	.word	0x007fffff

0800d8e8 <_init>:
 800d8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ea:	bf00      	nop
 800d8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ee:	bc08      	pop	{r3}
 800d8f0:	469e      	mov	lr, r3
 800d8f2:	4770      	bx	lr

0800d8f4 <_fini>:
 800d8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8f6:	bf00      	nop
 800d8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8fa:	bc08      	pop	{r3}
 800d8fc:	469e      	mov	lr, r3
 800d8fe:	4770      	bx	lr
